<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.ActivateKeyboardLayout">
    <summary>Sets the input locale identifier (formerly called the keyboard layout handle) for the calling thread or the current process. The input locale identifier specifies a locale as well as the physical layout of the keyboard.</summary>
    <param name="hkl">
      <para>Input locale identifier to be activated.</para>
      <para>The input locale identifier must have been loaded by a previous call to the <see cref="LoadKeyboardLayout" /> function. This parameter must be either the handle to a keyboard layout or one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HKL_NEXT</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Selects the next locale identifier in the circular list of loaded locale identifiers maintained by the system.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HKL_PREV</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>Selects the previous locale identifier in the circular list of loaded locale identifiers maintained by the system.</description>
        </listheader>
      </list>
    </param>
    <param name="Flags">
      <para>Specifies how the input locale identifier is to be activated. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_REORDER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>If this bit is set, the system's circular list of loaded locale identifiers is reordered by moving the locale identifier to the head of the list. If this bit is not set, the list is rotated without a change of order.<para>For example, if a user had an English locale identifier active, as well as having French, German, and Spanish locale identifiers loaded (in that order), then activating the German locale identifier with the <b>KLF_REORDER</b> bit set would produce the following order: German, English, French, Spanish. Activating the German locale identifier without the <b>KLF_REORDER</b> bit set would produce the following order: German, Spanish, English, French.</para><para>If less than three locale identifiers are loaded, the value of this flag is irrelevant.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_RESET</b>
                </term>
              </listheader>
              <listheader>
                <term>0x40000000</term>
              </listheader>
            </list>
          </description>
          <description>If set but <b>KLF_SHIFTLOCK</b> is not set, the Caps Lock state is turned off by pressing the Caps Lock key again. If set and <b>KLF_SHIFTLOCK</b> is also set, the Caps Lock state is turned off by pressing either SHIFT key.<para>These two methods are mutually exclusive, and the setting persists as part of the User's profile in the registry.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_SETFORPROCESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Activates the specified locale identifier for the entire process and sends the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-inputlangchange">WM_INPUTLANGCHANGE</a> message to the current thread's focus or active window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_SHIFTLOCK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00010000</term>
              </listheader>
            </list>
          </description>
          <description>This is used with <b>KLF_RESET</b>. See <b>KLF_RESET</b> for an explanation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_UNLOADPREVIOUS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag is unsupported. Use the <see cref="UnloadKeyboardLayout" /> function instead.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>The return value is of type<b>HKL</b>. If the function succeeds, the return value is the previous input locale identifier. Otherwise, it is zero.</para>
      <para>To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.AddClipboardFormatListener">
    <summary>Places the given window in the system-maintained clipboard format listener list.</summary>
    <param name="hwnd">A handle to the window to be placed in the clipboard format listener list.</param>
    <returns>Returns <b>TRUE</b> if successful, <b>FALSE</b> otherwise. Call <see cref="GetLastError" /> for additional details.</returns>
  </member>
  <member name="Windows.AdjustWindowRect">
    <summary>
      <para>Calculates the required size of the window rectangle, based on the desired client-rectangle size. The window rectangle can then be passed to the <see cref="CreateWindow" /> function to create a window whose client area is the desired size.</para>
      <para>To specify an extended window style, use the <see cref="AdjustWindowRectEx" /> function.</para>
    </summary>
    <param name="lpRect">A pointer to a <see cref="RECT" /> structure that contains the coordinates of the top-left and bottom-right corners of the desired client area. When the function returns, the structure contains the coordinates of the top-left and bottom-right corners of the window to accommodate the desired client area.</param>
    <param name="dwStyle">The <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style</a> of the window whose required size is to be calculated. Note that you cannot specify the <b>WS_OVERLAPPED</b> style.</param>
    <param name="bMenu">Indicates whether the window has a menu.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AdjustWindowRectEx">
    <summary>Calculates the required size of the window rectangle, based on the desired size of the client rectangle. The window rectangle can then be passed to the <see cref="CreateWindowEx" /> function to create a window whose client area is the desired size.</summary>
    <param name="lpRect">A pointer to a <see cref="RECT" /> structure that contains the coordinates of the top-left and bottom-right corners of the desired client area. When the function returns, the structure contains the coordinates of the top-left and bottom-right corners of the window to accommodate the desired client area.</param>
    <param name="dwStyle">The <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style</a> of the window whose required size is to be calculated. Note that you cannot specify the <b>WS_OVERLAPPED</b> style.</param>
    <param name="bMenu">Indicates whether the window has a menu.</param>
    <param name="dwExStyle">The <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window style</a> of the window whose required size is to be calculated.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AdjustWindowRectExForDpi">
    <summary>Calculates the required size of the window rectangle, based on the desired size of the client rectangle and the provided DPI. This window rectangle can then be passed to the <see cref="CreateWindowEx" /> function to create a window with a client area of the desired size.</summary>
    <param name="lpRect">A pointer to a <b>RECT</b> structure that contains the coordinates of the top-left and bottom-right corners of the desired client area. When the function returns, the structure contains the coordinates of the top-left and bottom-right corners of the window to accommodate the desired client area.</param>
    <param name="dwStyle">The <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">Window Style</a> of the window whose required size is to be calculated. Note that you cannot specify the <b>WS_OVERLAPPED</b> style.</param>
    <param name="bMenu">Indicates whether the window has a menu.</param>
    <param name="dwExStyle">The <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">Extended Window Style</a> of the window whose required size is to be calculated.</param>
    <param name="dpi">The DPI to use for scaling.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AllowSetForegroundWindow">
    <summary>Enables the specified process to set the foreground window using the <see cref="SetForegroundWindow" /> function. The calling process must already be able to set the foreground window. For more information, see Remarks later in this topic.</summary>
    <param name="dwProcessId">The identifier of the process that will be enabled to set the foreground window. If this parameter is <b>ASFW_ANY</b>, all processes will be enabled to set the foreground window.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. The function will fail if the calling process cannot set the foreground window. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AnimateWindow">
    <summary>Enables you to produce special effects when showing or hiding windows. There are four types of animation: roll, slide, collapse or expand, and alpha-blended fade.</summary>
    <param name="hWnd">A handle to the window to animate. The calling thread must own this window.</param>
    <param name="dwTime">The time it takes to play the animation, in milliseconds. Typically, an animation takes 200 milliseconds to play.</param>
    <param name="dwFlags">
      <para>The type of animation. This parameter can be one or more of the following values. Note that, by default, these flags take effect when showing a window. To take effect when hiding a window, use <b>AW_HIDE</b> and a logical OR operator with the appropriate flags.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AW_ACTIVATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00020000</term>
              </listheader>
            </list>
          </description>
          <description>Activates the window. Do not use this value with <b>AW_HIDE</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AW_BLEND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00080000</term>
              </listheader>
            </list>
          </description>
          <description>Uses a fade effect. This flag can be used only if <i>hwnd</i> is a top-level window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AW_CENTER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Makes the window appear to collapse inward if <b>AW_HIDE</b> is used or expand outward if the <b>AW_HIDE</b> is not used. The various direction flags have no effect.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AW_HIDE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00010000</term>
              </listheader>
            </list>
          </description>
          <description>Hides the window. By default, the window is shown.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AW_HOR_POSITIVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Animates the window from left to right. This flag can be used with roll or slide animation. It is ignored when used with <b>AW_CENTER</b> or <b>AW_BLEND</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AW_HOR_NEGATIVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Animates the window from right to left. This flag can be used with roll or slide animation. It is ignored when used with <b>AW_CENTER</b> or <b>AW_BLEND</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AW_SLIDE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00040000</term>
              </listheader>
            </list>
          </description>
          <description>Uses slide animation. By default, roll animation is used. This flag is ignored when used with <b>AW_CENTER</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AW_VER_POSITIVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Animates the window from top to bottom. This flag can be used with roll or slide animation. It is ignored when used with <b>AW_CENTER</b> or <b>AW_BLEND</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AW_VER_NEGATIVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Animates the window from bottom to top. This flag can be used with roll or slide animation. It is ignored when used with <b>AW_CENTER</b> or <b>AW_BLEND</b>.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. The function will fail in the following situations:</para>
      <list type="bullet">
        <item>
          <description>If the window is already visible and you are trying to show the window.</description>
        </item>
        <item>
          <description>If the window is already hidden and you are trying to hide the window.</description>
        </item>
        <item>
          <description>If there is no direction specified for the slide or roll animation.</description>
        </item>
        <item>
          <description>When trying to animate a child window with <b>AW_BLEND</b>.</description>
        </item>
        <item>
          <description>If the thread does not own the window. Note that, in this case, <b>AnimateWindow</b> fails but <see cref="GetLastError" /> returns <b>ERROR_SUCCESS</b>.</description>
        </item>
      </list>To get extended error information, call the <see cref="GetLastError" /> function.</returns>
  </member>
  <member name="Windows.AnyPopup">
    <summary>
      <para>Indicates whether an owned, visible, top-level pop-up, or overlapped window exists on the screen. The function searches the entire screen, not just the calling application's client area.</para>
      <para>This function is provided only for compatibility with 16-bit versions of Windows. It is generally not useful.</para>
    </summary>
    <returns>
      <para>If a pop-up window exists, the return value is nonzero, even if the pop-up window is completely covered by other windows.</para>
      <para>If a pop-up window does not exist, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.AppendMenu">
    <summary>Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item.</summary>
    <param name="hMenu">A handle to the menu bar, drop-down menu, submenu, or shortcut menu to be changed.</param>
    <param name="uFlags">
      <para>Controls the appearance and behavior of the new menu item. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>Uses a bitmap as the menu item. The <i>lpNewItem</i> parameter contains a handle to the bitmap.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_CHECKED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008L</term>
              </listheader>
            </list>
          </description>
          <description>Places a check mark next to the menu item. If the application provides check-mark bitmaps (see <see cref="SetMenuItemBitmaps" />, this flag displays the check-mark bitmap next to the menu item.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_DISABLED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>Disables the menu item so that it cannot be selected, but the flag does not gray it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_ENABLED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Enables the menu item so that it can be selected, and restores it from its grayed state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_GRAYED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>Disables the menu item and grays it so that it cannot be selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_MENUBARBREAK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020L</term>
              </listheader>
            </list>
          </description>
          <description>Functions the same as the <b>MF_MENUBREAK</b> flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_MENUBREAK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040L</term>
              </listheader>
            </list>
          </description>
          <description>Places the item on a new line (for a menu bar) or in a new column (for a drop-down menu, submenu, or shortcut menu) without separating columns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns the menu receives a <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> message to retrieve the width and height of the menu item. The <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_POPUP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010L</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the menu item opens a drop-down menu or submenu. The <i>uIDNewItem</i> parameter specifies a handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar, or a menu item that opens a submenu to a drop-down menu, submenu, or shortcut menu.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_SEPARATOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800L</term>
              </listheader>
            </list>
          </description>
          <description>Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted. The <i>lpNewItem</i> and <i>uIDNewItem</i> parameters are ignored.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the menu item is a text string; the <i>lpNewItem</i> parameter is a pointer to the string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_UNCHECKED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Does not place a check mark next to the item (default). If the application supplies check-mark bitmaps (see <see cref="SetMenuItemBitmaps" />), this flag displays the clear bitmap next to the menu item.</description>
        </listheader>
      </list>
    </param>
    <param name="uIDNewItem">The identifier of the new menu item or, if the <i>uFlags</i> parameter is set to <b>MF_POPUP</b>, a handle to the drop-down menu or submenu.</param>
    <param name="lpNewItem">
      <para>The content of the new menu item. The interpretation of <i>lpNewItem</i> depends on whether the <i>uFlags</i> parameter includes the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a bitmap handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>Contains an application-supplied value that can be used to maintain additional data related to the menu item. The value is in the <b>itemData</b> member of the structure pointed to by the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message sent when the menu is created or its appearance is updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a pointer to a null-terminated string.</description>
        </listheader>
      </list>
    </param>
    <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.AppendMenuA">
    <summary>Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item.</summary>
    <param name="hMenu">A handle to the menu bar, drop-down menu, submenu, or shortcut menu to be changed.</param>
    <param name="uFlags">
      <para>Controls the appearance and behavior of the new menu item. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>Uses a bitmap as the menu item. The <i>lpNewItem</i> parameter contains a handle to the bitmap.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_CHECKED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008L</term>
              </listheader>
            </list>
          </description>
          <description>Places a check mark next to the menu item. If the application provides check-mark bitmaps (see <see cref="SetMenuItemBitmaps" />, this flag displays the check-mark bitmap next to the menu item.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_DISABLED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>Disables the menu item so that it cannot be selected, but the flag does not gray it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_ENABLED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Enables the menu item so that it can be selected, and restores it from its grayed state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_GRAYED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>Disables the menu item and grays it so that it cannot be selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_MENUBARBREAK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020L</term>
              </listheader>
            </list>
          </description>
          <description>Functions the same as the <b>MF_MENUBREAK</b> flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_MENUBREAK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040L</term>
              </listheader>
            </list>
          </description>
          <description>Places the item on a new line (for a menu bar) or in a new column (for a drop-down menu, submenu, or shortcut menu) without separating columns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns the menu receives a <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> message to retrieve the width and height of the menu item. The <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_POPUP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010L</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the menu item opens a drop-down menu or submenu. The <i>uIDNewItem</i> parameter specifies a handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar, or a menu item that opens a submenu to a drop-down menu, submenu, or shortcut menu.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_SEPARATOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800L</term>
              </listheader>
            </list>
          </description>
          <description>Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted. The <i>lpNewItem</i> and <i>uIDNewItem</i> parameters are ignored.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the menu item is a text string; the <i>lpNewItem</i> parameter is a pointer to the string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_UNCHECKED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Does not place a check mark next to the item (default). If the application supplies check-mark bitmaps (see <see cref="SetMenuItemBitmaps" />), this flag displays the clear bitmap next to the menu item.</description>
        </listheader>
      </list>
    </param>
    <param name="uIDNewItem">The identifier of the new menu item or, if the <i>uFlags</i> parameter is set to <b>MF_POPUP</b>, a handle to the drop-down menu or submenu.</param>
    <param name="lpNewItem">
      <para>The content of the new menu item. The interpretation of <i>lpNewItem</i> depends on whether the <i>uFlags</i> parameter includes the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a bitmap handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>Contains an application-supplied value that can be used to maintain additional data related to the menu item. The value is in the <b>itemData</b> member of the structure pointed to by the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message sent when the menu is created or its appearance is updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a pointer to a null-terminated string.</description>
        </listheader>
      </list>
    </param>
    <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.AppendMenuW">
    <summary>Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item.</summary>
    <param name="hMenu">A handle to the menu bar, drop-down menu, submenu, or shortcut menu to be changed.</param>
    <param name="uFlags">
      <para>Controls the appearance and behavior of the new menu item. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>Uses a bitmap as the menu item. The <i>lpNewItem</i> parameter contains a handle to the bitmap.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_CHECKED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008L</term>
              </listheader>
            </list>
          </description>
          <description>Places a check mark next to the menu item. If the application provides check-mark bitmaps (see <see cref="SetMenuItemBitmaps" />, this flag displays the check-mark bitmap next to the menu item.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_DISABLED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>Disables the menu item so that it cannot be selected, but the flag does not gray it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_ENABLED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Enables the menu item so that it can be selected, and restores it from its grayed state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_GRAYED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>Disables the menu item and grays it so that it cannot be selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_MENUBARBREAK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020L</term>
              </listheader>
            </list>
          </description>
          <description>Functions the same as the <b>MF_MENUBREAK</b> flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_MENUBREAK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040L</term>
              </listheader>
            </list>
          </description>
          <description>Places the item on a new line (for a menu bar) or in a new column (for a drop-down menu, submenu, or shortcut menu) without separating columns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns the menu receives a <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> message to retrieve the width and height of the menu item. The <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_POPUP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010L</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the menu item opens a drop-down menu or submenu. The <i>uIDNewItem</i> parameter specifies a handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar, or a menu item that opens a submenu to a drop-down menu, submenu, or shortcut menu.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_SEPARATOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800L</term>
              </listheader>
            </list>
          </description>
          <description>Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted. The <i>lpNewItem</i> and <i>uIDNewItem</i> parameters are ignored.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the menu item is a text string; the <i>lpNewItem</i> parameter is a pointer to the string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_UNCHECKED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Does not place a check mark next to the item (default). If the application supplies check-mark bitmaps (see <see cref="SetMenuItemBitmaps" />), this flag displays the clear bitmap next to the menu item.</description>
        </listheader>
      </list>
    </param>
    <param name="uIDNewItem">The identifier of the new menu item or, if the <i>uFlags</i> parameter is set to <b>MF_POPUP</b>, a handle to the drop-down menu or submenu.</param>
    <param name="lpNewItem">
      <para>The content of the new menu item. The interpretation of <i>lpNewItem</i> depends on whether the <i>uFlags</i> parameter includes the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a bitmap handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>Contains an application-supplied value that can be used to maintain additional data related to the menu item. The value is in the <b>itemData</b> member of the structure pointed to by the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message sent when the menu is created or its appearance is updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a pointer to a null-terminated string.</description>
        </listheader>
      </list>
    </param>
    <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.AppendMenu">
    <summary>Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item.</summary>
    <param name="hMenu">A handle to the menu bar, drop-down menu, submenu, or shortcut menu to be changed.</param>
    <param name="uFlags">
      <para>Controls the appearance and behavior of the new menu item. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>Uses a bitmap as the menu item. The <i>lpNewItem</i> parameter contains a handle to the bitmap.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_CHECKED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008L</term>
              </listheader>
            </list>
          </description>
          <description>Places a check mark next to the menu item. If the application provides check-mark bitmaps (see <see cref="SetMenuItemBitmaps" />, this flag displays the check-mark bitmap next to the menu item.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_DISABLED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>Disables the menu item so that it cannot be selected, but the flag does not gray it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_ENABLED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Enables the menu item so that it can be selected, and restores it from its grayed state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_GRAYED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>Disables the menu item and grays it so that it cannot be selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_MENUBARBREAK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020L</term>
              </listheader>
            </list>
          </description>
          <description>Functions the same as the <b>MF_MENUBREAK</b> flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_MENUBREAK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040L</term>
              </listheader>
            </list>
          </description>
          <description>Places the item on a new line (for a menu bar) or in a new column (for a drop-down menu, submenu, or shortcut menu) without separating columns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns the menu receives a <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> message to retrieve the width and height of the menu item. The <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_POPUP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010L</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the menu item opens a drop-down menu or submenu. The <i>uIDNewItem</i> parameter specifies a handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar, or a menu item that opens a submenu to a drop-down menu, submenu, or shortcut menu.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_SEPARATOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800L</term>
              </listheader>
            </list>
          </description>
          <description>Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted. The <i>lpNewItem</i> and <i>uIDNewItem</i> parameters are ignored.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the menu item is a text string; the <i>lpNewItem</i> parameter is a pointer to the string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_UNCHECKED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Does not place a check mark next to the item (default). If the application supplies check-mark bitmaps (see <see cref="SetMenuItemBitmaps" />), this flag displays the clear bitmap next to the menu item.</description>
        </listheader>
      </list>
    </param>
    <param name="uIDNewItem">The identifier of the new menu item or, if the <i>uFlags</i> parameter is set to <b>MF_POPUP</b>, a handle to the drop-down menu or submenu.</param>
    <param name="lpNewItem">
      <para>The content of the new menu item. The interpretation of <i>lpNewItem</i> depends on whether the <i>uFlags</i> parameter includes the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a bitmap handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>Contains an application-supplied value that can be used to maintain additional data related to the menu item. The value is in the <b>itemData</b> member of the structure pointed to by the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message sent when the menu is created or its appearance is updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a pointer to a null-terminated string.</description>
        </listheader>
      </list>
    </param>
    <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.AppendMenuA">
    <summary>Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item.</summary>
    <param name="hMenu">A handle to the menu bar, drop-down menu, submenu, or shortcut menu to be changed.</param>
    <param name="uFlags">
      <para>Controls the appearance and behavior of the new menu item. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>Uses a bitmap as the menu item. The <i>lpNewItem</i> parameter contains a handle to the bitmap.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_CHECKED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008L</term>
              </listheader>
            </list>
          </description>
          <description>Places a check mark next to the menu item. If the application provides check-mark bitmaps (see <see cref="SetMenuItemBitmaps" />, this flag displays the check-mark bitmap next to the menu item.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_DISABLED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>Disables the menu item so that it cannot be selected, but the flag does not gray it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_ENABLED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Enables the menu item so that it can be selected, and restores it from its grayed state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_GRAYED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>Disables the menu item and grays it so that it cannot be selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_MENUBARBREAK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020L</term>
              </listheader>
            </list>
          </description>
          <description>Functions the same as the <b>MF_MENUBREAK</b> flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_MENUBREAK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040L</term>
              </listheader>
            </list>
          </description>
          <description>Places the item on a new line (for a menu bar) or in a new column (for a drop-down menu, submenu, or shortcut menu) without separating columns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns the menu receives a <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> message to retrieve the width and height of the menu item. The <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_POPUP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010L</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the menu item opens a drop-down menu or submenu. The <i>uIDNewItem</i> parameter specifies a handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar, or a menu item that opens a submenu to a drop-down menu, submenu, or shortcut menu.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_SEPARATOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800L</term>
              </listheader>
            </list>
          </description>
          <description>Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted. The <i>lpNewItem</i> and <i>uIDNewItem</i> parameters are ignored.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the menu item is a text string; the <i>lpNewItem</i> parameter is a pointer to the string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_UNCHECKED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Does not place a check mark next to the item (default). If the application supplies check-mark bitmaps (see <see cref="SetMenuItemBitmaps" />), this flag displays the clear bitmap next to the menu item.</description>
        </listheader>
      </list>
    </param>
    <param name="uIDNewItem">The identifier of the new menu item or, if the <i>uFlags</i> parameter is set to <b>MF_POPUP</b>, a handle to the drop-down menu or submenu.</param>
    <param name="lpNewItem">
      <para>The content of the new menu item. The interpretation of <i>lpNewItem</i> depends on whether the <i>uFlags</i> parameter includes the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a bitmap handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>Contains an application-supplied value that can be used to maintain additional data related to the menu item. The value is in the <b>itemData</b> member of the structure pointed to by the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message sent when the menu is created or its appearance is updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a pointer to a null-terminated string.</description>
        </listheader>
      </list>
    </param>
    <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.AppendMenuW">
    <summary>Appends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu. You can use this function to specify the content, appearance, and behavior of the menu item.</summary>
    <param name="hMenu">A handle to the menu bar, drop-down menu, submenu, or shortcut menu to be changed.</param>
    <param name="uFlags">
      <para>Controls the appearance and behavior of the new menu item. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>Uses a bitmap as the menu item. The <i>lpNewItem</i> parameter contains a handle to the bitmap.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_CHECKED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008L</term>
              </listheader>
            </list>
          </description>
          <description>Places a check mark next to the menu item. If the application provides check-mark bitmaps (see <see cref="SetMenuItemBitmaps" />, this flag displays the check-mark bitmap next to the menu item.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_DISABLED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>Disables the menu item so that it cannot be selected, but the flag does not gray it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_ENABLED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Enables the menu item so that it can be selected, and restores it from its grayed state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_GRAYED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>Disables the menu item and grays it so that it cannot be selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_MENUBARBREAK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020L</term>
              </listheader>
            </list>
          </description>
          <description>Functions the same as the <b>MF_MENUBREAK</b> flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_MENUBREAK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040L</term>
              </listheader>
            </list>
          </description>
          <description>Places the item on a new line (for a menu bar) or in a new column (for a drop-down menu, submenu, or shortcut menu) without separating columns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns the menu receives a <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> message to retrieve the width and height of the menu item. The <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_POPUP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010L</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the menu item opens a drop-down menu or submenu. The <i>uIDNewItem</i> parameter specifies a handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar, or a menu item that opens a submenu to a drop-down menu, submenu, or shortcut menu.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_SEPARATOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800L</term>
              </listheader>
            </list>
          </description>
          <description>Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted. The <i>lpNewItem</i> and <i>uIDNewItem</i> parameters are ignored.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Specifies that the menu item is a text string; the <i>lpNewItem</i> parameter is a pointer to the string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_UNCHECKED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Does not place a check mark next to the item (default). If the application supplies check-mark bitmaps (see <see cref="SetMenuItemBitmaps" />), this flag displays the clear bitmap next to the menu item.</description>
        </listheader>
      </list>
    </param>
    <param name="uIDNewItem">The identifier of the new menu item or, if the <i>uFlags</i> parameter is set to <b>MF_POPUP</b>, a handle to the drop-down menu or submenu.</param>
    <param name="lpNewItem">
      <para>The content of the new menu item. The interpretation of <i>lpNewItem</i> depends on whether the <i>uFlags</i> parameter includes the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a bitmap handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>Contains an application-supplied value that can be used to maintain additional data related to the menu item. The value is in the <b>itemData</b> member of the structure pointed to by the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message sent when the menu is created or its appearance is updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a pointer to a null-terminated string.</description>
        </listheader>
      </list>
    </param>
    <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.AreDpiAwarenessContextsEqual">
    <summary>Determines whether two <b>DPI_AWARENESS_CONTEXT</b> values are identical.</summary>
    <param name="dpiContextA">The first value to compare.</param>
    <param name="dpiContextB">The second value to compare.</param>
    <returns>Returns <b>TRUE</b> if the values are equal, otherwise <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.ArrangeIconicWindows">
    <summary>Arranges all the minimized (iconic) child windows of the specified parent window.</summary>
    <param name="hWnd">A handle to the parent window.</param>
    <returns>
      <para>If the function succeeds, the return value is the height of one row of icons.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.AttachThreadInput">
    <summary>Attaches or detaches the input processing mechanism of one thread to that of another thread.</summary>
    <param name="idAttach">The identifier of the thread to be attached to another thread. The thread to be attached cannot be a system thread.</param>
    <param name="idAttachTo">
      <para>The identifier of the thread to which <i>idAttach</i> will be attached. This thread cannot be a system thread.</para>
      <para>A thread cannot attach to itself. Therefore, <i>idAttachTo</i> cannot equal <i>idAttach</i>.</para>
    </param>
    <param name="fAttach">If this parameter is <b>TRUE</b>, the two threads are attached. If the parameter is <b>FALSE</b>, the threads are detached.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:  </b>There is no extended error information; do not call <see cref="GetLastError" />. This behavior changed as of Windows Vista.</para>
    </returns>
  </member>
  <member name="Windows.BeginDeferWindowPos">
    <summary>Allocates memory for a multiple-window- position structure and returns the handle to the structure.</summary>
    <param name="nNumWindows">The initial number of windows for which to store position information. The <see cref="DeferWindowPos" /> function increases the size of the structure, if necessary.</param>
    <returns>If the function succeeds, the return value identifies the multiple-window-position structure. If insufficient system resources are available to allocate the structure, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.BeginPaint">
    <summary>The <b>BeginPaint</b> function prepares the specified window for painting and fills a <see cref="PAINTSTRUCT" /> structure with information about the painting.</summary>
    <param name="hWnd">Handle to the window to be repainted.</param>
    <param name="lpPaint">Pointer to the <see cref="PAINTSTRUCT" /> structure that will receive painting information.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to a display device context for the specified window.</para>
      <para>If the function fails, the return value is <b>NULL</b>, indicating that no display device context is available.</para>
    </returns>
  </member>
  <member name="Windows.BlockInput">
    <summary>Blocks keyboard and mouse input events from reaching applications.</summary>
    <param name="fBlockIt">The function's purpose. If this parameter is <b>TRUE</b>, keyboard and mouse input events are blocked. If this parameter is <b>FALSE</b>, keyboard and mouse events are unblocked. Note that only the thread that blocked input can successfully unblock input.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If input is already blocked, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.BringWindowToTop">
    <summary>Brings the specified window to the top of the Z order. If the window is a top-level window, it is activated. If the window is a child window, the top-level parent window associated with the child window is activated.</summary>
    <param name="hWnd">A handle to the window to bring to the top of the Z order.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.BroadcastSystemMessage">
    <summary>
      <para>Sends a message to the specified recipients. The recipients can be applications, installable drivers, network drivers, system-level device drivers, or any combination of these system components.</para>
      <para>To receive additional information if the request is defined, use the <see cref="BroadcastSystemMessageEx" /> function.</para>
    </summary>
    <param name="flags">
      <para>The broadcast option. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_ALLOWSFW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description> Enables the recipient to set the foreground window while processing the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FLUSHDISK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Flushes the disk after each recipient processes the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FORCEIFHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>Continues to broadcast the message, even if the time-out period elapses or one of the recipients is not responding.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_IGNORECURRENTTASK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Does not send the message to windows that belong to the current task. This prevents an application from receiving its own message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOHANG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Forces a nonresponsive application to time out. If one of the recipients times out, do not continue broadcasting the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOTIMEOUTIFNOTHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Waits for a response to the message, as long as the recipient is not being unresponsive. Does not time out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_POSTMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Posts the message. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_QUERY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Sends the message to one recipient at a time, sending to a subsequent recipient only if the current recipient returns <b>TRUE</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_SENDNOTIFYMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description> Sends the message using <see cref="SendNotifyMessage" /> function. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
      </list>
    </param>
    <param name="lpInfo">
      <para>A pointer to a variable that contains and receives information about the recipients of the message.</para>
      <para>When the function returns, this variable receives a combination of these values identifying which recipients actually received the message.</para>
      <para>If this parameter is <b>NULL</b>, the function broadcasts to all components.</para>
      <para>This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLCOMPONENTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to all system components.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLDESKTOPS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description> Broadcast to all desktops. Requires the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-constants">SE_TCB_NAME</a> privilege.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_APPLICATIONS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to applications.</description>
        </listheader>
      </list>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is a positive value.</para>
      <para>If the function is unable to broadcast the message, the return value is –1.</para>
      <para>If the <i>dwFlags</i> parameter is <b>BSF_QUERY</b> and at least one recipient returned <b>BROADCAST_QUERY_DENY</b> to the corresponding message, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.BroadcastSystemMessageW">
    <summary>
      <para>Sends a message to the specified recipients. The recipients can be applications, installable drivers, network drivers, system-level device drivers, or any combination of these system components.</para>
      <para>To receive additional information if the request is defined, use the <see cref="BroadcastSystemMessageEx" /> function.</para>
    </summary>
    <param name="flags">
      <para>The broadcast option. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_ALLOWSFW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description> Enables the recipient to set the foreground window while processing the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FLUSHDISK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Flushes the disk after each recipient processes the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FORCEIFHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>Continues to broadcast the message, even if the time-out period elapses or one of the recipients is not responding.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_IGNORECURRENTTASK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Does not send the message to windows that belong to the current task. This prevents an application from receiving its own message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOHANG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Forces a nonresponsive application to time out. If one of the recipients times out, do not continue broadcasting the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOTIMEOUTIFNOTHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Waits for a response to the message, as long as the recipient is not being unresponsive. Does not time out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_POSTMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Posts the message. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_QUERY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Sends the message to one recipient at a time, sending to a subsequent recipient only if the current recipient returns <b>TRUE</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_SENDNOTIFYMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description> Sends the message using <see cref="SendNotifyMessage" /> function. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
      </list>
    </param>
    <param name="lpInfo">
      <para>A pointer to a variable that contains and receives information about the recipients of the message.</para>
      <para>When the function returns, this variable receives a combination of these values identifying which recipients actually received the message.</para>
      <para>If this parameter is <b>NULL</b>, the function broadcasts to all components.</para>
      <para>This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLCOMPONENTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to all system components.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLDESKTOPS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description> Broadcast to all desktops. Requires the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-constants">SE_TCB_NAME</a> privilege.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_APPLICATIONS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to applications.</description>
        </listheader>
      </list>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is a positive value.</para>
      <para>If the function is unable to broadcast the message, the return value is –1.</para>
      <para>If the <i>dwFlags</i> parameter is <b>BSF_QUERY</b> and at least one recipient returned <b>BROADCAST_QUERY_DENY</b> to the corresponding message, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.BroadcastSystemMessage">
    <summary>
      <para>Sends a message to the specified recipients. The recipients can be applications, installable drivers, network drivers, system-level device drivers, or any combination of these system components.</para>
      <para>To receive additional information if the request is defined, use the <see cref="BroadcastSystemMessageEx" /> function.</para>
    </summary>
    <param name="flags">
      <para>The broadcast option. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_ALLOWSFW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description> Enables the recipient to set the foreground window while processing the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FLUSHDISK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Flushes the disk after each recipient processes the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FORCEIFHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>Continues to broadcast the message, even if the time-out period elapses or one of the recipients is not responding.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_IGNORECURRENTTASK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Does not send the message to windows that belong to the current task. This prevents an application from receiving its own message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOHANG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Forces a nonresponsive application to time out. If one of the recipients times out, do not continue broadcasting the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOTIMEOUTIFNOTHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Waits for a response to the message, as long as the recipient is not being unresponsive. Does not time out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_POSTMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Posts the message. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_QUERY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Sends the message to one recipient at a time, sending to a subsequent recipient only if the current recipient returns <b>TRUE</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_SENDNOTIFYMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description> Sends the message using <see cref="SendNotifyMessage" /> function. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
      </list>
    </param>
    <param name="lpInfo">
      <para>A pointer to a variable that contains and receives information about the recipients of the message.</para>
      <para>When the function returns, this variable receives a combination of these values identifying which recipients actually received the message.</para>
      <para>If this parameter is <b>NULL</b>, the function broadcasts to all components.</para>
      <para>This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLCOMPONENTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to all system components.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLDESKTOPS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description> Broadcast to all desktops. Requires the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-constants">SE_TCB_NAME</a> privilege.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_APPLICATIONS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to applications.</description>
        </listheader>
      </list>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is a positive value.</para>
      <para>If the function is unable to broadcast the message, the return value is –1.</para>
      <para>If the <i>dwFlags</i> parameter is <b>BSF_QUERY</b> and at least one recipient returned <b>BROADCAST_QUERY_DENY</b> to the corresponding message, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.BroadcastSystemMessageA">
    <summary>
      <para>Sends a message to the specified recipients. The recipients can be applications, installable drivers, network drivers, system-level device drivers, or any combination of these system components.</para>
      <para>To receive additional information if the request is defined, use the <see cref="BroadcastSystemMessageEx" /> function.</para>
    </summary>
    <param name="flags">
      <para>The broadcast option. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_ALLOWSFW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description> Enables the recipient to set the foreground window while processing the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FLUSHDISK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Flushes the disk after each recipient processes the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FORCEIFHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>Continues to broadcast the message, even if the time-out period elapses or one of the recipients is not responding.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_IGNORECURRENTTASK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Does not send the message to windows that belong to the current task. This prevents an application from receiving its own message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOHANG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Forces a nonresponsive application to time out. If one of the recipients times out, do not continue broadcasting the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOTIMEOUTIFNOTHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Waits for a response to the message, as long as the recipient is not being unresponsive. Does not time out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_POSTMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Posts the message. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_QUERY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Sends the message to one recipient at a time, sending to a subsequent recipient only if the current recipient returns <b>TRUE</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_SENDNOTIFYMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description> Sends the message using <see cref="SendNotifyMessage" /> function. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
      </list>
    </param>
    <param name="lpInfo">
      <para>A pointer to a variable that contains and receives information about the recipients of the message.</para>
      <para>When the function returns, this variable receives a combination of these values identifying which recipients actually received the message.</para>
      <para>If this parameter is <b>NULL</b>, the function broadcasts to all components.</para>
      <para>This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLCOMPONENTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to all system components.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLDESKTOPS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description> Broadcast to all desktops. Requires the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-constants">SE_TCB_NAME</a> privilege.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_APPLICATIONS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to applications.</description>
        </listheader>
      </list>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is a positive value.</para>
      <para>If the function is unable to broadcast the message, the return value is –1.</para>
      <para>If the <i>dwFlags</i> parameter is <b>BSF_QUERY</b> and at least one recipient returned <b>BROADCAST_QUERY_DENY</b> to the corresponding message, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.BroadcastSystemMessageEx">
    <summary>
      <para>Sends a message to the specified recipients. The recipients can be applications, installable drivers, network drivers, system-level device drivers, or any combination of these system components.</para>
      <para>This function is similar to <see cref="BroadcastSystemMessage" /> except that this function can return more information from the recipients.</para>
    </summary>
    <param name="flags">
      <para>The broadcast option. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_ALLOWSFW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>Enables the recipient to set the foreground window while processing the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FLUSHDISK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Flushes the disk after each recipient processes the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FORCEIFHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>Continues to broadcast the message, even if the time-out period elapses or one of the recipients is not responding.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_IGNORECURRENTTASK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Does not send the message to windows that belong to the current task. This prevents an application from receiving its own message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_LUID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description> If <b>BSF_LUID</b> is set, the message is sent to the window that has the same LUID as specified in the <b>luid</b> member of the <see cref="BSMINFO" /> structure.<para><b>Windows 2000:  </b>This flag is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOHANG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Forces a nonresponsive application to time out. If one of the recipients times out, do not continue broadcasting the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOTIMEOUTIFNOTHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Waits for a response to the message, as long as the recipient is not being unresponsive. Does not time out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_POSTMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Posts the message. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_RETURNHDESK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description> If access is denied and both this and <b>BSF_QUERY</b> are set, <see cref="BSMINFO" /> returns both the desktop handle and the window handle. If access is denied and only <b>BSF_QUERY</b> is set, only the window handle is returned by <b>BSMINFO</b>.<para><b>Windows 2000:  </b>This flag is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_QUERY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Sends the message to one recipient at a time, sending to a subsequent recipient only if the current recipient returns <b>TRUE</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_SENDNOTIFYMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Sends the message using <see cref="SendNotifyMessage" /> function. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
      </list>
    </param>
    <param name="lpInfo">
      <para>A pointer to a variable that contains and receives information about the recipients of the message.</para>
      <para>When the function returns, this variable receives a combination of these values identifying which recipients actually received the message.</para>
      <para>If this parameter is <b>NULL</b>, the function broadcasts to all components.</para>
      <para>This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLCOMPONENTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to all system components.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLDESKTOPS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to all desktops. Requires the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-constants">SE_TCB_NAME</a> privilege.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_APPLICATIONS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to applications.</description>
        </listheader>
      </list>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <param name="pbsmInfo">A pointer to a <see cref="BSMINFO" /> structure that contains additional information if the request is denied and <i>dwFlags</i> is set to <b>BSF_QUERY</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is a positive value.</para>
      <para>If the function is unable to broadcast the message, the return value is –1.</para>
      <para>If the <i>dwFlags</i> parameter is <b>BSF_QUERY</b> and at least one recipient returned <b>BROADCAST_QUERY_DENY</b> to the corresponding message, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.BroadcastSystemMessageExA">
    <summary>
      <para>Sends a message to the specified recipients. The recipients can be applications, installable drivers, network drivers, system-level device drivers, or any combination of these system components.</para>
      <para>This function is similar to <see cref="BroadcastSystemMessage" /> except that this function can return more information from the recipients.</para>
    </summary>
    <param name="flags">
      <para>The broadcast option. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_ALLOWSFW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>Enables the recipient to set the foreground window while processing the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FLUSHDISK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Flushes the disk after each recipient processes the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FORCEIFHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>Continues to broadcast the message, even if the time-out period elapses or one of the recipients is not responding.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_IGNORECURRENTTASK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Does not send the message to windows that belong to the current task. This prevents an application from receiving its own message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_LUID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description> If <b>BSF_LUID</b> is set, the message is sent to the window that has the same LUID as specified in the <b>luid</b> member of the <see cref="BSMINFO" /> structure.<para><b>Windows 2000:  </b>This flag is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOHANG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Forces a nonresponsive application to time out. If one of the recipients times out, do not continue broadcasting the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOTIMEOUTIFNOTHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Waits for a response to the message, as long as the recipient is not being unresponsive. Does not time out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_POSTMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Posts the message. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_RETURNHDESK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description> If access is denied and both this and <b>BSF_QUERY</b> are set, <see cref="BSMINFO" /> returns both the desktop handle and the window handle. If access is denied and only <b>BSF_QUERY</b> is set, only the window handle is returned by <b>BSMINFO</b>.<para><b>Windows 2000:  </b>This flag is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_QUERY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Sends the message to one recipient at a time, sending to a subsequent recipient only if the current recipient returns <b>TRUE</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_SENDNOTIFYMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Sends the message using <see cref="SendNotifyMessage" /> function. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
      </list>
    </param>
    <param name="lpInfo">
      <para>A pointer to a variable that contains and receives information about the recipients of the message.</para>
      <para>When the function returns, this variable receives a combination of these values identifying which recipients actually received the message.</para>
      <para>If this parameter is <b>NULL</b>, the function broadcasts to all components.</para>
      <para>This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLCOMPONENTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to all system components.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLDESKTOPS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to all desktops. Requires the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-constants">SE_TCB_NAME</a> privilege.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_APPLICATIONS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to applications.</description>
        </listheader>
      </list>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <param name="pbsmInfo">A pointer to a <see cref="BSMINFO" /> structure that contains additional information if the request is denied and <i>dwFlags</i> is set to <b>BSF_QUERY</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is a positive value.</para>
      <para>If the function is unable to broadcast the message, the return value is –1.</para>
      <para>If the <i>dwFlags</i> parameter is <b>BSF_QUERY</b> and at least one recipient returned <b>BROADCAST_QUERY_DENY</b> to the corresponding message, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.BroadcastSystemMessageExW">
    <summary>
      <para>Sends a message to the specified recipients. The recipients can be applications, installable drivers, network drivers, system-level device drivers, or any combination of these system components.</para>
      <para>This function is similar to <see cref="BroadcastSystemMessage" /> except that this function can return more information from the recipients.</para>
    </summary>
    <param name="flags">
      <para>The broadcast option. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_ALLOWSFW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>Enables the recipient to set the foreground window while processing the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FLUSHDISK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Flushes the disk after each recipient processes the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FORCEIFHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>Continues to broadcast the message, even if the time-out period elapses or one of the recipients is not responding.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_IGNORECURRENTTASK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Does not send the message to windows that belong to the current task. This prevents an application from receiving its own message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_LUID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description> If <b>BSF_LUID</b> is set, the message is sent to the window that has the same LUID as specified in the <b>luid</b> member of the <see cref="BSMINFO" /> structure.<para><b>Windows 2000:  </b>This flag is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOHANG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Forces a nonresponsive application to time out. If one of the recipients times out, do not continue broadcasting the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOTIMEOUTIFNOTHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Waits for a response to the message, as long as the recipient is not being unresponsive. Does not time out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_POSTMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Posts the message. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_RETURNHDESK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description> If access is denied and both this and <b>BSF_QUERY</b> are set, <see cref="BSMINFO" /> returns both the desktop handle and the window handle. If access is denied and only <b>BSF_QUERY</b> is set, only the window handle is returned by <b>BSMINFO</b>.<para><b>Windows 2000:  </b>This flag is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_QUERY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Sends the message to one recipient at a time, sending to a subsequent recipient only if the current recipient returns <b>TRUE</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_SENDNOTIFYMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Sends the message using <see cref="SendNotifyMessage" /> function. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
      </list>
    </param>
    <param name="lpInfo">
      <para>A pointer to a variable that contains and receives information about the recipients of the message.</para>
      <para>When the function returns, this variable receives a combination of these values identifying which recipients actually received the message.</para>
      <para>If this parameter is <b>NULL</b>, the function broadcasts to all components.</para>
      <para>This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLCOMPONENTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to all system components.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLDESKTOPS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to all desktops. Requires the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-constants">SE_TCB_NAME</a> privilege.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_APPLICATIONS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to applications.</description>
        </listheader>
      </list>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <param name="pbsmInfo">A pointer to a <see cref="BSMINFO" /> structure that contains additional information if the request is denied and <i>dwFlags</i> is set to <b>BSF_QUERY</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is a positive value.</para>
      <para>If the function is unable to broadcast the message, the return value is –1.</para>
      <para>If the <i>dwFlags</i> parameter is <b>BSF_QUERY</b> and at least one recipient returned <b>BROADCAST_QUERY_DENY</b> to the corresponding message, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.BroadcastSystemMessageEx">
    <summary>
      <para>Sends a message to the specified recipients. The recipients can be applications, installable drivers, network drivers, system-level device drivers, or any combination of these system components.</para>
      <para>This function is similar to <see cref="BroadcastSystemMessage" /> except that this function can return more information from the recipients.</para>
    </summary>
    <param name="flags">
      <para>The broadcast option. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_ALLOWSFW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>Enables the recipient to set the foreground window while processing the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FLUSHDISK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Flushes the disk after each recipient processes the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FORCEIFHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>Continues to broadcast the message, even if the time-out period elapses or one of the recipients is not responding.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_IGNORECURRENTTASK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Does not send the message to windows that belong to the current task. This prevents an application from receiving its own message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_LUID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description> If <b>BSF_LUID</b> is set, the message is sent to the window that has the same LUID as specified in the <b>luid</b> member of the <see cref="BSMINFO" /> structure.<para><b>Windows 2000:  </b>This flag is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOHANG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Forces a nonresponsive application to time out. If one of the recipients times out, do not continue broadcasting the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOTIMEOUTIFNOTHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Waits for a response to the message, as long as the recipient is not being unresponsive. Does not time out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_POSTMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Posts the message. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_RETURNHDESK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description> If access is denied and both this and <b>BSF_QUERY</b> are set, <see cref="BSMINFO" /> returns both the desktop handle and the window handle. If access is denied and only <b>BSF_QUERY</b> is set, only the window handle is returned by <b>BSMINFO</b>.<para><b>Windows 2000:  </b>This flag is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_QUERY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Sends the message to one recipient at a time, sending to a subsequent recipient only if the current recipient returns <b>TRUE</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_SENDNOTIFYMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Sends the message using <see cref="SendNotifyMessage" /> function. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
      </list>
    </param>
    <param name="lpInfo">
      <para>A pointer to a variable that contains and receives information about the recipients of the message.</para>
      <para>When the function returns, this variable receives a combination of these values identifying which recipients actually received the message.</para>
      <para>If this parameter is <b>NULL</b>, the function broadcasts to all components.</para>
      <para>This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLCOMPONENTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to all system components.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLDESKTOPS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to all desktops. Requires the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-constants">SE_TCB_NAME</a> privilege.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_APPLICATIONS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to applications.</description>
        </listheader>
      </list>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <param name="pbsmInfo">A pointer to a <see cref="BSMINFO" /> structure that contains additional information if the request is denied and <i>dwFlags</i> is set to <b>BSF_QUERY</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is a positive value.</para>
      <para>If the function is unable to broadcast the message, the return value is –1.</para>
      <para>If the <i>dwFlags</i> parameter is <b>BSF_QUERY</b> and at least one recipient returned <b>BROADCAST_QUERY_DENY</b> to the corresponding message, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.BroadcastSystemMessageExA">
    <summary>
      <para>Sends a message to the specified recipients. The recipients can be applications, installable drivers, network drivers, system-level device drivers, or any combination of these system components.</para>
      <para>This function is similar to <see cref="BroadcastSystemMessage" /> except that this function can return more information from the recipients.</para>
    </summary>
    <param name="flags">
      <para>The broadcast option. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_ALLOWSFW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>Enables the recipient to set the foreground window while processing the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FLUSHDISK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Flushes the disk after each recipient processes the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FORCEIFHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>Continues to broadcast the message, even if the time-out period elapses or one of the recipients is not responding.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_IGNORECURRENTTASK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Does not send the message to windows that belong to the current task. This prevents an application from receiving its own message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_LUID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description> If <b>BSF_LUID</b> is set, the message is sent to the window that has the same LUID as specified in the <b>luid</b> member of the <see cref="BSMINFO" /> structure.<para><b>Windows 2000:  </b>This flag is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOHANG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Forces a nonresponsive application to time out. If one of the recipients times out, do not continue broadcasting the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOTIMEOUTIFNOTHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Waits for a response to the message, as long as the recipient is not being unresponsive. Does not time out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_POSTMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Posts the message. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_RETURNHDESK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description> If access is denied and both this and <b>BSF_QUERY</b> are set, <see cref="BSMINFO" /> returns both the desktop handle and the window handle. If access is denied and only <b>BSF_QUERY</b> is set, only the window handle is returned by <b>BSMINFO</b>.<para><b>Windows 2000:  </b>This flag is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_QUERY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Sends the message to one recipient at a time, sending to a subsequent recipient only if the current recipient returns <b>TRUE</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_SENDNOTIFYMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Sends the message using <see cref="SendNotifyMessage" /> function. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
      </list>
    </param>
    <param name="lpInfo">
      <para>A pointer to a variable that contains and receives information about the recipients of the message.</para>
      <para>When the function returns, this variable receives a combination of these values identifying which recipients actually received the message.</para>
      <para>If this parameter is <b>NULL</b>, the function broadcasts to all components.</para>
      <para>This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLCOMPONENTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to all system components.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLDESKTOPS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to all desktops. Requires the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-constants">SE_TCB_NAME</a> privilege.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_APPLICATIONS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to applications.</description>
        </listheader>
      </list>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <param name="pbsmInfo">A pointer to a <see cref="BSMINFO" /> structure that contains additional information if the request is denied and <i>dwFlags</i> is set to <b>BSF_QUERY</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is a positive value.</para>
      <para>If the function is unable to broadcast the message, the return value is –1.</para>
      <para>If the <i>dwFlags</i> parameter is <b>BSF_QUERY</b> and at least one recipient returned <b>BROADCAST_QUERY_DENY</b> to the corresponding message, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.BroadcastSystemMessageExW">
    <summary>
      <para>Sends a message to the specified recipients. The recipients can be applications, installable drivers, network drivers, system-level device drivers, or any combination of these system components.</para>
      <para>This function is similar to <see cref="BroadcastSystemMessage" /> except that this function can return more information from the recipients.</para>
    </summary>
    <param name="flags">
      <para>The broadcast option. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_ALLOWSFW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>Enables the recipient to set the foreground window while processing the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FLUSHDISK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Flushes the disk after each recipient processes the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FORCEIFHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>Continues to broadcast the message, even if the time-out period elapses or one of the recipients is not responding.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_IGNORECURRENTTASK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Does not send the message to windows that belong to the current task. This prevents an application from receiving its own message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_LUID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description> If <b>BSF_LUID</b> is set, the message is sent to the window that has the same LUID as specified in the <b>luid</b> member of the <see cref="BSMINFO" /> structure.<para><b>Windows 2000:  </b>This flag is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOHANG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Forces a nonresponsive application to time out. If one of the recipients times out, do not continue broadcasting the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOTIMEOUTIFNOTHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Waits for a response to the message, as long as the recipient is not being unresponsive. Does not time out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_POSTMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Posts the message. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_RETURNHDESK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description> If access is denied and both this and <b>BSF_QUERY</b> are set, <see cref="BSMINFO" /> returns both the desktop handle and the window handle. If access is denied and only <b>BSF_QUERY</b> is set, only the window handle is returned by <b>BSMINFO</b>.<para><b>Windows 2000:  </b>This flag is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_QUERY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Sends the message to one recipient at a time, sending to a subsequent recipient only if the current recipient returns <b>TRUE</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_SENDNOTIFYMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Sends the message using <see cref="SendNotifyMessage" /> function. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
      </list>
    </param>
    <param name="lpInfo">
      <para>A pointer to a variable that contains and receives information about the recipients of the message.</para>
      <para>When the function returns, this variable receives a combination of these values identifying which recipients actually received the message.</para>
      <para>If this parameter is <b>NULL</b>, the function broadcasts to all components.</para>
      <para>This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLCOMPONENTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to all system components.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLDESKTOPS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to all desktops. Requires the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-constants">SE_TCB_NAME</a> privilege.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_APPLICATIONS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to applications.</description>
        </listheader>
      </list>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <param name="pbsmInfo">A pointer to a <see cref="BSMINFO" /> structure that contains additional information if the request is denied and <i>dwFlags</i> is set to <b>BSF_QUERY</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is a positive value.</para>
      <para>If the function is unable to broadcast the message, the return value is –1.</para>
      <para>If the <i>dwFlags</i> parameter is <b>BSF_QUERY</b> and at least one recipient returned <b>BROADCAST_QUERY_DENY</b> to the corresponding message, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.BroadcastSystemMessage">
    <summary>
      <para>Sends a message to the specified recipients. The recipients can be applications, installable drivers, network drivers, system-level device drivers, or any combination of these system components.</para>
      <para>To receive additional information if the request is defined, use the <see cref="BroadcastSystemMessageEx" /> function.</para>
    </summary>
    <param name="flags">
      <para>The broadcast option. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_ALLOWSFW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description> Enables the recipient to set the foreground window while processing the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FLUSHDISK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Flushes the disk after each recipient processes the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FORCEIFHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>Continues to broadcast the message, even if the time-out period elapses or one of the recipients is not responding.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_IGNORECURRENTTASK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Does not send the message to windows that belong to the current task. This prevents an application from receiving its own message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOHANG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Forces a nonresponsive application to time out. If one of the recipients times out, do not continue broadcasting the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOTIMEOUTIFNOTHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Waits for a response to the message, as long as the recipient is not being unresponsive. Does not time out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_POSTMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Posts the message. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_QUERY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Sends the message to one recipient at a time, sending to a subsequent recipient only if the current recipient returns <b>TRUE</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_SENDNOTIFYMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description> Sends the message using <see cref="SendNotifyMessage" /> function. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
      </list>
    </param>
    <param name="lpInfo">
      <para>A pointer to a variable that contains and receives information about the recipients of the message.</para>
      <para>When the function returns, this variable receives a combination of these values identifying which recipients actually received the message.</para>
      <para>If this parameter is <b>NULL</b>, the function broadcasts to all components.</para>
      <para>This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLCOMPONENTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to all system components.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLDESKTOPS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description> Broadcast to all desktops. Requires the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-constants">SE_TCB_NAME</a> privilege.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_APPLICATIONS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to applications.</description>
        </listheader>
      </list>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is a positive value.</para>
      <para>If the function is unable to broadcast the message, the return value is –1.</para>
      <para>If the <i>dwFlags</i> parameter is <b>BSF_QUERY</b> and at least one recipient returned <b>BROADCAST_QUERY_DENY</b> to the corresponding message, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.BroadcastSystemMessageW">
    <summary>
      <para>Sends a message to the specified recipients. The recipients can be applications, installable drivers, network drivers, system-level device drivers, or any combination of these system components.</para>
      <para>To receive additional information if the request is defined, use the <see cref="BroadcastSystemMessageEx" /> function.</para>
    </summary>
    <param name="flags">
      <para>The broadcast option. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_ALLOWSFW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description> Enables the recipient to set the foreground window while processing the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FLUSHDISK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Flushes the disk after each recipient processes the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_FORCEIFHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>Continues to broadcast the message, even if the time-out period elapses or one of the recipients is not responding.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_IGNORECURRENTTASK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Does not send the message to windows that belong to the current task. This prevents an application from receiving its own message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOHANG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Forces a nonresponsive application to time out. If one of the recipients times out, do not continue broadcasting the message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_NOTIMEOUTIFNOTHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Waits for a response to the message, as long as the recipient is not being unresponsive. Does not time out.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_POSTMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Posts the message. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_QUERY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Sends the message to one recipient at a time, sending to a subsequent recipient only if the current recipient returns <b>TRUE</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSF_SENDNOTIFYMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description> Sends the message using <see cref="SendNotifyMessage" /> function. Do not use in combination with <b>BSF_QUERY</b>.</description>
        </listheader>
      </list>
    </param>
    <param name="lpInfo">
      <para>A pointer to a variable that contains and receives information about the recipients of the message.</para>
      <para>When the function returns, this variable receives a combination of these values identifying which recipients actually received the message.</para>
      <para>If this parameter is <b>NULL</b>, the function broadcasts to all components.</para>
      <para>This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLCOMPONENTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to all system components.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_ALLDESKTOPS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description> Broadcast to all desktops. Requires the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-constants">SE_TCB_NAME</a> privilege.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BSM_APPLICATIONS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Broadcast to applications.</description>
        </listheader>
      </list>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is a positive value.</para>
      <para>If the function is unable to broadcast the message, the return value is –1.</para>
      <para>If the <i>dwFlags</i> parameter is <b>BSF_QUERY</b> and at least one recipient returned <b>BROADCAST_QUERY_DENY</b> to the corresponding message, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CalculatePopupWindowPosition">
    <summary>Calculates an appropriate pop-up window position using the specified anchor point, pop-up window size, flags, and the optional exclude rectangle. When the specified pop-up window size is smaller than the desktop window size, use the <b>CalculatePopupWindowPosition</b> function to ensure that the pop-up window is fully visible on the desktop window, regardless of the specified anchor point.</summary>
    <param name="anchorPoint">The specified anchor point.</param>
    <param name="windowSize">The specified window size.</param>
    <param name="flags">
      <para>Use one of the following flags to specify how the function positions the pop-up window horizontally and vertically. The flags are the same as the vertical and horizontal positioning flags of the <see cref="TrackPopupMenuEx" /> function.</para>
      <para>Use one of the following flags to specify how the function positions the pop-up window horizontally.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TPM_CENTERALIGN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004L</term>
              </listheader>
            </list>
          </description>
          <description>Centers pop-up window horizontally relative to the coordinate specified by the anchorPoint-&gt;x parameter. 						</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TPM_LEFTALIGN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000L</term>
              </listheader>
            </list>
          </description>
          <description>Positions the pop-up window so 						that its left edge is aligned with the coordinate specified by 						the anchorPoint-&gt;x parameter. 						</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TPM_RIGHTALIGN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008L</term>
              </listheader>
            </list>
          </description>
          <description>Positions the pop-up window so that its right edge is aligned with the coordinate specified by the anchorPoint-&gt;x parameter. 						</description>
        </listheader>
      </list> <para>Uses one of the following flags to specify how the function positions the pop-up window vertically.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_BOTTOMALIGN</b></term></listheader><listheader><term>0x0020L</term></listheader></list></description><description>Positions the pop-up window so 					that its bottom edge is aligned with the coordinate specified by 					the anchorPoint-&gt;y parameter. 						</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_TOPALIGN</b></term></listheader><listheader><term>0x0000L</term></listheader></list></description><description>Positions the pop-up window so 						that its top edge is aligned with the coordinate specified by 						the anchorPoint-&gt;y parameter. 						</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_VCENTERALIGN</b></term></listheader><listheader><term>0x0010L</term></listheader></list></description><description>Centers the pop-up window vertically relative to the coordinate specified by the anchorPoint-&gt;y 						parameter. 						</description></listheader></list> <para>Use one of the following flags to specify whether to accommodate horizontal or vertical alignment.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_HORIZONTAL</b></term></listheader><listheader><term>0x0000L</term></listheader></list></description><description>If the pop-up window cannot be shown at the specified location without overlapping 					the excluded rectangle, the system tries to accommodate the requested 					horizontal alignment before the requested vertical alignment. 						</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_VERTICAL</b></term></listheader><listheader><term>0x0040L</term></listheader></list></description><description>If the pop-up window cannot be shown at the specified location without overlapping 					the excluded rectangle, the system tries to accommodate the requested vertical 					alignment before the requested horizontal alignment. 						</description></listheader></list> <para>The following flag is available starting with Windows 7.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_WORKAREA</b></term></listheader><listheader><term>0x10000L</term></listheader></list></description><description>Restricts the pop-up window 						to within the work area. If this flag is not set, 						the pop-up window is restricted to the work area only if the 						input point is within the work area. 						For more information, see the <b>rcWork</b> 						and <b>rcMonitor</b> members of the <see cref="MONITORINFO" /> structure. 						</description></listheader></list></param>
    <param name="excludeRect">A pointer to a structure that specifies the exclude rectangle. It can be <b>NULL</b>.</param>
    <param name="popupWindowPosition">A pointer to a structure that specifies the pop-up window position.</param>
    <returns>If the function succeeds, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b>. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.CallMsgFilter">
    <summary>Passes the specified message and hook code to the hook procedures associated with the <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-hooks">WH_SYSMSGFILTER and WH_MSGFILTER</a> hooks. A <b>WH_SYSMSGFILTER</b> or <b>WH_MSGFILTER</b> hook procedure is an application-defined callback function that examines and, optionally, modifies messages for a dialog box, message box, menu, or scroll bar.</summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that contains the message to be passed to the hook procedures.</param>
    <param name="nCode">An application-defined code used by the hook procedure to determine how to process the message. The code must not have the same value as system-defined hook codes (MSGF_ and HC_) associated with the <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-hooks">WH_SYSMSGFILTER</a> and <b>WH_MSGFILTER</b> hooks.</param>
    <returns>
      <para>If the application should process the message further, the return value is zero.</para>
      <para>If the application should not process the message further, the return value is nonzero.</para>
    </returns>
  </member>
  <member name="Windows.CallMsgFilterA">
    <summary>Passes the specified message and hook code to the hook procedures associated with the <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-hooks">WH_SYSMSGFILTER and WH_MSGFILTER</a> hooks. A <b>WH_SYSMSGFILTER</b> or <b>WH_MSGFILTER</b> hook procedure is an application-defined callback function that examines and, optionally, modifies messages for a dialog box, message box, menu, or scroll bar.</summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that contains the message to be passed to the hook procedures.</param>
    <param name="nCode">An application-defined code used by the hook procedure to determine how to process the message. The code must not have the same value as system-defined hook codes (MSGF_ and HC_) associated with the <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-hooks">WH_SYSMSGFILTER</a> and <b>WH_MSGFILTER</b> hooks.</param>
    <returns>
      <para>If the application should process the message further, the return value is zero.</para>
      <para>If the application should not process the message further, the return value is nonzero.</para>
    </returns>
  </member>
  <member name="Windows.CallMsgFilterW">
    <summary>Passes the specified message and hook code to the hook procedures associated with the <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-hooks">WH_SYSMSGFILTER and WH_MSGFILTER</a> hooks. A <b>WH_SYSMSGFILTER</b> or <b>WH_MSGFILTER</b> hook procedure is an application-defined callback function that examines and, optionally, modifies messages for a dialog box, message box, menu, or scroll bar.</summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that contains the message to be passed to the hook procedures.</param>
    <param name="nCode">An application-defined code used by the hook procedure to determine how to process the message. The code must not have the same value as system-defined hook codes (MSGF_ and HC_) associated with the <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-hooks">WH_SYSMSGFILTER</a> and <b>WH_MSGFILTER</b> hooks.</param>
    <returns>
      <para>If the application should process the message further, the return value is zero.</para>
      <para>If the application should not process the message further, the return value is nonzero.</para>
    </returns>
  </member>
  <member name="Windows.CallMsgFilter">
    <summary>Passes the specified message and hook code to the hook procedures associated with the <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-hooks">WH_SYSMSGFILTER and WH_MSGFILTER</a> hooks. A <b>WH_SYSMSGFILTER</b> or <b>WH_MSGFILTER</b> hook procedure is an application-defined callback function that examines and, optionally, modifies messages for a dialog box, message box, menu, or scroll bar.</summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that contains the message to be passed to the hook procedures.</param>
    <param name="nCode">An application-defined code used by the hook procedure to determine how to process the message. The code must not have the same value as system-defined hook codes (MSGF_ and HC_) associated with the <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-hooks">WH_SYSMSGFILTER</a> and <b>WH_MSGFILTER</b> hooks.</param>
    <returns>
      <para>If the application should process the message further, the return value is zero.</para>
      <para>If the application should not process the message further, the return value is nonzero.</para>
    </returns>
  </member>
  <member name="Windows.CallMsgFilterA">
    <summary>Passes the specified message and hook code to the hook procedures associated with the <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-hooks">WH_SYSMSGFILTER and WH_MSGFILTER</a> hooks. A <b>WH_SYSMSGFILTER</b> or <b>WH_MSGFILTER</b> hook procedure is an application-defined callback function that examines and, optionally, modifies messages for a dialog box, message box, menu, or scroll bar.</summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that contains the message to be passed to the hook procedures.</param>
    <param name="nCode">An application-defined code used by the hook procedure to determine how to process the message. The code must not have the same value as system-defined hook codes (MSGF_ and HC_) associated with the <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-hooks">WH_SYSMSGFILTER</a> and <b>WH_MSGFILTER</b> hooks.</param>
    <returns>
      <para>If the application should process the message further, the return value is zero.</para>
      <para>If the application should not process the message further, the return value is nonzero.</para>
    </returns>
  </member>
  <member name="Windows.CallMsgFilterW">
    <summary>Passes the specified message and hook code to the hook procedures associated with the <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-hooks">WH_SYSMSGFILTER and WH_MSGFILTER</a> hooks. A <b>WH_SYSMSGFILTER</b> or <b>WH_MSGFILTER</b> hook procedure is an application-defined callback function that examines and, optionally, modifies messages for a dialog box, message box, menu, or scroll bar.</summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that contains the message to be passed to the hook procedures.</param>
    <param name="nCode">An application-defined code used by the hook procedure to determine how to process the message. The code must not have the same value as system-defined hook codes (MSGF_ and HC_) associated with the <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-hooks">WH_SYSMSGFILTER</a> and <b>WH_MSGFILTER</b> hooks.</param>
    <returns>
      <para>If the application should process the message further, the return value is zero.</para>
      <para>If the application should not process the message further, the return value is nonzero.</para>
    </returns>
  </member>
  <member name="Windows.CallNextHookEx">
    <summary>Passes the hook information to the next hook procedure in the current hook chain. A hook procedure can call this function either before or after processing the hook information.</summary>
    <param name="hhk">This parameter is ignored.</param>
    <param name="nCode">The hook code passed to the current hook procedure. The next hook procedure uses this code to determine how to process the hook information.</param>
    <param name="wParam">The <i>wParam</i> value passed to the current hook procedure. The meaning of this parameter depends on the type of hook associated with the current hook chain.</param>
    <param name="lParam">The <i>lParam</i> value passed to the current hook procedure. The meaning of this parameter depends on the type of hook associated with the current hook chain.</param>
    <returns>This value is returned by the next hook procedure in the chain. The current hook procedure must also return this value. The meaning of the return value depends on the hook type. For more information, see the descriptions of the individual hook procedures.</returns>
  </member>
  <member name="Windows.CallWindowProc">
    <summary>Passes message information to the specified window procedure.</summary>
    <param name="lpPrevWndFunc">The previous window procedure. If this value is obtained by calling the <see cref="GetWindowLong" /> function with the <i>nIndex</i> parameter set to <b>GWL_WNDPROC</b> or <b>DWL_DLGPROC</b>, it is actually either the address of a window or dialog box procedure, or a special internal value meaningful only to <b>CallWindowProc</b>.</param>
    <param name="hWnd">A handle to the window procedure to receive the message.</param>
    <param name="Msg">The message.</param>
    <param name="wParam">Additional message-specific information. The contents of this parameter depend on the value of the <i>Msg</i> parameter.</param>
    <param name="lParam">Additional message-specific information. The contents of this parameter depend on the value of the <i>Msg</i> parameter.</param>
    <returns>The return value specifies the result of the message processing and depends on the message sent.</returns>
  </member>
  <member name="Windows.CallWindowProcA">
    <summary>Passes message information to the specified window procedure.</summary>
    <param name="lpPrevWndFunc">The previous window procedure. If this value is obtained by calling the <see cref="GetWindowLong" /> function with the <i>nIndex</i> parameter set to <b>GWL_WNDPROC</b> or <b>DWL_DLGPROC</b>, it is actually either the address of a window or dialog box procedure, or a special internal value meaningful only to <b>CallWindowProc</b>.</param>
    <param name="hWnd">A handle to the window procedure to receive the message.</param>
    <param name="Msg">The message.</param>
    <param name="wParam">Additional message-specific information. The contents of this parameter depend on the value of the <i>Msg</i> parameter.</param>
    <param name="lParam">Additional message-specific information. The contents of this parameter depend on the value of the <i>Msg</i> parameter.</param>
    <returns>The return value specifies the result of the message processing and depends on the message sent.</returns>
  </member>
  <member name="Windows.CallWindowProcW">
    <summary>Passes message information to the specified window procedure.</summary>
    <param name="lpPrevWndFunc">The previous window procedure. If this value is obtained by calling the <see cref="GetWindowLong" /> function with the <i>nIndex</i> parameter set to <b>GWL_WNDPROC</b> or <b>DWL_DLGPROC</b>, it is actually either the address of a window or dialog box procedure, or a special internal value meaningful only to <b>CallWindowProc</b>.</param>
    <param name="hWnd">A handle to the window procedure to receive the message.</param>
    <param name="Msg">The message.</param>
    <param name="wParam">Additional message-specific information. The contents of this parameter depend on the value of the <i>Msg</i> parameter.</param>
    <param name="lParam">Additional message-specific information. The contents of this parameter depend on the value of the <i>Msg</i> parameter.</param>
    <returns>The return value specifies the result of the message processing and depends on the message sent.</returns>
  </member>
  <member name="Windows.CallWindowProc">
    <summary>Passes message information to the specified window procedure.</summary>
    <param name="lpPrevWndFunc">The previous window procedure. If this value is obtained by calling the <see cref="GetWindowLong" /> function with the <i>nIndex</i> parameter set to <b>GWL_WNDPROC</b> or <b>DWL_DLGPROC</b>, it is actually either the address of a window or dialog box procedure, or a special internal value meaningful only to <b>CallWindowProc</b>.</param>
    <param name="hWnd">A handle to the window procedure to receive the message.</param>
    <param name="Msg">The message.</param>
    <param name="wParam">Additional message-specific information. The contents of this parameter depend on the value of the <i>Msg</i> parameter.</param>
    <param name="lParam">Additional message-specific information. The contents of this parameter depend on the value of the <i>Msg</i> parameter.</param>
    <returns>The return value specifies the result of the message processing and depends on the message sent.</returns>
  </member>
  <member name="Windows.CallWindowProcA">
    <summary>Passes message information to the specified window procedure.</summary>
    <param name="lpPrevWndFunc">The previous window procedure. If this value is obtained by calling the <see cref="GetWindowLong" /> function with the <i>nIndex</i> parameter set to <b>GWL_WNDPROC</b> or <b>DWL_DLGPROC</b>, it is actually either the address of a window or dialog box procedure, or a special internal value meaningful only to <b>CallWindowProc</b>.</param>
    <param name="hWnd">A handle to the window procedure to receive the message.</param>
    <param name="Msg">The message.</param>
    <param name="wParam">Additional message-specific information. The contents of this parameter depend on the value of the <i>Msg</i> parameter.</param>
    <param name="lParam">Additional message-specific information. The contents of this parameter depend on the value of the <i>Msg</i> parameter.</param>
    <returns>The return value specifies the result of the message processing and depends on the message sent.</returns>
  </member>
  <member name="Windows.CallWindowProcW">
    <summary>Passes message information to the specified window procedure.</summary>
    <param name="lpPrevWndFunc">The previous window procedure. If this value is obtained by calling the <see cref="GetWindowLong" /> function with the <i>nIndex</i> parameter set to <b>GWL_WNDPROC</b> or <b>DWL_DLGPROC</b>, it is actually either the address of a window or dialog box procedure, or a special internal value meaningful only to <b>CallWindowProc</b>.</param>
    <param name="hWnd">A handle to the window procedure to receive the message.</param>
    <param name="Msg">The message.</param>
    <param name="wParam">Additional message-specific information. The contents of this parameter depend on the value of the <i>Msg</i> parameter.</param>
    <param name="lParam">Additional message-specific information. The contents of this parameter depend on the value of the <i>Msg</i> parameter.</param>
    <returns>The return value specifies the result of the message processing and depends on the message sent.</returns>
  </member>
  <member name="Windows.CascadeWindows">
    <summary>Cascades the specified child windows of the specified parent window.</summary>
    <param name="hwndParent">A handle to the parent window. If this parameter is <b>NULL</b>, the desktop window is assumed.</param>
    <param name="wHow">
      <para>A cascade flag. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MDITILE_SKIPDISABLED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Prevents disabled MDI child windows from being cascaded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MDITILE_ZORDER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>Arranges the windows in Z order. If this value is not specified, the windows are arranged using the order specified in the <i>lpKids</i> array.</description>
        </listheader>
      </list>
    </param>
    <param name="lpRect">A pointer to a structure that specifies the rectangular area, in client coordinates, within which the windows are arranged. This parameter can be <b>NULL</b>, in which case the client area of the parent window is used.</param>
    <param name="cKids">The number of elements in the array specified by the<i>lpKids</i> parameter. This parameter is ignored if <i>lpKids</i> is <b>NULL</b>.</param>
    <param name="lpKids">An array of handles to the child windows to arrange. If a specified child window is a top-level window with the style <b>WS_EX_TOPMOST</b> or <b>WS_EX_TOOLWINDOW</b>, the child window is not arranged. If this parameter is <b>NULL</b>, all child windows of the specified parent window (or of the desktop window) are arranged.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of windows arranged.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ChangeClipboardChain">
    <summary>Removes a specified window from the chain of clipboard viewers.</summary>
    <param name="hWndRemove">A handle to the window to be removed from the chain. The handle must have been passed to the <see cref="SetClipboardViewer" /> function.</param>
    <param name="hWndNewNext">A handle to the window that follows the<i>hWndRemove</i> window in the clipboard viewer chain. (This is the handle returned by <see cref="SetClipboardViewer" />, unless the sequence was changed in response to a <a href="https://docs.microsoft.com//windows/desktop/dataxchg/wm-changecbchain">WM_CHANGECBCHAIN</a> message.)</param>
    <returns>The return value indicates the result of passing the <a href="https://docs.microsoft.com//windows/desktop/dataxchg/wm-changecbchain">WM_CHANGECBCHAIN</a> message to the windows in the clipboard viewer chain. Because a window in the chain typically returns <b>FALSE</b> when it processes <b>WM_CHANGECBCHAIN</b>, the return value from <b>ChangeClipboardChain</b> is typically <b>FALSE</b>. If there is only one window in the chain, the return value is typically <b>TRUE</b>.</returns>
  </member>
  <member name="Windows.ChangeDisplaySettings">
    <summary>
      <para>The <b>ChangeDisplaySettings</b> function changes the settings of the default display device to the specified graphics mode.</para>
      <para>To change the settings of a specified display device, use the <see cref="ChangeDisplaySettingsEx" /> function.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure that describes the new graphics mode. If <i>lpDevMode</i> is <b>NULL</b>, all the values currently in the registry will be used for the display setting. Passing <b>NULL</b> for the <i>lpDevMode</i> parameter and 0 for the <i>dwFlags</i> parameter is the easiest way to return to the default mode after a dynamic mode change.</para>
      <para>The <b>dmSize</b> member of <see cref="DEVMODE" /> must be initialized to the size, in bytes, of the <b>DEVMODE</b> structure. The <b>dmDriverExtra</b> member of <b>DEVMODE</b> must be initialized to indicate the number of bytes of private driver data following the <b>DEVMODE</b> structure. In addition, you can use any or all of the following members of the <b>DEVMODE</b> structure.</para>
      <list type="table">
        <listheader>
          <description>Member</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <b>dmBitsPerPel</b>
          </description>
          <description>Bits per pixel</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsWidth</b>
          </description>
          <description>Pixel width</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsHeight</b>
          </description>
          <description>Pixel height</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFlags</b>
          </description>
          <description>Mode flags</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
          <description>Mode frequency</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPosition</b>
          </description>
          <description>Position of the device in a multi-monitor configuration.</description>
        </listheader>
      </list> <para>In addition to using one or more of the preceding <see cref="DEVMODE" /> members, you must also set one or more of the following values in the <b>dmFields</b> member to change the display setting.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description>DM_BITSPERPEL</description><description>Use the <b>dmBitsPerPel</b> value.</description></listheader><listheader><description>DM_PELSWIDTH</description><description>Use the <b>dmPelsWidth</b> value.</description></listheader><listheader><description>DM_PELSHEIGHT</description><description>Use the <b>dmPelsHeight</b> value.</description></listheader><listheader><description>DM_DISPLAYFLAGS</description><description>Use the <b>dmDisplayFlags</b> value.</description></listheader><listheader><description>DM_DISPLAYFREQUENCY</description><description>Use the <b>dmDisplayFrequency</b> value.</description></listheader><listheader><description>DM_POSITION</description><description>Use the <b>dmPosition</b> value.</description></listheader></list></param>
    <param name="dwFlags">
      <para>Indicates how the graphics mode should be changed. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_FULLSCREEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The mode is temporary in nature.<para>If you change to and from another desktop, this mode will not be reset.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_GLOBAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the global settings area so that they will affect all users on the machine. Otherwise, only the settings for the user are modified. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_NORESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the registry, but will not take effect. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_RESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings should be changed, even if the requested settings are the same as the current settings.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_SET_PRIMARY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This device will become the primary device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_TEST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system tests if the requested graphics mode could be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_UPDATEREGISTRY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically and the graphics mode will be updated in the registry. The mode information is stored in the USER profile.</description>
        </listheader>
      </list> <para>Specifying CDS_TEST allows an application to determine which graphics modes are actually valid, without causing the system to change to that graphics mode.</para><para>If CDS_UPDATEREGISTRY is specified and it is possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_SUCCESSFUL is returned. If it is not possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_RESTART is returned.</para><para>If CDS_UPDATEREGISTRY is specified and the information could not be stored in the registry, the graphics mode is not changed and DISP_CHANGE_NOTUPDATED is returned.</para></param>
    <returns>
      <para>The <b>ChangeDisplaySettings</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_SUCCESSFUL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADDUALVIEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was unsuccessful because the system is DualView capable.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADFLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid set of flags was passed in.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADPARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed in. This can include an invalid flag or combination of flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_FAILED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The display driver failed the specified graphics mode.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_NOTUPDATED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unable to write settings to the registry.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_RESTART</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The computer must be restarted for the graphics mode to work.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.ChangeDisplaySettingsA">
    <summary>
      <para>The <b>ChangeDisplaySettings</b> function changes the settings of the default display device to the specified graphics mode.</para>
      <para>To change the settings of a specified display device, use the <see cref="ChangeDisplaySettingsEx" /> function.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure that describes the new graphics mode. If <i>lpDevMode</i> is <b>NULL</b>, all the values currently in the registry will be used for the display setting. Passing <b>NULL</b> for the <i>lpDevMode</i> parameter and 0 for the <i>dwFlags</i> parameter is the easiest way to return to the default mode after a dynamic mode change.</para>
      <para>The <b>dmSize</b> member of <see cref="DEVMODE" /> must be initialized to the size, in bytes, of the <b>DEVMODE</b> structure. The <b>dmDriverExtra</b> member of <b>DEVMODE</b> must be initialized to indicate the number of bytes of private driver data following the <b>DEVMODE</b> structure. In addition, you can use any or all of the following members of the <b>DEVMODE</b> structure.</para>
      <list type="table">
        <listheader>
          <description>Member</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <b>dmBitsPerPel</b>
          </description>
          <description>Bits per pixel</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsWidth</b>
          </description>
          <description>Pixel width</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsHeight</b>
          </description>
          <description>Pixel height</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFlags</b>
          </description>
          <description>Mode flags</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
          <description>Mode frequency</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPosition</b>
          </description>
          <description>Position of the device in a multi-monitor configuration.</description>
        </listheader>
      </list> <para>In addition to using one or more of the preceding <see cref="DEVMODE" /> members, you must also set one or more of the following values in the <b>dmFields</b> member to change the display setting.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description>DM_BITSPERPEL</description><description>Use the <b>dmBitsPerPel</b> value.</description></listheader><listheader><description>DM_PELSWIDTH</description><description>Use the <b>dmPelsWidth</b> value.</description></listheader><listheader><description>DM_PELSHEIGHT</description><description>Use the <b>dmPelsHeight</b> value.</description></listheader><listheader><description>DM_DISPLAYFLAGS</description><description>Use the <b>dmDisplayFlags</b> value.</description></listheader><listheader><description>DM_DISPLAYFREQUENCY</description><description>Use the <b>dmDisplayFrequency</b> value.</description></listheader><listheader><description>DM_POSITION</description><description>Use the <b>dmPosition</b> value.</description></listheader></list></param>
    <param name="dwFlags">
      <para>Indicates how the graphics mode should be changed. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_FULLSCREEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The mode is temporary in nature.<para>If you change to and from another desktop, this mode will not be reset.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_GLOBAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the global settings area so that they will affect all users on the machine. Otherwise, only the settings for the user are modified. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_NORESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the registry, but will not take effect. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_RESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings should be changed, even if the requested settings are the same as the current settings.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_SET_PRIMARY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This device will become the primary device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_TEST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system tests if the requested graphics mode could be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_UPDATEREGISTRY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically and the graphics mode will be updated in the registry. The mode information is stored in the USER profile.</description>
        </listheader>
      </list> <para>Specifying CDS_TEST allows an application to determine which graphics modes are actually valid, without causing the system to change to that graphics mode.</para><para>If CDS_UPDATEREGISTRY is specified and it is possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_SUCCESSFUL is returned. If it is not possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_RESTART is returned.</para><para>If CDS_UPDATEREGISTRY is specified and the information could not be stored in the registry, the graphics mode is not changed and DISP_CHANGE_NOTUPDATED is returned.</para></param>
    <returns>
      <para>The <b>ChangeDisplaySettings</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_SUCCESSFUL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADDUALVIEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was unsuccessful because the system is DualView capable.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADFLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid set of flags was passed in.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADPARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed in. This can include an invalid flag or combination of flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_FAILED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The display driver failed the specified graphics mode.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_NOTUPDATED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unable to write settings to the registry.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_RESTART</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The computer must be restarted for the graphics mode to work.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.ChangeDisplaySettingsW">
    <summary>
      <para>The <b>ChangeDisplaySettings</b> function changes the settings of the default display device to the specified graphics mode.</para>
      <para>To change the settings of a specified display device, use the <see cref="ChangeDisplaySettingsEx" /> function.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure that describes the new graphics mode. If <i>lpDevMode</i> is <b>NULL</b>, all the values currently in the registry will be used for the display setting. Passing <b>NULL</b> for the <i>lpDevMode</i> parameter and 0 for the <i>dwFlags</i> parameter is the easiest way to return to the default mode after a dynamic mode change.</para>
      <para>The <b>dmSize</b> member of <see cref="DEVMODE" /> must be initialized to the size, in bytes, of the <b>DEVMODE</b> structure. The <b>dmDriverExtra</b> member of <b>DEVMODE</b> must be initialized to indicate the number of bytes of private driver data following the <b>DEVMODE</b> structure. In addition, you can use any or all of the following members of the <b>DEVMODE</b> structure.</para>
      <list type="table">
        <listheader>
          <description>Member</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <b>dmBitsPerPel</b>
          </description>
          <description>Bits per pixel</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsWidth</b>
          </description>
          <description>Pixel width</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsHeight</b>
          </description>
          <description>Pixel height</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFlags</b>
          </description>
          <description>Mode flags</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
          <description>Mode frequency</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPosition</b>
          </description>
          <description>Position of the device in a multi-monitor configuration.</description>
        </listheader>
      </list> <para>In addition to using one or more of the preceding <see cref="DEVMODE" /> members, you must also set one or more of the following values in the <b>dmFields</b> member to change the display setting.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description>DM_BITSPERPEL</description><description>Use the <b>dmBitsPerPel</b> value.</description></listheader><listheader><description>DM_PELSWIDTH</description><description>Use the <b>dmPelsWidth</b> value.</description></listheader><listheader><description>DM_PELSHEIGHT</description><description>Use the <b>dmPelsHeight</b> value.</description></listheader><listheader><description>DM_DISPLAYFLAGS</description><description>Use the <b>dmDisplayFlags</b> value.</description></listheader><listheader><description>DM_DISPLAYFREQUENCY</description><description>Use the <b>dmDisplayFrequency</b> value.</description></listheader><listheader><description>DM_POSITION</description><description>Use the <b>dmPosition</b> value.</description></listheader></list></param>
    <param name="dwFlags">
      <para>Indicates how the graphics mode should be changed. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_FULLSCREEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The mode is temporary in nature.<para>If you change to and from another desktop, this mode will not be reset.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_GLOBAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the global settings area so that they will affect all users on the machine. Otherwise, only the settings for the user are modified. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_NORESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the registry, but will not take effect. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_RESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings should be changed, even if the requested settings are the same as the current settings.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_SET_PRIMARY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This device will become the primary device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_TEST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system tests if the requested graphics mode could be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_UPDATEREGISTRY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically and the graphics mode will be updated in the registry. The mode information is stored in the USER profile.</description>
        </listheader>
      </list> <para>Specifying CDS_TEST allows an application to determine which graphics modes are actually valid, without causing the system to change to that graphics mode.</para><para>If CDS_UPDATEREGISTRY is specified and it is possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_SUCCESSFUL is returned. If it is not possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_RESTART is returned.</para><para>If CDS_UPDATEREGISTRY is specified and the information could not be stored in the registry, the graphics mode is not changed and DISP_CHANGE_NOTUPDATED is returned.</para></param>
    <returns>
      <para>The <b>ChangeDisplaySettings</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_SUCCESSFUL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADDUALVIEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was unsuccessful because the system is DualView capable.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADFLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid set of flags was passed in.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADPARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed in. This can include an invalid flag or combination of flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_FAILED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The display driver failed the specified graphics mode.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_NOTUPDATED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unable to write settings to the registry.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_RESTART</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The computer must be restarted for the graphics mode to work.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.ChangeDisplaySettingsEx">
    <summary>
      <para>The <b>ChangeDisplaySettingsEx</b> function changes the settings of the specified display device to the specified graphics mode.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpszDeviceName">
      <para>A pointer to a null-terminated string that specifies the display device whose graphics mode will change. Only display device names as returned by <see cref="EnumDisplayDevices" /> are valid. See <b>EnumDisplayDevices</b> for further information on the names associated with these display devices.</para>
      <para>The <i>lpszDeviceName</i> parameter can be <b>NULL</b>. A <b>NULL</b> value specifies the default display device. The default device can be determined by calling <see cref="EnumDisplayDevices" /> and checking for the DISPLAY_DEVICE_PRIMARY_DEVICE flag.</para>
    </param>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure that describes the new graphics mode. If <i>lpDevMode</i> is <b>NULL</b>, all the values currently in the registry will be used for the display setting. Passing <b>NULL</b> for the <i>lpDevMode</i> parameter and 0 for the <i>dwFlags</i> parameter is the easiest way to return to the default mode after a dynamic mode change.</para>
      <para>The <b>dmSize</b> member must be initialized to the size, in bytes, of the <see cref="DEVMODE" /> structure. The <b>dmDriverExtra</b> member must be initialized to indicate the number of bytes of private driver data following the <b>DEVMODE</b> structure. In addition, you can use any of the following members of the <b>DEVMODE</b> structure.</para>
      <list type="table">
        <listheader>
          <description>Member</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <b>dmBitsPerPel</b>
          </description>
          <description>Bits per pixel</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsWidth</b>
          </description>
          <description>Pixel width</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsHeight</b>
          </description>
          <description>Pixel height</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFlags</b>
          </description>
          <description>Mode flags</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
          <description>Mode frequency</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPosition</b>
          </description>
          <description>Position of the device in a multi-monitor configuration.</description>
        </listheader>
      </list> <para>In addition to using one or more of the preceding <see cref="DEVMODE" /> members, you must also set one or more of the following values in the <b>dmFields</b> member to change the display settings.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description>DM_BITSPERPEL</description><description>Use the <b>dmBitsPerPel</b> value.</description></listheader><listheader><description>DM_PELSWIDTH</description><description>Use the <b>dmPelsWidth</b> value.</description></listheader><listheader><description>DM_PELSHEIGHT</description><description>Use the <b>dmPelsHeight</b> value.</description></listheader><listheader><description>DM_DISPLAYFLAGS</description><description>Use the <b>dmDisplayFlags</b> value.</description></listheader><listheader><description>DM_DISPLAYFREQUENCY</description><description>Use the <b>dmDisplayFrequency</b> value.</description></listheader><listheader><description>DM_POSITION</description><description>Use the <b>dmPosition</b> value.</description></listheader></list></param>
    <param name="hwnd">Reserved; must be <b>NULL</b>.</param>
    <param name="dwflags">
      <para>Indicates how the graphics mode should be changed. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_FULLSCREEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The mode is temporary in nature.<para>If you change to and from another desktop, this mode will not be reset.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_GLOBAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the global settings area so that they will affect all users on the machine. Otherwise, only the settings for the user are modified. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_NORESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the registry, but will not take effect. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_RESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings should be changed, even if the requested settings are the same as the current settings.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_SET_PRIMARY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This device will become the primary device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_TEST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system tests if the requested graphics mode could be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_UPDATEREGISTRY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically and the graphics mode will be updated in the registry. The mode information is stored in the USER profile.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_VIDEOPARAMETERS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When set, the <i>lParam</i> parameter is a pointer to a <a href="https://docs.microsoft.com//previous-versions/dd145196(v=vs.85)">VIDEOPARAMETERS</a> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_ENABLE_UNSAFE_MODES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables settings changes to unsafe graphics modes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_DISABLE_UNSAFE_MODES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Disables settings changes to unsafe graphics modes.</description>
        </listheader>
      </list> <para>Specifying CDS_TEST allows an application to determine which graphics modes are actually valid, without causing the system to change to them.</para><para>If CDS_UPDATEREGISTRY is specified and it is possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_SUCCESSFUL is returned. If it is not possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_RESTART is returned.</para><para>If CDS_UPDATEREGISTRY is specified and the information could not be stored in the registry, the graphics mode is not changed and DISP_CHANGE_NOTUPDATED is returned.</para></param>
    <param name="lParam">If <i>dwFlags</i> is <b>CDS_VIDEOPARAMETERS</b>, <i>lParam</i> is a pointer to a <a href="https://docs.microsoft.com//previous-versions/dd145196(v=vs.85)">VIDEOPARAMETERS</a> structure. Otherwise <i>lParam</i> must be <b>NULL</b>.</param>
    <returns>
      <para>The <b>ChangeDisplaySettingsEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_SUCCESSFUL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADDUALVIEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was unsuccessful because the system is DualView capable.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADFLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid set of flags was passed in.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADPARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed in. This can include an invalid flag or combination of flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_FAILED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The display driver failed the specified graphics mode.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_NOTUPDATED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unable to write settings to the registry.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_RESTART</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The computer must be restarted for the graphics mode to work.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.ChangeDisplaySettingsExA">
    <summary>
      <para>The <b>ChangeDisplaySettingsEx</b> function changes the settings of the specified display device to the specified graphics mode.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpszDeviceName">
      <para>A pointer to a null-terminated string that specifies the display device whose graphics mode will change. Only display device names as returned by <see cref="EnumDisplayDevices" /> are valid. See <b>EnumDisplayDevices</b> for further information on the names associated with these display devices.</para>
      <para>The <i>lpszDeviceName</i> parameter can be <b>NULL</b>. A <b>NULL</b> value specifies the default display device. The default device can be determined by calling <see cref="EnumDisplayDevices" /> and checking for the DISPLAY_DEVICE_PRIMARY_DEVICE flag.</para>
    </param>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure that describes the new graphics mode. If <i>lpDevMode</i> is <b>NULL</b>, all the values currently in the registry will be used for the display setting. Passing <b>NULL</b> for the <i>lpDevMode</i> parameter and 0 for the <i>dwFlags</i> parameter is the easiest way to return to the default mode after a dynamic mode change.</para>
      <para>The <b>dmSize</b> member must be initialized to the size, in bytes, of the <see cref="DEVMODE" /> structure. The <b>dmDriverExtra</b> member must be initialized to indicate the number of bytes of private driver data following the <b>DEVMODE</b> structure. In addition, you can use any of the following members of the <b>DEVMODE</b> structure.</para>
      <list type="table">
        <listheader>
          <description>Member</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <b>dmBitsPerPel</b>
          </description>
          <description>Bits per pixel</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsWidth</b>
          </description>
          <description>Pixel width</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsHeight</b>
          </description>
          <description>Pixel height</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFlags</b>
          </description>
          <description>Mode flags</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
          <description>Mode frequency</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPosition</b>
          </description>
          <description>Position of the device in a multi-monitor configuration.</description>
        </listheader>
      </list> <para>In addition to using one or more of the preceding <see cref="DEVMODE" /> members, you must also set one or more of the following values in the <b>dmFields</b> member to change the display settings.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description>DM_BITSPERPEL</description><description>Use the <b>dmBitsPerPel</b> value.</description></listheader><listheader><description>DM_PELSWIDTH</description><description>Use the <b>dmPelsWidth</b> value.</description></listheader><listheader><description>DM_PELSHEIGHT</description><description>Use the <b>dmPelsHeight</b> value.</description></listheader><listheader><description>DM_DISPLAYFLAGS</description><description>Use the <b>dmDisplayFlags</b> value.</description></listheader><listheader><description>DM_DISPLAYFREQUENCY</description><description>Use the <b>dmDisplayFrequency</b> value.</description></listheader><listheader><description>DM_POSITION</description><description>Use the <b>dmPosition</b> value.</description></listheader></list></param>
    <param name="hwnd">Reserved; must be <b>NULL</b>.</param>
    <param name="dwflags">
      <para>Indicates how the graphics mode should be changed. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_FULLSCREEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The mode is temporary in nature.<para>If you change to and from another desktop, this mode will not be reset.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_GLOBAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the global settings area so that they will affect all users on the machine. Otherwise, only the settings for the user are modified. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_NORESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the registry, but will not take effect. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_RESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings should be changed, even if the requested settings are the same as the current settings.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_SET_PRIMARY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This device will become the primary device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_TEST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system tests if the requested graphics mode could be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_UPDATEREGISTRY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically and the graphics mode will be updated in the registry. The mode information is stored in the USER profile.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_VIDEOPARAMETERS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When set, the <i>lParam</i> parameter is a pointer to a <a href="https://docs.microsoft.com//previous-versions/dd145196(v=vs.85)">VIDEOPARAMETERS</a> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_ENABLE_UNSAFE_MODES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables settings changes to unsafe graphics modes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_DISABLE_UNSAFE_MODES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Disables settings changes to unsafe graphics modes.</description>
        </listheader>
      </list> <para>Specifying CDS_TEST allows an application to determine which graphics modes are actually valid, without causing the system to change to them.</para><para>If CDS_UPDATEREGISTRY is specified and it is possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_SUCCESSFUL is returned. If it is not possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_RESTART is returned.</para><para>If CDS_UPDATEREGISTRY is specified and the information could not be stored in the registry, the graphics mode is not changed and DISP_CHANGE_NOTUPDATED is returned.</para></param>
    <param name="lParam">If <i>dwFlags</i> is <b>CDS_VIDEOPARAMETERS</b>, <i>lParam</i> is a pointer to a <a href="https://docs.microsoft.com//previous-versions/dd145196(v=vs.85)">VIDEOPARAMETERS</a> structure. Otherwise <i>lParam</i> must be <b>NULL</b>.</param>
    <returns>
      <para>The <b>ChangeDisplaySettingsEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_SUCCESSFUL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADDUALVIEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was unsuccessful because the system is DualView capable.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADFLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid set of flags was passed in.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADPARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed in. This can include an invalid flag or combination of flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_FAILED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The display driver failed the specified graphics mode.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_NOTUPDATED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unable to write settings to the registry.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_RESTART</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The computer must be restarted for the graphics mode to work.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.ChangeDisplaySettingsExW">
    <summary>
      <para>The <b>ChangeDisplaySettingsEx</b> function changes the settings of the specified display device to the specified graphics mode.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpszDeviceName">
      <para>A pointer to a null-terminated string that specifies the display device whose graphics mode will change. Only display device names as returned by <see cref="EnumDisplayDevices" /> are valid. See <b>EnumDisplayDevices</b> for further information on the names associated with these display devices.</para>
      <para>The <i>lpszDeviceName</i> parameter can be <b>NULL</b>. A <b>NULL</b> value specifies the default display device. The default device can be determined by calling <see cref="EnumDisplayDevices" /> and checking for the DISPLAY_DEVICE_PRIMARY_DEVICE flag.</para>
    </param>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure that describes the new graphics mode. If <i>lpDevMode</i> is <b>NULL</b>, all the values currently in the registry will be used for the display setting. Passing <b>NULL</b> for the <i>lpDevMode</i> parameter and 0 for the <i>dwFlags</i> parameter is the easiest way to return to the default mode after a dynamic mode change.</para>
      <para>The <b>dmSize</b> member must be initialized to the size, in bytes, of the <see cref="DEVMODE" /> structure. The <b>dmDriverExtra</b> member must be initialized to indicate the number of bytes of private driver data following the <b>DEVMODE</b> structure. In addition, you can use any of the following members of the <b>DEVMODE</b> structure.</para>
      <list type="table">
        <listheader>
          <description>Member</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <b>dmBitsPerPel</b>
          </description>
          <description>Bits per pixel</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsWidth</b>
          </description>
          <description>Pixel width</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsHeight</b>
          </description>
          <description>Pixel height</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFlags</b>
          </description>
          <description>Mode flags</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
          <description>Mode frequency</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPosition</b>
          </description>
          <description>Position of the device in a multi-monitor configuration.</description>
        </listheader>
      </list> <para>In addition to using one or more of the preceding <see cref="DEVMODE" /> members, you must also set one or more of the following values in the <b>dmFields</b> member to change the display settings.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description>DM_BITSPERPEL</description><description>Use the <b>dmBitsPerPel</b> value.</description></listheader><listheader><description>DM_PELSWIDTH</description><description>Use the <b>dmPelsWidth</b> value.</description></listheader><listheader><description>DM_PELSHEIGHT</description><description>Use the <b>dmPelsHeight</b> value.</description></listheader><listheader><description>DM_DISPLAYFLAGS</description><description>Use the <b>dmDisplayFlags</b> value.</description></listheader><listheader><description>DM_DISPLAYFREQUENCY</description><description>Use the <b>dmDisplayFrequency</b> value.</description></listheader><listheader><description>DM_POSITION</description><description>Use the <b>dmPosition</b> value.</description></listheader></list></param>
    <param name="hwnd">Reserved; must be <b>NULL</b>.</param>
    <param name="dwflags">
      <para>Indicates how the graphics mode should be changed. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_FULLSCREEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The mode is temporary in nature.<para>If you change to and from another desktop, this mode will not be reset.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_GLOBAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the global settings area so that they will affect all users on the machine. Otherwise, only the settings for the user are modified. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_NORESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the registry, but will not take effect. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_RESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings should be changed, even if the requested settings are the same as the current settings.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_SET_PRIMARY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This device will become the primary device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_TEST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system tests if the requested graphics mode could be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_UPDATEREGISTRY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically and the graphics mode will be updated in the registry. The mode information is stored in the USER profile.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_VIDEOPARAMETERS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When set, the <i>lParam</i> parameter is a pointer to a <a href="https://docs.microsoft.com//previous-versions/dd145196(v=vs.85)">VIDEOPARAMETERS</a> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_ENABLE_UNSAFE_MODES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables settings changes to unsafe graphics modes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_DISABLE_UNSAFE_MODES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Disables settings changes to unsafe graphics modes.</description>
        </listheader>
      </list> <para>Specifying CDS_TEST allows an application to determine which graphics modes are actually valid, without causing the system to change to them.</para><para>If CDS_UPDATEREGISTRY is specified and it is possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_SUCCESSFUL is returned. If it is not possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_RESTART is returned.</para><para>If CDS_UPDATEREGISTRY is specified and the information could not be stored in the registry, the graphics mode is not changed and DISP_CHANGE_NOTUPDATED is returned.</para></param>
    <param name="lParam">If <i>dwFlags</i> is <b>CDS_VIDEOPARAMETERS</b>, <i>lParam</i> is a pointer to a <a href="https://docs.microsoft.com//previous-versions/dd145196(v=vs.85)">VIDEOPARAMETERS</a> structure. Otherwise <i>lParam</i> must be <b>NULL</b>.</param>
    <returns>
      <para>The <b>ChangeDisplaySettingsEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_SUCCESSFUL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADDUALVIEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was unsuccessful because the system is DualView capable.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADFLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid set of flags was passed in.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADPARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed in. This can include an invalid flag or combination of flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_FAILED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The display driver failed the specified graphics mode.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_NOTUPDATED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unable to write settings to the registry.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_RESTART</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The computer must be restarted for the graphics mode to work.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.ChangeDisplaySettingsEx">
    <summary>
      <para>The <b>ChangeDisplaySettingsEx</b> function changes the settings of the specified display device to the specified graphics mode.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpszDeviceName">
      <para>A pointer to a null-terminated string that specifies the display device whose graphics mode will change. Only display device names as returned by <see cref="EnumDisplayDevices" /> are valid. See <b>EnumDisplayDevices</b> for further information on the names associated with these display devices.</para>
      <para>The <i>lpszDeviceName</i> parameter can be <b>NULL</b>. A <b>NULL</b> value specifies the default display device. The default device can be determined by calling <see cref="EnumDisplayDevices" /> and checking for the DISPLAY_DEVICE_PRIMARY_DEVICE flag.</para>
    </param>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure that describes the new graphics mode. If <i>lpDevMode</i> is <b>NULL</b>, all the values currently in the registry will be used for the display setting. Passing <b>NULL</b> for the <i>lpDevMode</i> parameter and 0 for the <i>dwFlags</i> parameter is the easiest way to return to the default mode after a dynamic mode change.</para>
      <para>The <b>dmSize</b> member must be initialized to the size, in bytes, of the <see cref="DEVMODE" /> structure. The <b>dmDriverExtra</b> member must be initialized to indicate the number of bytes of private driver data following the <b>DEVMODE</b> structure. In addition, you can use any of the following members of the <b>DEVMODE</b> structure.</para>
      <list type="table">
        <listheader>
          <description>Member</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <b>dmBitsPerPel</b>
          </description>
          <description>Bits per pixel</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsWidth</b>
          </description>
          <description>Pixel width</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsHeight</b>
          </description>
          <description>Pixel height</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFlags</b>
          </description>
          <description>Mode flags</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
          <description>Mode frequency</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPosition</b>
          </description>
          <description>Position of the device in a multi-monitor configuration.</description>
        </listheader>
      </list> <para>In addition to using one or more of the preceding <see cref="DEVMODE" /> members, you must also set one or more of the following values in the <b>dmFields</b> member to change the display settings.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description>DM_BITSPERPEL</description><description>Use the <b>dmBitsPerPel</b> value.</description></listheader><listheader><description>DM_PELSWIDTH</description><description>Use the <b>dmPelsWidth</b> value.</description></listheader><listheader><description>DM_PELSHEIGHT</description><description>Use the <b>dmPelsHeight</b> value.</description></listheader><listheader><description>DM_DISPLAYFLAGS</description><description>Use the <b>dmDisplayFlags</b> value.</description></listheader><listheader><description>DM_DISPLAYFREQUENCY</description><description>Use the <b>dmDisplayFrequency</b> value.</description></listheader><listheader><description>DM_POSITION</description><description>Use the <b>dmPosition</b> value.</description></listheader></list></param>
    <param name="hwnd">Reserved; must be <b>NULL</b>.</param>
    <param name="dwflags">
      <para>Indicates how the graphics mode should be changed. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_FULLSCREEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The mode is temporary in nature.<para>If you change to and from another desktop, this mode will not be reset.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_GLOBAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the global settings area so that they will affect all users on the machine. Otherwise, only the settings for the user are modified. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_NORESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the registry, but will not take effect. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_RESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings should be changed, even if the requested settings are the same as the current settings.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_SET_PRIMARY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This device will become the primary device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_TEST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system tests if the requested graphics mode could be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_UPDATEREGISTRY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically and the graphics mode will be updated in the registry. The mode information is stored in the USER profile.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_VIDEOPARAMETERS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When set, the <i>lParam</i> parameter is a pointer to a <a href="https://docs.microsoft.com//previous-versions/dd145196(v=vs.85)">VIDEOPARAMETERS</a> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_ENABLE_UNSAFE_MODES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables settings changes to unsafe graphics modes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_DISABLE_UNSAFE_MODES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Disables settings changes to unsafe graphics modes.</description>
        </listheader>
      </list> <para>Specifying CDS_TEST allows an application to determine which graphics modes are actually valid, without causing the system to change to them.</para><para>If CDS_UPDATEREGISTRY is specified and it is possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_SUCCESSFUL is returned. If it is not possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_RESTART is returned.</para><para>If CDS_UPDATEREGISTRY is specified and the information could not be stored in the registry, the graphics mode is not changed and DISP_CHANGE_NOTUPDATED is returned.</para></param>
    <param name="lParam">If <i>dwFlags</i> is <b>CDS_VIDEOPARAMETERS</b>, <i>lParam</i> is a pointer to a <a href="https://docs.microsoft.com//previous-versions/dd145196(v=vs.85)">VIDEOPARAMETERS</a> structure. Otherwise <i>lParam</i> must be <b>NULL</b>.</param>
    <returns>
      <para>The <b>ChangeDisplaySettingsEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_SUCCESSFUL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADDUALVIEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was unsuccessful because the system is DualView capable.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADFLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid set of flags was passed in.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADPARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed in. This can include an invalid flag or combination of flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_FAILED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The display driver failed the specified graphics mode.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_NOTUPDATED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unable to write settings to the registry.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_RESTART</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The computer must be restarted for the graphics mode to work.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.ChangeDisplaySettingsExA">
    <summary>
      <para>The <b>ChangeDisplaySettingsEx</b> function changes the settings of the specified display device to the specified graphics mode.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpszDeviceName">
      <para>A pointer to a null-terminated string that specifies the display device whose graphics mode will change. Only display device names as returned by <see cref="EnumDisplayDevices" /> are valid. See <b>EnumDisplayDevices</b> for further information on the names associated with these display devices.</para>
      <para>The <i>lpszDeviceName</i> parameter can be <b>NULL</b>. A <b>NULL</b> value specifies the default display device. The default device can be determined by calling <see cref="EnumDisplayDevices" /> and checking for the DISPLAY_DEVICE_PRIMARY_DEVICE flag.</para>
    </param>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure that describes the new graphics mode. If <i>lpDevMode</i> is <b>NULL</b>, all the values currently in the registry will be used for the display setting. Passing <b>NULL</b> for the <i>lpDevMode</i> parameter and 0 for the <i>dwFlags</i> parameter is the easiest way to return to the default mode after a dynamic mode change.</para>
      <para>The <b>dmSize</b> member must be initialized to the size, in bytes, of the <see cref="DEVMODE" /> structure. The <b>dmDriverExtra</b> member must be initialized to indicate the number of bytes of private driver data following the <b>DEVMODE</b> structure. In addition, you can use any of the following members of the <b>DEVMODE</b> structure.</para>
      <list type="table">
        <listheader>
          <description>Member</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <b>dmBitsPerPel</b>
          </description>
          <description>Bits per pixel</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsWidth</b>
          </description>
          <description>Pixel width</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsHeight</b>
          </description>
          <description>Pixel height</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFlags</b>
          </description>
          <description>Mode flags</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
          <description>Mode frequency</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPosition</b>
          </description>
          <description>Position of the device in a multi-monitor configuration.</description>
        </listheader>
      </list> <para>In addition to using one or more of the preceding <see cref="DEVMODE" /> members, you must also set one or more of the following values in the <b>dmFields</b> member to change the display settings.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description>DM_BITSPERPEL</description><description>Use the <b>dmBitsPerPel</b> value.</description></listheader><listheader><description>DM_PELSWIDTH</description><description>Use the <b>dmPelsWidth</b> value.</description></listheader><listheader><description>DM_PELSHEIGHT</description><description>Use the <b>dmPelsHeight</b> value.</description></listheader><listheader><description>DM_DISPLAYFLAGS</description><description>Use the <b>dmDisplayFlags</b> value.</description></listheader><listheader><description>DM_DISPLAYFREQUENCY</description><description>Use the <b>dmDisplayFrequency</b> value.</description></listheader><listheader><description>DM_POSITION</description><description>Use the <b>dmPosition</b> value.</description></listheader></list></param>
    <param name="hwnd">Reserved; must be <b>NULL</b>.</param>
    <param name="dwflags">
      <para>Indicates how the graphics mode should be changed. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_FULLSCREEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The mode is temporary in nature.<para>If you change to and from another desktop, this mode will not be reset.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_GLOBAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the global settings area so that they will affect all users on the machine. Otherwise, only the settings for the user are modified. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_NORESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the registry, but will not take effect. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_RESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings should be changed, even if the requested settings are the same as the current settings.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_SET_PRIMARY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This device will become the primary device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_TEST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system tests if the requested graphics mode could be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_UPDATEREGISTRY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically and the graphics mode will be updated in the registry. The mode information is stored in the USER profile.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_VIDEOPARAMETERS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When set, the <i>lParam</i> parameter is a pointer to a <a href="https://docs.microsoft.com//previous-versions/dd145196(v=vs.85)">VIDEOPARAMETERS</a> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_ENABLE_UNSAFE_MODES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables settings changes to unsafe graphics modes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_DISABLE_UNSAFE_MODES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Disables settings changes to unsafe graphics modes.</description>
        </listheader>
      </list> <para>Specifying CDS_TEST allows an application to determine which graphics modes are actually valid, without causing the system to change to them.</para><para>If CDS_UPDATEREGISTRY is specified and it is possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_SUCCESSFUL is returned. If it is not possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_RESTART is returned.</para><para>If CDS_UPDATEREGISTRY is specified and the information could not be stored in the registry, the graphics mode is not changed and DISP_CHANGE_NOTUPDATED is returned.</para></param>
    <param name="lParam">If <i>dwFlags</i> is <b>CDS_VIDEOPARAMETERS</b>, <i>lParam</i> is a pointer to a <a href="https://docs.microsoft.com//previous-versions/dd145196(v=vs.85)">VIDEOPARAMETERS</a> structure. Otherwise <i>lParam</i> must be <b>NULL</b>.</param>
    <returns>
      <para>The <b>ChangeDisplaySettingsEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_SUCCESSFUL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADDUALVIEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was unsuccessful because the system is DualView capable.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADFLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid set of flags was passed in.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADPARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed in. This can include an invalid flag or combination of flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_FAILED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The display driver failed the specified graphics mode.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_NOTUPDATED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unable to write settings to the registry.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_RESTART</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The computer must be restarted for the graphics mode to work.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.ChangeDisplaySettingsExW">
    <summary>
      <para>The <b>ChangeDisplaySettingsEx</b> function changes the settings of the specified display device to the specified graphics mode.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpszDeviceName">
      <para>A pointer to a null-terminated string that specifies the display device whose graphics mode will change. Only display device names as returned by <see cref="EnumDisplayDevices" /> are valid. See <b>EnumDisplayDevices</b> for further information on the names associated with these display devices.</para>
      <para>The <i>lpszDeviceName</i> parameter can be <b>NULL</b>. A <b>NULL</b> value specifies the default display device. The default device can be determined by calling <see cref="EnumDisplayDevices" /> and checking for the DISPLAY_DEVICE_PRIMARY_DEVICE flag.</para>
    </param>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure that describes the new graphics mode. If <i>lpDevMode</i> is <b>NULL</b>, all the values currently in the registry will be used for the display setting. Passing <b>NULL</b> for the <i>lpDevMode</i> parameter and 0 for the <i>dwFlags</i> parameter is the easiest way to return to the default mode after a dynamic mode change.</para>
      <para>The <b>dmSize</b> member must be initialized to the size, in bytes, of the <see cref="DEVMODE" /> structure. The <b>dmDriverExtra</b> member must be initialized to indicate the number of bytes of private driver data following the <b>DEVMODE</b> structure. In addition, you can use any of the following members of the <b>DEVMODE</b> structure.</para>
      <list type="table">
        <listheader>
          <description>Member</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <b>dmBitsPerPel</b>
          </description>
          <description>Bits per pixel</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsWidth</b>
          </description>
          <description>Pixel width</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsHeight</b>
          </description>
          <description>Pixel height</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFlags</b>
          </description>
          <description>Mode flags</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
          <description>Mode frequency</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPosition</b>
          </description>
          <description>Position of the device in a multi-monitor configuration.</description>
        </listheader>
      </list> <para>In addition to using one or more of the preceding <see cref="DEVMODE" /> members, you must also set one or more of the following values in the <b>dmFields</b> member to change the display settings.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description>DM_BITSPERPEL</description><description>Use the <b>dmBitsPerPel</b> value.</description></listheader><listheader><description>DM_PELSWIDTH</description><description>Use the <b>dmPelsWidth</b> value.</description></listheader><listheader><description>DM_PELSHEIGHT</description><description>Use the <b>dmPelsHeight</b> value.</description></listheader><listheader><description>DM_DISPLAYFLAGS</description><description>Use the <b>dmDisplayFlags</b> value.</description></listheader><listheader><description>DM_DISPLAYFREQUENCY</description><description>Use the <b>dmDisplayFrequency</b> value.</description></listheader><listheader><description>DM_POSITION</description><description>Use the <b>dmPosition</b> value.</description></listheader></list></param>
    <param name="hwnd">Reserved; must be <b>NULL</b>.</param>
    <param name="dwflags">
      <para>Indicates how the graphics mode should be changed. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_FULLSCREEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The mode is temporary in nature.<para>If you change to and from another desktop, this mode will not be reset.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_GLOBAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the global settings area so that they will affect all users on the machine. Otherwise, only the settings for the user are modified. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_NORESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the registry, but will not take effect. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_RESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings should be changed, even if the requested settings are the same as the current settings.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_SET_PRIMARY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This device will become the primary device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_TEST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system tests if the requested graphics mode could be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_UPDATEREGISTRY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically and the graphics mode will be updated in the registry. The mode information is stored in the USER profile.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_VIDEOPARAMETERS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When set, the <i>lParam</i> parameter is a pointer to a <a href="https://docs.microsoft.com//previous-versions/dd145196(v=vs.85)">VIDEOPARAMETERS</a> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_ENABLE_UNSAFE_MODES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables settings changes to unsafe graphics modes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_DISABLE_UNSAFE_MODES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Disables settings changes to unsafe graphics modes.</description>
        </listheader>
      </list> <para>Specifying CDS_TEST allows an application to determine which graphics modes are actually valid, without causing the system to change to them.</para><para>If CDS_UPDATEREGISTRY is specified and it is possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_SUCCESSFUL is returned. If it is not possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_RESTART is returned.</para><para>If CDS_UPDATEREGISTRY is specified and the information could not be stored in the registry, the graphics mode is not changed and DISP_CHANGE_NOTUPDATED is returned.</para></param>
    <param name="lParam">If <i>dwFlags</i> is <b>CDS_VIDEOPARAMETERS</b>, <i>lParam</i> is a pointer to a <a href="https://docs.microsoft.com//previous-versions/dd145196(v=vs.85)">VIDEOPARAMETERS</a> structure. Otherwise <i>lParam</i> must be <b>NULL</b>.</param>
    <returns>
      <para>The <b>ChangeDisplaySettingsEx</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_SUCCESSFUL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADDUALVIEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was unsuccessful because the system is DualView capable.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADFLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid set of flags was passed in.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADPARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed in. This can include an invalid flag or combination of flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_FAILED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The display driver failed the specified graphics mode.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_NOTUPDATED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unable to write settings to the registry.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_RESTART</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The computer must be restarted for the graphics mode to work.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.ChangeDisplaySettings">
    <summary>
      <para>The <b>ChangeDisplaySettings</b> function changes the settings of the default display device to the specified graphics mode.</para>
      <para>To change the settings of a specified display device, use the <see cref="ChangeDisplaySettingsEx" /> function.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure that describes the new graphics mode. If <i>lpDevMode</i> is <b>NULL</b>, all the values currently in the registry will be used for the display setting. Passing <b>NULL</b> for the <i>lpDevMode</i> parameter and 0 for the <i>dwFlags</i> parameter is the easiest way to return to the default mode after a dynamic mode change.</para>
      <para>The <b>dmSize</b> member of <see cref="DEVMODE" /> must be initialized to the size, in bytes, of the <b>DEVMODE</b> structure. The <b>dmDriverExtra</b> member of <b>DEVMODE</b> must be initialized to indicate the number of bytes of private driver data following the <b>DEVMODE</b> structure. In addition, you can use any or all of the following members of the <b>DEVMODE</b> structure.</para>
      <list type="table">
        <listheader>
          <description>Member</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <b>dmBitsPerPel</b>
          </description>
          <description>Bits per pixel</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsWidth</b>
          </description>
          <description>Pixel width</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsHeight</b>
          </description>
          <description>Pixel height</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFlags</b>
          </description>
          <description>Mode flags</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
          <description>Mode frequency</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPosition</b>
          </description>
          <description>Position of the device in a multi-monitor configuration.</description>
        </listheader>
      </list> <para>In addition to using one or more of the preceding <see cref="DEVMODE" /> members, you must also set one or more of the following values in the <b>dmFields</b> member to change the display setting.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description>DM_BITSPERPEL</description><description>Use the <b>dmBitsPerPel</b> value.</description></listheader><listheader><description>DM_PELSWIDTH</description><description>Use the <b>dmPelsWidth</b> value.</description></listheader><listheader><description>DM_PELSHEIGHT</description><description>Use the <b>dmPelsHeight</b> value.</description></listheader><listheader><description>DM_DISPLAYFLAGS</description><description>Use the <b>dmDisplayFlags</b> value.</description></listheader><listheader><description>DM_DISPLAYFREQUENCY</description><description>Use the <b>dmDisplayFrequency</b> value.</description></listheader><listheader><description>DM_POSITION</description><description>Use the <b>dmPosition</b> value.</description></listheader></list></param>
    <param name="dwFlags">
      <para>Indicates how the graphics mode should be changed. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_FULLSCREEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The mode is temporary in nature.<para>If you change to and from another desktop, this mode will not be reset.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_GLOBAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the global settings area so that they will affect all users on the machine. Otherwise, only the settings for the user are modified. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_NORESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the registry, but will not take effect. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_RESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings should be changed, even if the requested settings are the same as the current settings.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_SET_PRIMARY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This device will become the primary device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_TEST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system tests if the requested graphics mode could be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_UPDATEREGISTRY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically and the graphics mode will be updated in the registry. The mode information is stored in the USER profile.</description>
        </listheader>
      </list> <para>Specifying CDS_TEST allows an application to determine which graphics modes are actually valid, without causing the system to change to that graphics mode.</para><para>If CDS_UPDATEREGISTRY is specified and it is possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_SUCCESSFUL is returned. If it is not possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_RESTART is returned.</para><para>If CDS_UPDATEREGISTRY is specified and the information could not be stored in the registry, the graphics mode is not changed and DISP_CHANGE_NOTUPDATED is returned.</para></param>
    <returns>
      <para>The <b>ChangeDisplaySettings</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_SUCCESSFUL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADDUALVIEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was unsuccessful because the system is DualView capable.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADFLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid set of flags was passed in.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADPARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed in. This can include an invalid flag or combination of flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_FAILED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The display driver failed the specified graphics mode.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_NOTUPDATED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unable to write settings to the registry.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_RESTART</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The computer must be restarted for the graphics mode to work.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.ChangeDisplaySettingsA">
    <summary>
      <para>The <b>ChangeDisplaySettings</b> function changes the settings of the default display device to the specified graphics mode.</para>
      <para>To change the settings of a specified display device, use the <see cref="ChangeDisplaySettingsEx" /> function.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure that describes the new graphics mode. If <i>lpDevMode</i> is <b>NULL</b>, all the values currently in the registry will be used for the display setting. Passing <b>NULL</b> for the <i>lpDevMode</i> parameter and 0 for the <i>dwFlags</i> parameter is the easiest way to return to the default mode after a dynamic mode change.</para>
      <para>The <b>dmSize</b> member of <see cref="DEVMODE" /> must be initialized to the size, in bytes, of the <b>DEVMODE</b> structure. The <b>dmDriverExtra</b> member of <b>DEVMODE</b> must be initialized to indicate the number of bytes of private driver data following the <b>DEVMODE</b> structure. In addition, you can use any or all of the following members of the <b>DEVMODE</b> structure.</para>
      <list type="table">
        <listheader>
          <description>Member</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <b>dmBitsPerPel</b>
          </description>
          <description>Bits per pixel</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsWidth</b>
          </description>
          <description>Pixel width</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsHeight</b>
          </description>
          <description>Pixel height</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFlags</b>
          </description>
          <description>Mode flags</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
          <description>Mode frequency</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPosition</b>
          </description>
          <description>Position of the device in a multi-monitor configuration.</description>
        </listheader>
      </list> <para>In addition to using one or more of the preceding <see cref="DEVMODE" /> members, you must also set one or more of the following values in the <b>dmFields</b> member to change the display setting.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description>DM_BITSPERPEL</description><description>Use the <b>dmBitsPerPel</b> value.</description></listheader><listheader><description>DM_PELSWIDTH</description><description>Use the <b>dmPelsWidth</b> value.</description></listheader><listheader><description>DM_PELSHEIGHT</description><description>Use the <b>dmPelsHeight</b> value.</description></listheader><listheader><description>DM_DISPLAYFLAGS</description><description>Use the <b>dmDisplayFlags</b> value.</description></listheader><listheader><description>DM_DISPLAYFREQUENCY</description><description>Use the <b>dmDisplayFrequency</b> value.</description></listheader><listheader><description>DM_POSITION</description><description>Use the <b>dmPosition</b> value.</description></listheader></list></param>
    <param name="dwFlags">
      <para>Indicates how the graphics mode should be changed. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_FULLSCREEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The mode is temporary in nature.<para>If you change to and from another desktop, this mode will not be reset.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_GLOBAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the global settings area so that they will affect all users on the machine. Otherwise, only the settings for the user are modified. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_NORESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the registry, but will not take effect. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_RESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings should be changed, even if the requested settings are the same as the current settings.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_SET_PRIMARY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This device will become the primary device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_TEST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system tests if the requested graphics mode could be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_UPDATEREGISTRY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically and the graphics mode will be updated in the registry. The mode information is stored in the USER profile.</description>
        </listheader>
      </list> <para>Specifying CDS_TEST allows an application to determine which graphics modes are actually valid, without causing the system to change to that graphics mode.</para><para>If CDS_UPDATEREGISTRY is specified and it is possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_SUCCESSFUL is returned. If it is not possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_RESTART is returned.</para><para>If CDS_UPDATEREGISTRY is specified and the information could not be stored in the registry, the graphics mode is not changed and DISP_CHANGE_NOTUPDATED is returned.</para></param>
    <returns>
      <para>The <b>ChangeDisplaySettings</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_SUCCESSFUL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADDUALVIEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was unsuccessful because the system is DualView capable.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADFLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid set of flags was passed in.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADPARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed in. This can include an invalid flag or combination of flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_FAILED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The display driver failed the specified graphics mode.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_NOTUPDATED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unable to write settings to the registry.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_RESTART</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The computer must be restarted for the graphics mode to work.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.ChangeDisplaySettingsW">
    <summary>
      <para>The <b>ChangeDisplaySettings</b> function changes the settings of the default display device to the specified graphics mode.</para>
      <para>To change the settings of a specified display device, use the <see cref="ChangeDisplaySettingsEx" /> function.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure that describes the new graphics mode. If <i>lpDevMode</i> is <b>NULL</b>, all the values currently in the registry will be used for the display setting. Passing <b>NULL</b> for the <i>lpDevMode</i> parameter and 0 for the <i>dwFlags</i> parameter is the easiest way to return to the default mode after a dynamic mode change.</para>
      <para>The <b>dmSize</b> member of <see cref="DEVMODE" /> must be initialized to the size, in bytes, of the <b>DEVMODE</b> structure. The <b>dmDriverExtra</b> member of <b>DEVMODE</b> must be initialized to indicate the number of bytes of private driver data following the <b>DEVMODE</b> structure. In addition, you can use any or all of the following members of the <b>DEVMODE</b> structure.</para>
      <list type="table">
        <listheader>
          <description>Member</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <b>dmBitsPerPel</b>
          </description>
          <description>Bits per pixel</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsWidth</b>
          </description>
          <description>Pixel width</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPelsHeight</b>
          </description>
          <description>Pixel height</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFlags</b>
          </description>
          <description>Mode flags</description>
        </listheader>
        <listheader>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
          <description>Mode frequency</description>
        </listheader>
        <listheader>
          <description>
            <b>dmPosition</b>
          </description>
          <description>Position of the device in a multi-monitor configuration.</description>
        </listheader>
      </list> <para>In addition to using one or more of the preceding <see cref="DEVMODE" /> members, you must also set one or more of the following values in the <b>dmFields</b> member to change the display setting.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description>DM_BITSPERPEL</description><description>Use the <b>dmBitsPerPel</b> value.</description></listheader><listheader><description>DM_PELSWIDTH</description><description>Use the <b>dmPelsWidth</b> value.</description></listheader><listheader><description>DM_PELSHEIGHT</description><description>Use the <b>dmPelsHeight</b> value.</description></listheader><listheader><description>DM_DISPLAYFLAGS</description><description>Use the <b>dmDisplayFlags</b> value.</description></listheader><listheader><description>DM_DISPLAYFREQUENCY</description><description>Use the <b>dmDisplayFrequency</b> value.</description></listheader><listheader><description>DM_POSITION</description><description>Use the <b>dmPosition</b> value.</description></listheader></list></param>
    <param name="dwFlags">
      <para>Indicates how the graphics mode should be changed. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>0</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_FULLSCREEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The mode is temporary in nature.<para>If you change to and from another desktop, this mode will not be reset.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_GLOBAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the global settings area so that they will affect all users on the machine. Otherwise, only the settings for the user are modified. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_NORESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings will be saved in the registry, but will not take effect. This flag is only valid when specified with the CDS_UPDATEREGISTRY flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_RESET</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings should be changed, even if the requested settings are the same as the current settings.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_SET_PRIMARY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This device will become the primary device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_TEST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system tests if the requested graphics mode could be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CDS_UPDATEREGISTRY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode for the current screen will be changed dynamically and the graphics mode will be updated in the registry. The mode information is stored in the USER profile.</description>
        </listheader>
      </list> <para>Specifying CDS_TEST allows an application to determine which graphics modes are actually valid, without causing the system to change to that graphics mode.</para><para>If CDS_UPDATEREGISTRY is specified and it is possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_SUCCESSFUL is returned. If it is not possible to change the graphics mode dynamically, the information is stored in the registry and DISP_CHANGE_RESTART is returned.</para><para>If CDS_UPDATEREGISTRY is specified and the information could not be stored in the registry, the graphics mode is not changed and DISP_CHANGE_NOTUPDATED is returned.</para></param>
    <returns>
      <para>The <b>ChangeDisplaySettings</b> function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_SUCCESSFUL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADDUALVIEW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The settings change was unsuccessful because the system is DualView capable.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADFLAGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid set of flags was passed in.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The graphics mode is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_BADPARAM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid parameter was passed in. This can include an invalid flag or combination of flags.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_FAILED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The display driver failed the specified graphics mode.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_NOTUPDATED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unable to write settings to the registry.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DISP_CHANGE_RESTART</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The computer must be restarted for the graphics mode to work.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.ChangeWindowMessageFilterEx">
    <summary>Modifies the User Interface Privilege Isolation (UIPI) message filter for a specified window.</summary>
    <param name="hwnd">A handle to the window whose UIPI message filter is to be modified.</param>
    <param name="message">The message that the message filter allows through or blocks.</param>
    <param name="action">
      <para>The action to be performed, and can take one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MSGFLT_ALLOW</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Allows the message through the filter. This enables the message to be received by 					<i>hWnd</i>, regardless of the source of the message, 					even it comes from a lower privileged process. 					</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MSGFLT_DISALLOW</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Blocks the message to be delivered to <i>hWnd</i> if it comes from a lower privileged process, 					unless the message is allowed process-wide by using the <see cref="ChangeWindowMessageFilter" /> function 					or globally. 					</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MSGFLT_RESET</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>Resets the window message filter for <i>hWnd</i> to the default. Any message allowed 					globally or process-wide will get through, but any message not included 					in those two categories, and which comes from a lower privileged process, will be blocked. 					</description>
        </listheader>
      </list>
    </param>
    <param name="pChangeFilterStruct">Optional pointer to a <see cref="CHANGEFILTERSTRUCT" /> structure.</param>
    <returns>If the function succeeds, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b>. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.CharLower">
    <summary>Converts a character string or a single character to lowercase. If the operand is a character string, the function converts the characters in place.</summary>
    <param name="lpsz">A null-terminated string, or specifies a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.</param>
    <returns>
      <para>If the operand is a character string, the function returns a pointer to the converted string. Because the string is converted in place, the return value is equal to<i>lpsz</i>.</para>
      <para>If the operand is a single character, the return value is a 32-bit value whose high-order word is zero, and low-order word contains the converted character.</para>
      <para>There is no indication of success or failure. Failure is rare. There is no extended error information for this function; do not call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CharLowerA">
    <summary>Converts a character string or a single character to lowercase. If the operand is a character string, the function converts the characters in place.</summary>
    <param name="lpsz">A null-terminated string, or specifies a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.</param>
    <returns>
      <para>If the operand is a character string, the function returns a pointer to the converted string. Because the string is converted in place, the return value is equal to<i>lpsz</i>.</para>
      <para>If the operand is a single character, the return value is a 32-bit value whose high-order word is zero, and low-order word contains the converted character.</para>
      <para>There is no indication of success or failure. Failure is rare. There is no extended error information for this function; do not call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CharLowerW">
    <summary>Converts a character string or a single character to lowercase. If the operand is a character string, the function converts the characters in place.</summary>
    <param name="lpsz">A null-terminated string, or specifies a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.</param>
    <returns>
      <para>If the operand is a character string, the function returns a pointer to the converted string. Because the string is converted in place, the return value is equal to<i>lpsz</i>.</para>
      <para>If the operand is a single character, the return value is a 32-bit value whose high-order word is zero, and low-order word contains the converted character.</para>
      <para>There is no indication of success or failure. Failure is rare. There is no extended error information for this function; do not call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CharLowerBuff">
    <summary>Converts uppercase characters in a buffer to lowercase characters. The function converts the characters in place.</summary>
    <param name="lpsz">A buffer containing one or more characters to be processed.</param>
    <param name="cchLength">The size, in characters, of the buffer pointed to by<i>lpsz</i>. The function examines each character, and converts uppercase characters to lowercase characters. The function examines the number of characters indicated by<i>cchLength</i>, even if one or more characters are null characters.</param>
    <returns>The return value is the number of characters processed. For example, if <b>CharLowerBuff</b>("Acme of Operating Systems", 10) succeeds, the return value is 10.</returns>
  </member>
  <member name="Windows.CharLowerBuffA">
    <summary>Converts uppercase characters in a buffer to lowercase characters. The function converts the characters in place.</summary>
    <param name="lpsz">A buffer containing one or more characters to be processed.</param>
    <param name="cchLength">The size, in characters, of the buffer pointed to by<i>lpsz</i>. The function examines each character, and converts uppercase characters to lowercase characters. The function examines the number of characters indicated by<i>cchLength</i>, even if one or more characters are null characters.</param>
    <returns>The return value is the number of characters processed. For example, if <b>CharLowerBuff</b>("Acme of Operating Systems", 10) succeeds, the return value is 10.</returns>
  </member>
  <member name="Windows.CharLowerBuffW">
    <summary>Converts uppercase characters in a buffer to lowercase characters. The function converts the characters in place.</summary>
    <param name="lpsz">A buffer containing one or more characters to be processed.</param>
    <param name="cchLength">The size, in characters, of the buffer pointed to by<i>lpsz</i>. The function examines each character, and converts uppercase characters to lowercase characters. The function examines the number of characters indicated by<i>cchLength</i>, even if one or more characters are null characters.</param>
    <returns>The return value is the number of characters processed. For example, if <b>CharLowerBuff</b>("Acme of Operating Systems", 10) succeeds, the return value is 10.</returns>
  </member>
  <member name="Windows.CharLowerBuff">
    <summary>Converts uppercase characters in a buffer to lowercase characters. The function converts the characters in place.</summary>
    <param name="lpsz">A buffer containing one or more characters to be processed.</param>
    <param name="cchLength">The size, in characters, of the buffer pointed to by<i>lpsz</i>. The function examines each character, and converts uppercase characters to lowercase characters. The function examines the number of characters indicated by<i>cchLength</i>, even if one or more characters are null characters.</param>
    <returns>The return value is the number of characters processed. For example, if <b>CharLowerBuff</b>("Acme of Operating Systems", 10) succeeds, the return value is 10.</returns>
  </member>
  <member name="Windows.CharLowerBuffA">
    <summary>Converts uppercase characters in a buffer to lowercase characters. The function converts the characters in place.</summary>
    <param name="lpsz">A buffer containing one or more characters to be processed.</param>
    <param name="cchLength">The size, in characters, of the buffer pointed to by<i>lpsz</i>. The function examines each character, and converts uppercase characters to lowercase characters. The function examines the number of characters indicated by<i>cchLength</i>, even if one or more characters are null characters.</param>
    <returns>The return value is the number of characters processed. For example, if <b>CharLowerBuff</b>("Acme of Operating Systems", 10) succeeds, the return value is 10.</returns>
  </member>
  <member name="Windows.CharLowerBuffW">
    <summary>Converts uppercase characters in a buffer to lowercase characters. The function converts the characters in place.</summary>
    <param name="lpsz">A buffer containing one or more characters to be processed.</param>
    <param name="cchLength">The size, in characters, of the buffer pointed to by<i>lpsz</i>. The function examines each character, and converts uppercase characters to lowercase characters. The function examines the number of characters indicated by<i>cchLength</i>, even if one or more characters are null characters.</param>
    <returns>The return value is the number of characters processed. For example, if <b>CharLowerBuff</b>("Acme of Operating Systems", 10) succeeds, the return value is 10.</returns>
  </member>
  <member name="Windows.CharLower">
    <summary>Converts a character string or a single character to lowercase. If the operand is a character string, the function converts the characters in place.</summary>
    <param name="lpsz">A null-terminated string, or specifies a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.</param>
    <returns>
      <para>If the operand is a character string, the function returns a pointer to the converted string. Because the string is converted in place, the return value is equal to<i>lpsz</i>.</para>
      <para>If the operand is a single character, the return value is a 32-bit value whose high-order word is zero, and low-order word contains the converted character.</para>
      <para>There is no indication of success or failure. Failure is rare. There is no extended error information for this function; do not call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CharLowerA">
    <summary>Converts a character string or a single character to lowercase. If the operand is a character string, the function converts the characters in place.</summary>
    <param name="lpsz">A null-terminated string, or specifies a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.</param>
    <returns>
      <para>If the operand is a character string, the function returns a pointer to the converted string. Because the string is converted in place, the return value is equal to<i>lpsz</i>.</para>
      <para>If the operand is a single character, the return value is a 32-bit value whose high-order word is zero, and low-order word contains the converted character.</para>
      <para>There is no indication of success or failure. Failure is rare. There is no extended error information for this function; do not call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CharLowerW">
    <summary>Converts a character string or a single character to lowercase. If the operand is a character string, the function converts the characters in place.</summary>
    <param name="lpsz">A null-terminated string, or specifies a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.</param>
    <returns>
      <para>If the operand is a character string, the function returns a pointer to the converted string. Because the string is converted in place, the return value is equal to<i>lpsz</i>.</para>
      <para>If the operand is a single character, the return value is a 32-bit value whose high-order word is zero, and low-order word contains the converted character.</para>
      <para>There is no indication of success or failure. Failure is rare. There is no extended error information for this function; do not call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CharNext">
    <summary>Retrieves a pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters.</summary>
    <param name="lpsz">A character in a null-terminated string.</param>
    <returns>
      <para>The return value is a pointer to the next character in the string, or to the terminating null character if at the end of the string.</para>
      <para>If<i>lpsz</i> points to the terminating null character, the return value is equal to<i>lpsz</i>.</para>
    </returns>
  </member>
  <member name="Windows.CharNextA">
    <summary>Retrieves a pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters.</summary>
    <param name="lpsz">A character in a null-terminated string.</param>
    <returns>
      <para>The return value is a pointer to the next character in the string, or to the terminating null character if at the end of the string.</para>
      <para>If<i>lpsz</i> points to the terminating null character, the return value is equal to<i>lpsz</i>.</para>
    </returns>
  </member>
  <member name="Windows.CharNextW">
    <summary>Retrieves a pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters.</summary>
    <param name="lpsz">A character in a null-terminated string.</param>
    <returns>
      <para>The return value is a pointer to the next character in the string, or to the terminating null character if at the end of the string.</para>
      <para>If<i>lpsz</i> points to the terminating null character, the return value is equal to<i>lpsz</i>.</para>
    </returns>
  </member>
  <member name="Windows.CharNextExA">
    <summary>Retrieves the pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters.</summary>
    <param name="CodePage">
      <para>The identifier of the code page to use to check lead-byte ranges. Can be one of the code-page values provided in <a href="https://docs.microsoft.com//windows/desktop/Intl/code-page-identifiers">Code Page Identifiers</a>, or one of the following predefined values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CP_ACP</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>Use system default ANSI code page.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CP_MACCP</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description> Use the system default Macintosh code page.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CP_OEMCP</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Use system default OEM code page.</description>
        </listheader>
      </list>
    </param>
    <param name="lpCurrentChar">A character in a null-terminated string.</param>
    <param name="dwFlags">This parameter is reserved and must be 0.</param>
    <returns>
      <para>The return value is a pointer to the next character in the string, or to the terminating null character if at the end of the string.</para>
      <para>If<i>lpCurrentChar</i> points to the terminating null character, the return value is equal to<i>lpCurrentChar</i>.</para>
    </returns>
  </member>
  <member name="Windows.CharNext">
    <summary>Retrieves a pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters.</summary>
    <param name="lpsz">A character in a null-terminated string.</param>
    <returns>
      <para>The return value is a pointer to the next character in the string, or to the terminating null character if at the end of the string.</para>
      <para>If<i>lpsz</i> points to the terminating null character, the return value is equal to<i>lpsz</i>.</para>
    </returns>
  </member>
  <member name="Windows.CharNextA">
    <summary>Retrieves a pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters.</summary>
    <param name="lpsz">A character in a null-terminated string.</param>
    <returns>
      <para>The return value is a pointer to the next character in the string, or to the terminating null character if at the end of the string.</para>
      <para>If<i>lpsz</i> points to the terminating null character, the return value is equal to<i>lpsz</i>.</para>
    </returns>
  </member>
  <member name="Windows.CharNextW">
    <summary>Retrieves a pointer to the next character in a string. This function can handle strings consisting of either single- or multi-byte characters.</summary>
    <param name="lpsz">A character in a null-terminated string.</param>
    <returns>
      <para>The return value is a pointer to the next character in the string, or to the terminating null character if at the end of the string.</para>
      <para>If<i>lpsz</i> points to the terminating null character, the return value is equal to<i>lpsz</i>.</para>
    </returns>
  </member>
  <member name="Windows.CharPrev">
    <summary>Retrieves a pointer to the preceding character in a string. This function can handle strings consisting of either single- or multi-byte characters.</summary>
    <param name="lpszStart">The beginning of the string.</param>
    <param name="lpszCurrent">A character in a null-terminated string.</param>
    <returns>The return value is a pointer to the preceding character in the string, or to the first character in the string if the<i>lpszCurrent</i> parameter equals the<i>lpszStart</i> parameter.</returns>
  </member>
  <member name="Windows.CharPrevA">
    <summary>Retrieves a pointer to the preceding character in a string. This function can handle strings consisting of either single- or multi-byte characters.</summary>
    <param name="lpszStart">The beginning of the string.</param>
    <param name="lpszCurrent">A character in a null-terminated string.</param>
    <returns>The return value is a pointer to the preceding character in the string, or to the first character in the string if the<i>lpszCurrent</i> parameter equals the<i>lpszStart</i> parameter.</returns>
  </member>
  <member name="Windows.CharPrevW">
    <summary>Retrieves a pointer to the preceding character in a string. This function can handle strings consisting of either single- or multi-byte characters.</summary>
    <param name="lpszStart">The beginning of the string.</param>
    <param name="lpszCurrent">A character in a null-terminated string.</param>
    <returns>The return value is a pointer to the preceding character in the string, or to the first character in the string if the<i>lpszCurrent</i> parameter equals the<i>lpszStart</i> parameter.</returns>
  </member>
  <member name="Windows.CharPrevExA">
    <summary>Retrieves the pointer to the preceding character in a string. This function can handle strings consisting of either single- or multi-byte characters.</summary>
    <param name="CodePage">
      <para>The identifier of the code page to use to check lead-byte ranges. Can be one of the code-page values provided in <a href="https://docs.microsoft.com//windows/desktop/Intl/code-page-identifiers">Code Page Identifiers</a>, or one of the following predefined values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CP_ACP</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>Use system default ANSI code page.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CP_MACCP</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description> Use the system default Macintosh code page.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CP_OEMCP</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Use system default OEM code page.</description>
        </listheader>
      </list>
    </param>
    <param name="lpStart">The beginning of the string.</param>
    <param name="lpCurrentChar">A character in a null-terminated string.</param>
    <param name="dwFlags">This parameter is reserved and must be zero.</param>
    <returns>The return value is a pointer to the preceding character in the string, or to the first character in the string if the<i>lpCurrentChar</i> parameter equals the<i>lpStart</i> parameter.</returns>
  </member>
  <member name="Windows.CharPrev">
    <summary>Retrieves a pointer to the preceding character in a string. This function can handle strings consisting of either single- or multi-byte characters.</summary>
    <param name="lpszStart">The beginning of the string.</param>
    <param name="lpszCurrent">A character in a null-terminated string.</param>
    <returns>The return value is a pointer to the preceding character in the string, or to the first character in the string if the<i>lpszCurrent</i> parameter equals the<i>lpszStart</i> parameter.</returns>
  </member>
  <member name="Windows.CharPrevA">
    <summary>Retrieves a pointer to the preceding character in a string. This function can handle strings consisting of either single- or multi-byte characters.</summary>
    <param name="lpszStart">The beginning of the string.</param>
    <param name="lpszCurrent">A character in a null-terminated string.</param>
    <returns>The return value is a pointer to the preceding character in the string, or to the first character in the string if the<i>lpszCurrent</i> parameter equals the<i>lpszStart</i> parameter.</returns>
  </member>
  <member name="Windows.CharPrevW">
    <summary>Retrieves a pointer to the preceding character in a string. This function can handle strings consisting of either single- or multi-byte characters.</summary>
    <param name="lpszStart">The beginning of the string.</param>
    <param name="lpszCurrent">A character in a null-terminated string.</param>
    <returns>The return value is a pointer to the preceding character in the string, or to the first character in the string if the<i>lpszCurrent</i> parameter equals the<i>lpszStart</i> parameter.</returns>
  </member>
  <member name="Windows.CharToOem">
    <summary>
      <para>Translates a string into the OEM-defined character set.</para>
      <div>
        <b>Warning</b>  Do not use. See Security Considerations.</div>
    </summary>
    <param name="pSrc">The null-terminated string to be translated.</param>
    <param name="pDst">The destination buffer, which receives the translated string. If the <b>CharToOem</b> function is being used as an ANSI function, the string can be translated in place by setting the<i>lpszDst</i> parameter to the same address as the<i>lpszSrc</i> parameter. This cannot be done if <b>CharToOem</b> is being used as a wide-character function.</param>
    <returns>The return value is always nonzero except when you pass the same address to<i>lpszSrc</i> and<i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and<see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.CharToOemA">
    <summary>
      <para>Translates a string into the OEM-defined character set.</para>
      <div>
        <b>Warning</b>  Do not use. See Security Considerations.</div>
    </summary>
    <param name="pSrc">The null-terminated string to be translated.</param>
    <param name="pDst">The destination buffer, which receives the translated string. If the <b>CharToOem</b> function is being used as an ANSI function, the string can be translated in place by setting the<i>lpszDst</i> parameter to the same address as the<i>lpszSrc</i> parameter. This cannot be done if <b>CharToOem</b> is being used as a wide-character function.</param>
    <returns>The return value is always nonzero except when you pass the same address to<i>lpszSrc</i> and<i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and<see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.CharToOemW">
    <summary>
      <para>Translates a string into the OEM-defined character set.</para>
      <div>
        <b>Warning</b>  Do not use. See Security Considerations.</div>
    </summary>
    <param name="pSrc">The null-terminated string to be translated.</param>
    <param name="pDst">The destination buffer, which receives the translated string. If the <b>CharToOem</b> function is being used as an ANSI function, the string can be translated in place by setting the<i>lpszDst</i> parameter to the same address as the<i>lpszSrc</i> parameter. This cannot be done if <b>CharToOem</b> is being used as a wide-character function.</param>
    <returns>The return value is always nonzero except when you pass the same address to<i>lpszSrc</i> and<i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and<see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.CharToOemBuff">
    <summary>Translates a specified number of characters in a string into the OEM-defined character set.</summary>
    <param name="lpszSrc">The null-terminated string to be translated.</param>
    <param name="lpszDst">The buffer for the translated string. If the <b>CharToOemBuff</b> function is being used as an ANSI function, the string can be translated in place by setting the <i>lpszDst</i> parameter to the same address as the <i>lpszSrc</i> parameter. This cannot be done if <b>CharToOemBuff</b> is being used as a wide-character function.</param>
    <param name="cchDstLength">The number of characters to translate in the string identified by the <i>lpszSrc</i> parameter.</param>
    <returns>The return value is always nonzero except when you pass the same address to <i>lpszSrc</i> and <i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and <see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.CharToOemBuffA">
    <summary>Translates a specified number of characters in a string into the OEM-defined character set.</summary>
    <param name="lpszSrc">The null-terminated string to be translated.</param>
    <param name="lpszDst">The buffer for the translated string. If the <b>CharToOemBuff</b> function is being used as an ANSI function, the string can be translated in place by setting the <i>lpszDst</i> parameter to the same address as the <i>lpszSrc</i> parameter. This cannot be done if <b>CharToOemBuff</b> is being used as a wide-character function.</param>
    <param name="cchDstLength">The number of characters to translate in the string identified by the <i>lpszSrc</i> parameter.</param>
    <returns>The return value is always nonzero except when you pass the same address to <i>lpszSrc</i> and <i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and <see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.CharToOemBuffW">
    <summary>Translates a specified number of characters in a string into the OEM-defined character set.</summary>
    <param name="lpszSrc">The null-terminated string to be translated.</param>
    <param name="lpszDst">The buffer for the translated string. If the <b>CharToOemBuff</b> function is being used as an ANSI function, the string can be translated in place by setting the <i>lpszDst</i> parameter to the same address as the <i>lpszSrc</i> parameter. This cannot be done if <b>CharToOemBuff</b> is being used as a wide-character function.</param>
    <param name="cchDstLength">The number of characters to translate in the string identified by the <i>lpszSrc</i> parameter.</param>
    <returns>The return value is always nonzero except when you pass the same address to <i>lpszSrc</i> and <i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and <see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.CharToOemBuff">
    <summary>Translates a specified number of characters in a string into the OEM-defined character set.</summary>
    <param name="lpszSrc">The null-terminated string to be translated.</param>
    <param name="lpszDst">The buffer for the translated string. If the <b>CharToOemBuff</b> function is being used as an ANSI function, the string can be translated in place by setting the <i>lpszDst</i> parameter to the same address as the <i>lpszSrc</i> parameter. This cannot be done if <b>CharToOemBuff</b> is being used as a wide-character function.</param>
    <param name="cchDstLength">The number of characters to translate in the string identified by the <i>lpszSrc</i> parameter.</param>
    <returns>The return value is always nonzero except when you pass the same address to <i>lpszSrc</i> and <i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and <see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.CharToOemBuffA">
    <summary>Translates a specified number of characters in a string into the OEM-defined character set.</summary>
    <param name="lpszSrc">The null-terminated string to be translated.</param>
    <param name="lpszDst">The buffer for the translated string. If the <b>CharToOemBuff</b> function is being used as an ANSI function, the string can be translated in place by setting the <i>lpszDst</i> parameter to the same address as the <i>lpszSrc</i> parameter. This cannot be done if <b>CharToOemBuff</b> is being used as a wide-character function.</param>
    <param name="cchDstLength">The number of characters to translate in the string identified by the <i>lpszSrc</i> parameter.</param>
    <returns>The return value is always nonzero except when you pass the same address to <i>lpszSrc</i> and <i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and <see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.CharToOemBuffW">
    <summary>Translates a specified number of characters in a string into the OEM-defined character set.</summary>
    <param name="lpszSrc">The null-terminated string to be translated.</param>
    <param name="lpszDst">The buffer for the translated string. If the <b>CharToOemBuff</b> function is being used as an ANSI function, the string can be translated in place by setting the <i>lpszDst</i> parameter to the same address as the <i>lpszSrc</i> parameter. This cannot be done if <b>CharToOemBuff</b> is being used as a wide-character function.</param>
    <param name="cchDstLength">The number of characters to translate in the string identified by the <i>lpszSrc</i> parameter.</param>
    <returns>The return value is always nonzero except when you pass the same address to <i>lpszSrc</i> and <i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and <see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.CharToOem">
    <summary>
      <para>Translates a string into the OEM-defined character set.</para>
      <div>
        <b>Warning</b>  Do not use. See Security Considerations.</div>
    </summary>
    <param name="pSrc">The null-terminated string to be translated.</param>
    <param name="pDst">The destination buffer, which receives the translated string. If the <b>CharToOem</b> function is being used as an ANSI function, the string can be translated in place by setting the<i>lpszDst</i> parameter to the same address as the<i>lpszSrc</i> parameter. This cannot be done if <b>CharToOem</b> is being used as a wide-character function.</param>
    <returns>The return value is always nonzero except when you pass the same address to<i>lpszSrc</i> and<i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and<see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.CharToOemA">
    <summary>
      <para>Translates a string into the OEM-defined character set.</para>
      <div>
        <b>Warning</b>  Do not use. See Security Considerations.</div>
    </summary>
    <param name="pSrc">The null-terminated string to be translated.</param>
    <param name="pDst">The destination buffer, which receives the translated string. If the <b>CharToOem</b> function is being used as an ANSI function, the string can be translated in place by setting the<i>lpszDst</i> parameter to the same address as the<i>lpszSrc</i> parameter. This cannot be done if <b>CharToOem</b> is being used as a wide-character function.</param>
    <returns>The return value is always nonzero except when you pass the same address to<i>lpszSrc</i> and<i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and<see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.CharToOemW">
    <summary>
      <para>Translates a string into the OEM-defined character set.</para>
      <div>
        <b>Warning</b>  Do not use. See Security Considerations.</div>
    </summary>
    <param name="pSrc">The null-terminated string to be translated.</param>
    <param name="pDst">The destination buffer, which receives the translated string. If the <b>CharToOem</b> function is being used as an ANSI function, the string can be translated in place by setting the<i>lpszDst</i> parameter to the same address as the<i>lpszSrc</i> parameter. This cannot be done if <b>CharToOem</b> is being used as a wide-character function.</param>
    <returns>The return value is always nonzero except when you pass the same address to<i>lpszSrc</i> and<i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and<see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.CharUpper">
    <summary>Converts a character string or a single character to uppercase. If the operand is a character string, the function converts the characters in place.</summary>
    <param name="lpsz">A null-terminated string, or a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.</param>
    <returns>
      <para>If the operand is a character string, the function returns a pointer to the converted string. Because the string is converted in place, the return value is equal to<i>lpsz</i>.</para>
      <para>If the operand is a single character, the return value is a 32-bit value whose high-order word is zero, and low-order word contains the converted character.</para>
      <para>There is no indication of success or failure. Failure is rare. There is no extended error information for this function; do not call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CharUpperA">
    <summary>Converts a character string or a single character to uppercase. If the operand is a character string, the function converts the characters in place.</summary>
    <param name="lpsz">A null-terminated string, or a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.</param>
    <returns>
      <para>If the operand is a character string, the function returns a pointer to the converted string. Because the string is converted in place, the return value is equal to<i>lpsz</i>.</para>
      <para>If the operand is a single character, the return value is a 32-bit value whose high-order word is zero, and low-order word contains the converted character.</para>
      <para>There is no indication of success or failure. Failure is rare. There is no extended error information for this function; do not call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CharUpperW">
    <summary>Converts a character string or a single character to uppercase. If the operand is a character string, the function converts the characters in place.</summary>
    <param name="lpsz">A null-terminated string, or a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.</param>
    <returns>
      <para>If the operand is a character string, the function returns a pointer to the converted string. Because the string is converted in place, the return value is equal to<i>lpsz</i>.</para>
      <para>If the operand is a single character, the return value is a 32-bit value whose high-order word is zero, and low-order word contains the converted character.</para>
      <para>There is no indication of success or failure. Failure is rare. There is no extended error information for this function; do not call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CharUpperBuff">
    <summary>Converts lowercase characters in a buffer to uppercase characters. The function converts the characters in place.</summary>
    <param name="lpsz">A buffer containing one or more characters to be processed.</param>
    <param name="cchLength">
      <para>The size, in characters, of the buffer pointed to by <i>lpsz</i>.</para>
      <para>The function examines each character, and converts lowercase characters to uppercase characters. The function examines the number of characters indicated by<i>cchLength</i>, even if one or more characters are null characters.</para>
    </param>
    <returns>
      <para>The return value is the number of characters processed.</para>
      <para>For example, if <b>CharUpperBuff</b>("Zenith of API Sets", 10) succeeds, the return value is 10.</para>
    </returns>
  </member>
  <member name="Windows.CharUpperBuffA">
    <summary>Converts lowercase characters in a buffer to uppercase characters. The function converts the characters in place.</summary>
    <param name="lpsz">A buffer containing one or more characters to be processed.</param>
    <param name="cchLength">
      <para>The size, in characters, of the buffer pointed to by <i>lpsz</i>.</para>
      <para>The function examines each character, and converts lowercase characters to uppercase characters. The function examines the number of characters indicated by<i>cchLength</i>, even if one or more characters are null characters.</para>
    </param>
    <returns>
      <para>The return value is the number of characters processed.</para>
      <para>For example, if <b>CharUpperBuff</b>("Zenith of API Sets", 10) succeeds, the return value is 10.</para>
    </returns>
  </member>
  <member name="Windows.CharUpperBuffW">
    <summary>Converts lowercase characters in a buffer to uppercase characters. The function converts the characters in place.</summary>
    <param name="lpsz">A buffer containing one or more characters to be processed.</param>
    <param name="cchLength">
      <para>The size, in characters, of the buffer pointed to by <i>lpsz</i>.</para>
      <para>The function examines each character, and converts lowercase characters to uppercase characters. The function examines the number of characters indicated by<i>cchLength</i>, even if one or more characters are null characters.</para>
    </param>
    <returns>
      <para>The return value is the number of characters processed.</para>
      <para>For example, if <b>CharUpperBuff</b>("Zenith of API Sets", 10) succeeds, the return value is 10.</para>
    </returns>
  </member>
  <member name="Windows.CharUpperBuff">
    <summary>Converts lowercase characters in a buffer to uppercase characters. The function converts the characters in place.</summary>
    <param name="lpsz">A buffer containing one or more characters to be processed.</param>
    <param name="cchLength">
      <para>The size, in characters, of the buffer pointed to by <i>lpsz</i>.</para>
      <para>The function examines each character, and converts lowercase characters to uppercase characters. The function examines the number of characters indicated by<i>cchLength</i>, even if one or more characters are null characters.</para>
    </param>
    <returns>
      <para>The return value is the number of characters processed.</para>
      <para>For example, if <b>CharUpperBuff</b>("Zenith of API Sets", 10) succeeds, the return value is 10.</para>
    </returns>
  </member>
  <member name="Windows.CharUpperBuffA">
    <summary>Converts lowercase characters in a buffer to uppercase characters. The function converts the characters in place.</summary>
    <param name="lpsz">A buffer containing one or more characters to be processed.</param>
    <param name="cchLength">
      <para>The size, in characters, of the buffer pointed to by <i>lpsz</i>.</para>
      <para>The function examines each character, and converts lowercase characters to uppercase characters. The function examines the number of characters indicated by<i>cchLength</i>, even if one or more characters are null characters.</para>
    </param>
    <returns>
      <para>The return value is the number of characters processed.</para>
      <para>For example, if <b>CharUpperBuff</b>("Zenith of API Sets", 10) succeeds, the return value is 10.</para>
    </returns>
  </member>
  <member name="Windows.CharUpperBuffW">
    <summary>Converts lowercase characters in a buffer to uppercase characters. The function converts the characters in place.</summary>
    <param name="lpsz">A buffer containing one or more characters to be processed.</param>
    <param name="cchLength">
      <para>The size, in characters, of the buffer pointed to by <i>lpsz</i>.</para>
      <para>The function examines each character, and converts lowercase characters to uppercase characters. The function examines the number of characters indicated by<i>cchLength</i>, even if one or more characters are null characters.</para>
    </param>
    <returns>
      <para>The return value is the number of characters processed.</para>
      <para>For example, if <b>CharUpperBuff</b>("Zenith of API Sets", 10) succeeds, the return value is 10.</para>
    </returns>
  </member>
  <member name="Windows.CharUpper">
    <summary>Converts a character string or a single character to uppercase. If the operand is a character string, the function converts the characters in place.</summary>
    <param name="lpsz">A null-terminated string, or a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.</param>
    <returns>
      <para>If the operand is a character string, the function returns a pointer to the converted string. Because the string is converted in place, the return value is equal to<i>lpsz</i>.</para>
      <para>If the operand is a single character, the return value is a 32-bit value whose high-order word is zero, and low-order word contains the converted character.</para>
      <para>There is no indication of success or failure. Failure is rare. There is no extended error information for this function; do not call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CharUpperA">
    <summary>Converts a character string or a single character to uppercase. If the operand is a character string, the function converts the characters in place.</summary>
    <param name="lpsz">A null-terminated string, or a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.</param>
    <returns>
      <para>If the operand is a character string, the function returns a pointer to the converted string. Because the string is converted in place, the return value is equal to<i>lpsz</i>.</para>
      <para>If the operand is a single character, the return value is a 32-bit value whose high-order word is zero, and low-order word contains the converted character.</para>
      <para>There is no indication of success or failure. Failure is rare. There is no extended error information for this function; do not call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CharUpperW">
    <summary>Converts a character string or a single character to uppercase. If the operand is a character string, the function converts the characters in place.</summary>
    <param name="lpsz">A null-terminated string, or a single character. If the high-order word of this parameter is zero, the low-order word must contain a single character to be converted.</param>
    <returns>
      <para>If the operand is a character string, the function returns a pointer to the converted string. Because the string is converted in place, the return value is equal to<i>lpsz</i>.</para>
      <para>If the operand is a single character, the return value is a 32-bit value whose high-order word is zero, and low-order word contains the converted character.</para>
      <para>There is no indication of success or failure. Failure is rare. There is no extended error information for this function; do not call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CheckDlgButton">
    <summary>Changes the check state of a button control.</summary>
    <param name="hDlg">A handle to the dialog box that contains the button.</param>
    <param name="nIDButton">The identifier of the button to modify.</param>
    <param name="uCheck">
      <para>The check state of the button. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BST_CHECKED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the button state to checked.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BST_INDETERMINATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the button state to grayed, indicating an indeterminate state. Use this value only if the button has the <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_3STATE</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_AUTO3STATE</a> style.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BST_UNCHECKED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the button state to cleared</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CheckMenuRadioItem">
    <summary>Checks a specified menu item and makes it a radio item. At the same time, the function clears all other menu items in the associated group and clears the radio-item type flag for those items.</summary>
    <param name="hmenu">A handle to the menu that contains the group of menu items.</param>
    <param name="first">The identifier or position of the first menu item in the group.</param>
    <param name="last">The identifier or position of the last menu item in the group.</param>
    <param name="check">The identifier or position of the menu item to check.</param>
    <param name="flags">Indicates the meaning of <i>idFirst</i>, <i>idLast</i>, and <i>idCheck</i>. If this parameter is <b>MF_BYCOMMAND</b>, the other parameters specify menu item identifiers. If it is <b>MF_BYPOSITION</b>, the other parameters specify the menu item positions.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.CheckRadioButton">
    <summary>Adds a check mark to (checks) a specified radio button in a group and removes a check mark from (clears) all other radio buttons in the group.</summary>
    <param name="hDlg">A handle to the dialog box that contains the radio button.</param>
    <param name="nIDFirstButton">The identifier of the first radio button in the group.</param>
    <param name="nIDLastButton">The identifier of the last radio button in the group.</param>
    <param name="nIDCheckButton">The identifier of the radio button to select.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ChildWindowFromPoint">
    <summary>
      <para>Determines which, if any, of the child windows belonging to a parent window contains the specified point. The search is restricted to immediate child windows. Grandchildren, and deeper descendant windows are not searched.</para>
      <para>To skip certain child windows, use the <see cref="ChildWindowFromPointEx" /> function.</para>
    </summary>
    <param name="hWndParent">A handle to the parent window.</param>
    <param name="Point">A structure that defines the client coordinates, relative to <i>hWndParent</i>, of the point to be checked.</param>
    <returns>The return value is a handle to the child window that contains the point, even if the child window is hidden or disabled. If the point lies outside the parent window, the return value is <b>NULL</b>. If the point is within the parent window but not within any child window, the return value is a handle to the parent window.</returns>
  </member>
  <member name="Windows.ChildWindowFromPointEx">
    <summary>Determines which, if any, of the child windows belonging to the specified parent window contains the specified point. The function can ignore invisible, disabled, and transparent child windows. The search is restricted to immediate child windows. Grandchildren and deeper descendants are not searched.</summary>
    <param name="hwnd">A handle to the parent window.</param>
    <param name="pt">A structure that defines the client coordinates (relative to <i>hwndParent</i>) of the point to be checked.</param>
    <param name="flags">
      <para>The child windows to be skipped. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CWP_ALL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000</term>
              </listheader>
            </list>
          </description>
          <description>Does not skip any child windows</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CWP_SKIPDISABLED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Skips disabled child windows</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CWP_SKIPINVISIBLE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Skips invisible child windows</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CWP_SKIPTRANSPARENT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>Skips transparent child windows</description>
        </listheader>
      </list>
    </param>
    <returns>The return value is a handle to the first child window that contains the point and meets the criteria specified by <i>uFlags</i>. If the point is within the parent window but not within any child window that meets the criteria, the return value is a handle to the parent window. If the point lies outside the parent window or if the function fails, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.ClientToScreen">
    <summary>The <b>ClientToScreen</b> function converts the client-area coordinates of a specified point to screen coordinates.</summary>
    <param name="hWnd">A handle to the window whose client area is used for the conversion.</param>
    <param name="lpPoint">A pointer to a <see cref="POINT" /> structure that contains the client coordinates to be converted. The new screen coordinates are copied into this structure if the function succeeds.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.ClipCursor">
    <summary>Confines the cursor to a rectangular area on the screen. If a subsequent cursor position (set by the <see cref="SetCursorPos" /> function or the mouse) lies outside the rectangle, the system automatically adjusts the position to keep the cursor inside the rectangular area.</summary>
    <param name="lpRect">A pointer to the structure that contains the screen coordinates of the upper-left and lower-right corners of the confining rectangle. If this parameter is <b>NULL</b>, the cursor is free to move anywhere on the screen.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CloseClipboard">
    <summary>Closes the clipboard.</summary>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CloseDesktop">
    <summary>Closes an open handle to a desktop object.</summary>
    <param name="hDesktop">A handle to the desktop to be closed. This can be a handle returned by the<see cref="CreateDesktop" />,<see cref="OpenDesktop" />, or<see cref="OpenInputDesktop" /> functions. Do not specify the handle returned by the <see cref="GetThreadDesktop" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CloseGestureInfoHandle">
    <summary>Closes resources associated with a gesture information handle.</summary>
    <param name="hGestureInfo">The gesture information handle.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.CloseTouchInputHandle">
    <summary>Closes a touch input handle, frees process memory associated with it, and invalidates the handle.</summary>
    <param name="hTouchInput">The touch input handle received in the <b>LPARAM</b> of a touch message. The function fails with <b>ERROR_INVALID_HANDLE</b> if this handle is not valid. Note that the handle is not valid after it has been used in a successful call to <b>CloseTouchInputHandle</b> or after it has been passed to <a href="https://docs.microsoft.com//windows/desktop/wintouch/sendmessage--postmessage--and-related-functions">DefWindowProc, PostMessage, SendMessage</a> or one of their variants.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.CloseWindow">
    <summary>Minimizes (but does not destroy) the specified window.</summary>
    <param name="hWnd">A handle to the window to be minimized.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CloseWindowStation">
    <summary>Closes an open window station handle.</summary>
    <param name="hWinSta">A handle to the window station to be closed. This handle is returned by the<see cref="CreateWindowStation" /> or<see cref="OpenWindowStation" /> function. Do not specify the handle returned by the <see cref="GetProcessWindowStation" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
      <para>
        <b>Windows Server 2003 and Windows XP/2000:  </b>This function does not set the last error code on failure.</para>
    </returns>
  </member>
  <member name="Windows.CopyAcceleratorTable">
    <summary>Copies the specified accelerator table. This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to determine the size of the accelerator-table data.</summary>
    <param name="hAccelSrc">A handle to the accelerator table to copy.</param>
    <param name="lpAccelDst">An array of <see cref="ACCEL" /> structures that receives the accelerator-table information.</param>
    <param name="cAccelEntries">The number of <see cref="ACCEL" /> structures to copy to the buffer pointed to by the<i>lpAccelDst</i> parameter.</param>
    <returns>If<i>lpAccelDst</i> is <b>NULL</b>, the return value specifies the number of accelerator-table entries in the original table. Otherwise, it specifies the number of accelerator-table entries that were copied.</returns>
  </member>
  <member name="Windows.CopyAcceleratorTableA">
    <summary>Copies the specified accelerator table. This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to determine the size of the accelerator-table data.</summary>
    <param name="hAccelSrc">A handle to the accelerator table to copy.</param>
    <param name="lpAccelDst">An array of <see cref="ACCEL" /> structures that receives the accelerator-table information.</param>
    <param name="cAccelEntries">The number of <see cref="ACCEL" /> structures to copy to the buffer pointed to by the<i>lpAccelDst</i> parameter.</param>
    <returns>If<i>lpAccelDst</i> is <b>NULL</b>, the return value specifies the number of accelerator-table entries in the original table. Otherwise, it specifies the number of accelerator-table entries that were copied.</returns>
  </member>
  <member name="Windows.CopyAcceleratorTableW">
    <summary>Copies the specified accelerator table. This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to determine the size of the accelerator-table data.</summary>
    <param name="hAccelSrc">A handle to the accelerator table to copy.</param>
    <param name="lpAccelDst">An array of <see cref="ACCEL" /> structures that receives the accelerator-table information.</param>
    <param name="cAccelEntries">The number of <see cref="ACCEL" /> structures to copy to the buffer pointed to by the<i>lpAccelDst</i> parameter.</param>
    <returns>If<i>lpAccelDst</i> is <b>NULL</b>, the return value specifies the number of accelerator-table entries in the original table. Otherwise, it specifies the number of accelerator-table entries that were copied.</returns>
  </member>
  <member name="Windows.CopyAcceleratorTable">
    <summary>Copies the specified accelerator table. This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to determine the size of the accelerator-table data.</summary>
    <param name="hAccelSrc">A handle to the accelerator table to copy.</param>
    <param name="lpAccelDst">An array of <see cref="ACCEL" /> structures that receives the accelerator-table information.</param>
    <param name="cAccelEntries">The number of <see cref="ACCEL" /> structures to copy to the buffer pointed to by the<i>lpAccelDst</i> parameter.</param>
    <returns>If<i>lpAccelDst</i> is <b>NULL</b>, the return value specifies the number of accelerator-table entries in the original table. Otherwise, it specifies the number of accelerator-table entries that were copied.</returns>
  </member>
  <member name="Windows.CopyAcceleratorTableA">
    <summary>Copies the specified accelerator table. This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to determine the size of the accelerator-table data.</summary>
    <param name="hAccelSrc">A handle to the accelerator table to copy.</param>
    <param name="lpAccelDst">An array of <see cref="ACCEL" /> structures that receives the accelerator-table information.</param>
    <param name="cAccelEntries">The number of <see cref="ACCEL" /> structures to copy to the buffer pointed to by the<i>lpAccelDst</i> parameter.</param>
    <returns>If<i>lpAccelDst</i> is <b>NULL</b>, the return value specifies the number of accelerator-table entries in the original table. Otherwise, it specifies the number of accelerator-table entries that were copied.</returns>
  </member>
  <member name="Windows.CopyAcceleratorTableW">
    <summary>Copies the specified accelerator table. This function is used to obtain the accelerator-table data that corresponds to an accelerator-table handle, or to determine the size of the accelerator-table data.</summary>
    <param name="hAccelSrc">A handle to the accelerator table to copy.</param>
    <param name="lpAccelDst">An array of <see cref="ACCEL" /> structures that receives the accelerator-table information.</param>
    <param name="cAccelEntries">The number of <see cref="ACCEL" /> structures to copy to the buffer pointed to by the<i>lpAccelDst</i> parameter.</param>
    <returns>If<i>lpAccelDst</i> is <b>NULL</b>, the return value specifies the number of accelerator-table entries in the original table. Otherwise, it specifies the number of accelerator-table entries that were copied.</returns>
  </member>
  <member name="Windows.CopyCursor">
    <summary>Copies the specified cursor.</summary>
    <param name="pcur">A handle to the cursor to be copied.</param>
  </member>
  <member name="Windows.CopyIcon">
    <summary>Copies the specified icon from another module to the current module.</summary>
    <param name="hIcon">A handle to the icon to be copied.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the duplicate icon.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CopyImage">
    <summary>Creates a new image (icon, cursor, or bitmap) and copies the attributes of the specified image to the new one. If necessary, the function stretches the bits to fit the desired size of the new image.</summary>
    <param name="h">A handle to the image to be copied.</param>
    <param name="type">
      <para>The type of image to be copied. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>Copies a bitmap.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_CURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Copies a cursor.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_ICON</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Copies an icon.</description>
        </listheader>
      </list>
    </param>
    <param name="cx">The desired width, in pixels, of the image. If this is zero, then the returned image will have the same width as the original <i>hImage</i>.</param>
    <param name="cy">The desired height, in pixels, of the image. If this is zero, then the returned image will have the same height as the original <i>hImage</i>.</param>
    <param name="flags">
      <para>This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_COPYDELETEORG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Deletes the original image after creating the copy.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_COPYFROMRESOURCE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00004000</term>
              </listheader>
            </list>
          </description>
          <description>Tries to reload an icon or cursor resource from the original resource file rather than simply copying the current image. This is useful for creating a different-sized copy when the resource file contains multiple sizes of the resource. Without this flag, <b>CopyImage</b> stretches the original image to the new size. If this flag is set, <b>CopyImage</b> uses the size in the resource file closest to the desired size. This will succeed only if <i>hImage</i> was loaded by <see cref="LoadIcon" /> or <see cref="LoadCursor" />, or by <see cref="LoadImage" /> with the LR_SHARED flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_COPYRETURNORG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Returns the original <i>hImage</i> if it satisfies the criteria for the copy—that is, correct dimensions and color depth—in which case the <b>LR_COPYDELETEORG</b> flag is ignored. If this flag is not specified, a new object is always created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_CREATEDIBSECTION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00002000</term>
              </listheader>
            </list>
          </description>
          <description>If this is set and a new bitmap is created, the bitmap is created as a DIB section. Otherwise, the bitmap image is created as a device-dependent bitmap. This flag is only valid if <i>uType</i> is <b>IMAGE_BITMAP</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_DEFAULTCOLOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Uses the default color format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_DEFAULTSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Uses the width or height specified by the system metric values for cursors or icons, if the <i>cxDesired</i> or <i>cyDesired</i> values are set to zero. If this flag is not specified and <i>cxDesired</i> and <i>cyDesired</i> are set to zero, the function uses the actual resource size. If the resource contains multiple images, the function uses the size of the first image.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_MONOCHROME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Creates a new monochrome image.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the newly created image.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CopyRect">
    <summary>The <b>CopyRect</b> function copies the coordinates of one rectangle to another.</summary>
    <param name="lprcDst">Pointer to the <see cref="RECT" /> structure that receives the logical coordinates of the source rectangle.</param>
    <param name="lprcSrc">Pointer to the <see cref="RECT" /> structure whose coordinates are to be copied in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.CountClipboardFormats">
    <summary>Retrieves the number of different data formats currently on the clipboard.</summary>
    <returns>
      <para>If the function succeeds, the return value is the number of different data formats currently on the clipboard.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateAcceleratorTable">
    <summary>Creates an accelerator table.</summary>
    <param name="paccel">An array of <see cref="ACCEL" /> structures that describes the accelerator table.</param>
    <param name="cAccel">The number of <see cref="ACCEL" /> structures in the array. This must be within the range 1 to 32767 or the function will fail.</param>
    <returns>If the function succeeds, the return value is the handle to the created accelerator table; otherwise, it is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.CreateAcceleratorTableA">
    <summary>Creates an accelerator table.</summary>
    <param name="paccel">An array of <see cref="ACCEL" /> structures that describes the accelerator table.</param>
    <param name="cAccel">The number of <see cref="ACCEL" /> structures in the array. This must be within the range 1 to 32767 or the function will fail.</param>
    <returns>If the function succeeds, the return value is the handle to the created accelerator table; otherwise, it is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.CreateAcceleratorTableW">
    <summary>Creates an accelerator table.</summary>
    <param name="paccel">An array of <see cref="ACCEL" /> structures that describes the accelerator table.</param>
    <param name="cAccel">The number of <see cref="ACCEL" /> structures in the array. This must be within the range 1 to 32767 or the function will fail.</param>
    <returns>If the function succeeds, the return value is the handle to the created accelerator table; otherwise, it is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.CreateAcceleratorTable">
    <summary>Creates an accelerator table.</summary>
    <param name="paccel">An array of <see cref="ACCEL" /> structures that describes the accelerator table.</param>
    <param name="cAccel">The number of <see cref="ACCEL" /> structures in the array. This must be within the range 1 to 32767 or the function will fail.</param>
    <returns>If the function succeeds, the return value is the handle to the created accelerator table; otherwise, it is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.CreateAcceleratorTableA">
    <summary>Creates an accelerator table.</summary>
    <param name="paccel">An array of <see cref="ACCEL" /> structures that describes the accelerator table.</param>
    <param name="cAccel">The number of <see cref="ACCEL" /> structures in the array. This must be within the range 1 to 32767 or the function will fail.</param>
    <returns>If the function succeeds, the return value is the handle to the created accelerator table; otherwise, it is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.CreateAcceleratorTableW">
    <summary>Creates an accelerator table.</summary>
    <param name="paccel">An array of <see cref="ACCEL" /> structures that describes the accelerator table.</param>
    <param name="cAccel">The number of <see cref="ACCEL" /> structures in the array. This must be within the range 1 to 32767 or the function will fail.</param>
    <returns>If the function succeeds, the return value is the handle to the created accelerator table; otherwise, it is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.CreateCaret">
    <summary>Creates a new shape for the system caret and assigns ownership of the caret to the specified window. The caret shape can be a line, a block, or a bitmap.</summary>
    <param name="hWnd">A handle to the window that owns the caret.</param>
    <param name="hBitmap">
      <para>A handle to the bitmap that defines the caret shape. If this parameter is <b>NULL</b>, the caret is solid. If this parameter is <code>(HBITMAP) 1</code>, the caret is gray. If this parameter is a bitmap handle, the caret is the specified bitmap. The bitmap handle must have been created by the <see cref="CreateBitmap" />, <see cref="CreateDIBitmap" />, or <see cref="LoadBitmap" /> function.</para>
      <para>If <i>hBitmap</i> is a bitmap handle, <b>CreateCaret</b> ignores the <i>nWidth</i> and <i>nHeight</i> parameters; the bitmap defines its own width and height.</para>
    </param>
    <param name="nWidth">The width of the caret, in logical units. If this parameter is zero, the width is set to the system-defined window border width. If <i>hBitmap</i> is a bitmap handle, <b>CreateCaret</b> ignores this parameter.</param>
    <param name="nHeight">The height of the caret, in logical units. If this parameter is zero, the height is set to the system-defined window border height. If <i>hBitmap</i> is a bitmap handle, <b>CreateCaret</b> ignores this parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateCursor">
    <summary>
      <para>Creates a monochrome cursor having the specified size, bit patterns, and hot spot.</para>
      <para>To create a colored cursor at run time you can use the <see cref="CreateIconIndirect" /> function, which creates a cursor based on the content of an <see cref="ICONINFO" /> structure.</para>
    </summary>
    <param name="hInst">A handle to the current instance of the application creating the cursor.</param>
    <param name="xHotSpot">The horizontal position of the cursor's hot spot.</param>
    <param name="yHotSpot">The vertical position of the cursor's hot spot.</param>
    <param name="nWidth">The width of the cursor, in pixels.</param>
    <param name="nHeight">The height of the cursor, in pixels.</param>
    <param name="pvANDPlane">An array of bytes that contains the bit values for the AND mask of the cursor, as in a monochrome bitmap. See remarks.</param>
    <param name="pvXORPlane">An array of bytes that contains the bit values for the XOR mask of the cursor, as in a monochrome bitmap. See remarks.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the cursor.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDesktop">
    <summary>
      <para>Creates a new desktop, associates it with the current window station of the calling process, and assigns it to the calling thread. The calling process must have an associated window station, either assigned by the system at process creation time or set by the <see cref="SetProcessWindowStation" /> function.</para>
      <para>To specify the size of the heap for the desktop, use the <see cref="CreateDesktopEx" /> function.</para>
    </summary>
    <param name="lpszDesktop">The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\).</param>
    <param name="lpszDevice">Reserved; must be <b>NULL</b>.</param>
    <param name="pDevmode">Reserved; must be <b>NULL</b>.</param>
    <param name="dwFlags">
      <para>This parameter can be zero or the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DF_ALLOWOTHERACCOUNTHOOK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Enables processes running in other accounts on the desktop to set hooks in this process.</description>
        </listheader>
      </list>
    </param>
    <param name="dwDesiredAccess">
      <para>The access to the desktop. For a list of values, see<a href="https://docs.microsoft.com//windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</para>
      <para>This parameter must include the <b>DESKTOP_CREATEWINDOW</b> access right, because internally<b>CreateDesktop</b> uses the handle to create a window.</para>
    </param>
    <param name="lpsa">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpsa</i> is NULL, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created desktop. If the specified desktop already exists, the function succeeds and returns a handle to the existing desktop. When you are finished using the handle, call the<see cref="CloseDesktop" /> function to close it.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDesktopA">
    <summary>
      <para>Creates a new desktop, associates it with the current window station of the calling process, and assigns it to the calling thread. The calling process must have an associated window station, either assigned by the system at process creation time or set by the <see cref="SetProcessWindowStation" /> function.</para>
      <para>To specify the size of the heap for the desktop, use the <see cref="CreateDesktopEx" /> function.</para>
    </summary>
    <param name="lpszDesktop">The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\).</param>
    <param name="lpszDevice">Reserved; must be <b>NULL</b>.</param>
    <param name="pDevmode">Reserved; must be <b>NULL</b>.</param>
    <param name="dwFlags">
      <para>This parameter can be zero or the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DF_ALLOWOTHERACCOUNTHOOK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Enables processes running in other accounts on the desktop to set hooks in this process.</description>
        </listheader>
      </list>
    </param>
    <param name="dwDesiredAccess">
      <para>The access to the desktop. For a list of values, see<a href="https://docs.microsoft.com//windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</para>
      <para>This parameter must include the <b>DESKTOP_CREATEWINDOW</b> access right, because internally<b>CreateDesktop</b> uses the handle to create a window.</para>
    </param>
    <param name="lpsa">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpsa</i> is NULL, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created desktop. If the specified desktop already exists, the function succeeds and returns a handle to the existing desktop. When you are finished using the handle, call the<see cref="CloseDesktop" /> function to close it.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDesktopW">
    <summary>
      <para>Creates a new desktop, associates it with the current window station of the calling process, and assigns it to the calling thread. The calling process must have an associated window station, either assigned by the system at process creation time or set by the <see cref="SetProcessWindowStation" /> function.</para>
      <para>To specify the size of the heap for the desktop, use the <see cref="CreateDesktopEx" /> function.</para>
    </summary>
    <param name="lpszDesktop">The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\).</param>
    <param name="lpszDevice">Reserved; must be <b>NULL</b>.</param>
    <param name="pDevmode">Reserved; must be <b>NULL</b>.</param>
    <param name="dwFlags">
      <para>This parameter can be zero or the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DF_ALLOWOTHERACCOUNTHOOK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Enables processes running in other accounts on the desktop to set hooks in this process.</description>
        </listheader>
      </list>
    </param>
    <param name="dwDesiredAccess">
      <para>The access to the desktop. For a list of values, see<a href="https://docs.microsoft.com//windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</para>
      <para>This parameter must include the <b>DESKTOP_CREATEWINDOW</b> access right, because internally<b>CreateDesktop</b> uses the handle to create a window.</para>
    </param>
    <param name="lpsa">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpsa</i> is NULL, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created desktop. If the specified desktop already exists, the function succeeds and returns a handle to the existing desktop. When you are finished using the handle, call the<see cref="CloseDesktop" /> function to close it.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDesktopEx">
    <summary>Creates a new desktop with the specified heap, associates it with the current window station of the calling process, and assigns it to the calling thread. The calling process must have an associated window station, either assigned by the system at process creation time or set by the <see cref="SetProcessWindowStation" /> function.</summary>
    <param name="lpszDesktop">The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\).</param>
    <param name="lpszDevice">This parameter is reserved and must be NULL.</param>
    <param name="pDevmode">This parameter is reserved and must be NULL.</param>
    <param name="dwFlags">
      <para>This parameter can be zero or the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DF_ALLOWOTHERACCOUNTHOOK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Enables processes running in other accounts on the desktop to set hooks in this process.</description>
        </listheader>
      </list>
    </param>
    <param name="dwDesiredAccess">
      <para>The requested access to the desktop. For a list of values, see<a href="https://docs.microsoft.com//windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</para>
      <para>This parameter must include the DESKTOP_CREATEWINDOW access right, because internally<see cref="CreateDesktop" /> uses the handle to create a window.</para>
    </param>
    <param name="lpsa">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpsa</i> is NULL, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.</para>
    </param>
    <param name="ulHeapSize">The size of the desktop heap, in kilobytes.</param>
    <param name="pvoid">This parameter is reserved and must be NULL.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created desktop. If the specified desktop already exists, the function succeeds and returns a handle to the existing desktop. When you are finished using the handle, call the<see cref="CloseDesktop" /> function to close it.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDesktopExA">
    <summary>Creates a new desktop with the specified heap, associates it with the current window station of the calling process, and assigns it to the calling thread. The calling process must have an associated window station, either assigned by the system at process creation time or set by the <see cref="SetProcessWindowStation" /> function.</summary>
    <param name="lpszDesktop">The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\).</param>
    <param name="lpszDevice">This parameter is reserved and must be NULL.</param>
    <param name="pDevmode">This parameter is reserved and must be NULL.</param>
    <param name="dwFlags">
      <para>This parameter can be zero or the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DF_ALLOWOTHERACCOUNTHOOK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Enables processes running in other accounts on the desktop to set hooks in this process.</description>
        </listheader>
      </list>
    </param>
    <param name="dwDesiredAccess">
      <para>The requested access to the desktop. For a list of values, see<a href="https://docs.microsoft.com//windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</para>
      <para>This parameter must include the DESKTOP_CREATEWINDOW access right, because internally<see cref="CreateDesktop" /> uses the handle to create a window.</para>
    </param>
    <param name="lpsa">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpsa</i> is NULL, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.</para>
    </param>
    <param name="ulHeapSize">The size of the desktop heap, in kilobytes.</param>
    <param name="pvoid">This parameter is reserved and must be NULL.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created desktop. If the specified desktop already exists, the function succeeds and returns a handle to the existing desktop. When you are finished using the handle, call the<see cref="CloseDesktop" /> function to close it.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDesktopExW">
    <summary>Creates a new desktop with the specified heap, associates it with the current window station of the calling process, and assigns it to the calling thread. The calling process must have an associated window station, either assigned by the system at process creation time or set by the <see cref="SetProcessWindowStation" /> function.</summary>
    <param name="lpszDesktop">The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\).</param>
    <param name="lpszDevice">This parameter is reserved and must be NULL.</param>
    <param name="pDevmode">This parameter is reserved and must be NULL.</param>
    <param name="dwFlags">
      <para>This parameter can be zero or the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DF_ALLOWOTHERACCOUNTHOOK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Enables processes running in other accounts on the desktop to set hooks in this process.</description>
        </listheader>
      </list>
    </param>
    <param name="dwDesiredAccess">
      <para>The requested access to the desktop. For a list of values, see<a href="https://docs.microsoft.com//windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</para>
      <para>This parameter must include the DESKTOP_CREATEWINDOW access right, because internally<see cref="CreateDesktop" /> uses the handle to create a window.</para>
    </param>
    <param name="lpsa">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpsa</i> is NULL, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.</para>
    </param>
    <param name="ulHeapSize">The size of the desktop heap, in kilobytes.</param>
    <param name="pvoid">This parameter is reserved and must be NULL.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created desktop. If the specified desktop already exists, the function succeeds and returns a handle to the existing desktop. When you are finished using the handle, call the<see cref="CloseDesktop" /> function to close it.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDesktopEx">
    <summary>Creates a new desktop with the specified heap, associates it with the current window station of the calling process, and assigns it to the calling thread. The calling process must have an associated window station, either assigned by the system at process creation time or set by the <see cref="SetProcessWindowStation" /> function.</summary>
    <param name="lpszDesktop">The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\).</param>
    <param name="lpszDevice">This parameter is reserved and must be NULL.</param>
    <param name="pDevmode">This parameter is reserved and must be NULL.</param>
    <param name="dwFlags">
      <para>This parameter can be zero or the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DF_ALLOWOTHERACCOUNTHOOK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Enables processes running in other accounts on the desktop to set hooks in this process.</description>
        </listheader>
      </list>
    </param>
    <param name="dwDesiredAccess">
      <para>The requested access to the desktop. For a list of values, see<a href="https://docs.microsoft.com//windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</para>
      <para>This parameter must include the DESKTOP_CREATEWINDOW access right, because internally<see cref="CreateDesktop" /> uses the handle to create a window.</para>
    </param>
    <param name="lpsa">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpsa</i> is NULL, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.</para>
    </param>
    <param name="ulHeapSize">The size of the desktop heap, in kilobytes.</param>
    <param name="pvoid">This parameter is reserved and must be NULL.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created desktop. If the specified desktop already exists, the function succeeds and returns a handle to the existing desktop. When you are finished using the handle, call the<see cref="CloseDesktop" /> function to close it.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDesktopExA">
    <summary>Creates a new desktop with the specified heap, associates it with the current window station of the calling process, and assigns it to the calling thread. The calling process must have an associated window station, either assigned by the system at process creation time or set by the <see cref="SetProcessWindowStation" /> function.</summary>
    <param name="lpszDesktop">The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\).</param>
    <param name="lpszDevice">This parameter is reserved and must be NULL.</param>
    <param name="pDevmode">This parameter is reserved and must be NULL.</param>
    <param name="dwFlags">
      <para>This parameter can be zero or the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DF_ALLOWOTHERACCOUNTHOOK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Enables processes running in other accounts on the desktop to set hooks in this process.</description>
        </listheader>
      </list>
    </param>
    <param name="dwDesiredAccess">
      <para>The requested access to the desktop. For a list of values, see<a href="https://docs.microsoft.com//windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</para>
      <para>This parameter must include the DESKTOP_CREATEWINDOW access right, because internally<see cref="CreateDesktop" /> uses the handle to create a window.</para>
    </param>
    <param name="lpsa">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpsa</i> is NULL, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.</para>
    </param>
    <param name="ulHeapSize">The size of the desktop heap, in kilobytes.</param>
    <param name="pvoid">This parameter is reserved and must be NULL.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created desktop. If the specified desktop already exists, the function succeeds and returns a handle to the existing desktop. When you are finished using the handle, call the<see cref="CloseDesktop" /> function to close it.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDesktopExW">
    <summary>Creates a new desktop with the specified heap, associates it with the current window station of the calling process, and assigns it to the calling thread. The calling process must have an associated window station, either assigned by the system at process creation time or set by the <see cref="SetProcessWindowStation" /> function.</summary>
    <param name="lpszDesktop">The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\).</param>
    <param name="lpszDevice">This parameter is reserved and must be NULL.</param>
    <param name="pDevmode">This parameter is reserved and must be NULL.</param>
    <param name="dwFlags">
      <para>This parameter can be zero or the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DF_ALLOWOTHERACCOUNTHOOK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Enables processes running in other accounts on the desktop to set hooks in this process.</description>
        </listheader>
      </list>
    </param>
    <param name="dwDesiredAccess">
      <para>The requested access to the desktop. For a list of values, see<a href="https://docs.microsoft.com//windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</para>
      <para>This parameter must include the DESKTOP_CREATEWINDOW access right, because internally<see cref="CreateDesktop" /> uses the handle to create a window.</para>
    </param>
    <param name="lpsa">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpsa</i> is NULL, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.</para>
    </param>
    <param name="ulHeapSize">The size of the desktop heap, in kilobytes.</param>
    <param name="pvoid">This parameter is reserved and must be NULL.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created desktop. If the specified desktop already exists, the function succeeds and returns a handle to the existing desktop. When you are finished using the handle, call the<see cref="CloseDesktop" /> function to close it.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDesktop">
    <summary>
      <para>Creates a new desktop, associates it with the current window station of the calling process, and assigns it to the calling thread. The calling process must have an associated window station, either assigned by the system at process creation time or set by the <see cref="SetProcessWindowStation" /> function.</para>
      <para>To specify the size of the heap for the desktop, use the <see cref="CreateDesktopEx" /> function.</para>
    </summary>
    <param name="lpszDesktop">The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\).</param>
    <param name="lpszDevice">Reserved; must be <b>NULL</b>.</param>
    <param name="pDevmode">Reserved; must be <b>NULL</b>.</param>
    <param name="dwFlags">
      <para>This parameter can be zero or the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DF_ALLOWOTHERACCOUNTHOOK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Enables processes running in other accounts on the desktop to set hooks in this process.</description>
        </listheader>
      </list>
    </param>
    <param name="dwDesiredAccess">
      <para>The access to the desktop. For a list of values, see<a href="https://docs.microsoft.com//windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</para>
      <para>This parameter must include the <b>DESKTOP_CREATEWINDOW</b> access right, because internally<b>CreateDesktop</b> uses the handle to create a window.</para>
    </param>
    <param name="lpsa">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpsa</i> is NULL, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created desktop. If the specified desktop already exists, the function succeeds and returns a handle to the existing desktop. When you are finished using the handle, call the<see cref="CloseDesktop" /> function to close it.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDesktopA">
    <summary>
      <para>Creates a new desktop, associates it with the current window station of the calling process, and assigns it to the calling thread. The calling process must have an associated window station, either assigned by the system at process creation time or set by the <see cref="SetProcessWindowStation" /> function.</para>
      <para>To specify the size of the heap for the desktop, use the <see cref="CreateDesktopEx" /> function.</para>
    </summary>
    <param name="lpszDesktop">The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\).</param>
    <param name="lpszDevice">Reserved; must be <b>NULL</b>.</param>
    <param name="pDevmode">Reserved; must be <b>NULL</b>.</param>
    <param name="dwFlags">
      <para>This parameter can be zero or the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DF_ALLOWOTHERACCOUNTHOOK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Enables processes running in other accounts on the desktop to set hooks in this process.</description>
        </listheader>
      </list>
    </param>
    <param name="dwDesiredAccess">
      <para>The access to the desktop. For a list of values, see<a href="https://docs.microsoft.com//windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</para>
      <para>This parameter must include the <b>DESKTOP_CREATEWINDOW</b> access right, because internally<b>CreateDesktop</b> uses the handle to create a window.</para>
    </param>
    <param name="lpsa">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpsa</i> is NULL, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created desktop. If the specified desktop already exists, the function succeeds and returns a handle to the existing desktop. When you are finished using the handle, call the<see cref="CloseDesktop" /> function to close it.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDesktopW">
    <summary>
      <para>Creates a new desktop, associates it with the current window station of the calling process, and assigns it to the calling thread. The calling process must have an associated window station, either assigned by the system at process creation time or set by the <see cref="SetProcessWindowStation" /> function.</para>
      <para>To specify the size of the heap for the desktop, use the <see cref="CreateDesktopEx" /> function.</para>
    </summary>
    <param name="lpszDesktop">The name of the desktop to be created. Desktop names are case-insensitive and may not contain backslash characters (\).</param>
    <param name="lpszDevice">Reserved; must be <b>NULL</b>.</param>
    <param name="pDevmode">Reserved; must be <b>NULL</b>.</param>
    <param name="dwFlags">
      <para>This parameter can be zero or the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DF_ALLOWOTHERACCOUNTHOOK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Enables processes running in other accounts on the desktop to set hooks in this process.</description>
        </listheader>
      </list>
    </param>
    <param name="dwDesiredAccess">
      <para>The access to the desktop. For a list of values, see<a href="https://docs.microsoft.com//windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</para>
      <para>This parameter must include the <b>DESKTOP_CREATEWINDOW</b> access right, because internally<b>CreateDesktop</b> uses the handle to create a window.</para>
    </param>
    <param name="lpsa">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpsa</i> is NULL, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new desktop. If this parameter is NULL, the desktop inherits its security descriptor from the parent window station.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created desktop. If the specified desktop already exists, the function succeeds and returns a handle to the existing desktop. When you are finished using the handle, call the<see cref="CloseDesktop" /> function to close it.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDialog">
    <summary>Creates a modeless dialog box from a dialog box template resource. The <b>CreateDialog</b> macro uses the <see cref="CreateDialogParam" /> function.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpName">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.CreateDialogA">
    <summary>Creates a modeless dialog box from a dialog box template resource. The <b>CreateDialog</b> macro uses the <see cref="CreateDialogParam" /> function.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpName">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.CreateDialogW">
    <summary>Creates a modeless dialog box from a dialog box template resource. The <b>CreateDialog</b> macro uses the <see cref="CreateDialogParam" /> function.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpName">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.CreateDialogIndirect">
    <summary>Creates a modeless dialog box from a dialog box template in memory. The <b>CreateDialogIndirect</b> macro uses the <see cref="CreateDialogIndirectParam" /> function.</summary>
    <param name="hInstance">A handle to the module that creates the dialog box.</param>
    <param name="lpTemplate">
      <para>A template that <b>CreateDialogIndirect</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended dialog box template, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
      <para>After <b>CreateDialogIndirect</b> returns, you can free the template, which is only used to get the dialog box started.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.CreateDialogIndirectA">
    <summary>Creates a modeless dialog box from a dialog box template in memory. The <b>CreateDialogIndirect</b> macro uses the <see cref="CreateDialogIndirectParam" /> function.</summary>
    <param name="hInstance">A handle to the module that creates the dialog box.</param>
    <param name="lpTemplate">
      <para>A template that <b>CreateDialogIndirect</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended dialog box template, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
      <para>After <b>CreateDialogIndirect</b> returns, you can free the template, which is only used to get the dialog box started.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.CreateDialogIndirectW">
    <summary>Creates a modeless dialog box from a dialog box template in memory. The <b>CreateDialogIndirect</b> macro uses the <see cref="CreateDialogIndirectParam" /> function.</summary>
    <param name="hInstance">A handle to the module that creates the dialog box.</param>
    <param name="lpTemplate">
      <para>A template that <b>CreateDialogIndirect</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended dialog box template, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
      <para>After <b>CreateDialogIndirect</b> returns, you can free the template, which is only used to get the dialog box started.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.CreateDialogIndirectParam">
    <summary>Creates a modeless dialog box from a dialog box template in memory. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplate">
      <para>The template <b>CreateDialogIndirectParam</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended dialog box template, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
      <para>After <b>CreateDialogIndirectParam</b> returns, you can free the template, which is only used to get the dialog box started.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to pass to the dialog box in the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the window handle to the dialog box.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDialogIndirectParamA">
    <summary>Creates a modeless dialog box from a dialog box template in memory. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplate">
      <para>The template <b>CreateDialogIndirectParam</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended dialog box template, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
      <para>After <b>CreateDialogIndirectParam</b> returns, you can free the template, which is only used to get the dialog box started.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to pass to the dialog box in the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the window handle to the dialog box.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDialogIndirectParamW">
    <summary>Creates a modeless dialog box from a dialog box template in memory. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplate">
      <para>The template <b>CreateDialogIndirectParam</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended dialog box template, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
      <para>After <b>CreateDialogIndirectParam</b> returns, you can free the template, which is only used to get the dialog box started.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to pass to the dialog box in the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the window handle to the dialog box.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDialogIndirectParam">
    <summary>Creates a modeless dialog box from a dialog box template in memory. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplate">
      <para>The template <b>CreateDialogIndirectParam</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended dialog box template, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
      <para>After <b>CreateDialogIndirectParam</b> returns, you can free the template, which is only used to get the dialog box started.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to pass to the dialog box in the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the window handle to the dialog box.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDialogIndirectParamA">
    <summary>Creates a modeless dialog box from a dialog box template in memory. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplate">
      <para>The template <b>CreateDialogIndirectParam</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended dialog box template, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
      <para>After <b>CreateDialogIndirectParam</b> returns, you can free the template, which is only used to get the dialog box started.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to pass to the dialog box in the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the window handle to the dialog box.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDialogIndirectParamW">
    <summary>Creates a modeless dialog box from a dialog box template in memory. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplate">
      <para>The template <b>CreateDialogIndirectParam</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended dialog box template, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
      <para>After <b>CreateDialogIndirectParam</b> returns, you can free the template, which is only used to get the dialog box started.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to pass to the dialog box in the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the window handle to the dialog box.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDialogIndirect">
    <summary>Creates a modeless dialog box from a dialog box template in memory. The <b>CreateDialogIndirect</b> macro uses the <see cref="CreateDialogIndirectParam" /> function.</summary>
    <param name="hInstance">A handle to the module that creates the dialog box.</param>
    <param name="lpTemplate">
      <para>A template that <b>CreateDialogIndirect</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended dialog box template, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
      <para>After <b>CreateDialogIndirect</b> returns, you can free the template, which is only used to get the dialog box started.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.CreateDialogIndirectA">
    <summary>Creates a modeless dialog box from a dialog box template in memory. The <b>CreateDialogIndirect</b> macro uses the <see cref="CreateDialogIndirectParam" /> function.</summary>
    <param name="hInstance">A handle to the module that creates the dialog box.</param>
    <param name="lpTemplate">
      <para>A template that <b>CreateDialogIndirect</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended dialog box template, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
      <para>After <b>CreateDialogIndirect</b> returns, you can free the template, which is only used to get the dialog box started.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.CreateDialogIndirectW">
    <summary>Creates a modeless dialog box from a dialog box template in memory. The <b>CreateDialogIndirect</b> macro uses the <see cref="CreateDialogIndirectParam" /> function.</summary>
    <param name="hInstance">A handle to the module that creates the dialog box.</param>
    <param name="lpTemplate">
      <para>A template that <b>CreateDialogIndirect</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended dialog box template, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
      <para>After <b>CreateDialogIndirect</b> returns, you can free the template, which is only used to get the dialog box started.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.CreateDialogParam">
    <summary>Creates a modeless dialog box from a dialog box template resource. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplateName">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to be passed to the dialog box procedure in the <i>lParam</i> parameter in the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the window handle to the dialog box.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDialogParamA">
    <summary>Creates a modeless dialog box from a dialog box template resource. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplateName">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to be passed to the dialog box procedure in the <i>lParam</i> parameter in the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the window handle to the dialog box.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDialogParamW">
    <summary>Creates a modeless dialog box from a dialog box template resource. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplateName">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to be passed to the dialog box procedure in the <i>lParam</i> parameter in the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the window handle to the dialog box.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDialogParam">
    <summary>Creates a modeless dialog box from a dialog box template resource. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplateName">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to be passed to the dialog box procedure in the <i>lParam</i> parameter in the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the window handle to the dialog box.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDialogParamA">
    <summary>Creates a modeless dialog box from a dialog box template resource. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplateName">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to be passed to the dialog box procedure in the <i>lParam</i> parameter in the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the window handle to the dialog box.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDialogParamW">
    <summary>Creates a modeless dialog box from a dialog box template resource. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplateName">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to be passed to the dialog box procedure in the <i>lParam</i> parameter in the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the window handle to the dialog box.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateDialog">
    <summary>Creates a modeless dialog box from a dialog box template resource. The <b>CreateDialog</b> macro uses the <see cref="CreateDialogParam" /> function.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpName">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.CreateDialogA">
    <summary>Creates a modeless dialog box from a dialog box template resource. The <b>CreateDialog</b> macro uses the <see cref="CreateDialogParam" /> function.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpName">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.CreateDialogW">
    <summary>Creates a modeless dialog box from a dialog box template resource. The <b>CreateDialog</b> macro uses the <see cref="CreateDialogParam" /> function.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpName">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.CreateIcon">
    <summary>
      <para>Creates an icon that has the specified size, colors, and bit patterns.</para>
      <para>To create a colored icon at run time you can use the <see cref="CreateIconIndirect" /> function, which creates a icon based on the content of an <see cref="ICONINFO" /> structure.</para>
    </summary>
    <param name="hInstance">A handle to the instance of the module creating the icon.</param>
    <param name="nWidth">The width, in pixels, of the icon. See remarks.</param>
    <param name="nHeight">The height, in pixels, of the icon. See remarks.</param>
    <param name="cPlanes">The number of planes in the XOR bitmask of the icon. See remarks.</param>
    <param name="cBitsPixel">The number of bits-per-pixel in the XOR bitmask of the icon.</param>
    <param name="lpbANDbits">An array of bytes that contains the bit values for the AND bitmask of the icon. This bitmask describes a monochrome bitmap. See remarks.</param>
    <param name="lpbXORbits">An array of bytes that contains the bit values for the XOR bitmask of the icon. This bitmask describes a monochrome or color bitmap. See remarks.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to an icon.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateIconFromResource">
    <summary>
      <para>Creates an icon or cursor from resource bits describing the icon.</para>
      <para>To specify a desired height or width, use the <see cref="CreateIconFromResourceEx" /> function.</para>
    </summary>
    <param name="presbits">
      <para>The DWORD-aligned buffer pointer containing the icon or cursor resource bits. These bits are typically loaded by calls to the <see cref="LookupIconIdFromDirectory" />, <see cref="LookupIconIdFromDirectoryEx" />, and <see cref="LoadResource" /> functions.</para>
      <para>See <a href="https://docs.microsoft.com//windows/win32/menurc/resource-file-formats#cursor-and-icon-resources">Cursor and Icon Resources</a> for more info on icon and cursor resource format.</para>
    </param>
    <param name="dwResSize">The size, in bytes, of the set of bits pointed to by the <i>presbits</i> parameter.</param>
    <param name="fIcon">
      <para>Indicates whether an icon or a cursor is to be created. If this parameter is <b>TRUE</b>, an icon is to be created. If it is <b>FALSE</b>, a cursor is to be created.</para>
      <para>The <a href="https://docs.microsoft.com//windows/win32/menurc/localheader">LOCALHEADER</a> structure defines cursor hotspot and is the first data read from the cursor resource bits.</para>
    </param>
    <param name="dwVer">The version number of the icon or cursor format for the resource bits pointed to by the <i>presbits</i> parameter. The value must be greater than or equal to 0x00020000 and less than or equal to 0x00030000. This parameter is generally set to 0x00030000.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the icon or cursor.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateIconFromResourceEx">
    <summary>Creates an icon or cursor from resource bits describing the icon.</summary>
    <param name="presbits">
      <para>The DWORD-aligned buffer pointer containing the icon (<b>RT_ICON</b>) or cursor (<b>RT_CURSOR</b>) resource bits. These bits are typically loaded by calls to the <see cref="LookupIconIdFromDirectoryEx" /> and <see cref="LoadResource" /> functions.</para>
      <para>See <a href="https://docs.microsoft.com//windows/win32/menurc/resource-file-formats#cursor-and-icon-resources">Cursor and Icon Resources</a> for more info on icon and cursor resource format.</para>
    </param>
    <param name="dwResSize">The size, in bytes, of the set of bits pointed to by the <i>pbIconBits</i> parameter.</param>
    <param name="fIcon">
      <para>Indicates whether an icon or a cursor is to be created. If this parameter is <b>TRUE</b>, an icon is to be created. If it is <b>FALSE</b>, a cursor is to be created.</para>
      <para>The <a href="https://docs.microsoft.com//windows/win32/menurc/localheader">LOCALHEADER</a> structure defines cursor hotspot and is the first data read from the cursor resource bits.</para>
    </param>
    <param name="dwVer">The version number of the icon or cursor format for the resource bits pointed to by the <i>presbits</i> parameter. The value must be greater than or equal to 0x00020000 and less than or equal to 0x00030000. This parameter is generally set to 0x00030000.</param>
    <param name="cxDesired">The width, in pixels, of the icon or cursor. If this parameter is zero and the <i>Flags</i> parameter is <b>LR_DEFAULTSIZE</b>, the function uses the <b>SM_CXICON</b> or <b>SM_CXCURSOR</b> system metric value to set the width. If this parameter is zero and <b>LR_DEFAULTSIZE</b> is not used, the function uses the actual resource width.</param>
    <param name="cyDesired">The height, in pixels, of the icon or cursor. If this parameter is zero and the <i>Flags</i> parameter is <b>LR_DEFAULTSIZE</b>, the function uses the <b>SM_CYICON</b> or <b>SM_CYCURSOR</b> system metric value to set the height. If this parameter is zero and <b>LR_DEFAULTSIZE</b> is not used, the function uses the actual resource height.</param>
    <param name="Flags">
      <para>A combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_DEFAULTCOLOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Uses the default color format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_DEFAULTSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Uses the width or height specified by the system metric values for cursors or icons, if the <i>cxDesired</i> or <i>cyDesired</i> values are set to zero. If this flag is not specified and <i>cxDesired</i> and <i>cyDesired</i> are set to zero, the function uses the actual resource size.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_MONOCHROME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Creates a monochrome icon or cursor.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_SHARED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00008000</term>
              </listheader>
            </list>
          </description>
          <description>Shares the icon or cursor handle if the icon or cursor is created multiple times. If <b>LR_SHARED</b> is not set, a second call to <b>CreateIconFromResourceEx</b> for the same resource will create the icon or cursor again and return a different handle.<para>When you use this flag, the system will destroy the resource when it is no longer needed.</para><para>Do not use <b>LR_SHARED</b> for icons or cursors that have non-standard sizes, that may change after loading, or that are loaded from a file.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the icon or cursor.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateIconIndirect">
    <summary>Creates an icon or cursor from an <see cref="ICONINFO" /> structure.</summary>
    <param name="piconinfo">A pointer to an <see cref="ICONINFO" /> structure the function uses to create the icon or cursor.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the icon or cursor that is created.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateMDIWindow">
    <summary>Creates a multiple-document interface (MDI) child window.</summary>
    <param name="lpClassName">The window class of the MDI child window. The class name must have been registered by a call to the <see cref="RegisterClassEx" /> function.</param>
    <param name="lpWindowName">The window name. The system displays the name in the title bar of the child window.</param>
    <param name="dwStyle">
      <para>The style of the MDI child window. If the MDI client window is created with the <b>MDIS_ALLCHILDSTYLES</b> window style, this parameter can be any combination of the window styles listed in the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">Window Styles</a> page. Otherwise, this parameter is limited to one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_MINIMIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that is initially minimized.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_MAXIMIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01000000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that is initially maximized.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_HSCROLL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00100000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that has a horizontal scroll bar.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_VSCROLL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00200000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that has a vertical scroll bar.</description>
        </listheader>
      </list>
    </param>
    <param name="X">The initial horizontal position, in client coordinates, of the MDI child window. If this parameter is <b>CW_USEDEFAULT</b> ((int)0x80000000), the MDI child window is assigned the default horizontal position.</param>
    <param name="Y">The initial vertical position, in client coordinates, of the MDI child window. If this parameter is <b>CW_USEDEFAULT</b>, the MDI child window is assigned the default vertical position.</param>
    <param name="nWidth">The initial width, in device units, of the MDI child window. If this parameter is <b>CW_USEDEFAULT</b>, the MDI child window is assigned the default width.</param>
    <param name="nHeight">The initial height, in device units, of the MDI child window. If this parameter is set to <b>CW_USEDEFAULT</b>, the MDI child window is assigned the default height.</param>
    <param name="hWndParent">A handle to the MDI client window that will be the parent of the new MDI child window.</param>
    <param name="hInstance">A handle to the instance of the application creating the MDI child window.</param>
    <param name="lParam">An application-defined value.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the created window.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateMDIWindowA">
    <summary>Creates a multiple-document interface (MDI) child window.</summary>
    <param name="lpClassName">The window class of the MDI child window. The class name must have been registered by a call to the <see cref="RegisterClassEx" /> function.</param>
    <param name="lpWindowName">The window name. The system displays the name in the title bar of the child window.</param>
    <param name="dwStyle">
      <para>The style of the MDI child window. If the MDI client window is created with the <b>MDIS_ALLCHILDSTYLES</b> window style, this parameter can be any combination of the window styles listed in the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">Window Styles</a> page. Otherwise, this parameter is limited to one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_MINIMIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that is initially minimized.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_MAXIMIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01000000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that is initially maximized.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_HSCROLL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00100000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that has a horizontal scroll bar.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_VSCROLL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00200000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that has a vertical scroll bar.</description>
        </listheader>
      </list>
    </param>
    <param name="X">The initial horizontal position, in client coordinates, of the MDI child window. If this parameter is <b>CW_USEDEFAULT</b> ((int)0x80000000), the MDI child window is assigned the default horizontal position.</param>
    <param name="Y">The initial vertical position, in client coordinates, of the MDI child window. If this parameter is <b>CW_USEDEFAULT</b>, the MDI child window is assigned the default vertical position.</param>
    <param name="nWidth">The initial width, in device units, of the MDI child window. If this parameter is <b>CW_USEDEFAULT</b>, the MDI child window is assigned the default width.</param>
    <param name="nHeight">The initial height, in device units, of the MDI child window. If this parameter is set to <b>CW_USEDEFAULT</b>, the MDI child window is assigned the default height.</param>
    <param name="hWndParent">A handle to the MDI client window that will be the parent of the new MDI child window.</param>
    <param name="hInstance">A handle to the instance of the application creating the MDI child window.</param>
    <param name="lParam">An application-defined value.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the created window.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateMDIWindowW">
    <summary>Creates a multiple-document interface (MDI) child window.</summary>
    <param name="lpClassName">The window class of the MDI child window. The class name must have been registered by a call to the <see cref="RegisterClassEx" /> function.</param>
    <param name="lpWindowName">The window name. The system displays the name in the title bar of the child window.</param>
    <param name="dwStyle">
      <para>The style of the MDI child window. If the MDI client window is created with the <b>MDIS_ALLCHILDSTYLES</b> window style, this parameter can be any combination of the window styles listed in the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">Window Styles</a> page. Otherwise, this parameter is limited to one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_MINIMIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that is initially minimized.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_MAXIMIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01000000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that is initially maximized.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_HSCROLL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00100000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that has a horizontal scroll bar.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_VSCROLL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00200000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that has a vertical scroll bar.</description>
        </listheader>
      </list>
    </param>
    <param name="X">The initial horizontal position, in client coordinates, of the MDI child window. If this parameter is <b>CW_USEDEFAULT</b> ((int)0x80000000), the MDI child window is assigned the default horizontal position.</param>
    <param name="Y">The initial vertical position, in client coordinates, of the MDI child window. If this parameter is <b>CW_USEDEFAULT</b>, the MDI child window is assigned the default vertical position.</param>
    <param name="nWidth">The initial width, in device units, of the MDI child window. If this parameter is <b>CW_USEDEFAULT</b>, the MDI child window is assigned the default width.</param>
    <param name="nHeight">The initial height, in device units, of the MDI child window. If this parameter is set to <b>CW_USEDEFAULT</b>, the MDI child window is assigned the default height.</param>
    <param name="hWndParent">A handle to the MDI client window that will be the parent of the new MDI child window.</param>
    <param name="hInstance">A handle to the instance of the application creating the MDI child window.</param>
    <param name="lParam">An application-defined value.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the created window.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateMDIWindow">
    <summary>Creates a multiple-document interface (MDI) child window.</summary>
    <param name="lpClassName">The window class of the MDI child window. The class name must have been registered by a call to the <see cref="RegisterClassEx" /> function.</param>
    <param name="lpWindowName">The window name. The system displays the name in the title bar of the child window.</param>
    <param name="dwStyle">
      <para>The style of the MDI child window. If the MDI client window is created with the <b>MDIS_ALLCHILDSTYLES</b> window style, this parameter can be any combination of the window styles listed in the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">Window Styles</a> page. Otherwise, this parameter is limited to one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_MINIMIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that is initially minimized.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_MAXIMIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01000000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that is initially maximized.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_HSCROLL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00100000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that has a horizontal scroll bar.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_VSCROLL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00200000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that has a vertical scroll bar.</description>
        </listheader>
      </list>
    </param>
    <param name="X">The initial horizontal position, in client coordinates, of the MDI child window. If this parameter is <b>CW_USEDEFAULT</b> ((int)0x80000000), the MDI child window is assigned the default horizontal position.</param>
    <param name="Y">The initial vertical position, in client coordinates, of the MDI child window. If this parameter is <b>CW_USEDEFAULT</b>, the MDI child window is assigned the default vertical position.</param>
    <param name="nWidth">The initial width, in device units, of the MDI child window. If this parameter is <b>CW_USEDEFAULT</b>, the MDI child window is assigned the default width.</param>
    <param name="nHeight">The initial height, in device units, of the MDI child window. If this parameter is set to <b>CW_USEDEFAULT</b>, the MDI child window is assigned the default height.</param>
    <param name="hWndParent">A handle to the MDI client window that will be the parent of the new MDI child window.</param>
    <param name="hInstance">A handle to the instance of the application creating the MDI child window.</param>
    <param name="lParam">An application-defined value.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the created window.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateMDIWindowA">
    <summary>Creates a multiple-document interface (MDI) child window.</summary>
    <param name="lpClassName">The window class of the MDI child window. The class name must have been registered by a call to the <see cref="RegisterClassEx" /> function.</param>
    <param name="lpWindowName">The window name. The system displays the name in the title bar of the child window.</param>
    <param name="dwStyle">
      <para>The style of the MDI child window. If the MDI client window is created with the <b>MDIS_ALLCHILDSTYLES</b> window style, this parameter can be any combination of the window styles listed in the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">Window Styles</a> page. Otherwise, this parameter is limited to one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_MINIMIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that is initially minimized.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_MAXIMIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01000000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that is initially maximized.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_HSCROLL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00100000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that has a horizontal scroll bar.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_VSCROLL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00200000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that has a vertical scroll bar.</description>
        </listheader>
      </list>
    </param>
    <param name="X">The initial horizontal position, in client coordinates, of the MDI child window. If this parameter is <b>CW_USEDEFAULT</b> ((int)0x80000000), the MDI child window is assigned the default horizontal position.</param>
    <param name="Y">The initial vertical position, in client coordinates, of the MDI child window. If this parameter is <b>CW_USEDEFAULT</b>, the MDI child window is assigned the default vertical position.</param>
    <param name="nWidth">The initial width, in device units, of the MDI child window. If this parameter is <b>CW_USEDEFAULT</b>, the MDI child window is assigned the default width.</param>
    <param name="nHeight">The initial height, in device units, of the MDI child window. If this parameter is set to <b>CW_USEDEFAULT</b>, the MDI child window is assigned the default height.</param>
    <param name="hWndParent">A handle to the MDI client window that will be the parent of the new MDI child window.</param>
    <param name="hInstance">A handle to the instance of the application creating the MDI child window.</param>
    <param name="lParam">An application-defined value.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the created window.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateMDIWindowW">
    <summary>Creates a multiple-document interface (MDI) child window.</summary>
    <param name="lpClassName">The window class of the MDI child window. The class name must have been registered by a call to the <see cref="RegisterClassEx" /> function.</param>
    <param name="lpWindowName">The window name. The system displays the name in the title bar of the child window.</param>
    <param name="dwStyle">
      <para>The style of the MDI child window. If the MDI client window is created with the <b>MDIS_ALLCHILDSTYLES</b> window style, this parameter can be any combination of the window styles listed in the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">Window Styles</a> page. Otherwise, this parameter is limited to one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_MINIMIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that is initially minimized.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_MAXIMIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01000000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that is initially maximized.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_HSCROLL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00100000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that has a horizontal scroll bar.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WS_VSCROLL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00200000L</term>
              </listheader>
            </list>
          </description>
          <description>Creates an MDI child window that has a vertical scroll bar.</description>
        </listheader>
      </list>
    </param>
    <param name="X">The initial horizontal position, in client coordinates, of the MDI child window. If this parameter is <b>CW_USEDEFAULT</b> ((int)0x80000000), the MDI child window is assigned the default horizontal position.</param>
    <param name="Y">The initial vertical position, in client coordinates, of the MDI child window. If this parameter is <b>CW_USEDEFAULT</b>, the MDI child window is assigned the default vertical position.</param>
    <param name="nWidth">The initial width, in device units, of the MDI child window. If this parameter is <b>CW_USEDEFAULT</b>, the MDI child window is assigned the default width.</param>
    <param name="nHeight">The initial height, in device units, of the MDI child window. If this parameter is set to <b>CW_USEDEFAULT</b>, the MDI child window is assigned the default height.</param>
    <param name="hWndParent">A handle to the MDI client window that will be the parent of the new MDI child window.</param>
    <param name="hInstance">A handle to the instance of the application creating the MDI child window.</param>
    <param name="lParam">An application-defined value.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the created window.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateMenu">
    <summary>Creates a menu. The menu is initially empty, but it can be filled with menu items by using the <see cref="InsertMenuItem" />, <a href="https://docs.microsoft.com//windows/desktop/menurc/u">AppendMenu</a>, and <see cref="InsertMenu" /> functions.</summary>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created menu.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreatePopupMenu">
    <summary>Creates a drop-down menu, submenu, or shortcut menu. The menu is initially empty. You can insert or append menu items by using the <see cref="InsertMenuItem" /> function. You can also use the <see cref="InsertMenu" /> function to insert menu items and the <see cref="AppendMenu" /> function to append menu items.</summary>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created menu.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateSyntheticPointerDevice">
    <summary>Configures the pointer injection device for the calling application, and initializes the maximum number of simultaneous pointers that the app can inject.</summary>
    <param name="pointerType">The pointer injection device type. Must be either <see cref="PT_TOUCH" /> or <b>PT_PEN</b>.</param>
    <param name="maxCount">
      <para>The maximum number of contacts.</para>
      <para>For <see cref="PT_TOUCH" /> this value must be greater than 0 and less than or equal to <a href="https://docs.microsoft.com//previous-versions/windows/desktop/input_touchinjection/constants">MAX_TOUCH_COUNT</a>.</para>
      <para>For <see cref="PT_PEN" /> this value must be 1.</para>
    </param>
    <param name="mode">The contact visualization mode.</param>
    <returns>If the function succeeds, the return value is a handle to the pointer injection device. Otherwise, it returns null. To retrieve extended error information, call the <see cref="GetLastError" /> function.</returns>
  </member>
  <member name="Windows.CreateWindow">
    <summary>
      <para>Creates an overlapped, pop-up, or child window. It specifies the window class, window title, window style, and (optionally) the initial position and size of the window. The function also specifies the window's parent or owner, if any, and the window's menu.</para>
      <para>To use extended window styles in addition to the styles supported by <b>CreateWindow</b>, use the <see cref="CreateWindowEx" /> function.</para>
    </summary>
    <param name="lpClassName">A <b>null</b>-terminated string or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero. If <i>lpClassName</i> is a string, it specifies the window class name. The class name can be any name registered with <b>RegisterClass</b> or <b>RegisterClassEx</b>, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined system class names. For a list of system class names, see the Remarks section.</param>
    <param name="lpWindowName">The window name. If the window style specifies a title bar, the window title pointed to by <i>lpWindowName</i> is displayed in the title bar. When using <b>CreateWindow</b> to create controls, such as buttons, check boxes, and static controls, use <i>lpWindowName</i> to specify the text of the control. When creating a static control with the <b>SS_ICON</b> style, use <i>lpWindowName</i> to specify the icon name or identifier. To specify an identifier, use the syntax "#<i>num</i>".</param>
    <param name="dwStyle">The style of the window being created. This parameter can be a combination of the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style values</a>, plus the control styles indicated in the Remarks section.</param>
    <param name="x">The initial horizontal position of the window. For an overlapped or pop-up window, the <i>x</i> parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>x</i> is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If this parameter is set to <b>CW_USEDEFAULT</b>, the system selects the default position for the window's upper-left corner and ignores the <i>y</i> parameter. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if it is specified for a pop-up or child window, the <i>x</i> and <i>y</i> parameters are set to zero.</param>
    <param name="y">
      <para>The initial vertical position of the window. For an overlapped or pop-up window, the <i>y</i> parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>y</i> is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box, <i>y</i> is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.</para>
      <para>If an overlapped window is created with the <b>WS_VISIBLE</b> style bit set and the <i>x</i> parameter is set to <b>CW_USEDEFAULT</b>, then the <i>y</i> parameter determines how the window is shown. If the <i>y</i> parameter is <b>CW_USEDEFAULT</b>, then the window manager calls <see cref="ShowWindow" /> with the <b>SW_SHOW</b> flag after the window has been created. If the <i>y</i> parameter is some other value, then the window manager calls <b>ShowWindow</b> with that value as the <i>nCmdShow</i> parameter.</para>
    </param>
    <param name="nWidth">The width, in device units, of the window. For overlapped windows, <i>nWidth</i> is either the window's width, in screen coordinates, or <b>CW_USEDEFAULT</b>. If <i>nWidth</i> is <b>CW_USEDEFAULT</b>, the system selects a default width and height for the window; the default width extends from the initial x-coordinate to the right edge of the screen, and the default height extends from the initial y-coordinate to the top of the icon area. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if <b>CW_USEDEFAULT</b> is specified for a pop-up or child window, <i>nWidth</i> and <i>nHeight</i> are set to zero.</param>
    <param name="nHeight">The height, in device units, of the window. For overlapped windows, <i>nHeight</i> is the window's height, in screen coordinates. If <i>nWidth</i> is set to <b>CW_USEDEFAULT</b>, the system ignores <i>nHeight</i>.</param>
    <param name="hWndParent">
      <para>A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.</para>
      <para>To create a <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">message-only window</a>, supply <b>HWND_MESSAGE</b> or a handle to an existing message-only window.</para>
    </param>
    <param name="hMenu">A handle to a menu, or specifies a child-window identifier depending on the window style. For an overlapped or pop-up window, <i>hMenu</i> identifies the menu to be used with the window; it can be <b>NULL</b> if the class menu is to be used. For a child window, <i>hMenu</i> specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.</param>
    <param name="hInstance">A handle to the instance of the module to be associated with the window.</param>
    <param name="lpParam">
      <para>A pointer to a value to be passed to the window through the <see cref="CREATESTRUCT" /> structure (<b>lpCreateParams</b> member) pointed to by the <i>lParam</i> param of the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-create">WM_CREATE</a> message. This message is sent to the created window by this function before it returns.</para>
      <para>If an application calls <b>CreateWindow</b> to create a MDI client window, <i>lpParam</i> should point to a <see cref="CLIENTCREATESTRUCT" /> structure. If an MDI client window calls <b>CreateWindow</b> to create an MDI child window, <i>lpParam</i> should point to a <see cref="MDICREATESTRUCT" /> structure. <i>lpParam</i> may be <b>NULL</b> if no additional data is needed.</para>
    </param>
  </member>
  <member name="Windows.CreateWindowA">
    <summary>
      <para>Creates an overlapped, pop-up, or child window. It specifies the window class, window title, window style, and (optionally) the initial position and size of the window. The function also specifies the window's parent or owner, if any, and the window's menu.</para>
      <para>To use extended window styles in addition to the styles supported by <b>CreateWindow</b>, use the <see cref="CreateWindowEx" /> function.</para>
    </summary>
    <param name="lpClassName">A <b>null</b>-terminated string or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero. If <i>lpClassName</i> is a string, it specifies the window class name. The class name can be any name registered with <b>RegisterClass</b> or <b>RegisterClassEx</b>, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined system class names. For a list of system class names, see the Remarks section.</param>
    <param name="lpWindowName">The window name. If the window style specifies a title bar, the window title pointed to by <i>lpWindowName</i> is displayed in the title bar. When using <b>CreateWindow</b> to create controls, such as buttons, check boxes, and static controls, use <i>lpWindowName</i> to specify the text of the control. When creating a static control with the <b>SS_ICON</b> style, use <i>lpWindowName</i> to specify the icon name or identifier. To specify an identifier, use the syntax "#<i>num</i>".</param>
    <param name="dwStyle">The style of the window being created. This parameter can be a combination of the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style values</a>, plus the control styles indicated in the Remarks section.</param>
    <param name="x">The initial horizontal position of the window. For an overlapped or pop-up window, the <i>x</i> parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>x</i> is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If this parameter is set to <b>CW_USEDEFAULT</b>, the system selects the default position for the window's upper-left corner and ignores the <i>y</i> parameter. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if it is specified for a pop-up or child window, the <i>x</i> and <i>y</i> parameters are set to zero.</param>
    <param name="y">
      <para>The initial vertical position of the window. For an overlapped or pop-up window, the <i>y</i> parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>y</i> is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box, <i>y</i> is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.</para>
      <para>If an overlapped window is created with the <b>WS_VISIBLE</b> style bit set and the <i>x</i> parameter is set to <b>CW_USEDEFAULT</b>, then the <i>y</i> parameter determines how the window is shown. If the <i>y</i> parameter is <b>CW_USEDEFAULT</b>, then the window manager calls <see cref="ShowWindow" /> with the <b>SW_SHOW</b> flag after the window has been created. If the <i>y</i> parameter is some other value, then the window manager calls <b>ShowWindow</b> with that value as the <i>nCmdShow</i> parameter.</para>
    </param>
    <param name="nWidth">The width, in device units, of the window. For overlapped windows, <i>nWidth</i> is either the window's width, in screen coordinates, or <b>CW_USEDEFAULT</b>. If <i>nWidth</i> is <b>CW_USEDEFAULT</b>, the system selects a default width and height for the window; the default width extends from the initial x-coordinate to the right edge of the screen, and the default height extends from the initial y-coordinate to the top of the icon area. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if <b>CW_USEDEFAULT</b> is specified for a pop-up or child window, <i>nWidth</i> and <i>nHeight</i> are set to zero.</param>
    <param name="nHeight">The height, in device units, of the window. For overlapped windows, <i>nHeight</i> is the window's height, in screen coordinates. If <i>nWidth</i> is set to <b>CW_USEDEFAULT</b>, the system ignores <i>nHeight</i>.</param>
    <param name="hWndParent">
      <para>A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.</para>
      <para>To create a <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">message-only window</a>, supply <b>HWND_MESSAGE</b> or a handle to an existing message-only window.</para>
    </param>
    <param name="hMenu">A handle to a menu, or specifies a child-window identifier depending on the window style. For an overlapped or pop-up window, <i>hMenu</i> identifies the menu to be used with the window; it can be <b>NULL</b> if the class menu is to be used. For a child window, <i>hMenu</i> specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.</param>
    <param name="hInstance">A handle to the instance of the module to be associated with the window.</param>
    <param name="lpParam">
      <para>A pointer to a value to be passed to the window through the <see cref="CREATESTRUCT" /> structure (<b>lpCreateParams</b> member) pointed to by the <i>lParam</i> param of the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-create">WM_CREATE</a> message. This message is sent to the created window by this function before it returns.</para>
      <para>If an application calls <b>CreateWindow</b> to create a MDI client window, <i>lpParam</i> should point to a <see cref="CLIENTCREATESTRUCT" /> structure. If an MDI client window calls <b>CreateWindow</b> to create an MDI child window, <i>lpParam</i> should point to a <see cref="MDICREATESTRUCT" /> structure. <i>lpParam</i> may be <b>NULL</b> if no additional data is needed.</para>
    </param>
  </member>
  <member name="Windows.CreateWindowW">
    <summary>
      <para>Creates an overlapped, pop-up, or child window. It specifies the window class, window title, window style, and (optionally) the initial position and size of the window. The function also specifies the window's parent or owner, if any, and the window's menu.</para>
      <para>To use extended window styles in addition to the styles supported by <b>CreateWindow</b>, use the <see cref="CreateWindowEx" /> function.</para>
    </summary>
    <param name="lpClassName">A <b>null</b>-terminated string or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero. If <i>lpClassName</i> is a string, it specifies the window class name. The class name can be any name registered with <b>RegisterClass</b> or <b>RegisterClassEx</b>, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined system class names. For a list of system class names, see the Remarks section.</param>
    <param name="lpWindowName">The window name. If the window style specifies a title bar, the window title pointed to by <i>lpWindowName</i> is displayed in the title bar. When using <b>CreateWindow</b> to create controls, such as buttons, check boxes, and static controls, use <i>lpWindowName</i> to specify the text of the control. When creating a static control with the <b>SS_ICON</b> style, use <i>lpWindowName</i> to specify the icon name or identifier. To specify an identifier, use the syntax "#<i>num</i>".</param>
    <param name="dwStyle">The style of the window being created. This parameter can be a combination of the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style values</a>, plus the control styles indicated in the Remarks section.</param>
    <param name="x">The initial horizontal position of the window. For an overlapped or pop-up window, the <i>x</i> parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>x</i> is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If this parameter is set to <b>CW_USEDEFAULT</b>, the system selects the default position for the window's upper-left corner and ignores the <i>y</i> parameter. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if it is specified for a pop-up or child window, the <i>x</i> and <i>y</i> parameters are set to zero.</param>
    <param name="y">
      <para>The initial vertical position of the window. For an overlapped or pop-up window, the <i>y</i> parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>y</i> is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box, <i>y</i> is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.</para>
      <para>If an overlapped window is created with the <b>WS_VISIBLE</b> style bit set and the <i>x</i> parameter is set to <b>CW_USEDEFAULT</b>, then the <i>y</i> parameter determines how the window is shown. If the <i>y</i> parameter is <b>CW_USEDEFAULT</b>, then the window manager calls <see cref="ShowWindow" /> with the <b>SW_SHOW</b> flag after the window has been created. If the <i>y</i> parameter is some other value, then the window manager calls <b>ShowWindow</b> with that value as the <i>nCmdShow</i> parameter.</para>
    </param>
    <param name="nWidth">The width, in device units, of the window. For overlapped windows, <i>nWidth</i> is either the window's width, in screen coordinates, or <b>CW_USEDEFAULT</b>. If <i>nWidth</i> is <b>CW_USEDEFAULT</b>, the system selects a default width and height for the window; the default width extends from the initial x-coordinate to the right edge of the screen, and the default height extends from the initial y-coordinate to the top of the icon area. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if <b>CW_USEDEFAULT</b> is specified for a pop-up or child window, <i>nWidth</i> and <i>nHeight</i> are set to zero.</param>
    <param name="nHeight">The height, in device units, of the window. For overlapped windows, <i>nHeight</i> is the window's height, in screen coordinates. If <i>nWidth</i> is set to <b>CW_USEDEFAULT</b>, the system ignores <i>nHeight</i>.</param>
    <param name="hWndParent">
      <para>A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.</para>
      <para>To create a <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">message-only window</a>, supply <b>HWND_MESSAGE</b> or a handle to an existing message-only window.</para>
    </param>
    <param name="hMenu">A handle to a menu, or specifies a child-window identifier depending on the window style. For an overlapped or pop-up window, <i>hMenu</i> identifies the menu to be used with the window; it can be <b>NULL</b> if the class menu is to be used. For a child window, <i>hMenu</i> specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.</param>
    <param name="hInstance">A handle to the instance of the module to be associated with the window.</param>
    <param name="lpParam">
      <para>A pointer to a value to be passed to the window through the <see cref="CREATESTRUCT" /> structure (<b>lpCreateParams</b> member) pointed to by the <i>lParam</i> param of the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-create">WM_CREATE</a> message. This message is sent to the created window by this function before it returns.</para>
      <para>If an application calls <b>CreateWindow</b> to create a MDI client window, <i>lpParam</i> should point to a <see cref="CLIENTCREATESTRUCT" /> structure. If an MDI client window calls <b>CreateWindow</b> to create an MDI child window, <i>lpParam</i> should point to a <see cref="MDICREATESTRUCT" /> structure. <i>lpParam</i> may be <b>NULL</b> if no additional data is needed.</para>
    </param>
  </member>
  <member name="Windows.CreateWindowEx">
    <summary>Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the <see cref="CreateWindow" /> function. For more information about creating a window and for full descriptions of the other parameters of <b>CreateWindowEx</b>, see <b>CreateWindow</b>.</summary>
    <param name="dwExStyle">The extended window style of the window being created. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">Extended Window Styles</a>.</param>
    <param name="lpClassName">A <b>null</b>-terminated string or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero. If <i>lpClassName</i> is a string, it specifies the window class name. The class name can be any name registered with <b>RegisterClass</b> or <b>RegisterClassEx</b>, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-window-classes">system class</a> names.</param>
    <param name="lpWindowName">The window name. If the window style specifies a title bar, the window title pointed to by <i>lpWindowName</i> is displayed in the title bar. When using <see cref="CreateWindow" /> to create controls, such as buttons, check boxes, and static controls, use <i>lpWindowName</i> to specify the text of the control. When creating a static control with the <b>SS_ICON</b> style, use <i>lpWindowName</i> to specify the icon name or identifier. To specify an identifier, use the syntax "#<i>num</i>".</param>
    <param name="dwStyle">The style of the window being created. This parameter can be a combination of the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style values</a>, plus the control styles indicated in the Remarks section.</param>
    <param name="X">The initial horizontal position of the window. For an overlapped or pop-up window, the <i>x</i> parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>x</i> is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If <i>x</i> is set to <b>CW_USEDEFAULT</b>, the system selects the default position for the window's upper-left corner and ignores the <i>y</i> parameter. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if it is specified for a pop-up or child window, the <i>x</i> and <i>y</i> parameters are set to zero.</param>
    <param name="Y">
      <para>The initial vertical position of the window. For an overlapped or pop-up window, the <i>y</i> parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>y</i> is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box <i>y</i> is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.</para>
      <para>If an overlapped window is created with the <b>WS_VISIBLE</b> style bit set and the <i>x</i> parameter is set to <b>CW_USEDEFAULT</b>, then the <i>y</i> parameter determines how the window is shown. If the <i>y</i> parameter is <b>CW_USEDEFAULT</b>, then the window manager calls <see cref="ShowWindow" /> with the <b>SW_SHOW</b> flag after the window has been created. If the <i>y</i> parameter is some other value, then the window manager calls <b>ShowWindow</b> with that value as the <i>nCmdShow</i> parameter.</para>
    </param>
    <param name="nWidth">The width, in device units, of the window. For overlapped windows, <i>nWidth</i> is the window's width, in screen coordinates, or <b>CW_USEDEFAULT</b>. If <i>nWidth</i> is <b>CW_USEDEFAULT</b>, the system selects a default width and height for the window; the default width extends from the initial x-coordinates to the right edge of the screen; the default height extends from the initial y-coordinate to the top of the icon area. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if <b>CW_USEDEFAULT</b> is specified for a pop-up or child window, the <i>nWidth</i> and <i>nHeight</i> parameter are set to zero.</param>
    <param name="nHeight">The height, in device units, of the window. For overlapped windows, <i>nHeight</i> is the window's height, in screen coordinates. If the <i>nWidth</i> parameter is set to <b>CW_USEDEFAULT</b>, the system ignores <i>nHeight</i>.</param>
    <param name="hWndParent">
      <para>A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.</para>
      <para>To create a <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">message-only window</a>, supply <b>HWND_MESSAGE</b> or a handle to an existing message-only window.</para>
    </param>
    <param name="hMenu">A handle to a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, <i>hMenu</i> identifies the menu to be used with the window; it can be <b>NULL</b> if the class menu is to be used. For a child window, <i>hMenu</i> specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.</param>
    <param name="hInstance">A handle to the instance of the module to be associated with the window.</param>
    <param name="lpParam">
      <para>Pointer to a value to be passed to the window through the <see cref="CREATESTRUCT" /> structure (<b>lpCreateParams</b> member) pointed to by the <i>lParam</i> param of the <b>WM_CREATE</b> message. This message is sent to the created window by this function before it returns.</para>
      <para>If an application calls <see cref="CreateWindow" /> to create a MDI client window, <i>lpParam</i> should point to a <see cref="CLIENTCREATESTRUCT" /> structure. If an MDI client window calls <b>CreateWindow</b> to create an MDI child window, <i>lpParam</i> should point to a <see cref="MDICREATESTRUCT" /> structure. <i>lpParam</i> may be <b>NULL</b> if no additional data is needed.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the new window.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>This function typically fails for one of the following reasons:</para>
      <list type="bullet">
        <item>
          <description>an invalid parameter value</description>
        </item>
        <item>
          <description>the system class was registered by a different module</description>
        </item>
        <item>
          <description>The <b>WH_CBT</b> hook is installed and returns a failure code</description>
        </item>
        <item>
          <description>if one of the controls in the dialog template is not registered, or its window window procedure fails <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-create">WM_CREATE</a> or <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-nccreate">WM_NCCREATE</a></description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.CreateWindowExA">
    <summary>Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the <see cref="CreateWindow" /> function. For more information about creating a window and for full descriptions of the other parameters of <b>CreateWindowEx</b>, see <b>CreateWindow</b>.</summary>
    <param name="dwExStyle">The extended window style of the window being created. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">Extended Window Styles</a>.</param>
    <param name="lpClassName">A <b>null</b>-terminated string or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero. If <i>lpClassName</i> is a string, it specifies the window class name. The class name can be any name registered with <b>RegisterClass</b> or <b>RegisterClassEx</b>, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-window-classes">system class</a> names.</param>
    <param name="lpWindowName">The window name. If the window style specifies a title bar, the window title pointed to by <i>lpWindowName</i> is displayed in the title bar. When using <see cref="CreateWindow" /> to create controls, such as buttons, check boxes, and static controls, use <i>lpWindowName</i> to specify the text of the control. When creating a static control with the <b>SS_ICON</b> style, use <i>lpWindowName</i> to specify the icon name or identifier. To specify an identifier, use the syntax "#<i>num</i>".</param>
    <param name="dwStyle">The style of the window being created. This parameter can be a combination of the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style values</a>, plus the control styles indicated in the Remarks section.</param>
    <param name="X">The initial horizontal position of the window. For an overlapped or pop-up window, the <i>x</i> parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>x</i> is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If <i>x</i> is set to <b>CW_USEDEFAULT</b>, the system selects the default position for the window's upper-left corner and ignores the <i>y</i> parameter. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if it is specified for a pop-up or child window, the <i>x</i> and <i>y</i> parameters are set to zero.</param>
    <param name="Y">
      <para>The initial vertical position of the window. For an overlapped or pop-up window, the <i>y</i> parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>y</i> is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box <i>y</i> is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.</para>
      <para>If an overlapped window is created with the <b>WS_VISIBLE</b> style bit set and the <i>x</i> parameter is set to <b>CW_USEDEFAULT</b>, then the <i>y</i> parameter determines how the window is shown. If the <i>y</i> parameter is <b>CW_USEDEFAULT</b>, then the window manager calls <see cref="ShowWindow" /> with the <b>SW_SHOW</b> flag after the window has been created. If the <i>y</i> parameter is some other value, then the window manager calls <b>ShowWindow</b> with that value as the <i>nCmdShow</i> parameter.</para>
    </param>
    <param name="nWidth">The width, in device units, of the window. For overlapped windows, <i>nWidth</i> is the window's width, in screen coordinates, or <b>CW_USEDEFAULT</b>. If <i>nWidth</i> is <b>CW_USEDEFAULT</b>, the system selects a default width and height for the window; the default width extends from the initial x-coordinates to the right edge of the screen; the default height extends from the initial y-coordinate to the top of the icon area. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if <b>CW_USEDEFAULT</b> is specified for a pop-up or child window, the <i>nWidth</i> and <i>nHeight</i> parameter are set to zero.</param>
    <param name="nHeight">The height, in device units, of the window. For overlapped windows, <i>nHeight</i> is the window's height, in screen coordinates. If the <i>nWidth</i> parameter is set to <b>CW_USEDEFAULT</b>, the system ignores <i>nHeight</i>.</param>
    <param name="hWndParent">
      <para>A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.</para>
      <para>To create a <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">message-only window</a>, supply <b>HWND_MESSAGE</b> or a handle to an existing message-only window.</para>
    </param>
    <param name="hMenu">A handle to a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, <i>hMenu</i> identifies the menu to be used with the window; it can be <b>NULL</b> if the class menu is to be used. For a child window, <i>hMenu</i> specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.</param>
    <param name="hInstance">A handle to the instance of the module to be associated with the window.</param>
    <param name="lpParam">
      <para>Pointer to a value to be passed to the window through the <see cref="CREATESTRUCT" /> structure (<b>lpCreateParams</b> member) pointed to by the <i>lParam</i> param of the <b>WM_CREATE</b> message. This message is sent to the created window by this function before it returns.</para>
      <para>If an application calls <see cref="CreateWindow" /> to create a MDI client window, <i>lpParam</i> should point to a <see cref="CLIENTCREATESTRUCT" /> structure. If an MDI client window calls <b>CreateWindow</b> to create an MDI child window, <i>lpParam</i> should point to a <see cref="MDICREATESTRUCT" /> structure. <i>lpParam</i> may be <b>NULL</b> if no additional data is needed.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the new window.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>This function typically fails for one of the following reasons:</para>
      <list type="bullet">
        <item>
          <description>an invalid parameter value</description>
        </item>
        <item>
          <description>the system class was registered by a different module</description>
        </item>
        <item>
          <description>The <b>WH_CBT</b> hook is installed and returns a failure code</description>
        </item>
        <item>
          <description>if one of the controls in the dialog template is not registered, or its window window procedure fails <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-create">WM_CREATE</a> or <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-nccreate">WM_NCCREATE</a></description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.CreateWindowExW">
    <summary>Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the <see cref="CreateWindow" /> function. For more information about creating a window and for full descriptions of the other parameters of <b>CreateWindowEx</b>, see <b>CreateWindow</b>.</summary>
    <param name="dwExStyle">The extended window style of the window being created. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">Extended Window Styles</a>.</param>
    <param name="lpClassName">A <b>null</b>-terminated string or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero. If <i>lpClassName</i> is a string, it specifies the window class name. The class name can be any name registered with <b>RegisterClass</b> or <b>RegisterClassEx</b>, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-window-classes">system class</a> names.</param>
    <param name="lpWindowName">The window name. If the window style specifies a title bar, the window title pointed to by <i>lpWindowName</i> is displayed in the title bar. When using <see cref="CreateWindow" /> to create controls, such as buttons, check boxes, and static controls, use <i>lpWindowName</i> to specify the text of the control. When creating a static control with the <b>SS_ICON</b> style, use <i>lpWindowName</i> to specify the icon name or identifier. To specify an identifier, use the syntax "#<i>num</i>".</param>
    <param name="dwStyle">The style of the window being created. This parameter can be a combination of the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style values</a>, plus the control styles indicated in the Remarks section.</param>
    <param name="X">The initial horizontal position of the window. For an overlapped or pop-up window, the <i>x</i> parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>x</i> is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If <i>x</i> is set to <b>CW_USEDEFAULT</b>, the system selects the default position for the window's upper-left corner and ignores the <i>y</i> parameter. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if it is specified for a pop-up or child window, the <i>x</i> and <i>y</i> parameters are set to zero.</param>
    <param name="Y">
      <para>The initial vertical position of the window. For an overlapped or pop-up window, the <i>y</i> parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>y</i> is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box <i>y</i> is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.</para>
      <para>If an overlapped window is created with the <b>WS_VISIBLE</b> style bit set and the <i>x</i> parameter is set to <b>CW_USEDEFAULT</b>, then the <i>y</i> parameter determines how the window is shown. If the <i>y</i> parameter is <b>CW_USEDEFAULT</b>, then the window manager calls <see cref="ShowWindow" /> with the <b>SW_SHOW</b> flag after the window has been created. If the <i>y</i> parameter is some other value, then the window manager calls <b>ShowWindow</b> with that value as the <i>nCmdShow</i> parameter.</para>
    </param>
    <param name="nWidth">The width, in device units, of the window. For overlapped windows, <i>nWidth</i> is the window's width, in screen coordinates, or <b>CW_USEDEFAULT</b>. If <i>nWidth</i> is <b>CW_USEDEFAULT</b>, the system selects a default width and height for the window; the default width extends from the initial x-coordinates to the right edge of the screen; the default height extends from the initial y-coordinate to the top of the icon area. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if <b>CW_USEDEFAULT</b> is specified for a pop-up or child window, the <i>nWidth</i> and <i>nHeight</i> parameter are set to zero.</param>
    <param name="nHeight">The height, in device units, of the window. For overlapped windows, <i>nHeight</i> is the window's height, in screen coordinates. If the <i>nWidth</i> parameter is set to <b>CW_USEDEFAULT</b>, the system ignores <i>nHeight</i>.</param>
    <param name="hWndParent">
      <para>A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.</para>
      <para>To create a <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">message-only window</a>, supply <b>HWND_MESSAGE</b> or a handle to an existing message-only window.</para>
    </param>
    <param name="hMenu">A handle to a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, <i>hMenu</i> identifies the menu to be used with the window; it can be <b>NULL</b> if the class menu is to be used. For a child window, <i>hMenu</i> specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.</param>
    <param name="hInstance">A handle to the instance of the module to be associated with the window.</param>
    <param name="lpParam">
      <para>Pointer to a value to be passed to the window through the <see cref="CREATESTRUCT" /> structure (<b>lpCreateParams</b> member) pointed to by the <i>lParam</i> param of the <b>WM_CREATE</b> message. This message is sent to the created window by this function before it returns.</para>
      <para>If an application calls <see cref="CreateWindow" /> to create a MDI client window, <i>lpParam</i> should point to a <see cref="CLIENTCREATESTRUCT" /> structure. If an MDI client window calls <b>CreateWindow</b> to create an MDI child window, <i>lpParam</i> should point to a <see cref="MDICREATESTRUCT" /> structure. <i>lpParam</i> may be <b>NULL</b> if no additional data is needed.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the new window.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>This function typically fails for one of the following reasons:</para>
      <list type="bullet">
        <item>
          <description>an invalid parameter value</description>
        </item>
        <item>
          <description>the system class was registered by a different module</description>
        </item>
        <item>
          <description>The <b>WH_CBT</b> hook is installed and returns a failure code</description>
        </item>
        <item>
          <description>if one of the controls in the dialog template is not registered, or its window window procedure fails <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-create">WM_CREATE</a> or <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-nccreate">WM_NCCREATE</a></description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.CreateWindowEx">
    <summary>Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the <see cref="CreateWindow" /> function. For more information about creating a window and for full descriptions of the other parameters of <b>CreateWindowEx</b>, see <b>CreateWindow</b>.</summary>
    <param name="dwExStyle">The extended window style of the window being created. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">Extended Window Styles</a>.</param>
    <param name="lpClassName">A <b>null</b>-terminated string or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero. If <i>lpClassName</i> is a string, it specifies the window class name. The class name can be any name registered with <b>RegisterClass</b> or <b>RegisterClassEx</b>, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-window-classes">system class</a> names.</param>
    <param name="lpWindowName">The window name. If the window style specifies a title bar, the window title pointed to by <i>lpWindowName</i> is displayed in the title bar. When using <see cref="CreateWindow" /> to create controls, such as buttons, check boxes, and static controls, use <i>lpWindowName</i> to specify the text of the control. When creating a static control with the <b>SS_ICON</b> style, use <i>lpWindowName</i> to specify the icon name or identifier. To specify an identifier, use the syntax "#<i>num</i>".</param>
    <param name="dwStyle">The style of the window being created. This parameter can be a combination of the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style values</a>, plus the control styles indicated in the Remarks section.</param>
    <param name="X">The initial horizontal position of the window. For an overlapped or pop-up window, the <i>x</i> parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>x</i> is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If <i>x</i> is set to <b>CW_USEDEFAULT</b>, the system selects the default position for the window's upper-left corner and ignores the <i>y</i> parameter. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if it is specified for a pop-up or child window, the <i>x</i> and <i>y</i> parameters are set to zero.</param>
    <param name="Y">
      <para>The initial vertical position of the window. For an overlapped or pop-up window, the <i>y</i> parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>y</i> is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box <i>y</i> is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.</para>
      <para>If an overlapped window is created with the <b>WS_VISIBLE</b> style bit set and the <i>x</i> parameter is set to <b>CW_USEDEFAULT</b>, then the <i>y</i> parameter determines how the window is shown. If the <i>y</i> parameter is <b>CW_USEDEFAULT</b>, then the window manager calls <see cref="ShowWindow" /> with the <b>SW_SHOW</b> flag after the window has been created. If the <i>y</i> parameter is some other value, then the window manager calls <b>ShowWindow</b> with that value as the <i>nCmdShow</i> parameter.</para>
    </param>
    <param name="nWidth">The width, in device units, of the window. For overlapped windows, <i>nWidth</i> is the window's width, in screen coordinates, or <b>CW_USEDEFAULT</b>. If <i>nWidth</i> is <b>CW_USEDEFAULT</b>, the system selects a default width and height for the window; the default width extends from the initial x-coordinates to the right edge of the screen; the default height extends from the initial y-coordinate to the top of the icon area. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if <b>CW_USEDEFAULT</b> is specified for a pop-up or child window, the <i>nWidth</i> and <i>nHeight</i> parameter are set to zero.</param>
    <param name="nHeight">The height, in device units, of the window. For overlapped windows, <i>nHeight</i> is the window's height, in screen coordinates. If the <i>nWidth</i> parameter is set to <b>CW_USEDEFAULT</b>, the system ignores <i>nHeight</i>.</param>
    <param name="hWndParent">
      <para>A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.</para>
      <para>To create a <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">message-only window</a>, supply <b>HWND_MESSAGE</b> or a handle to an existing message-only window.</para>
    </param>
    <param name="hMenu">A handle to a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, <i>hMenu</i> identifies the menu to be used with the window; it can be <b>NULL</b> if the class menu is to be used. For a child window, <i>hMenu</i> specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.</param>
    <param name="hInstance">A handle to the instance of the module to be associated with the window.</param>
    <param name="lpParam">
      <para>Pointer to a value to be passed to the window through the <see cref="CREATESTRUCT" /> structure (<b>lpCreateParams</b> member) pointed to by the <i>lParam</i> param of the <b>WM_CREATE</b> message. This message is sent to the created window by this function before it returns.</para>
      <para>If an application calls <see cref="CreateWindow" /> to create a MDI client window, <i>lpParam</i> should point to a <see cref="CLIENTCREATESTRUCT" /> structure. If an MDI client window calls <b>CreateWindow</b> to create an MDI child window, <i>lpParam</i> should point to a <see cref="MDICREATESTRUCT" /> structure. <i>lpParam</i> may be <b>NULL</b> if no additional data is needed.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the new window.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>This function typically fails for one of the following reasons:</para>
      <list type="bullet">
        <item>
          <description>an invalid parameter value</description>
        </item>
        <item>
          <description>the system class was registered by a different module</description>
        </item>
        <item>
          <description>The <b>WH_CBT</b> hook is installed and returns a failure code</description>
        </item>
        <item>
          <description>if one of the controls in the dialog template is not registered, or its window window procedure fails <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-create">WM_CREATE</a> or <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-nccreate">WM_NCCREATE</a></description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.CreateWindowExA">
    <summary>Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the <see cref="CreateWindow" /> function. For more information about creating a window and for full descriptions of the other parameters of <b>CreateWindowEx</b>, see <b>CreateWindow</b>.</summary>
    <param name="dwExStyle">The extended window style of the window being created. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">Extended Window Styles</a>.</param>
    <param name="lpClassName">A <b>null</b>-terminated string or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero. If <i>lpClassName</i> is a string, it specifies the window class name. The class name can be any name registered with <b>RegisterClass</b> or <b>RegisterClassEx</b>, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-window-classes">system class</a> names.</param>
    <param name="lpWindowName">The window name. If the window style specifies a title bar, the window title pointed to by <i>lpWindowName</i> is displayed in the title bar. When using <see cref="CreateWindow" /> to create controls, such as buttons, check boxes, and static controls, use <i>lpWindowName</i> to specify the text of the control. When creating a static control with the <b>SS_ICON</b> style, use <i>lpWindowName</i> to specify the icon name or identifier. To specify an identifier, use the syntax "#<i>num</i>".</param>
    <param name="dwStyle">The style of the window being created. This parameter can be a combination of the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style values</a>, plus the control styles indicated in the Remarks section.</param>
    <param name="X">The initial horizontal position of the window. For an overlapped or pop-up window, the <i>x</i> parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>x</i> is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If <i>x</i> is set to <b>CW_USEDEFAULT</b>, the system selects the default position for the window's upper-left corner and ignores the <i>y</i> parameter. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if it is specified for a pop-up or child window, the <i>x</i> and <i>y</i> parameters are set to zero.</param>
    <param name="Y">
      <para>The initial vertical position of the window. For an overlapped or pop-up window, the <i>y</i> parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>y</i> is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box <i>y</i> is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.</para>
      <para>If an overlapped window is created with the <b>WS_VISIBLE</b> style bit set and the <i>x</i> parameter is set to <b>CW_USEDEFAULT</b>, then the <i>y</i> parameter determines how the window is shown. If the <i>y</i> parameter is <b>CW_USEDEFAULT</b>, then the window manager calls <see cref="ShowWindow" /> with the <b>SW_SHOW</b> flag after the window has been created. If the <i>y</i> parameter is some other value, then the window manager calls <b>ShowWindow</b> with that value as the <i>nCmdShow</i> parameter.</para>
    </param>
    <param name="nWidth">The width, in device units, of the window. For overlapped windows, <i>nWidth</i> is the window's width, in screen coordinates, or <b>CW_USEDEFAULT</b>. If <i>nWidth</i> is <b>CW_USEDEFAULT</b>, the system selects a default width and height for the window; the default width extends from the initial x-coordinates to the right edge of the screen; the default height extends from the initial y-coordinate to the top of the icon area. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if <b>CW_USEDEFAULT</b> is specified for a pop-up or child window, the <i>nWidth</i> and <i>nHeight</i> parameter are set to zero.</param>
    <param name="nHeight">The height, in device units, of the window. For overlapped windows, <i>nHeight</i> is the window's height, in screen coordinates. If the <i>nWidth</i> parameter is set to <b>CW_USEDEFAULT</b>, the system ignores <i>nHeight</i>.</param>
    <param name="hWndParent">
      <para>A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.</para>
      <para>To create a <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">message-only window</a>, supply <b>HWND_MESSAGE</b> or a handle to an existing message-only window.</para>
    </param>
    <param name="hMenu">A handle to a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, <i>hMenu</i> identifies the menu to be used with the window; it can be <b>NULL</b> if the class menu is to be used. For a child window, <i>hMenu</i> specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.</param>
    <param name="hInstance">A handle to the instance of the module to be associated with the window.</param>
    <param name="lpParam">
      <para>Pointer to a value to be passed to the window through the <see cref="CREATESTRUCT" /> structure (<b>lpCreateParams</b> member) pointed to by the <i>lParam</i> param of the <b>WM_CREATE</b> message. This message is sent to the created window by this function before it returns.</para>
      <para>If an application calls <see cref="CreateWindow" /> to create a MDI client window, <i>lpParam</i> should point to a <see cref="CLIENTCREATESTRUCT" /> structure. If an MDI client window calls <b>CreateWindow</b> to create an MDI child window, <i>lpParam</i> should point to a <see cref="MDICREATESTRUCT" /> structure. <i>lpParam</i> may be <b>NULL</b> if no additional data is needed.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the new window.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>This function typically fails for one of the following reasons:</para>
      <list type="bullet">
        <item>
          <description>an invalid parameter value</description>
        </item>
        <item>
          <description>the system class was registered by a different module</description>
        </item>
        <item>
          <description>The <b>WH_CBT</b> hook is installed and returns a failure code</description>
        </item>
        <item>
          <description>if one of the controls in the dialog template is not registered, or its window window procedure fails <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-create">WM_CREATE</a> or <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-nccreate">WM_NCCREATE</a></description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.CreateWindowExW">
    <summary>Creates an overlapped, pop-up, or child window with an extended window style; otherwise, this function is identical to the <see cref="CreateWindow" /> function. For more information about creating a window and for full descriptions of the other parameters of <b>CreateWindowEx</b>, see <b>CreateWindow</b>.</summary>
    <param name="dwExStyle">The extended window style of the window being created. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">Extended Window Styles</a>.</param>
    <param name="lpClassName">A <b>null</b>-terminated string or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero. If <i>lpClassName</i> is a string, it specifies the window class name. The class name can be any name registered with <b>RegisterClass</b> or <b>RegisterClassEx</b>, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-window-classes">system class</a> names.</param>
    <param name="lpWindowName">The window name. If the window style specifies a title bar, the window title pointed to by <i>lpWindowName</i> is displayed in the title bar. When using <see cref="CreateWindow" /> to create controls, such as buttons, check boxes, and static controls, use <i>lpWindowName</i> to specify the text of the control. When creating a static control with the <b>SS_ICON</b> style, use <i>lpWindowName</i> to specify the icon name or identifier. To specify an identifier, use the syntax "#<i>num</i>".</param>
    <param name="dwStyle">The style of the window being created. This parameter can be a combination of the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style values</a>, plus the control styles indicated in the Remarks section.</param>
    <param name="X">The initial horizontal position of the window. For an overlapped or pop-up window, the <i>x</i> parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>x</i> is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If <i>x</i> is set to <b>CW_USEDEFAULT</b>, the system selects the default position for the window's upper-left corner and ignores the <i>y</i> parameter. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if it is specified for a pop-up or child window, the <i>x</i> and <i>y</i> parameters are set to zero.</param>
    <param name="Y">
      <para>The initial vertical position of the window. For an overlapped or pop-up window, the <i>y</i> parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>y</i> is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box <i>y</i> is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.</para>
      <para>If an overlapped window is created with the <b>WS_VISIBLE</b> style bit set and the <i>x</i> parameter is set to <b>CW_USEDEFAULT</b>, then the <i>y</i> parameter determines how the window is shown. If the <i>y</i> parameter is <b>CW_USEDEFAULT</b>, then the window manager calls <see cref="ShowWindow" /> with the <b>SW_SHOW</b> flag after the window has been created. If the <i>y</i> parameter is some other value, then the window manager calls <b>ShowWindow</b> with that value as the <i>nCmdShow</i> parameter.</para>
    </param>
    <param name="nWidth">The width, in device units, of the window. For overlapped windows, <i>nWidth</i> is the window's width, in screen coordinates, or <b>CW_USEDEFAULT</b>. If <i>nWidth</i> is <b>CW_USEDEFAULT</b>, the system selects a default width and height for the window; the default width extends from the initial x-coordinates to the right edge of the screen; the default height extends from the initial y-coordinate to the top of the icon area. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if <b>CW_USEDEFAULT</b> is specified for a pop-up or child window, the <i>nWidth</i> and <i>nHeight</i> parameter are set to zero.</param>
    <param name="nHeight">The height, in device units, of the window. For overlapped windows, <i>nHeight</i> is the window's height, in screen coordinates. If the <i>nWidth</i> parameter is set to <b>CW_USEDEFAULT</b>, the system ignores <i>nHeight</i>.</param>
    <param name="hWndParent">
      <para>A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.</para>
      <para>To create a <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">message-only window</a>, supply <b>HWND_MESSAGE</b> or a handle to an existing message-only window.</para>
    </param>
    <param name="hMenu">A handle to a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, <i>hMenu</i> identifies the menu to be used with the window; it can be <b>NULL</b> if the class menu is to be used. For a child window, <i>hMenu</i> specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.</param>
    <param name="hInstance">A handle to the instance of the module to be associated with the window.</param>
    <param name="lpParam">
      <para>Pointer to a value to be passed to the window through the <see cref="CREATESTRUCT" /> structure (<b>lpCreateParams</b> member) pointed to by the <i>lParam</i> param of the <b>WM_CREATE</b> message. This message is sent to the created window by this function before it returns.</para>
      <para>If an application calls <see cref="CreateWindow" /> to create a MDI client window, <i>lpParam</i> should point to a <see cref="CLIENTCREATESTRUCT" /> structure. If an MDI client window calls <b>CreateWindow</b> to create an MDI child window, <i>lpParam</i> should point to a <see cref="MDICREATESTRUCT" /> structure. <i>lpParam</i> may be <b>NULL</b> if no additional data is needed.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the new window.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>This function typically fails for one of the following reasons:</para>
      <list type="bullet">
        <item>
          <description>an invalid parameter value</description>
        </item>
        <item>
          <description>the system class was registered by a different module</description>
        </item>
        <item>
          <description>The <b>WH_CBT</b> hook is installed and returns a failure code</description>
        </item>
        <item>
          <description>if one of the controls in the dialog template is not registered, or its window window procedure fails <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-create">WM_CREATE</a> or <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-nccreate">WM_NCCREATE</a></description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.CreateWindowStation">
    <summary>Creates a window station object, associates it with the calling process, and assigns it to the current session.</summary>
    <param name="lpwinsta">The name of the window station to be created. Window station names are case-insensitive and cannot contain backslash characters (\). Only members of the Administrators group are allowed to specify a name. If <i>lpwinsta</i> is <b>NULL</b> or an empty string, the system forms a window station name using the logon session identifier for the calling process. To get this name, call the<see cref="GetUserObjectInformation" /> function.</param>
    <param name="dwFlags">
      <para>If this parameter is <b>CWF_CREATE_ONLY</b> and the window station already exists, the call fails. If this flag is not specified and the window station already exists, the function succeeds and returns a new handle to the existing window station.</para>
      <para>
        <b>Windows XP/2000:  </b>This parameter is reserved and must be zero.</para>
    </param>
    <param name="dwDesiredAccess">The type of access the returned handle has to the window station. In addition, you can specify any of the standard access rights, such as <b>READ_CONTROL</b> or <b>WRITE_DAC</b>, and a combination of the window station-specific access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/winstation/window-station-security-and-access-rights">Window Station Security and Access Rights</a>.</param>
    <param name="lpsa">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpsa</i> is <b>NULL</b>, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new window station. If <i>lpsa</i> is <b>NULL</b>, the window station (and any desktops created within the window) gets a security descriptor that grants <b>GENERIC_ALL</b> access to all users.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created window station. If the specified window station already exists, the function succeeds and returns a handle to the existing window station.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateWindowStationA">
    <summary>Creates a window station object, associates it with the calling process, and assigns it to the current session.</summary>
    <param name="lpwinsta">The name of the window station to be created. Window station names are case-insensitive and cannot contain backslash characters (\). Only members of the Administrators group are allowed to specify a name. If <i>lpwinsta</i> is <b>NULL</b> or an empty string, the system forms a window station name using the logon session identifier for the calling process. To get this name, call the<see cref="GetUserObjectInformation" /> function.</param>
    <param name="dwFlags">
      <para>If this parameter is <b>CWF_CREATE_ONLY</b> and the window station already exists, the call fails. If this flag is not specified and the window station already exists, the function succeeds and returns a new handle to the existing window station.</para>
      <para>
        <b>Windows XP/2000:  </b>This parameter is reserved and must be zero.</para>
    </param>
    <param name="dwDesiredAccess">The type of access the returned handle has to the window station. In addition, you can specify any of the standard access rights, such as <b>READ_CONTROL</b> or <b>WRITE_DAC</b>, and a combination of the window station-specific access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/winstation/window-station-security-and-access-rights">Window Station Security and Access Rights</a>.</param>
    <param name="lpsa">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpsa</i> is <b>NULL</b>, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new window station. If <i>lpsa</i> is <b>NULL</b>, the window station (and any desktops created within the window) gets a security descriptor that grants <b>GENERIC_ALL</b> access to all users.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created window station. If the specified window station already exists, the function succeeds and returns a handle to the existing window station.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateWindowStationW">
    <summary>Creates a window station object, associates it with the calling process, and assigns it to the current session.</summary>
    <param name="lpwinsta">The name of the window station to be created. Window station names are case-insensitive and cannot contain backslash characters (\). Only members of the Administrators group are allowed to specify a name. If <i>lpwinsta</i> is <b>NULL</b> or an empty string, the system forms a window station name using the logon session identifier for the calling process. To get this name, call the<see cref="GetUserObjectInformation" /> function.</param>
    <param name="dwFlags">
      <para>If this parameter is <b>CWF_CREATE_ONLY</b> and the window station already exists, the call fails. If this flag is not specified and the window station already exists, the function succeeds and returns a new handle to the existing window station.</para>
      <para>
        <b>Windows XP/2000:  </b>This parameter is reserved and must be zero.</para>
    </param>
    <param name="dwDesiredAccess">The type of access the returned handle has to the window station. In addition, you can specify any of the standard access rights, such as <b>READ_CONTROL</b> or <b>WRITE_DAC</b>, and a combination of the window station-specific access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/winstation/window-station-security-and-access-rights">Window Station Security and Access Rights</a>.</param>
    <param name="lpsa">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpsa</i> is <b>NULL</b>, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new window station. If <i>lpsa</i> is <b>NULL</b>, the window station (and any desktops created within the window) gets a security descriptor that grants <b>GENERIC_ALL</b> access to all users.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created window station. If the specified window station already exists, the function succeeds and returns a handle to the existing window station.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateWindowStation">
    <summary>Creates a window station object, associates it with the calling process, and assigns it to the current session.</summary>
    <param name="lpwinsta">The name of the window station to be created. Window station names are case-insensitive and cannot contain backslash characters (\). Only members of the Administrators group are allowed to specify a name. If <i>lpwinsta</i> is <b>NULL</b> or an empty string, the system forms a window station name using the logon session identifier for the calling process. To get this name, call the<see cref="GetUserObjectInformation" /> function.</param>
    <param name="dwFlags">
      <para>If this parameter is <b>CWF_CREATE_ONLY</b> and the window station already exists, the call fails. If this flag is not specified and the window station already exists, the function succeeds and returns a new handle to the existing window station.</para>
      <para>
        <b>Windows XP/2000:  </b>This parameter is reserved and must be zero.</para>
    </param>
    <param name="dwDesiredAccess">The type of access the returned handle has to the window station. In addition, you can specify any of the standard access rights, such as <b>READ_CONTROL</b> or <b>WRITE_DAC</b>, and a combination of the window station-specific access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/winstation/window-station-security-and-access-rights">Window Station Security and Access Rights</a>.</param>
    <param name="lpsa">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpsa</i> is <b>NULL</b>, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new window station. If <i>lpsa</i> is <b>NULL</b>, the window station (and any desktops created within the window) gets a security descriptor that grants <b>GENERIC_ALL</b> access to all users.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created window station. If the specified window station already exists, the function succeeds and returns a handle to the existing window station.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateWindowStationA">
    <summary>Creates a window station object, associates it with the calling process, and assigns it to the current session.</summary>
    <param name="lpwinsta">The name of the window station to be created. Window station names are case-insensitive and cannot contain backslash characters (\). Only members of the Administrators group are allowed to specify a name. If <i>lpwinsta</i> is <b>NULL</b> or an empty string, the system forms a window station name using the logon session identifier for the calling process. To get this name, call the<see cref="GetUserObjectInformation" /> function.</param>
    <param name="dwFlags">
      <para>If this parameter is <b>CWF_CREATE_ONLY</b> and the window station already exists, the call fails. If this flag is not specified and the window station already exists, the function succeeds and returns a new handle to the existing window station.</para>
      <para>
        <b>Windows XP/2000:  </b>This parameter is reserved and must be zero.</para>
    </param>
    <param name="dwDesiredAccess">The type of access the returned handle has to the window station. In addition, you can specify any of the standard access rights, such as <b>READ_CONTROL</b> or <b>WRITE_DAC</b>, and a combination of the window station-specific access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/winstation/window-station-security-and-access-rights">Window Station Security and Access Rights</a>.</param>
    <param name="lpsa">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpsa</i> is <b>NULL</b>, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new window station. If <i>lpsa</i> is <b>NULL</b>, the window station (and any desktops created within the window) gets a security descriptor that grants <b>GENERIC_ALL</b> access to all users.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created window station. If the specified window station already exists, the function succeeds and returns a handle to the existing window station.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateWindowStationW">
    <summary>Creates a window station object, associates it with the calling process, and assigns it to the current session.</summary>
    <param name="lpwinsta">The name of the window station to be created. Window station names are case-insensitive and cannot contain backslash characters (\). Only members of the Administrators group are allowed to specify a name. If <i>lpwinsta</i> is <b>NULL</b> or an empty string, the system forms a window station name using the logon session identifier for the calling process. To get this name, call the<see cref="GetUserObjectInformation" /> function.</param>
    <param name="dwFlags">
      <para>If this parameter is <b>CWF_CREATE_ONLY</b> and the window station already exists, the call fails. If this flag is not specified and the window station already exists, the function succeeds and returns a new handle to the existing window station.</para>
      <para>
        <b>Windows XP/2000:  </b>This parameter is reserved and must be zero.</para>
    </param>
    <param name="dwDesiredAccess">The type of access the returned handle has to the window station. In addition, you can specify any of the standard access rights, such as <b>READ_CONTROL</b> or <b>WRITE_DAC</b>, and a combination of the window station-specific access rights. For more information, see <a href="https://docs.microsoft.com//windows/desktop/winstation/window-station-security-and-access-rights">Window Station Security and Access Rights</a>.</param>
    <param name="lpsa">
      <para>A pointer to a<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that determines whether the returned handle can be inherited by child processes. If <i>lpsa</i> is <b>NULL</b>, the handle cannot be inherited.</para>
      <para>The <b>lpSecurityDescriptor</b> member of the structure specifies a security descriptor for the new window station. If <i>lpsa</i> is <b>NULL</b>, the window station (and any desktops created within the window) gets a security descriptor that grants <b>GENERIC_ALL</b> access to all users.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly created window station. If the specified window station already exists, the function succeeds and returns a handle to the existing window station.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.CreateWindow">
    <summary>
      <para>Creates an overlapped, pop-up, or child window. It specifies the window class, window title, window style, and (optionally) the initial position and size of the window. The function also specifies the window's parent or owner, if any, and the window's menu.</para>
      <para>To use extended window styles in addition to the styles supported by <b>CreateWindow</b>, use the <see cref="CreateWindowEx" /> function.</para>
    </summary>
    <param name="lpClassName">A <b>null</b>-terminated string or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero. If <i>lpClassName</i> is a string, it specifies the window class name. The class name can be any name registered with <b>RegisterClass</b> or <b>RegisterClassEx</b>, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined system class names. For a list of system class names, see the Remarks section.</param>
    <param name="lpWindowName">The window name. If the window style specifies a title bar, the window title pointed to by <i>lpWindowName</i> is displayed in the title bar. When using <b>CreateWindow</b> to create controls, such as buttons, check boxes, and static controls, use <i>lpWindowName</i> to specify the text of the control. When creating a static control with the <b>SS_ICON</b> style, use <i>lpWindowName</i> to specify the icon name or identifier. To specify an identifier, use the syntax "#<i>num</i>".</param>
    <param name="dwStyle">The style of the window being created. This parameter can be a combination of the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style values</a>, plus the control styles indicated in the Remarks section.</param>
    <param name="x">The initial horizontal position of the window. For an overlapped or pop-up window, the <i>x</i> parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>x</i> is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If this parameter is set to <b>CW_USEDEFAULT</b>, the system selects the default position for the window's upper-left corner and ignores the <i>y</i> parameter. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if it is specified for a pop-up or child window, the <i>x</i> and <i>y</i> parameters are set to zero.</param>
    <param name="y">
      <para>The initial vertical position of the window. For an overlapped or pop-up window, the <i>y</i> parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>y</i> is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box, <i>y</i> is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.</para>
      <para>If an overlapped window is created with the <b>WS_VISIBLE</b> style bit set and the <i>x</i> parameter is set to <b>CW_USEDEFAULT</b>, then the <i>y</i> parameter determines how the window is shown. If the <i>y</i> parameter is <b>CW_USEDEFAULT</b>, then the window manager calls <see cref="ShowWindow" /> with the <b>SW_SHOW</b> flag after the window has been created. If the <i>y</i> parameter is some other value, then the window manager calls <b>ShowWindow</b> with that value as the <i>nCmdShow</i> parameter.</para>
    </param>
    <param name="nWidth">The width, in device units, of the window. For overlapped windows, <i>nWidth</i> is either the window's width, in screen coordinates, or <b>CW_USEDEFAULT</b>. If <i>nWidth</i> is <b>CW_USEDEFAULT</b>, the system selects a default width and height for the window; the default width extends from the initial x-coordinate to the right edge of the screen, and the default height extends from the initial y-coordinate to the top of the icon area. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if <b>CW_USEDEFAULT</b> is specified for a pop-up or child window, <i>nWidth</i> and <i>nHeight</i> are set to zero.</param>
    <param name="nHeight">The height, in device units, of the window. For overlapped windows, <i>nHeight</i> is the window's height, in screen coordinates. If <i>nWidth</i> is set to <b>CW_USEDEFAULT</b>, the system ignores <i>nHeight</i>.</param>
    <param name="hWndParent">
      <para>A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.</para>
      <para>To create a <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">message-only window</a>, supply <b>HWND_MESSAGE</b> or a handle to an existing message-only window.</para>
    </param>
    <param name="hMenu">A handle to a menu, or specifies a child-window identifier depending on the window style. For an overlapped or pop-up window, <i>hMenu</i> identifies the menu to be used with the window; it can be <b>NULL</b> if the class menu is to be used. For a child window, <i>hMenu</i> specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.</param>
    <param name="hInstance">A handle to the instance of the module to be associated with the window.</param>
    <param name="lpParam">
      <para>A pointer to a value to be passed to the window through the <see cref="CREATESTRUCT" /> structure (<b>lpCreateParams</b> member) pointed to by the <i>lParam</i> param of the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-create">WM_CREATE</a> message. This message is sent to the created window by this function before it returns.</para>
      <para>If an application calls <b>CreateWindow</b> to create a MDI client window, <i>lpParam</i> should point to a <see cref="CLIENTCREATESTRUCT" /> structure. If an MDI client window calls <b>CreateWindow</b> to create an MDI child window, <i>lpParam</i> should point to a <see cref="MDICREATESTRUCT" /> structure. <i>lpParam</i> may be <b>NULL</b> if no additional data is needed.</para>
    </param>
  </member>
  <member name="Windows.CreateWindowA">
    <summary>
      <para>Creates an overlapped, pop-up, or child window. It specifies the window class, window title, window style, and (optionally) the initial position and size of the window. The function also specifies the window's parent or owner, if any, and the window's menu.</para>
      <para>To use extended window styles in addition to the styles supported by <b>CreateWindow</b>, use the <see cref="CreateWindowEx" /> function.</para>
    </summary>
    <param name="lpClassName">A <b>null</b>-terminated string or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero. If <i>lpClassName</i> is a string, it specifies the window class name. The class name can be any name registered with <b>RegisterClass</b> or <b>RegisterClassEx</b>, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined system class names. For a list of system class names, see the Remarks section.</param>
    <param name="lpWindowName">The window name. If the window style specifies a title bar, the window title pointed to by <i>lpWindowName</i> is displayed in the title bar. When using <b>CreateWindow</b> to create controls, such as buttons, check boxes, and static controls, use <i>lpWindowName</i> to specify the text of the control. When creating a static control with the <b>SS_ICON</b> style, use <i>lpWindowName</i> to specify the icon name or identifier. To specify an identifier, use the syntax "#<i>num</i>".</param>
    <param name="dwStyle">The style of the window being created. This parameter can be a combination of the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style values</a>, plus the control styles indicated in the Remarks section.</param>
    <param name="x">The initial horizontal position of the window. For an overlapped or pop-up window, the <i>x</i> parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>x</i> is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If this parameter is set to <b>CW_USEDEFAULT</b>, the system selects the default position for the window's upper-left corner and ignores the <i>y</i> parameter. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if it is specified for a pop-up or child window, the <i>x</i> and <i>y</i> parameters are set to zero.</param>
    <param name="y">
      <para>The initial vertical position of the window. For an overlapped or pop-up window, the <i>y</i> parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>y</i> is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box, <i>y</i> is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.</para>
      <para>If an overlapped window is created with the <b>WS_VISIBLE</b> style bit set and the <i>x</i> parameter is set to <b>CW_USEDEFAULT</b>, then the <i>y</i> parameter determines how the window is shown. If the <i>y</i> parameter is <b>CW_USEDEFAULT</b>, then the window manager calls <see cref="ShowWindow" /> with the <b>SW_SHOW</b> flag after the window has been created. If the <i>y</i> parameter is some other value, then the window manager calls <b>ShowWindow</b> with that value as the <i>nCmdShow</i> parameter.</para>
    </param>
    <param name="nWidth">The width, in device units, of the window. For overlapped windows, <i>nWidth</i> is either the window's width, in screen coordinates, or <b>CW_USEDEFAULT</b>. If <i>nWidth</i> is <b>CW_USEDEFAULT</b>, the system selects a default width and height for the window; the default width extends from the initial x-coordinate to the right edge of the screen, and the default height extends from the initial y-coordinate to the top of the icon area. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if <b>CW_USEDEFAULT</b> is specified for a pop-up or child window, <i>nWidth</i> and <i>nHeight</i> are set to zero.</param>
    <param name="nHeight">The height, in device units, of the window. For overlapped windows, <i>nHeight</i> is the window's height, in screen coordinates. If <i>nWidth</i> is set to <b>CW_USEDEFAULT</b>, the system ignores <i>nHeight</i>.</param>
    <param name="hWndParent">
      <para>A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.</para>
      <para>To create a <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">message-only window</a>, supply <b>HWND_MESSAGE</b> or a handle to an existing message-only window.</para>
    </param>
    <param name="hMenu">A handle to a menu, or specifies a child-window identifier depending on the window style. For an overlapped or pop-up window, <i>hMenu</i> identifies the menu to be used with the window; it can be <b>NULL</b> if the class menu is to be used. For a child window, <i>hMenu</i> specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.</param>
    <param name="hInstance">A handle to the instance of the module to be associated with the window.</param>
    <param name="lpParam">
      <para>A pointer to a value to be passed to the window through the <see cref="CREATESTRUCT" /> structure (<b>lpCreateParams</b> member) pointed to by the <i>lParam</i> param of the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-create">WM_CREATE</a> message. This message is sent to the created window by this function before it returns.</para>
      <para>If an application calls <b>CreateWindow</b> to create a MDI client window, <i>lpParam</i> should point to a <see cref="CLIENTCREATESTRUCT" /> structure. If an MDI client window calls <b>CreateWindow</b> to create an MDI child window, <i>lpParam</i> should point to a <see cref="MDICREATESTRUCT" /> structure. <i>lpParam</i> may be <b>NULL</b> if no additional data is needed.</para>
    </param>
  </member>
  <member name="Windows.CreateWindowW">
    <summary>
      <para>Creates an overlapped, pop-up, or child window. It specifies the window class, window title, window style, and (optionally) the initial position and size of the window. The function also specifies the window's parent or owner, if any, and the window's menu.</para>
      <para>To use extended window styles in addition to the styles supported by <b>CreateWindow</b>, use the <see cref="CreateWindowEx" /> function.</para>
    </summary>
    <param name="lpClassName">A <b>null</b>-terminated string or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero. If <i>lpClassName</i> is a string, it specifies the window class name. The class name can be any name registered with <b>RegisterClass</b> or <b>RegisterClassEx</b>, provided that the module that registers the class is also the module that creates the window. The class name can also be any of the predefined system class names. For a list of system class names, see the Remarks section.</param>
    <param name="lpWindowName">The window name. If the window style specifies a title bar, the window title pointed to by <i>lpWindowName</i> is displayed in the title bar. When using <b>CreateWindow</b> to create controls, such as buttons, check boxes, and static controls, use <i>lpWindowName</i> to specify the text of the control. When creating a static control with the <b>SS_ICON</b> style, use <i>lpWindowName</i> to specify the icon name or identifier. To specify an identifier, use the syntax "#<i>num</i>".</param>
    <param name="dwStyle">The style of the window being created. This parameter can be a combination of the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style values</a>, plus the control styles indicated in the Remarks section.</param>
    <param name="x">The initial horizontal position of the window. For an overlapped or pop-up window, the <i>x</i> parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>x</i> is the x-coordinate of the upper-left corner of the window relative to the upper-left corner of the parent window's client area. If this parameter is set to <b>CW_USEDEFAULT</b>, the system selects the default position for the window's upper-left corner and ignores the <i>y</i> parameter. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if it is specified for a pop-up or child window, the <i>x</i> and <i>y</i> parameters are set to zero.</param>
    <param name="y">
      <para>The initial vertical position of the window. For an overlapped or pop-up window, the <i>y</i> parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates. For a child window, <i>y</i> is the initial y-coordinate of the upper-left corner of the child window relative to the upper-left corner of the parent window's client area. For a list box, <i>y</i> is the initial y-coordinate of the upper-left corner of the list box's client area relative to the upper-left corner of the parent window's client area.</para>
      <para>If an overlapped window is created with the <b>WS_VISIBLE</b> style bit set and the <i>x</i> parameter is set to <b>CW_USEDEFAULT</b>, then the <i>y</i> parameter determines how the window is shown. If the <i>y</i> parameter is <b>CW_USEDEFAULT</b>, then the window manager calls <see cref="ShowWindow" /> with the <b>SW_SHOW</b> flag after the window has been created. If the <i>y</i> parameter is some other value, then the window manager calls <b>ShowWindow</b> with that value as the <i>nCmdShow</i> parameter.</para>
    </param>
    <param name="nWidth">The width, in device units, of the window. For overlapped windows, <i>nWidth</i> is either the window's width, in screen coordinates, or <b>CW_USEDEFAULT</b>. If <i>nWidth</i> is <b>CW_USEDEFAULT</b>, the system selects a default width and height for the window; the default width extends from the initial x-coordinate to the right edge of the screen, and the default height extends from the initial y-coordinate to the top of the icon area. <b>CW_USEDEFAULT</b> is valid only for overlapped windows; if <b>CW_USEDEFAULT</b> is specified for a pop-up or child window, <i>nWidth</i> and <i>nHeight</i> are set to zero.</param>
    <param name="nHeight">The height, in device units, of the window. For overlapped windows, <i>nHeight</i> is the window's height, in screen coordinates. If <i>nWidth</i> is set to <b>CW_USEDEFAULT</b>, the system ignores <i>nHeight</i>.</param>
    <param name="hWndParent">
      <para>A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.</para>
      <para>To create a <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">message-only window</a>, supply <b>HWND_MESSAGE</b> or a handle to an existing message-only window.</para>
    </param>
    <param name="hMenu">A handle to a menu, or specifies a child-window identifier depending on the window style. For an overlapped or pop-up window, <i>hMenu</i> identifies the menu to be used with the window; it can be <b>NULL</b> if the class menu is to be used. For a child window, <i>hMenu</i> specifies the child-window identifier, an integer value used by a dialog box control to notify its parent about events. The application determines the child-window identifier; it must be unique for all child windows with the same parent window.</param>
    <param name="hInstance">A handle to the instance of the module to be associated with the window.</param>
    <param name="lpParam">
      <para>A pointer to a value to be passed to the window through the <see cref="CREATESTRUCT" /> structure (<b>lpCreateParams</b> member) pointed to by the <i>lParam</i> param of the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-create">WM_CREATE</a> message. This message is sent to the created window by this function before it returns.</para>
      <para>If an application calls <b>CreateWindow</b> to create a MDI client window, <i>lpParam</i> should point to a <see cref="CLIENTCREATESTRUCT" /> structure. If an MDI client window calls <b>CreateWindow</b> to create an MDI child window, <i>lpParam</i> should point to a <see cref="MDICREATESTRUCT" /> structure. <i>lpParam</i> may be <b>NULL</b> if no additional data is needed.</para>
    </param>
  </member>
  <member name="Windows.DefDlgProc">
    <summary>Calls the default dialog box window procedure to provide default processing for any window messages that a dialog box with a private window class does not process.</summary>
    <param name="hDlg">A handle to the dialog box.</param>
    <param name="Msg">The message.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message sent.</returns>
  </member>
  <member name="Windows.DefDlgProcA">
    <summary>Calls the default dialog box window procedure to provide default processing for any window messages that a dialog box with a private window class does not process.</summary>
    <param name="hDlg">A handle to the dialog box.</param>
    <param name="Msg">The message.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message sent.</returns>
  </member>
  <member name="Windows.DefDlgProc">
    <summary>Calls the default dialog box window procedure to provide default processing for any window messages that a dialog box with a private window class does not process.</summary>
    <param name="hDlg">A handle to the dialog box.</param>
    <param name="Msg">The message.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message sent.</returns>
  </member>
  <member name="Windows.DefDlgProcW">
    <summary>Calls the default dialog box window procedure to provide default processing for any window messages that a dialog box with a private window class does not process.</summary>
    <param name="hDlg">A handle to the dialog box.</param>
    <param name="Msg">The message.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message sent.</returns>
  </member>
  <member name="Windows.DeferWindowPos">
    <summary>Updates the specified multiple-window – position structure for the specified window. The function then returns a handle to the updated structure. The <see cref="EndDeferWindowPos" /> function uses the information in this structure to change the position and size of a number of windows simultaneously. The <see cref="BeginDeferWindowPos" /> function creates the structure.</summary>
    <param name="hWinPosInfo">A handle to a multiple-window – position structure that contains size and position information for one or more windows. This structure is returned by <see cref="BeginDeferWindowPos" /> or by the most recent call to <b>DeferWindowPos</b>.</param>
    <param name="hWnd">A handle to the window for which update information is stored in the structure. All windows in a multiple-window – position structure must have the same parent.</param>
    <param name="hWndInsertAfter">
      <para>A handle to the window that precedes the positioned window in the Z order. This parameter must be a window handle or one of the following values. This parameter is ignored if the <b>SWP_NOZORDER</b> flag is set in the <i>uFlags</i> parameter.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HWND_BOTTOM</b>
                </term>
              </listheader>
              <listheader>
                <term>((HWND)1)</term>
              </listheader>
            </list>
          </description>
          <description>Places the window at the bottom of the Z order. If the <i>hWnd</i> parameter identifies a topmost window, the window loses its topmost status and is placed at the bottom of all other windows.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HWND_NOTOPMOST</b>
                </term>
              </listheader>
              <listheader>
                <term>((HWND)-2)</term>
              </listheader>
            </list>
          </description>
          <description>Places the window above all non-topmost windows (that is, behind all topmost windows). This flag has no effect if the window is already a non-topmost window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HWND_TOP</b>
                </term>
              </listheader>
              <listheader>
                <term>((HWND)0)</term>
              </listheader>
            </list>
          </description>
          <description>Places the window at the top of the Z order.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HWND_TOPMOST</b>
                </term>
              </listheader>
              <listheader>
                <term>((HWND)-1)</term>
              </listheader>
            </list>
          </description>
          <description>Places the window above all non-topmost windows. The window maintains its topmost position even when it is deactivated.</description>
        </listheader>
      </list>
    </param>
    <param name="x">The x-coordinate of the window's upper-left corner.</param>
    <param name="y">The y-coordinate of the window's upper-left corner.</param>
    <param name="cx">The window's new width, in pixels.</param>
    <param name="cy">The window's new height, in pixels.</param>
    <param name="uFlags">
      <para>A combination of the following values that affect the size and position of the window.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_DRAWFRAME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0020</term>
              </listheader>
            </list>
          </description>
          <description>Draws a frame (defined in the window's class description) around the window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_FRAMECHANGED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0020</term>
              </listheader>
            </list>
          </description>
          <description>Sends a <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-nccalcsize">WM_NCCALCSIZE</a> message to the window, even if the window's size is not being changed. If this flag is not specified, <b>WM_NCCALCSIZE</b> is sent only when the window's size is being changed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_HIDEWINDOW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0080</term>
              </listheader>
            </list>
          </description>
          <description>Hides the window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_NOACTIVATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0010</term>
              </listheader>
            </list>
          </description>
          <description>Does not activate the window. If this flag is not set, the window is activated and moved to the top of either the topmost or non-topmost group (depending on the setting of the <i>hWndInsertAfter</i> parameter).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_NOCOPYBITS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0100</term>
              </listheader>
            </list>
          </description>
          <description>Discards the entire contents of the client area. If this flag is not specified, the valid contents of the client area are saved and copied back into the client area after the window is sized or repositioned.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_NOMOVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Retains the current position (ignores the <i>x</i> and <i>y</i> parameters).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_NOOWNERZORDER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0200</term>
              </listheader>
            </list>
          </description>
          <description>Does not change the owner window's position in the Z order.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_NOREDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of the window being moved. When this flag is set, the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_NOREPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0200</term>
              </listheader>
            </list>
          </description>
          <description>Same as the <b>SWP_NOOWNERZORDER</b> flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_NOSENDCHANGING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0400</term>
              </listheader>
            </list>
          </description>
          <description>Prevents the window from receiving the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-windowposchanging">WM_WINDOWPOSCHANGING</a> message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_NOSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Retains the current size (ignores the <i>cx</i> and <i>cy</i> parameters).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_NOZORDER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>Retains the current Z order (ignores the <i>hWndInsertAfter</i> parameter).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_SHOWWINDOW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0040</term>
              </listheader>
            </list>
          </description>
          <description>Displays the window.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>The return value identifies the updated multiple-window – position structure. The handle returned by this function may differ from the handle passed to the function. The new handle that this function returns should be passed during the next call to the <b>DeferWindowPos</b> or <see cref="EndDeferWindowPos" /> function.</para>
      <para>If insufficient system resources are available for the function to succeed, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DefFrameProc">
    <summary>Provides default processing for any window messages that the window procedure of a multiple-document interface (MDI) frame window does not process. All window messages that are not explicitly processed by the window procedure must be passed to the <b>DefFrameProc</b> function, not the <see cref="DefWindowProc" /> function.</summary>
    <param name="hWnd">A handle to the MDI frame window.</param>
    <param name="hWndMDIClient">A handle to the MDI client window.</param>
    <param name="uMsg">The message to be processed.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message. If the <i>hWndMDIClient</i> parameter is <b>NULL</b>, the return value is the same as for the <see cref="DefWindowProc" /> function.</returns>
  </member>
  <member name="Windows.DefFrameProcA">
    <summary>Provides default processing for any window messages that the window procedure of a multiple-document interface (MDI) frame window does not process. All window messages that are not explicitly processed by the window procedure must be passed to the <b>DefFrameProc</b> function, not the <see cref="DefWindowProc" /> function.</summary>
    <param name="hWnd">A handle to the MDI frame window.</param>
    <param name="hWndMDIClient">A handle to the MDI client window.</param>
    <param name="uMsg">The message to be processed.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message. If the <i>hWndMDIClient</i> parameter is <b>NULL</b>, the return value is the same as for the <see cref="DefWindowProc" /> function.</returns>
  </member>
  <member name="Windows.DefFrameProcW">
    <summary>Provides default processing for any window messages that the window procedure of a multiple-document interface (MDI) frame window does not process. All window messages that are not explicitly processed by the window procedure must be passed to the <b>DefFrameProc</b> function, not the <see cref="DefWindowProc" /> function.</summary>
    <param name="hWnd">A handle to the MDI frame window.</param>
    <param name="hWndMDIClient">A handle to the MDI client window.</param>
    <param name="uMsg">The message to be processed.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message. If the <i>hWndMDIClient</i> parameter is <b>NULL</b>, the return value is the same as for the <see cref="DefWindowProc" /> function.</returns>
  </member>
  <member name="Windows.DefFrameProc">
    <summary>Provides default processing for any window messages that the window procedure of a multiple-document interface (MDI) frame window does not process. All window messages that are not explicitly processed by the window procedure must be passed to the <b>DefFrameProc</b> function, not the <see cref="DefWindowProc" /> function.</summary>
    <param name="hWnd">A handle to the MDI frame window.</param>
    <param name="hWndMDIClient">A handle to the MDI client window.</param>
    <param name="uMsg">The message to be processed.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message. If the <i>hWndMDIClient</i> parameter is <b>NULL</b>, the return value is the same as for the <see cref="DefWindowProc" /> function.</returns>
  </member>
  <member name="Windows.DefFrameProcA">
    <summary>Provides default processing for any window messages that the window procedure of a multiple-document interface (MDI) frame window does not process. All window messages that are not explicitly processed by the window procedure must be passed to the <b>DefFrameProc</b> function, not the <see cref="DefWindowProc" /> function.</summary>
    <param name="hWnd">A handle to the MDI frame window.</param>
    <param name="hWndMDIClient">A handle to the MDI client window.</param>
    <param name="uMsg">The message to be processed.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message. If the <i>hWndMDIClient</i> parameter is <b>NULL</b>, the return value is the same as for the <see cref="DefWindowProc" /> function.</returns>
  </member>
  <member name="Windows.DefFrameProcW">
    <summary>Provides default processing for any window messages that the window procedure of a multiple-document interface (MDI) frame window does not process. All window messages that are not explicitly processed by the window procedure must be passed to the <b>DefFrameProc</b> function, not the <see cref="DefWindowProc" /> function.</summary>
    <param name="hWnd">A handle to the MDI frame window.</param>
    <param name="hWndMDIClient">A handle to the MDI client window.</param>
    <param name="uMsg">The message to be processed.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message. If the <i>hWndMDIClient</i> parameter is <b>NULL</b>, the return value is the same as for the <see cref="DefWindowProc" /> function.</returns>
  </member>
  <member name="Windows.DefMDIChildProc">
    <summary>Provides default processing for any window message that the window procedure of a multiple-document interface (MDI) child window does not process. A window message not processed by the window procedure must be passed to the <b>DefMDIChildProc</b> function, not to the <see cref="DefWindowProc" /> function.</summary>
    <param name="hWnd">A handle to the MDI child window.</param>
    <param name="uMsg">The message to be processed.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message.</returns>
  </member>
  <member name="Windows.DefMDIChildProcA">
    <summary>Provides default processing for any window message that the window procedure of a multiple-document interface (MDI) child window does not process. A window message not processed by the window procedure must be passed to the <b>DefMDIChildProc</b> function, not to the <see cref="DefWindowProc" /> function.</summary>
    <param name="hWnd">A handle to the MDI child window.</param>
    <param name="uMsg">The message to be processed.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message.</returns>
  </member>
  <member name="Windows.DefMDIChildProcW">
    <summary>Provides default processing for any window message that the window procedure of a multiple-document interface (MDI) child window does not process. A window message not processed by the window procedure must be passed to the <b>DefMDIChildProc</b> function, not to the <see cref="DefWindowProc" /> function.</summary>
    <param name="hWnd">A handle to the MDI child window.</param>
    <param name="uMsg">The message to be processed.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message.</returns>
  </member>
  <member name="Windows.DefMDIChildProc">
    <summary>Provides default processing for any window message that the window procedure of a multiple-document interface (MDI) child window does not process. A window message not processed by the window procedure must be passed to the <b>DefMDIChildProc</b> function, not to the <see cref="DefWindowProc" /> function.</summary>
    <param name="hWnd">A handle to the MDI child window.</param>
    <param name="uMsg">The message to be processed.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message.</returns>
  </member>
  <member name="Windows.DefMDIChildProcA">
    <summary>Provides default processing for any window message that the window procedure of a multiple-document interface (MDI) child window does not process. A window message not processed by the window procedure must be passed to the <b>DefMDIChildProc</b> function, not to the <see cref="DefWindowProc" /> function.</summary>
    <param name="hWnd">A handle to the MDI child window.</param>
    <param name="uMsg">The message to be processed.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message.</returns>
  </member>
  <member name="Windows.DefMDIChildProcW">
    <summary>Provides default processing for any window message that the window procedure of a multiple-document interface (MDI) child window does not process. A window message not processed by the window procedure must be passed to the <b>DefMDIChildProc</b> function, not to the <see cref="DefWindowProc" /> function.</summary>
    <param name="hWnd">A handle to the MDI child window.</param>
    <param name="uMsg">The message to be processed.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message.</returns>
  </member>
  <member name="Windows.DefRawInputProc">
    <summary>
      <para>Unlike <see cref="DefWindowProcA" /> and <see cref="DefWindowProcW" />, this function doesn't do any processing.</para>
      <para>
        <b>DefRawInputProc</b> only checks whether <b>cbSizeHeader</b>'s value corresponds to the expected size of <see cref="RAWINPUTHEADER" />.</para>
    </summary>
    <param name="paRawInput">Ignored.</param>
    <param name="nInput">Ignored.</param>
    <param name="cbSizeHeader">The size, in bytes, of the <see cref="RAWINPUTHEADER" /> structure.</param>
    <returns>If successful, the function returns <b>0</b>. Otherwise it returns <b>-1</b>.</returns>
  </member>
  <member name="Windows.DefWindowProc">
    <summary>Calls the default window procedure to provide default processing for any window messages that an application does not process. This function ensures that every message is processed. <b>DefWindowProc</b> is called with the same parameters received by the window procedure.</summary>
    <param name="hWnd">A handle to the window procedure that received the message.</param>
    <param name="Msg">The message.</param>
    <param name="wParam">Additional message information. The content of this parameter depends on the value of the <i>Msg</i> parameter.</param>
    <param name="lParam">Additional message information. The content of this parameter depends on the value of the <i>Msg</i> parameter.</param>
    <returns>The return value is the result of the message processing and depends on the message.</returns>
  </member>
  <member name="Windows.DefWindowProcA">
    <summary>Calls the default window procedure to provide default processing for any window messages that an application does not process. This function ensures that every message is processed. <b>DefWindowProc</b> is called with the same parameters received by the window procedure.</summary>
    <param name="hWnd">A handle to the window procedure that received the message.</param>
    <param name="Msg">The message.</param>
    <param name="wParam">Additional message information. The content of this parameter depends on the value of the <i>Msg</i> parameter.</param>
    <param name="lParam">Additional message information. The content of this parameter depends on the value of the <i>Msg</i> parameter.</param>
    <returns>The return value is the result of the message processing and depends on the message.</returns>
  </member>
  <member name="Windows.DefWindowProcW">
    <summary>Calls the default window procedure to provide default processing for any window messages that an application does not process. This function ensures that every message is processed. <b>DefWindowProc</b> is called with the same parameters received by the window procedure.</summary>
    <param name="hWnd">A handle to the window procedure that received the message.</param>
    <param name="Msg">The message.</param>
    <param name="wParam">Additional message information. The content of this parameter depends on the value of the <i>Msg</i> parameter.</param>
    <param name="lParam">Additional message information. The content of this parameter depends on the value of the <i>Msg</i> parameter.</param>
    <returns>The return value is the result of the message processing and depends on the message.</returns>
  </member>
  <member name="Windows.DefWindowProc">
    <summary>Calls the default window procedure to provide default processing for any window messages that an application does not process. This function ensures that every message is processed. <b>DefWindowProc</b> is called with the same parameters received by the window procedure.</summary>
    <param name="hWnd">A handle to the window procedure that received the message.</param>
    <param name="Msg">The message.</param>
    <param name="wParam">Additional message information. The content of this parameter depends on the value of the <i>Msg</i> parameter.</param>
    <param name="lParam">Additional message information. The content of this parameter depends on the value of the <i>Msg</i> parameter.</param>
    <returns>The return value is the result of the message processing and depends on the message.</returns>
  </member>
  <member name="Windows.DefWindowProcA">
    <summary>Calls the default window procedure to provide default processing for any window messages that an application does not process. This function ensures that every message is processed. <b>DefWindowProc</b> is called with the same parameters received by the window procedure.</summary>
    <param name="hWnd">A handle to the window procedure that received the message.</param>
    <param name="Msg">The message.</param>
    <param name="wParam">Additional message information. The content of this parameter depends on the value of the <i>Msg</i> parameter.</param>
    <param name="lParam">Additional message information. The content of this parameter depends on the value of the <i>Msg</i> parameter.</param>
    <returns>The return value is the result of the message processing and depends on the message.</returns>
  </member>
  <member name="Windows.DefWindowProcW">
    <summary>Calls the default window procedure to provide default processing for any window messages that an application does not process. This function ensures that every message is processed. <b>DefWindowProc</b> is called with the same parameters received by the window procedure.</summary>
    <param name="hWnd">A handle to the window procedure that received the message.</param>
    <param name="Msg">The message.</param>
    <param name="wParam">Additional message information. The content of this parameter depends on the value of the <i>Msg</i> parameter.</param>
    <param name="lParam">Additional message information. The content of this parameter depends on the value of the <i>Msg</i> parameter.</param>
    <returns>The return value is the result of the message processing and depends on the message.</returns>
  </member>
  <member name="Windows.DeleteMenu">
    <summary>Deletes an item from the specified menu. If the menu item opens a menu or submenu, this function destroys the handle to the menu or submenu and frees the memory used by the menu or submenu.</summary>
    <param name="hMenu">A handle to the menu to be changed.</param>
    <param name="uPosition">The menu item to be deleted, as determined by the <i>uFlags</i> parameter.</param>
    <param name="uFlags">
      <para>Indicates how the <i>uPosition</i> parameter is interpreted. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uPosition</i> gives the identifier of the menu item. The <b>MF_BYCOMMAND</b> flag is the default flag if neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uPosition</i> gives the zero-based relative position of the menu item.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DestroyAcceleratorTable">
    <summary>Destroys an accelerator table.</summary>
    <param name="hAccel">A handle to the accelerator table to be destroyed. This handle must have been created by a call to the <see cref="CreateAcceleratorTable" /> or <see cref="LoadAccelerators" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero. However, if the table has been loaded more than one call to <see cref="LoadAccelerators" />, the function will return a nonzero value only when <b>DestroyAcceleratorTable</b> has been called an equal number of times.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DestroyCaret">
    <summary>Destroys the caret's current shape, frees the caret from the window, and removes the caret from the screen.</summary>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DestroyCursor">
    <summary>Destroys a cursor and frees any memory the cursor occupied. Do not use this function to destroy a shared cursor.</summary>
    <param name="hCursor">A handle to the cursor to be destroyed. The cursor must not be in use.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DestroyIcon">
    <summary>Destroys an icon and frees any memory the icon occupied.</summary>
    <param name="hIcon">A handle to the icon to be destroyed. The icon must not be in use.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DestroyMenu">
    <summary>Destroys the specified menu and frees any memory that the menu occupies.</summary>
    <param name="hMenu">A handle to the menu to be destroyed.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DestroySyntheticPointerDevice">
    <summary>Destroys the specified pointer injection device.</summary>
    <param name="device">A handle to the pointer injection device.</param>
  </member>
  <member name="Windows.DestroyWindow">
    <summary>
      <para>Destroys the specified window. The function sends <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-destroy">WM_DESTROY</a> and <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-ncdestroy">WM_NCDESTROY</a> messages to the window to deactivate it and remove the keyboard focus from it. The function also destroys the window's menu, flushes the thread message queue, destroys timers, removes clipboard ownership, and breaks the clipboard viewer chain (if the window is at the top of the viewer chain).</para>
      <para>If the specified window is a parent or owner window, <b>DestroyWindow</b> automatically destroys the associated child or owned windows when it destroys the parent or owner window. The function first destroys child or owned windows, and then it destroys the parent or owner window.</para>
      <para>
        <b>DestroyWindow</b> also destroys modeless dialog boxes created by the <see cref="CreateDialog" /> function.</para>
    </summary>
    <param name="hWnd">A handle to the window to be destroyed.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DialogBox">
    <summary>
      <para>Creates a modal dialog box from a dialog box template resource. <b>DialogBox</b> does not return control until the specified callback function terminates the modal dialog box by calling the <see cref="EndDialog" /> function.</para>
      <para>
        <b>DialogBox</b> is implemented as a call to the <see cref="DialogBoxParam" /> function.</para>
    </summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplate">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.DialogBoxA">
    <summary>
      <para>Creates a modal dialog box from a dialog box template resource. <b>DialogBox</b> does not return control until the specified callback function terminates the modal dialog box by calling the <see cref="EndDialog" /> function.</para>
      <para>
        <b>DialogBox</b> is implemented as a call to the <see cref="DialogBoxParam" /> function.</para>
    </summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplate">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.DialogBoxW">
    <summary>
      <para>Creates a modal dialog box from a dialog box template resource. <b>DialogBox</b> does not return control until the specified callback function terminates the modal dialog box by calling the <see cref="EndDialog" /> function.</para>
      <para>
        <b>DialogBox</b> is implemented as a call to the <see cref="DialogBoxParam" /> function.</para>
    </summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplate">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.DialogBoxIndirect">
    <summary>
      <para>Creates a modal dialog box from a dialog box template in memory. <b>DialogBoxIndirect</b> does not return control until the specified callback function terminates the modal dialog box by calling the <see cref="EndDialog" /> function.</para>
      <para>
        <b>DialogBoxIndirect</b> is implemented as a call to the <see cref="DialogBoxIndirectParam" /> function.</para>
    </summary>
    <param name="hInstance">A handle to the module that creates the dialog box.</param>
    <param name="lpTemplate">
      <para>The template that <b>DialogBoxIndirect</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template for a dialog box, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended template for a dialog box, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.DialogBoxIndirectA">
    <summary>
      <para>Creates a modal dialog box from a dialog box template in memory. <b>DialogBoxIndirect</b> does not return control until the specified callback function terminates the modal dialog box by calling the <see cref="EndDialog" /> function.</para>
      <para>
        <b>DialogBoxIndirect</b> is implemented as a call to the <see cref="DialogBoxIndirectParam" /> function.</para>
    </summary>
    <param name="hInstance">A handle to the module that creates the dialog box.</param>
    <param name="lpTemplate">
      <para>The template that <b>DialogBoxIndirect</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template for a dialog box, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended template for a dialog box, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.DialogBoxIndirectW">
    <summary>
      <para>Creates a modal dialog box from a dialog box template in memory. <b>DialogBoxIndirect</b> does not return control until the specified callback function terminates the modal dialog box by calling the <see cref="EndDialog" /> function.</para>
      <para>
        <b>DialogBoxIndirect</b> is implemented as a call to the <see cref="DialogBoxIndirectParam" /> function.</para>
    </summary>
    <param name="hInstance">A handle to the module that creates the dialog box.</param>
    <param name="lpTemplate">
      <para>The template that <b>DialogBoxIndirect</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template for a dialog box, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended template for a dialog box, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.DialogBoxIndirectParam">
    <summary>Creates a modal dialog box from a dialog box template in memory. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module that creates the dialog box.</param>
    <param name="hDialogTemplate">
      <para>The template that <b>DialogBoxIndirectParam</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template for a dialog box, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended template for a dialog box, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to pass to the dialog box in the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the <i>nResult</i> parameter specified in the call to the <see cref="EndDialog" /> function that was used to terminate the dialog box.</para>
      <para>If the function fails because the <i>hWndParent</i> parameter is invalid, the return value is zero. The function returns zero in this case for compatibility with previous versions of Windows. If the function fails for any other reason, the return value is –1. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DialogBoxIndirectParamA">
    <summary>Creates a modal dialog box from a dialog box template in memory. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module that creates the dialog box.</param>
    <param name="hDialogTemplate">
      <para>The template that <b>DialogBoxIndirectParam</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template for a dialog box, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended template for a dialog box, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to pass to the dialog box in the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the <i>nResult</i> parameter specified in the call to the <see cref="EndDialog" /> function that was used to terminate the dialog box.</para>
      <para>If the function fails because the <i>hWndParent</i> parameter is invalid, the return value is zero. The function returns zero in this case for compatibility with previous versions of Windows. If the function fails for any other reason, the return value is –1. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DialogBoxIndirectParamW">
    <summary>Creates a modal dialog box from a dialog box template in memory. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module that creates the dialog box.</param>
    <param name="hDialogTemplate">
      <para>The template that <b>DialogBoxIndirectParam</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template for a dialog box, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended template for a dialog box, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to pass to the dialog box in the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the <i>nResult</i> parameter specified in the call to the <see cref="EndDialog" /> function that was used to terminate the dialog box.</para>
      <para>If the function fails because the <i>hWndParent</i> parameter is invalid, the return value is zero. The function returns zero in this case for compatibility with previous versions of Windows. If the function fails for any other reason, the return value is –1. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DialogBoxIndirectParam">
    <summary>Creates a modal dialog box from a dialog box template in memory. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module that creates the dialog box.</param>
    <param name="hDialogTemplate">
      <para>The template that <b>DialogBoxIndirectParam</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template for a dialog box, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended template for a dialog box, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to pass to the dialog box in the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the <i>nResult</i> parameter specified in the call to the <see cref="EndDialog" /> function that was used to terminate the dialog box.</para>
      <para>If the function fails because the <i>hWndParent</i> parameter is invalid, the return value is zero. The function returns zero in this case for compatibility with previous versions of Windows. If the function fails for any other reason, the return value is –1. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DialogBoxIndirectParamA">
    <summary>Creates a modal dialog box from a dialog box template in memory. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module that creates the dialog box.</param>
    <param name="hDialogTemplate">
      <para>The template that <b>DialogBoxIndirectParam</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template for a dialog box, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended template for a dialog box, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to pass to the dialog box in the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the <i>nResult</i> parameter specified in the call to the <see cref="EndDialog" /> function that was used to terminate the dialog box.</para>
      <para>If the function fails because the <i>hWndParent</i> parameter is invalid, the return value is zero. The function returns zero in this case for compatibility with previous versions of Windows. If the function fails for any other reason, the return value is –1. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DialogBoxIndirectParamW">
    <summary>Creates a modal dialog box from a dialog box template in memory. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module that creates the dialog box.</param>
    <param name="hDialogTemplate">
      <para>The template that <b>DialogBoxIndirectParam</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template for a dialog box, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended template for a dialog box, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to pass to the dialog box in the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the <i>nResult</i> parameter specified in the call to the <see cref="EndDialog" /> function that was used to terminate the dialog box.</para>
      <para>If the function fails because the <i>hWndParent</i> parameter is invalid, the return value is zero. The function returns zero in this case for compatibility with previous versions of Windows. If the function fails for any other reason, the return value is –1. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DialogBoxIndirect">
    <summary>
      <para>Creates a modal dialog box from a dialog box template in memory. <b>DialogBoxIndirect</b> does not return control until the specified callback function terminates the modal dialog box by calling the <see cref="EndDialog" /> function.</para>
      <para>
        <b>DialogBoxIndirect</b> is implemented as a call to the <see cref="DialogBoxIndirectParam" /> function.</para>
    </summary>
    <param name="hInstance">A handle to the module that creates the dialog box.</param>
    <param name="lpTemplate">
      <para>The template that <b>DialogBoxIndirect</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template for a dialog box, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended template for a dialog box, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.DialogBoxIndirectA">
    <summary>
      <para>Creates a modal dialog box from a dialog box template in memory. <b>DialogBoxIndirect</b> does not return control until the specified callback function terminates the modal dialog box by calling the <see cref="EndDialog" /> function.</para>
      <para>
        <b>DialogBoxIndirect</b> is implemented as a call to the <see cref="DialogBoxIndirectParam" /> function.</para>
    </summary>
    <param name="hInstance">A handle to the module that creates the dialog box.</param>
    <param name="lpTemplate">
      <para>The template that <b>DialogBoxIndirect</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template for a dialog box, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended template for a dialog box, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.DialogBoxIndirectW">
    <summary>
      <para>Creates a modal dialog box from a dialog box template in memory. <b>DialogBoxIndirect</b> does not return control until the specified callback function terminates the modal dialog box by calling the <see cref="EndDialog" /> function.</para>
      <para>
        <b>DialogBoxIndirect</b> is implemented as a call to the <see cref="DialogBoxIndirectParam" /> function.</para>
    </summary>
    <param name="hInstance">A handle to the module that creates the dialog box.</param>
    <param name="lpTemplate">
      <para>The template that <b>DialogBoxIndirect</b> uses to create the dialog box. A dialog box template consists of a header that describes the dialog box, followed by one or more additional blocks of data that describe each of the controls in the dialog box. The template can use either the standard format or the extended format.</para>
      <para>In a standard template for a dialog box, the header is a <see cref="DLGTEMPLATE" /> structure followed by additional variable-length arrays. The data for each control consists of a <see cref="DLGITEMTEMPLATE" /> structure followed by additional variable-length arrays.</para>
      <para>In an extended template for a dialog box, the header uses the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgtemplateex">DLGTEMPLATEEX</a> format and the control definitions use the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgitemtemplateex">DLGITEMTEMPLATEEX</a> format.</para>
    </param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.DialogBoxParam">
    <summary>Creates a modal dialog box from a dialog box template resource. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplateName">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to pass to the dialog box in the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the value of the <i>nResult</i> parameter specified in the call to the <see cref="EndDialog" /> function used to terminate the dialog box.</para>
      <para>If the function fails because the <i>hWndParent</i> parameter is invalid, the return value is zero. The function returns zero in this case for compatibility with previous versions of Windows. If the function fails for any other reason, the return value is –1. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DialogBoxParamA">
    <summary>Creates a modal dialog box from a dialog box template resource. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplateName">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to pass to the dialog box in the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the value of the <i>nResult</i> parameter specified in the call to the <see cref="EndDialog" /> function used to terminate the dialog box.</para>
      <para>If the function fails because the <i>hWndParent</i> parameter is invalid, the return value is zero. The function returns zero in this case for compatibility with previous versions of Windows. If the function fails for any other reason, the return value is –1. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DialogBoxParamW">
    <summary>Creates a modal dialog box from a dialog box template resource. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplateName">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to pass to the dialog box in the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the value of the <i>nResult</i> parameter specified in the call to the <see cref="EndDialog" /> function used to terminate the dialog box.</para>
      <para>If the function fails because the <i>hWndParent</i> parameter is invalid, the return value is zero. The function returns zero in this case for compatibility with previous versions of Windows. If the function fails for any other reason, the return value is –1. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DialogBoxParam">
    <summary>Creates a modal dialog box from a dialog box template resource. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplateName">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to pass to the dialog box in the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the value of the <i>nResult</i> parameter specified in the call to the <see cref="EndDialog" /> function used to terminate the dialog box.</para>
      <para>If the function fails because the <i>hWndParent</i> parameter is invalid, the return value is zero. The function returns zero in this case for compatibility with previous versions of Windows. If the function fails for any other reason, the return value is –1. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DialogBoxParamA">
    <summary>Creates a modal dialog box from a dialog box template resource. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplateName">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to pass to the dialog box in the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the value of the <i>nResult</i> parameter specified in the call to the <see cref="EndDialog" /> function used to terminate the dialog box.</para>
      <para>If the function fails because the <i>hWndParent</i> parameter is invalid, the return value is zero. The function returns zero in this case for compatibility with previous versions of Windows. If the function fails for any other reason, the return value is –1. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DialogBoxParamW">
    <summary>Creates a modal dialog box from a dialog box template resource. Before displaying the dialog box, the function passes an application-defined value to the dialog box procedure as the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message. An application can use this value to initialize dialog box controls.</summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplateName">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
    <param name="dwInitParam">The value to pass to the dialog box in the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/wm-initdialog">WM_INITDIALOG</a> message.</param>
    <returns>
      <para>If the function succeeds, the return value is the value of the <i>nResult</i> parameter specified in the call to the <see cref="EndDialog" /> function used to terminate the dialog box.</para>
      <para>If the function fails because the <i>hWndParent</i> parameter is invalid, the return value is zero. The function returns zero in this case for compatibility with previous versions of Windows. If the function fails for any other reason, the return value is –1. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DialogBox">
    <summary>
      <para>Creates a modal dialog box from a dialog box template resource. <b>DialogBox</b> does not return control until the specified callback function terminates the modal dialog box by calling the <see cref="EndDialog" /> function.</para>
      <para>
        <b>DialogBox</b> is implemented as a call to the <see cref="DialogBoxParam" /> function.</para>
    </summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplate">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.DialogBoxA">
    <summary>
      <para>Creates a modal dialog box from a dialog box template resource. <b>DialogBox</b> does not return control until the specified callback function terminates the modal dialog box by calling the <see cref="EndDialog" /> function.</para>
      <para>
        <b>DialogBox</b> is implemented as a call to the <see cref="DialogBoxParam" /> function.</para>
    </summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplate">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.DialogBoxW">
    <summary>
      <para>Creates a modal dialog box from a dialog box template resource. <b>DialogBox</b> does not return control until the specified callback function terminates the modal dialog box by calling the <see cref="EndDialog" /> function.</para>
      <para>
        <b>DialogBox</b> is implemented as a call to the <see cref="DialogBoxParam" /> function.</para>
    </summary>
    <param name="hInstance">A handle to the module which contains the dialog box template. If this parameter is NULL, then the current executable is used.</param>
    <param name="lpTemplate">The dialog box template. This parameter is either the pointer to a null-terminated character string that specifies the name of the dialog box template or an integer value that specifies the resource identifier of the dialog box template. If the parameter specifies a resource identifier, its high-order word must be zero and its low-order word must contain the identifier. You can use the <see cref="MAKEINTRESOURCE" /> macro to create this value.</param>
    <param name="hWndParent">A handle to the window that owns the dialog box.</param>
    <param name="lpDialogFunc">A pointer to the dialog box procedure. For more information about the dialog box procedure, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-dlgproc">DialogProc</a>.</param>
  </member>
  <member name="Windows.DisableProcessWindowsGhosting">
    <summary>Disables the window ghosting feature for the calling GUI process. Window ghosting is a Windows Manager feature that lets the user minimize, move, or close the main window of an application that is not responding.</summary>
  </member>
  <member name="Windows.DispatchMessage">
    <summary>Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the <see cref="GetMessage" /> function.</summary>
    <param name="lpMsg">A pointer to a structure that contains the message.</param>
    <returns>The return value specifies the value returned by the window procedure. Although its meaning depends on the message being dispatched, the return value generally is ignored.</returns>
  </member>
  <member name="Windows.DispatchMessageA">
    <summary>Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the <see cref="GetMessage" /> function.</summary>
    <param name="lpMsg">A pointer to a structure that contains the message.</param>
    <returns>The return value specifies the value returned by the window procedure. Although its meaning depends on the message being dispatched, the return value generally is ignored.</returns>
  </member>
  <member name="Windows.DispatchMessageW">
    <summary>Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the <see cref="GetMessage" /> function.</summary>
    <param name="lpMsg">A pointer to a structure that contains the message.</param>
    <returns>The return value specifies the value returned by the window procedure. Although its meaning depends on the message being dispatched, the return value generally is ignored.</returns>
  </member>
  <member name="Windows.DispatchMessage">
    <summary>Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the <see cref="GetMessage" /> function.</summary>
    <param name="lpMsg">A pointer to a structure that contains the message.</param>
    <returns>The return value specifies the value returned by the window procedure. Although its meaning depends on the message being dispatched, the return value generally is ignored.</returns>
  </member>
  <member name="Windows.DispatchMessageA">
    <summary>Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the <see cref="GetMessage" /> function.</summary>
    <param name="lpMsg">A pointer to a structure that contains the message.</param>
    <returns>The return value specifies the value returned by the window procedure. Although its meaning depends on the message being dispatched, the return value generally is ignored.</returns>
  </member>
  <member name="Windows.DispatchMessageW">
    <summary>Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the <see cref="GetMessage" /> function.</summary>
    <param name="lpMsg">A pointer to a structure that contains the message.</param>
    <returns>The return value specifies the value returned by the window procedure. Although its meaning depends on the message being dispatched, the return value generally is ignored.</returns>
  </member>
  <member name="Windows.DispatchMessage">
    <summary>Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the <see cref="GetMessage" /> function.</summary>
    <param name="lpMsg">A pointer to a structure that contains the message.</param>
    <returns>The return value specifies the value returned by the window procedure. Although its meaning depends on the message being dispatched, the return value generally is ignored.</returns>
  </member>
  <member name="Windows.DispatchMessageA">
    <summary>Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the <see cref="GetMessage" /> function.</summary>
    <param name="lpMsg">A pointer to a structure that contains the message.</param>
    <returns>The return value specifies the value returned by the window procedure. Although its meaning depends on the message being dispatched, the return value generally is ignored.</returns>
  </member>
  <member name="Windows.DispatchMessageW">
    <summary>Dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the <see cref="GetMessage" /> function.</summary>
    <param name="lpMsg">A pointer to a structure that contains the message.</param>
    <returns>The return value specifies the value returned by the window procedure. Although its meaning depends on the message being dispatched, the return value generally is ignored.</returns>
  </member>
  <member name="Windows.DisplayConfigGetDeviceInfo">
    <summary>The <b>DisplayConfigGetDeviceInfo</b> function retrieves display configuration information about the device.</summary>
    <param name="requestPacket">A pointer to a <see cref="DISPLAYCONFIG_DEVICE_INFO_HEADER" /> structure. This structure contains information about the request, which includes the packet type in the <b>type</b> member. The type and size of additional data that <b>DisplayConfigGetDeviceInfo</b> returns after the header structure depend on the packet type.</param>
    <returns>
      <para>The function returns one of the following return codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SUCCESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The combination of parameters and flags specified are invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system is not running a graphics driver that was written according to the <a href="https://docs.microsoft.com//windows-hardware/drivers/display/windows-vista-display-driver-model-design-guide">Windows Display Driver Model (WDDM)</a>. The function is only supported on a system with a WDDM driver running.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have access to the console session. This error occurs if the calling process does not have access to the current desktop or is running on a remote session.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The size of the packet that the caller passes is not big enough for the information that the caller requests.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_GEN_FAILURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An unspecified error occurred.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.DisplayConfigSetDeviceInfo">
    <summary>The <b>DisplayConfigSetDeviceInfo</b> function sets the properties of a target.</summary>
    <param name="setPacket">A pointer to a <see cref="DISPLAYCONFIG_DEVICE_INFO_HEADER" /> structure that contains information to set for the device. The type and size of additional data that <b>DisplayConfigSetDeviceInfo</b> uses for the configuration comes after the header structure. This additional data depends on the packet type, as specified by the <b>type</b> member of DISPLAYCONFIG_DEVICE_INFO_HEADER. For example, if the caller wants to change the boot persistence, that caller allocates and fills a <see cref="DISPLAYCONFIG_SET_TARGET_PERSISTENCE" /> structure and passes a pointer to this structure in <i>setPacket</i>. Note that the first member of the DISPLAYCONFIG_SET_TARGET_PERSISTENCE structure is the DISPLAYCONFIG_DEVICE_INFO_HEADER.</param>
    <returns>
      <para>The function returns one of the following return codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SUCCESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The combination of parameters and flags specified are invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system is not running a graphics driver that was written according to the <a href="https://docs.microsoft.com//windows-hardware/drivers/display/windows-vista-display-driver-model-design-guide">Windows Display Driver Model (WDDM)</a>. The function is only supported on a system with a WDDM driver running.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have access to the console session. This error occurs if the calling process does not have access to the current desktop or is running on a remote session.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The size of the packet that the caller passes is not big enough.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_GEN_FAILURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An unspecified error occurred.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.DlgDirListComboBox">
    <summary>Replaces the contents of a combo box with the names of the subdirectories and files in a specified directory. You can filter the list of names by specifying a set of file attributes. The list of names can include mapped drive letters.</summary>
    <param name="hDlg">A handle to the dialog box that contains the combo box.</param>
    <param name="lpPathSpec">
      <para>A pointer to a buffer containing a null-terminated string that specifies an absolute path, relative path, or file name. An absolute path can begin with a drive letter (for example, d:) or a UNC name (for example, \\<i>machinename</i>\<i>sharename</i>).</para>
      <para>The function splits the string into a directory and a file name. The function searches the directory for names that match the file name. If the string does not specify a directory, the function searches the current directory.</para>
      <para>If the string includes a file name, the file name must contain at least one wildcard character (? or <i>). If the string does not include a file name, the function behaves as if you had specified the asterisk wildcard character (</i>) as the file name. All names in the specified directory that match the file name and have the attributes specified by the <i>uFiletype</i> parameter are added to the list displayed in the combo box.</para>
    </param>
    <param name="nIDComboBox">The identifier of a combo box in the <i>hDlg</i> dialog box. If this parameter is zero, <b>DlgDirListComboBox</b> does not try to fill a combo box.</param>
    <param name="nIDStaticPath">The identifier of a static control in the <i>hDlg</i> dialog box. <b>DlgDirListComboBox</b> sets the text of this control to display the current drive and directory. This parameter can be zero if you do not want to display the current drive and directory.</param>
    <param name="uFiletype">
      <para>A set of bit flags that specifies the attributes of the files or directories to be added to the combo box. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_ARCHIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes archived files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_DIRECTORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes subdirectories, which are enclosed in square brackets ([ ]).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_DRIVES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>All mapped drives are added to the list. Drives are listed in the form [-<i>x</i>-], where <i>x</i> is the drive letter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_EXCLUSIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes only files with the specified attributes. By default, read/write files are listed even if DDL_READWRITE is not specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_HIDDEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes hidden files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_READONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes read-only files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_READWRITE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes read/write files with no additional attributes. This is the default setting.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_SYSTEM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes system files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_POSTMSGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, <b>DlgDirListComboBox</b> uses the <see cref="PostMessage" /> function to send messages to the combo box. If this flag is not set, <b>DlgDirListComboBox</b> uses the <see cref="SendMessage" /> function.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. For example, if the string specified by <i>lpPathSpec</i> is not a valid path, the function fails. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DlgDirListComboBoxA">
    <summary>Replaces the contents of a combo box with the names of the subdirectories and files in a specified directory. You can filter the list of names by specifying a set of file attributes. The list of names can include mapped drive letters.</summary>
    <param name="hDlg">A handle to the dialog box that contains the combo box.</param>
    <param name="lpPathSpec">
      <para>A pointer to a buffer containing a null-terminated string that specifies an absolute path, relative path, or file name. An absolute path can begin with a drive letter (for example, d:) or a UNC name (for example, \\<i>machinename</i>\<i>sharename</i>).</para>
      <para>The function splits the string into a directory and a file name. The function searches the directory for names that match the file name. If the string does not specify a directory, the function searches the current directory.</para>
      <para>If the string includes a file name, the file name must contain at least one wildcard character (? or <i>). If the string does not include a file name, the function behaves as if you had specified the asterisk wildcard character (</i>) as the file name. All names in the specified directory that match the file name and have the attributes specified by the <i>uFiletype</i> parameter are added to the list displayed in the combo box.</para>
    </param>
    <param name="nIDComboBox">The identifier of a combo box in the <i>hDlg</i> dialog box. If this parameter is zero, <b>DlgDirListComboBox</b> does not try to fill a combo box.</param>
    <param name="nIDStaticPath">The identifier of a static control in the <i>hDlg</i> dialog box. <b>DlgDirListComboBox</b> sets the text of this control to display the current drive and directory. This parameter can be zero if you do not want to display the current drive and directory.</param>
    <param name="uFiletype">
      <para>A set of bit flags that specifies the attributes of the files or directories to be added to the combo box. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_ARCHIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes archived files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_DIRECTORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes subdirectories, which are enclosed in square brackets ([ ]).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_DRIVES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>All mapped drives are added to the list. Drives are listed in the form [-<i>x</i>-], where <i>x</i> is the drive letter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_EXCLUSIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes only files with the specified attributes. By default, read/write files are listed even if DDL_READWRITE is not specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_HIDDEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes hidden files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_READONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes read-only files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_READWRITE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes read/write files with no additional attributes. This is the default setting.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_SYSTEM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes system files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_POSTMSGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, <b>DlgDirListComboBox</b> uses the <see cref="PostMessage" /> function to send messages to the combo box. If this flag is not set, <b>DlgDirListComboBox</b> uses the <see cref="SendMessage" /> function.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. For example, if the string specified by <i>lpPathSpec</i> is not a valid path, the function fails. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DlgDirListComboBoxW">
    <summary>Replaces the contents of a combo box with the names of the subdirectories and files in a specified directory. You can filter the list of names by specifying a set of file attributes. The list of names can include mapped drive letters.</summary>
    <param name="hDlg">A handle to the dialog box that contains the combo box.</param>
    <param name="lpPathSpec">
      <para>A pointer to a buffer containing a null-terminated string that specifies an absolute path, relative path, or file name. An absolute path can begin with a drive letter (for example, d:) or a UNC name (for example, \\<i>machinename</i>\<i>sharename</i>).</para>
      <para>The function splits the string into a directory and a file name. The function searches the directory for names that match the file name. If the string does not specify a directory, the function searches the current directory.</para>
      <para>If the string includes a file name, the file name must contain at least one wildcard character (? or <i>). If the string does not include a file name, the function behaves as if you had specified the asterisk wildcard character (</i>) as the file name. All names in the specified directory that match the file name and have the attributes specified by the <i>uFiletype</i> parameter are added to the list displayed in the combo box.</para>
    </param>
    <param name="nIDComboBox">The identifier of a combo box in the <i>hDlg</i> dialog box. If this parameter is zero, <b>DlgDirListComboBox</b> does not try to fill a combo box.</param>
    <param name="nIDStaticPath">The identifier of a static control in the <i>hDlg</i> dialog box. <b>DlgDirListComboBox</b> sets the text of this control to display the current drive and directory. This parameter can be zero if you do not want to display the current drive and directory.</param>
    <param name="uFiletype">
      <para>A set of bit flags that specifies the attributes of the files or directories to be added to the combo box. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_ARCHIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes archived files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_DIRECTORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes subdirectories, which are enclosed in square brackets ([ ]).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_DRIVES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>All mapped drives are added to the list. Drives are listed in the form [-<i>x</i>-], where <i>x</i> is the drive letter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_EXCLUSIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes only files with the specified attributes. By default, read/write files are listed even if DDL_READWRITE is not specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_HIDDEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes hidden files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_READONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes read-only files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_READWRITE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes read/write files with no additional attributes. This is the default setting.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_SYSTEM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes system files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_POSTMSGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, <b>DlgDirListComboBox</b> uses the <see cref="PostMessage" /> function to send messages to the combo box. If this flag is not set, <b>DlgDirListComboBox</b> uses the <see cref="SendMessage" /> function.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. For example, if the string specified by <i>lpPathSpec</i> is not a valid path, the function fails. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DlgDirListComboBox">
    <summary>Replaces the contents of a combo box with the names of the subdirectories and files in a specified directory. You can filter the list of names by specifying a set of file attributes. The list of names can include mapped drive letters.</summary>
    <param name="hDlg">A handle to the dialog box that contains the combo box.</param>
    <param name="lpPathSpec">
      <para>A pointer to a buffer containing a null-terminated string that specifies an absolute path, relative path, or file name. An absolute path can begin with a drive letter (for example, d:) or a UNC name (for example, \\<i>machinename</i>\<i>sharename</i>).</para>
      <para>The function splits the string into a directory and a file name. The function searches the directory for names that match the file name. If the string does not specify a directory, the function searches the current directory.</para>
      <para>If the string includes a file name, the file name must contain at least one wildcard character (? or <i>). If the string does not include a file name, the function behaves as if you had specified the asterisk wildcard character (</i>) as the file name. All names in the specified directory that match the file name and have the attributes specified by the <i>uFiletype</i> parameter are added to the list displayed in the combo box.</para>
    </param>
    <param name="nIDComboBox">The identifier of a combo box in the <i>hDlg</i> dialog box. If this parameter is zero, <b>DlgDirListComboBox</b> does not try to fill a combo box.</param>
    <param name="nIDStaticPath">The identifier of a static control in the <i>hDlg</i> dialog box. <b>DlgDirListComboBox</b> sets the text of this control to display the current drive and directory. This parameter can be zero if you do not want to display the current drive and directory.</param>
    <param name="uFiletype">
      <para>A set of bit flags that specifies the attributes of the files or directories to be added to the combo box. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_ARCHIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes archived files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_DIRECTORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes subdirectories, which are enclosed in square brackets ([ ]).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_DRIVES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>All mapped drives are added to the list. Drives are listed in the form [-<i>x</i>-], where <i>x</i> is the drive letter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_EXCLUSIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes only files with the specified attributes. By default, read/write files are listed even if DDL_READWRITE is not specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_HIDDEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes hidden files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_READONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes read-only files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_READWRITE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes read/write files with no additional attributes. This is the default setting.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_SYSTEM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes system files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_POSTMSGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, <b>DlgDirListComboBox</b> uses the <see cref="PostMessage" /> function to send messages to the combo box. If this flag is not set, <b>DlgDirListComboBox</b> uses the <see cref="SendMessage" /> function.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. For example, if the string specified by <i>lpPathSpec</i> is not a valid path, the function fails. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DlgDirListComboBoxA">
    <summary>Replaces the contents of a combo box with the names of the subdirectories and files in a specified directory. You can filter the list of names by specifying a set of file attributes. The list of names can include mapped drive letters.</summary>
    <param name="hDlg">A handle to the dialog box that contains the combo box.</param>
    <param name="lpPathSpec">
      <para>A pointer to a buffer containing a null-terminated string that specifies an absolute path, relative path, or file name. An absolute path can begin with a drive letter (for example, d:) or a UNC name (for example, \\<i>machinename</i>\<i>sharename</i>).</para>
      <para>The function splits the string into a directory and a file name. The function searches the directory for names that match the file name. If the string does not specify a directory, the function searches the current directory.</para>
      <para>If the string includes a file name, the file name must contain at least one wildcard character (? or <i>). If the string does not include a file name, the function behaves as if you had specified the asterisk wildcard character (</i>) as the file name. All names in the specified directory that match the file name and have the attributes specified by the <i>uFiletype</i> parameter are added to the list displayed in the combo box.</para>
    </param>
    <param name="nIDComboBox">The identifier of a combo box in the <i>hDlg</i> dialog box. If this parameter is zero, <b>DlgDirListComboBox</b> does not try to fill a combo box.</param>
    <param name="nIDStaticPath">The identifier of a static control in the <i>hDlg</i> dialog box. <b>DlgDirListComboBox</b> sets the text of this control to display the current drive and directory. This parameter can be zero if you do not want to display the current drive and directory.</param>
    <param name="uFiletype">
      <para>A set of bit flags that specifies the attributes of the files or directories to be added to the combo box. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_ARCHIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes archived files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_DIRECTORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes subdirectories, which are enclosed in square brackets ([ ]).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_DRIVES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>All mapped drives are added to the list. Drives are listed in the form [-<i>x</i>-], where <i>x</i> is the drive letter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_EXCLUSIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes only files with the specified attributes. By default, read/write files are listed even if DDL_READWRITE is not specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_HIDDEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes hidden files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_READONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes read-only files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_READWRITE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes read/write files with no additional attributes. This is the default setting.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_SYSTEM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes system files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_POSTMSGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, <b>DlgDirListComboBox</b> uses the <see cref="PostMessage" /> function to send messages to the combo box. If this flag is not set, <b>DlgDirListComboBox</b> uses the <see cref="SendMessage" /> function.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. For example, if the string specified by <i>lpPathSpec</i> is not a valid path, the function fails. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DlgDirListComboBoxW">
    <summary>Replaces the contents of a combo box with the names of the subdirectories and files in a specified directory. You can filter the list of names by specifying a set of file attributes. The list of names can include mapped drive letters.</summary>
    <param name="hDlg">A handle to the dialog box that contains the combo box.</param>
    <param name="lpPathSpec">
      <para>A pointer to a buffer containing a null-terminated string that specifies an absolute path, relative path, or file name. An absolute path can begin with a drive letter (for example, d:) or a UNC name (for example, \\<i>machinename</i>\<i>sharename</i>).</para>
      <para>The function splits the string into a directory and a file name. The function searches the directory for names that match the file name. If the string does not specify a directory, the function searches the current directory.</para>
      <para>If the string includes a file name, the file name must contain at least one wildcard character (? or <i>). If the string does not include a file name, the function behaves as if you had specified the asterisk wildcard character (</i>) as the file name. All names in the specified directory that match the file name and have the attributes specified by the <i>uFiletype</i> parameter are added to the list displayed in the combo box.</para>
    </param>
    <param name="nIDComboBox">The identifier of a combo box in the <i>hDlg</i> dialog box. If this parameter is zero, <b>DlgDirListComboBox</b> does not try to fill a combo box.</param>
    <param name="nIDStaticPath">The identifier of a static control in the <i>hDlg</i> dialog box. <b>DlgDirListComboBox</b> sets the text of this control to display the current drive and directory. This parameter can be zero if you do not want to display the current drive and directory.</param>
    <param name="uFiletype">
      <para>A set of bit flags that specifies the attributes of the files or directories to be added to the combo box. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_ARCHIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes archived files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_DIRECTORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes subdirectories, which are enclosed in square brackets ([ ]).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_DRIVES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>All mapped drives are added to the list. Drives are listed in the form [-<i>x</i>-], where <i>x</i> is the drive letter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_EXCLUSIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes only files with the specified attributes. By default, read/write files are listed even if DDL_READWRITE is not specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_HIDDEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes hidden files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_READONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes read-only files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_READWRITE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes read/write files with no additional attributes. This is the default setting.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_SYSTEM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes system files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_POSTMSGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If this flag is set, <b>DlgDirListComboBox</b> uses the <see cref="PostMessage" /> function to send messages to the combo box. If this flag is not set, <b>DlgDirListComboBox</b> uses the <see cref="SendMessage" /> function.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. For example, if the string specified by <i>lpPathSpec</i> is not a valid path, the function fails. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DlgDirList">
    <summary>Replaces the contents of a list box with the names of the subdirectories and files in a specified directory. You can filter the list of names by specifying a set of file attributes. The list can optionally include mapped drives.</summary>
    <param name="hDlg">A handle to the dialog box that contains the list box.</param>
    <param name="lpPathSpec">
      <para>A pointer to a buffer containing a null-terminated string that specifies an absolute path, relative path, or filename. An absolute path can begin with a drive letter (for example, d:) or a UNC name (for example, \<i>machinename</i><br /><i>sharename</i>).</para>
      <para>The function splits the string into a directory and a filename. The function searches the directory for names that match the filename. If the string does not specify a directory, the function searches the current directory.</para>
      <para>If the string includes a filename, the filename must contain at least one wildcard character (? or <i>). If the string does not include a filename, the function behaves as if you had specified the asterisk wildcard character (</i>) as the filename. All names in the specified directory that match the filename and have the attributes specified by the<i>uFileType</i> parameter are added to the list box.</para>
    </param>
    <param name="nIDListBox">The identifier of a list box in the<i>hDlg</i> dialog box. If this parameter is zero, <b>DlgDirList</b> does not try to fill a list box.</param>
    <param name="nIDStaticPath">The identifier of a static control in the<i>hDlg</i> dialog box. <b>DlgDirList</b> sets the text of this control to display the current drive and directory. This parameter can be zero if you do not want to display the current drive and directory.</param>
    <param name="uFileType">
      <para>Specifies the attributes of the files or directories to be added to the list box. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_ARCHIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes archived files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_DIRECTORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes subdirectories. Subdirectory names are enclosed in square brackets ([ ]).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_DRIVES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>All mapped drives are added to the list. Drives are listed in the form [- 						<i>x</i>-], where 						<i>x</i> is the drive letter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_EXCLUSIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes only files with the specified attributes. By default, read/write files are listed even if DDL_READWRITE is not specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_HIDDEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes hidden files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_READONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes read-only files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_READWRITE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes read/write files with no additional attributes. This is the default setting.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_SYSTEM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes system files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_POSTMSGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, <b>DlgDirList</b> uses the <see cref="PostMessage" /> function to send messages to the list box. If not set, <b>DlgDirList</b> uses the <see cref="SendMessage" /> function.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. For example, if the string specified by<i>lpPathSpec</i> is not a valid path, the function fails. To get extended error information, call .</para>
    </returns>
  </member>
  <member name="Windows.DlgDirListA">
    <summary>Replaces the contents of a list box with the names of the subdirectories and files in a specified directory. You can filter the list of names by specifying a set of file attributes. The list can optionally include mapped drives.</summary>
    <param name="hDlg">A handle to the dialog box that contains the list box.</param>
    <param name="lpPathSpec">
      <para>A pointer to a buffer containing a null-terminated string that specifies an absolute path, relative path, or filename. An absolute path can begin with a drive letter (for example, d:) or a UNC name (for example, \<i>machinename</i><br /><i>sharename</i>).</para>
      <para>The function splits the string into a directory and a filename. The function searches the directory for names that match the filename. If the string does not specify a directory, the function searches the current directory.</para>
      <para>If the string includes a filename, the filename must contain at least one wildcard character (? or <i>). If the string does not include a filename, the function behaves as if you had specified the asterisk wildcard character (</i>) as the filename. All names in the specified directory that match the filename and have the attributes specified by the<i>uFileType</i> parameter are added to the list box.</para>
    </param>
    <param name="nIDListBox">The identifier of a list box in the<i>hDlg</i> dialog box. If this parameter is zero, <b>DlgDirList</b> does not try to fill a list box.</param>
    <param name="nIDStaticPath">The identifier of a static control in the<i>hDlg</i> dialog box. <b>DlgDirList</b> sets the text of this control to display the current drive and directory. This parameter can be zero if you do not want to display the current drive and directory.</param>
    <param name="uFileType">
      <para>Specifies the attributes of the files or directories to be added to the list box. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_ARCHIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes archived files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_DIRECTORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes subdirectories. Subdirectory names are enclosed in square brackets ([ ]).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_DRIVES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>All mapped drives are added to the list. Drives are listed in the form [- 						<i>x</i>-], where 						<i>x</i> is the drive letter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_EXCLUSIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes only files with the specified attributes. By default, read/write files are listed even if DDL_READWRITE is not specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_HIDDEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes hidden files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_READONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes read-only files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_READWRITE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes read/write files with no additional attributes. This is the default setting.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_SYSTEM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes system files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_POSTMSGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, <b>DlgDirList</b> uses the <see cref="PostMessage" /> function to send messages to the list box. If not set, <b>DlgDirList</b> uses the <see cref="SendMessage" /> function.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. For example, if the string specified by<i>lpPathSpec</i> is not a valid path, the function fails. To get extended error information, call .</para>
    </returns>
  </member>
  <member name="Windows.DlgDirListW">
    <summary>Replaces the contents of a list box with the names of the subdirectories and files in a specified directory. You can filter the list of names by specifying a set of file attributes. The list can optionally include mapped drives.</summary>
    <param name="hDlg">A handle to the dialog box that contains the list box.</param>
    <param name="lpPathSpec">
      <para>A pointer to a buffer containing a null-terminated string that specifies an absolute path, relative path, or filename. An absolute path can begin with a drive letter (for example, d:) or a UNC name (for example, \<i>machinename</i><br /><i>sharename</i>).</para>
      <para>The function splits the string into a directory and a filename. The function searches the directory for names that match the filename. If the string does not specify a directory, the function searches the current directory.</para>
      <para>If the string includes a filename, the filename must contain at least one wildcard character (? or <i>). If the string does not include a filename, the function behaves as if you had specified the asterisk wildcard character (</i>) as the filename. All names in the specified directory that match the filename and have the attributes specified by the<i>uFileType</i> parameter are added to the list box.</para>
    </param>
    <param name="nIDListBox">The identifier of a list box in the<i>hDlg</i> dialog box. If this parameter is zero, <b>DlgDirList</b> does not try to fill a list box.</param>
    <param name="nIDStaticPath">The identifier of a static control in the<i>hDlg</i> dialog box. <b>DlgDirList</b> sets the text of this control to display the current drive and directory. This parameter can be zero if you do not want to display the current drive and directory.</param>
    <param name="uFileType">
      <para>Specifies the attributes of the files or directories to be added to the list box. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_ARCHIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes archived files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_DIRECTORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes subdirectories. Subdirectory names are enclosed in square brackets ([ ]).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_DRIVES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>All mapped drives are added to the list. Drives are listed in the form [- 						<i>x</i>-], where 						<i>x</i> is the drive letter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_EXCLUSIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes only files with the specified attributes. By default, read/write files are listed even if DDL_READWRITE is not specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_HIDDEN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes hidden files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_READONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes read-only files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_READWRITE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes read/write files with no additional attributes. This is the default setting.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_SYSTEM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes system files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DDL_POSTMSGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, <b>DlgDirList</b> uses the <see cref="PostMessage" /> function to send messages to the list box. If not set, <b>DlgDirList</b> uses the <see cref="SendMessage" /> function.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. For example, if the string specified by<i>lpPathSpec</i> is not a valid path, the function fails. To get extended error information, call .</para>
    </returns>
  </member>
  <member name="Windows.DlgDirSelectComboBoxEx">
    <summary>Retrieves the current selection from a combo box filled by using the <see cref="DlgDirListComboBox" /> function. The selection is interpreted as a drive letter, a file, or a directory name.</summary>
    <param name="hwndDlg">A handle to the dialog box that contains the combo box.</param>
    <param name="lpString">A pointer to the buffer that receives the selected path.</param>
    <param name="cchOut">The length, in characters, of the buffer pointed to by the <i>lpString</i> parameter.</param>
    <param name="idComboBox">The integer identifier of the combo box control in the dialog box.</param>
    <returns>
      <para>If the current selection is a directory name, the return value is nonzero.</para>
      <para>If the current selection is not a directory name, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DlgDirSelectComboBoxExA">
    <summary>Retrieves the current selection from a combo box filled by using the <see cref="DlgDirListComboBox" /> function. The selection is interpreted as a drive letter, a file, or a directory name.</summary>
    <param name="hwndDlg">A handle to the dialog box that contains the combo box.</param>
    <param name="lpString">A pointer to the buffer that receives the selected path.</param>
    <param name="cchOut">The length, in characters, of the buffer pointed to by the <i>lpString</i> parameter.</param>
    <param name="idComboBox">The integer identifier of the combo box control in the dialog box.</param>
    <returns>
      <para>If the current selection is a directory name, the return value is nonzero.</para>
      <para>If the current selection is not a directory name, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DlgDirSelectComboBoxExW">
    <summary>Retrieves the current selection from a combo box filled by using the <see cref="DlgDirListComboBox" /> function. The selection is interpreted as a drive letter, a file, or a directory name.</summary>
    <param name="hwndDlg">A handle to the dialog box that contains the combo box.</param>
    <param name="lpString">A pointer to the buffer that receives the selected path.</param>
    <param name="cchOut">The length, in characters, of the buffer pointed to by the <i>lpString</i> parameter.</param>
    <param name="idComboBox">The integer identifier of the combo box control in the dialog box.</param>
    <returns>
      <para>If the current selection is a directory name, the return value is nonzero.</para>
      <para>If the current selection is not a directory name, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DlgDirSelectComboBoxEx">
    <summary>Retrieves the current selection from a combo box filled by using the <see cref="DlgDirListComboBox" /> function. The selection is interpreted as a drive letter, a file, or a directory name.</summary>
    <param name="hwndDlg">A handle to the dialog box that contains the combo box.</param>
    <param name="lpString">A pointer to the buffer that receives the selected path.</param>
    <param name="cchOut">The length, in characters, of the buffer pointed to by the <i>lpString</i> parameter.</param>
    <param name="idComboBox">The integer identifier of the combo box control in the dialog box.</param>
    <returns>
      <para>If the current selection is a directory name, the return value is nonzero.</para>
      <para>If the current selection is not a directory name, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DlgDirSelectComboBoxExA">
    <summary>Retrieves the current selection from a combo box filled by using the <see cref="DlgDirListComboBox" /> function. The selection is interpreted as a drive letter, a file, or a directory name.</summary>
    <param name="hwndDlg">A handle to the dialog box that contains the combo box.</param>
    <param name="lpString">A pointer to the buffer that receives the selected path.</param>
    <param name="cchOut">The length, in characters, of the buffer pointed to by the <i>lpString</i> parameter.</param>
    <param name="idComboBox">The integer identifier of the combo box control in the dialog box.</param>
    <returns>
      <para>If the current selection is a directory name, the return value is nonzero.</para>
      <para>If the current selection is not a directory name, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DlgDirSelectComboBoxExW">
    <summary>Retrieves the current selection from a combo box filled by using the <see cref="DlgDirListComboBox" /> function. The selection is interpreted as a drive letter, a file, or a directory name.</summary>
    <param name="hwndDlg">A handle to the dialog box that contains the combo box.</param>
    <param name="lpString">A pointer to the buffer that receives the selected path.</param>
    <param name="cchOut">The length, in characters, of the buffer pointed to by the <i>lpString</i> parameter.</param>
    <param name="idComboBox">The integer identifier of the combo box control in the dialog box.</param>
    <returns>
      <para>If the current selection is a directory name, the return value is nonzero.</para>
      <para>If the current selection is not a directory name, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DlgDirSelectEx">
    <summary>Retrieves the current selection from a single-selection list box. It assumes that the list box has been filled by the <see cref="DlgDirList" /> function and that the selection is a drive letter, filename, or directory name.</summary>
    <param name="hwndDlg">A handle to the dialog box that contains the list box.</param>
    <param name="lpString">A pointer to a buffer that receives the selected path.</param>
    <param name="chCount">The length, in<b>TCHARs</b>, of the buffer pointed to by<i>lpString</i>.</param>
    <param name="idListBox">The identifier of a list box in the dialog box.</param>
    <returns>
      <para>If the current selection is a directory name, the return value is nonzero.</para>
      <para>If the current selection is not a directory name, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DlgDirSelectExA">
    <summary>Retrieves the current selection from a single-selection list box. It assumes that the list box has been filled by the <see cref="DlgDirList" /> function and that the selection is a drive letter, filename, or directory name.</summary>
    <param name="hwndDlg">A handle to the dialog box that contains the list box.</param>
    <param name="lpString">A pointer to a buffer that receives the selected path.</param>
    <param name="chCount">The length, in<b>TCHARs</b>, of the buffer pointed to by<i>lpString</i>.</param>
    <param name="idListBox">The identifier of a list box in the dialog box.</param>
    <returns>
      <para>If the current selection is a directory name, the return value is nonzero.</para>
      <para>If the current selection is not a directory name, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DlgDirSelectExW">
    <summary>Retrieves the current selection from a single-selection list box. It assumes that the list box has been filled by the <see cref="DlgDirList" /> function and that the selection is a drive letter, filename, or directory name.</summary>
    <param name="hwndDlg">A handle to the dialog box that contains the list box.</param>
    <param name="lpString">A pointer to a buffer that receives the selected path.</param>
    <param name="chCount">The length, in<b>TCHARs</b>, of the buffer pointed to by<i>lpString</i>.</param>
    <param name="idListBox">The identifier of a list box in the dialog box.</param>
    <returns>
      <para>If the current selection is a directory name, the return value is nonzero.</para>
      <para>If the current selection is not a directory name, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DlgDirSelectEx">
    <summary>Retrieves the current selection from a single-selection list box. It assumes that the list box has been filled by the <see cref="DlgDirList" /> function and that the selection is a drive letter, filename, or directory name.</summary>
    <param name="hwndDlg">A handle to the dialog box that contains the list box.</param>
    <param name="lpString">A pointer to a buffer that receives the selected path.</param>
    <param name="chCount">The length, in<b>TCHARs</b>, of the buffer pointed to by<i>lpString</i>.</param>
    <param name="idListBox">The identifier of a list box in the dialog box.</param>
    <returns>
      <para>If the current selection is a directory name, the return value is nonzero.</para>
      <para>If the current selection is not a directory name, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DlgDirSelectExA">
    <summary>Retrieves the current selection from a single-selection list box. It assumes that the list box has been filled by the <see cref="DlgDirList" /> function and that the selection is a drive letter, filename, or directory name.</summary>
    <param name="hwndDlg">A handle to the dialog box that contains the list box.</param>
    <param name="lpString">A pointer to a buffer that receives the selected path.</param>
    <param name="chCount">The length, in<b>TCHARs</b>, of the buffer pointed to by<i>lpString</i>.</param>
    <param name="idListBox">The identifier of a list box in the dialog box.</param>
    <returns>
      <para>If the current selection is a directory name, the return value is nonzero.</para>
      <para>If the current selection is not a directory name, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DlgDirSelectExW">
    <summary>Retrieves the current selection from a single-selection list box. It assumes that the list box has been filled by the <see cref="DlgDirList" /> function and that the selection is a drive letter, filename, or directory name.</summary>
    <param name="hwndDlg">A handle to the dialog box that contains the list box.</param>
    <param name="lpString">A pointer to a buffer that receives the selected path.</param>
    <param name="chCount">The length, in<b>TCHARs</b>, of the buffer pointed to by<i>lpString</i>.</param>
    <param name="idListBox">The identifier of a list box in the dialog box.</param>
    <returns>
      <para>If the current selection is a directory name, the return value is nonzero.</para>
      <para>If the current selection is not a directory name, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DragDetect">
    <summary>Captures the mouse and tracks its movement until the user releases the left button, presses the ESC key, or moves the mouse outside the drag rectangle around the specified point. The width and height of the drag rectangle are specified by the <b>SM_CXDRAG</b> and <b>SM_CYDRAG</b> values returned by the <see cref="GetSystemMetrics" /> function.</summary>
    <param name="hwnd">A handle to the window receiving mouse input.</param>
    <param name="pt">Initial position of the mouse, in screen coordinates. The function determines the coordinates of the drag rectangle by using this point.</param>
    <returns>
      <para>If the user moved the mouse outside of the drag rectangle while holding down the left button, the return value is nonzero.</para>
      <para>If the user did not move the mouse outside of the drag rectangle while holding down the left button, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawAnimatedRects">
    <summary>Animates the caption of a window to indicate the opening of an icon or the minimizing or maximizing of a window.</summary>
    <param name="hwnd">A handle to the window whose caption should be animated on the screen. The animation will be clipped to the parent of this window.</param>
    <param name="idAni">The type of animation. This must be IDANI_CAPTION. With the IDANI_CAPTION animation type, the window caption will animate from the position specified by lprcFrom to the position specified by lprcTo. The effect is similar to minimizing or maximizing a window.</param>
    <param name="lprcFrom">A pointer to a <see cref="RECT" /> structure specifying the location and size of the icon or minimized window. Coordinates are relative to the clipping window <i>hwnd</i>.</param>
    <param name="lprcTo">A pointer to a <see cref="RECT" /> structure specifying the location and size of the restored window. Coordinates are relative to the clipping window <i>hwnd</i>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawCaption">
    <summary>The <b>DrawCaption</b> function draws a window caption.</summary>
    <param name="hwnd">A handle to a window that supplies text and an icon for the window caption.</param>
    <param name="hdc">A handle to a device context. The function draws the window caption into this device context.</param>
    <param name="lprect">A pointer to a <see cref="RECT" /> structure that specifies the bounding rectangle for the window caption in logical coordinates.</param>
    <param name="flags">
      <para>The drawing options. This parameter can be zero or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_ACTIVE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function uses the colors that denote an active caption.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_BUTTONS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, the function draws the buttons in the caption bar (to minimize, restore, or close an application).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_GRADIENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When this flag is set, the function uses COLOR_GRADIENTACTIVECAPTION (if the DC_ACTIVE flag was set) or COLOR_GRADIENTINACTIVECAPTION for the title-bar color.<para>If this flag is not set, the function uses COLOR_ACTIVECAPTION or COLOR_INACTIVECAPTION for both colors.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_ICON</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function draws the icon when drawing the caption text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_INBUTTON</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function draws the caption as a button.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_SMALLCAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function draws a small caption, using the current small caption font.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DC_TEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function draws the caption text when drawing the caption.</description>
        </listheader>
      </list> <para>If DC_SMALLCAP is specified, the function draws a normal window caption.</para></param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawEdge">
    <summary>The <b>DrawEdge</b> function draws one or more edges of rectangle.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="qrc">A pointer to a <see cref="RECT" /> structure that contains the logical coordinates of the rectangle.</param>
    <param name="edge">
      <para>The type of inner and outer edges to draw. This parameter must be a combination of one inner-border flag and one outer-border flag. The inner-border flags are as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BDR_RAISEDINNER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Raised inner edge.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BDR_SUNKENINNER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sunken inner edge.</description>
        </listheader>
      </list> <para>The outer-border flags are as follows.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>BDR_RAISEDOUTER</b></term></listheader></list></description><description>Raised outer edge.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>BDR_SUNKENOUTER</b></term></listheader></list></description><description>Sunken outer edge.</description></listheader></list> <para>Alternatively, the <i>edge</i> parameter can specify one of the following flags.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>EDGE_BUMP</b></term></listheader></list></description><description>Combination of BDR_RAISEDOUTER and BDR_SUNKENINNER.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>EDGE_ETCHED</b></term></listheader></list></description><description>Combination of BDR_SUNKENOUTER and BDR_RAISEDINNER.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>EDGE_RAISED</b></term></listheader></list></description><description>Combination of BDR_RAISEDOUTER and BDR_RAISEDINNER.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>EDGE_SUNKEN</b></term></listheader></list></description><description>Combination of BDR_SUNKENOUTER and BDR_SUNKENINNER.</description></listheader></list></param>
    <param name="grfFlags">
      <para>The type of border. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BF_ADJUST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If this flag is passed, shrink the rectangle pointed to by the <i>qrc</i> parameter to exclude the edges that were drawn.<para>If this flag is not passed, then do not change the rectangle pointed to by the <i>qrc</i> parameter.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BF_BOTTOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Bottom of border rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BF_BOTTOMLEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Bottom and left side of border rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BF_BOTTOMRIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Bottom and right side of border rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BF_DIAGONAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Diagonal border.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BF_DIAGONAL_ENDBOTTOMLEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Diagonal border. The end point is the lower-left corner of the rectangle; the origin is top-right corner.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BF_DIAGONAL_ENDBOTTOMRIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Diagonal border. The end point is the lower-right corner of the rectangle; the origin is top-left corner.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BF_DIAGONAL_ENDTOPLEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Diagonal border. The end point is the top-left corner of the rectangle; the origin is lower-right corner.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BF_DIAGONAL_ENDTOPRIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Diagonal border. The end point is the top-right corner of the rectangle; the origin is lower-left corner.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BF_FLAT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Flat border.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BF_LEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Left side of border rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BF_MIDDLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Interior of rectangle to be filled.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BF_MONO</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One-dimensional border.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BF_RECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Entire border rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BF_RIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Right side of border rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BF_SOFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Soft buttons instead of tiles.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BF_TOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Top of border rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BF_TOPLEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Top and left side of border rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BF_TOPRIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Top and right side of border rectangle.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawFocusRect">
    <summary>The <b>DrawFocusRect</b> function draws a rectangle in the style used to indicate that the rectangle has the focus.</summary>
    <param name="hDC">A handle to the device context.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that specifies the logical coordinates of the rectangle.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawFrameControl">
    <summary>The <b>DrawFrameControl</b> function draws a frame control of the specified type and style.</summary>
    <param name="unnamedParam1">A handle to the device context of the window in which to draw the control.</param>
    <param name="unnamedParam2">A pointer to a <see cref="RECT" /> structure that contains the logical coordinates of the bounding rectangle for frame control.</param>
    <param name="unnamedParam3">
      <para>The type of frame control to draw. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DFC_BUTTON</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Standard button</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DFC_CAPTION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Title bar</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DFC_MENU</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Menu bar</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DFC_POPUPMENU</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Popup menu item.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DFC_SCROLL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Scroll bar</description>
        </listheader>
      </list>
    </param>
    <param name="unnamedParam4">
      <para>The initial state of the frame control. If <i>uType</i> is DFC_BUTTON, <i>uState</i> can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DFCS_BUTTON3STATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Three-state button</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DFCS_BUTTONCHECK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Check box</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DFCS_BUTTONPUSH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Push button</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DFCS_BUTTONRADIO</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Radio button</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DFCS_BUTTONRADIOIMAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Image for radio button (nonsquare needs image)</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DFCS_BUTTONRADIOMASK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Mask for radio button (nonsquare needs mask)</description>
        </listheader>
      </list> <para>If <i>uType</i> is DFC_CAPTION, <i>uState</i> can be one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_CAPTIONCLOSE</b></term></listheader></list></description><description><b>Close</b> button</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_CAPTIONHELP</b></term></listheader></list></description><description><b>Help</b> button</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_CAPTIONMAX</b></term></listheader></list></description><description><b>Maximize</b> button</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_CAPTIONMIN</b></term></listheader></list></description><description><b>Minimize</b> button</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_CAPTIONRESTORE</b></term></listheader></list></description><description><b>Restore</b> button</description></listheader></list> <para>If <i>uType</i> is DFC_MENU, <i>uState</i> can be one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_MENUARROW</b></term></listheader></list></description><description>Submenu arrow</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_MENUARROWRIGHT</b></term></listheader></list></description><description>Submenu arrow pointing left. This is used for the right-to-left cascading menus used with right-to-left languages such as Arabic or Hebrew.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_MENUBULLET</b></term></listheader></list></description><description>Bullet</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_MENUCHECK</b></term></listheader></list></description><description>Check mark</description></listheader></list> <para>If <i>uType</i> is DFC_SCROLL, <i>uState</i> can be one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_SCROLLCOMBOBOX</b></term></listheader></list></description><description>Combo box scroll bar</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_SCROLLDOWN</b></term></listheader></list></description><description>Down arrow of scroll bar</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_SCROLLLEFT</b></term></listheader></list></description><description>Left arrow of scroll bar</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_SCROLLRIGHT</b></term></listheader></list></description><description>Right arrow of scroll bar</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_SCROLLSIZEGRIP</b></term></listheader></list></description><description>Size grip in lower-right corner of window</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_SCROLLSIZEGRIPRIGHT</b></term></listheader></list></description><description>Size grip in lower-left corner of window. This is used with right-to-left languages such as Arabic or Hebrew.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_SCROLLUP</b></term></listheader></list></description><description>Up arrow of scroll bar</description></listheader></list> <para>The following style can be used to adjust the bounding rectangle of the push button.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_ADJUSTRECT</b></term></listheader></list></description><description>Bounding rectangle is adjusted to exclude the surrounding edge of the push button.</description></listheader></list> <para>One or more of the following values can be used to set the state of the control to be drawn.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_CHECKED</b></term></listheader></list></description><description>Button is checked.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_FLAT</b></term></listheader></list></description><description>Button has a flat border.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_HOT</b></term></listheader></list></description><description>Button is hot-tracked.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_INACTIVE</b></term></listheader></list></description><description>Button is inactive (grayed).</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_MONO</b></term></listheader></list></description><description>Button has a monochrome border.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_PUSHED</b></term></listheader></list></description><description>Button is pushed.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DFCS_TRANSPARENT</b></term></listheader></list></description><description>The background remains untouched. This flag can only be combined with DFCS_MENUARROWUP or DFCS_MENUARROWDOWN.</description></listheader></list></param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawIcon">
    <summary>
      <para>Draws an icon or cursor into the specified device context.</para>
      <para>To specify additional drawing options, use the <see cref="DrawIconEx" /> function.</para>
    </summary>
    <param name="hDC">A handle to the device context into which the icon or cursor will be drawn.</param>
    <param name="X">The logical x-coordinate of the upper-left corner of the icon.</param>
    <param name="Y">The logical y-coordinate of the upper-left corner of the icon.</param>
    <param name="hIcon">A handle to the icon to be drawn.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DrawIconEx">
    <summary>Draws an icon or cursor into the specified device context, performing the specified raster operations, and stretching or compressing the icon or cursor as specified.</summary>
    <param name="hdc">A handle to the device context into which the icon or cursor will be drawn.</param>
    <param name="xLeft">The logical x-coordinate of the upper-left corner of the icon or cursor.</param>
    <param name="yTop">The logical y-coordinate of the upper-left corner of the icon or cursor.</param>
    <param name="hIcon">A handle to the icon or cursor to be drawn. This parameter can identify an animated cursor.</param>
    <param name="cxWidth">The logical width of the icon or cursor. If this parameter is zero and the <i>diFlags</i> parameter is <b>DI_DEFAULTSIZE</b>, the function uses the <b>SM_CXICON</b> system metric value to set the width. If this parameter is zero and <b>DI_DEFAULTSIZE</b> is not used, the function uses the actual resource width.</param>
    <param name="cyWidth">The logical height of the icon or cursor. If this parameter is zero and the <i>diFlags</i> parameter is <b>DI_DEFAULTSIZE</b>, the function uses the <b>SM_CYICON</b> system metric value to set the width. If this parameter is zero and <b>DI_DEFAULTSIZE</b> is not used, the function uses the actual resource height.</param>
    <param name="istepIfAniCur">The index of the frame to draw, if <i>hIcon</i> identifies an animated cursor. This parameter is ignored if <i>hIcon</i> does not identify an animated cursor.</param>
    <param name="hbrFlickerFreeDraw">A handle to a brush that the system uses for flicker-free drawing. If <i>hbrFlickerFreeDraw</i> is a valid brush handle, the system creates an offscreen bitmap using the specified brush for the background color, draws the icon or cursor into the bitmap, and then copies the bitmap into the device context identified by <i>hdc</i>. If <i>hbrFlickerFreeDraw</i> is <b>NULL</b>, the system draws the icon or cursor directly into the device context.</param>
    <param name="diFlags">
      <para>The drawing flags. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DI_COMPAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description> This flag is ignored.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DI_DEFAULTSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Draws the icon or cursor using the width and height specified by the system metric values for icons, if the <i>cxWidth</i> and <i>cyWidth</i> parameters are set to zero. If this flag is not specified and <i>cxWidth</i> and <i>cyWidth</i> are set to zero, the function uses the actual resource size.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DI_IMAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Draws the icon or cursor using the image. See Remarks.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DI_MASK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Draws the icon or cursor using the mask. See Remarks.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DI_NOMIRROR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0010</term>
              </listheader>
            </list>
          </description>
          <description>Draws the icon as an unmirrored icon. By default, the icon is drawn as a mirrored icon if <i>hdc</i> is mirrored.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DI_NORMAL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0003</term>
              </listheader>
            </list>
          </description>
          <description>Combination of <b>DI_IMAGE</b> and <b>DI_MASK</b>. See Remarks.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DrawMenuBar">
    <summary>Redraws the menu bar of the specified window. If the menu bar changes after the system has created the window, this function must be called to draw the changed menu bar.</summary>
    <param name="hWnd">A handle to the window whose menu bar is to be redrawn.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.DrawState">
    <summary>The <b>DrawState</b> function displays an image and applies a visual effect to indicate a state, such as a disabled or default state.</summary>
    <param name="hdc">A handle to the device context to draw in.</param>
    <param name="hbrFore">A handle to the brush used to draw the image, if the state specified by the <i>fuFlags</i> parameter is DSS_MONO. This parameter is ignored for other states.</param>
    <param name="qfnCallBack">A pointer to an application-defined callback function used to render the image. This parameter is required if the image type in <i>fuFlags</i> is DST_COMPLEX. It is optional and can be <b>NULL</b> if the image type is DST_TEXT. For all other image types, this parameter is ignored. For more information about the callback function, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-drawstateproc">DrawStateProc</a> function.</param>
    <param name="lData">Information about the image. The meaning of this parameter depends on the image type.</param>
    <param name="wData">Information about the image. The meaning of this parameter depends on the image type. It is, however, zero extended for use with the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-drawstateproc">DrawStateProc</a> function.</param>
    <param name="x">The horizontal location, in device units, at which to draw the image.</param>
    <param name="y">The vertical location, in device units, at which to draw the image.</param>
    <param name="cx">The width of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the width of the image.</param>
    <param name="cy">The height of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the height of the image.</param>
    <param name="uFlags">
      <para>The image type and state. This parameter can be one of the following type values.</para>
      <list type="table">
        <listheader>
          <description>Value (type)</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is a bitmap. The <i>lData</i> parameter is the bitmap handle. Note that the bitmap cannot already be selected into an existing device context.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_COMPLEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is application defined. To render the image, <b>DrawState</b> calls the callback function specified by the <i>lpOutputFunc</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_ICON</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is an icon. The <i>lData</i> parameter is the icon handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_PREFIXTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is text that may contain an accelerator mnemonic. <b>DrawState</b> interprets the ampersand (&amp;) prefix character as a directive to underscore the character that follows. The <i>lData</i> parameter is a pointer to the string, and the <i>wData</i> parameter specifies the length. If <i>wData</i> is zero, the string must be null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_TEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is text. The <i>lData</i> parameter is a pointer to the string, and the <i>wData</i> parameter specifies the length. If <i>wData</i> is zero, the string must be null-terminated.</description>
        </listheader>
      </list> <para>This parameter can also be one of the following state values.</para><list type="table"><listheader><description>Value (state)</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_DISABLED</b></term></listheader></list></description><description>Embosses the image.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_HIDEPREFIX</b></term></listheader></list></description><description>Ignores the ampersand (&amp;) prefix character in the text, thus the letter that follows will not be underlined. This must be used with DST_PREFIXTEXT.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_MONO</b></term></listheader></list></description><description>Draws the image using the brush specified by the <i>hbr</i> parameter.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_NORMAL</b></term></listheader></list></description><description>Draws the image without any modification.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_PREFIXONLY</b></term></listheader></list></description><description>Draws only the underline at the position of the letter after the ampersand (&amp;) prefix character. No text in the string is drawn. This must be used with DST_PREFIXTEXT.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_RIGHT</b></term></listheader></list></description><description>Aligns the text to the right.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_UNION</b></term></listheader></list></description><description>Dithers the image.</description></listheader></list> <para>For all states except DSS_NORMAL, the image is converted to monochrome before the visual effect is applied.</para></param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawStateA">
    <summary>The <b>DrawState</b> function displays an image and applies a visual effect to indicate a state, such as a disabled or default state.</summary>
    <param name="hdc">A handle to the device context to draw in.</param>
    <param name="hbrFore">A handle to the brush used to draw the image, if the state specified by the <i>fuFlags</i> parameter is DSS_MONO. This parameter is ignored for other states.</param>
    <param name="qfnCallBack">A pointer to an application-defined callback function used to render the image. This parameter is required if the image type in <i>fuFlags</i> is DST_COMPLEX. It is optional and can be <b>NULL</b> if the image type is DST_TEXT. For all other image types, this parameter is ignored. For more information about the callback function, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-drawstateproc">DrawStateProc</a> function.</param>
    <param name="lData">Information about the image. The meaning of this parameter depends on the image type.</param>
    <param name="wData">Information about the image. The meaning of this parameter depends on the image type. It is, however, zero extended for use with the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-drawstateproc">DrawStateProc</a> function.</param>
    <param name="x">The horizontal location, in device units, at which to draw the image.</param>
    <param name="y">The vertical location, in device units, at which to draw the image.</param>
    <param name="cx">The width of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the width of the image.</param>
    <param name="cy">The height of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the height of the image.</param>
    <param name="uFlags">
      <para>The image type and state. This parameter can be one of the following type values.</para>
      <list type="table">
        <listheader>
          <description>Value (type)</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is a bitmap. The <i>lData</i> parameter is the bitmap handle. Note that the bitmap cannot already be selected into an existing device context.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_COMPLEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is application defined. To render the image, <b>DrawState</b> calls the callback function specified by the <i>lpOutputFunc</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_ICON</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is an icon. The <i>lData</i> parameter is the icon handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_PREFIXTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is text that may contain an accelerator mnemonic. <b>DrawState</b> interprets the ampersand (&amp;) prefix character as a directive to underscore the character that follows. The <i>lData</i> parameter is a pointer to the string, and the <i>wData</i> parameter specifies the length. If <i>wData</i> is zero, the string must be null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_TEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is text. The <i>lData</i> parameter is a pointer to the string, and the <i>wData</i> parameter specifies the length. If <i>wData</i> is zero, the string must be null-terminated.</description>
        </listheader>
      </list> <para>This parameter can also be one of the following state values.</para><list type="table"><listheader><description>Value (state)</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_DISABLED</b></term></listheader></list></description><description>Embosses the image.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_HIDEPREFIX</b></term></listheader></list></description><description>Ignores the ampersand (&amp;) prefix character in the text, thus the letter that follows will not be underlined. This must be used with DST_PREFIXTEXT.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_MONO</b></term></listheader></list></description><description>Draws the image using the brush specified by the <i>hbr</i> parameter.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_NORMAL</b></term></listheader></list></description><description>Draws the image without any modification.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_PREFIXONLY</b></term></listheader></list></description><description>Draws only the underline at the position of the letter after the ampersand (&amp;) prefix character. No text in the string is drawn. This must be used with DST_PREFIXTEXT.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_RIGHT</b></term></listheader></list></description><description>Aligns the text to the right.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_UNION</b></term></listheader></list></description><description>Dithers the image.</description></listheader></list> <para>For all states except DSS_NORMAL, the image is converted to monochrome before the visual effect is applied.</para></param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawStateW">
    <summary>The <b>DrawState</b> function displays an image and applies a visual effect to indicate a state, such as a disabled or default state.</summary>
    <param name="hdc">A handle to the device context to draw in.</param>
    <param name="hbrFore">A handle to the brush used to draw the image, if the state specified by the <i>fuFlags</i> parameter is DSS_MONO. This parameter is ignored for other states.</param>
    <param name="qfnCallBack">A pointer to an application-defined callback function used to render the image. This parameter is required if the image type in <i>fuFlags</i> is DST_COMPLEX. It is optional and can be <b>NULL</b> if the image type is DST_TEXT. For all other image types, this parameter is ignored. For more information about the callback function, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-drawstateproc">DrawStateProc</a> function.</param>
    <param name="lData">Information about the image. The meaning of this parameter depends on the image type.</param>
    <param name="wData">Information about the image. The meaning of this parameter depends on the image type. It is, however, zero extended for use with the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-drawstateproc">DrawStateProc</a> function.</param>
    <param name="x">The horizontal location, in device units, at which to draw the image.</param>
    <param name="y">The vertical location, in device units, at which to draw the image.</param>
    <param name="cx">The width of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the width of the image.</param>
    <param name="cy">The height of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the height of the image.</param>
    <param name="uFlags">
      <para>The image type and state. This parameter can be one of the following type values.</para>
      <list type="table">
        <listheader>
          <description>Value (type)</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is a bitmap. The <i>lData</i> parameter is the bitmap handle. Note that the bitmap cannot already be selected into an existing device context.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_COMPLEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is application defined. To render the image, <b>DrawState</b> calls the callback function specified by the <i>lpOutputFunc</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_ICON</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is an icon. The <i>lData</i> parameter is the icon handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_PREFIXTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is text that may contain an accelerator mnemonic. <b>DrawState</b> interprets the ampersand (&amp;) prefix character as a directive to underscore the character that follows. The <i>lData</i> parameter is a pointer to the string, and the <i>wData</i> parameter specifies the length. If <i>wData</i> is zero, the string must be null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_TEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is text. The <i>lData</i> parameter is a pointer to the string, and the <i>wData</i> parameter specifies the length. If <i>wData</i> is zero, the string must be null-terminated.</description>
        </listheader>
      </list> <para>This parameter can also be one of the following state values.</para><list type="table"><listheader><description>Value (state)</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_DISABLED</b></term></listheader></list></description><description>Embosses the image.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_HIDEPREFIX</b></term></listheader></list></description><description>Ignores the ampersand (&amp;) prefix character in the text, thus the letter that follows will not be underlined. This must be used with DST_PREFIXTEXT.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_MONO</b></term></listheader></list></description><description>Draws the image using the brush specified by the <i>hbr</i> parameter.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_NORMAL</b></term></listheader></list></description><description>Draws the image without any modification.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_PREFIXONLY</b></term></listheader></list></description><description>Draws only the underline at the position of the letter after the ampersand (&amp;) prefix character. No text in the string is drawn. This must be used with DST_PREFIXTEXT.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_RIGHT</b></term></listheader></list></description><description>Aligns the text to the right.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_UNION</b></term></listheader></list></description><description>Dithers the image.</description></listheader></list> <para>For all states except DSS_NORMAL, the image is converted to monochrome before the visual effect is applied.</para></param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawState">
    <summary>The <b>DrawState</b> function displays an image and applies a visual effect to indicate a state, such as a disabled or default state.</summary>
    <param name="hdc">A handle to the device context to draw in.</param>
    <param name="hbrFore">A handle to the brush used to draw the image, if the state specified by the <i>fuFlags</i> parameter is DSS_MONO. This parameter is ignored for other states.</param>
    <param name="qfnCallBack">A pointer to an application-defined callback function used to render the image. This parameter is required if the image type in <i>fuFlags</i> is DST_COMPLEX. It is optional and can be <b>NULL</b> if the image type is DST_TEXT. For all other image types, this parameter is ignored. For more information about the callback function, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-drawstateproc">DrawStateProc</a> function.</param>
    <param name="lData">Information about the image. The meaning of this parameter depends on the image type.</param>
    <param name="wData">Information about the image. The meaning of this parameter depends on the image type. It is, however, zero extended for use with the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-drawstateproc">DrawStateProc</a> function.</param>
    <param name="x">The horizontal location, in device units, at which to draw the image.</param>
    <param name="y">The vertical location, in device units, at which to draw the image.</param>
    <param name="cx">The width of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the width of the image.</param>
    <param name="cy">The height of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the height of the image.</param>
    <param name="uFlags">
      <para>The image type and state. This parameter can be one of the following type values.</para>
      <list type="table">
        <listheader>
          <description>Value (type)</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is a bitmap. The <i>lData</i> parameter is the bitmap handle. Note that the bitmap cannot already be selected into an existing device context.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_COMPLEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is application defined. To render the image, <b>DrawState</b> calls the callback function specified by the <i>lpOutputFunc</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_ICON</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is an icon. The <i>lData</i> parameter is the icon handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_PREFIXTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is text that may contain an accelerator mnemonic. <b>DrawState</b> interprets the ampersand (&amp;) prefix character as a directive to underscore the character that follows. The <i>lData</i> parameter is a pointer to the string, and the <i>wData</i> parameter specifies the length. If <i>wData</i> is zero, the string must be null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_TEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is text. The <i>lData</i> parameter is a pointer to the string, and the <i>wData</i> parameter specifies the length. If <i>wData</i> is zero, the string must be null-terminated.</description>
        </listheader>
      </list> <para>This parameter can also be one of the following state values.</para><list type="table"><listheader><description>Value (state)</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_DISABLED</b></term></listheader></list></description><description>Embosses the image.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_HIDEPREFIX</b></term></listheader></list></description><description>Ignores the ampersand (&amp;) prefix character in the text, thus the letter that follows will not be underlined. This must be used with DST_PREFIXTEXT.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_MONO</b></term></listheader></list></description><description>Draws the image using the brush specified by the <i>hbr</i> parameter.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_NORMAL</b></term></listheader></list></description><description>Draws the image without any modification.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_PREFIXONLY</b></term></listheader></list></description><description>Draws only the underline at the position of the letter after the ampersand (&amp;) prefix character. No text in the string is drawn. This must be used with DST_PREFIXTEXT.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_RIGHT</b></term></listheader></list></description><description>Aligns the text to the right.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_UNION</b></term></listheader></list></description><description>Dithers the image.</description></listheader></list> <para>For all states except DSS_NORMAL, the image is converted to monochrome before the visual effect is applied.</para></param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawStateA">
    <summary>The <b>DrawState</b> function displays an image and applies a visual effect to indicate a state, such as a disabled or default state.</summary>
    <param name="hdc">A handle to the device context to draw in.</param>
    <param name="hbrFore">A handle to the brush used to draw the image, if the state specified by the <i>fuFlags</i> parameter is DSS_MONO. This parameter is ignored for other states.</param>
    <param name="qfnCallBack">A pointer to an application-defined callback function used to render the image. This parameter is required if the image type in <i>fuFlags</i> is DST_COMPLEX. It is optional and can be <b>NULL</b> if the image type is DST_TEXT. For all other image types, this parameter is ignored. For more information about the callback function, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-drawstateproc">DrawStateProc</a> function.</param>
    <param name="lData">Information about the image. The meaning of this parameter depends on the image type.</param>
    <param name="wData">Information about the image. The meaning of this parameter depends on the image type. It is, however, zero extended for use with the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-drawstateproc">DrawStateProc</a> function.</param>
    <param name="x">The horizontal location, in device units, at which to draw the image.</param>
    <param name="y">The vertical location, in device units, at which to draw the image.</param>
    <param name="cx">The width of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the width of the image.</param>
    <param name="cy">The height of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the height of the image.</param>
    <param name="uFlags">
      <para>The image type and state. This parameter can be one of the following type values.</para>
      <list type="table">
        <listheader>
          <description>Value (type)</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is a bitmap. The <i>lData</i> parameter is the bitmap handle. Note that the bitmap cannot already be selected into an existing device context.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_COMPLEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is application defined. To render the image, <b>DrawState</b> calls the callback function specified by the <i>lpOutputFunc</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_ICON</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is an icon. The <i>lData</i> parameter is the icon handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_PREFIXTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is text that may contain an accelerator mnemonic. <b>DrawState</b> interprets the ampersand (&amp;) prefix character as a directive to underscore the character that follows. The <i>lData</i> parameter is a pointer to the string, and the <i>wData</i> parameter specifies the length. If <i>wData</i> is zero, the string must be null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_TEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is text. The <i>lData</i> parameter is a pointer to the string, and the <i>wData</i> parameter specifies the length. If <i>wData</i> is zero, the string must be null-terminated.</description>
        </listheader>
      </list> <para>This parameter can also be one of the following state values.</para><list type="table"><listheader><description>Value (state)</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_DISABLED</b></term></listheader></list></description><description>Embosses the image.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_HIDEPREFIX</b></term></listheader></list></description><description>Ignores the ampersand (&amp;) prefix character in the text, thus the letter that follows will not be underlined. This must be used with DST_PREFIXTEXT.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_MONO</b></term></listheader></list></description><description>Draws the image using the brush specified by the <i>hbr</i> parameter.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_NORMAL</b></term></listheader></list></description><description>Draws the image without any modification.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_PREFIXONLY</b></term></listheader></list></description><description>Draws only the underline at the position of the letter after the ampersand (&amp;) prefix character. No text in the string is drawn. This must be used with DST_PREFIXTEXT.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_RIGHT</b></term></listheader></list></description><description>Aligns the text to the right.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_UNION</b></term></listheader></list></description><description>Dithers the image.</description></listheader></list> <para>For all states except DSS_NORMAL, the image is converted to monochrome before the visual effect is applied.</para></param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawStateW">
    <summary>The <b>DrawState</b> function displays an image and applies a visual effect to indicate a state, such as a disabled or default state.</summary>
    <param name="hdc">A handle to the device context to draw in.</param>
    <param name="hbrFore">A handle to the brush used to draw the image, if the state specified by the <i>fuFlags</i> parameter is DSS_MONO. This parameter is ignored for other states.</param>
    <param name="qfnCallBack">A pointer to an application-defined callback function used to render the image. This parameter is required if the image type in <i>fuFlags</i> is DST_COMPLEX. It is optional and can be <b>NULL</b> if the image type is DST_TEXT. For all other image types, this parameter is ignored. For more information about the callback function, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-drawstateproc">DrawStateProc</a> function.</param>
    <param name="lData">Information about the image. The meaning of this parameter depends on the image type.</param>
    <param name="wData">Information about the image. The meaning of this parameter depends on the image type. It is, however, zero extended for use with the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-drawstateproc">DrawStateProc</a> function.</param>
    <param name="x">The horizontal location, in device units, at which to draw the image.</param>
    <param name="y">The vertical location, in device units, at which to draw the image.</param>
    <param name="cx">The width of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the width of the image.</param>
    <param name="cy">The height of the image, in device units. This parameter is required if the image type is DST_COMPLEX. Otherwise, it can be zero to calculate the height of the image.</param>
    <param name="uFlags">
      <para>The image type and state. This parameter can be one of the following type values.</para>
      <list type="table">
        <listheader>
          <description>Value (type)</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_BITMAP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is a bitmap. The <i>lData</i> parameter is the bitmap handle. Note that the bitmap cannot already be selected into an existing device context.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_COMPLEX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is application defined. To render the image, <b>DrawState</b> calls the callback function specified by the <i>lpOutputFunc</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_ICON</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is an icon. The <i>lData</i> parameter is the icon handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_PREFIXTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is text that may contain an accelerator mnemonic. <b>DrawState</b> interprets the ampersand (&amp;) prefix character as a directive to underscore the character that follows. The <i>lData</i> parameter is a pointer to the string, and the <i>wData</i> parameter specifies the length. If <i>wData</i> is zero, the string must be null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DST_TEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The image is text. The <i>lData</i> parameter is a pointer to the string, and the <i>wData</i> parameter specifies the length. If <i>wData</i> is zero, the string must be null-terminated.</description>
        </listheader>
      </list> <para>This parameter can also be one of the following state values.</para><list type="table"><listheader><description>Value (state)</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_DISABLED</b></term></listheader></list></description><description>Embosses the image.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_HIDEPREFIX</b></term></listheader></list></description><description>Ignores the ampersand (&amp;) prefix character in the text, thus the letter that follows will not be underlined. This must be used with DST_PREFIXTEXT.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_MONO</b></term></listheader></list></description><description>Draws the image using the brush specified by the <i>hbr</i> parameter.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_NORMAL</b></term></listheader></list></description><description>Draws the image without any modification.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_PREFIXONLY</b></term></listheader></list></description><description>Draws only the underline at the position of the letter after the ampersand (&amp;) prefix character. No text in the string is drawn. This must be used with DST_PREFIXTEXT.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_RIGHT</b></term></listheader></list></description><description>Aligns the text to the right.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DSS_UNION</b></term></listheader></list></description><description>Dithers the image.</description></listheader></list> <para>For all states except DSS_NORMAL, the image is converted to monochrome before the visual effect is applied.</para></param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawText">
    <summary>
      <para>The <b>DrawText</b> function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth).</para>
      <para>To specify additional formatting options, use the <see cref="DrawTextEx" /> function.</para>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpchText">
      <para>A pointer to the string that specifies the text to be drawn. If the <i>nCount</i> parameter is -1, the string must be null-terminated.</para>
      <para>If <i>uFormat</i> includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.</para>
    </param>
    <param name="cchText">The length, in characters, of the string. If <i>nCount</i> is -1, then the <i>lpchText</i> parameter is assumed to be a pointer to a null-terminated string and <b>DrawText</b> computes the character count automatically.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that contains the rectangle (in logical coordinates) in which the text is to be formatted.</param>
    <param name="format">
      <para>The method of formatting the text. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_BOTTOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the bottom of the rectangle. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CALCRECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines the width and height of the rectangle. If there are multiple lines of text, <b>DrawText</b> uses the width of the rectangle pointed to by the <i>lpRect</i> parameter and extends the base of the rectangle to bound the last line of text. If the largest word is wider than the rectangle, the width is expanded. If the text is less than the width of the rectangle, the width is reduced. If there is only one line of text, <b>DrawText</b> modifies the right side of the rectangle so that it bounds the last character in the line. In either case, <b>DrawText</b> returns the height of the formatted text but does not draw the text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text horizontally in the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EDITCONTROL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Duplicates the text-displaying characteristics of a multiline edit control. Specifically, the average character width is calculated in the same manner as for an edit control, and the function does not display a partially visible last line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_END_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, if the end of a string does not fit in the rectangle, it is truncated and ellipses are added. If a word that is not at the end of the string goes beyond the limits of the rectangle, it is truncated without ellipses.<para>The string is not modified unless the DT_MODIFYSTRING flag is specified.</para><para>Compare with DT_PATH_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXPANDTABS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Expands tab characters. The default number of characters per tab is eight. The DT_WORD_ELLIPSIS, DT_PATH_ELLIPSIS, and DT_END_ELLIPSIS values cannot be used with the DT_EXPANDTABS value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXTERNALLEADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes the font external leading in line height. Normally, external leading is not included in the height of a line of text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_HIDEPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Ignores the ampersand (&amp;) prefix character in the text. The letter that follows will not be underlined, but other mnemonic-prefix characters are still processed.<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_HIDEPREFIX: "Abc&amp;d"</para><para>Compare with DT_NOPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_INTERNAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the system font to calculate text metrics.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_LEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the left.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_MODIFYSTRING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Modifies the specified string to match the displayed text. This value has no effect unless DT_END_ELLIPSIS or DT_PATH_ELLIPSIS is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOCLIP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws without clipping. <b>DrawText</b> is somewhat faster when DT_NOCLIP is used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOFULLWIDTHCHARBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Prevents a line break at a DBCS (double-wide character string), so that the line breaking rule is equivalent to SBCS strings. For example, this can be used in Korean windows, for more readability of icon labels. This value has no effect unless DT_WORDBREAK is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off processing of prefix characters. Normally, <b>DrawText</b> interprets the mnemonic-prefix character &amp; as a directive to underscore the character that follows, and the mnemonic-prefix characters &amp;&amp; as a directive to print a single &amp;. By specifying DT_NOPREFIX, this processing is turned off. For example,<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_NOPREFIX: "A&amp;bc&amp;&amp;d"</para><para>Compare with DT_HIDEPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PATH_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, replaces characters in the middle of the string with ellipses so that the result fits in the specified rectangle. If the string contains backslash (\\) characters, DT_PATH_ELLIPSIS preserves as much as possible of the text after the last backslash.<para>The string is not modified unless the DT_MODIFYSTRING flag is specified.</para><para>Compare with DT_END_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PREFIXONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws only an underline at the position of the character following the ampersand (&amp;) prefix character. Does not draw any other characters in the string. For example,<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"n</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_PREFIXONLY: " _ "</para><para>Compare with DT_HIDEPREFIX and DT_NOPREFIX.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Layout in right-to-left reading order for bidirectional text when the font selected into the <i>hdc</i> is a Hebrew or Arabic font. The default reading order for all text is left-to-right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_SINGLELINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Displays text on a single line only. Carriage returns and line feeds do not break the line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TABSTOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets tab stops. Bits 15-8 (high-order byte of the low-order word) of the <i>uFormat</i> parameter specify the number of characters for each tab. The default number of characters per tab is eight. The DT_CALCRECT, DT_EXTERNALLEADING, DT_INTERNAL, DT_NOCLIP, and DT_NOPREFIX values cannot be used with the DT_TABSTOP value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the top of the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_VCENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text vertically. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORDBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Breaks words. Lines are automatically broken between words if a word would extend past the edge of the rectangle specified by the <i>lpRect</i> parameter. A carriage return-line feed sequence also breaks the line.<para>If this is not specified, output is on one line.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORD_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Truncates any word that does not fit in the rectangle and adds ellipses.<para>Compare with DT_END_ELLIPSIS and DT_PATH_ELLIPSIS.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the height of the text in logical units. If DT_VCENTER or DT_BOTTOM is specified, the return value is the offset from <code>lpRect-&gt;top</code> to the bottom of the drawn text.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawTextA">
    <summary>
      <para>The <b>DrawText</b> function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth).</para>
      <para>To specify additional formatting options, use the <see cref="DrawTextEx" /> function.</para>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpchText">
      <para>A pointer to the string that specifies the text to be drawn. If the <i>nCount</i> parameter is -1, the string must be null-terminated.</para>
      <para>If <i>uFormat</i> includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.</para>
    </param>
    <param name="cchText">The length, in characters, of the string. If <i>nCount</i> is -1, then the <i>lpchText</i> parameter is assumed to be a pointer to a null-terminated string and <b>DrawText</b> computes the character count automatically.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that contains the rectangle (in logical coordinates) in which the text is to be formatted.</param>
    <param name="format">
      <para>The method of formatting the text. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_BOTTOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the bottom of the rectangle. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CALCRECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines the width and height of the rectangle. If there are multiple lines of text, <b>DrawText</b> uses the width of the rectangle pointed to by the <i>lpRect</i> parameter and extends the base of the rectangle to bound the last line of text. If the largest word is wider than the rectangle, the width is expanded. If the text is less than the width of the rectangle, the width is reduced. If there is only one line of text, <b>DrawText</b> modifies the right side of the rectangle so that it bounds the last character in the line. In either case, <b>DrawText</b> returns the height of the formatted text but does not draw the text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text horizontally in the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EDITCONTROL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Duplicates the text-displaying characteristics of a multiline edit control. Specifically, the average character width is calculated in the same manner as for an edit control, and the function does not display a partially visible last line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_END_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, if the end of a string does not fit in the rectangle, it is truncated and ellipses are added. If a word that is not at the end of the string goes beyond the limits of the rectangle, it is truncated without ellipses.<para>The string is not modified unless the DT_MODIFYSTRING flag is specified.</para><para>Compare with DT_PATH_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXPANDTABS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Expands tab characters. The default number of characters per tab is eight. The DT_WORD_ELLIPSIS, DT_PATH_ELLIPSIS, and DT_END_ELLIPSIS values cannot be used with the DT_EXPANDTABS value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXTERNALLEADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes the font external leading in line height. Normally, external leading is not included in the height of a line of text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_HIDEPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Ignores the ampersand (&amp;) prefix character in the text. The letter that follows will not be underlined, but other mnemonic-prefix characters are still processed.<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_HIDEPREFIX: "Abc&amp;d"</para><para>Compare with DT_NOPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_INTERNAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the system font to calculate text metrics.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_LEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the left.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_MODIFYSTRING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Modifies the specified string to match the displayed text. This value has no effect unless DT_END_ELLIPSIS or DT_PATH_ELLIPSIS is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOCLIP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws without clipping. <b>DrawText</b> is somewhat faster when DT_NOCLIP is used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOFULLWIDTHCHARBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Prevents a line break at a DBCS (double-wide character string), so that the line breaking rule is equivalent to SBCS strings. For example, this can be used in Korean windows, for more readability of icon labels. This value has no effect unless DT_WORDBREAK is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off processing of prefix characters. Normally, <b>DrawText</b> interprets the mnemonic-prefix character &amp; as a directive to underscore the character that follows, and the mnemonic-prefix characters &amp;&amp; as a directive to print a single &amp;. By specifying DT_NOPREFIX, this processing is turned off. For example,<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_NOPREFIX: "A&amp;bc&amp;&amp;d"</para><para>Compare with DT_HIDEPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PATH_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, replaces characters in the middle of the string with ellipses so that the result fits in the specified rectangle. If the string contains backslash (\\) characters, DT_PATH_ELLIPSIS preserves as much as possible of the text after the last backslash.<para>The string is not modified unless the DT_MODIFYSTRING flag is specified.</para><para>Compare with DT_END_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PREFIXONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws only an underline at the position of the character following the ampersand (&amp;) prefix character. Does not draw any other characters in the string. For example,<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"n</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_PREFIXONLY: " _ "</para><para>Compare with DT_HIDEPREFIX and DT_NOPREFIX.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Layout in right-to-left reading order for bidirectional text when the font selected into the <i>hdc</i> is a Hebrew or Arabic font. The default reading order for all text is left-to-right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_SINGLELINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Displays text on a single line only. Carriage returns and line feeds do not break the line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TABSTOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets tab stops. Bits 15-8 (high-order byte of the low-order word) of the <i>uFormat</i> parameter specify the number of characters for each tab. The default number of characters per tab is eight. The DT_CALCRECT, DT_EXTERNALLEADING, DT_INTERNAL, DT_NOCLIP, and DT_NOPREFIX values cannot be used with the DT_TABSTOP value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the top of the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_VCENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text vertically. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORDBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Breaks words. Lines are automatically broken between words if a word would extend past the edge of the rectangle specified by the <i>lpRect</i> parameter. A carriage return-line feed sequence also breaks the line.<para>If this is not specified, output is on one line.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORD_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Truncates any word that does not fit in the rectangle and adds ellipses.<para>Compare with DT_END_ELLIPSIS and DT_PATH_ELLIPSIS.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the height of the text in logical units. If DT_VCENTER or DT_BOTTOM is specified, the return value is the offset from <code>lpRect-&gt;top</code> to the bottom of the drawn text.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawTextW">
    <summary>
      <para>The <b>DrawText</b> function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth).</para>
      <para>To specify additional formatting options, use the <see cref="DrawTextEx" /> function.</para>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpchText">
      <para>A pointer to the string that specifies the text to be drawn. If the <i>nCount</i> parameter is -1, the string must be null-terminated.</para>
      <para>If <i>uFormat</i> includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.</para>
    </param>
    <param name="cchText">The length, in characters, of the string. If <i>nCount</i> is -1, then the <i>lpchText</i> parameter is assumed to be a pointer to a null-terminated string and <b>DrawText</b> computes the character count automatically.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that contains the rectangle (in logical coordinates) in which the text is to be formatted.</param>
    <param name="format">
      <para>The method of formatting the text. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_BOTTOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the bottom of the rectangle. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CALCRECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines the width and height of the rectangle. If there are multiple lines of text, <b>DrawText</b> uses the width of the rectangle pointed to by the <i>lpRect</i> parameter and extends the base of the rectangle to bound the last line of text. If the largest word is wider than the rectangle, the width is expanded. If the text is less than the width of the rectangle, the width is reduced. If there is only one line of text, <b>DrawText</b> modifies the right side of the rectangle so that it bounds the last character in the line. In either case, <b>DrawText</b> returns the height of the formatted text but does not draw the text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text horizontally in the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EDITCONTROL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Duplicates the text-displaying characteristics of a multiline edit control. Specifically, the average character width is calculated in the same manner as for an edit control, and the function does not display a partially visible last line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_END_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, if the end of a string does not fit in the rectangle, it is truncated and ellipses are added. If a word that is not at the end of the string goes beyond the limits of the rectangle, it is truncated without ellipses.<para>The string is not modified unless the DT_MODIFYSTRING flag is specified.</para><para>Compare with DT_PATH_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXPANDTABS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Expands tab characters. The default number of characters per tab is eight. The DT_WORD_ELLIPSIS, DT_PATH_ELLIPSIS, and DT_END_ELLIPSIS values cannot be used with the DT_EXPANDTABS value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXTERNALLEADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes the font external leading in line height. Normally, external leading is not included in the height of a line of text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_HIDEPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Ignores the ampersand (&amp;) prefix character in the text. The letter that follows will not be underlined, but other mnemonic-prefix characters are still processed.<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_HIDEPREFIX: "Abc&amp;d"</para><para>Compare with DT_NOPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_INTERNAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the system font to calculate text metrics.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_LEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the left.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_MODIFYSTRING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Modifies the specified string to match the displayed text. This value has no effect unless DT_END_ELLIPSIS or DT_PATH_ELLIPSIS is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOCLIP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws without clipping. <b>DrawText</b> is somewhat faster when DT_NOCLIP is used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOFULLWIDTHCHARBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Prevents a line break at a DBCS (double-wide character string), so that the line breaking rule is equivalent to SBCS strings. For example, this can be used in Korean windows, for more readability of icon labels. This value has no effect unless DT_WORDBREAK is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off processing of prefix characters. Normally, <b>DrawText</b> interprets the mnemonic-prefix character &amp; as a directive to underscore the character that follows, and the mnemonic-prefix characters &amp;&amp; as a directive to print a single &amp;. By specifying DT_NOPREFIX, this processing is turned off. For example,<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_NOPREFIX: "A&amp;bc&amp;&amp;d"</para><para>Compare with DT_HIDEPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PATH_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, replaces characters in the middle of the string with ellipses so that the result fits in the specified rectangle. If the string contains backslash (\\) characters, DT_PATH_ELLIPSIS preserves as much as possible of the text after the last backslash.<para>The string is not modified unless the DT_MODIFYSTRING flag is specified.</para><para>Compare with DT_END_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PREFIXONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws only an underline at the position of the character following the ampersand (&amp;) prefix character. Does not draw any other characters in the string. For example,<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"n</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_PREFIXONLY: " _ "</para><para>Compare with DT_HIDEPREFIX and DT_NOPREFIX.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Layout in right-to-left reading order for bidirectional text when the font selected into the <i>hdc</i> is a Hebrew or Arabic font. The default reading order for all text is left-to-right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_SINGLELINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Displays text on a single line only. Carriage returns and line feeds do not break the line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TABSTOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets tab stops. Bits 15-8 (high-order byte of the low-order word) of the <i>uFormat</i> parameter specify the number of characters for each tab. The default number of characters per tab is eight. The DT_CALCRECT, DT_EXTERNALLEADING, DT_INTERNAL, DT_NOCLIP, and DT_NOPREFIX values cannot be used with the DT_TABSTOP value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the top of the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_VCENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text vertically. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORDBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Breaks words. Lines are automatically broken between words if a word would extend past the edge of the rectangle specified by the <i>lpRect</i> parameter. A carriage return-line feed sequence also breaks the line.<para>If this is not specified, output is on one line.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORD_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Truncates any word that does not fit in the rectangle and adds ellipses.<para>Compare with DT_END_ELLIPSIS and DT_PATH_ELLIPSIS.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the height of the text in logical units. If DT_VCENTER or DT_BOTTOM is specified, the return value is the offset from <code>lpRect-&gt;top</code> to the bottom of the drawn text.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawText">
    <summary>
      <para>The <b>DrawText</b> function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth).</para>
      <para>To specify additional formatting options, use the <see cref="DrawTextEx" /> function.</para>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpchText">
      <para>A pointer to the string that specifies the text to be drawn. If the <i>cchText</i> parameter is -1, the string must be null-terminated.</para>
      <para>If <i>uFormat</i> includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.</para>
    </param>
    <param name="cchText">The length, in characters, of the string. If <i>cchText</i> is -1, then the <i>lpchText</i> parameter is assumed to be a pointer to a null-terminated string and <b>DrawText</b> computes the character count automatically.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that contains the rectangle (in logical coordinates) in which the text is to be formatted.</param>
    <param name="format">
      <para>The method of formatting the text. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_BOTTOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the bottom of the rectangle. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CALCRECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines the width and height of the rectangle. If there are multiple lines of text, <b>DrawText</b> uses the width of the rectangle pointed to by the <i>lpRect</i> parameter and extends the base of the rectangle to bound the last line of text. If the largest word is wider than the rectangle, the width is expanded. If the text is less than the width of the rectangle, the width is reduced. If there is only one line of text, <b>DrawText</b> modifies the right side of the rectangle so that it bounds the last character in the line. In either case, <b>DrawText</b> returns the height of the formatted text but does not draw the text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text horizontally in the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EDITCONTROL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Duplicates the text-displaying characteristics of a multiline edit control. Specifically, the average character width is calculated in the same manner as for an edit control, and the function does not display a partially visible last line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_END_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, if the end of a string does not fit in the rectangle, it is truncated and ellipses are added. If a word that is not at the end of the string goes beyond the limits of the rectangle, it is truncated without ellipses.<para>The string is not modified unless the DT_MODIFYSTRING flag is specified.</para><para>Compare with DT_PATH_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXPANDTABS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Expands tab characters. The default number of characters per tab is eight. The DT_WORD_ELLIPSIS, DT_PATH_ELLIPSIS, and DT_END_ELLIPSIS values cannot be used with the DT_EXPANDTABS value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXTERNALLEADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes the font external leading in line height. Normally, external leading is not included in the height of a line of text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_HIDEPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Ignores the ampersand (&amp;) prefix character in the text. The letter that follows will not be underlined, but other mnemonic-prefix characters are still processed.<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_HIDEPREFIX: "Abc&amp;d"</para><para>Compare with DT_NOPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_INTERNAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the system font to calculate text metrics.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_LEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the left.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_MODIFYSTRING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Modifies the specified string to match the displayed text. This value has no effect unless DT_END_ELLIPSIS or DT_PATH_ELLIPSIS is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOCLIP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws without clipping. <b>DrawText</b> is somewhat faster when DT_NOCLIP is used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOFULLWIDTHCHARBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Prevents a line break at a DBCS (double-wide character string), so that the line breaking rule is equivalent to SBCS strings. For example, this can be used in Korean windows, for more readability of icon labels. This value has no effect unless DT_WORDBREAK is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off processing of prefix characters. Normally, <b>DrawText</b> interprets the mnemonic-prefix character &amp; as a directive to underscore the character that follows, and the mnemonic-prefix characters &amp;&amp; as a directive to print a single &amp;. By specifying DT_NOPREFIX, this processing is turned off. For example,<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_NOPREFIX: "A&amp;bc&amp;&amp;d"</para><para>Compare with DT_HIDEPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PATH_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, replaces characters in the middle of the string with ellipses so that the result fits in the specified rectangle. If the string contains backslash (\\) characters, DT_PATH_ELLIPSIS preserves as much as possible of the text after the last backslash.<para>The string is not modified unless the DT_MODIFYSTRING flag is specified.</para><para>Compare with DT_END_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PREFIXONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws only an underline at the position of the character following the ampersand (&amp;) prefix character. Does not draw any other characters in the string. For example,<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"n</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_PREFIXONLY: " _ "</para><para>Compare with DT_HIDEPREFIX and DT_NOPREFIX.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Layout in right-to-left reading order for bidirectional text when the font selected into the <i>hdc</i> is a Hebrew or Arabic font. The default reading order for all text is left-to-right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_SINGLELINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Displays text on a single line only. Carriage returns and line feeds do not break the line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TABSTOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets tab stops. Bits 15-8 (high-order byte of the low-order word) of the <i>uFormat</i> parameter specify the number of characters for each tab. The default number of characters per tab is eight. The DT_CALCRECT, DT_EXTERNALLEADING, DT_INTERNAL, DT_NOCLIP, and DT_NOPREFIX values cannot be used with the DT_TABSTOP value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the top of the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_VCENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text vertically. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORDBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Breaks words. Lines are automatically broken between words if a word would extend past the edge of the rectangle specified by the <i>lpRect</i> parameter. A carriage return-line feed sequence also breaks the line.<para>If this is not specified, output is on one line.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORD_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Truncates any word that does not fit in the rectangle and adds ellipses.<para>Compare with DT_END_ELLIPSIS and DT_PATH_ELLIPSIS.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the height of the text in logical units. If DT_VCENTER or DT_BOTTOM is specified, the return value is the offset from <code>lpRect-&gt;top</code> to the bottom of the drawn text</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawTextA">
    <summary>
      <para>The <b>DrawText</b> function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth).</para>
      <para>To specify additional formatting options, use the <see cref="DrawTextEx" /> function.</para>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpchText">
      <para>A pointer to the string that specifies the text to be drawn. If the <i>cchText</i> parameter is -1, the string must be null-terminated.</para>
      <para>If <i>uFormat</i> includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.</para>
    </param>
    <param name="cchText">The length, in characters, of the string. If <i>cchText</i> is -1, then the <i>lpchText</i> parameter is assumed to be a pointer to a null-terminated string and <b>DrawText</b> computes the character count automatically.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that contains the rectangle (in logical coordinates) in which the text is to be formatted.</param>
    <param name="format">
      <para>The method of formatting the text. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_BOTTOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the bottom of the rectangle. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CALCRECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines the width and height of the rectangle. If there are multiple lines of text, <b>DrawText</b> uses the width of the rectangle pointed to by the <i>lpRect</i> parameter and extends the base of the rectangle to bound the last line of text. If the largest word is wider than the rectangle, the width is expanded. If the text is less than the width of the rectangle, the width is reduced. If there is only one line of text, <b>DrawText</b> modifies the right side of the rectangle so that it bounds the last character in the line. In either case, <b>DrawText</b> returns the height of the formatted text but does not draw the text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text horizontally in the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EDITCONTROL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Duplicates the text-displaying characteristics of a multiline edit control. Specifically, the average character width is calculated in the same manner as for an edit control, and the function does not display a partially visible last line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_END_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, if the end of a string does not fit in the rectangle, it is truncated and ellipses are added. If a word that is not at the end of the string goes beyond the limits of the rectangle, it is truncated without ellipses.<para>The string is not modified unless the DT_MODIFYSTRING flag is specified.</para><para>Compare with DT_PATH_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXPANDTABS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Expands tab characters. The default number of characters per tab is eight. The DT_WORD_ELLIPSIS, DT_PATH_ELLIPSIS, and DT_END_ELLIPSIS values cannot be used with the DT_EXPANDTABS value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXTERNALLEADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes the font external leading in line height. Normally, external leading is not included in the height of a line of text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_HIDEPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Ignores the ampersand (&amp;) prefix character in the text. The letter that follows will not be underlined, but other mnemonic-prefix characters are still processed.<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_HIDEPREFIX: "Abc&amp;d"</para><para>Compare with DT_NOPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_INTERNAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the system font to calculate text metrics.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_LEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the left.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_MODIFYSTRING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Modifies the specified string to match the displayed text. This value has no effect unless DT_END_ELLIPSIS or DT_PATH_ELLIPSIS is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOCLIP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws without clipping. <b>DrawText</b> is somewhat faster when DT_NOCLIP is used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOFULLWIDTHCHARBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Prevents a line break at a DBCS (double-wide character string), so that the line breaking rule is equivalent to SBCS strings. For example, this can be used in Korean windows, for more readability of icon labels. This value has no effect unless DT_WORDBREAK is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off processing of prefix characters. Normally, <b>DrawText</b> interprets the mnemonic-prefix character &amp; as a directive to underscore the character that follows, and the mnemonic-prefix characters &amp;&amp; as a directive to print a single &amp;. By specifying DT_NOPREFIX, this processing is turned off. For example,<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_NOPREFIX: "A&amp;bc&amp;&amp;d"</para><para>Compare with DT_HIDEPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PATH_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, replaces characters in the middle of the string with ellipses so that the result fits in the specified rectangle. If the string contains backslash (\\) characters, DT_PATH_ELLIPSIS preserves as much as possible of the text after the last backslash.<para>The string is not modified unless the DT_MODIFYSTRING flag is specified.</para><para>Compare with DT_END_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PREFIXONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws only an underline at the position of the character following the ampersand (&amp;) prefix character. Does not draw any other characters in the string. For example,<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"n</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_PREFIXONLY: " _ "</para><para>Compare with DT_HIDEPREFIX and DT_NOPREFIX.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Layout in right-to-left reading order for bidirectional text when the font selected into the <i>hdc</i> is a Hebrew or Arabic font. The default reading order for all text is left-to-right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_SINGLELINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Displays text on a single line only. Carriage returns and line feeds do not break the line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TABSTOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets tab stops. Bits 15-8 (high-order byte of the low-order word) of the <i>uFormat</i> parameter specify the number of characters for each tab. The default number of characters per tab is eight. The DT_CALCRECT, DT_EXTERNALLEADING, DT_INTERNAL, DT_NOCLIP, and DT_NOPREFIX values cannot be used with the DT_TABSTOP value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the top of the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_VCENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text vertically. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORDBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Breaks words. Lines are automatically broken between words if a word would extend past the edge of the rectangle specified by the <i>lpRect</i> parameter. A carriage return-line feed sequence also breaks the line.<para>If this is not specified, output is on one line.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORD_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Truncates any word that does not fit in the rectangle and adds ellipses.<para>Compare with DT_END_ELLIPSIS and DT_PATH_ELLIPSIS.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the height of the text in logical units. If DT_VCENTER or DT_BOTTOM is specified, the return value is the offset from <code>lpRect-&gt;top</code> to the bottom of the drawn text</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawTextW">
    <summary>
      <para>The <b>DrawText</b> function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth).</para>
      <para>To specify additional formatting options, use the <see cref="DrawTextEx" /> function.</para>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpchText">
      <para>A pointer to the string that specifies the text to be drawn. If the <i>cchText</i> parameter is -1, the string must be null-terminated.</para>
      <para>If <i>uFormat</i> includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.</para>
    </param>
    <param name="cchText">The length, in characters, of the string. If <i>cchText</i> is -1, then the <i>lpchText</i> parameter is assumed to be a pointer to a null-terminated string and <b>DrawText</b> computes the character count automatically.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that contains the rectangle (in logical coordinates) in which the text is to be formatted.</param>
    <param name="format">
      <para>The method of formatting the text. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_BOTTOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the bottom of the rectangle. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CALCRECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines the width and height of the rectangle. If there are multiple lines of text, <b>DrawText</b> uses the width of the rectangle pointed to by the <i>lpRect</i> parameter and extends the base of the rectangle to bound the last line of text. If the largest word is wider than the rectangle, the width is expanded. If the text is less than the width of the rectangle, the width is reduced. If there is only one line of text, <b>DrawText</b> modifies the right side of the rectangle so that it bounds the last character in the line. In either case, <b>DrawText</b> returns the height of the formatted text but does not draw the text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text horizontally in the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EDITCONTROL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Duplicates the text-displaying characteristics of a multiline edit control. Specifically, the average character width is calculated in the same manner as for an edit control, and the function does not display a partially visible last line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_END_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, if the end of a string does not fit in the rectangle, it is truncated and ellipses are added. If a word that is not at the end of the string goes beyond the limits of the rectangle, it is truncated without ellipses.<para>The string is not modified unless the DT_MODIFYSTRING flag is specified.</para><para>Compare with DT_PATH_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXPANDTABS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Expands tab characters. The default number of characters per tab is eight. The DT_WORD_ELLIPSIS, DT_PATH_ELLIPSIS, and DT_END_ELLIPSIS values cannot be used with the DT_EXPANDTABS value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXTERNALLEADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes the font external leading in line height. Normally, external leading is not included in the height of a line of text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_HIDEPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Ignores the ampersand (&amp;) prefix character in the text. The letter that follows will not be underlined, but other mnemonic-prefix characters are still processed.<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_HIDEPREFIX: "Abc&amp;d"</para><para>Compare with DT_NOPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_INTERNAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the system font to calculate text metrics.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_LEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the left.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_MODIFYSTRING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Modifies the specified string to match the displayed text. This value has no effect unless DT_END_ELLIPSIS or DT_PATH_ELLIPSIS is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOCLIP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws without clipping. <b>DrawText</b> is somewhat faster when DT_NOCLIP is used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOFULLWIDTHCHARBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Prevents a line break at a DBCS (double-wide character string), so that the line breaking rule is equivalent to SBCS strings. For example, this can be used in Korean windows, for more readability of icon labels. This value has no effect unless DT_WORDBREAK is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off processing of prefix characters. Normally, <b>DrawText</b> interprets the mnemonic-prefix character &amp; as a directive to underscore the character that follows, and the mnemonic-prefix characters &amp;&amp; as a directive to print a single &amp;. By specifying DT_NOPREFIX, this processing is turned off. For example,<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_NOPREFIX: "A&amp;bc&amp;&amp;d"</para><para>Compare with DT_HIDEPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PATH_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, replaces characters in the middle of the string with ellipses so that the result fits in the specified rectangle. If the string contains backslash (\\) characters, DT_PATH_ELLIPSIS preserves as much as possible of the text after the last backslash.<para>The string is not modified unless the DT_MODIFYSTRING flag is specified.</para><para>Compare with DT_END_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PREFIXONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws only an underline at the position of the character following the ampersand (&amp;) prefix character. Does not draw any other characters in the string. For example,<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"n</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_PREFIXONLY: " _ "</para><para>Compare with DT_HIDEPREFIX and DT_NOPREFIX.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Layout in right-to-left reading order for bidirectional text when the font selected into the <i>hdc</i> is a Hebrew or Arabic font. The default reading order for all text is left-to-right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_SINGLELINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Displays text on a single line only. Carriage returns and line feeds do not break the line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TABSTOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets tab stops. Bits 15-8 (high-order byte of the low-order word) of the <i>uFormat</i> parameter specify the number of characters for each tab. The default number of characters per tab is eight. The DT_CALCRECT, DT_EXTERNALLEADING, DT_INTERNAL, DT_NOCLIP, and DT_NOPREFIX values cannot be used with the DT_TABSTOP value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the top of the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_VCENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text vertically. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORDBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Breaks words. Lines are automatically broken between words if a word would extend past the edge of the rectangle specified by the <i>lpRect</i> parameter. A carriage return-line feed sequence also breaks the line.<para>If this is not specified, output is on one line.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORD_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Truncates any word that does not fit in the rectangle and adds ellipses.<para>Compare with DT_END_ELLIPSIS and DT_PATH_ELLIPSIS.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the height of the text in logical units. If DT_VCENTER or DT_BOTTOM is specified, the return value is the offset from <code>lpRect-&gt;top</code> to the bottom of the drawn text</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawTextEx">
    <summary>The <b>DrawTextEx</b> function draws formatted text in the specified rectangle.</summary>
    <param name="hdc">A handle to the device context in which to draw.</param>
    <param name="lpchText">
      <para>A pointer to the string that contains the text to draw. If the <i>cchText</i> parameter is -1, the string must be null-terminated.</para>
      <para>If <i>dwDTFormat</i> includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.</para>
    </param>
    <param name="cchText">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpchText</i>. If <i>cchText</i> is -1, then the <i>lpchText</i> parameter is assumed to be a pointer to a null-terminated string and <b>DrawTextEx</b> computes the character count automatically.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that contains the rectangle, in logical coordinates, in which the text is to be formatted.</param>
    <param name="format">
      <para>The formatting options. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_BOTTOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the bottom of the rectangle. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CALCRECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines the width and height of the rectangle. If there are multiple lines of text, <b>DrawTextEx</b> uses the width of the rectangle pointed to by the <i>lprc</i> parameter and extends the base of the rectangle to bound the last line of text. If there is only one line of text, <b>DrawTextEx</b> modifies the right side of the rectangle so that it bounds the last character in the line. In either case, <b>DrawTextEx</b> returns the height of the formatted text, but does not draw the text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text horizontally in the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EDITCONTROL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Duplicates the text-displaying characteristics of a multiline edit control. Specifically, the average character width is calculated in the same manner as for an edit control, and the function does not display a partially visible last line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_END_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, replaces the end of a string with ellipses so that the result fits in the specified rectangle. Any word (not at the end of the string) that goes beyond the limits of the rectangle is truncated without ellipses. The string is not modified unless the DT_MODIFYSTRING flag is specified.<para>Compare with DT_PATH_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXPANDTABS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Expands tab characters. The default number of characters per tab is eight.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXTERNALLEADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes the font external leading in line height. Normally, external leading is not included in the height of a line of text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_HIDEPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Ignores the ampersand (&amp;) prefix character in the text. The letter that follows will not be underlined, but other mnemonic-prefix characters are still processed.<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_HIDEPREFIX: "Abc&amp;d"</para><para>Compare with DT_NOPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_INTERNAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the system font to calculate text metrics.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_LEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the left.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_MODIFYSTRING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Modifies the specified string to match the displayed text. This value has no effect unless DT_END_ELLIPSIS or DT_PATH_ELLIPSIS is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOCLIP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws without clipping. <b>DrawTextEx</b> is somewhat faster when DT_NOCLIP is used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOFULLWIDTHCHARBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Prevents a line break at a DBCS (double-wide character string), so that the line-breaking rule is equivalent to SBCS strings. For example, this can be used in Korean windows, for more readability of icon labels. This value has no effect unless DT_WORDBREAK is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off processing of prefix characters. Normally, <b>DrawTextEx</b> interprets the ampersand (&amp;) mnemonic-prefix character as a directive to underscore the character that follows, and the double-ampersand (&amp;&amp;) mnemonic-prefix characters as a directive to print a single ampersand. By specifying DT_NOPREFIX, this processing is turned off. Compare with DT_HIDEPREFIX and DT_PREFIXONLY</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PATH_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, replaces characters in the middle of the string with ellipses so that the result fits in the specified rectangle. If the string contains backslash (\\) characters, DT_PATH_ELLIPSIS preserves as much as possible of the text after the last backslash. The string is not modified unless the DT_MODIFYSTRING flag is specified.<para>Compare with DT_END_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PREFIXONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws only an underline at the position of the character following the ampersand (&amp;) prefix character. Does not draw any character in the string.<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>PREFIXONLY: " _ "</para><para>Compare with DT_NOPREFIX and DT_HIDEPREFIX.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Layout in right-to-left reading order for bidirectional text when the font selected into the <i>hdc</i> is a Hebrew or Arabic font. The default reading order for all text is left-to-right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_SINGLELINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Displays text on a single line only. Carriage returns and line feeds do not break the line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TABSTOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets tab stops. The <see cref="DRAWTEXTPARAMS" /> structure pointed to by the <i>lpDTParams</i> parameter specifies the number of average character widths per tab stop.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the top of the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_VCENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text vertically. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORDBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Breaks words. Lines are automatically broken between words if a word extends past the edge of the rectangle specified by the <i>lprc</i> parameter. A carriage return-line feed sequence also breaks the line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORD_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Truncates any word that does not fit in the rectangle and adds ellipses.<para>Compare with DT_END_ELLIPSIS and DT_PATH_ELLIPSIS.</para></description>
        </listheader>
      </list>
    </param>
    <param name="lpdtp">A pointer to a <see cref="DRAWTEXTPARAMS" /> structure that specifies additional formatting options. This parameter can be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is the text height in logical units. If DT_VCENTER or DT_BOTTOM is specified, the return value is the offset from <code>lprc-&gt;top</code> to the bottom of the drawn text</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawTextExA">
    <summary>The <b>DrawTextEx</b> function draws formatted text in the specified rectangle.</summary>
    <param name="hdc">A handle to the device context in which to draw.</param>
    <param name="lpchText">
      <para>A pointer to the string that contains the text to draw. If the <i>cchText</i> parameter is -1, the string must be null-terminated.</para>
      <para>If <i>dwDTFormat</i> includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.</para>
    </param>
    <param name="cchText">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpchText</i>. If <i>cchText</i> is -1, then the <i>lpchText</i> parameter is assumed to be a pointer to a null-terminated string and <b>DrawTextEx</b> computes the character count automatically.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that contains the rectangle, in logical coordinates, in which the text is to be formatted.</param>
    <param name="format">
      <para>The formatting options. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_BOTTOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the bottom of the rectangle. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CALCRECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines the width and height of the rectangle. If there are multiple lines of text, <b>DrawTextEx</b> uses the width of the rectangle pointed to by the <i>lprc</i> parameter and extends the base of the rectangle to bound the last line of text. If there is only one line of text, <b>DrawTextEx</b> modifies the right side of the rectangle so that it bounds the last character in the line. In either case, <b>DrawTextEx</b> returns the height of the formatted text, but does not draw the text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text horizontally in the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EDITCONTROL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Duplicates the text-displaying characteristics of a multiline edit control. Specifically, the average character width is calculated in the same manner as for an edit control, and the function does not display a partially visible last line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_END_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, replaces the end of a string with ellipses so that the result fits in the specified rectangle. Any word (not at the end of the string) that goes beyond the limits of the rectangle is truncated without ellipses. The string is not modified unless the DT_MODIFYSTRING flag is specified.<para>Compare with DT_PATH_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXPANDTABS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Expands tab characters. The default number of characters per tab is eight.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXTERNALLEADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes the font external leading in line height. Normally, external leading is not included in the height of a line of text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_HIDEPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Ignores the ampersand (&amp;) prefix character in the text. The letter that follows will not be underlined, but other mnemonic-prefix characters are still processed.<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_HIDEPREFIX: "Abc&amp;d"</para><para>Compare with DT_NOPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_INTERNAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the system font to calculate text metrics.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_LEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the left.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_MODIFYSTRING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Modifies the specified string to match the displayed text. This value has no effect unless DT_END_ELLIPSIS or DT_PATH_ELLIPSIS is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOCLIP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws without clipping. <b>DrawTextEx</b> is somewhat faster when DT_NOCLIP is used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOFULLWIDTHCHARBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Prevents a line break at a DBCS (double-wide character string), so that the line-breaking rule is equivalent to SBCS strings. For example, this can be used in Korean windows, for more readability of icon labels. This value has no effect unless DT_WORDBREAK is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off processing of prefix characters. Normally, <b>DrawTextEx</b> interprets the ampersand (&amp;) mnemonic-prefix character as a directive to underscore the character that follows, and the double-ampersand (&amp;&amp;) mnemonic-prefix characters as a directive to print a single ampersand. By specifying DT_NOPREFIX, this processing is turned off. Compare with DT_HIDEPREFIX and DT_PREFIXONLY</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PATH_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, replaces characters in the middle of the string with ellipses so that the result fits in the specified rectangle. If the string contains backslash (\\) characters, DT_PATH_ELLIPSIS preserves as much as possible of the text after the last backslash. The string is not modified unless the DT_MODIFYSTRING flag is specified.<para>Compare with DT_END_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PREFIXONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws only an underline at the position of the character following the ampersand (&amp;) prefix character. Does not draw any character in the string.<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>PREFIXONLY: " _ "</para><para>Compare with DT_NOPREFIX and DT_HIDEPREFIX.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Layout in right-to-left reading order for bidirectional text when the font selected into the <i>hdc</i> is a Hebrew or Arabic font. The default reading order for all text is left-to-right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_SINGLELINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Displays text on a single line only. Carriage returns and line feeds do not break the line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TABSTOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets tab stops. The <see cref="DRAWTEXTPARAMS" /> structure pointed to by the <i>lpDTParams</i> parameter specifies the number of average character widths per tab stop.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the top of the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_VCENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text vertically. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORDBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Breaks words. Lines are automatically broken between words if a word extends past the edge of the rectangle specified by the <i>lprc</i> parameter. A carriage return-line feed sequence also breaks the line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORD_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Truncates any word that does not fit in the rectangle and adds ellipses.<para>Compare with DT_END_ELLIPSIS and DT_PATH_ELLIPSIS.</para></description>
        </listheader>
      </list>
    </param>
    <param name="lpdtp">A pointer to a <see cref="DRAWTEXTPARAMS" /> structure that specifies additional formatting options. This parameter can be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is the text height in logical units. If DT_VCENTER or DT_BOTTOM is specified, the return value is the offset from <code>lprc-&gt;top</code> to the bottom of the drawn text</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawTextExW">
    <summary>The <b>DrawTextEx</b> function draws formatted text in the specified rectangle.</summary>
    <param name="hdc">A handle to the device context in which to draw.</param>
    <param name="lpchText">
      <para>A pointer to the string that contains the text to draw. If the <i>cchText</i> parameter is -1, the string must be null-terminated.</para>
      <para>If <i>dwDTFormat</i> includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.</para>
    </param>
    <param name="cchText">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpchText</i>. If <i>cchText</i> is -1, then the <i>lpchText</i> parameter is assumed to be a pointer to a null-terminated string and <b>DrawTextEx</b> computes the character count automatically.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that contains the rectangle, in logical coordinates, in which the text is to be formatted.</param>
    <param name="format">
      <para>The formatting options. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_BOTTOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the bottom of the rectangle. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CALCRECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines the width and height of the rectangle. If there are multiple lines of text, <b>DrawTextEx</b> uses the width of the rectangle pointed to by the <i>lprc</i> parameter and extends the base of the rectangle to bound the last line of text. If there is only one line of text, <b>DrawTextEx</b> modifies the right side of the rectangle so that it bounds the last character in the line. In either case, <b>DrawTextEx</b> returns the height of the formatted text, but does not draw the text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text horizontally in the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EDITCONTROL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Duplicates the text-displaying characteristics of a multiline edit control. Specifically, the average character width is calculated in the same manner as for an edit control, and the function does not display a partially visible last line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_END_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, replaces the end of a string with ellipses so that the result fits in the specified rectangle. Any word (not at the end of the string) that goes beyond the limits of the rectangle is truncated without ellipses. The string is not modified unless the DT_MODIFYSTRING flag is specified.<para>Compare with DT_PATH_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXPANDTABS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Expands tab characters. The default number of characters per tab is eight.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXTERNALLEADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes the font external leading in line height. Normally, external leading is not included in the height of a line of text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_HIDEPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Ignores the ampersand (&amp;) prefix character in the text. The letter that follows will not be underlined, but other mnemonic-prefix characters are still processed.<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_HIDEPREFIX: "Abc&amp;d"</para><para>Compare with DT_NOPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_INTERNAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the system font to calculate text metrics.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_LEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the left.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_MODIFYSTRING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Modifies the specified string to match the displayed text. This value has no effect unless DT_END_ELLIPSIS or DT_PATH_ELLIPSIS is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOCLIP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws without clipping. <b>DrawTextEx</b> is somewhat faster when DT_NOCLIP is used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOFULLWIDTHCHARBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Prevents a line break at a DBCS (double-wide character string), so that the line-breaking rule is equivalent to SBCS strings. For example, this can be used in Korean windows, for more readability of icon labels. This value has no effect unless DT_WORDBREAK is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off processing of prefix characters. Normally, <b>DrawTextEx</b> interprets the ampersand (&amp;) mnemonic-prefix character as a directive to underscore the character that follows, and the double-ampersand (&amp;&amp;) mnemonic-prefix characters as a directive to print a single ampersand. By specifying DT_NOPREFIX, this processing is turned off. Compare with DT_HIDEPREFIX and DT_PREFIXONLY</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PATH_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, replaces characters in the middle of the string with ellipses so that the result fits in the specified rectangle. If the string contains backslash (\\) characters, DT_PATH_ELLIPSIS preserves as much as possible of the text after the last backslash. The string is not modified unless the DT_MODIFYSTRING flag is specified.<para>Compare with DT_END_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PREFIXONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws only an underline at the position of the character following the ampersand (&amp;) prefix character. Does not draw any character in the string.<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>PREFIXONLY: " _ "</para><para>Compare with DT_NOPREFIX and DT_HIDEPREFIX.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Layout in right-to-left reading order for bidirectional text when the font selected into the <i>hdc</i> is a Hebrew or Arabic font. The default reading order for all text is left-to-right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_SINGLELINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Displays text on a single line only. Carriage returns and line feeds do not break the line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TABSTOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets tab stops. The <see cref="DRAWTEXTPARAMS" /> structure pointed to by the <i>lpDTParams</i> parameter specifies the number of average character widths per tab stop.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the top of the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_VCENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text vertically. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORDBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Breaks words. Lines are automatically broken between words if a word extends past the edge of the rectangle specified by the <i>lprc</i> parameter. A carriage return-line feed sequence also breaks the line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORD_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Truncates any word that does not fit in the rectangle and adds ellipses.<para>Compare with DT_END_ELLIPSIS and DT_PATH_ELLIPSIS.</para></description>
        </listheader>
      </list>
    </param>
    <param name="lpdtp">A pointer to a <see cref="DRAWTEXTPARAMS" /> structure that specifies additional formatting options. This parameter can be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is the text height in logical units. If DT_VCENTER or DT_BOTTOM is specified, the return value is the offset from <code>lprc-&gt;top</code> to the bottom of the drawn text</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawTextEx">
    <summary>The <b>DrawTextEx</b> function draws formatted text in the specified rectangle.</summary>
    <param name="hdc">A handle to the device context in which to draw.</param>
    <param name="lpchText">
      <para>A pointer to the string that contains the text to draw. If the <i>cchText</i> parameter is -1, the string must be null-terminated.</para>
      <para>If <i>dwDTFormat</i> includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.</para>
    </param>
    <param name="cchText">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpchText</i>. If <i>cchText</i> is -1, then the <i>lpchText</i> parameter is assumed to be a pointer to a null-terminated string and <b>DrawTextEx</b> computes the character count automatically.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that contains the rectangle, in logical coordinates, in which the text is to be formatted.</param>
    <param name="format">
      <para>The formatting options. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_BOTTOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the bottom of the rectangle. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CALCRECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines the width and height of the rectangle. If there are multiple lines of text, <b>DrawTextEx</b> uses the width of the rectangle pointed to by the <i>lprc</i> parameter and extends the base of the rectangle to bound the last line of text. If there is only one line of text, <b>DrawTextEx</b> modifies the right side of the rectangle so that it bounds the last character in the line. In either case, <b>DrawTextEx</b> returns the height of the formatted text, but does not draw the text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text horizontally in the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EDITCONTROL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Duplicates the text-displaying characteristics of a multiline edit control. Specifically, the average character width is calculated in the same manner as for an edit control, and the function does not display a partially visible last line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_END_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, replaces the end of a string with ellipses so that the result fits in the specified rectangle. Any word (not at the end of the string) that goes beyond the limits of the rectangle is truncated without ellipses. The string is not modified unless the DT_MODIFYSTRING flag is specified.<para>Compare with DT_PATH_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXPANDTABS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Expands tab characters. The default number of characters per tab is eight.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXTERNALLEADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes the font external leading in line height. Normally, external leading is not included in the height of a line of text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_HIDEPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Ignores the ampersand (&amp;) prefix character in the text. The letter that follows will not be underlined, but other mnemonic-prefix characters are still processed.<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_HIDEPREFIX: "Abc&amp;d"</para><para>Compare with DT_NOPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_INTERNAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the system font to calculate text metrics.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_LEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the left.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_MODIFYSTRING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Modifies the specified string to match the displayed text. This value has no effect unless DT_END_ELLIPSIS or DT_PATH_ELLIPSIS is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOCLIP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws without clipping. <b>DrawTextEx</b> is somewhat faster when DT_NOCLIP is used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOFULLWIDTHCHARBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Prevents a line break at a DBCS (double-wide character string), so that the line-breaking rule is equivalent to SBCS strings. For example, this can be used in Korean windows, for more readability of icon labels. This value has no effect unless DT_WORDBREAK is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off processing of prefix characters. Normally, <b>DrawTextEx</b> interprets the ampersand (&amp;) mnemonic-prefix character as a directive to underscore the character that follows, and the double-ampersand (&amp;&amp;) mnemonic-prefix characters as a directive to print a single ampersand. By specifying DT_NOPREFIX, this processing is turned off. Compare with DT_HIDEPREFIX and DT_PREFIXONLY</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PATH_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, replaces characters in the middle of the string with ellipses so that the result fits in the specified rectangle. If the string contains backslash (\\) characters, DT_PATH_ELLIPSIS preserves as much as possible of the text after the last backslash. The string is not modified unless the DT_MODIFYSTRING flag is specified.<para>Compare with DT_END_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PREFIXONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws only an underline at the position of the character following the ampersand (&amp;) prefix character. Does not draw any character in the string.<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>PREFIXONLY: " _ "</para><para>Compare with DT_NOPREFIX and DT_HIDEPREFIX.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Layout in right-to-left reading order for bidirectional text when the font selected into the <i>hdc</i> is a Hebrew or Arabic font. The default reading order for all text is left-to-right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_SINGLELINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Displays text on a single line only. Carriage returns and line feeds do not break the line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TABSTOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets tab stops. The <see cref="DRAWTEXTPARAMS" /> structure pointed to by the <i>lpDTParams</i> parameter specifies the number of average character widths per tab stop.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the top of the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_VCENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text vertically. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORDBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Breaks words. Lines are automatically broken between words if a word extends past the edge of the rectangle specified by the <i>lprc</i> parameter. A carriage return-line feed sequence also breaks the line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORD_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Truncates any word that does not fit in the rectangle and adds ellipses.<para>Compare with DT_END_ELLIPSIS and DT_PATH_ELLIPSIS.</para></description>
        </listheader>
      </list>
    </param>
    <param name="lpdtp">A pointer to a <see cref="DRAWTEXTPARAMS" /> structure that specifies additional formatting options. This parameter can be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is the text height in logical units. If DT_VCENTER or DT_BOTTOM is specified, the return value is the offset from <code>lprc-&gt;top</code> to the bottom of the drawn text.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawTextExA">
    <summary>The <b>DrawTextEx</b> function draws formatted text in the specified rectangle.</summary>
    <param name="hdc">A handle to the device context in which to draw.</param>
    <param name="lpchText">
      <para>A pointer to the string that contains the text to draw. If the <i>cchText</i> parameter is -1, the string must be null-terminated.</para>
      <para>If <i>dwDTFormat</i> includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.</para>
    </param>
    <param name="cchText">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpchText</i>. If <i>cchText</i> is -1, then the <i>lpchText</i> parameter is assumed to be a pointer to a null-terminated string and <b>DrawTextEx</b> computes the character count automatically.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that contains the rectangle, in logical coordinates, in which the text is to be formatted.</param>
    <param name="format">
      <para>The formatting options. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_BOTTOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the bottom of the rectangle. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CALCRECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines the width and height of the rectangle. If there are multiple lines of text, <b>DrawTextEx</b> uses the width of the rectangle pointed to by the <i>lprc</i> parameter and extends the base of the rectangle to bound the last line of text. If there is only one line of text, <b>DrawTextEx</b> modifies the right side of the rectangle so that it bounds the last character in the line. In either case, <b>DrawTextEx</b> returns the height of the formatted text, but does not draw the text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text horizontally in the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EDITCONTROL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Duplicates the text-displaying characteristics of a multiline edit control. Specifically, the average character width is calculated in the same manner as for an edit control, and the function does not display a partially visible last line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_END_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, replaces the end of a string with ellipses so that the result fits in the specified rectangle. Any word (not at the end of the string) that goes beyond the limits of the rectangle is truncated without ellipses. The string is not modified unless the DT_MODIFYSTRING flag is specified.<para>Compare with DT_PATH_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXPANDTABS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Expands tab characters. The default number of characters per tab is eight.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXTERNALLEADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes the font external leading in line height. Normally, external leading is not included in the height of a line of text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_HIDEPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Ignores the ampersand (&amp;) prefix character in the text. The letter that follows will not be underlined, but other mnemonic-prefix characters are still processed.<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_HIDEPREFIX: "Abc&amp;d"</para><para>Compare with DT_NOPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_INTERNAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the system font to calculate text metrics.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_LEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the left.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_MODIFYSTRING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Modifies the specified string to match the displayed text. This value has no effect unless DT_END_ELLIPSIS or DT_PATH_ELLIPSIS is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOCLIP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws without clipping. <b>DrawTextEx</b> is somewhat faster when DT_NOCLIP is used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOFULLWIDTHCHARBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Prevents a line break at a DBCS (double-wide character string), so that the line-breaking rule is equivalent to SBCS strings. For example, this can be used in Korean windows, for more readability of icon labels. This value has no effect unless DT_WORDBREAK is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off processing of prefix characters. Normally, <b>DrawTextEx</b> interprets the ampersand (&amp;) mnemonic-prefix character as a directive to underscore the character that follows, and the double-ampersand (&amp;&amp;) mnemonic-prefix characters as a directive to print a single ampersand. By specifying DT_NOPREFIX, this processing is turned off. Compare with DT_HIDEPREFIX and DT_PREFIXONLY</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PATH_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, replaces characters in the middle of the string with ellipses so that the result fits in the specified rectangle. If the string contains backslash (\\) characters, DT_PATH_ELLIPSIS preserves as much as possible of the text after the last backslash. The string is not modified unless the DT_MODIFYSTRING flag is specified.<para>Compare with DT_END_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PREFIXONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws only an underline at the position of the character following the ampersand (&amp;) prefix character. Does not draw any character in the string.<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>PREFIXONLY: " _ "</para><para>Compare with DT_NOPREFIX and DT_HIDEPREFIX.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Layout in right-to-left reading order for bidirectional text when the font selected into the <i>hdc</i> is a Hebrew or Arabic font. The default reading order for all text is left-to-right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_SINGLELINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Displays text on a single line only. Carriage returns and line feeds do not break the line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TABSTOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets tab stops. The <see cref="DRAWTEXTPARAMS" /> structure pointed to by the <i>lpDTParams</i> parameter specifies the number of average character widths per tab stop.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the top of the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_VCENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text vertically. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORDBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Breaks words. Lines are automatically broken between words if a word extends past the edge of the rectangle specified by the <i>lprc</i> parameter. A carriage return-line feed sequence also breaks the line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORD_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Truncates any word that does not fit in the rectangle and adds ellipses.<para>Compare with DT_END_ELLIPSIS and DT_PATH_ELLIPSIS.</para></description>
        </listheader>
      </list>
    </param>
    <param name="lpdtp">A pointer to a <see cref="DRAWTEXTPARAMS" /> structure that specifies additional formatting options. This parameter can be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is the text height in logical units. If DT_VCENTER or DT_BOTTOM is specified, the return value is the offset from <code>lprc-&gt;top</code> to the bottom of the drawn text.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawTextExW">
    <summary>The <b>DrawTextEx</b> function draws formatted text in the specified rectangle.</summary>
    <param name="hdc">A handle to the device context in which to draw.</param>
    <param name="lpchText">
      <para>A pointer to the string that contains the text to draw. If the <i>cchText</i> parameter is -1, the string must be null-terminated.</para>
      <para>If <i>dwDTFormat</i> includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.</para>
    </param>
    <param name="cchText">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpchText</i>. If <i>cchText</i> is -1, then the <i>lpchText</i> parameter is assumed to be a pointer to a null-terminated string and <b>DrawTextEx</b> computes the character count automatically.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that contains the rectangle, in logical coordinates, in which the text is to be formatted.</param>
    <param name="format">
      <para>The formatting options. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_BOTTOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the bottom of the rectangle. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CALCRECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines the width and height of the rectangle. If there are multiple lines of text, <b>DrawTextEx</b> uses the width of the rectangle pointed to by the <i>lprc</i> parameter and extends the base of the rectangle to bound the last line of text. If there is only one line of text, <b>DrawTextEx</b> modifies the right side of the rectangle so that it bounds the last character in the line. In either case, <b>DrawTextEx</b> returns the height of the formatted text, but does not draw the text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text horizontally in the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EDITCONTROL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Duplicates the text-displaying characteristics of a multiline edit control. Specifically, the average character width is calculated in the same manner as for an edit control, and the function does not display a partially visible last line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_END_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, replaces the end of a string with ellipses so that the result fits in the specified rectangle. Any word (not at the end of the string) that goes beyond the limits of the rectangle is truncated without ellipses. The string is not modified unless the DT_MODIFYSTRING flag is specified.<para>Compare with DT_PATH_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXPANDTABS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Expands tab characters. The default number of characters per tab is eight.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXTERNALLEADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes the font external leading in line height. Normally, external leading is not included in the height of a line of text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_HIDEPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Ignores the ampersand (&amp;) prefix character in the text. The letter that follows will not be underlined, but other mnemonic-prefix characters are still processed.<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_HIDEPREFIX: "Abc&amp;d"</para><para>Compare with DT_NOPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_INTERNAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the system font to calculate text metrics.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_LEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the left.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_MODIFYSTRING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Modifies the specified string to match the displayed text. This value has no effect unless DT_END_ELLIPSIS or DT_PATH_ELLIPSIS is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOCLIP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws without clipping. <b>DrawTextEx</b> is somewhat faster when DT_NOCLIP is used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOFULLWIDTHCHARBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Prevents a line break at a DBCS (double-wide character string), so that the line-breaking rule is equivalent to SBCS strings. For example, this can be used in Korean windows, for more readability of icon labels. This value has no effect unless DT_WORDBREAK is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off processing of prefix characters. Normally, <b>DrawTextEx</b> interprets the ampersand (&amp;) mnemonic-prefix character as a directive to underscore the character that follows, and the double-ampersand (&amp;&amp;) mnemonic-prefix characters as a directive to print a single ampersand. By specifying DT_NOPREFIX, this processing is turned off. Compare with DT_HIDEPREFIX and DT_PREFIXONLY</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PATH_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, replaces characters in the middle of the string with ellipses so that the result fits in the specified rectangle. If the string contains backslash (\\) characters, DT_PATH_ELLIPSIS preserves as much as possible of the text after the last backslash. The string is not modified unless the DT_MODIFYSTRING flag is specified.<para>Compare with DT_END_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PREFIXONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws only an underline at the position of the character following the ampersand (&amp;) prefix character. Does not draw any character in the string.<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>PREFIXONLY: " _ "</para><para>Compare with DT_NOPREFIX and DT_HIDEPREFIX.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Layout in right-to-left reading order for bidirectional text when the font selected into the <i>hdc</i> is a Hebrew or Arabic font. The default reading order for all text is left-to-right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_SINGLELINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Displays text on a single line only. Carriage returns and line feeds do not break the line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TABSTOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets tab stops. The <see cref="DRAWTEXTPARAMS" /> structure pointed to by the <i>lpDTParams</i> parameter specifies the number of average character widths per tab stop.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the top of the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_VCENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text vertically. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORDBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Breaks words. Lines are automatically broken between words if a word extends past the edge of the rectangle specified by the <i>lprc</i> parameter. A carriage return-line feed sequence also breaks the line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORD_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Truncates any word that does not fit in the rectangle and adds ellipses.<para>Compare with DT_END_ELLIPSIS and DT_PATH_ELLIPSIS.</para></description>
        </listheader>
      </list>
    </param>
    <param name="lpdtp">A pointer to a <see cref="DRAWTEXTPARAMS" /> structure that specifies additional formatting options. This parameter can be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is the text height in logical units. If DT_VCENTER or DT_BOTTOM is specified, the return value is the offset from <code>lprc-&gt;top</code> to the bottom of the drawn text.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawText">
    <summary>
      <para>The <b>DrawText</b> function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth).</para>
      <para>To specify additional formatting options, use the <see cref="DrawTextEx" /> function.</para>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpchText">
      <para>A pointer to the string that specifies the text to be drawn. If the <i>nCount</i> parameter is -1, the string must be null-terminated.</para>
      <para>If <i>uFormat</i> includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.</para>
    </param>
    <param name="cchText">The length, in characters, of the string. If <i>nCount</i> is -1, then the <i>lpchText</i> parameter is assumed to be a pointer to a null-terminated string and <b>DrawText</b> computes the character count automatically.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that contains the rectangle (in logical coordinates) in which the text is to be formatted.</param>
    <param name="format">
      <para>The method of formatting the text. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_BOTTOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the bottom of the rectangle. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CALCRECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines the width and height of the rectangle. If there are multiple lines of text, <b>DrawText</b> uses the width of the rectangle pointed to by the <i>lpRect</i> parameter and extends the base of the rectangle to bound the last line of text. If the largest word is wider than the rectangle, the width is expanded. If the text is less than the width of the rectangle, the width is reduced. If there is only one line of text, <b>DrawText</b> modifies the right side of the rectangle so that it bounds the last character in the line. In either case, <b>DrawText</b> returns the height of the formatted text but does not draw the text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text horizontally in the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EDITCONTROL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Duplicates the text-displaying characteristics of a multiline edit control. Specifically, the average character width is calculated in the same manner as for an edit control, and the function does not display a partially visible last line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_END_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, if the end of a string does not fit in the rectangle, it is truncated and ellipses are added. If a word that is not at the end of the string goes beyond the limits of the rectangle, it is truncated without ellipses.<para>The string is not modified unless the DT_MODIFYSTRING flag is specified.</para><para>Compare with DT_PATH_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXPANDTABS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Expands tab characters. The default number of characters per tab is eight. The DT_WORD_ELLIPSIS, DT_PATH_ELLIPSIS, and DT_END_ELLIPSIS values cannot be used with the DT_EXPANDTABS value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXTERNALLEADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes the font external leading in line height. Normally, external leading is not included in the height of a line of text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_HIDEPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Ignores the ampersand (&amp;) prefix character in the text. The letter that follows will not be underlined, but other mnemonic-prefix characters are still processed.<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_HIDEPREFIX: "Abc&amp;d"</para><para>Compare with DT_NOPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_INTERNAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the system font to calculate text metrics.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_LEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the left.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_MODIFYSTRING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Modifies the specified string to match the displayed text. This value has no effect unless DT_END_ELLIPSIS or DT_PATH_ELLIPSIS is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOCLIP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws without clipping. <b>DrawText</b> is somewhat faster when DT_NOCLIP is used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOFULLWIDTHCHARBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Prevents a line break at a DBCS (double-wide character string), so that the line breaking rule is equivalent to SBCS strings. For example, this can be used in Korean windows, for more readability of icon labels. This value has no effect unless DT_WORDBREAK is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off processing of prefix characters. Normally, <b>DrawText</b> interprets the mnemonic-prefix character &amp; as a directive to underscore the character that follows, and the mnemonic-prefix characters &amp;&amp; as a directive to print a single &amp;. By specifying DT_NOPREFIX, this processing is turned off. For example,<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_NOPREFIX: "A&amp;bc&amp;&amp;d"</para><para>Compare with DT_HIDEPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PATH_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, replaces characters in the middle of the string with ellipses so that the result fits in the specified rectangle. If the string contains backslash (\\) characters, DT_PATH_ELLIPSIS preserves as much as possible of the text after the last backslash.<para>The string is not modified unless the DT_MODIFYSTRING flag is specified.</para><para>Compare with DT_END_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PREFIXONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws only an underline at the position of the character following the ampersand (&amp;) prefix character. Does not draw any other characters in the string. For example,<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"n</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_PREFIXONLY: " _ "</para><para>Compare with DT_HIDEPREFIX and DT_NOPREFIX.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Layout in right-to-left reading order for bidirectional text when the font selected into the <i>hdc</i> is a Hebrew or Arabic font. The default reading order for all text is left-to-right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_SINGLELINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Displays text on a single line only. Carriage returns and line feeds do not break the line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TABSTOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets tab stops. Bits 15-8 (high-order byte of the low-order word) of the <i>uFormat</i> parameter specify the number of characters for each tab. The default number of characters per tab is eight. The DT_CALCRECT, DT_EXTERNALLEADING, DT_INTERNAL, DT_NOCLIP, and DT_NOPREFIX values cannot be used with the DT_TABSTOP value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the top of the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_VCENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text vertically. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORDBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Breaks words. Lines are automatically broken between words if a word would extend past the edge of the rectangle specified by the <i>lpRect</i> parameter. A carriage return-line feed sequence also breaks the line.<para>If this is not specified, output is on one line.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORD_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Truncates any word that does not fit in the rectangle and adds ellipses.<para>Compare with DT_END_ELLIPSIS and DT_PATH_ELLIPSIS.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the height of the text in logical units. If DT_VCENTER or DT_BOTTOM is specified, the return value is the offset from <code>lpRect-&gt;top</code> to the bottom of the drawn text</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawTextA">
    <summary>
      <para>The <b>DrawText</b> function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth).</para>
      <para>To specify additional formatting options, use the <see cref="DrawTextEx" /> function.</para>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpchText">
      <para>A pointer to the string that specifies the text to be drawn. If the <i>nCount</i> parameter is -1, the string must be null-terminated.</para>
      <para>If <i>uFormat</i> includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.</para>
    </param>
    <param name="cchText">The length, in characters, of the string. If <i>nCount</i> is -1, then the <i>lpchText</i> parameter is assumed to be a pointer to a null-terminated string and <b>DrawText</b> computes the character count automatically.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that contains the rectangle (in logical coordinates) in which the text is to be formatted.</param>
    <param name="format">
      <para>The method of formatting the text. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_BOTTOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the bottom of the rectangle. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CALCRECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines the width and height of the rectangle. If there are multiple lines of text, <b>DrawText</b> uses the width of the rectangle pointed to by the <i>lpRect</i> parameter and extends the base of the rectangle to bound the last line of text. If the largest word is wider than the rectangle, the width is expanded. If the text is less than the width of the rectangle, the width is reduced. If there is only one line of text, <b>DrawText</b> modifies the right side of the rectangle so that it bounds the last character in the line. In either case, <b>DrawText</b> returns the height of the formatted text but does not draw the text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text horizontally in the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EDITCONTROL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Duplicates the text-displaying characteristics of a multiline edit control. Specifically, the average character width is calculated in the same manner as for an edit control, and the function does not display a partially visible last line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_END_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, if the end of a string does not fit in the rectangle, it is truncated and ellipses are added. If a word that is not at the end of the string goes beyond the limits of the rectangle, it is truncated without ellipses.<para>The string is not modified unless the DT_MODIFYSTRING flag is specified.</para><para>Compare with DT_PATH_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXPANDTABS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Expands tab characters. The default number of characters per tab is eight. The DT_WORD_ELLIPSIS, DT_PATH_ELLIPSIS, and DT_END_ELLIPSIS values cannot be used with the DT_EXPANDTABS value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXTERNALLEADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes the font external leading in line height. Normally, external leading is not included in the height of a line of text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_HIDEPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Ignores the ampersand (&amp;) prefix character in the text. The letter that follows will not be underlined, but other mnemonic-prefix characters are still processed.<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_HIDEPREFIX: "Abc&amp;d"</para><para>Compare with DT_NOPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_INTERNAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the system font to calculate text metrics.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_LEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the left.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_MODIFYSTRING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Modifies the specified string to match the displayed text. This value has no effect unless DT_END_ELLIPSIS or DT_PATH_ELLIPSIS is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOCLIP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws without clipping. <b>DrawText</b> is somewhat faster when DT_NOCLIP is used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOFULLWIDTHCHARBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Prevents a line break at a DBCS (double-wide character string), so that the line breaking rule is equivalent to SBCS strings. For example, this can be used in Korean windows, for more readability of icon labels. This value has no effect unless DT_WORDBREAK is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off processing of prefix characters. Normally, <b>DrawText</b> interprets the mnemonic-prefix character &amp; as a directive to underscore the character that follows, and the mnemonic-prefix characters &amp;&amp; as a directive to print a single &amp;. By specifying DT_NOPREFIX, this processing is turned off. For example,<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_NOPREFIX: "A&amp;bc&amp;&amp;d"</para><para>Compare with DT_HIDEPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PATH_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, replaces characters in the middle of the string with ellipses so that the result fits in the specified rectangle. If the string contains backslash (\\) characters, DT_PATH_ELLIPSIS preserves as much as possible of the text after the last backslash.<para>The string is not modified unless the DT_MODIFYSTRING flag is specified.</para><para>Compare with DT_END_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PREFIXONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws only an underline at the position of the character following the ampersand (&amp;) prefix character. Does not draw any other characters in the string. For example,<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"n</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_PREFIXONLY: " _ "</para><para>Compare with DT_HIDEPREFIX and DT_NOPREFIX.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Layout in right-to-left reading order for bidirectional text when the font selected into the <i>hdc</i> is a Hebrew or Arabic font. The default reading order for all text is left-to-right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_SINGLELINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Displays text on a single line only. Carriage returns and line feeds do not break the line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TABSTOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets tab stops. Bits 15-8 (high-order byte of the low-order word) of the <i>uFormat</i> parameter specify the number of characters for each tab. The default number of characters per tab is eight. The DT_CALCRECT, DT_EXTERNALLEADING, DT_INTERNAL, DT_NOCLIP, and DT_NOPREFIX values cannot be used with the DT_TABSTOP value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the top of the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_VCENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text vertically. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORDBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Breaks words. Lines are automatically broken between words if a word would extend past the edge of the rectangle specified by the <i>lpRect</i> parameter. A carriage return-line feed sequence also breaks the line.<para>If this is not specified, output is on one line.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORD_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Truncates any word that does not fit in the rectangle and adds ellipses.<para>Compare with DT_END_ELLIPSIS and DT_PATH_ELLIPSIS.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the height of the text in logical units. If DT_VCENTER or DT_BOTTOM is specified, the return value is the offset from <code>lpRect-&gt;top</code> to the bottom of the drawn text</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.DrawTextW">
    <summary>
      <para>The <b>DrawText</b> function draws formatted text in the specified rectangle. It formats the text according to the specified method (expanding tabs, justifying characters, breaking lines, and so forth).</para>
      <para>To specify additional formatting options, use the <see cref="DrawTextEx" /> function.</para>
    </summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpchText">
      <para>A pointer to the string that specifies the text to be drawn. If the <i>nCount</i> parameter is -1, the string must be null-terminated.</para>
      <para>If <i>uFormat</i> includes DT_MODIFYSTRING, the function could add up to four additional characters to this string. The buffer containing the string should be large enough to accommodate these extra characters.</para>
    </param>
    <param name="cchText">The length, in characters, of the string. If <i>nCount</i> is -1, then the <i>lpchText</i> parameter is assumed to be a pointer to a null-terminated string and <b>DrawText</b> computes the character count automatically.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that contains the rectangle (in logical coordinates) in which the text is to be formatted.</param>
    <param name="format">
      <para>The method of formatting the text. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_BOTTOM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the bottom of the rectangle. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CALCRECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Determines the width and height of the rectangle. If there are multiple lines of text, <b>DrawText</b> uses the width of the rectangle pointed to by the <i>lpRect</i> parameter and extends the base of the rectangle to bound the last line of text. If the largest word is wider than the rectangle, the width is expanded. If the text is less than the width of the rectangle, the width is reduced. If there is only one line of text, <b>DrawText</b> modifies the right side of the rectangle so that it bounds the last character in the line. In either case, <b>DrawText</b> returns the height of the formatted text but does not draw the text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_CENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text horizontally in the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EDITCONTROL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Duplicates the text-displaying characteristics of a multiline edit control. Specifically, the average character width is calculated in the same manner as for an edit control, and the function does not display a partially visible last line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_END_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, if the end of a string does not fit in the rectangle, it is truncated and ellipses are added. If a word that is not at the end of the string goes beyond the limits of the rectangle, it is truncated without ellipses.<para>The string is not modified unless the DT_MODIFYSTRING flag is specified.</para><para>Compare with DT_PATH_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXPANDTABS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Expands tab characters. The default number of characters per tab is eight. The DT_WORD_ELLIPSIS, DT_PATH_ELLIPSIS, and DT_END_ELLIPSIS values cannot be used with the DT_EXPANDTABS value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_EXTERNALLEADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Includes the font external leading in line height. Normally, external leading is not included in the height of a line of text.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_HIDEPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Ignores the ampersand (&amp;) prefix character in the text. The letter that follows will not be underlined, but other mnemonic-prefix characters are still processed.<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_HIDEPREFIX: "Abc&amp;d"</para><para>Compare with DT_NOPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_INTERNAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the system font to calculate text metrics.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_LEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the left.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_MODIFYSTRING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Modifies the specified string to match the displayed text. This value has no effect unless DT_END_ELLIPSIS or DT_PATH_ELLIPSIS is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOCLIP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws without clipping. <b>DrawText</b> is somewhat faster when DT_NOCLIP is used.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOFULLWIDTHCHARBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Prevents a line break at a DBCS (double-wide character string), so that the line breaking rule is equivalent to SBCS strings. For example, this can be used in Korean windows, for more readability of icon labels. This value has no effect unless DT_WORDBREAK is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_NOPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Turns off processing of prefix characters. Normally, <b>DrawText</b> interprets the mnemonic-prefix character &amp; as a directive to underscore the character that follows, and the mnemonic-prefix characters &amp;&amp; as a directive to print a single &amp;. By specifying DT_NOPREFIX, this processing is turned off. For example,<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_NOPREFIX: "A&amp;bc&amp;&amp;d"</para><para>Compare with DT_HIDEPREFIX and DT_PREFIXONLY.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PATH_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>For displayed text, replaces characters in the middle of the string with ellipses so that the result fits in the specified rectangle. If the string contains backslash (\\) characters, DT_PATH_ELLIPSIS preserves as much as possible of the text after the last backslash.<para>The string is not modified unless the DT_MODIFYSTRING flag is specified.</para><para>Compare with DT_END_ELLIPSIS and DT_WORD_ELLIPSIS.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_PREFIXONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Draws only an underline at the position of the character following the ampersand (&amp;) prefix character. Does not draw any other characters in the string. For example,<para>Example:</para><para>input string: "A&amp;bc&amp;&amp;d"n</para><para>normal: "A<u>b</u>c&amp;d"</para><para>DT_PREFIXONLY: " _ "</para><para>Compare with DT_HIDEPREFIX and DT_NOPREFIX.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Aligns text to the right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_RTLREADING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Layout in right-to-left reading order for bidirectional text when the font selected into the <i>hdc</i> is a Hebrew or Arabic font. The default reading order for all text is left-to-right.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_SINGLELINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Displays text on a single line only. Carriage returns and line feeds do not break the line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TABSTOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets tab stops. Bits 15-8 (high-order byte of the low-order word) of the <i>uFormat</i> parameter specify the number of characters for each tab. The default number of characters per tab is eight. The DT_CALCRECT, DT_EXTERNALLEADING, DT_INTERNAL, DT_NOCLIP, and DT_NOPREFIX values cannot be used with the DT_TABSTOP value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_TOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Justifies the text to the top of the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_VCENTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Centers text vertically. This value is used only with the DT_SINGLELINE value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORDBREAK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Breaks words. Lines are automatically broken between words if a word would extend past the edge of the rectangle specified by the <i>lpRect</i> parameter. A carriage return-line feed sequence also breaks the line.<para>If this is not specified, output is on one line.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DT_WORD_ELLIPSIS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Truncates any word that does not fit in the rectangle and adds ellipses.<para>Compare with DT_END_ELLIPSIS and DT_PATH_ELLIPSIS.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the height of the text in logical units. If DT_VCENTER or DT_BOTTOM is specified, the return value is the offset from <code>lpRect-&gt;top</code> to the bottom of the drawn text</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.EmptyClipboard">
    <summary>Empties the clipboard and frees handles to data in the clipboard. The function then assigns ownership of the clipboard to the window that currently has the clipboard open.</summary>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnableMenuItem">
    <summary>Enables, disables, or grays the specified menu item.</summary>
    <param name="hMenu">A handle to the menu.</param>
    <param name="uIDEnableItem">The menu item to be enabled, disabled, or grayed, as determined by the <i>uEnable</i> parameter. This parameter specifies an item in a menu bar, menu, or submenu.</param>
    <param name="uEnable">
      <para>Controls the interpretation of the <i>uIDEnableItem</i> parameter and indicate whether the menu item is enabled, disabled, or grayed. This parameter must be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uIDEnableItem</i> gives the identifier of the menu item. If neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified, the <b>MF_BYCOMMAND</b> flag is the default flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uIDEnableItem</i> gives the zero-based relative position of the menu item.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_DISABLED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the menu item is disabled, but not grayed, so it cannot be selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_ENABLED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the menu item is enabled and restored from a grayed state so that it can be selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_GRAYED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the menu item is disabled and grayed so that it cannot be selected.</description>
        </listheader>
      </list>
    </param>
    <returns>The return value specifies the previous state of the menu item (it is either <b>MF_DISABLED</b>, <b>MF_ENABLED</b>, or <b>MF_GRAYED</b>). If the menu item does not exist, the return value is -1.</returns>
  </member>
  <member name="Windows.EnableMouseInPointer">
    <summary>Enables the mouse to act as a pointer input device and send <a href="https://docs.microsoft.com//windows/win32/inputmsg/messages">WM_POINTER</a> messages.</summary>
    <param name="fEnable">
      <b>TRUE</b> to turn on mouse input support in <a href="https://docs.microsoft.com//windows/win32/inputmsg/messages">WM_POINTER</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is non-zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnableNonClientDpiScaling">
    <summary>
      <para>In high-DPI displays, enables automatic display scaling of the non-client area portions of the specified top-level window. Must be called during the initialization of that window.<div><b>Note</b>  Applications running at a <a href="https://docs.microsoft.com//windows/desktop/hidpi/dpi-awareness-context">DPI_AWARENESS_CONTEXT</a> of <b>DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2</b> automatically scale their non-client areas by default. They do not need to call this function.</div></para>
    </summary>
    <param name="hwnd">The window that should have automatic scaling enabled.</param>
    <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.EnableScrollBar">
    <summary>The <b>EnableScrollBar</b> function enables or disables one or both scroll bar arrows.</summary>
    <param name="hWnd">Handle to a window or a scroll bar control, depending on the value of the<i>wSBflags</i> parameter.</param>
    <param name="wSBflags">
      <para>Specifies the scroll bar type. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_BOTH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables or disables the arrows on the horizontal and vertical scroll bars associated with the specified window. The 						<i>hWnd</i> parameter must be the handle to the window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_CTL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the scroll bar is a scroll bar control. The 						<i>hWnd</i> must be the handle to the scroll bar control.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_HORZ</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables or disables the arrows on the horizontal scroll bar associated with the specified window. The 						<i>hWnd</i> parameter must be the handle to the window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_VERT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables or disables the arrows on the vertical scroll bar associated with the specified window. The 						<i>hWnd</i> parameter must be the handle to the window.</description>
        </listheader>
      </list>
    </param>
    <param name="wArrows">
      <para>Specifies whether the scroll bar arrows are enabled or disabled and indicates which arrows are enabled or disabled. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ESB_DISABLE_BOTH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Disables both arrows on a scroll bar.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ESB_DISABLE_DOWN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Disables the down arrow on a vertical scroll bar.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ESB_DISABLE_LEFT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Disables the left arrow on a horizontal scroll bar.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ESB_DISABLE_LTUP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Disables the left arrow on a horizontal scroll bar or the up arrow of a vertical scroll bar.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ESB_DISABLE_RIGHT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Disables the right arrow on a horizontal scroll bar.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ESB_DISABLE_RTDN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Disables the right arrow on a horizontal scroll bar or the down arrow of a vertical scroll bar.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ESB_DISABLE_UP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Disables the up arrow on a vertical scroll bar.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ESB_ENABLE_BOTH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Enables both arrows on a scroll bar.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the arrows are enabled or disabled as specified, the return value is nonzero.</para>
      <para>If the arrows are already in the requested state or an error occurs, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnableWindow">
    <summary>Enables or disables mouse and keyboard input to the specified window or control. When input is disabled, the window does not receive input such as mouse clicks and key presses. When input is enabled, the window receives all input.</summary>
    <param name="hWnd">A handle to the window to be enabled or disabled.</param>
    <param name="bEnable">Indicates whether to enable or disable the window. If this parameter is <b>TRUE</b>, the window is enabled. If the parameter is <b>FALSE</b>, the window is disabled.</param>
    <returns>
      <para>If the window was previously disabled, the return value is nonzero.</para>
      <para>If the window was not previously disabled, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.EndDeferWindowPos">
    <summary>Simultaneously updates the position and size of one or more windows in a single screen-refreshing cycle.</summary>
    <param name="hWinPosInfo">A handle to a multiple-window – position structure that contains size and position information for one or more windows. This internal structure is returned by the <see cref="BeginDeferWindowPos" /> function or by the most recent call to the <see cref="DeferWindowPos" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EndDialog">
    <summary>Destroys a modal dialog box, causing the system to end any processing for the dialog box.</summary>
    <param name="hDlg">A handle to the dialog box to be destroyed.</param>
    <param name="nResult">The value to be returned to the application from the function that created the dialog box.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EndMenu">
    <summary>Ends the calling thread's active menu.</summary>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EndPaint">
    <summary>The <b>EndPaint</b> function marks the end of painting in the specified window. This function is required for each call to the <see cref="BeginPaint" /> function, but only after painting is complete.</summary>
    <param name="hWnd">Handle to the window that has been repainted.</param>
    <param name="lpPaint">Pointer to a <see cref="PAINTSTRUCT" /> structure that contains the painting information retrieved by <see cref="BeginPaint" />.</param>
    <returns>The return value is always nonzero.</returns>
  </member>
  <member name="Windows.EnumChildWindows">
    <summary>Enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function. <b>EnumChildWindows</b> continues until the last child window is enumerated or the callback function returns <b>FALSE</b>.</summary>
    <param name="hWndParent">A handle to the parent window whose child windows are to be enumerated. If this parameter is <b>NULL</b>, this function is equivalent to <see cref="EnumWindows" />.</param>
    <param name="lpEnumFunc">A pointer to an application-defined callback function. For more information, see <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms633493(v=vs.85)">EnumChildProc</a>.</param>
    <param name="lParam">An application-defined value to be passed to the callback function.</param>
    <returns>The return value is not used.</returns>
  </member>
  <member name="Windows.EnumClipboardFormats">
    <summary>
      <para>Enumerates the data formats currently available on the clipboard.</para>
      <para>Clipboard data formats are stored in an ordered list. To perform an enumeration of clipboard data formats, you make a series of calls to the <b>EnumClipboardFormats</b> function. For each call, the <i>format</i> parameter specifies an available clipboard format, and the function returns the next available clipboard format.</para>
    </summary>
    <param name="format">
      <para>A clipboard format that is known to be available.</para>
      <para>To start an enumeration of clipboard formats, set<i>format</i> to zero. When<i>format</i> is zero, the function retrieves the first available clipboard format. For subsequent calls during an enumeration, set<i>format</i> to the result of the previous<b>EnumClipboardFormats</b> call.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the clipboard format that follows the specified format, namely the next available clipboard format.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />. If the clipboard is not open, the function fails.</para>
      <para>If there are no more clipboard formats to enumerate, the return value is zero. In this case, the<see cref="GetLastError" /> function returns the value <b>ERROR_SUCCESS</b>. This lets you distinguish between function failure and the end of enumeration.</para>
    </returns>
  </member>
  <member name="Windows.EnumDesktops">
    <summary>Enumerates all desktops associated with the specified window station of the calling process. The function passes the name of each desktop, in turn, to an application-defined callback function.</summary>
    <param name="hwinsta">
      <para>A handle to the window station whose desktops are to be enumerated. This handle is returned by the<see cref="CreateWindowStation" />,<see cref="GetProcessWindowStation" />, or<see cref="OpenWindowStation" /> function, and must have the WINSTA_ENUMDESKTOPS access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/winstation/window-station-security-and-access-rights">Window Station Security and Access Rights</a>.</para>
      <para>If this parameter is NULL, the current window station is used.</para>
    </param>
    <param name="lpEnumFunc">A pointer to an application-defined<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms682612(v=vs.85)">EnumDesktopProc</a> callback function.</param>
    <param name="lParam">An application-defined value to be passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, it returns the nonzero value returned by the callback function that was pointed to by <i>lpEnumFunc</i>.</para>
      <para>If the function is unable to perform the enumeration, the return value is zero. Call<see cref="GetLastError" /> to get extended error information.</para>
      <para>If the callback function fails, the return value is zero. The callback function can call <see cref="SetLastError" /> to set an error code for the caller to retrieve by calling <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumDesktopsA">
    <summary>Enumerates all desktops associated with the specified window station of the calling process. The function passes the name of each desktop, in turn, to an application-defined callback function.</summary>
    <param name="hwinsta">
      <para>A handle to the window station whose desktops are to be enumerated. This handle is returned by the<see cref="CreateWindowStation" />,<see cref="GetProcessWindowStation" />, or<see cref="OpenWindowStation" /> function, and must have the WINSTA_ENUMDESKTOPS access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/winstation/window-station-security-and-access-rights">Window Station Security and Access Rights</a>.</para>
      <para>If this parameter is NULL, the current window station is used.</para>
    </param>
    <param name="lpEnumFunc">A pointer to an application-defined<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms682612(v=vs.85)">EnumDesktopProc</a> callback function.</param>
    <param name="lParam">An application-defined value to be passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, it returns the nonzero value returned by the callback function that was pointed to by <i>lpEnumFunc</i>.</para>
      <para>If the function is unable to perform the enumeration, the return value is zero. Call<see cref="GetLastError" /> to get extended error information.</para>
      <para>If the callback function fails, the return value is zero. The callback function can call <see cref="SetLastError" /> to set an error code for the caller to retrieve by calling <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumDesktopsW">
    <summary>Enumerates all desktops associated with the specified window station of the calling process. The function passes the name of each desktop, in turn, to an application-defined callback function.</summary>
    <param name="hwinsta">
      <para>A handle to the window station whose desktops are to be enumerated. This handle is returned by the<see cref="CreateWindowStation" />,<see cref="GetProcessWindowStation" />, or<see cref="OpenWindowStation" /> function, and must have the WINSTA_ENUMDESKTOPS access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/winstation/window-station-security-and-access-rights">Window Station Security and Access Rights</a>.</para>
      <para>If this parameter is NULL, the current window station is used.</para>
    </param>
    <param name="lpEnumFunc">A pointer to an application-defined<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms682612(v=vs.85)">EnumDesktopProc</a> callback function.</param>
    <param name="lParam">An application-defined value to be passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, it returns the nonzero value returned by the callback function that was pointed to by <i>lpEnumFunc</i>.</para>
      <para>If the function is unable to perform the enumeration, the return value is zero. Call<see cref="GetLastError" /> to get extended error information.</para>
      <para>If the callback function fails, the return value is zero. The callback function can call <see cref="SetLastError" /> to set an error code for the caller to retrieve by calling <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumDesktops">
    <summary>Enumerates all desktops associated with the specified window station of the calling process. The function passes the name of each desktop, in turn, to an application-defined callback function.</summary>
    <param name="hwinsta">
      <para>A handle to the window station whose desktops are to be enumerated. This handle is returned by the<see cref="CreateWindowStation" />,<see cref="GetProcessWindowStation" />, or<see cref="OpenWindowStation" /> function, and must have the WINSTA_ENUMDESKTOPS access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/winstation/window-station-security-and-access-rights">Window Station Security and Access Rights</a>.</para>
      <para>If this parameter is NULL, the current window station is used.</para>
    </param>
    <param name="lpEnumFunc">A pointer to an application-defined<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms682612(v=vs.85)">EnumDesktopProc</a> callback function.</param>
    <param name="lParam">An application-defined value to be passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, it returns the nonzero value returned by the callback function that was pointed to by <i>lpEnumFunc</i>.</para>
      <para>If the function is unable to perform the enumeration, the return value is zero. Call<see cref="GetLastError" /> to get extended error information.</para>
      <para>If the callback function fails, the return value is zero. The callback function can call <see cref="SetLastError" /> to set an error code for the caller to retrieve by calling <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumDesktopsA">
    <summary>Enumerates all desktops associated with the specified window station of the calling process. The function passes the name of each desktop, in turn, to an application-defined callback function.</summary>
    <param name="hwinsta">
      <para>A handle to the window station whose desktops are to be enumerated. This handle is returned by the<see cref="CreateWindowStation" />,<see cref="GetProcessWindowStation" />, or<see cref="OpenWindowStation" /> function, and must have the WINSTA_ENUMDESKTOPS access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/winstation/window-station-security-and-access-rights">Window Station Security and Access Rights</a>.</para>
      <para>If this parameter is NULL, the current window station is used.</para>
    </param>
    <param name="lpEnumFunc">A pointer to an application-defined<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms682612(v=vs.85)">EnumDesktopProc</a> callback function.</param>
    <param name="lParam">An application-defined value to be passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, it returns the nonzero value returned by the callback function that was pointed to by <i>lpEnumFunc</i>.</para>
      <para>If the function is unable to perform the enumeration, the return value is zero. Call<see cref="GetLastError" /> to get extended error information.</para>
      <para>If the callback function fails, the return value is zero. The callback function can call <see cref="SetLastError" /> to set an error code for the caller to retrieve by calling <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumDesktopsW">
    <summary>Enumerates all desktops associated with the specified window station of the calling process. The function passes the name of each desktop, in turn, to an application-defined callback function.</summary>
    <param name="hwinsta">
      <para>A handle to the window station whose desktops are to be enumerated. This handle is returned by the<see cref="CreateWindowStation" />,<see cref="GetProcessWindowStation" />, or<see cref="OpenWindowStation" /> function, and must have the WINSTA_ENUMDESKTOPS access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/winstation/window-station-security-and-access-rights">Window Station Security and Access Rights</a>.</para>
      <para>If this parameter is NULL, the current window station is used.</para>
    </param>
    <param name="lpEnumFunc">A pointer to an application-defined<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms682612(v=vs.85)">EnumDesktopProc</a> callback function.</param>
    <param name="lParam">An application-defined value to be passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, it returns the nonzero value returned by the callback function that was pointed to by <i>lpEnumFunc</i>.</para>
      <para>If the function is unable to perform the enumeration, the return value is zero. Call<see cref="GetLastError" /> to get extended error information.</para>
      <para>If the callback function fails, the return value is zero. The callback function can call <see cref="SetLastError" /> to set an error code for the caller to retrieve by calling <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumDesktopWindows">
    <summary>Enumerates all top-level windows associated with the specified desktop. It passes the handle to each window, in turn, to an application-defined callback function.</summary>
    <param name="hDesktop">
      <para>A handle to the desktop whose top-level windows are to be enumerated. This handle is returned by the<see cref="CreateDesktop" />,<see cref="GetThreadDesktop" />, <see cref="OpenDesktop" />, or<see cref="OpenInputDesktop" /> function, and must have the <b>DESKTOP_READOBJECTS</b> access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</para>
      <para>If this parameter is NULL, the current desktop is used.</para>
    </param>
    <param name="lpfn">A pointer to an application-defined<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms633498(v=vs.85)">EnumWindowsProc</a> callback function.</param>
    <param name="lParam">An application-defined value to be passed to the callback function.</param>
    <returns>
      <para>If the function fails or is unable to perform the enumeration, the return value is zero.</para>
      <para>To get extended error information, call<see cref="GetLastError" />.</para>
      <para>You must ensure that the callback function sets <see cref="SetLastError" /> if it fails.</para>
      <para>
        <b>Windows Server 2003 and Windows XP/2000:  </b>If there are no windows on the desktop, <see cref="GetLastError" /> returns <b>ERROR_INVALID_HANDLE</b>.</para>
    </returns>
  </member>
  <member name="Windows.EnumDisplayDevices">
    <summary>The <b>EnumDisplayDevices</b> function lets you obtain information about the display devices in the current session.</summary>
    <param name="lpDevice">
      <para>A pointer to the device name. If <b>NULL</b>, function returns information for the display adapter(s) on the machine, based on <i>iDevNum</i>.</para>
      <para>For more information, see Remarks.</para>
    </param>
    <param name="iDevNum">
      <para>An index value that specifies the display device of interest.</para>
      <para>The operating system identifies each display device in the current session with an index value. The index values are consecutive integers, starting at 0. If the current session has three display devices, for example, they are specified by the index values 0, 1, and 2.</para>
    </param>
    <param name="lpDisplayDevice">
      <para>A pointer to a <see cref="DISPLAY_DEVICE" /> structure that receives information about the display device specified by <i>iDevNum</i>.</para>
      <para>Before calling <b>EnumDisplayDevices</b>, you must initialize the <b>cb</b> member of <see cref="DISPLAY_DEVICE" /> to the size, in bytes, of <b>DISPLAY_DEVICE</b>.</para>
    </param>
    <param name="dwFlags">Set this flag to EDD_GET_DEVICE_INTERFACE_NAME (0x00000001) to retrieve the device interface name for GUID_DEVINTERFACE_MONITOR, which is registered by the operating system on a per monitor basis. The value is placed in the DeviceID member of the <see cref="DISPLAY_DEVICE" /> structure returned in <i>lpDisplayDevice</i>. The resulting device interface name can be used with <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setupapi">SetupAPI functions</a> and serves as a link between GDI monitor devices and SetupAPI monitor devices.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. The function fails if <i>iDevNum</i> is greater than the largest device index.</para>
    </returns>
  </member>
  <member name="Windows.EnumDisplayDevicesA">
    <summary>The <b>EnumDisplayDevices</b> function lets you obtain information about the display devices in the current session.</summary>
    <param name="lpDevice">
      <para>A pointer to the device name. If <b>NULL</b>, function returns information for the display adapter(s) on the machine, based on <i>iDevNum</i>.</para>
      <para>For more information, see Remarks.</para>
    </param>
    <param name="iDevNum">
      <para>An index value that specifies the display device of interest.</para>
      <para>The operating system identifies each display device in the current session with an index value. The index values are consecutive integers, starting at 0. If the current session has three display devices, for example, they are specified by the index values 0, 1, and 2.</para>
    </param>
    <param name="lpDisplayDevice">
      <para>A pointer to a <see cref="DISPLAY_DEVICE" /> structure that receives information about the display device specified by <i>iDevNum</i>.</para>
      <para>Before calling <b>EnumDisplayDevices</b>, you must initialize the <b>cb</b> member of <see cref="DISPLAY_DEVICE" /> to the size, in bytes, of <b>DISPLAY_DEVICE</b>.</para>
    </param>
    <param name="dwFlags">Set this flag to EDD_GET_DEVICE_INTERFACE_NAME (0x00000001) to retrieve the device interface name for GUID_DEVINTERFACE_MONITOR, which is registered by the operating system on a per monitor basis. The value is placed in the DeviceID member of the <see cref="DISPLAY_DEVICE" /> structure returned in <i>lpDisplayDevice</i>. The resulting device interface name can be used with <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setupapi">SetupAPI functions</a> and serves as a link between GDI monitor devices and SetupAPI monitor devices.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. The function fails if <i>iDevNum</i> is greater than the largest device index.</para>
    </returns>
  </member>
  <member name="Windows.EnumDisplayDevicesW">
    <summary>The <b>EnumDisplayDevices</b> function lets you obtain information about the display devices in the current session.</summary>
    <param name="lpDevice">
      <para>A pointer to the device name. If <b>NULL</b>, function returns information for the display adapter(s) on the machine, based on <i>iDevNum</i>.</para>
      <para>For more information, see Remarks.</para>
    </param>
    <param name="iDevNum">
      <para>An index value that specifies the display device of interest.</para>
      <para>The operating system identifies each display device in the current session with an index value. The index values are consecutive integers, starting at 0. If the current session has three display devices, for example, they are specified by the index values 0, 1, and 2.</para>
    </param>
    <param name="lpDisplayDevice">
      <para>A pointer to a <see cref="DISPLAY_DEVICE" /> structure that receives information about the display device specified by <i>iDevNum</i>.</para>
      <para>Before calling <b>EnumDisplayDevices</b>, you must initialize the <b>cb</b> member of <see cref="DISPLAY_DEVICE" /> to the size, in bytes, of <b>DISPLAY_DEVICE</b>.</para>
    </param>
    <param name="dwFlags">Set this flag to EDD_GET_DEVICE_INTERFACE_NAME (0x00000001) to retrieve the device interface name for GUID_DEVINTERFACE_MONITOR, which is registered by the operating system on a per monitor basis. The value is placed in the DeviceID member of the <see cref="DISPLAY_DEVICE" /> structure returned in <i>lpDisplayDevice</i>. The resulting device interface name can be used with <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setupapi">SetupAPI functions</a> and serves as a link between GDI monitor devices and SetupAPI monitor devices.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. The function fails if <i>iDevNum</i> is greater than the largest device index.</para>
    </returns>
  </member>
  <member name="Windows.EnumDisplayDevices">
    <summary>The <b>EnumDisplayDevices</b> function lets you obtain information about the display devices in the current session.</summary>
    <param name="lpDevice">
      <para>A pointer to the device name. If <b>NULL</b>, function returns information for the display adapter(s) on the machine, based on <i>iDevNum</i>.</para>
      <para>For more information, see Remarks.</para>
    </param>
    <param name="iDevNum">
      <para>An index value that specifies the display device of interest.</para>
      <para>The operating system identifies each display device in the current session with an index value. The index values are consecutive integers, starting at 0. If the current session has three display devices, for example, they are specified by the index values 0, 1, and 2.</para>
    </param>
    <param name="lpDisplayDevice">
      <para>A pointer to a <see cref="DISPLAY_DEVICE" /> structure that receives information about the display device specified by <i>iDevNum</i>.</para>
      <para>Before calling <b>EnumDisplayDevices</b>, you must initialize the <b>cb</b> member of <see cref="DISPLAY_DEVICE" /> to the size, in bytes, of <b>DISPLAY_DEVICE</b>.</para>
    </param>
    <param name="dwFlags">Set this flag to EDD_GET_DEVICE_INTERFACE_NAME (0x00000001) to retrieve the device interface name for GUID_DEVINTERFACE_MONITOR, which is registered by the operating system on a per monitor basis. The value is placed in the DeviceID member of the <see cref="DISPLAY_DEVICE" /> structure returned in <i>lpDisplayDevice</i>. The resulting device interface name can be used with <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setupapi">SetupAPI functions</a> and serves as a link between GDI monitor devices and SetupAPI monitor devices.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. The function fails if <i>iDevNum</i> is greater than the largest device index.</para>
    </returns>
  </member>
  <member name="Windows.EnumDisplayDevicesA">
    <summary>The <b>EnumDisplayDevices</b> function lets you obtain information about the display devices in the current session.</summary>
    <param name="lpDevice">
      <para>A pointer to the device name. If <b>NULL</b>, function returns information for the display adapter(s) on the machine, based on <i>iDevNum</i>.</para>
      <para>For more information, see Remarks.</para>
    </param>
    <param name="iDevNum">
      <para>An index value that specifies the display device of interest.</para>
      <para>The operating system identifies each display device in the current session with an index value. The index values are consecutive integers, starting at 0. If the current session has three display devices, for example, they are specified by the index values 0, 1, and 2.</para>
    </param>
    <param name="lpDisplayDevice">
      <para>A pointer to a <see cref="DISPLAY_DEVICE" /> structure that receives information about the display device specified by <i>iDevNum</i>.</para>
      <para>Before calling <b>EnumDisplayDevices</b>, you must initialize the <b>cb</b> member of <see cref="DISPLAY_DEVICE" /> to the size, in bytes, of <b>DISPLAY_DEVICE</b>.</para>
    </param>
    <param name="dwFlags">Set this flag to EDD_GET_DEVICE_INTERFACE_NAME (0x00000001) to retrieve the device interface name for GUID_DEVINTERFACE_MONITOR, which is registered by the operating system on a per monitor basis. The value is placed in the DeviceID member of the <see cref="DISPLAY_DEVICE" /> structure returned in <i>lpDisplayDevice</i>. The resulting device interface name can be used with <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setupapi">SetupAPI functions</a> and serves as a link between GDI monitor devices and SetupAPI monitor devices.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. The function fails if <i>iDevNum</i> is greater than the largest device index.</para>
    </returns>
  </member>
  <member name="Windows.EnumDisplayDevicesW">
    <summary>The <b>EnumDisplayDevices</b> function lets you obtain information about the display devices in the current session.</summary>
    <param name="lpDevice">
      <para>A pointer to the device name. If <b>NULL</b>, function returns information for the display adapter(s) on the machine, based on <i>iDevNum</i>.</para>
      <para>For more information, see Remarks.</para>
    </param>
    <param name="iDevNum">
      <para>An index value that specifies the display device of interest.</para>
      <para>The operating system identifies each display device in the current session with an index value. The index values are consecutive integers, starting at 0. If the current session has three display devices, for example, they are specified by the index values 0, 1, and 2.</para>
    </param>
    <param name="lpDisplayDevice">
      <para>A pointer to a <see cref="DISPLAY_DEVICE" /> structure that receives information about the display device specified by <i>iDevNum</i>.</para>
      <para>Before calling <b>EnumDisplayDevices</b>, you must initialize the <b>cb</b> member of <see cref="DISPLAY_DEVICE" /> to the size, in bytes, of <b>DISPLAY_DEVICE</b>.</para>
    </param>
    <param name="dwFlags">Set this flag to EDD_GET_DEVICE_INTERFACE_NAME (0x00000001) to retrieve the device interface name for GUID_DEVINTERFACE_MONITOR, which is registered by the operating system on a per monitor basis. The value is placed in the DeviceID member of the <see cref="DISPLAY_DEVICE" /> structure returned in <i>lpDisplayDevice</i>. The resulting device interface name can be used with <a href="https://docs.microsoft.com//windows-hardware/drivers/install/setupapi">SetupAPI functions</a> and serves as a link between GDI monitor devices and SetupAPI monitor devices.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. The function fails if <i>iDevNum</i> is greater than the largest device index.</para>
    </returns>
  </member>
  <member name="Windows.EnumDisplayMonitors">
    <summary>The <b>EnumDisplayMonitors</b> function enumerates display monitors (including invisible pseudo-monitors associated with the mirroring drivers) that intersect a region formed by the intersection of a specified clipping rectangle and the visible region of a device context. <b>EnumDisplayMonitors</b> calls an application-defined <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-monitorenumproc">MonitorEnumProc</a> callback function once for each monitor that is enumerated. Note that <see cref="GetSystemMetrics" /> (SM_CMONITORS) counts only the display monitors.</summary>
    <param name="hdc">
      <para>A handle to a display device context that defines the visible region of interest.</para>
      <para>If this parameter is <b>NULL</b>, the <i>hdcMonitor</i> parameter passed to the callback function will be <b>NULL</b>, and the visible region of interest is the virtual screen that encompasses all the displays on the desktop.</para>
    </param>
    <param name="lprcClip">
      <para>A pointer to a <see cref="RECT" /> structure that specifies a clipping rectangle. The region of interest is the intersection of the clipping rectangle with the visible region specified by <i>hdc</i>.</para>
      <para>If <i>hdc</i> is non-<b>NULL</b>, the coordinates of the clipping rectangle are relative to the origin of the <i>hdc</i>. If <i>hdc</i> is <b>NULL</b>, the coordinates are virtual-screen coordinates.</para>
      <para>This parameter can be <b>NULL</b> if you don't want to clip the region specified by <i>hdc</i>.</para>
    </param>
    <param name="lpfnEnum">A pointer to a <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-monitorenumproc">MonitorEnumProc</a> application-defined callback function.</param>
    <param name="dwData">Application-defined data that <b>EnumDisplayMonitors</b> passes directly to the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-monitorenumproc">MonitorEnumProc</a> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.EnumDisplaySettings">
    <summary>
      <para>The <b>EnumDisplaySettings</b> function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes of a display device, make a series of calls to this function.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpszDeviceName">
      <para>A pointer to a null-terminated string that specifies the display device about whose graphics mode the function will obtain information.</para>
      <para>This parameter is either <b>NULL</b> or a <see cref="DISPLAY_DEVICE" />.<b>DeviceName</b> returned from <see cref="EnumDisplayDevices" />. A <b>NULL</b> value specifies the current display device on the computer on which the calling thread is running.</para>
    </param>
    <param name="iModeNum">
      <para>The type of information to be retrieved. This value can be a graphics mode index or one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_CURRENT_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the current settings for the display device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_REGISTRY_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the settings for the display device that are currently stored in the registry.</description>
        </listheader>
      </list> <para>Graphics mode indexes start at zero. To obtain information for all of a display device's graphics modes, make a series of calls to <b>EnumDisplaySettings</b>, as follows: Set <i>iModeNum</i> to zero for the first call, and increment <i>iModeNum</i> by one for each subsequent call. Continue calling the function until the return value is zero.</para><para>When you call <b>EnumDisplaySettings</b> with <i>iModeNum</i> set to zero, the operating system initializes and caches information about the display device. When you call <b>EnumDisplaySettings</b> with <i>iModeNum</i> set to a nonzero value, the function returns the information that was cached the last time the function was called with <i>iModeNum</i> set to zero.</para></param>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure into which the function stores information about the specified graphics mode. Before calling <b>EnumDisplaySettings</b>, set the <b>dmSize</b> member to <code>sizeof(DEVMODE)</code>, and set the <b>dmDriverExtra</b> member to indicate the size, in bytes, of the additional space available to receive private driver data.</para>
      <para>The <b>EnumDisplaySettings</b> function sets values for the following five <see cref="DEVMODE" /> members:</para>
      <list type="bullet">
        <item>
          <description>
            <b>dmBitsPerPel</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsWidth</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsHeight</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFlags</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.EnumDisplaySettingsA">
    <summary>
      <para>The <b>EnumDisplaySettings</b> function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes of a display device, make a series of calls to this function.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpszDeviceName">
      <para>A pointer to a null-terminated string that specifies the display device about whose graphics mode the function will obtain information.</para>
      <para>This parameter is either <b>NULL</b> or a <see cref="DISPLAY_DEVICE" />.<b>DeviceName</b> returned from <see cref="EnumDisplayDevices" />. A <b>NULL</b> value specifies the current display device on the computer on which the calling thread is running.</para>
    </param>
    <param name="iModeNum">
      <para>The type of information to be retrieved. This value can be a graphics mode index or one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_CURRENT_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the current settings for the display device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_REGISTRY_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the settings for the display device that are currently stored in the registry.</description>
        </listheader>
      </list> <para>Graphics mode indexes start at zero. To obtain information for all of a display device's graphics modes, make a series of calls to <b>EnumDisplaySettings</b>, as follows: Set <i>iModeNum</i> to zero for the first call, and increment <i>iModeNum</i> by one for each subsequent call. Continue calling the function until the return value is zero.</para><para>When you call <b>EnumDisplaySettings</b> with <i>iModeNum</i> set to zero, the operating system initializes and caches information about the display device. When you call <b>EnumDisplaySettings</b> with <i>iModeNum</i> set to a nonzero value, the function returns the information that was cached the last time the function was called with <i>iModeNum</i> set to zero.</para></param>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure into which the function stores information about the specified graphics mode. Before calling <b>EnumDisplaySettings</b>, set the <b>dmSize</b> member to <code>sizeof(DEVMODE)</code>, and set the <b>dmDriverExtra</b> member to indicate the size, in bytes, of the additional space available to receive private driver data.</para>
      <para>The <b>EnumDisplaySettings</b> function sets values for the following five <see cref="DEVMODE" /> members:</para>
      <list type="bullet">
        <item>
          <description>
            <b>dmBitsPerPel</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsWidth</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsHeight</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFlags</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.EnumDisplaySettingsW">
    <summary>
      <para>The <b>EnumDisplaySettings</b> function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes of a display device, make a series of calls to this function.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpszDeviceName">
      <para>A pointer to a null-terminated string that specifies the display device about whose graphics mode the function will obtain information.</para>
      <para>This parameter is either <b>NULL</b> or a <see cref="DISPLAY_DEVICE" />.<b>DeviceName</b> returned from <see cref="EnumDisplayDevices" />. A <b>NULL</b> value specifies the current display device on the computer on which the calling thread is running.</para>
    </param>
    <param name="iModeNum">
      <para>The type of information to be retrieved. This value can be a graphics mode index or one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_CURRENT_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the current settings for the display device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_REGISTRY_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the settings for the display device that are currently stored in the registry.</description>
        </listheader>
      </list> <para>Graphics mode indexes start at zero. To obtain information for all of a display device's graphics modes, make a series of calls to <b>EnumDisplaySettings</b>, as follows: Set <i>iModeNum</i> to zero for the first call, and increment <i>iModeNum</i> by one for each subsequent call. Continue calling the function until the return value is zero.</para><para>When you call <b>EnumDisplaySettings</b> with <i>iModeNum</i> set to zero, the operating system initializes and caches information about the display device. When you call <b>EnumDisplaySettings</b> with <i>iModeNum</i> set to a nonzero value, the function returns the information that was cached the last time the function was called with <i>iModeNum</i> set to zero.</para></param>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure into which the function stores information about the specified graphics mode. Before calling <b>EnumDisplaySettings</b>, set the <b>dmSize</b> member to <code>sizeof(DEVMODE)</code>, and set the <b>dmDriverExtra</b> member to indicate the size, in bytes, of the additional space available to receive private driver data.</para>
      <para>The <b>EnumDisplaySettings</b> function sets values for the following five <see cref="DEVMODE" /> members:</para>
      <list type="bullet">
        <item>
          <description>
            <b>dmBitsPerPel</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsWidth</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsHeight</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFlags</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.EnumDisplaySettingsEx">
    <summary>
      <para>The <b>EnumDisplaySettingsEx</b> function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes for a display device, make a series of calls to this function.</para>
      <para>This function differs from <see cref="EnumDisplaySettings" /> in that there is a <i>dwFlags</i> parameter.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpszDeviceName">
      <para>A pointer to a null-terminated string that specifies the display device about which graphics mode the function will obtain information.</para>
      <para>This parameter is either <b>NULL</b> or a <see cref="DISPLAY_DEVICE" />.<b>DeviceName</b> returned from <see cref="EnumDisplayDevices" />. A <b>NULL</b> value specifies the current display device on the computer that the calling thread is running on.</para>
    </param>
    <param name="iModeNum">
      <para>Indicates the type of information to be retrieved. This value can be a graphics mode index or one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_CURRENT_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the current settings for the display device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_REGISTRY_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the settings for the display device that are currently stored in the registry.</description>
        </listheader>
      </list> <para>Graphics mode indexes start at zero. To obtain information for all of a display device's graphics modes, make a series of calls to <b>EnumDisplaySettingsEx</b>, as follows: Set <i>iModeNum</i> to zero for the first call, and increment <i>iModeNum</i> by one for each subsequent call. Continue calling the function until the return value is zero.</para><para>When you call <b>EnumDisplaySettingsEx</b> with <i>iModeNum</i> set to zero, the operating system initializes and caches information about the display device. When you call <b>EnumDisplaySettingsEx</b> with <i>iModeNum</i> set to a nonzero value, the function returns the information that was cached the last time the function was called with <i>iModeNum</i> set to zero.</para></param>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure into which the function stores information about the specified graphics mode. Before calling <b>EnumDisplaySettingsEx</b>, set the <b>dmSize</b> member to <b>sizeof</b> (<see cref="DEVMODE" />), and set the <b>dmDriverExtra</b> member to indicate the size, in bytes, of the additional space available to receive private driver data.</para>
      <para>The <b>EnumDisplaySettingsEx</b> function will populate the <b>dmFields</b> member of the <b>lpDevMode</b> and one or more other members of the <see cref="DEVMODE" /> structure. To determine which members were set by the call to <b>EnumDisplaySettingsEx</b>, inspect the <i>dmFields</i> bitmask. Some of the fields typically populated by this function include:</para>
      <list type="bullet">
        <item>
          <description>
            <b>dmBitsPerPel</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsWidth</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsHeight</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFlags</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPosition</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayOrientation</b>
          </description>
        </item>
      </list>
    </param>
    <param name="dwFlags">
      <para>This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EDS_RAWMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, the function will return all graphics modes reported by the adapter driver, regardless of monitor capabilities. Otherwise, it will only return modes that are compatible with current monitors.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EDS_ROTATEDMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, the function will return graphics modes in all orientations. Otherwise, it will only return modes that have the same orientation as the one currently set for the requested display.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.EnumDisplaySettingsExA">
    <summary>
      <para>The <b>EnumDisplaySettingsEx</b> function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes for a display device, make a series of calls to this function.</para>
      <para>This function differs from <see cref="EnumDisplaySettings" /> in that there is a <i>dwFlags</i> parameter.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpszDeviceName">
      <para>A pointer to a null-terminated string that specifies the display device about which graphics mode the function will obtain information.</para>
      <para>This parameter is either <b>NULL</b> or a <see cref="DISPLAY_DEVICE" />.<b>DeviceName</b> returned from <see cref="EnumDisplayDevices" />. A <b>NULL</b> value specifies the current display device on the computer that the calling thread is running on.</para>
    </param>
    <param name="iModeNum">
      <para>Indicates the type of information to be retrieved. This value can be a graphics mode index or one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_CURRENT_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the current settings for the display device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_REGISTRY_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the settings for the display device that are currently stored in the registry.</description>
        </listheader>
      </list> <para>Graphics mode indexes start at zero. To obtain information for all of a display device's graphics modes, make a series of calls to <b>EnumDisplaySettingsEx</b>, as follows: Set <i>iModeNum</i> to zero for the first call, and increment <i>iModeNum</i> by one for each subsequent call. Continue calling the function until the return value is zero.</para><para>When you call <b>EnumDisplaySettingsEx</b> with <i>iModeNum</i> set to zero, the operating system initializes and caches information about the display device. When you call <b>EnumDisplaySettingsEx</b> with <i>iModeNum</i> set to a nonzero value, the function returns the information that was cached the last time the function was called with <i>iModeNum</i> set to zero.</para></param>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure into which the function stores information about the specified graphics mode. Before calling <b>EnumDisplaySettingsEx</b>, set the <b>dmSize</b> member to <b>sizeof</b> (<see cref="DEVMODE" />), and set the <b>dmDriverExtra</b> member to indicate the size, in bytes, of the additional space available to receive private driver data.</para>
      <para>The <b>EnumDisplaySettingsEx</b> function will populate the <b>dmFields</b> member of the <b>lpDevMode</b> and one or more other members of the <see cref="DEVMODE" /> structure. To determine which members were set by the call to <b>EnumDisplaySettingsEx</b>, inspect the <i>dmFields</i> bitmask. Some of the fields typically populated by this function include:</para>
      <list type="bullet">
        <item>
          <description>
            <b>dmBitsPerPel</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsWidth</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsHeight</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFlags</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPosition</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayOrientation</b>
          </description>
        </item>
      </list>
    </param>
    <param name="dwFlags">
      <para>This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EDS_RAWMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, the function will return all graphics modes reported by the adapter driver, regardless of monitor capabilities. Otherwise, it will only return modes that are compatible with current monitors.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EDS_ROTATEDMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, the function will return graphics modes in all orientations. Otherwise, it will only return modes that have the same orientation as the one currently set for the requested display.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.EnumDisplaySettingsExW">
    <summary>
      <para>The <b>EnumDisplaySettingsEx</b> function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes for a display device, make a series of calls to this function.</para>
      <para>This function differs from <see cref="EnumDisplaySettings" /> in that there is a <i>dwFlags</i> parameter.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpszDeviceName">
      <para>A pointer to a null-terminated string that specifies the display device about which graphics mode the function will obtain information.</para>
      <para>This parameter is either <b>NULL</b> or a <see cref="DISPLAY_DEVICE" />.<b>DeviceName</b> returned from <see cref="EnumDisplayDevices" />. A <b>NULL</b> value specifies the current display device on the computer that the calling thread is running on.</para>
    </param>
    <param name="iModeNum">
      <para>Indicates the type of information to be retrieved. This value can be a graphics mode index or one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_CURRENT_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the current settings for the display device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_REGISTRY_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the settings for the display device that are currently stored in the registry.</description>
        </listheader>
      </list> <para>Graphics mode indexes start at zero. To obtain information for all of a display device's graphics modes, make a series of calls to <b>EnumDisplaySettingsEx</b>, as follows: Set <i>iModeNum</i> to zero for the first call, and increment <i>iModeNum</i> by one for each subsequent call. Continue calling the function until the return value is zero.</para><para>When you call <b>EnumDisplaySettingsEx</b> with <i>iModeNum</i> set to zero, the operating system initializes and caches information about the display device. When you call <b>EnumDisplaySettingsEx</b> with <i>iModeNum</i> set to a nonzero value, the function returns the information that was cached the last time the function was called with <i>iModeNum</i> set to zero.</para></param>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure into which the function stores information about the specified graphics mode. Before calling <b>EnumDisplaySettingsEx</b>, set the <b>dmSize</b> member to <b>sizeof</b> (<see cref="DEVMODE" />), and set the <b>dmDriverExtra</b> member to indicate the size, in bytes, of the additional space available to receive private driver data.</para>
      <para>The <b>EnumDisplaySettingsEx</b> function will populate the <b>dmFields</b> member of the <b>lpDevMode</b> and one or more other members of the <see cref="DEVMODE" /> structure. To determine which members were set by the call to <b>EnumDisplaySettingsEx</b>, inspect the <i>dmFields</i> bitmask. Some of the fields typically populated by this function include:</para>
      <list type="bullet">
        <item>
          <description>
            <b>dmBitsPerPel</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsWidth</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsHeight</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFlags</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPosition</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayOrientation</b>
          </description>
        </item>
      </list>
    </param>
    <param name="dwFlags">
      <para>This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EDS_RAWMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, the function will return all graphics modes reported by the adapter driver, regardless of monitor capabilities. Otherwise, it will only return modes that are compatible with current monitors.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EDS_ROTATEDMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, the function will return graphics modes in all orientations. Otherwise, it will only return modes that have the same orientation as the one currently set for the requested display.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.EnumDisplaySettingsEx">
    <summary>
      <para>The <b>EnumDisplaySettingsEx</b> function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes for a display device, make a series of calls to this function.</para>
      <para>This function differs from <see cref="EnumDisplaySettings" /> in that there is a <i>dwFlags</i> parameter.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpszDeviceName">
      <para>A pointer to a null-terminated string that specifies the display device about which graphics mode the function will obtain information.</para>
      <para>This parameter is either <b>NULL</b> or a <see cref="DISPLAY_DEVICE" />. <b>DeviceName</b> returned from <see cref="EnumDisplayDevices" />. A <b>NULL</b> value specifies the current display device on the computer that the calling thread is running on.</para>
    </param>
    <param name="iModeNum">
      <para>Indicates the type of information to be retrieved. This value can be a graphics mode index or one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_CURRENT_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the current settings for the display device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_REGISTRY_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the settings for the display device that are currently stored in the registry.</description>
        </listheader>
      </list> <para>Graphics mode indexes start at zero. To obtain information for all of a display device's graphics modes, make a series of calls to <b>EnumDisplaySettingsEx</b>, as follows: Set <i>iModeNum</i> to zero for the first call, and increment <i>iModeNum</i> by one for each subsequent call. Continue calling the function until the return value is zero.</para><para>When you call <b>EnumDisplaySettingsEx</b> with <i>iModeNum</i> set to zero, the operating system initializes and caches information about the display device. When you call <b>EnumDisplaySettingsEx</b> with <i>iModeNum</i> set to a nonzero value, the function returns the information that was cached the last time the function was called with <i>iModeNum</i> set to zero.</para></param>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure into which the function stores information about the specified graphics mode. Before calling <b>EnumDisplaySettingsEx</b>, set the <b>dmSize</b> member to <b>sizeof</b> (<see cref="DEVMODE" />), and set the <b>dmDriverExtra</b> member to indicate the size, in bytes, of the additional space available to receive private driver data.</para>
      <para>The <b>EnumDisplaySettingsEx</b> function will populate the <b>dmFields</b> member of the <b>lpDevMode</b> and one or more other members of the <see cref="DEVMODE" /> structure. To determine which members were set by the call to <b>EnumDisplaySettingsEx</b>, inspect the <i>dmFields</i> bitmask. Some of the fields typically populated by this function include:</para>
      <list type="bullet">
        <item>
          <description>
            <b>dmBitsPerPel</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsWidth</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsHeight</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFlags</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPosition</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayOrientation</b>
          </description>
        </item>
      </list>
    </param>
    <param name="dwFlags">
      <para>This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EDS_RAWMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, the function will return all graphics modes reported by the adapter driver, regardless of monitor capabilities. Otherwise, it will only return modes that are compatible with current monitors.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EDS_ROTATEDMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, the function will return graphics modes in all orientations. Otherwise, it will only return modes that have the same orientation as the one currently set for the requested display.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.EnumDisplaySettingsExA">
    <summary>
      <para>The <b>EnumDisplaySettingsEx</b> function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes for a display device, make a series of calls to this function.</para>
      <para>This function differs from <see cref="EnumDisplaySettings" /> in that there is a <i>dwFlags</i> parameter.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpszDeviceName">
      <para>A pointer to a null-terminated string that specifies the display device about which graphics mode the function will obtain information.</para>
      <para>This parameter is either <b>NULL</b> or a <see cref="DISPLAY_DEVICE" />. <b>DeviceName</b> returned from <see cref="EnumDisplayDevices" />. A <b>NULL</b> value specifies the current display device on the computer that the calling thread is running on.</para>
    </param>
    <param name="iModeNum">
      <para>Indicates the type of information to be retrieved. This value can be a graphics mode index or one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_CURRENT_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the current settings for the display device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_REGISTRY_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the settings for the display device that are currently stored in the registry.</description>
        </listheader>
      </list> <para>Graphics mode indexes start at zero. To obtain information for all of a display device's graphics modes, make a series of calls to <b>EnumDisplaySettingsEx</b>, as follows: Set <i>iModeNum</i> to zero for the first call, and increment <i>iModeNum</i> by one for each subsequent call. Continue calling the function until the return value is zero.</para><para>When you call <b>EnumDisplaySettingsEx</b> with <i>iModeNum</i> set to zero, the operating system initializes and caches information about the display device. When you call <b>EnumDisplaySettingsEx</b> with <i>iModeNum</i> set to a nonzero value, the function returns the information that was cached the last time the function was called with <i>iModeNum</i> set to zero.</para></param>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure into which the function stores information about the specified graphics mode. Before calling <b>EnumDisplaySettingsEx</b>, set the <b>dmSize</b> member to <b>sizeof</b> (<see cref="DEVMODE" />), and set the <b>dmDriverExtra</b> member to indicate the size, in bytes, of the additional space available to receive private driver data.</para>
      <para>The <b>EnumDisplaySettingsEx</b> function will populate the <b>dmFields</b> member of the <b>lpDevMode</b> and one or more other members of the <see cref="DEVMODE" /> structure. To determine which members were set by the call to <b>EnumDisplaySettingsEx</b>, inspect the <i>dmFields</i> bitmask. Some of the fields typically populated by this function include:</para>
      <list type="bullet">
        <item>
          <description>
            <b>dmBitsPerPel</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsWidth</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsHeight</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFlags</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPosition</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayOrientation</b>
          </description>
        </item>
      </list>
    </param>
    <param name="dwFlags">
      <para>This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EDS_RAWMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, the function will return all graphics modes reported by the adapter driver, regardless of monitor capabilities. Otherwise, it will only return modes that are compatible with current monitors.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EDS_ROTATEDMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, the function will return graphics modes in all orientations. Otherwise, it will only return modes that have the same orientation as the one currently set for the requested display.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.EnumDisplaySettingsExW">
    <summary>
      <para>The <b>EnumDisplaySettingsEx</b> function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes for a display device, make a series of calls to this function.</para>
      <para>This function differs from <see cref="EnumDisplaySettings" /> in that there is a <i>dwFlags</i> parameter.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpszDeviceName">
      <para>A pointer to a null-terminated string that specifies the display device about which graphics mode the function will obtain information.</para>
      <para>This parameter is either <b>NULL</b> or a <see cref="DISPLAY_DEVICE" />. <b>DeviceName</b> returned from <see cref="EnumDisplayDevices" />. A <b>NULL</b> value specifies the current display device on the computer that the calling thread is running on.</para>
    </param>
    <param name="iModeNum">
      <para>Indicates the type of information to be retrieved. This value can be a graphics mode index or one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_CURRENT_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the current settings for the display device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_REGISTRY_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the settings for the display device that are currently stored in the registry.</description>
        </listheader>
      </list> <para>Graphics mode indexes start at zero. To obtain information for all of a display device's graphics modes, make a series of calls to <b>EnumDisplaySettingsEx</b>, as follows: Set <i>iModeNum</i> to zero for the first call, and increment <i>iModeNum</i> by one for each subsequent call. Continue calling the function until the return value is zero.</para><para>When you call <b>EnumDisplaySettingsEx</b> with <i>iModeNum</i> set to zero, the operating system initializes and caches information about the display device. When you call <b>EnumDisplaySettingsEx</b> with <i>iModeNum</i> set to a nonzero value, the function returns the information that was cached the last time the function was called with <i>iModeNum</i> set to zero.</para></param>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure into which the function stores information about the specified graphics mode. Before calling <b>EnumDisplaySettingsEx</b>, set the <b>dmSize</b> member to <b>sizeof</b> (<see cref="DEVMODE" />), and set the <b>dmDriverExtra</b> member to indicate the size, in bytes, of the additional space available to receive private driver data.</para>
      <para>The <b>EnumDisplaySettingsEx</b> function will populate the <b>dmFields</b> member of the <b>lpDevMode</b> and one or more other members of the <see cref="DEVMODE" /> structure. To determine which members were set by the call to <b>EnumDisplaySettingsEx</b>, inspect the <i>dmFields</i> bitmask. Some of the fields typically populated by this function include:</para>
      <list type="bullet">
        <item>
          <description>
            <b>dmBitsPerPel</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsWidth</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsHeight</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFlags</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPosition</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayOrientation</b>
          </description>
        </item>
      </list>
    </param>
    <param name="dwFlags">
      <para>This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EDS_RAWMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, the function will return all graphics modes reported by the adapter driver, regardless of monitor capabilities. Otherwise, it will only return modes that are compatible with current monitors.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EDS_ROTATEDMODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If set, the function will return graphics modes in all orientations. Otherwise, it will only return modes that have the same orientation as the one currently set for the requested display.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.EnumDisplaySettings">
    <summary>
      <para>The <b>EnumDisplaySettings</b> function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes of a display device, make a series of calls to this function.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpszDeviceName">
      <para>A pointer to a null-terminated string that specifies the display device about whose graphics mode the function will obtain information.</para>
      <para>This parameter is either <b>NULL</b> or a <see cref="DISPLAY_DEVICE" />.<b>DeviceName</b> returned from <see cref="EnumDisplayDevices" />. A <b>NULL</b> value specifies the current display device on the computer on which the calling thread is running.</para>
    </param>
    <param name="iModeNum">
      <para>The type of information to be retrieved. This value can be a graphics mode index or one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_CURRENT_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the current settings for the display device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_REGISTRY_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the settings for the display device that are currently stored in the registry.</description>
        </listheader>
      </list> <para>Graphics mode indexes start at zero. To obtain information for all of a display device's graphics modes, make a series of calls to <b>EnumDisplaySettings</b>, as follows: Set <i>iModeNum</i> to zero for the first call, and increment <i>iModeNum</i> by one for each subsequent call. Continue calling the function until the return value is zero.</para><para>When you call <b>EnumDisplaySettings</b> with <i>iModeNum</i> set to zero, the operating system initializes and caches information about the display device. When you call <b>EnumDisplaySettings</b> with <i>iModeNum</i> set to a nonzero value, the function returns the information that was cached the last time the function was called with <i>iModeNum</i> set to zero.</para></param>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure into which the function stores information about the specified graphics mode. Before calling <b>EnumDisplaySettings</b>, set the <b>dmSize</b> member to <code>sizeof(DEVMODE)</code>, and set the <b>dmDriverExtra</b> member to indicate the size, in bytes, of the additional space available to receive private driver data.</para>
      <para>The <b>EnumDisplaySettings</b> function sets values for the following five <see cref="DEVMODE" /> members:</para>
      <list type="bullet">
        <item>
          <description>
            <b>dmBitsPerPel</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsWidth</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsHeight</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFlags</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.EnumDisplaySettingsA">
    <summary>
      <para>The <b>EnumDisplaySettings</b> function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes of a display device, make a series of calls to this function.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpszDeviceName">
      <para>A pointer to a null-terminated string that specifies the display device about whose graphics mode the function will obtain information.</para>
      <para>This parameter is either <b>NULL</b> or a <see cref="DISPLAY_DEVICE" />.<b>DeviceName</b> returned from <see cref="EnumDisplayDevices" />. A <b>NULL</b> value specifies the current display device on the computer on which the calling thread is running.</para>
    </param>
    <param name="iModeNum">
      <para>The type of information to be retrieved. This value can be a graphics mode index or one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_CURRENT_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the current settings for the display device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_REGISTRY_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the settings for the display device that are currently stored in the registry.</description>
        </listheader>
      </list> <para>Graphics mode indexes start at zero. To obtain information for all of a display device's graphics modes, make a series of calls to <b>EnumDisplaySettings</b>, as follows: Set <i>iModeNum</i> to zero for the first call, and increment <i>iModeNum</i> by one for each subsequent call. Continue calling the function until the return value is zero.</para><para>When you call <b>EnumDisplaySettings</b> with <i>iModeNum</i> set to zero, the operating system initializes and caches information about the display device. When you call <b>EnumDisplaySettings</b> with <i>iModeNum</i> set to a nonzero value, the function returns the information that was cached the last time the function was called with <i>iModeNum</i> set to zero.</para></param>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure into which the function stores information about the specified graphics mode. Before calling <b>EnumDisplaySettings</b>, set the <b>dmSize</b> member to <code>sizeof(DEVMODE)</code>, and set the <b>dmDriverExtra</b> member to indicate the size, in bytes, of the additional space available to receive private driver data.</para>
      <para>The <b>EnumDisplaySettings</b> function sets values for the following five <see cref="DEVMODE" /> members:</para>
      <list type="bullet">
        <item>
          <description>
            <b>dmBitsPerPel</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsWidth</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsHeight</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFlags</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.EnumDisplaySettingsW">
    <summary>
      <para>The <b>EnumDisplaySettings</b> function retrieves information about one of the graphics modes for a display device. To retrieve information for all the graphics modes of a display device, make a series of calls to this function.</para>
      <div>
        <b>Note</b>  Apps that you design to target Windows 8 and later can no longer query or set display modes that are less than 32 bits per pixel (bpp); these operations will fail. These apps have a <a href="https://docs.microsoft.com//windows/desktop/Win7AppQual/compatibility---application-manifest">compatibility manifest</a> that targets Windows 8. Windows 8 still supports 8-bit and 16-bit color modes for desktop apps that were built without a Windows 8 manifest; Windows 8 emulates these modes but still runs in 32-bit color mode.</div>
    </summary>
    <param name="lpszDeviceName">
      <para>A pointer to a null-terminated string that specifies the display device about whose graphics mode the function will obtain information.</para>
      <para>This parameter is either <b>NULL</b> or a <see cref="DISPLAY_DEVICE" />.<b>DeviceName</b> returned from <see cref="EnumDisplayDevices" />. A <b>NULL</b> value specifies the current display device on the computer on which the calling thread is running.</para>
    </param>
    <param name="iModeNum">
      <para>The type of information to be retrieved. This value can be a graphics mode index or one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_CURRENT_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the current settings for the display device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ENUM_REGISTRY_SETTINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieve the settings for the display device that are currently stored in the registry.</description>
        </listheader>
      </list> <para>Graphics mode indexes start at zero. To obtain information for all of a display device's graphics modes, make a series of calls to <b>EnumDisplaySettings</b>, as follows: Set <i>iModeNum</i> to zero for the first call, and increment <i>iModeNum</i> by one for each subsequent call. Continue calling the function until the return value is zero.</para><para>When you call <b>EnumDisplaySettings</b> with <i>iModeNum</i> set to zero, the operating system initializes and caches information about the display device. When you call <b>EnumDisplaySettings</b> with <i>iModeNum</i> set to a nonzero value, the function returns the information that was cached the last time the function was called with <i>iModeNum</i> set to zero.</para></param>
    <param name="lpDevMode">
      <para>A pointer to a <see cref="DEVMODE" /> structure into which the function stores information about the specified graphics mode. Before calling <b>EnumDisplaySettings</b>, set the <b>dmSize</b> member to <code>sizeof(DEVMODE)</code>, and set the <b>dmDriverExtra</b> member to indicate the size, in bytes, of the additional space available to receive private driver data.</para>
      <para>The <b>EnumDisplaySettings</b> function sets values for the following five <see cref="DEVMODE" /> members:</para>
      <list type="bullet">
        <item>
          <description>
            <b>dmBitsPerPel</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsWidth</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmPelsHeight</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFlags</b>
          </description>
        </item>
        <item>
          <description>
            <b>dmDisplayFrequency</b>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.EnumProps">
    <summary>
      <para>Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. <b>EnumProps</b> continues until the last entry is enumerated or the callback function returns <b>FALSE</b>.</para>
      <para>To pass application-defined data to the callback function, use <see cref="EnumPropsEx" /> function.</para>
    </summary>
    <param name="hWnd">A handle to the window whose property list is to be enumerated.</param>
    <param name="lpEnumFunc">A pointer to the callback function. For more information about the callback function, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-propenumproca">PropEnumProc</a> function.</param>
    <returns>The return value specifies the last value returned by the callback function. It is -1 if the function did not find a property for enumeration.</returns>
  </member>
  <member name="Windows.EnumPropsA">
    <summary>
      <para>Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. <b>EnumProps</b> continues until the last entry is enumerated or the callback function returns <b>FALSE</b>.</para>
      <para>To pass application-defined data to the callback function, use <see cref="EnumPropsEx" /> function.</para>
    </summary>
    <param name="hWnd">A handle to the window whose property list is to be enumerated.</param>
    <param name="lpEnumFunc">A pointer to the callback function. For more information about the callback function, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-propenumproca">PropEnumProc</a> function.</param>
    <returns>The return value specifies the last value returned by the callback function. It is -1 if the function did not find a property for enumeration.</returns>
  </member>
  <member name="Windows.EnumPropsW">
    <summary>
      <para>Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. <b>EnumProps</b> continues until the last entry is enumerated or the callback function returns <b>FALSE</b>.</para>
      <para>To pass application-defined data to the callback function, use <see cref="EnumPropsEx" /> function.</para>
    </summary>
    <param name="hWnd">A handle to the window whose property list is to be enumerated.</param>
    <param name="lpEnumFunc">A pointer to the callback function. For more information about the callback function, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-propenumproca">PropEnumProc</a> function.</param>
    <returns>The return value specifies the last value returned by the callback function. It is -1 if the function did not find a property for enumeration.</returns>
  </member>
  <member name="Windows.EnumPropsEx">
    <summary>Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. <b>EnumPropsEx</b> continues until the last entry is enumerated or the callback function returns <b>FALSE</b>.</summary>
    <param name="hWnd">A handle to the window whose property list is to be enumerated.</param>
    <param name="lpEnumFunc">A pointer to the callback function. For more information about the callback function, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-propenumprocexa">PropEnumProcEx</a> function.</param>
    <param name="lParam">Application-defined data to be passed to the callback function.</param>
    <returns>The return value specifies the last value returned by the callback function. It is -1 if the function did not find a property for enumeration.</returns>
  </member>
  <member name="Windows.EnumPropsExA">
    <summary>Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. <b>EnumPropsEx</b> continues until the last entry is enumerated or the callback function returns <b>FALSE</b>.</summary>
    <param name="hWnd">A handle to the window whose property list is to be enumerated.</param>
    <param name="lpEnumFunc">A pointer to the callback function. For more information about the callback function, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-propenumprocexa">PropEnumProcEx</a> function.</param>
    <param name="lParam">Application-defined data to be passed to the callback function.</param>
    <returns>The return value specifies the last value returned by the callback function. It is -1 if the function did not find a property for enumeration.</returns>
  </member>
  <member name="Windows.EnumPropsExW">
    <summary>Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. <b>EnumPropsEx</b> continues until the last entry is enumerated or the callback function returns <b>FALSE</b>.</summary>
    <param name="hWnd">A handle to the window whose property list is to be enumerated.</param>
    <param name="lpEnumFunc">A pointer to the callback function. For more information about the callback function, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-propenumprocexa">PropEnumProcEx</a> function.</param>
    <param name="lParam">Application-defined data to be passed to the callback function.</param>
    <returns>The return value specifies the last value returned by the callback function. It is -1 if the function did not find a property for enumeration.</returns>
  </member>
  <member name="Windows.EnumPropsEx">
    <summary>Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. <b>EnumPropsEx</b> continues until the last entry is enumerated or the callback function returns <b>FALSE</b>.</summary>
    <param name="hWnd">A handle to the window whose property list is to be enumerated.</param>
    <param name="lpEnumFunc">A pointer to the callback function. For more information about the callback function, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-propenumprocexw">PropEnumProcEx</a> function.</param>
    <param name="lParam">Application-defined data to be passed to the callback function.</param>
    <returns>The return value specifies the last value returned by the callback function. It is -1 if the function did not find a property for enumeration.</returns>
  </member>
  <member name="Windows.EnumPropsExA">
    <summary>Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. <b>EnumPropsEx</b> continues until the last entry is enumerated or the callback function returns <b>FALSE</b>.</summary>
    <param name="hWnd">A handle to the window whose property list is to be enumerated.</param>
    <param name="lpEnumFunc">A pointer to the callback function. For more information about the callback function, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-propenumprocexw">PropEnumProcEx</a> function.</param>
    <param name="lParam">Application-defined data to be passed to the callback function.</param>
    <returns>The return value specifies the last value returned by the callback function. It is -1 if the function did not find a property for enumeration.</returns>
  </member>
  <member name="Windows.EnumPropsExW">
    <summary>Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. <b>EnumPropsEx</b> continues until the last entry is enumerated or the callback function returns <b>FALSE</b>.</summary>
    <param name="hWnd">A handle to the window whose property list is to be enumerated.</param>
    <param name="lpEnumFunc">A pointer to the callback function. For more information about the callback function, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-propenumprocexw">PropEnumProcEx</a> function.</param>
    <param name="lParam">Application-defined data to be passed to the callback function.</param>
    <returns>The return value specifies the last value returned by the callback function. It is -1 if the function did not find a property for enumeration.</returns>
  </member>
  <member name="Windows.EnumProps">
    <summary>
      <para>Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. <b>EnumProps</b> continues until the last entry is enumerated or the callback function returns <b>FALSE</b>.</para>
      <para>To pass application-defined data to the callback function, use <see cref="EnumPropsEx" /> function.</para>
    </summary>
    <param name="hWnd">A handle to the window whose property list is to be enumerated.</param>
    <param name="lpEnumFunc">A pointer to the callback function. For more information about the callback function, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-propenumproca">PropEnumProc</a> function.</param>
    <returns>The return value specifies the last value returned by the callback function. It is -1 if the function did not find a property for enumeration.</returns>
  </member>
  <member name="Windows.EnumPropsA">
    <summary>
      <para>Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. <b>EnumProps</b> continues until the last entry is enumerated or the callback function returns <b>FALSE</b>.</para>
      <para>To pass application-defined data to the callback function, use <see cref="EnumPropsEx" /> function.</para>
    </summary>
    <param name="hWnd">A handle to the window whose property list is to be enumerated.</param>
    <param name="lpEnumFunc">A pointer to the callback function. For more information about the callback function, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-propenumproca">PropEnumProc</a> function.</param>
    <returns>The return value specifies the last value returned by the callback function. It is -1 if the function did not find a property for enumeration.</returns>
  </member>
  <member name="Windows.EnumPropsW">
    <summary>
      <para>Enumerates all entries in the property list of a window by passing them, one by one, to the specified callback function. <b>EnumProps</b> continues until the last entry is enumerated or the callback function returns <b>FALSE</b>.</para>
      <para>To pass application-defined data to the callback function, use <see cref="EnumPropsEx" /> function.</para>
    </summary>
    <param name="hWnd">A handle to the window whose property list is to be enumerated.</param>
    <param name="lpEnumFunc">A pointer to the callback function. For more information about the callback function, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-propenumproca">PropEnumProc</a> function.</param>
    <returns>The return value specifies the last value returned by the callback function. It is -1 if the function did not find a property for enumeration.</returns>
  </member>
  <member name="Windows.EnumThreadWindows">
    <summary>Enumerates all nonchild windows associated with a thread by passing the handle to each window, in turn, to an application-defined callback function. <b>EnumThreadWindows</b> continues until the last window is enumerated or the callback function returns <b>FALSE</b>. To enumerate child windows of a particular window, use the <see cref="EnumChildWindows" /> function.</summary>
    <param name="dwThreadId">The identifier of the thread whose windows are to be enumerated.</param>
    <param name="lpfn">A pointer to an application-defined callback function. For more information, see <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms633496(v=vs.85)">EnumThreadWndProc</a>.</param>
    <param name="lParam">An application-defined value to be passed to the callback function.</param>
    <returns>If the callback function returns <b>TRUE</b> for all windows in the thread specified by <i>dwThreadId</i>, the return value is <b>TRUE</b>. If the callback function returns <b>FALSE</b> on any enumerated window, or if there are no windows found in the thread specified by <i>dwThreadId</i>, the return value is <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.EnumWindows">
    <summary>Enumerates all top-level windows on the screen by passing the handle to each window, in turn, to an application-defined callback function. <b>EnumWindows</b> continues until the last top-level window is enumerated or the callback function returns <b>FALSE</b>.</summary>
    <param name="lpEnumFunc">A pointer to an application-defined callback function. For more information, see <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms633498(v=vs.85)">EnumWindowsProc</a>.</param>
    <param name="lParam">An application-defined value to be passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms633498(v=vs.85)">EnumWindowsProc</a> returns zero, the return value is also zero. In this case, the callback function should call <see cref="SetLastError" /> to obtain a meaningful error code to be returned to the caller of <b>EnumWindows</b>.</para>
    </returns>
  </member>
  <member name="Windows.EnumWindowStations">
    <summary>Enumerates all window stations in the current session. The function passes the name of each window station, in turn, to an application-defined callback function.</summary>
    <param name="lpEnumFunc">A pointer to an application-defined<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms682643(v=vs.85)">EnumWindowStationProc</a> callback function.</param>
    <param name="lParam">An application-defined value to be passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, it returns the nonzero value returned by the callback function that was pointed to by <i>lpEnumFunc</i>.</para>
      <para>If the function is unable to perform the enumeration, the return value is zero. Call<see cref="GetLastError" /> to get extended error information.</para>
      <para>If the callback function fails, the return value is zero. The callback function can call <see cref="SetLastError" /> to set an error code for the caller to retrieve by calling <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumWindowStationsA">
    <summary>Enumerates all window stations in the current session. The function passes the name of each window station, in turn, to an application-defined callback function.</summary>
    <param name="lpEnumFunc">A pointer to an application-defined<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms682643(v=vs.85)">EnumWindowStationProc</a> callback function.</param>
    <param name="lParam">An application-defined value to be passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, it returns the nonzero value returned by the callback function that was pointed to by <i>lpEnumFunc</i>.</para>
      <para>If the function is unable to perform the enumeration, the return value is zero. Call<see cref="GetLastError" /> to get extended error information.</para>
      <para>If the callback function fails, the return value is zero. The callback function can call <see cref="SetLastError" /> to set an error code for the caller to retrieve by calling <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumWindowStationsW">
    <summary>Enumerates all window stations in the current session. The function passes the name of each window station, in turn, to an application-defined callback function.</summary>
    <param name="lpEnumFunc">A pointer to an application-defined<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms682643(v=vs.85)">EnumWindowStationProc</a> callback function.</param>
    <param name="lParam">An application-defined value to be passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, it returns the nonzero value returned by the callback function that was pointed to by <i>lpEnumFunc</i>.</para>
      <para>If the function is unable to perform the enumeration, the return value is zero. Call<see cref="GetLastError" /> to get extended error information.</para>
      <para>If the callback function fails, the return value is zero. The callback function can call <see cref="SetLastError" /> to set an error code for the caller to retrieve by calling <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumWindowStations">
    <summary>Enumerates all window stations in the current session. The function passes the name of each window station, in turn, to an application-defined callback function.</summary>
    <param name="lpEnumFunc">A pointer to an application-defined<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms682643(v=vs.85)">EnumWindowStationProc</a> callback function.</param>
    <param name="lParam">An application-defined value to be passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, it returns the nonzero value returned by the callback function that was pointed to by <i>lpEnumFunc</i>.</para>
      <para>If the function is unable to perform the enumeration, the return value is zero. Call<see cref="GetLastError" /> to get extended error information.</para>
      <para>If the callback function fails, the return value is zero. The callback function can call <see cref="SetLastError" /> to set an error code for the caller to retrieve by calling <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumWindowStationsA">
    <summary>Enumerates all window stations in the current session. The function passes the name of each window station, in turn, to an application-defined callback function.</summary>
    <param name="lpEnumFunc">A pointer to an application-defined<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms682643(v=vs.85)">EnumWindowStationProc</a> callback function.</param>
    <param name="lParam">An application-defined value to be passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, it returns the nonzero value returned by the callback function that was pointed to by <i>lpEnumFunc</i>.</para>
      <para>If the function is unable to perform the enumeration, the return value is zero. Call<see cref="GetLastError" /> to get extended error information.</para>
      <para>If the callback function fails, the return value is zero. The callback function can call <see cref="SetLastError" /> to set an error code for the caller to retrieve by calling <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumWindowStationsW">
    <summary>Enumerates all window stations in the current session. The function passes the name of each window station, in turn, to an application-defined callback function.</summary>
    <param name="lpEnumFunc">A pointer to an application-defined<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms682643(v=vs.85)">EnumWindowStationProc</a> callback function.</param>
    <param name="lParam">An application-defined value to be passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, it returns the nonzero value returned by the callback function that was pointed to by <i>lpEnumFunc</i>.</para>
      <para>If the function is unable to perform the enumeration, the return value is zero. Call<see cref="GetLastError" /> to get extended error information.</para>
      <para>If the callback function fails, the return value is zero. The callback function can call <see cref="SetLastError" /> to set an error code for the caller to retrieve by calling <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EqualRect">
    <summary>The <b>EqualRect</b> function determines whether the two specified rectangles are equal by comparing the coordinates of their upper-left and lower-right corners.</summary>
    <param name="lprc1">Pointer to a <see cref="RECT" /> structure that contains the logical coordinates of the first rectangle.</param>
    <param name="lprc2">Pointer to a <see cref="RECT" /> structure that contains the logical coordinates of the second rectangle.</param>
    <returns>
      <para>If the two rectangles are identical, the return value is nonzero.</para>
      <para>If the two rectangles are not identical, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.EvaluateProximityToPolygon">
    <summary>Returns the score of a polygon as the probable touch target (compared to all other polygons that intersect the touch contact area) and an adjusted touch point within the polygon.</summary>
    <param name="numVertices">
      <para>The number of vertices in the polygon. This value must be greater than or equal to 3.</para>
      <para>This value indicates the size of the array, as specified by the <i>controlPolygon</i> parameter.</para>
    </param>
    <param name="controlPolygon">
      <para>The array of x-y screen coordinates that define the shape of the UI element.</para>
      <para>The <i>numVertices</i> parameter specifies the number of coordinates.</para>
    </param>
    <param name="pHitTestingInput">The <see cref="TOUCH_HIT_TESTING_INPUT" /> structure that holds the data for the touch contact area.</param>
    <param name="pProximityEval">The <see cref="TOUCH_HIT_TESTING_PROXIMITY_EVALUATION" /> structure that holds the score and adjusted touch-point data.</param>
    <returns>
      <para>If this function succeeds, it returns TRUE.</para>
      <para>Otherwise, it returns FALSE. To retrieve extended error information, call the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.EvaluateProximityToRect">
    <summary>Returns the score of a rectangle as the probable touch target, compared to all other rectangles that intersect the touch contact area, and an adjusted touch point within the rectangle.</summary>
    <param name="controlBoundingBox">The <see cref="RECT" /> structure that defines the bounding box of the UI element.</param>
    <param name="pHitTestingInput">The <see cref="TOUCH_HIT_TESTING_INPUT" /> structure that holds the data for the touch contact area.</param>
    <param name="pProximityEval">The <see cref="TOUCH_HIT_TESTING_PROXIMITY_EVALUATION" /> structure that holds the score and adjusted touch-point data.</param>
    <returns>
      <para>If this function succeeds, it returns TRUE.</para>
      <para>Otherwise, it returns FALSE. To retrieve extended error information, call the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.ExcludeUpdateRgn">
    <summary>The <b>ExcludeUpdateRgn</b> function prevents drawing within invalid areas of a window by excluding an updated region in the window from a clipping region.</summary>
    <param name="hDC">Handle to the device context associated with the clipping region.</param>
    <param name="hWnd">Handle to the window to update.</param>
    <returns>
      <para>The return value specifies the complexity of the excluded region; it can be any one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>COMPLEXREGION</description>
          <description>Region consists of more than one rectangle.</description>
        </listheader>
        <listheader>
          <description>ERROR</description>
          <description>An error occurred.</description>
        </listheader>
        <listheader>
          <description>NULLREGION</description>
          <description>Region is empty.</description>
        </listheader>
        <listheader>
          <description>SIMPLEREGION</description>
          <description>Region is a single rectangle.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.ExitWindows">
    <summary>Calls the <see cref="ExitWindowsEx" /> function to log off the interactive user. Applications should call <see cref="ExitWindowsEx" /> directly.</summary>
    <param name="dwReserved">This parameter must be zero.</param>
    <param name="Code">This parameter must be zero.</param>
  </member>
  <member name="Windows.ExitWindowsEx">
    <summary>Logs off the interactive user, shuts down the system, or shuts down and restarts the system. It sends the<a href="https://docs.microsoft.com//windows/desktop/Shutdown/wm-queryendsession">WM_QUERYENDSESSION</a> message to all applications to determine if they can be terminated.</summary>
    <param name="uFlags">
      <para>The shutdown type. This parameter must include one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EWX_HYBRID_SHUTDOWN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00400000</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Beginning with Windows 8:  </b>You can prepare the system for a faster startup by combining the <b>EWX_HYBRID_SHUTDOWN</b> flag with the <b>EWX_SHUTDOWN</b> flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EWX_LOGOFF</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>Shuts down all processes running in the logon session of the process that called the <b>ExitWindowsEx</b> function. Then it logs the user off.<para>This flag can be used only by processes running in an interactive user's logon session.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EWX_POWEROFF</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Shuts down the system and turns off the power. The system must support the power-off feature. <para>The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see the following Remarks section.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EWX_REBOOT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Shuts down the system and then restarts the system. <para>The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see the following Remarks section.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EWX_RESTARTAPPS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Shuts down the system and then restarts it, as well as any applications that have been registered for restart using the <see cref="RegisterApplicationRestart" /> function. These application receive the <a href="https://docs.microsoft.com//windows/desktop/Shutdown/wm-queryendsession">WM_QUERYENDSESSION</a> message with <i>lParam</i> set to the ENDSESSION_CLOSEAPP value. For more information, see <a href="https://docs.microsoft.com//windows/desktop/RstMgr/guidelines-for-applications">Guidelines for Applications</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>EWX_SHUTDOWN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Shuts down the system to a point at which it is safe to turn off the power. All file buffers have been flushed to disk, and all running processes have stopped. <para>The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see the following Remarks section.</para><para>Specifying this flag will not turn off the power even if the system supports the power-off feature. You must specify EWX_POWEROFF to do this.<b>Windows XP with SP1:  </b>If the system supports the power-off feature, specifying this flag turns off the power.</para></description>
        </listheader>
      </list> <para>This parameter can optionally include one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>EWX_FORCE</b></term></listheader><listheader><term>0x00000004</term></listheader></list></description><description>This flag has no effect if terminal services is enabled. Otherwise, the system does not send the <a href="https://docs.microsoft.com//windows/desktop/Shutdown/wm-queryendsession">WM_QUERYENDSESSION</a> message. This can cause applications to lose data. Therefore, you should only use this flag in an emergency.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>EWX_FORCEIFHUNG</b></term></listheader><listheader><term>0x00000010</term></listheader></list></description><description>Forces processes to terminate if they do not respond to the <a href="https://docs.microsoft.com//windows/desktop/Shutdown/wm-queryendsession">WM_QUERYENDSESSION</a> or <a href="https://docs.microsoft.com//windows/desktop/Shutdown/wm-endsession">WM_ENDSESSION</a> message within the timeout interval. For more information, see the Remarks.</description></listheader></list></param>
    <param name="dwReason">
      <para>The reason for initiating the shutdown. This parameter must be one of the<a href="https://docs.microsoft.com//windows/desktop/Shutdown/system-shutdown-reason-codes">system shutdown reason codes</a>.</para>
      <para>If this parameter is zero, the SHTDN_REASON_FLAG_PLANNED reason code will not be set and therefore the default action is an undefined shutdown that is logged as "No title for this reason could be found". By default, it is also an unplanned shutdown. Depending on how the system is configured, an unplanned shutdown triggers the creation of a file that contains the system state information, which can delay shutdown. Therefore, do not use zero for this parameter.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero. Because the function executes asynchronously, a nonzero return value indicates that the shutdown has been initiated. It does not indicate whether the shutdown will succeed. It is possible that the system, the user, or another application will abort the shutdown.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FillRect">
    <summary>The <b>FillRect</b> function fills a rectangle by using the specified brush. This function includes the left and top borders, but excludes the right and bottom borders of the rectangle.</summary>
    <param name="hDC">A handle to the device context.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that contains the logical coordinates of the rectangle to be filled.</param>
    <param name="hbr">A handle to the brush used to fill the rectangle.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.FindWindow">
    <summary>
      <para>Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search.</para>
      <para>To search child windows, beginning with a specified child window, use the <see cref="FindWindowEx" /> function.</para>
    </summary>
    <param name="lpClassName">
      <para>The class name or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero.</para>
      <para>If <i>lpClassName</i> points to a string, it specifies the window class name. The class name can be any name registered with <see cref="RegisterClass" /> or <see cref="RegisterClassEx" />, or any of the predefined control-class names.</para>
      <para>If <i>lpClassName</i> is <b>NULL</b>, it finds any window whose title matches the <i>lpWindowName</i> parameter.</para>
    </param>
    <param name="lpWindowName">The window name (the window's title). If this parameter is <b>NULL</b>, all window names match.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the window that has the specified class name and window name.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindWindowA">
    <summary>
      <para>Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search.</para>
      <para>To search child windows, beginning with a specified child window, use the <see cref="FindWindowEx" /> function.</para>
    </summary>
    <param name="lpClassName">
      <para>The class name or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero.</para>
      <para>If <i>lpClassName</i> points to a string, it specifies the window class name. The class name can be any name registered with <see cref="RegisterClass" /> or <see cref="RegisterClassEx" />, or any of the predefined control-class names.</para>
      <para>If <i>lpClassName</i> is <b>NULL</b>, it finds any window whose title matches the <i>lpWindowName</i> parameter.</para>
    </param>
    <param name="lpWindowName">The window name (the window's title). If this parameter is <b>NULL</b>, all window names match.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the window that has the specified class name and window name.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindWindowW">
    <summary>
      <para>Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search.</para>
      <para>To search child windows, beginning with a specified child window, use the <see cref="FindWindowEx" /> function.</para>
    </summary>
    <param name="lpClassName">
      <para>The class name or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero.</para>
      <para>If <i>lpClassName</i> points to a string, it specifies the window class name. The class name can be any name registered with <see cref="RegisterClass" /> or <see cref="RegisterClassEx" />, or any of the predefined control-class names.</para>
      <para>If <i>lpClassName</i> is <b>NULL</b>, it finds any window whose title matches the <i>lpWindowName</i> parameter.</para>
    </param>
    <param name="lpWindowName">The window name (the window's title). If this parameter is <b>NULL</b>, all window names match.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the window that has the specified class name and window name.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindWindowEx">
    <summary>Retrieves a handle to a window whose class name and window name match the specified strings. The function searches child windows, beginning with the one following the specified child window. This function does not perform a case-sensitive search.</summary>
    <param name="hWndParent">
      <para>A handle to the parent window whose child windows are to be searched.</para>
      <para>If <i>hwndParent</i> is <b>NULL</b>, the function uses the desktop window as the parent window. The function searches among windows that are child windows of the desktop.</para>
      <para>If <i>hwndParent</i> is <b>HWND_MESSAGE</b>, the function searches all <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">message-only windows</a>.</para>
    </param>
    <param name="hWndChildAfter">
      <para>A handle to a child window. The search begins with the next child window in the Z order. The child window must be a direct child window of <i>hwndParent</i>, not just a descendant window.</para>
      <para>If <i>hwndChildAfter</i> is <b>NULL</b>, the search begins with the first child window of <i>hwndParent</i>.</para>
      <para>Note that if both <i>hwndParent</i> and <i>hwndChildAfter</i> are <b>NULL</b>, the function searches all top-level and message-only windows.</para>
    </param>
    <param name="lpszClass">
      <para>The class name or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be placed in the low-order word of <i>lpszClass</i>; the high-order word must be zero.</para>
      <para>If <i>lpszClass</i> is a string, it specifies the window class name. The class name can be any name registered with <see cref="RegisterClass" /> or <see cref="RegisterClassEx" />, or any of the predefined control-class names, or it can be <code>MAKEINTATOM(0x8000)</code>. In this latter case, 0x8000 is the atom for a menu class. For more information, see the Remarks section of this topic.</para>
    </param>
    <param name="lpszWindow">The window name (the window's title). If this parameter is <b>NULL</b>, all window names match.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the window that has the specified class and window names.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindWindowExA">
    <summary>Retrieves a handle to a window whose class name and window name match the specified strings. The function searches child windows, beginning with the one following the specified child window. This function does not perform a case-sensitive search.</summary>
    <param name="hWndParent">
      <para>A handle to the parent window whose child windows are to be searched.</para>
      <para>If <i>hwndParent</i> is <b>NULL</b>, the function uses the desktop window as the parent window. The function searches among windows that are child windows of the desktop.</para>
      <para>If <i>hwndParent</i> is <b>HWND_MESSAGE</b>, the function searches all <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">message-only windows</a>.</para>
    </param>
    <param name="hWndChildAfter">
      <para>A handle to a child window. The search begins with the next child window in the Z order. The child window must be a direct child window of <i>hwndParent</i>, not just a descendant window.</para>
      <para>If <i>hwndChildAfter</i> is <b>NULL</b>, the search begins with the first child window of <i>hwndParent</i>.</para>
      <para>Note that if both <i>hwndParent</i> and <i>hwndChildAfter</i> are <b>NULL</b>, the function searches all top-level and message-only windows.</para>
    </param>
    <param name="lpszClass">
      <para>The class name or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be placed in the low-order word of <i>lpszClass</i>; the high-order word must be zero.</para>
      <para>If <i>lpszClass</i> is a string, it specifies the window class name. The class name can be any name registered with <see cref="RegisterClass" /> or <see cref="RegisterClassEx" />, or any of the predefined control-class names, or it can be <code>MAKEINTATOM(0x8000)</code>. In this latter case, 0x8000 is the atom for a menu class. For more information, see the Remarks section of this topic.</para>
    </param>
    <param name="lpszWindow">The window name (the window's title). If this parameter is <b>NULL</b>, all window names match.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the window that has the specified class and window names.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindWindowExW">
    <summary>Retrieves a handle to a window whose class name and window name match the specified strings. The function searches child windows, beginning with the one following the specified child window. This function does not perform a case-sensitive search.</summary>
    <param name="hWndParent">
      <para>A handle to the parent window whose child windows are to be searched.</para>
      <para>If <i>hwndParent</i> is <b>NULL</b>, the function uses the desktop window as the parent window. The function searches among windows that are child windows of the desktop.</para>
      <para>If <i>hwndParent</i> is <b>HWND_MESSAGE</b>, the function searches all <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">message-only windows</a>.</para>
    </param>
    <param name="hWndChildAfter">
      <para>A handle to a child window. The search begins with the next child window in the Z order. The child window must be a direct child window of <i>hwndParent</i>, not just a descendant window.</para>
      <para>If <i>hwndChildAfter</i> is <b>NULL</b>, the search begins with the first child window of <i>hwndParent</i>.</para>
      <para>Note that if both <i>hwndParent</i> and <i>hwndChildAfter</i> are <b>NULL</b>, the function searches all top-level and message-only windows.</para>
    </param>
    <param name="lpszClass">
      <para>The class name or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be placed in the low-order word of <i>lpszClass</i>; the high-order word must be zero.</para>
      <para>If <i>lpszClass</i> is a string, it specifies the window class name. The class name can be any name registered with <see cref="RegisterClass" /> or <see cref="RegisterClassEx" />, or any of the predefined control-class names, or it can be <code>MAKEINTATOM(0x8000)</code>. In this latter case, 0x8000 is the atom for a menu class. For more information, see the Remarks section of this topic.</para>
    </param>
    <param name="lpszWindow">The window name (the window's title). If this parameter is <b>NULL</b>, all window names match.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the window that has the specified class and window names.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindWindowEx">
    <summary>Retrieves a handle to a window whose class name and window name match the specified strings. The function searches child windows, beginning with the one following the specified child window. This function does not perform a case-sensitive search.</summary>
    <param name="hWndParent">
      <para>A handle to the parent window whose child windows are to be searched.</para>
      <para>If <i>hwndParent</i> is <b>NULL</b>, the function uses the desktop window as the parent window. The function searches among windows that are child windows of the desktop.</para>
      <para>If <i>hwndParent</i> is <b>HWND_MESSAGE</b>, the function searches all <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">message-only windows</a>.</para>
    </param>
    <param name="hWndChildAfter">
      <para>A handle to a child window. The search begins with the next child window in the Z order. The child window must be a direct child window of <i>hwndParent</i>, not just a descendant window.</para>
      <para>If <i>hwndChildAfter</i> is <b>NULL</b>, the search begins with the first child window of <i>hwndParent</i>.</para>
      <para>Note that if both <i>hwndParent</i> and <i>hwndChildAfter</i> are <b>NULL</b>, the function searches all top-level and message-only windows.</para>
    </param>
    <param name="lpszClass">
      <para>The class name or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be placed in the low-order word of <i>lpszClass</i>; the high-order word must be zero.</para>
      <para>If <i>lpszClass</i> is a string, it specifies the window class name. The class name can be any name registered with <see cref="RegisterClass" /> or <see cref="RegisterClassEx" />, or any of the predefined control-class names, or it can be <code>MAKEINTATOM(0x8000)</code>. In this latter case, 0x8000 is the atom for a menu class. For more information, see the Remarks section of this topic.</para>
    </param>
    <param name="lpszWindow">The window name (the window's title). If this parameter is <b>NULL</b>, all window names match.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the window that has the specified class and window names.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindWindowExA">
    <summary>Retrieves a handle to a window whose class name and window name match the specified strings. The function searches child windows, beginning with the one following the specified child window. This function does not perform a case-sensitive search.</summary>
    <param name="hWndParent">
      <para>A handle to the parent window whose child windows are to be searched.</para>
      <para>If <i>hwndParent</i> is <b>NULL</b>, the function uses the desktop window as the parent window. The function searches among windows that are child windows of the desktop.</para>
      <para>If <i>hwndParent</i> is <b>HWND_MESSAGE</b>, the function searches all <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">message-only windows</a>.</para>
    </param>
    <param name="hWndChildAfter">
      <para>A handle to a child window. The search begins with the next child window in the Z order. The child window must be a direct child window of <i>hwndParent</i>, not just a descendant window.</para>
      <para>If <i>hwndChildAfter</i> is <b>NULL</b>, the search begins with the first child window of <i>hwndParent</i>.</para>
      <para>Note that if both <i>hwndParent</i> and <i>hwndChildAfter</i> are <b>NULL</b>, the function searches all top-level and message-only windows.</para>
    </param>
    <param name="lpszClass">
      <para>The class name or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be placed in the low-order word of <i>lpszClass</i>; the high-order word must be zero.</para>
      <para>If <i>lpszClass</i> is a string, it specifies the window class name. The class name can be any name registered with <see cref="RegisterClass" /> or <see cref="RegisterClassEx" />, or any of the predefined control-class names, or it can be <code>MAKEINTATOM(0x8000)</code>. In this latter case, 0x8000 is the atom for a menu class. For more information, see the Remarks section of this topic.</para>
    </param>
    <param name="lpszWindow">The window name (the window's title). If this parameter is <b>NULL</b>, all window names match.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the window that has the specified class and window names.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindWindowExW">
    <summary>Retrieves a handle to a window whose class name and window name match the specified strings. The function searches child windows, beginning with the one following the specified child window. This function does not perform a case-sensitive search.</summary>
    <param name="hWndParent">
      <para>A handle to the parent window whose child windows are to be searched.</para>
      <para>If <i>hwndParent</i> is <b>NULL</b>, the function uses the desktop window as the parent window. The function searches among windows that are child windows of the desktop.</para>
      <para>If <i>hwndParent</i> is <b>HWND_MESSAGE</b>, the function searches all <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">message-only windows</a>.</para>
    </param>
    <param name="hWndChildAfter">
      <para>A handle to a child window. The search begins with the next child window in the Z order. The child window must be a direct child window of <i>hwndParent</i>, not just a descendant window.</para>
      <para>If <i>hwndChildAfter</i> is <b>NULL</b>, the search begins with the first child window of <i>hwndParent</i>.</para>
      <para>Note that if both <i>hwndParent</i> and <i>hwndChildAfter</i> are <b>NULL</b>, the function searches all top-level and message-only windows.</para>
    </param>
    <param name="lpszClass">
      <para>The class name or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be placed in the low-order word of <i>lpszClass</i>; the high-order word must be zero.</para>
      <para>If <i>lpszClass</i> is a string, it specifies the window class name. The class name can be any name registered with <see cref="RegisterClass" /> or <see cref="RegisterClassEx" />, or any of the predefined control-class names, or it can be <code>MAKEINTATOM(0x8000)</code>. In this latter case, 0x8000 is the atom for a menu class. For more information, see the Remarks section of this topic.</para>
    </param>
    <param name="lpszWindow">The window name (the window's title). If this parameter is <b>NULL</b>, all window names match.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the window that has the specified class and window names.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindWindow">
    <summary>
      <para>Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search.</para>
      <para>To search child windows, beginning with a specified child window, use the <see cref="FindWindowEx" /> function.</para>
    </summary>
    <param name="lpClassName">
      <para>The class name or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero.</para>
      <para>If <i>lpClassName</i> points to a string, it specifies the window class name. The class name can be any name registered with <see cref="RegisterClass" /> or <see cref="RegisterClassEx" />, or any of the predefined control-class names.</para>
      <para>If <i>lpClassName</i> is <b>NULL</b>, it finds any window whose title matches the <i>lpWindowName</i> parameter.</para>
    </param>
    <param name="lpWindowName">The window name (the window's title). If this parameter is <b>NULL</b>, all window names match.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the window that has the specified class name and window name.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindWindowA">
    <summary>
      <para>Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search.</para>
      <para>To search child windows, beginning with a specified child window, use the <see cref="FindWindowEx" /> function.</para>
    </summary>
    <param name="lpClassName">
      <para>The class name or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero.</para>
      <para>If <i>lpClassName</i> points to a string, it specifies the window class name. The class name can be any name registered with <see cref="RegisterClass" /> or <see cref="RegisterClassEx" />, or any of the predefined control-class names.</para>
      <para>If <i>lpClassName</i> is <b>NULL</b>, it finds any window whose title matches the <i>lpWindowName</i> parameter.</para>
    </param>
    <param name="lpWindowName">The window name (the window's title). If this parameter is <b>NULL</b>, all window names match.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the window that has the specified class name and window name.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindWindowW">
    <summary>
      <para>Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search.</para>
      <para>To search child windows, beginning with a specified child window, use the <see cref="FindWindowEx" /> function.</para>
    </summary>
    <param name="lpClassName">
      <para>The class name or a class atom created by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero.</para>
      <para>If <i>lpClassName</i> points to a string, it specifies the window class name. The class name can be any name registered with <see cref="RegisterClass" /> or <see cref="RegisterClassEx" />, or any of the predefined control-class names.</para>
      <para>If <i>lpClassName</i> is <b>NULL</b>, it finds any window whose title matches the <i>lpWindowName</i> parameter.</para>
    </param>
    <param name="lpWindowName">The window name (the window's title). If this parameter is <b>NULL</b>, all window names match.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the window that has the specified class name and window name.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FlashWindow">
    <summary>
      <para>Flashes the specified window one time. It does not change the active state of the window.</para>
      <para>To flash the window a specified number of times, use the<see cref="FlashWindowEx" /> function.</para>
    </summary>
    <param name="hWnd">A handle to the window to be flashed. The window can be either open or minimized.</param>
    <param name="bInvert">
      <para>If this parameter is <b>TRUE</b>, the window is flashed from one state to the other. If it is <b>FALSE</b>, the window is returned to its original state (either active or inactive).</para>
      <para>When an application is minimized and this parameter is <b>TRUE</b>, the taskbar window button flashes active/inactive. If it is <b>FALSE</b>, the taskbar window button flashes inactive, meaning that it does not change colors. It flashes, as if it were being redrawn, but it does not provide the visual invert clue to the user.</para>
    </param>
    <returns>The return value specifies the window's state before the call to the<b>FlashWindow</b> function. If the window caption was drawn as active before the call, the return value is nonzero. Otherwise, the return value is zero.</returns>
  </member>
  <member name="Windows.FlashWindowEx">
    <summary>Flashes the specified window. It does not change the active state of the window.</summary>
    <param name="pfwi">A pointer to a<see cref="FLASHWINFO" /> structure.</param>
    <returns>The return value specifies the window's state before the call to the<b>FlashWindowEx</b> function. If the window caption was drawn as active before the call, the return value is nonzero. Otherwise, the return value is zero.</returns>
  </member>
  <member name="Windows.FrameRect">
    <summary>The <b>FrameRect</b> function draws a border around the specified rectangle by using the specified brush. The width and height of the border are always one logical unit.</summary>
    <param name="hDC">A handle to the device context in which the border is drawn.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that contains the logical coordinates of the upper-left and lower-right corners of the rectangle.</param>
    <param name="hbr">A handle to the brush used to draw the border.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetActiveWindow">
    <summary>Retrieves the window handle to the active window attached to the calling thread's message queue.</summary>
    <returns>The return value is the handle to the active window attached to the calling thread's message queue. Otherwise, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.GetAltTabInfo">
    <summary>Retrieves status information for the specified window if it is the application-switching (ALT+TAB) window.</summary>
    <param name="hwnd">A handle to the window for which status information will be retrieved. This window must be the application-switching window.</param>
    <param name="iItem">The index of the icon in the application-switching window. If the <i>pszItemText</i> parameter is not <b>NULL</b>, the name of the item is copied to the <i>pszItemText</i> string. If this parameter is –1, the name of the item is not copied.</param>
    <param name="pati">A pointer to an <see cref="ALTTABINFO" /> structure to receive the status information. Note that you must set the <b>csSize</b> member to <code>sizeof(ALTTABINFO)</code> before calling this function.</param>
    <param name="pszItemText">The name of the item. If this parameter is <b>NULL</b>, the name of the item is not copied.</param>
    <param name="cchItemText">The size, in characters, of the <i>pszItemText</i> buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetAltTabInfoA">
    <summary>Retrieves status information for the specified window if it is the application-switching (ALT+TAB) window.</summary>
    <param name="hwnd">A handle to the window for which status information will be retrieved. This window must be the application-switching window.</param>
    <param name="iItem">The index of the icon in the application-switching window. If the <i>pszItemText</i> parameter is not <b>NULL</b>, the name of the item is copied to the <i>pszItemText</i> string. If this parameter is –1, the name of the item is not copied.</param>
    <param name="pati">A pointer to an <see cref="ALTTABINFO" /> structure to receive the status information. Note that you must set the <b>csSize</b> member to <code>sizeof(ALTTABINFO)</code> before calling this function.</param>
    <param name="pszItemText">The name of the item. If this parameter is <b>NULL</b>, the name of the item is not copied.</param>
    <param name="cchItemText">The size, in characters, of the <i>pszItemText</i> buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetAltTabInfoW">
    <summary>Retrieves status information for the specified window if it is the application-switching (ALT+TAB) window.</summary>
    <param name="hwnd">A handle to the window for which status information will be retrieved. This window must be the application-switching window.</param>
    <param name="iItem">The index of the icon in the application-switching window. If the <i>pszItemText</i> parameter is not <b>NULL</b>, the name of the item is copied to the <i>pszItemText</i> string. If this parameter is –1, the name of the item is not copied.</param>
    <param name="pati">A pointer to an <see cref="ALTTABINFO" /> structure to receive the status information. Note that you must set the <b>csSize</b> member to <code>sizeof(ALTTABINFO)</code> before calling this function.</param>
    <param name="pszItemText">The name of the item. If this parameter is <b>NULL</b>, the name of the item is not copied.</param>
    <param name="cchItemText">The size, in characters, of the <i>pszItemText</i> buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetAltTabInfo">
    <summary>Retrieves status information for the specified window if it is the application-switching (ALT+TAB) window.</summary>
    <param name="hwnd">A handle to the window for which status information will be retrieved. This window must be the application-switching window.</param>
    <param name="iItem">The index of the icon in the application-switching window. If the <i>pszItemText</i> parameter is not <b>NULL</b>, the name of the item is copied to the <i>pszItemText</i> string. If this parameter is –1, the name of the item is not copied.</param>
    <param name="pati">A pointer to an <see cref="ALTTABINFO" /> structure to receive the status information. Note that you must set the <b>csSize</b> member to <code>sizeof(ALTTABINFO)</code> before calling this function.</param>
    <param name="pszItemText">The name of the item. If this parameter is <b>NULL</b>, the name of the item is not copied.</param>
    <param name="cchItemText">The size, in characters, of the <i>pszItemText</i> buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetAltTabInfoA">
    <summary>Retrieves status information for the specified window if it is the application-switching (ALT+TAB) window.</summary>
    <param name="hwnd">A handle to the window for which status information will be retrieved. This window must be the application-switching window.</param>
    <param name="iItem">The index of the icon in the application-switching window. If the <i>pszItemText</i> parameter is not <b>NULL</b>, the name of the item is copied to the <i>pszItemText</i> string. If this parameter is –1, the name of the item is not copied.</param>
    <param name="pati">A pointer to an <see cref="ALTTABINFO" /> structure to receive the status information. Note that you must set the <b>csSize</b> member to <code>sizeof(ALTTABINFO)</code> before calling this function.</param>
    <param name="pszItemText">The name of the item. If this parameter is <b>NULL</b>, the name of the item is not copied.</param>
    <param name="cchItemText">The size, in characters, of the <i>pszItemText</i> buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetAltTabInfoW">
    <summary>Retrieves status information for the specified window if it is the application-switching (ALT+TAB) window.</summary>
    <param name="hwnd">A handle to the window for which status information will be retrieved. This window must be the application-switching window.</param>
    <param name="iItem">The index of the icon in the application-switching window. If the <i>pszItemText</i> parameter is not <b>NULL</b>, the name of the item is copied to the <i>pszItemText</i> string. If this parameter is –1, the name of the item is not copied.</param>
    <param name="pati">A pointer to an <see cref="ALTTABINFO" /> structure to receive the status information. Note that you must set the <b>csSize</b> member to <code>sizeof(ALTTABINFO)</code> before calling this function.</param>
    <param name="pszItemText">The name of the item. If this parameter is <b>NULL</b>, the name of the item is not copied.</param>
    <param name="cchItemText">The size, in characters, of the <i>pszItemText</i> buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetAncestor">
    <summary>Retrieves the handle to the ancestor of the specified window.</summary>
    <param name="hwnd">A handle to the window whose ancestor is to be retrieved. If this parameter is the desktop window, the function returns <b>NULL</b>.</param>
    <param name="gaFlags">
      <para>The ancestor to be retrieved. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GA_PARENT</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the parent window. This does not include the owner, as it does with the <see cref="GetParent" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GA_ROOT</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the root window by walking the chain of parent windows.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GA_ROOTOWNER</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the owned root window by walking the chain of parent and owner windows returned by <see cref="GetParent" />.</description>
        </listheader>
      </list>
    </param>
    <returns>The return value is the handle to the ancestor window.</returns>
  </member>
  <member name="Windows.GetAsyncKeyState">
    <summary>Determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to <b>GetAsyncKeyState</b>.</summary>
    <param name="vKey">
      <para>The virtual-key code. For more information, see <a href="https://docs.microsoft.com//windows/desktop/inputdev/virtual-key-codes">Virtual Key Codes</a>.</para>
      <para>You can use left- and right-distinguishing constants to specify certain keys. See the Remarks section for further information.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value specifies whether the key was pressed since the last call to <b>GetAsyncKeyState</b>, and whether the key is currently up or down. If the most significant bit is set, the key is down, and if the least significant bit is set, the key was pressed after the previous call to <b>GetAsyncKeyState</b>. However, you should not rely on this last behavior; for more information, see the Remarks.</para>
      <para>The return value is zero for the following cases:</para>
      <list type="bullet">
        <item>
          <description>The current desktop is not the active desktop</description>
        </item>
        <item>
          <description>The foreground thread belongs to another process and the desktop does not allow the hook or the journal record.</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.GetAutoRotationState">
    <summary>Retrieves an <see cref="AR_STATE" /> value containing the state of screen auto-rotation for the system, for example whether auto-rotation is supported, and whether it is enabled by the user. <b>GetAutoRotationState</b> provides a robust and diverse way of querying for auto-rotation state, and more. For example, if you want your app to behave differently when multiple monitors are attached then you can determine that from the <b>AR_STATE</b> returned.</summary>
    <param name="pState">Pointer to a location in memory that will receive the current state of auto-rotation for the system.</param>
    <returns>
      <para>TRUE if the method succeeds, otherwise FALSE.</para>
      <para>See <see cref="GetDisplayAutoRotationPreferences" /> for an example of using this function.</para>
    </returns>
  </member>
  <member name="Windows.GetAwarenessFromDpiAwarenessContext">
    <summary>Retrieves the <see cref="DPI_AWARENESS" /> value from a <b>DPI_AWARENESS_CONTEXT</b>.</summary>
    <param name="value">The <b>DPI_AWARENESS_CONTEXT</b> you want to examine.</param>
    <returns>The <see cref="DPI_AWARENESS" />. If the provided <i>value</i> is <b>null</b> or invalid, this method will return <b>DPI_AWARENESS_INVALID</b>.</returns>
  </member>
  <member name="Windows.GetCapture">
    <summary>Retrieves a handle to the window (if any) that has captured the mouse. Only one window at a time can capture the mouse; this window receives mouse input whether or not the cursor is within its borders.</summary>
    <returns>The return value is a handle to the capture window associated with the current thread. If no window in the thread has captured the mouse, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.GetCaretBlinkTime">
    <summary>Retrieves the time required to invert the caret's pixels. The user can set this value.</summary>
    <returns>
      <para>If the function succeeds, the return value is the blink time, in milliseconds.</para>
      <para>A return value of <b>INFINITE</b> indicates that the caret does not blink.</para>
      <para>A return value is zero indicates that the function has failed. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetCaretPos">
    <summary>Copies the caret's position to the specified <see cref="POINT" /> structure.</summary>
    <param name="lpPoint">A pointer to the <see cref="POINT" /> structure that is to receive the client coordinates of the caret.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassInfo">
    <summary>
      <para>Retrieves information about a window class.</para>
      <div>
        <b>Note</b>  The <b>GetClassInfo</b> function has been superseded by the <see cref="GetClassInfoEx" /> function. You can still use <b>GetClassInfo</b>, however, if you do not need information about the class small icon.</div>
    </summary>
    <param name="hInstance">A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to <b>NULL</b>.</param>
    <param name="lpClassName">
      <para>The class name. The name must be that of a preregistered class or a class registered by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function.</para>
      <para>Alternatively, this parameter can be an atom. If so, it must be a class atom created by a previous call to <see cref="RegisterClass" /> or <see cref="RegisterClassEx" />. The atom must be in the low-order word of<i>lpClassName</i>; the high-order word must be zero.</para>
    </param>
    <param name="lpWndClass">A pointer to a <see cref="WNDCLASS" /> structure that receives the information about the class.</param>
    <returns>
      <para>If the function finds a matching class and successfully copies the data, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassInfoA">
    <summary>
      <para>Retrieves information about a window class.</para>
      <div>
        <b>Note</b>  The <b>GetClassInfo</b> function has been superseded by the <see cref="GetClassInfoEx" /> function. You can still use <b>GetClassInfo</b>, however, if you do not need information about the class small icon.</div>
    </summary>
    <param name="hInstance">A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to <b>NULL</b>.</param>
    <param name="lpClassName">
      <para>The class name. The name must be that of a preregistered class or a class registered by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function.</para>
      <para>Alternatively, this parameter can be an atom. If so, it must be a class atom created by a previous call to <see cref="RegisterClass" /> or <see cref="RegisterClassEx" />. The atom must be in the low-order word of<i>lpClassName</i>; the high-order word must be zero.</para>
    </param>
    <param name="lpWndClass">A pointer to a <see cref="WNDCLASS" /> structure that receives the information about the class.</param>
    <returns>
      <para>If the function finds a matching class and successfully copies the data, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassInfoW">
    <summary>
      <para>Retrieves information about a window class.</para>
      <div>
        <b>Note</b>  The <b>GetClassInfo</b> function has been superseded by the <see cref="GetClassInfoEx" /> function. You can still use <b>GetClassInfo</b>, however, if you do not need information about the class small icon.</div>
    </summary>
    <param name="hInstance">A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to <b>NULL</b>.</param>
    <param name="lpClassName">
      <para>The class name. The name must be that of a preregistered class or a class registered by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function.</para>
      <para>Alternatively, this parameter can be an atom. If so, it must be a class atom created by a previous call to <see cref="RegisterClass" /> or <see cref="RegisterClassEx" />. The atom must be in the low-order word of<i>lpClassName</i>; the high-order word must be zero.</para>
    </param>
    <param name="lpWndClass">A pointer to a <see cref="WNDCLASS" /> structure that receives the information about the class.</param>
    <returns>
      <para>If the function finds a matching class and successfully copies the data, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassInfoEx">
    <summary>Retrieves information about a window class, including a handle to the small icon associated with the window class. The <see cref="GetClassInfo" /> function does not retrieve a handle to the small icon.</summary>
    <param name="hInstance">A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to <b>NULL</b>.</param>
    <param name="lpszClass">The class name. The name must be that of a preregistered class or a class registered by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. Alternatively, this parameter can be a class atom created by a previous call to <b>RegisterClass</b> or <b>RegisterClassEx</b>. The atom must be in the low-order word of<i>lpszClass</i>; the high-order word must be zero.</param>
    <param name="lpwcx">A pointer to a <see cref="WNDCLASSEX" /> structure that receives the information about the class.</param>
    <returns>
      <para>If the function finds a matching class and successfully copies the data, the return value is nonzero.</para>
      <para>If the function does not find a matching class and successfully copy the data, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassInfoExA">
    <summary>Retrieves information about a window class, including a handle to the small icon associated with the window class. The <see cref="GetClassInfo" /> function does not retrieve a handle to the small icon.</summary>
    <param name="hInstance">A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to <b>NULL</b>.</param>
    <param name="lpszClass">The class name. The name must be that of a preregistered class or a class registered by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. Alternatively, this parameter can be a class atom created by a previous call to <b>RegisterClass</b> or <b>RegisterClassEx</b>. The atom must be in the low-order word of<i>lpszClass</i>; the high-order word must be zero.</param>
    <param name="lpwcx">A pointer to a <see cref="WNDCLASSEX" /> structure that receives the information about the class.</param>
    <returns>
      <para>If the function finds a matching class and successfully copies the data, the return value is nonzero.</para>
      <para>If the function does not find a matching class and successfully copy the data, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassInfoExW">
    <summary>Retrieves information about a window class, including a handle to the small icon associated with the window class. The <see cref="GetClassInfo" /> function does not retrieve a handle to the small icon.</summary>
    <param name="hInstance">A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to <b>NULL</b>.</param>
    <param name="lpszClass">The class name. The name must be that of a preregistered class or a class registered by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. Alternatively, this parameter can be a class atom created by a previous call to <b>RegisterClass</b> or <b>RegisterClassEx</b>. The atom must be in the low-order word of<i>lpszClass</i>; the high-order word must be zero.</param>
    <param name="lpwcx">A pointer to a <see cref="WNDCLASSEX" /> structure that receives the information about the class.</param>
    <returns>
      <para>If the function finds a matching class and successfully copies the data, the return value is nonzero.</para>
      <para>If the function does not find a matching class and successfully copy the data, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassInfoEx">
    <summary>Retrieves information about a window class, including a handle to the small icon associated with the window class. The <see cref="GetClassInfo" /> function does not retrieve a handle to the small icon.</summary>
    <param name="hInstance">A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to <b>NULL</b>.</param>
    <param name="lpszClass">The class name. The name must be that of a preregistered class or a class registered by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. Alternatively, this parameter can be a class atom created by a previous call to <b>RegisterClass</b> or <b>RegisterClassEx</b>. The atom must be in the low-order word of<i>lpszClass</i>; the high-order word must be zero.</param>
    <param name="lpwcx">A pointer to a <see cref="WNDCLASSEX" /> structure that receives the information about the class.</param>
    <returns>
      <para>If the function finds a matching class and successfully copies the data, the return value is nonzero.</para>
      <para>If the function does not find a matching class and successfully copy the data, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassInfoExA">
    <summary>Retrieves information about a window class, including a handle to the small icon associated with the window class. The <see cref="GetClassInfo" /> function does not retrieve a handle to the small icon.</summary>
    <param name="hInstance">A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to <b>NULL</b>.</param>
    <param name="lpszClass">The class name. The name must be that of a preregistered class or a class registered by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. Alternatively, this parameter can be a class atom created by a previous call to <b>RegisterClass</b> or <b>RegisterClassEx</b>. The atom must be in the low-order word of<i>lpszClass</i>; the high-order word must be zero.</param>
    <param name="lpwcx">A pointer to a <see cref="WNDCLASSEX" /> structure that receives the information about the class.</param>
    <returns>
      <para>If the function finds a matching class and successfully copies the data, the return value is nonzero.</para>
      <para>If the function does not find a matching class and successfully copy the data, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassInfoExW">
    <summary>Retrieves information about a window class, including a handle to the small icon associated with the window class. The <see cref="GetClassInfo" /> function does not retrieve a handle to the small icon.</summary>
    <param name="hInstance">A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to <b>NULL</b>.</param>
    <param name="lpszClass">The class name. The name must be that of a preregistered class or a class registered by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. Alternatively, this parameter can be a class atom created by a previous call to <b>RegisterClass</b> or <b>RegisterClassEx</b>. The atom must be in the low-order word of<i>lpszClass</i>; the high-order word must be zero.</param>
    <param name="lpwcx">A pointer to a <see cref="WNDCLASSEX" /> structure that receives the information about the class.</param>
    <returns>
      <para>If the function finds a matching class and successfully copies the data, the return value is nonzero.</para>
      <para>If the function does not find a matching class and successfully copy the data, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassInfo">
    <summary>
      <para>Retrieves information about a window class.</para>
      <div>
        <b>Note</b>  The <b>GetClassInfo</b> function has been superseded by the <see cref="GetClassInfoEx" /> function. You can still use <b>GetClassInfo</b>, however, if you do not need information about the class small icon.</div>
    </summary>
    <param name="hInstance">A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to <b>NULL</b>.</param>
    <param name="lpClassName">
      <para>The class name. The name must be that of a preregistered class or a class registered by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function.</para>
      <para>Alternatively, this parameter can be an atom. If so, it must be a class atom created by a previous call to <see cref="RegisterClass" /> or <see cref="RegisterClassEx" />. The atom must be in the low-order word of<i>lpClassName</i>; the high-order word must be zero.</para>
    </param>
    <param name="lpWndClass">A pointer to a <see cref="WNDCLASS" /> structure that receives the information about the class.</param>
    <returns>
      <para>If the function finds a matching class and successfully copies the data, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassInfoA">
    <summary>
      <para>Retrieves information about a window class.</para>
      <div>
        <b>Note</b>  The <b>GetClassInfo</b> function has been superseded by the <see cref="GetClassInfoEx" /> function. You can still use <b>GetClassInfo</b>, however, if you do not need information about the class small icon.</div>
    </summary>
    <param name="hInstance">A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to <b>NULL</b>.</param>
    <param name="lpClassName">
      <para>The class name. The name must be that of a preregistered class or a class registered by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function.</para>
      <para>Alternatively, this parameter can be an atom. If so, it must be a class atom created by a previous call to <see cref="RegisterClass" /> or <see cref="RegisterClassEx" />. The atom must be in the low-order word of<i>lpClassName</i>; the high-order word must be zero.</para>
    </param>
    <param name="lpWndClass">A pointer to a <see cref="WNDCLASS" /> structure that receives the information about the class.</param>
    <returns>
      <para>If the function finds a matching class and successfully copies the data, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassInfoW">
    <summary>
      <para>Retrieves information about a window class.</para>
      <div>
        <b>Note</b>  The <b>GetClassInfo</b> function has been superseded by the <see cref="GetClassInfoEx" /> function. You can still use <b>GetClassInfo</b>, however, if you do not need information about the class small icon.</div>
    </summary>
    <param name="hInstance">A handle to the instance of the application that created the class. To retrieve information about classes defined by the system (such as buttons or list boxes), set this parameter to <b>NULL</b>.</param>
    <param name="lpClassName">
      <para>The class name. The name must be that of a preregistered class or a class registered by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function.</para>
      <para>Alternatively, this parameter can be an atom. If so, it must be a class atom created by a previous call to <see cref="RegisterClass" /> or <see cref="RegisterClassEx" />. The atom must be in the low-order word of<i>lpClassName</i>; the high-order word must be zero.</para>
    </param>
    <param name="lpWndClass">A pointer to a <see cref="WNDCLASS" /> structure that receives the information about the class.</param>
    <returns>
      <para>If the function finds a matching class and successfully copies the data, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassLong">
    <summary>
      <para>Retrieves the specified 32-bit (<b>DWORD</b>) value from the <see cref="WNDCLASSEX" /> structure associated with the specified window.</para>
      <div>
        <b>Note</b>  If you are retrieving a pointer or a handle, this function has been superseded by the <see cref="GetClassLongPtr" /> function. (Pointers and handles are 32 bits on 32-bit Windows and 64 bits on 64-bit Windows.)</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be retrieved. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus four; for example, if you specified 12 or more bytes of extra class memory, a value of 8 would be an index to the third integer. To retrieve any other value from the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCW_ATOM</b>
                </term>
              </listheader>
              <listheader>
                <term>-32</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves an 						<b>ATOM</b> value that uniquely identifies the window class. This is the same atom that the <see cref="RegisterClassEx" /> function returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra memory associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra window memory associated with each window in the class. For information on how to access this memory, see <see cref="GetWindowLong" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassLongA">
    <summary>
      <para>Retrieves the specified 32-bit (<b>DWORD</b>) value from the <see cref="WNDCLASSEX" /> structure associated with the specified window.</para>
      <div>
        <b>Note</b>  If you are retrieving a pointer or a handle, this function has been superseded by the <see cref="GetClassLongPtr" /> function. (Pointers and handles are 32 bits on 32-bit Windows and 64 bits on 64-bit Windows.)</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be retrieved. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus four; for example, if you specified 12 or more bytes of extra class memory, a value of 8 would be an index to the third integer. To retrieve any other value from the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCW_ATOM</b>
                </term>
              </listheader>
              <listheader>
                <term>-32</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves an 						<b>ATOM</b> value that uniquely identifies the window class. This is the same atom that the <see cref="RegisterClassEx" /> function returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra memory associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra window memory associated with each window in the class. For information on how to access this memory, see <see cref="GetWindowLong" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassLongW">
    <summary>
      <para>Retrieves the specified 32-bit (<b>DWORD</b>) value from the <see cref="WNDCLASSEX" /> structure associated with the specified window.</para>
      <div>
        <b>Note</b>  If you are retrieving a pointer or a handle, this function has been superseded by the <see cref="GetClassLongPtr" /> function. (Pointers and handles are 32 bits on 32-bit Windows and 64 bits on 64-bit Windows.)</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be retrieved. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus four; for example, if you specified 12 or more bytes of extra class memory, a value of 8 would be an index to the third integer. To retrieve any other value from the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCW_ATOM</b>
                </term>
              </listheader>
              <listheader>
                <term>-32</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves an 						<b>ATOM</b> value that uniquely identifies the window class. This is the same atom that the <see cref="RegisterClassEx" /> function returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra memory associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra window memory associated with each window in the class. For information on how to access this memory, see <see cref="GetWindowLong" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassLongPtr">
    <summary>
      <para>Retrieves the specified value from the <see cref="WNDCLASSEX" /> structure associated with the specified window.</para>
      <div>
        <b>Note</b>  To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>GetClassLongPtr</b>. When compiling for 32-bit Windows, <b>GetClassLongPtr</b> is defined as a call to the <see cref="GetClassLong" /> function.</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be retrieved. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To retrieve any other value from the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCW_ATOM</b>
                </term>
              </listheader>
              <listheader>
                <term>-32</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves an 						<b>ATOM</b> value that uniquely identifies the window class. This is the same atom that the <see cref="RegisterClassEx" /> function returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra memory associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra window memory associated with each window in the class. For information on how to access this memory, see <see cref="GetWindowLongPtr" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the pointer to the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassLongPtrA">
    <summary>
      <para>Retrieves the specified value from the <see cref="WNDCLASSEX" /> structure associated with the specified window.</para>
      <div>
        <b>Note</b>  To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>GetClassLongPtr</b>. When compiling for 32-bit Windows, <b>GetClassLongPtr</b> is defined as a call to the <see cref="GetClassLong" /> function.</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be retrieved. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To retrieve any other value from the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCW_ATOM</b>
                </term>
              </listheader>
              <listheader>
                <term>-32</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves an 						<b>ATOM</b> value that uniquely identifies the window class. This is the same atom that the <see cref="RegisterClassEx" /> function returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra memory associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra window memory associated with each window in the class. For information on how to access this memory, see <see cref="GetWindowLongPtr" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the pointer to the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassLongPtrW">
    <summary>
      <para>Retrieves the specified value from the <see cref="WNDCLASSEX" /> structure associated with the specified window.</para>
      <div>
        <b>Note</b>  To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>GetClassLongPtr</b>. When compiling for 32-bit Windows, <b>GetClassLongPtr</b> is defined as a call to the <see cref="GetClassLong" /> function.</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be retrieved. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To retrieve any other value from the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCW_ATOM</b>
                </term>
              </listheader>
              <listheader>
                <term>-32</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves an 						<b>ATOM</b> value that uniquely identifies the window class. This is the same atom that the <see cref="RegisterClassEx" /> function returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra memory associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra window memory associated with each window in the class. For information on how to access this memory, see <see cref="GetWindowLongPtr" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the pointer to the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassLongPtr">
    <summary>
      <para>Retrieves the specified value from the <see cref="WNDCLASSEX" /> structure associated with the specified window.</para>
      <div>
        <b>Note</b>  To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>GetClassLongPtr</b>. When compiling for 32-bit Windows, <b>GetClassLongPtr</b> is defined as a call to the <see cref="GetClassLong" /> function.</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be retrieved. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To retrieve any other value from the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCW_ATOM</b>
                </term>
              </listheader>
              <listheader>
                <term>-32</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves an 						<b>ATOM</b> value that uniquely identifies the window class. This is the same atom that the <see cref="RegisterClassEx" /> function returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra memory associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra window memory associated with each window in the class. For information on how to access this memory, see <see cref="GetWindowLongPtr" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the pointer to the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassLongPtrA">
    <summary>
      <para>Retrieves the specified value from the <see cref="WNDCLASSEX" /> structure associated with the specified window.</para>
      <div>
        <b>Note</b>  To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>GetClassLongPtr</b>. When compiling for 32-bit Windows, <b>GetClassLongPtr</b> is defined as a call to the <see cref="GetClassLong" /> function.</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be retrieved. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To retrieve any other value from the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCW_ATOM</b>
                </term>
              </listheader>
              <listheader>
                <term>-32</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves an 						<b>ATOM</b> value that uniquely identifies the window class. This is the same atom that the <see cref="RegisterClassEx" /> function returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra memory associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra window memory associated with each window in the class. For information on how to access this memory, see <see cref="GetWindowLongPtr" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the pointer to the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassLongPtrW">
    <summary>
      <para>Retrieves the specified value from the <see cref="WNDCLASSEX" /> structure associated with the specified window.</para>
      <div>
        <b>Note</b>  To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>GetClassLongPtr</b>. When compiling for 32-bit Windows, <b>GetClassLongPtr</b> is defined as a call to the <see cref="GetClassLong" /> function.</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be retrieved. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To retrieve any other value from the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCW_ATOM</b>
                </term>
              </listheader>
              <listheader>
                <term>-32</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves an 						<b>ATOM</b> value that uniquely identifies the window class. This is the same atom that the <see cref="RegisterClassEx" /> function returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra memory associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra window memory associated with each window in the class. For information on how to access this memory, see <see cref="GetWindowLongPtr" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the pointer to the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassLong">
    <summary>
      <para>Retrieves the specified 32-bit (<b>DWORD</b>) value from the <see cref="WNDCLASSEX" /> structure associated with the specified window.</para>
      <div>
        <b>Note</b>  If you are retrieving a pointer or a handle, this function has been superseded by the <see cref="GetClassLongPtr" /> function. (Pointers and handles are 32 bits on 32-bit Windows and 64 bits on 64-bit Windows.)</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be retrieved. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus four; for example, if you specified 12 or more bytes of extra class memory, a value of 8 would be an index to the third integer. To retrieve any other value from the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCW_ATOM</b>
                </term>
              </listheader>
              <listheader>
                <term>-32</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves an 						<b>ATOM</b> value that uniquely identifies the window class. This is the same atom that the <see cref="RegisterClassEx" /> function returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra memory associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra window memory associated with each window in the class. For information on how to access this memory, see <see cref="GetWindowLong" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassLongA">
    <summary>
      <para>Retrieves the specified 32-bit (<b>DWORD</b>) value from the <see cref="WNDCLASSEX" /> structure associated with the specified window.</para>
      <div>
        <b>Note</b>  If you are retrieving a pointer or a handle, this function has been superseded by the <see cref="GetClassLongPtr" /> function. (Pointers and handles are 32 bits on 32-bit Windows and 64 bits on 64-bit Windows.)</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be retrieved. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus four; for example, if you specified 12 or more bytes of extra class memory, a value of 8 would be an index to the third integer. To retrieve any other value from the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCW_ATOM</b>
                </term>
              </listheader>
              <listheader>
                <term>-32</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves an 						<b>ATOM</b> value that uniquely identifies the window class. This is the same atom that the <see cref="RegisterClassEx" /> function returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra memory associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra window memory associated with each window in the class. For information on how to access this memory, see <see cref="GetWindowLong" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassLongW">
    <summary>
      <para>Retrieves the specified 32-bit (<b>DWORD</b>) value from the <see cref="WNDCLASSEX" /> structure associated with the specified window.</para>
      <div>
        <b>Note</b>  If you are retrieving a pointer or a handle, this function has been superseded by the <see cref="GetClassLongPtr" /> function. (Pointers and handles are 32 bits on 32-bit Windows and 64 bits on 64-bit Windows.)</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be retrieved. To retrieve a value from the extra class memory, specify the positive, zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of extra class memory, minus four; for example, if you specified 12 or more bytes of extra class memory, a value of 8 would be an index to the third integer. To retrieve any other value from the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCW_ATOM</b>
                </term>
              </listheader>
              <listheader>
                <term>-32</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves an 						<b>ATOM</b> value that uniquely identifies the window class. This is the same atom that the <see cref="RegisterClassEx" /> function returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra memory associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the size, in bytes, of the extra window memory associated with each window in the class. For information on how to access this memory, see <see cref="GetWindowLong" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassName">
    <summary>Retrieves the name of the class to which the specified window belongs.</summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="lpClassName">The class name string.</param>
    <param name="nMaxCount">The length of the <i>lpClassName</i> buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the class name string is truncated to <code>nMaxCount-1</code> characters.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters copied to the buffer, not including the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError function" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassNameA">
    <summary>Retrieves the name of the class to which the specified window belongs.</summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="lpClassName">The class name string.</param>
    <param name="nMaxCount">The length of the <i>lpClassName</i> buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the class name string is truncated to <code>nMaxCount-1</code> characters.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters copied to the buffer, not including the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError function" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassNameW">
    <summary>Retrieves the name of the class to which the specified window belongs.</summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="lpClassName">The class name string.</param>
    <param name="nMaxCount">The length of the <i>lpClassName</i> buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the class name string is truncated to <code>nMaxCount-1</code> characters.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters copied to the buffer, not including the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError function" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassName">
    <summary>Retrieves the name of the class to which the specified window belongs.</summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="lpClassName">The class name string.</param>
    <param name="nMaxCount">The length of the <i>lpClassName</i> buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the class name string is truncated to <code>nMaxCount-1</code> characters.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters copied to the buffer, not including the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassNameA">
    <summary>Retrieves the name of the class to which the specified window belongs.</summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="lpClassName">The class name string.</param>
    <param name="nMaxCount">The length of the <i>lpClassName</i> buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the class name string is truncated to <code>nMaxCount-1</code> characters.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters copied to the buffer, not including the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassNameW">
    <summary>Retrieves the name of the class to which the specified window belongs.</summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="lpClassName">The class name string.</param>
    <param name="nMaxCount">The length of the <i>lpClassName</i> buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the class name string is truncated to <code>nMaxCount-1</code> characters.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters copied to the buffer, not including the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassName">
    <summary>Retrieves the name of the class to which the specified window belongs.</summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="lpClassName">The class name string.</param>
    <param name="nMaxCount">The length of the <i>lpClassName</i> buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the class name string is truncated to <code>nMaxCount-1</code> characters.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters copied to the buffer, not including the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassNameA">
    <summary>Retrieves the name of the class to which the specified window belongs.</summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="lpClassName">The class name string.</param>
    <param name="nMaxCount">The length of the <i>lpClassName</i> buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the class name string is truncated to <code>nMaxCount-1</code> characters.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters copied to the buffer, not including the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassNameW">
    <summary>Retrieves the name of the class to which the specified window belongs.</summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="lpClassName">The class name string.</param>
    <param name="nMaxCount">The length of the <i>lpClassName</i> buffer, in characters. The buffer must be large enough to include the terminating null character; otherwise, the class name string is truncated to <code>nMaxCount-1</code> characters.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters copied to the buffer, not including the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClassWord">
    <summary>
      <para>Retrieves the 16-bit (<b>WORD</b>) value at the specified offset into the extra class memory for the window class to which the specified window belongs.</para>
      <div>
        <b>Note</b>  This function is deprecated for any use other than <i>nIndex</i> set to <b>GCW_ATOM</b>. The function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="GetClassLong" /> or <see cref="GetClassLongPtr" /> function.</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The zero-based byte offset of the value to be retrieved. Valid values are in the range zero through the number of bytes of class memory, minus two; for example, if you specified 10 or more bytes of extra class memory, a value of eight would be an index to the fifth 16-bit integer. There is an additional valid value as shown in the following table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCW_ATOM</b>
                </term>
              </listheader>
              <listheader>
                <term>-32</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves an <b>ATOM</b> value that uniquely identifies the window class. This is the same atom that the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function returns.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the requested 16-bit value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClientRect">
    <summary>Retrieves the coordinates of a window's client area. The client coordinates specify the upper-left and lower-right corners of the client area. Because client coordinates are relative to the upper-left corner of a window's client area, the coordinates of the upper-left corner are (0,0).</summary>
    <param name="hWnd">A handle to the window whose client coordinates are to be retrieved.</param>
    <param name="lpRect">A pointer to a <see cref="RECT" /> structure that receives the client coordinates. The <b>left</b> and <b>top</b> members are zero. The <b>right</b> and <b>bottom</b> members contain the width and height of the window.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClipboardData">
    <summary>Retrieves data from the clipboard in a specified format. The clipboard must have been opened previously.</summary>
    <param name="uFormat">A clipboard format. For a description of the standard clipboard formats, see <a href="https://docs.microsoft.com//windows/desktop/dataxchg/clipboard-formats">Standard Clipboard Formats</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to a clipboard object in the specified format.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClipboardFormatName">
    <summary>Retrieves from the clipboard the name of the specified registered format. The function copies the name to the specified buffer.</summary>
    <param name="format">The type of format to be retrieved. This parameter must not specify any of the predefined clipboard formats.</param>
    <param name="lpszFormatName">The buffer that is to receive the format name.</param>
    <param name="cchMaxCount">The maximum length, in characters, of the string to be copied to the buffer. If the name exceeds this limit, it is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value is the length, in characters, of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero, indicating that the requested format does not exist or is predefined. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClipboardFormatNameA">
    <summary>Retrieves from the clipboard the name of the specified registered format. The function copies the name to the specified buffer.</summary>
    <param name="format">The type of format to be retrieved. This parameter must not specify any of the predefined clipboard formats.</param>
    <param name="lpszFormatName">The buffer that is to receive the format name.</param>
    <param name="cchMaxCount">The maximum length, in characters, of the string to be copied to the buffer. If the name exceeds this limit, it is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value is the length, in characters, of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero, indicating that the requested format does not exist or is predefined. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClipboardFormatNameW">
    <summary>Retrieves from the clipboard the name of the specified registered format. The function copies the name to the specified buffer.</summary>
    <param name="format">The type of format to be retrieved. This parameter must not specify any of the predefined clipboard formats.</param>
    <param name="lpszFormatName">The buffer that is to receive the format name.</param>
    <param name="cchMaxCount">The maximum length, in characters, of the string to be copied to the buffer. If the name exceeds this limit, it is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value is the length, in characters, of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero, indicating that the requested format does not exist or is predefined. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClipboardFormatName">
    <summary>Retrieves from the clipboard the name of the specified registered format. The function copies the name to the specified buffer.</summary>
    <param name="format">The type of format to be retrieved. This parameter must not specify any of the predefined clipboard formats.</param>
    <param name="lpszFormatName">The buffer that is to receive the format name.</param>
    <param name="cchMaxCount">The maximum length, in characters, of the string to be copied to the buffer. If the name exceeds this limit, it is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value is the length, in characters, of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero, indicating that the requested format does not exist or is predefined. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClipboardFormatNameA">
    <summary>Retrieves from the clipboard the name of the specified registered format. The function copies the name to the specified buffer.</summary>
    <param name="format">The type of format to be retrieved. This parameter must not specify any of the predefined clipboard formats.</param>
    <param name="lpszFormatName">The buffer that is to receive the format name.</param>
    <param name="cchMaxCount">The maximum length, in characters, of the string to be copied to the buffer. If the name exceeds this limit, it is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value is the length, in characters, of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero, indicating that the requested format does not exist or is predefined. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClipboardFormatNameW">
    <summary>Retrieves from the clipboard the name of the specified registered format. The function copies the name to the specified buffer.</summary>
    <param name="format">The type of format to be retrieved. This parameter must not specify any of the predefined clipboard formats.</param>
    <param name="lpszFormatName">The buffer that is to receive the format name.</param>
    <param name="cchMaxCount">The maximum length, in characters, of the string to be copied to the buffer. If the name exceeds this limit, it is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value is the length, in characters, of the string copied to the buffer.</para>
      <para>If the function fails, the return value is zero, indicating that the requested format does not exist or is predefined. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClipboardOwner">
    <summary>Retrieves the window handle of the current owner of the clipboard.</summary>
    <returns>
      <para>If the function succeeds, the return value is the handle to the window that owns the clipboard.</para>
      <para>If the clipboard is not owned, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClipboardSequenceNumber">
    <summary>Retrieves the clipboard sequence number for the current window station.</summary>
    <returns>The return value is the clipboard sequence number. If you do not have <b>WINSTA_ACCESSCLIPBOARD</b> access to the window station, the function returns zero.</returns>
  </member>
  <member name="Windows.GetClipboardViewer">
    <summary>Retrieves the handle to the first window in the clipboard viewer chain.</summary>
    <returns>
      <para>If the function succeeds, the return value is the handle to the first window in the clipboard viewer chain.</para>
      <para>If there is no clipboard viewer, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetClipCursor">
    <summary>Retrieves the screen coordinates of the rectangular area to which the cursor is confined.</summary>
    <param name="lpRect">A pointer to a <see cref="RECT" /> structure that receives the screen coordinates of the confining rectangle. The structure receives the dimensions of the screen if the cursor is not confined to a rectangle.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetComboBoxInfo">
    <summary>Retrieves information about the specified combo box.</summary>
    <param name="hwndCombo">A handle to the combo box.</param>
    <param name="pcbi">A pointer to a <see cref="COMBOBOXINFO" /> structure that receives the information. You must set <b>COMBOBOXINFO.cbSize</b> before calling this function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetCurrentInputMessageSource">
    <summary>Retrieves the source of the input message.</summary>
    <param name="inputMessageSource">
      <para>The <see cref="INPUT_MESSAGE_SOURCE" /> structure that holds the device type and the ID of the input message source.</para>
      <div>
        <b>Note</b>  <b>deviceType</b> in <see cref="INPUT_MESSAGE_SOURCE" /> is set to <see cref="IMDT_UNAVAILABLE" /> when <see cref="SendMessage" /> is used to inject input (system generated or through messages such as <a href="https://docs.microsoft.com//windows/desktop/gdi/wm-paint">WM_PAINT</a>). This remains true until <b>SendMessage</b> returns.</div>
    </param>
    <returns>If this function succeeds, it returns TRUE. Otherwise, it returns FALSE. To retrieve extended error information, call the <see cref="GetLastError" /> function.</returns>
  </member>
  <member name="Windows.GetCursor">
    <summary>
      <para>Retrieves a handle to the current cursor.</para>
      <para>To get information on the global cursor, even if it is not owned by the current thread, use <see cref="GetCursorInfo" />.</para>
    </summary>
    <returns>The return value is the handle to the current cursor. If there is no cursor, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.GetCursorInfo">
    <summary>Retrieves information about the global cursor.</summary>
    <param name="pci">A pointer to a <see cref="CURSORINFO" /> structure that receives the information. Note that you must set the <b>cbSize</b> member to <code>sizeof(CURSORINFO)</code> before calling this function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetCursorPos">
    <summary>Retrieves the position of the mouse cursor, in screen coordinates.</summary>
    <param name="lpPoint">A pointer to a <see cref="POINT" /> structure that receives the screen coordinates of the cursor.</param>
    <returns>Returns nonzero if successful or zero otherwise. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.GetDC">
    <summary>
      <para>The <b>GetDC</b> function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. You can use the returned handle in subsequent GDI functions to draw in the DC. The device context is an opaque data structure, whose values are used internally by GDI.</para>
      <para>The <see cref="GetDCEx" /> function is an extension to <b>GetDC</b>, which gives an application more control over how and whether clipping occurs in the client area.</para>
    </summary>
    <param name="hWnd">A handle to the window whose DC is to be retrieved. If this value is <b>NULL</b>, <b>GetDC</b> retrieves the DC for the entire screen.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the DC for the specified window's client area.</para>
      <para>If the function fails, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.GetDCEx">
    <summary>
      <para>The <b>GetDCEx</b> function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen. You can use the returned handle in subsequent GDI functions to draw in the DC. The device context is an opaque data structure, whose values are used internally by GDI.</para>
      <para>This function is an extension to the <see cref="GetDC" /> function, which gives an application more control over how and whether clipping occurs in the client area.</para>
    </summary>
    <param name="hWnd">A handle to the window whose DC is to be retrieved. If this value is <b>NULL</b>, <b>GetDCEx</b> retrieves the DC for the entire screen.</param>
    <param name="hrgnClip">A clipping region that may be combined with the visible region of the DC. If the value of <i>flags</i> is DCX_INTERSECTRGN or DCX_EXCLUDERGN, then the operating system assumes ownership of the region and will automatically delete it when it is no longer needed. In this case, the application should not use or delete the region after a successful call to <b>GetDCEx</b>.</param>
    <param name="flags">
      <para>Specifies how the DC is created. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DCX_WINDOW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns a DC that corresponds to the window rectangle rather than the client rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DCX_CACHE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns a DC from the cache, rather than the OWNDC or CLASSDC window. Essentially overrides CS_OWNDC and CS_CLASSDC.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DCX_PARENTCLIP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Uses the visible region of the parent window. The parent's WS_CLIPCHILDREN and CS_PARENTDC style bits are ignored. The origin is set to the upper-left corner of the window identified by <i>hWnd</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DCX_CLIPSIBLINGS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Excludes the visible regions of all sibling windows above the window identified by <i>hWnd</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DCX_CLIPCHILDREN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Excludes the visible regions of all child windows below the window identified by <i>hWnd</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DCX_NORESETATTRS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag is ignored.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DCX_LOCKWINDOWUPDATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Allows drawing even if there is a <see cref="LockWindowUpdate" /> call in effect that would otherwise exclude this window. Used for drawing during tracking.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DCX_EXCLUDERGN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The clipping region identified by <i>hrgnClip</i> is excluded from the visible region of the returned DC.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DCX_INTERSECTRGN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The clipping region identified by <i>hrgnClip</i> is intersected with the visible region of the returned DC.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DCX_INTERSECTUPDATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Reserved; do not use.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DCX_VALIDATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Reserved; do not use.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the DC for the specified window.</para>
      <para>If the function fails, the return value is <b>NULL</b>. An invalid value for the <i>hWnd</i> parameter will cause the function to fail.</para>
    </returns>
  </member>
  <member name="Windows.GetDesktopWindow">
    <summary>Retrieves a handle to the desktop window. The desktop window covers the entire screen. The desktop window is the area on top of which other windows are painted.</summary>
    <returns>The return value is a handle to the desktop window.</returns>
  </member>
  <member name="Windows.GetDialogBaseUnits">
    <summary>
      <para>Retrieves the system's dialog base units, which are the average width and height of characters in the system font. For dialog boxes that use the system font, you can use these values to convert between dialog template units, as specified in dialog box templates, and pixels. For dialog boxes that do not use the system font, the conversion from dialog template units to pixels depends on the font used by the dialog box.</para>
      <para>For either type of dialog box, it is easier to use the <see cref="MapDialogRect" /> function to perform the conversion. <b>MapDialogRect</b> takes the font into account and correctly converts a rectangle from dialog template units into pixels.</para>
    </summary>
    <returns>The function returns the dialog base units. The low-order word of the return value contains the horizontal dialog box base unit, and the high-order word contains the vertical dialog box base unit.</returns>
  </member>
  <member name="Windows.GetDialogControlDpiChangeBehavior">
    <summary>Retrieves and per-monitor DPI scaling behavior overrides of a child window in a dialog.</summary>
    <param name="hWnd">The handle for the window to examine.</param>
    <returns>The flags set on the given window. If passed an invalid handle, this function will return zero, and set its <see cref="last error" /> to <b>ERROR_INVALID_HANDLE</b>.</returns>
  </member>
  <member name="Windows.GetDialogDpiChangeBehavior">
    <summary>
      <para>Returns the flags that might have been set on a given dialog by an earlier call to <see cref="SetDialogDpiChangeBehavior" />.</para>
      <para>If that function was never called on the dialog, the return value will be zero.</para>
    </summary>
    <param name="hDlg">The handle for the dialog to examine.</param>
    <returns>The flags set on the given dialog. If passed an invalid handle, this function will return zero, and set its <see cref="last error" /> to <b>ERROR_INVALID_HANDLE</b>.</returns>
  </member>
  <member name="Windows.GetDisplayAutoRotationPreferences">
    <summary>Retrieves the screen auto-rotation preferences for the current process.</summary>
    <param name="pOrientation">Pointer to a location in memory that will receive the current orientation preference setting for the calling process.</param>
    <returns>TRUE if the method succeeds, otherwise FALSE.</returns>
  </member>
  <member name="Windows.GetDisplayAutoRotationPreferencesByProcessId">
    <summary>Retrieves the screen auto-rotation preferences for the process indicated by the <i>dwProcessId</i> parameter.</summary>
    <param name="dwProcessId">The process to get preference settings for.</param>
    <param name="pOrientation">Pointer to a location in memory that will receive the current orientation preference setting for the indicated process.</param>
    <param name="fRotateScreen">Pointer to a location in memory that will receive a TRUE or FALSE value indicating whether the screen was rotated to comply with the process orientation preferences.</param>
    <returns>
      <para>TRUE if the method succeeds, otherwise FALSE.</para>
      <para>Applications should use <see cref="GetDisplayAutoRotationPreferences" /> to retrieve their auto-rotation preferences instead of using this API. For an example, see <see cref="GetDisplayAutoRotationPreferences" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDisplayConfigBufferSizes">
    <summary>The <b>GetDisplayConfigBufferSizes</b> function retrieves the size of the buffers that are required to call the <see cref="QueryDisplayConfig" /> function.</summary>
    <param name="flags">
      <para>The type of information to retrieve. The value for the <i>Flags</i> parameter must be one of the following values.</para>
      <h4>QDC_ALL_PATHS</h4>
      <para>The caller requests the table sizes to hold all the possible path combinations.</para>
      <h4>QDC_ONLY_ACTIVE_PATHS</h4>
      <para>The caller requests the table sizes to hold only active paths.</para>
      <h4>QDC_DATABASE_CURRENT</h4>
      <para>The caller requests the table sizes to hold the active paths as defined in the persistence database for the currently connected monitors.</para>
    </param>
    <param name="numPathArrayElements">Pointer to a variable that receives the number of elements in the path information table. The <i>pNumPathArrayElements</i> parameter value is then used by a subsequent call to the <see cref="QueryDisplayConfig" /> function. This parameter cannot be <b>NULL</b>.</param>
    <param name="numModeInfoArrayElements">Pointer to a variable that receives the number of elements in the mode information table. The <i>pNumModeInfoArrayElements</i> parameter value is then used by a subsequent call to the <see cref="QueryDisplayConfig" /> function. This parameter cannot be <b>NULL</b>.</param>
    <returns>
      <para>The function returns one of the following return codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SUCCESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The combination of parameters and flags that are specified is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system is not running a graphics driver that was written according to the <a href="https://docs.microsoft.com//windows-hardware/drivers/display/windows-vista-display-driver-model-design-guide">Windows Display Driver Model (WDDM)</a>. The function is only supported on a system with a WDDM driver running.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have access to the console session. This error occurs if the calling process does not have access to the current desktop or is running on a remote session.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_GEN_FAILURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An unspecified error occurred.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetDlgCtrlID">
    <summary>Retrieves the identifier of the specified control.</summary>
    <param name="hWnd">A handle to the control.</param>
    <returns>
      <para>If the function succeeds, the return value is the identifier of the control.</para>
      <para>If the function fails, the return value is zero. An invalid value for the <i>hwndCtl</i> parameter, for example, will cause the function to fail. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDlgItem">
    <summary>Retrieves a handle to a control in the specified dialog box.</summary>
    <param name="hDlg">A handle to the dialog box that contains the control.</param>
    <param name="nIDDlgItem">The identifier of the control to be retrieved.</param>
    <returns>
      <para>If the function succeeds, the return value is the window handle of the specified control.</para>
      <para>If the function fails, the return value is <b>NULL</b>, indicating an invalid dialog box handle or a nonexistent control. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDlgItemInt">
    <summary>Translates the text of a specified control in a dialog box into an integer value.</summary>
    <param name="hDlg">A handle to the dialog box that contains the control of interest.</param>
    <param name="nIDDlgItem">The identifier of the control whose text is to be translated.</param>
    <param name="lpTranslated">
      <para>Indicates success or failure (<b>TRUE</b> indicates success, <b>FALSE</b> indicates failure).</para>
      <para>If this parameter is <b>NULL</b>, the function returns no information about success or failure.</para>
    </param>
    <param name="bSigned">Indicates whether the function should examine the text for a minus sign at the beginning and return a signed integer value if it finds one (<b>TRUE</b> specifies this should be done, <b>FALSE</b> that it should not).</param>
    <returns>
      <para>If the function succeeds, the variable pointed to by <i>lpTranslated</i> is set to <b>TRUE</b>, and the return value is the translated value of the control text.</para>
      <para>If the function fails, the variable pointed to by <i>lpTranslated</i> is set to <b>FALSE</b>, and the return value is zero. Note that, because zero is a possible translated value, a return value of zero does not by itself indicate failure.</para>
      <para>If <i>lpTranslated</i> is <b>NULL</b>, the function returns no information about success or failure.</para>
      <para>Note that, if the <i>bSigned</i> parameter is <b>TRUE</b> and there is a minus sign (–) at the beginning of the text, <b>GetDlgItemInt</b> translates the text into a signed integer value. Otherwise, the function creates an unsigned integer value. To obtain the proper value in this case, cast the return value to an <b>int</b> type.</para>
      <para>To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDlgItemText">
    <summary>Retrieves the title or text associated with a control in a dialog box.</summary>
    <param name="hDlg">A handle to the dialog box that contains the control.</param>
    <param name="nIDDlgItem">The identifier of the control whose title or text is to be retrieved.</param>
    <param name="lpString">The buffer to receive the title or text.</param>
    <param name="cchMax">The maximum length, in characters, of the string to be copied to the buffer pointed to by <i>lpString</i>. If the length of the string, including the null character, exceeds the limit, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of characters copied to the buffer, not including the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDlgItemTextA">
    <summary>Retrieves the title or text associated with a control in a dialog box.</summary>
    <param name="hDlg">A handle to the dialog box that contains the control.</param>
    <param name="nIDDlgItem">The identifier of the control whose title or text is to be retrieved.</param>
    <param name="lpString">The buffer to receive the title or text.</param>
    <param name="cchMax">The maximum length, in characters, of the string to be copied to the buffer pointed to by <i>lpString</i>. If the length of the string, including the null character, exceeds the limit, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of characters copied to the buffer, not including the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDlgItemTextW">
    <summary>Retrieves the title or text associated with a control in a dialog box.</summary>
    <param name="hDlg">A handle to the dialog box that contains the control.</param>
    <param name="nIDDlgItem">The identifier of the control whose title or text is to be retrieved.</param>
    <param name="lpString">The buffer to receive the title or text.</param>
    <param name="cchMax">The maximum length, in characters, of the string to be copied to the buffer pointed to by <i>lpString</i>. If the length of the string, including the null character, exceeds the limit, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of characters copied to the buffer, not including the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDlgItemText">
    <summary>Retrieves the title or text associated with a control in a dialog box.</summary>
    <param name="hDlg">A handle to the dialog box that contains the control.</param>
    <param name="nIDDlgItem">The identifier of the control whose title or text is to be retrieved.</param>
    <param name="lpString">The buffer to receive the title or text.</param>
    <param name="cchMax">The maximum length, in characters, of the string to be copied to the buffer pointed to by <i>lpString</i>. If the length of the string, including the null character, exceeds the limit, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of characters copied to the buffer, not including the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDlgItemTextA">
    <summary>Retrieves the title or text associated with a control in a dialog box.</summary>
    <param name="hDlg">A handle to the dialog box that contains the control.</param>
    <param name="nIDDlgItem">The identifier of the control whose title or text is to be retrieved.</param>
    <param name="lpString">The buffer to receive the title or text.</param>
    <param name="cchMax">The maximum length, in characters, of the string to be copied to the buffer pointed to by <i>lpString</i>. If the length of the string, including the null character, exceeds the limit, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of characters copied to the buffer, not including the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDlgItemTextW">
    <summary>Retrieves the title or text associated with a control in a dialog box.</summary>
    <param name="hDlg">A handle to the dialog box that contains the control.</param>
    <param name="nIDDlgItem">The identifier of the control whose title or text is to be retrieved.</param>
    <param name="lpString">The buffer to receive the title or text.</param>
    <param name="cchMax">The maximum length, in characters, of the string to be copied to the buffer pointed to by <i>lpString</i>. If the length of the string, including the null character, exceeds the limit, the string is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of characters copied to the buffer, not including the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetDoubleClickTime">
    <summary>Retrieves the current double-click time for the mouse. A double-click is a series of two clicks of the mouse button, the second occurring within a specified time after the first. The double-click time is the maximum number of milliseconds that may occur between the first and second click of a double-click. The maximum double-click time is 5000 milliseconds.</summary>
    <returns>The return value specifies the current double-click time, in milliseconds. The maximum return value is 5000 milliseconds.</returns>
  </member>
  <member name="Windows.GetDpiAwarenessContextForProcess">
    <summary>Gets a <a href="https://docs.microsoft.com//windows/desktop/hidpi/dpi-awareness-context">DPI_AWARENESS_CONTEXT</a> handle for the specified process.</summary>
    <param name="hProcess">A handle to the process for which the DPI awareness context is retrieved. If NULL is specified, the context is retrieved for the current process.</param>
    <returns>The <b>DPI_AWARENESS_CONTEXT</b> for the specified process.</returns>
  </member>
  <member name="Windows.GetDpiForSystem">
    <summary>Returns the system DPI.</summary>
    <returns>The system DPI value.</returns>
  </member>
  <member name="Windows.GetDpiForWindow">
    <summary>Returns the dots per inch (dpi) value for the specified window.</summary>
    <param name="hwnd">The window that you want to get information about.</param>
    <returns>The DPI for the window, which depends on the <see cref="DPI_AWARENESS" /> of the window. See the <b>Remarks</b> section for more information. An invalid <i>hwnd</i> value will result in a return value of 0.</returns>
  </member>
  <member name="Windows.GetDpiFromDpiAwarenessContext">
    <summary>Retrieves the DPI from a given <a href="https://docs.microsoft.com//windows/desktop/hidpi/dpi-awareness-context">DPI_AWARENESS_CONTEXT</a> handle. This enables you to determine the DPI of a thread without needed to examine a window created within that thread.</summary>
    <param name="value">The <b>DPI_AWARENESS_CONTEXT</b> handle to examine.</param>
    <returns>The DPI value associated with the <b>DPI_AWARENESS_CONTEXT</b> handle.</returns>
  </member>
  <member name="Windows.GetFocus">
    <summary>Retrieves the handle to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.</summary>
    <returns>The return value is the handle to the window with the keyboard focus. If the calling thread's message queue does not have an associated window with the keyboard focus, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.GetForegroundWindow">
    <summary>Retrieves a handle to the foreground window (the window with which the user is currently working). The system assigns a slightly higher priority to the thread that creates the foreground window than it does to other threads.</summary>
    <returns>The return value is a handle to the foreground window. The foreground window can be <b>NULL</b> in certain circumstances, such as when a window is losing activation.</returns>
  </member>
  <member name="Windows.GetGestureConfig">
    <summary>Retrieves the configuration for which Windows Touch gesture messages are sent from a window.</summary>
    <param name="hwnd">A handle to the window to get the gesture configuration from.</param>
    <param name="dwReserved">This value is reserved and must be set to 0.</param>
    <param name="dwFlags">A gesture command flag value indicating options for retrieving the gesture configuration. See Remarks for additional information and supported values.</param>
    <param name="pcIDs">The size, in number of gesture configuration structures, that is in the <i>pGestureConfig</i> buffer.</param>
    <param name="pGestureConfig">An array of gesture configuration structures that specify the gesture configuration.</param>
    <param name="cbSize">The size of the gesture configuration (<see cref="GESTURECONFIG" />) structure.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.GetGestureExtraArgs">
    <summary>Retrieves additional information about a gesture from its <see cref="GESTUREINFO" /> handle.</summary>
    <param name="hGestureInfo">The handle to the gesture information that is passed in the <i>lParam</i> of a <a href="https://docs.microsoft.com//windows/desktop/wintouch/wm-gesture">WM_GESTURE</a> message.</param>
    <param name="cbExtraArgs">A count of the bytes of data stored in the extra arguments.</param>
    <param name="pExtraArgs">A pointer to the extra argument information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.GetGestureInfo">
    <summary>Retrieves a <see cref="GESTUREINFO" /> structure given a handle to the gesture information.</summary>
    <param name="hGestureInfo">The gesture information handle.</param>
    <param name="pGestureInfo">A pointer to the gesture information structure.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.GetGuiResources">
    <summary>Retrieves the count of handles to graphical user interface (GUI) objects in use by the specified process.</summary>
    <param name="hProcess">
      <para>A handle to the process. The handle must refer to a process in the current session, and must have the <b>PROCESS_QUERY_LIMITED_INFORMATION</b> access right (see <a href="https://docs.microsoft.com//windows/win32/procthread/process-security-and-access-rights">Process security and access rights</a>).</para>
      <para>If this parameter is the special value <b>GR_GLOBAL</b>, then the resource usage is reported across all processes in the current session.</para>
      <para>
        <b>Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:</b> The <b>GR_GLOBAL</b> value is not supported until Windows 7 and Windows Server 2008 R2.</para>
      <para>
        <b>Windows Server 2003 and Windows XP:</b> The handle must have the <b>PROCESS_QUERY_INFORMATION</b> access right.</para>
    </param>
    <param name="uiFlags">
      <para>The GUI object type. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GR_GDIOBJECTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>Return the count of GDI objects.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GR_GDIOBJECTS_PEAK</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Return the peak count of GDI objects.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported until Windows 7 and Windows Server 2008 R2.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GR_USEROBJECTS</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Return the count of USER objects.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GR_USEROBJECTS_PEAK</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Return the peak count of USER objects.<para><b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>This value is not supported until Windows 7 and Windows Server 2008 R2.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the count of handles to GUI objects in use by the process. If no GUI objects are in use, the return value is zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetIconInfo">
    <summary>Retrieves information about the specified icon or cursor.</summary>
    <param name="hIcon">
      <para>A handle to the icon or cursor.</para>
      <para>To retrieve information about a standard icon or cursor, specify the <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons">identifier beginning with the IDI_ prefix</a> or the <a href="https://docs.microsoft.com//windows/win32/menurc/about-cursors">identifier beginning with the IDC_ prefix</a> in this parameter.</para>
    </param>
    <param name="piconinfo">A pointer to an <see cref="ICONINFO" /> structure. The function fills in the structure's members.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero and the function fills in the members of the specified <see cref="ICONINFO" /> structure.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetIconInfoEx">
    <summary>Retrieves information about the specified icon or cursor. <b>GetIconInfoEx</b> extends <see cref="GetIconInfo" /> by using the newer <see cref="ICONINFOEX" /> structure.</summary>
    <param name="hicon">
      <para>A handle to the icon or cursor.</para>
      <para>To retrieve information about a standard icon or cursor, specify the <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons">identifier beginning with the IDI_ prefix</a> or the <a href="https://docs.microsoft.com//windows/win32/menurc/about-cursors">identifier beginning with the IDC_ prefix</a> in this parameter.</para>
    </param>
    <param name="piconinfo">When this method returns, contains a pointer to an <see cref="ICONINFOEX" /> structure. The function fills in the structure's members.</param>
    <returns>
      <b>TRUE</b> indicates success, <b>FALSE</b> indicates failure.</returns>
  </member>
  <member name="Windows.GetIconInfoExA">
    <summary>Retrieves information about the specified icon or cursor. <b>GetIconInfoEx</b> extends <see cref="GetIconInfo" /> by using the newer <see cref="ICONINFOEX" /> structure.</summary>
    <param name="hicon">
      <para>A handle to the icon or cursor.</para>
      <para>To retrieve information about a standard icon or cursor, specify the <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons">identifier beginning with the IDI_ prefix</a> or the <a href="https://docs.microsoft.com//windows/win32/menurc/about-cursors">identifier beginning with the IDC_ prefix</a> in this parameter.</para>
    </param>
    <param name="piconinfo">When this method returns, contains a pointer to an <see cref="ICONINFOEX" /> structure. The function fills in the structure's members.</param>
    <returns>
      <b>TRUE</b> indicates success, <b>FALSE</b> indicates failure.</returns>
  </member>
  <member name="Windows.GetIconInfoExW">
    <summary>Retrieves information about the specified icon or cursor. <b>GetIconInfoEx</b> extends <see cref="GetIconInfo" /> by using the newer <see cref="ICONINFOEX" /> structure.</summary>
    <param name="hicon">
      <para>A handle to the icon or cursor.</para>
      <para>To retrieve information about a standard icon or cursor, specify the <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons">identifier beginning with the IDI_ prefix</a> or the <a href="https://docs.microsoft.com//windows/win32/menurc/about-cursors">identifier beginning with the IDC_ prefix</a> in this parameter.</para>
    </param>
    <param name="piconinfo">When this method returns, contains a pointer to an <see cref="ICONINFOEX" /> structure. The function fills in the structure's members.</param>
    <returns>
      <b>TRUE</b> indicates success, <b>FALSE</b> indicates failure.</returns>
  </member>
  <member name="Windows.GetIconInfoEx">
    <summary>Retrieves information about the specified icon or cursor. <b>GetIconInfoEx</b> extends <see cref="GetIconInfo" /> by using the newer <see cref="ICONINFOEX" /> structure.</summary>
    <param name="hicon">
      <para>A handle to the icon or cursor.</para>
      <para>To retrieve information about a standard icon or cursor, specify the <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons">identifier beginning with the IDI_ prefix</a> or the <a href="https://docs.microsoft.com//windows/win32/menurc/about-cursors">identifier beginning with the IDC_ prefix</a> in this parameter.</para>
    </param>
    <param name="piconinfo">When this method returns, contains a pointer to an <see cref="ICONINFOEX" /> structure. The function fills in the structure's members.</param>
    <returns>
      <b>TRUE</b> indicates success, <b>FALSE</b> indicates failure.</returns>
  </member>
  <member name="Windows.GetIconInfoExA">
    <summary>Retrieves information about the specified icon or cursor. <b>GetIconInfoEx</b> extends <see cref="GetIconInfo" /> by using the newer <see cref="ICONINFOEX" /> structure.</summary>
    <param name="hicon">
      <para>A handle to the icon or cursor.</para>
      <para>To retrieve information about a standard icon or cursor, specify the <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons">identifier beginning with the IDI_ prefix</a> or the <a href="https://docs.microsoft.com//windows/win32/menurc/about-cursors">identifier beginning with the IDC_ prefix</a> in this parameter.</para>
    </param>
    <param name="piconinfo">When this method returns, contains a pointer to an <see cref="ICONINFOEX" /> structure. The function fills in the structure's members.</param>
    <returns>
      <b>TRUE</b> indicates success, <b>FALSE</b> indicates failure.</returns>
  </member>
  <member name="Windows.GetIconInfoExW">
    <summary>Retrieves information about the specified icon or cursor. <b>GetIconInfoEx</b> extends <see cref="GetIconInfo" /> by using the newer <see cref="ICONINFOEX" /> structure.</summary>
    <param name="hicon">
      <para>A handle to the icon or cursor.</para>
      <para>To retrieve information about a standard icon or cursor, specify the <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons">identifier beginning with the IDI_ prefix</a> or the <a href="https://docs.microsoft.com//windows/win32/menurc/about-cursors">identifier beginning with the IDC_ prefix</a> in this parameter.</para>
    </param>
    <param name="piconinfo">When this method returns, contains a pointer to an <see cref="ICONINFOEX" /> structure. The function fills in the structure's members.</param>
    <returns>
      <b>TRUE</b> indicates success, <b>FALSE</b> indicates failure.</returns>
  </member>
  <member name="Windows.GetInputState">
    <summary>Determines whether there are mouse-button or keyboard messages in the calling thread's message queue.</summary>
    <returns>
      <para>If the queue contains one or more new mouse-button or keyboard messages, the return value is nonzero.</para>
      <para>If there are no new mouse-button or keyboard messages in the queue, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetKBCodePage">
    <summary>
      <para>Retrieves the current code page.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="GetOEMCP" /> function to retrieve the OEM code-page identifier for the system.</div>
    </summary>
    <returns>The return value is an OEM code-page identifier, or it is the default identifier if the registry value is not readable. For a list of OEM code-page identifiers, see <a href="https://docs.microsoft.com//windows/desktop/Intl/code-page-identifiers">Code Page Identifiers</a>.</returns>
  </member>
  <member name="Windows.GetKeyboardLayout">
    <summary>Retrieves the active input locale identifier (formerly called the keyboard layout).</summary>
    <param name="idThread">The identifier of the thread to query, or 0 for the current thread.</param>
    <returns>The return value is the input locale identifier for the thread. The low word contains a <a href="https://docs.microsoft.com//windows/desktop/Intl/language-identifiers">Language Identifier</a> for the input language and the high word contains a device handle to the physical layout of the keyboard.</returns>
  </member>
  <member name="Windows.GetKeyboardLayoutList">
    <summary>Retrieves the input locale identifiers (formerly called keyboard layout handles) corresponding to the current set of input locales in the system. The function copies the identifiers to the specified buffer.</summary>
    <param name="nBuff">The maximum number of handles that the buffer can hold.</param>
    <param name="lpList">A pointer to the buffer that receives the array of input locale identifiers.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of input locale identifiers copied to the buffer or, if<i>nBuff</i> is zero, the return value is the size, in array elements, of the buffer needed to receive all current input locale identifiers.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetKeyboardLayoutName">
    <summary>Retrieves the name of the active input locale identifier (formerly called the keyboard layout) for the calling thread.</summary>
    <param name="pwszKLID">
      <para>The buffer (of at least <b>KL_NAMELENGTH</b> characters in length) that receives the name of the input locale identifier, including the terminating null character. This will be a copy of the string provided to the <see cref="LoadKeyboardLayout" /> function, unless layout substitution took place.</para>
      <para>For a list of the input layouts that are supplied with Windows, see <a href="https://docs.microsoft.com//windows-hardware/manufacture/desktop/windows-language-pack-default-values">Keyboard Identifiers and Input Method Editors for Windows</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetKeyboardLayoutNameA">
    <summary>Retrieves the name of the active input locale identifier (formerly called the keyboard layout) for the calling thread.</summary>
    <param name="pwszKLID">
      <para>The buffer (of at least <b>KL_NAMELENGTH</b> characters in length) that receives the name of the input locale identifier, including the terminating null character. This will be a copy of the string provided to the <see cref="LoadKeyboardLayout" /> function, unless layout substitution took place.</para>
      <para>For a list of the input layouts that are supplied with Windows, see <a href="https://docs.microsoft.com//windows-hardware/manufacture/desktop/windows-language-pack-default-values">Keyboard Identifiers and Input Method Editors for Windows</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetKeyboardLayoutNameW">
    <summary>Retrieves the name of the active input locale identifier (formerly called the keyboard layout) for the calling thread.</summary>
    <param name="pwszKLID">
      <para>The buffer (of at least <b>KL_NAMELENGTH</b> characters in length) that receives the name of the input locale identifier, including the terminating null character. This will be a copy of the string provided to the <see cref="LoadKeyboardLayout" /> function, unless layout substitution took place.</para>
      <para>For a list of the input layouts that are supplied with Windows, see <a href="https://docs.microsoft.com//windows-hardware/manufacture/desktop/windows-language-pack-default-values">Keyboard Identifiers and Input Method Editors for Windows</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetKeyboardLayoutName">
    <summary>Retrieves the name of the active input locale identifier (formerly called the keyboard layout) for the calling thread.</summary>
    <param name="pwszKLID">
      <para>The buffer (of at least <b>KL_NAMELENGTH</b> characters in length) that receives the name of the input locale identifier, including the terminating null character. This will be a copy of the string provided to the <see cref="LoadKeyboardLayout" /> function, unless layout substitution took place.</para>
      <para>For a list of the input layouts that are supplied with Windows, see <a href="https://docs.microsoft.com//windows-hardware/manufacture/desktop/windows-language-pack-default-values">Keyboard Identifiers and Input Method Editors for Windows</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetKeyboardLayoutNameA">
    <summary>Retrieves the name of the active input locale identifier (formerly called the keyboard layout) for the calling thread.</summary>
    <param name="pwszKLID">
      <para>The buffer (of at least <b>KL_NAMELENGTH</b> characters in length) that receives the name of the input locale identifier, including the terminating null character. This will be a copy of the string provided to the <see cref="LoadKeyboardLayout" /> function, unless layout substitution took place.</para>
      <para>For a list of the input layouts that are supplied with Windows, see <a href="https://docs.microsoft.com//windows-hardware/manufacture/desktop/windows-language-pack-default-values">Keyboard Identifiers and Input Method Editors for Windows</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetKeyboardLayoutNameW">
    <summary>Retrieves the name of the active input locale identifier (formerly called the keyboard layout) for the calling thread.</summary>
    <param name="pwszKLID">
      <para>The buffer (of at least <b>KL_NAMELENGTH</b> characters in length) that receives the name of the input locale identifier, including the terminating null character. This will be a copy of the string provided to the <see cref="LoadKeyboardLayout" /> function, unless layout substitution took place.</para>
      <para>For a list of the input layouts that are supplied with Windows, see <a href="https://docs.microsoft.com//windows-hardware/manufacture/desktop/windows-language-pack-default-values">Keyboard Identifiers and Input Method Editors for Windows</a>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetKeyboardState">
    <summary>Copies the status of the 256 virtual keys to the specified buffer.</summary>
    <param name="lpKeyState">The 256-byte array that receives the status data for each virtual key.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetKeyboardType">
    <summary>Retrieves information about the current keyboard.</summary>
    <param name="nTypeFlag">
      <para>The type of keyboard information to be retrieved. This parameter can be one of the following values.</para>
      <para>| Value | Meaning | |:-----:|---------------------------------------------| | 0 | Keyboard type | | 1 | Keyboard subtype | | 2 | The number of function keys on the keyboard |</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value specifies the requested information.</para>
      <para>If the function fails and <i>nTypeFlag</i> is not 1, the return value is 0; 0 is a valid return value when <i>nTypeFlag</i> is 1 (keyboard subtype). To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetKeyNameText">
    <summary>Retrieves a string that represents the name of a key.</summary>
    <param name="lParam">
      <para>The second parameter of the keyboard message (such as <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a>) to be processed. The function interprets the following bit positions in the <i>lParam</i>.</para>
      <para>| Bits | Meaning | |-------|---------| | 16-23 | The scan code. The value depends on the OEM. | | 24 | Indicates whether the key is an extended key, such as the right-hand ALT and CTRL keys that appear on an enhanced 101- or 102-key keyboard. The value is 1 if it is an extended key; otherwise, it is 0. | | 25 | "Do not care" bit. The application calling this function sets this bit to indicate that the function should not distinguish between left and right CTRL and SHIFT keys, for example. |</para>
      <para>For more detail, see <a href="https://docs.microsoft.com//windows/win32/inputdev/about-keyboard-input#keystroke-message-flags">Keystroke Message Flags</a>.</para>
    </param>
    <param name="lpString">The buffer that will receive the key name.</param>
    <param name="cchSize">The maximum length, in characters, of the key name, including the terminating null character. (This parameter should be equal to the size of the buffer pointed to by the <i>lpString</i> parameter.)</param>
    <returns>
      <para>If the function succeeds, a null-terminated string is copied into the specified buffer, and the return value is the length of the string, in characters, not counting the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetKeyNameTextA">
    <summary>Retrieves a string that represents the name of a key.</summary>
    <param name="lParam">
      <para>The second parameter of the keyboard message (such as <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a>) to be processed. The function interprets the following bit positions in the <i>lParam</i>.</para>
      <para>| Bits | Meaning | |-------|---------| | 16-23 | The scan code. The value depends on the OEM. | | 24 | Indicates whether the key is an extended key, such as the right-hand ALT and CTRL keys that appear on an enhanced 101- or 102-key keyboard. The value is 1 if it is an extended key; otherwise, it is 0. | | 25 | "Do not care" bit. The application calling this function sets this bit to indicate that the function should not distinguish between left and right CTRL and SHIFT keys, for example. |</para>
      <para>For more detail, see <a href="https://docs.microsoft.com//windows/win32/inputdev/about-keyboard-input#keystroke-message-flags">Keystroke Message Flags</a>.</para>
    </param>
    <param name="lpString">The buffer that will receive the key name.</param>
    <param name="cchSize">The maximum length, in characters, of the key name, including the terminating null character. (This parameter should be equal to the size of the buffer pointed to by the <i>lpString</i> parameter.)</param>
    <returns>
      <para>If the function succeeds, a null-terminated string is copied into the specified buffer, and the return value is the length of the string, in characters, not counting the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetKeyNameTextW">
    <summary>Retrieves a string that represents the name of a key.</summary>
    <param name="lParam">
      <para>The second parameter of the keyboard message (such as <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a>) to be processed. The function interprets the following bit positions in the <i>lParam</i>.</para>
      <para>| Bits | Meaning | |-------|---------| | 16-23 | The scan code. The value depends on the OEM. | | 24 | Indicates whether the key is an extended key, such as the right-hand ALT and CTRL keys that appear on an enhanced 101- or 102-key keyboard. The value is 1 if it is an extended key; otherwise, it is 0. | | 25 | "Do not care" bit. The application calling this function sets this bit to indicate that the function should not distinguish between left and right CTRL and SHIFT keys, for example. |</para>
      <para>For more detail, see <a href="https://docs.microsoft.com//windows/win32/inputdev/about-keyboard-input#keystroke-message-flags">Keystroke Message Flags</a>.</para>
    </param>
    <param name="lpString">The buffer that will receive the key name.</param>
    <param name="cchSize">The maximum length, in characters, of the key name, including the terminating null character. (This parameter should be equal to the size of the buffer pointed to by the <i>lpString</i> parameter.)</param>
    <returns>
      <para>If the function succeeds, a null-terminated string is copied into the specified buffer, and the return value is the length of the string, in characters, not counting the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetKeyNameText">
    <summary>Retrieves a string that represents the name of a key.</summary>
    <param name="lParam">
      <para>The second parameter of the keyboard message (such as <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a>) to be processed. The function interprets the following bit positions in the <i>lParam</i>.</para>
      <para>| Bits | Meaning | |-------|---------| | 16-23 | The scan code. The value depends on the OEM. | | 24 | Indicates whether the key is an extended key, such as the right-hand ALT and CTRL keys that appear on an enhanced 101- or 102-key keyboard. The value is 1 if it is an extended key; otherwise, it is 0. | | 25 | "Do not care" bit. The application calling this function sets this bit to indicate that the function should not distinguish between left and right CTRL and SHIFT keys, for example. |</para>
      <para>For more detail, see <a href="https://docs.microsoft.com//windows/win32/inputdev/about-keyboard-input#keystroke-message-flags">Keystroke Message Flags</a>.</para>
    </param>
    <param name="lpString">The buffer that will receive the key name.</param>
    <param name="cchSize">The maximum length, in characters, of the key name, including the terminating null character. (This parameter should be equal to the size of the buffer pointed to by the <i>lpString</i> parameter.)</param>
    <returns>
      <para>If the function succeeds, a null-terminated string is copied into the specified buffer, and the return value is the length of the string, in characters, not counting the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetKeyNameTextA">
    <summary>Retrieves a string that represents the name of a key.</summary>
    <param name="lParam">
      <para>The second parameter of the keyboard message (such as <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a>) to be processed. The function interprets the following bit positions in the <i>lParam</i>.</para>
      <para>| Bits | Meaning | |-------|---------| | 16-23 | The scan code. The value depends on the OEM. | | 24 | Indicates whether the key is an extended key, such as the right-hand ALT and CTRL keys that appear on an enhanced 101- or 102-key keyboard. The value is 1 if it is an extended key; otherwise, it is 0. | | 25 | "Do not care" bit. The application calling this function sets this bit to indicate that the function should not distinguish between left and right CTRL and SHIFT keys, for example. |</para>
      <para>For more detail, see <a href="https://docs.microsoft.com//windows/win32/inputdev/about-keyboard-input#keystroke-message-flags">Keystroke Message Flags</a>.</para>
    </param>
    <param name="lpString">The buffer that will receive the key name.</param>
    <param name="cchSize">The maximum length, in characters, of the key name, including the terminating null character. (This parameter should be equal to the size of the buffer pointed to by the <i>lpString</i> parameter.)</param>
    <returns>
      <para>If the function succeeds, a null-terminated string is copied into the specified buffer, and the return value is the length of the string, in characters, not counting the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetKeyNameTextW">
    <summary>Retrieves a string that represents the name of a key.</summary>
    <param name="lParam">
      <para>The second parameter of the keyboard message (such as <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a>) to be processed. The function interprets the following bit positions in the <i>lParam</i>.</para>
      <para>| Bits | Meaning | |-------|---------| | 16-23 | The scan code. The value depends on the OEM. | | 24 | Indicates whether the key is an extended key, such as the right-hand ALT and CTRL keys that appear on an enhanced 101- or 102-key keyboard. The value is 1 if it is an extended key; otherwise, it is 0. | | 25 | "Do not care" bit. The application calling this function sets this bit to indicate that the function should not distinguish between left and right CTRL and SHIFT keys, for example. |</para>
      <para>For more detail, see <a href="https://docs.microsoft.com//windows/win32/inputdev/about-keyboard-input#keystroke-message-flags">Keystroke Message Flags</a>.</para>
    </param>
    <param name="lpString">The buffer that will receive the key name.</param>
    <param name="cchSize">The maximum length, in characters, of the key name, including the terminating null character. (This parameter should be equal to the size of the buffer pointed to by the <i>lpString</i> parameter.)</param>
    <returns>
      <para>If the function succeeds, a null-terminated string is copied into the specified buffer, and the return value is the length of the string, in characters, not counting the terminating null character.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetKeyState">
    <summary>Retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or toggled (on, off—alternating each time the key is pressed).</summary>
    <param name="nVirtKey">
      <para>A virtual key. If the desired virtual key is a letter or digit (A through Z, a through z, or 0 through 9),<i>nVirtKey</i> must be set to the ASCII value of that character. For other keys, it must be a virtual-key code.</para>
      <para>If a non-English keyboard layout is used, virtual keys with values in the range ASCII A through Z and 0 through 9 are used to specify most of the character keys. For example, for the German keyboard layout, the virtual key of value ASCII O (0x4F) refers to the "o" key, whereas VK_OEM_1 refers to the "o with umlaut" key.</para>
    </param>
    <returns>
      <para>The return value specifies the status of the specified virtual key, as follows:</para>
      <list type="bullet">
        <item>
          <description>If the high-order bit is 1, the key is down; otherwise, it is up.</description>
        </item>
        <item>
          <description>If the low-order bit is 1, the key is toggled. A key, such as the CAPS LOCK key, is toggled if it is turned on. The key is off and untoggled if the low-order bit is 0. A toggle key's indicator light (if any) on the keyboard will be on when the key is toggled, and off when the key is untoggled.</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.GetLastActivePopup">
    <summary>Determines which pop-up window owned by the specified window was most recently active.</summary>
    <param name="hWnd">A handle to the owner window.</param>
    <returns>
      <para>The return value identifies the most recently active pop-up window. The return value is the same as the <i>hWnd</i> parameter, if any of the following conditions are met:</para>
      <list type="bullet">
        <item>
          <description>The window identified by hWnd was most recently active.</description>
        </item>
        <item>
          <description>The window identified by hWnd does not own any pop-up windows.</description>
        </item>
        <item>
          <description>The window identifies by hWnd is not a top-level window, or it is owned by another window.</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.GetLastInputInfo">
    <summary>Retrieves the time of the last input event.</summary>
    <param name="plii">A pointer to a <see cref="LASTINPUTINFO" /> structure that receives the time of the last input event.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetLayeredWindowAttributes">
    <summary>Retrieves the opacity and transparency color key of a layered window.</summary>
    <param name="hwnd">A handle to the layered window. A layered window is created by specifying <b>WS_EX_LAYERED</b> when creating the window with the <see cref="CreateWindowEx" /> function or by setting <b>WS_EX_LAYERED</b> using <see cref="SetWindowLong" /> after the window has been created.</param>
    <param name="pcrKey">A pointer to a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> value that receives the transparency color key to be used when composing the layered window. All pixels painted by the window in this color will be transparent. This can be <b>NULL</b> if the argument is not needed.</param>
    <param name="pbAlpha">The Alpha value used to describe the opacity of the layered window. Similar to the <b>SourceConstantAlpha</b> member of the <see cref="BLENDFUNCTION" /> structure. When the variable referred to by <i>pbAlpha</i> is 0, the window is completely transparent. When the variable referred to by <i>pbAlpha</i> is 255, the window is opaque. This can be <b>NULL</b> if the argument is not needed.</param>
    <param name="pdwFlags">
      <para>A layering flag. This parameter can be <b>NULL</b> if the value is not needed. The layering flag can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LWA_ALPHA</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Use <i>pbAlpha</i> to determine the opacity of the layered window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LWA_COLORKEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Use <i>pcrKey</i> as the transparency color.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetListBoxInfo">
    <summary>Retrieves the number of items per column in a specified list box.</summary>
    <param name="hwnd">A handle to the list box whose number of items per column is to be retrieved.</param>
    <returns>The return value is the number of items per column.</returns>
  </member>
  <member name="Windows.GetMenu">
    <summary>Retrieves a handle to the menu assigned to the specified window.</summary>
    <param name="hWnd">A handle to the window whose menu handle is to be retrieved.</param>
    <returns>The return value is a handle to the menu. If the specified window has no menu, the return value is <b>NULL</b>. If the window is a child window, the return value is undefined.</returns>
  </member>
  <member name="Windows.GetMenuBarInfo">
    <summary>Retrieves information about the specified menu bar.</summary>
    <param name="hwnd">A handle to the window (menu bar) whose information is to be retrieved.</param>
    <param name="idObject">
      <para>The menu object. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OBJID_CLIENT</b>
                </term>
              </listheader>
              <listheader>
                <term>((LONG)0xFFFFFFFC)</term>
              </listheader>
            </list>
          </description>
          <description>The popup menu associated with the window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OBJID_MENU</b>
                </term>
              </listheader>
              <listheader>
                <term>((LONG)0xFFFFFFFD)</term>
              </listheader>
            </list>
          </description>
          <description>The menu bar associated with the window (see the <see cref="GetMenu" /> function).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OBJID_SYSMENU</b>
                </term>
              </listheader>
              <listheader>
                <term>((LONG)0xFFFFFFFF)</term>
              </listheader>
            </list>
          </description>
          <description>The system menu associated with the window (see the <see cref="GetSystemMenu" /> function).</description>
        </listheader>
      </list>
    </param>
    <param name="idItem">The item for which to retrieve information. If this parameter is zero, the function retrieves information about the menu itself. If this parameter is 1, the function retrieves information about the first item on the menu, and so on.</param>
    <param name="pmbi">A pointer to a <see cref="MENUBARINFO" /> structure that receives the information. Note that you must set the <b>cbSize</b> member to <code>sizeof(MENUBARINFO)</code> before calling this function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetMenuCheckMarkDimensions">
    <summary>
      <para>Retrieves the dimensions of the default check-mark bitmap. The system displays this bitmap next to selected menu items. Before calling the <see cref="SetMenuItemBitmaps" /> function to replace the default check-mark bitmap for a menu item, an application must determine the correct bitmap size by calling <b>GetMenuCheckMarkDimensions</b>.</para>
      <div>
        <b>Note</b>  The <b>GetMenuCheckMarkDimensions</b> function is included only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="GetSystemMetrics" /> function with the <b>CXMENUCHECK</b> and <b>CYMENUCHECK</b> values to retrieve the bitmap dimensions.</div>
    </summary>
    <returns>The return value specifies the height and width, in pixels, of the default check-mark bitmap. The high-order word contains the height; the low-order word contains the width.</returns>
  </member>
  <member name="Windows.GetMenuContextHelpId">
    <summary>Retrieves the Help context identifier associated with the specified menu.</summary>
    <param name="unnamedParam1">A handle to the menu for which the Help context identifier is to be retrieved.</param>
    <returns>Returns the Help context identifier if the menu has one, or zero otherwise.</returns>
  </member>
  <member name="Windows.GetMenuDefaultItem">
    <summary>Determines the default menu item on the specified menu.</summary>
    <param name="hMenu">A handle to the menu for which to retrieve the default menu item.</param>
    <param name="fByPos">Indicates whether to retrieve the menu item's identifier or its position. If this parameter is <b>FALSE</b>, the identifier is returned. Otherwise, the position is returned.</param>
    <param name="gmdiFlags">
      <para>Indicates how the function should search for menu items. This parameter can be zero or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GMDI_GOINTOPOPUPS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002L</term>
              </listheader>
            </list>
          </description>
          <description>If the default item is one that opens a submenu, the function is to search recursively in the corresponding submenu. If the submenu has no default item, the return value identifies the item that opens the submenu. By default, the function returns the first default item on the specified menu, regardless of whether it is an item that opens a submenu.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GMDI_USEDISABLED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001L</term>
              </listheader>
            </list>
          </description>
          <description>The function is to return a default item, even if it is disabled. By default, the function skips disabled or grayed items.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the identifier or position of the menu item.</para>
      <para>If the function fails, the return value is -1. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetMenuInfo">
    <summary>Retrieves information about a specified menu.</summary>
    <param name="unnamedParam1">A handle on a menu.</param>
    <param name="unnamedParam2">A pointer to a <see cref="MENUINFO" /> structure containing information for the menu. Note that you must set the <b>cbSize</b> member to <code>sizeof(MENUINFO)</code> before calling this function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetMenuItemCount">
    <summary>Determines the number of items in the specified menu.</summary>
    <param name="hMenu">A handle to the menu to be examined.</param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of items in the menu.</para>
      <para>If the function fails, the return value is -1. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetMenuItemID">
    <summary>Retrieves the menu item identifier of a menu item located at the specified position in a menu.</summary>
    <param name="hMenu">A handle to the menu that contains the item whose identifier is to be retrieved.</param>
    <param name="nPos">The zero-based relative position of the menu item whose identifier is to be retrieved.</param>
    <returns>The return value is the identifier of the specified menu item. If the menu item identifier is <b>NULL</b> or if the specified item opens a submenu, the return value is -1.</returns>
  </member>
  <member name="Windows.GetMenuItemInfo">
    <summary>Retrieves information about a menu item.</summary>
    <param name="hmenu">A handle to the menu that contains the menu item.</param>
    <param name="item">The identifier or position of the menu item to get information about. The meaning of this parameter depends on the value of <i>fByPosition</i>.</param>
    <param name="fByPosition">The meaning of <i>uItem</i>. If this parameter is <b>FALSE</b>, <i>uItem</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com//windows/desktop/menurc/about-menus">Accessing Menu Items Programmatically</a> for more information.</param>
    <param name="lpmii">A pointer to a <see cref="MENUITEMINFO" /> structure that specifies the information to retrieve and receives information about the menu item. Note that you must set the <b>cbSize</b> member to <code>sizeof(MENUITEMINFO)</code> before calling this function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.GetMenuItemInfoA">
    <summary>Retrieves information about a menu item.</summary>
    <param name="hmenu">A handle to the menu that contains the menu item.</param>
    <param name="item">The identifier or position of the menu item to get information about. The meaning of this parameter depends on the value of <i>fByPosition</i>.</param>
    <param name="fByPosition">The meaning of <i>uItem</i>. If this parameter is <b>FALSE</b>, <i>uItem</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com//windows/desktop/menurc/about-menus">Accessing Menu Items Programmatically</a> for more information.</param>
    <param name="lpmii">A pointer to a <see cref="MENUITEMINFO" /> structure that specifies the information to retrieve and receives information about the menu item. Note that you must set the <b>cbSize</b> member to <code>sizeof(MENUITEMINFO)</code> before calling this function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.GetMenuItemInfoW">
    <summary>Retrieves information about a menu item.</summary>
    <param name="hmenu">A handle to the menu that contains the menu item.</param>
    <param name="item">The identifier or position of the menu item to get information about. The meaning of this parameter depends on the value of <i>fByPosition</i>.</param>
    <param name="fByPosition">The meaning of <i>uItem</i>. If this parameter is <b>FALSE</b>, <i>uItem</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com//windows/desktop/menurc/about-menus">Accessing Menu Items Programmatically</a> for more information.</param>
    <param name="lpmii">A pointer to a <see cref="MENUITEMINFO" /> structure that specifies the information to retrieve and receives information about the menu item. Note that you must set the <b>cbSize</b> member to <code>sizeof(MENUITEMINFO)</code> before calling this function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.GetMenuItemInfo">
    <summary>Retrieves information about a menu item.</summary>
    <param name="hmenu">A handle to the menu that contains the menu item.</param>
    <param name="item">The identifier or position of the menu item to get information about. The meaning of this parameter depends on the value of <i>fByPosition</i>.</param>
    <param name="fByPosition">The meaning of <i>uItem</i>. If this parameter is <b>FALSE</b>, <i>uItem</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com//windows/desktop/menurc/about-menus">Accessing Menu Items Programmatically</a> for more information.</param>
    <param name="lpmii">A pointer to a <see cref="MENUITEMINFO" /> structure that specifies the information to retrieve and receives information about the menu item. Note that you must set the <b>cbSize</b> member to <code>sizeof(MENUITEMINFO)</code> before calling this function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.GetMenuItemInfoA">
    <summary>Retrieves information about a menu item.</summary>
    <param name="hmenu">A handle to the menu that contains the menu item.</param>
    <param name="item">The identifier or position of the menu item to get information about. The meaning of this parameter depends on the value of <i>fByPosition</i>.</param>
    <param name="fByPosition">The meaning of <i>uItem</i>. If this parameter is <b>FALSE</b>, <i>uItem</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com//windows/desktop/menurc/about-menus">Accessing Menu Items Programmatically</a> for more information.</param>
    <param name="lpmii">A pointer to a <see cref="MENUITEMINFO" /> structure that specifies the information to retrieve and receives information about the menu item. Note that you must set the <b>cbSize</b> member to <code>sizeof(MENUITEMINFO)</code> before calling this function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.GetMenuItemInfoW">
    <summary>Retrieves information about a menu item.</summary>
    <param name="hmenu">A handle to the menu that contains the menu item.</param>
    <param name="item">The identifier or position of the menu item to get information about. The meaning of this parameter depends on the value of <i>fByPosition</i>.</param>
    <param name="fByPosition">The meaning of <i>uItem</i>. If this parameter is <b>FALSE</b>, <i>uItem</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com//windows/desktop/menurc/about-menus">Accessing Menu Items Programmatically</a> for more information.</param>
    <param name="lpmii">A pointer to a <see cref="MENUITEMINFO" /> structure that specifies the information to retrieve and receives information about the menu item. Note that you must set the <b>cbSize</b> member to <code>sizeof(MENUITEMINFO)</code> before calling this function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.GetMenuItemRect">
    <summary>Retrieves the bounding rectangle for the specified menu item.</summary>
    <param name="hWnd">
      <para>A handle to the window containing the menu.</para>
      <para>If this value is <b>NULL</b> and the <i>hMenu</i>parameter represents a popup menu, the function will find the menu window.</para>
    </param>
    <param name="hMenu">A handle to a menu.</param>
    <param name="uItem">The zero-based position of the menu item.</param>
    <param name="lprcItem">A pointer to a <see cref="RECT" /> structure that receives the bounding rectangle of the specified menu item expressed in screen coordinates.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.GetMenuState">
    <summary>
      <para>Retrieves the menu flags associated with the specified menu item. If the menu item opens a submenu, this function also returns the number of items in the submenu.</para>
      <div>
        <b>Note</b>  The <b>GetMenuState</b> function has been superseded by the <see cref="GetMenuItemInfo" />. You can still use <b>GetMenuState</b>, however, if you do not need any of the extended features of <b>GetMenuItemInfo</b>.</div>
    </summary>
    <param name="hMenu">A handle to the menu that contains the menu item whose flags are to be retrieved.</param>
    <param name="uId">The menu item for which the menu flags are to be retrieved, as determined by the <i>uFlags</i> parameter.</param>
    <param name="uFlags">
      <para>Indicates how the <i>uId</i> parameter is interpreted. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uId</i> parameter gives the identifier of the menu item. The <b>MF_BYCOMMAND</b> flag is the default if neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uId</i> parameter gives the zero-based relative position of the menu item.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the specified item does not exist, the return value is -1.</para>
      <para>If the menu item opens a submenu, the low-order byte of the return value contains the menu flags associated with the item, and the high-order byte contains the number of items in the submenu opened by the item.</para>
      <para>Otherwise, the return value is a mask (Bitwise OR) of the menu flags. Following are the menu flags associated with the menu item.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_CHECKED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008L</term>
              </listheader>
            </list>
          </description>
          <description>A check mark is placed next to the item (for drop-down menus, submenus, and shortcut menus only).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_DISABLED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The item is disabled.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_GRAYED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The item is disabled and grayed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_HILITE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080L</term>
              </listheader>
            </list>
          </description>
          <description>The item is highlighted.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_MENUBARBREAK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020L</term>
              </listheader>
            </list>
          </description>
          <description>This is the same as the <b>MF_MENUBREAK</b> flag, except for drop-down menus, submenus, and shortcut menus, where the new column is separated from the old column by a vertical line.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_MENUBREAK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040L</term>
              </listheader>
            </list>
          </description>
          <description>The item is placed on a new line (for menu bars) or in a new column (for drop-down menus, submenus, and shortcut menus) without separating columns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>The item is owner-drawn.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_POPUP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010L</term>
              </listheader>
            </list>
          </description>
          <description>Menu item is a submenu.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_SEPARATOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800L</term>
              </listheader>
            </list>
          </description>
          <description>There is a horizontal dividing line (for drop-down menus, submenus, and shortcut menus only).</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetMenuString">
    <summary>
      <para>Copies the text string of the specified menu item into the specified buffer.</para>
      <div>
        <b>Note</b>  The <b>GetMenuString</b> function has been superseded. Use the <see cref="GetMenuItemInfo" /> function to retrieve the menu item text.</div>
    </summary>
    <param name="hMenu">A handle to the menu.</param>
    <param name="uIDItem">The menu item to be changed, as determined by the <i>uFlag</i> parameter.</param>
    <param name="lpString">The buffer that receives the null-terminated string. If the string is as long or longer than <i>lpString</i>, the string is truncated and the terminating null character is added. If <i>lpString</i> is <b>NULL</b>, the function returns the length of the menu string.</param>
    <param name="cchMax">The maximum length, in characters, of the string to be copied. If the string is longer than the maximum specified in the <i>nMaxCount</i> parameter, the extra characters are truncated. If <i>nMaxCount</i> is 0, the function returns the length of the menu string.</param>
    <param name="flags">
      <para>Indicates how the <i>uIDItem</i> parameter is interpreted. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uIDItem</i> gives the identifier of the menu item. If neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified, the <b>MF_BYCOMMAND</b> flag is the default flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uIDItem</i> gives the zero-based relative position of the menu item.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of characters copied to the buffer, not including the terminating null character.</para>
      <para>If the function fails, the return value is zero.</para>
      <para>If the specified item is not of type <b>MIIM_STRING</b> or <b>MFT_STRING</b>, then the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetMenuStringA">
    <summary>
      <para>Copies the text string of the specified menu item into the specified buffer.</para>
      <div>
        <b>Note</b>  The <b>GetMenuString</b> function has been superseded. Use the <see cref="GetMenuItemInfo" /> function to retrieve the menu item text.</div>
    </summary>
    <param name="hMenu">A handle to the menu.</param>
    <param name="uIDItem">The menu item to be changed, as determined by the <i>uFlag</i> parameter.</param>
    <param name="lpString">The buffer that receives the null-terminated string. If the string is as long or longer than <i>lpString</i>, the string is truncated and the terminating null character is added. If <i>lpString</i> is <b>NULL</b>, the function returns the length of the menu string.</param>
    <param name="cchMax">The maximum length, in characters, of the string to be copied. If the string is longer than the maximum specified in the <i>nMaxCount</i> parameter, the extra characters are truncated. If <i>nMaxCount</i> is 0, the function returns the length of the menu string.</param>
    <param name="flags">
      <para>Indicates how the <i>uIDItem</i> parameter is interpreted. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uIDItem</i> gives the identifier of the menu item. If neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified, the <b>MF_BYCOMMAND</b> flag is the default flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uIDItem</i> gives the zero-based relative position of the menu item.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of characters copied to the buffer, not including the terminating null character.</para>
      <para>If the function fails, the return value is zero.</para>
      <para>If the specified item is not of type <b>MIIM_STRING</b> or <b>MFT_STRING</b>, then the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetMenuStringW">
    <summary>
      <para>Copies the text string of the specified menu item into the specified buffer.</para>
      <div>
        <b>Note</b>  The <b>GetMenuString</b> function has been superseded. Use the <see cref="GetMenuItemInfo" /> function to retrieve the menu item text.</div>
    </summary>
    <param name="hMenu">A handle to the menu.</param>
    <param name="uIDItem">The menu item to be changed, as determined by the <i>uFlag</i> parameter.</param>
    <param name="lpString">The buffer that receives the null-terminated string. If the string is as long or longer than <i>lpString</i>, the string is truncated and the terminating null character is added. If <i>lpString</i> is <b>NULL</b>, the function returns the length of the menu string.</param>
    <param name="cchMax">The maximum length, in characters, of the string to be copied. If the string is longer than the maximum specified in the <i>nMaxCount</i> parameter, the extra characters are truncated. If <i>nMaxCount</i> is 0, the function returns the length of the menu string.</param>
    <param name="flags">
      <para>Indicates how the <i>uIDItem</i> parameter is interpreted. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uIDItem</i> gives the identifier of the menu item. If neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified, the <b>MF_BYCOMMAND</b> flag is the default flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uIDItem</i> gives the zero-based relative position of the menu item.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of characters copied to the buffer, not including the terminating null character.</para>
      <para>If the function fails, the return value is zero.</para>
      <para>If the specified item is not of type <b>MIIM_STRING</b> or <b>MFT_STRING</b>, then the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetMenuString">
    <summary>
      <para>Copies the text string of the specified menu item into the specified buffer.</para>
      <div>
        <b>Note</b>  The <b>GetMenuString</b> function has been superseded. Use the <see cref="GetMenuItemInfo" /> function to retrieve the menu item text.</div>
    </summary>
    <param name="hMenu">A handle to the menu.</param>
    <param name="uIDItem">The menu item to be changed, as determined by the <i>uFlag</i> parameter.</param>
    <param name="lpString">The buffer that receives the null-terminated string. If the string is as long or longer than <i>lpString</i>, the string is truncated and the terminating null character is added. If <i>lpString</i> is <b>NULL</b>, the function returns the length of the menu string.</param>
    <param name="cchMax">The maximum length, in characters, of the string to be copied. If the string is longer than the maximum specified in the <i>nMaxCount</i> parameter, the extra characters are truncated. If <i>nMaxCount</i> is 0, the function returns the length of the menu string.</param>
    <param name="flags">
      <para>Indicates how the <i>uIDItem</i> parameter is interpreted. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uIDItem</i> gives the identifier of the menu item. If neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified, the <b>MF_BYCOMMAND</b> flag is the default flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uIDItem</i> gives the zero-based relative position of the menu item.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of characters copied to the buffer, not including the terminating null character.</para>
      <para>If the function fails, the return value is zero.</para>
      <para>If the specified item is not of type <b>MIIM_STRING</b> or <b>MFT_STRING</b>, then the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetMenuStringA">
    <summary>
      <para>Copies the text string of the specified menu item into the specified buffer.</para>
      <div>
        <b>Note</b>  The <b>GetMenuString</b> function has been superseded. Use the <see cref="GetMenuItemInfo" /> function to retrieve the menu item text.</div>
    </summary>
    <param name="hMenu">A handle to the menu.</param>
    <param name="uIDItem">The menu item to be changed, as determined by the <i>uFlag</i> parameter.</param>
    <param name="lpString">The buffer that receives the null-terminated string. If the string is as long or longer than <i>lpString</i>, the string is truncated and the terminating null character is added. If <i>lpString</i> is <b>NULL</b>, the function returns the length of the menu string.</param>
    <param name="cchMax">The maximum length, in characters, of the string to be copied. If the string is longer than the maximum specified in the <i>nMaxCount</i> parameter, the extra characters are truncated. If <i>nMaxCount</i> is 0, the function returns the length of the menu string.</param>
    <param name="flags">
      <para>Indicates how the <i>uIDItem</i> parameter is interpreted. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uIDItem</i> gives the identifier of the menu item. If neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified, the <b>MF_BYCOMMAND</b> flag is the default flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uIDItem</i> gives the zero-based relative position of the menu item.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of characters copied to the buffer, not including the terminating null character.</para>
      <para>If the function fails, the return value is zero.</para>
      <para>If the specified item is not of type <b>MIIM_STRING</b> or <b>MFT_STRING</b>, then the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetMenuStringW">
    <summary>
      <para>Copies the text string of the specified menu item into the specified buffer.</para>
      <div>
        <b>Note</b>  The <b>GetMenuString</b> function has been superseded. Use the <see cref="GetMenuItemInfo" /> function to retrieve the menu item text.</div>
    </summary>
    <param name="hMenu">A handle to the menu.</param>
    <param name="uIDItem">The menu item to be changed, as determined by the <i>uFlag</i> parameter.</param>
    <param name="lpString">The buffer that receives the null-terminated string. If the string is as long or longer than <i>lpString</i>, the string is truncated and the terminating null character is added. If <i>lpString</i> is <b>NULL</b>, the function returns the length of the menu string.</param>
    <param name="cchMax">The maximum length, in characters, of the string to be copied. If the string is longer than the maximum specified in the <i>nMaxCount</i> parameter, the extra characters are truncated. If <i>nMaxCount</i> is 0, the function returns the length of the menu string.</param>
    <param name="flags">
      <para>Indicates how the <i>uIDItem</i> parameter is interpreted. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uIDItem</i> gives the identifier of the menu item. If neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified, the <b>MF_BYCOMMAND</b> flag is the default flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uIDItem</i> gives the zero-based relative position of the menu item.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value specifies the number of characters copied to the buffer, not including the terminating null character.</para>
      <para>If the function fails, the return value is zero.</para>
      <para>If the specified item is not of type <b>MIIM_STRING</b> or <b>MFT_STRING</b>, then the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetMessage">
    <summary>
      <para>Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval.</para>
      <para>
        <b>GetMessage</b> functions like <see cref="PeekMessage" />, however, <b>GetMessage</b> blocks until a message is posted before returning.</para>
    </summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that receives message information from the thread's message queue.</param>
    <param name="hWnd">
      <para>A handle to the window whose messages are to be retrieved. The window must belong to the current thread.</para>
      <para>If <i>hWnd</i> is <b>NULL</b>, <b>GetMessage</b> retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b> (see the <see cref="MSG" /> structure). Therefore if hWnd is <b>NULL</b>, both window messages and thread messages are processed.</para>
      <para>If <i>hWnd</i> is -1, <b>GetMessage</b> retrieves only messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b>, that is, thread messages as posted by <see cref="PostMessage" /> (when the <i>hWnd</i> parameter is <b>NULL</b>) or <see cref="PostThreadMessage" />.</para>
    </param>
    <param name="wMsgFilterMin">
      <para>The integer value of the lowest message value to be retrieved. Use <b>WM_KEYFIRST</b> (0x0100) to specify the first keyboard message or <b>WM_MOUSEFIRST</b> (0x0200) to specify the first mouse message.</para>
      <para>Use <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMax</i> to specify only the <b>WM_INPUT</b> messages.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <param name="wMsgFilterMax">
      <para>The integer value of the highest message value to be retrieved. Use <b>WM_KEYLAST</b> to specify the last keyboard message or <b>WM_MOUSELAST</b> to specify the last mouse message.</para>
      <para>Use <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMin</i> to specify only the <b>WM_INPUT</b> messages.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <returns>
      <para>If the function retrieves a message other than <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-quit">WM_QUIT</a>, the return value is nonzero.</para>
      <para>If the function retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-quit">WM_QUIT</a> message, the return value is zero.</para>
      <para>If there is an error, the return value is -1. For example, the function fails if <i>hWnd</i> is an invalid window handle or <i>lpMsg</i> is an invalid pointer. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>Because the return value can be nonzero, zero, or -1, avoid code like this:</para>
      <code>while (GetMessage( lpMsg, hWnd, 0, 0)) ...</code>
      <para>The possibility of a -1 return value in the case that hWnd is an invalid parameter (such as referring to a window that has already been destroyed) means that such code can lead to fatal application errors. Instead, use code like this:</para>
      <code>BOOL bRet; while( (bRet = GetMessage( &amp;msg, hWnd, 0, 0 )) != 0) { if (bRet == -1) { // handle the error and possibly exit } else { TranslateMessage(&amp;msg); DispatchMessage(&amp;msg); } }</code>
    </returns>
  </member>
  <member name="Windows.GetMessageA">
    <summary>
      <para>Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval.</para>
      <para>
        <b>GetMessage</b> functions like <see cref="PeekMessage" />, however, <b>GetMessage</b> blocks until a message is posted before returning.</para>
    </summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that receives message information from the thread's message queue.</param>
    <param name="hWnd">
      <para>A handle to the window whose messages are to be retrieved. The window must belong to the current thread.</para>
      <para>If <i>hWnd</i> is <b>NULL</b>, <b>GetMessage</b> retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b> (see the <see cref="MSG" /> structure). Therefore if hWnd is <b>NULL</b>, both window messages and thread messages are processed.</para>
      <para>If <i>hWnd</i> is -1, <b>GetMessage</b> retrieves only messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b>, that is, thread messages as posted by <see cref="PostMessage" /> (when the <i>hWnd</i> parameter is <b>NULL</b>) or <see cref="PostThreadMessage" />.</para>
    </param>
    <param name="wMsgFilterMin">
      <para>The integer value of the lowest message value to be retrieved. Use <b>WM_KEYFIRST</b> (0x0100) to specify the first keyboard message or <b>WM_MOUSEFIRST</b> (0x0200) to specify the first mouse message.</para>
      <para>Use <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMax</i> to specify only the <b>WM_INPUT</b> messages.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <param name="wMsgFilterMax">
      <para>The integer value of the highest message value to be retrieved. Use <b>WM_KEYLAST</b> to specify the last keyboard message or <b>WM_MOUSELAST</b> to specify the last mouse message.</para>
      <para>Use <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMin</i> to specify only the <b>WM_INPUT</b> messages.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <returns>
      <para>If the function retrieves a message other than <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-quit">WM_QUIT</a>, the return value is nonzero.</para>
      <para>If the function retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-quit">WM_QUIT</a> message, the return value is zero.</para>
      <para>If there is an error, the return value is -1. For example, the function fails if <i>hWnd</i> is an invalid window handle or <i>lpMsg</i> is an invalid pointer. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>Because the return value can be nonzero, zero, or -1, avoid code like this:</para>
      <code>while (GetMessage( lpMsg, hWnd, 0, 0)) ...</code>
      <para>The possibility of a -1 return value in the case that hWnd is an invalid parameter (such as referring to a window that has already been destroyed) means that such code can lead to fatal application errors. Instead, use code like this:</para>
      <code>BOOL bRet; while( (bRet = GetMessage( &amp;msg, hWnd, 0, 0 )) != 0) { if (bRet == -1) { // handle the error and possibly exit } else { TranslateMessage(&amp;msg); DispatchMessage(&amp;msg); } }</code>
    </returns>
  </member>
  <member name="Windows.GetMessageW">
    <summary>
      <para>Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval.</para>
      <para>
        <b>GetMessage</b> functions like <see cref="PeekMessage" />, however, <b>GetMessage</b> blocks until a message is posted before returning.</para>
    </summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that receives message information from the thread's message queue.</param>
    <param name="hWnd">
      <para>A handle to the window whose messages are to be retrieved. The window must belong to the current thread.</para>
      <para>If <i>hWnd</i> is <b>NULL</b>, <b>GetMessage</b> retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b> (see the <see cref="MSG" /> structure). Therefore if hWnd is <b>NULL</b>, both window messages and thread messages are processed.</para>
      <para>If <i>hWnd</i> is -1, <b>GetMessage</b> retrieves only messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b>, that is, thread messages as posted by <see cref="PostMessage" /> (when the <i>hWnd</i> parameter is <b>NULL</b>) or <see cref="PostThreadMessage" />.</para>
    </param>
    <param name="wMsgFilterMin">
      <para>The integer value of the lowest message value to be retrieved. Use <b>WM_KEYFIRST</b> (0x0100) to specify the first keyboard message or <b>WM_MOUSEFIRST</b> (0x0200) to specify the first mouse message.</para>
      <para>Use <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMax</i> to specify only the <b>WM_INPUT</b> messages.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <param name="wMsgFilterMax">
      <para>The integer value of the highest message value to be retrieved. Use <b>WM_KEYLAST</b> to specify the last keyboard message or <b>WM_MOUSELAST</b> to specify the last mouse message.</para>
      <para>Use <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMin</i> to specify only the <b>WM_INPUT</b> messages.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <returns>
      <para>If the function retrieves a message other than <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-quit">WM_QUIT</a>, the return value is nonzero.</para>
      <para>If the function retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-quit">WM_QUIT</a> message, the return value is zero.</para>
      <para>If there is an error, the return value is -1. For example, the function fails if <i>hWnd</i> is an invalid window handle or <i>lpMsg</i> is an invalid pointer. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>Because the return value can be nonzero, zero, or -1, avoid code like this:</para>
      <code>while (GetMessage( lpMsg, hWnd, 0, 0)) ...</code>
      <para>The possibility of a -1 return value in the case that hWnd is an invalid parameter (such as referring to a window that has already been destroyed) means that such code can lead to fatal application errors. Instead, use code like this:</para>
      <code>BOOL bRet; while( (bRet = GetMessage( &amp;msg, hWnd, 0, 0 )) != 0) { if (bRet == -1) { // handle the error and possibly exit } else { TranslateMessage(&amp;msg); DispatchMessage(&amp;msg); } }</code>
    </returns>
  </member>
  <member name="Windows.GetMessage">
    <summary>
      <para>Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval.</para>
      <para>Unlike <b>GetMessage</b>, the <see cref="PeekMessage" /> function does not wait for a message to be posted before returning.</para>
    </summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that receives message information from the thread's message queue.</param>
    <param name="hWnd">
      <para>A handle to the window whose messages are to be retrieved. The window must belong to the current thread.</para>
      <para>If <i>hWnd</i> is <b>NULL</b>, <b>GetMessage</b> retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b> (see the <see cref="MSG" /> structure). Therefore if hWnd is <b>NULL</b>, both window messages and thread messages are processed.</para>
      <para>If <i>hWnd</i> is -1, <b>GetMessage</b> retrieves only messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b>, that is, thread messages as posted by <see cref="PostMessage" /> (when the <i>hWnd</i> parameter is <b>NULL</b>) or <see cref="PostThreadMessage" />.</para>
    </param>
    <param name="wMsgFilterMin">
      <para>The integer value of the lowest message value to be retrieved. Use <b>WM_KEYFIRST</b> (0x0100) to specify the first keyboard message or <b>WM_MOUSEFIRST</b> (0x0200) to specify the first mouse message.</para>
      <para>Use <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMax</i> to specify only the <b>WM_INPUT</b> messages.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <param name="wMsgFilterMax">
      <para>The integer value of the highest message value to be retrieved. Use <b>WM_KEYLAST</b> to specify the last keyboard message or <b>WM_MOUSELAST</b> to specify the last mouse message.</para>
      <para>Use <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMin</i> to specify only the <b>WM_INPUT</b> messages.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <returns>
      <para>If the function retrieves a message other than <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-quit">WM_QUIT</a>, the return value is nonzero.</para>
      <para>If the function retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-quit">WM_QUIT</a> message, the return value is zero.</para>
      <para>If there is an error, the return value is -1. For example, the function fails if <i>hWnd</i> is an invalid window handle or <i>lpMsg</i> is an invalid pointer. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>Because the return value can be nonzero, zero, or -1, avoid code like this:</para>
      <code>while (GetMessage( lpMsg, hWnd, 0, 0)) ...</code>
      <para>The possibility of a -1 return value in the case that hWnd is an invalid parameter (such as referring to a window that has already been destroyed) means that such code can lead to fatal application errors. Instead, use code like this:</para>
      <code>BOOL bRet; while( (bRet = GetMessage( &amp;msg, hWnd, 0, 0 )) != 0) { if (bRet == -1) { // handle the error and possibly exit } else { TranslateMessage(&amp;msg); DispatchMessage(&amp;msg); } }</code>
    </returns>
  </member>
  <member name="Windows.GetMessageA">
    <summary>
      <para>Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval.</para>
      <para>Unlike <b>GetMessage</b>, the <see cref="PeekMessage" /> function does not wait for a message to be posted before returning.</para>
    </summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that receives message information from the thread's message queue.</param>
    <param name="hWnd">
      <para>A handle to the window whose messages are to be retrieved. The window must belong to the current thread.</para>
      <para>If <i>hWnd</i> is <b>NULL</b>, <b>GetMessage</b> retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b> (see the <see cref="MSG" /> structure). Therefore if hWnd is <b>NULL</b>, both window messages and thread messages are processed.</para>
      <para>If <i>hWnd</i> is -1, <b>GetMessage</b> retrieves only messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b>, that is, thread messages as posted by <see cref="PostMessage" /> (when the <i>hWnd</i> parameter is <b>NULL</b>) or <see cref="PostThreadMessage" />.</para>
    </param>
    <param name="wMsgFilterMin">
      <para>The integer value of the lowest message value to be retrieved. Use <b>WM_KEYFIRST</b> (0x0100) to specify the first keyboard message or <b>WM_MOUSEFIRST</b> (0x0200) to specify the first mouse message.</para>
      <para>Use <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMax</i> to specify only the <b>WM_INPUT</b> messages.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <param name="wMsgFilterMax">
      <para>The integer value of the highest message value to be retrieved. Use <b>WM_KEYLAST</b> to specify the last keyboard message or <b>WM_MOUSELAST</b> to specify the last mouse message.</para>
      <para>Use <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMin</i> to specify only the <b>WM_INPUT</b> messages.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <returns>
      <para>If the function retrieves a message other than <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-quit">WM_QUIT</a>, the return value is nonzero.</para>
      <para>If the function retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-quit">WM_QUIT</a> message, the return value is zero.</para>
      <para>If there is an error, the return value is -1. For example, the function fails if <i>hWnd</i> is an invalid window handle or <i>lpMsg</i> is an invalid pointer. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>Because the return value can be nonzero, zero, or -1, avoid code like this:</para>
      <code>while (GetMessage( lpMsg, hWnd, 0, 0)) ...</code>
      <para>The possibility of a -1 return value in the case that hWnd is an invalid parameter (such as referring to a window that has already been destroyed) means that such code can lead to fatal application errors. Instead, use code like this:</para>
      <code>BOOL bRet; while( (bRet = GetMessage( &amp;msg, hWnd, 0, 0 )) != 0) { if (bRet == -1) { // handle the error and possibly exit } else { TranslateMessage(&amp;msg); DispatchMessage(&amp;msg); } }</code>
    </returns>
  </member>
  <member name="Windows.GetMessageW">
    <summary>
      <para>Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval.</para>
      <para>Unlike <b>GetMessage</b>, the <see cref="PeekMessage" /> function does not wait for a message to be posted before returning.</para>
    </summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that receives message information from the thread's message queue.</param>
    <param name="hWnd">
      <para>A handle to the window whose messages are to be retrieved. The window must belong to the current thread.</para>
      <para>If <i>hWnd</i> is <b>NULL</b>, <b>GetMessage</b> retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b> (see the <see cref="MSG" /> structure). Therefore if hWnd is <b>NULL</b>, both window messages and thread messages are processed.</para>
      <para>If <i>hWnd</i> is -1, <b>GetMessage</b> retrieves only messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b>, that is, thread messages as posted by <see cref="PostMessage" /> (when the <i>hWnd</i> parameter is <b>NULL</b>) or <see cref="PostThreadMessage" />.</para>
    </param>
    <param name="wMsgFilterMin">
      <para>The integer value of the lowest message value to be retrieved. Use <b>WM_KEYFIRST</b> (0x0100) to specify the first keyboard message or <b>WM_MOUSEFIRST</b> (0x0200) to specify the first mouse message.</para>
      <para>Use <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMax</i> to specify only the <b>WM_INPUT</b> messages.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <param name="wMsgFilterMax">
      <para>The integer value of the highest message value to be retrieved. Use <b>WM_KEYLAST</b> to specify the last keyboard message or <b>WM_MOUSELAST</b> to specify the last mouse message.</para>
      <para>Use <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMin</i> to specify only the <b>WM_INPUT</b> messages.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <returns>
      <para>If the function retrieves a message other than <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-quit">WM_QUIT</a>, the return value is nonzero.</para>
      <para>If the function retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-quit">WM_QUIT</a> message, the return value is zero.</para>
      <para>If there is an error, the return value is -1. For example, the function fails if <i>hWnd</i> is an invalid window handle or <i>lpMsg</i> is an invalid pointer. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>Because the return value can be nonzero, zero, or -1, avoid code like this:</para>
      <code>while (GetMessage( lpMsg, hWnd, 0, 0)) ...</code>
      <para>The possibility of a -1 return value in the case that hWnd is an invalid parameter (such as referring to a window that has already been destroyed) means that such code can lead to fatal application errors. Instead, use code like this:</para>
      <code>BOOL bRet; while( (bRet = GetMessage( &amp;msg, hWnd, 0, 0 )) != 0) { if (bRet == -1) { // handle the error and possibly exit } else { TranslateMessage(&amp;msg); DispatchMessage(&amp;msg); } }</code>
    </returns>
  </member>
  <member name="Windows.GetMessageExtraInfo">
    <summary>Retrieves the extra message information for the current thread. Extra message information is an application- or driver-defined value associated with the current thread's message queue.</summary>
    <returns>The return value specifies the extra information. The meaning of the extra information is device specific.</returns>
  </member>
  <member name="Windows.GetMessagePos">
    <summary>
      <para>Retrieves the cursor position for the last message retrieved by the <see cref="GetMessage" /> function.</para>
      <para>To determine the current position of the cursor, use the <see cref="GetCursorPos" /> function.</para>
    </summary>
    <returns>The return value specifies the x- and y-coordinates of the cursor position. The x-coordinate is the low order <b>short</b> and the y-coordinate is the high-order <b>short</b>.</returns>
  </member>
  <member name="Windows.GetMessageTime">
    <summary>Retrieves the message time for the last message retrieved by the <see cref="GetMessage" /> function. The time is a long integer that specifies the elapsed time, in milliseconds, from the time the system was started to the time the message was created (that is, placed in the thread's message queue).</summary>
    <returns>The return value specifies the message time.</returns>
  </member>
  <member name="Windows.GetMessage">
    <summary>
      <para>Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval.</para>
      <para>Unlike <b>GetMessage</b>, the <see cref="PeekMessage" /> function does not wait for a message to be posted before returning.</para>
    </summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that receives message information from the thread's message queue.</param>
    <param name="hWnd">
      <para>A handle to the window whose messages are to be retrieved. The window must belong to the current thread.</para>
      <para>If <i>hWnd</i> is <b>NULL</b>, <b>GetMessage</b> retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b> (see the <see cref="MSG" /> structure). Therefore if hWnd is <b>NULL</b>, both window messages and thread messages are processed.</para>
      <para>If <i>hWnd</i> is -1, <b>GetMessage</b> retrieves only messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b>, that is, thread messages as posted by <see cref="PostMessage" /> (when the <i>hWnd</i> parameter is <b>NULL</b>) or <see cref="PostThreadMessage" />.</para>
    </param>
    <param name="wMsgFilterMin">
      <para>The integer value of the lowest message value to be retrieved. Use <b>WM_KEYFIRST</b> (0x0100) to specify the first keyboard message or <b>WM_MOUSEFIRST</b> (0x0200) to specify the first mouse message.</para>
      <para>Use <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMax</i> to specify only the <b>WM_INPUT</b> messages.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <param name="wMsgFilterMax">
      <para>The integer value of the highest message value to be retrieved. Use <b>WM_KEYLAST</b> to specify the last keyboard message or <b>WM_MOUSELAST</b> to specify the last mouse message.</para>
      <para>Use <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMin</i> to specify only the <b>WM_INPUT</b> messages.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <returns>
      <para>If the function retrieves a message other than <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-quit">WM_QUIT</a>, the return value is nonzero.</para>
      <para>If the function retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-quit">WM_QUIT</a> message, the return value is zero.</para>
      <para>If there is an error, the return value is -1. For example, the function fails if <i>hWnd</i> is an invalid window handle or <i>lpMsg</i> is an invalid pointer. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>Because the return value can be nonzero, zero, or -1, avoid code like this:</para>
      <code>while (GetMessage( lpMsg, hWnd, 0, 0)) ...</code>
      <para>The possibility of a -1 return value in the case that hWnd is an invalid parameter (such as referring to a window that has already been destroyed) means that such code can lead to fatal application errors. Instead, use code like this:</para>
      <code>BOOL bRet; while( (bRet = GetMessage( &amp;msg, hWnd, 0, 0 )) != 0) { if (bRet == -1) { // handle the error and possibly exit } else { TranslateMessage(&amp;msg); DispatchMessage(&amp;msg); } }</code>
    </returns>
  </member>
  <member name="Windows.GetMessageA">
    <summary>
      <para>Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval.</para>
      <para>Unlike <b>GetMessage</b>, the <see cref="PeekMessage" /> function does not wait for a message to be posted before returning.</para>
    </summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that receives message information from the thread's message queue.</param>
    <param name="hWnd">
      <para>A handle to the window whose messages are to be retrieved. The window must belong to the current thread.</para>
      <para>If <i>hWnd</i> is <b>NULL</b>, <b>GetMessage</b> retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b> (see the <see cref="MSG" /> structure). Therefore if hWnd is <b>NULL</b>, both window messages and thread messages are processed.</para>
      <para>If <i>hWnd</i> is -1, <b>GetMessage</b> retrieves only messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b>, that is, thread messages as posted by <see cref="PostMessage" /> (when the <i>hWnd</i> parameter is <b>NULL</b>) or <see cref="PostThreadMessage" />.</para>
    </param>
    <param name="wMsgFilterMin">
      <para>The integer value of the lowest message value to be retrieved. Use <b>WM_KEYFIRST</b> (0x0100) to specify the first keyboard message or <b>WM_MOUSEFIRST</b> (0x0200) to specify the first mouse message.</para>
      <para>Use <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMax</i> to specify only the <b>WM_INPUT</b> messages.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <param name="wMsgFilterMax">
      <para>The integer value of the highest message value to be retrieved. Use <b>WM_KEYLAST</b> to specify the last keyboard message or <b>WM_MOUSELAST</b> to specify the last mouse message.</para>
      <para>Use <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMin</i> to specify only the <b>WM_INPUT</b> messages.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <returns>
      <para>If the function retrieves a message other than <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-quit">WM_QUIT</a>, the return value is nonzero.</para>
      <para>If the function retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-quit">WM_QUIT</a> message, the return value is zero.</para>
      <para>If there is an error, the return value is -1. For example, the function fails if <i>hWnd</i> is an invalid window handle or <i>lpMsg</i> is an invalid pointer. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>Because the return value can be nonzero, zero, or -1, avoid code like this:</para>
      <code>while (GetMessage( lpMsg, hWnd, 0, 0)) ...</code>
      <para>The possibility of a -1 return value in the case that hWnd is an invalid parameter (such as referring to a window that has already been destroyed) means that such code can lead to fatal application errors. Instead, use code like this:</para>
      <code>BOOL bRet; while( (bRet = GetMessage( &amp;msg, hWnd, 0, 0 )) != 0) { if (bRet == -1) { // handle the error and possibly exit } else { TranslateMessage(&amp;msg); DispatchMessage(&amp;msg); } }</code>
    </returns>
  </member>
  <member name="Windows.GetMessageW">
    <summary>
      <para>Retrieves a message from the calling thread's message queue. The function dispatches incoming sent messages until a posted message is available for retrieval.</para>
      <para>Unlike <b>GetMessage</b>, the <see cref="PeekMessage" /> function does not wait for a message to be posted before returning.</para>
    </summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that receives message information from the thread's message queue.</param>
    <param name="hWnd">
      <para>A handle to the window whose messages are to be retrieved. The window must belong to the current thread.</para>
      <para>If <i>hWnd</i> is <b>NULL</b>, <b>GetMessage</b> retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b> (see the <see cref="MSG" /> structure). Therefore if hWnd is <b>NULL</b>, both window messages and thread messages are processed.</para>
      <para>If <i>hWnd</i> is -1, <b>GetMessage</b> retrieves only messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b>, that is, thread messages as posted by <see cref="PostMessage" /> (when the <i>hWnd</i> parameter is <b>NULL</b>) or <see cref="PostThreadMessage" />.</para>
    </param>
    <param name="wMsgFilterMin">
      <para>The integer value of the lowest message value to be retrieved. Use <b>WM_KEYFIRST</b> (0x0100) to specify the first keyboard message or <b>WM_MOUSEFIRST</b> (0x0200) to specify the first mouse message.</para>
      <para>Use <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMax</i> to specify only the <b>WM_INPUT</b> messages.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <param name="wMsgFilterMax">
      <para>The integer value of the highest message value to be retrieved. Use <b>WM_KEYLAST</b> to specify the last keyboard message or <b>WM_MOUSELAST</b> to specify the last mouse message.</para>
      <para>Use <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-input">WM_INPUT</a> here and in <i>wMsgFilterMin</i> to specify only the <b>WM_INPUT</b> messages.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>GetMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <returns>
      <para>If the function retrieves a message other than <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-quit">WM_QUIT</a>, the return value is nonzero.</para>
      <para>If the function retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-quit">WM_QUIT</a> message, the return value is zero.</para>
      <para>If there is an error, the return value is -1. For example, the function fails if <i>hWnd</i> is an invalid window handle or <i>lpMsg</i> is an invalid pointer. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>Because the return value can be nonzero, zero, or -1, avoid code like this:</para>
      <code>while (GetMessage( lpMsg, hWnd, 0, 0)) ...</code>
      <para>The possibility of a -1 return value in the case that hWnd is an invalid parameter (such as referring to a window that has already been destroyed) means that such code can lead to fatal application errors. Instead, use code like this:</para>
      <code>BOOL bRet; while( (bRet = GetMessage( &amp;msg, hWnd, 0, 0 )) != 0) { if (bRet == -1) { // handle the error and possibly exit } else { TranslateMessage(&amp;msg); DispatchMessage(&amp;msg); } }</code>
    </returns>
  </member>
  <member name="Windows.GetMonitorInfo">
    <summary>The <b>GetMonitorInfo</b> function retrieves information about a display monitor.</summary>
    <param name="hMonitor">A handle to the display monitor of interest.</param>
    <param name="lpmi">
      <para>A pointer to a <see cref="MONITORINFO" /> or <see cref="MONITORINFOEX" /> structure that receives information about the specified display monitor.</para>
      <para>You must set the <b>cbSize</b> member of the structure to sizeof(MONITORINFO) or sizeof(MONITORINFOEX) before calling the <b>GetMonitorInfo</b> function. Doing so lets the function determine the type of structure you are passing to it.</para>
      <para>The <see cref="MONITORINFOEX" /> structure is a superset of the <see cref="MONITORINFO" /> structure. It has one additional member: a string that contains a name for the display monitor. Most applications have no use for a display monitor name, and so can save some bytes by using a <b>MONITORINFO</b> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetMonitorInfoA">
    <summary>The <b>GetMonitorInfo</b> function retrieves information about a display monitor.</summary>
    <param name="hMonitor">A handle to the display monitor of interest.</param>
    <param name="lpmi">
      <para>A pointer to a <see cref="MONITORINFO" /> or <see cref="MONITORINFOEX" /> structure that receives information about the specified display monitor.</para>
      <para>You must set the <b>cbSize</b> member of the structure to sizeof(MONITORINFO) or sizeof(MONITORINFOEX) before calling the <b>GetMonitorInfo</b> function. Doing so lets the function determine the type of structure you are passing to it.</para>
      <para>The <see cref="MONITORINFOEX" /> structure is a superset of the <see cref="MONITORINFO" /> structure. It has one additional member: a string that contains a name for the display monitor. Most applications have no use for a display monitor name, and so can save some bytes by using a <b>MONITORINFO</b> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetMonitorInfoW">
    <summary>The <b>GetMonitorInfo</b> function retrieves information about a display monitor.</summary>
    <param name="hMonitor">A handle to the display monitor of interest.</param>
    <param name="lpmi">
      <para>A pointer to a <see cref="MONITORINFO" /> or <see cref="MONITORINFOEX" /> structure that receives information about the specified display monitor.</para>
      <para>You must set the <b>cbSize</b> member of the structure to sizeof(MONITORINFO) or sizeof(MONITORINFOEX) before calling the <b>GetMonitorInfo</b> function. Doing so lets the function determine the type of structure you are passing to it.</para>
      <para>The <see cref="MONITORINFOEX" /> structure is a superset of the <see cref="MONITORINFO" /> structure. It has one additional member: a string that contains a name for the display monitor. Most applications have no use for a display monitor name, and so can save some bytes by using a <b>MONITORINFO</b> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetMonitorInfo">
    <summary>The <b>GetMonitorInfo</b> function retrieves information about a display monitor.</summary>
    <param name="hMonitor">A handle to the display monitor of interest.</param>
    <param name="lpmi">
      <para>A pointer to a <see cref="MONITORINFO" /> or <see cref="MONITORINFOEX" /> structure that receives information about the specified display monitor.</para>
      <para>You must set the <b>cbSize</b> member of the structure to sizeof(MONITORINFO) or sizeof(MONITORINFOEX) before calling the <b>GetMonitorInfo</b> function. Doing so lets the function determine the type of structure you are passing to it.</para>
      <para>The <see cref="MONITORINFOEX" /> structure is a superset of the <see cref="MONITORINFO" /> structure. It has one additional member: a string that contains a name for the display monitor. Most applications have no use for a display monitor name, and so can save some bytes by using a <b>MONITORINFO</b> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetMonitorInfoA">
    <summary>The <b>GetMonitorInfo</b> function retrieves information about a display monitor.</summary>
    <param name="hMonitor">A handle to the display monitor of interest.</param>
    <param name="lpmi">
      <para>A pointer to a <see cref="MONITORINFO" /> or <see cref="MONITORINFOEX" /> structure that receives information about the specified display monitor.</para>
      <para>You must set the <b>cbSize</b> member of the structure to sizeof(MONITORINFO) or sizeof(MONITORINFOEX) before calling the <b>GetMonitorInfo</b> function. Doing so lets the function determine the type of structure you are passing to it.</para>
      <para>The <see cref="MONITORINFOEX" /> structure is a superset of the <see cref="MONITORINFO" /> structure. It has one additional member: a string that contains a name for the display monitor. Most applications have no use for a display monitor name, and so can save some bytes by using a <b>MONITORINFO</b> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetMonitorInfoW">
    <summary>The <b>GetMonitorInfo</b> function retrieves information about a display monitor.</summary>
    <param name="hMonitor">A handle to the display monitor of interest.</param>
    <param name="lpmi">
      <para>A pointer to a <see cref="MONITORINFO" /> or <see cref="MONITORINFOEX" /> structure that receives information about the specified display monitor.</para>
      <para>You must set the <b>cbSize</b> member of the structure to sizeof(MONITORINFO) or sizeof(MONITORINFOEX) before calling the <b>GetMonitorInfo</b> function. Doing so lets the function determine the type of structure you are passing to it.</para>
      <para>The <see cref="MONITORINFOEX" /> structure is a superset of the <see cref="MONITORINFO" /> structure. It has one additional member: a string that contains a name for the display monitor. Most applications have no use for a display monitor name, and so can save some bytes by using a <b>MONITORINFO</b> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetMouseMovePointsEx">
    <summary>Retrieves a history of up to 64 previous coordinates of the mouse or pen.</summary>
    <param name="cbSize">The size, in bytes, of the <see cref="MOUSEMOVEPOINT" /> structure.</param>
    <param name="lppt">
      <para>A pointer to a <see cref="MOUSEMOVEPOINT" /> structure containing valid mouse coordinates (in screen coordinates). It may also contain a time stamp.</para>
      <para>The <b>GetMouseMovePointsEx</b> function searches for the point in the mouse coordinates history. If the function finds the point, it returns the last<i>nBufPoints</i> prior to and including the supplied point.</para>
      <para>If your application supplies a time stamp, the <b>GetMouseMovePointsEx</b> function will use it to differentiate between two equal points that were recorded at different times.</para>
      <para>An application should call this function using the mouse coordinates received from the <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-mousemove">WM_MOUSEMOVE</a> message and convert them to screen coordinates.</para>
    </param>
    <param name="lpptBuf">A pointer to a buffer that will receive the points. It should be at least<i>cbSize</i>*<i>nBufPoints</i> in size.</param>
    <param name="nBufPoints">The number of points to be retrieved.</param>
    <param name="resolution">
      <para>The resolution desired. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GMMP_USE_DISPLAY_POINTS</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the points using the display resolution.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GMMP_USE_HIGH_RESOLUTION_POINTS</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves high resolution points. Points can range from zero to 65,535 (0xFFFF) in both x- and y-coordinates. This is the resolution provided by absolute coordinate pointing devices such as drawing tablets.</description>
        </listheader>
      </list>
    </param>
    <returns>If the function succeeds, the return value is the number of points in the buffer. Otherwise, the function returns –1. For extended error information, your application can call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.GetNextDlgGroupItem">
    <summary>Retrieves a handle to the first control in a group of controls that precedes (or follows) the specified control in a dialog box.</summary>
    <param name="hDlg">A handle to the dialog box to be searched.</param>
    <param name="hCtl">A handle to the control to be used as the starting point for the search. If this parameter is <b>NULL</b>, the function uses the last (or first) control in the dialog box as the starting point for the search.</param>
    <param name="bPrevious">Indicates how the function is to search the group of controls in the dialog box. If this parameter is <b>TRUE</b>, the function searches for the previous control in the group. If it is <b>FALSE</b>, the function searches for the next control in the group.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the previous (or next) control in the group of controls.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetNextDlgTabItem">
    <summary>Retrieves a handle to the first control that has the <a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgbox-programming-considerations">WS_TABSTOP</a>style that precedes (or follows) the specified control.</summary>
    <param name="hDlg">A handle to the dialog box to be searched.</param>
    <param name="hCtl">A handle to the control to be used as the starting point for the search. If this parameter is <b>NULL</b>, the function fails.</param>
    <param name="bPrevious">Indicates how the function is to search the dialog box. If this parameter is <b>TRUE</b>, the function searches for the previous control in the dialog box. If this parameter is <b>FALSE</b>, the function searches for the next control in the dialog box.</param>
    <returns>
      <para>If the function succeeds, the return value is the window handle of the previous (or next) control that has the<a href="https://docs.microsoft.com//windows/desktop/dlgbox/dlgbox-programming-considerations">WS_TABSTOP</a> style set.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetNextWindow">
    <summary>
      <para>Retrieves a handle to the next or previous window in the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">Z-Order</a>. The next window is below the specified window; the previous window is above.</para>
      <para>If the specified window is a topmost window, the function searches for a topmost window. If the specified window is a top-level window, the function searches for a top-level window. If the specified window is a child window, the function searches for a child window.</para>
    </summary>
    <param name="hWnd">A handle to a window. The window handle retrieved is relative to this window, based on the value of the <i>wCmd</i> parameter.</param>
    <param name="wCmd">
      <para>Indicates whether the function returns a handle to the next window or the previous window. This parameter can be either of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GW_HWNDNEXT</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Returns a handle to the window below the given window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GW_HWNDPREV</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Returns a handle to the window above the given window.</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.GetOpenClipboardWindow">
    <summary>Retrieves the handle to the window that currently has the clipboard open.</summary>
    <returns>If the function succeeds, the return value is the handle to the window that has the clipboard open. If no window has the clipboard open, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.GetParent">
    <summary>
      <para>Retrieves a handle to the specified window's parent or owner.</para>
      <para>To retrieve a handle to a specified ancestor, use the <see cref="GetAncestor" /> function.</para>
    </summary>
    <param name="hWnd">A handle to the window whose parent window handle is to be retrieved.</param>
    <returns>
      <para>If the window is a child window, the return value is a handle to the parent window. If the window is a top-level window with the <b>WS_POPUP</b> style, the return value is a handle to the owner window.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>This function typically fails for one of the following reasons:</para>
      <list type="bullet">
        <item>
          <description>The window is a top-level window that is unowned or does not have the <b>WS_POPUP</b> style.</description>
        </item>
        <item>
          <description>The owner window has <b>WS_POPUP</b> style.</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.GetPhysicalCursorPos">
    <summary>Retrieves the position of the cursor in physical coordinates.</summary>
    <param name="lpPoint">The position of the cursor, in physical coordinates.</param>
    <returns>
      <para>
        <b>TRUE</b> if successful; otherwise <b>FALSE</b>.</para>
      <para>
        <see cref="GetLastError" /> can be called to get more information about any error that is generated.</para>
    </returns>
  </member>
  <member name="Windows.GetPointerCursorId">
    <summary>Retrieves the cursor identifier associated with the specified pointer.</summary>
    <param name="pointerId">An identifier of the pointer for which to retrieve the cursor identifier.</param>
    <param name="cursorId">An address of a <b>UINT32</b> to receive the tablet cursor identifier, if any, associated with the specified pointer.</param>
    <returns>
      <para>If the function succeeds, the return value is non-zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetPointerDevice">
    <summary>Gets information about the pointer device.</summary>
    <param name="device">The handle to the device.</param>
    <param name="pointerDevice">A <see cref="POINTER_DEVICE_INFO" /> structure that contains information about the pointer device.</param>
    <returns>
      <para>If this function succeeds, it returns TRUE.</para>
      <para>Otherwise, it returns FALSE. To retrieve extended error information, call the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.GetPointerDeviceCursors">
    <summary>Gets the cursor IDs that are mapped to the cursors associated with a pointer device.</summary>
    <param name="device">The device handle.</param>
    <param name="cursorCount">The number of cursors associated with the pointer device.</param>
    <param name="deviceCursors">An array of <see cref="POINTER_DEVICE_CURSOR_INFO" /> structures that contain info about the cursors. If NULL, <i>cursorCount</i> returns the number of cursors associated with the pointer device.</param>
    <returns>TRUE if the function succeeds; otherwise, FALSE. If the function fails, call the <see cref="GetLastError" /> function for more information.</returns>
  </member>
  <member name="Windows.GetPointerDeviceProperties">
    <summary>Gets device properties that aren't included in the <see cref="POINTER_DEVICE_INFO" /> structure.</summary>
    <param name="device">
      <para>The pointer device to query properties from.</para>
      <para>A call to the <see cref="GetPointerDevices" /> function returns this handle in the <see cref="POINTER_DEVICE_INFO" /> structure.</para>
    </param>
    <param name="propertyCount">
      <para>The number of properties.</para>
      <para>Returns the count that's written or needed if <i>pointerProperties</i> is NULL.</para>
      <para>If this value is less than the number of properties that the pointer device supports and <i>pointerProperties</i> is not NULL, the function returns the actual number of properties in this variable and fails.</para>
    </param>
    <param name="pointerProperties">The array of properties.</param>
    <returns>TRUE if the function succeeds; otherwise, FALSE. If the function fails, call the <see cref="GetLastError" /> function for more information.</returns>
  </member>
  <member name="Windows.GetPointerDeviceRects">
    <summary>Gets the x and y range for the pointer device (in himetric) and the x and y range (current resolution) for the display that the pointer device is mapped to.</summary>
    <param name="device">The handle to the pointer device.</param>
    <param name="pointerDeviceRect">The structure for retrieving the device's physical range data.</param>
    <param name="displayRect">The structure for retrieving the display resolution.</param>
    <returns>TRUE if the function succeeds; otherwise, FALSE. If the function fails, call the <see cref="GetLastError" /> function for more information.</returns>
  </member>
  <member name="Windows.GetPointerDevices">
    <summary>Gets information about the pointer devices attached to the system.</summary>
    <param name="deviceCount">If <i>pointerDevices</i> is NULL, <i>deviceCount</i> returns the total number of attached pointer devices. Otherwise, <i>deviceCount</i> specifies the number of <see cref="POINTER_DEVICE_INFO" /> structures pointed to by <i>pointerDevices</i>.</param>
    <param name="pointerDevices">Array of <see cref="POINTER_DEVICE_INFO" /> structures for the pointer devices attached to the system. If NULL, the total number of attached pointer devices is returned in <i>deviceCount</i>.</param>
    <returns>
      <para>If this function succeeds, it returns TRUE.</para>
      <para>Otherwise, it returns FALSE. To retrieve extended error information, call the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.GetPointerFrameInfo">
    <summary>Gets the entire frame of information for the specified pointers associated with the current message.</summary>
    <param name="pointerId">An identifier of the pointer for which to retrieve frame information.</param>
    <param name="pointerCount">A pointer to a variable that specifies the count of structures in the buffer to which pointerInfo points. If <b>GetPointerFrameInfo</b> succeeds, <i>pointerCount</i> is updated with the total count of pointers in the frame.</param>
    <param name="pointerInfo">Address of an array of <see cref="POINTER_INFO" /> structures to receive the pointer information. This parameter can be <b>NULL</b> if <i>*pointerCount</i> is zero.</param>
    <returns>
      <para>If the function succeeds, the return value is non-zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetPointerFrameInfoHistory">
    <summary>Gets the entire frame of information (including coalesced input frames) for the specified pointers associated with the current message.</summary>
    <param name="pointerId">An identifier of the pointer for which to retrieve frame information.</param>
    <param name="entriesCount">A pointer to a variable that specifies the count of rows in the two-dimensional array to which pointerInfo points. If <b>GetPointerFrameInfoHistory</b> succeeds, <i>entriesCount</i> is updated with the total count of frames available in the history.</param>
    <param name="pointerCount">A pointer to a variable that specifies the count of columns in the two-dimensional array to which pointerInfo points. If <b>GetPointerFrameInfoHistory</b> succeeds, <i>pointerCount</i> is updated with the total count of pointers in each frame.</param>
    <param name="pointerInfo">
      <para>Address of a two-dimensional array of <see cref="POINTER_INFO" /> structures to receive the pointer information. This parameter can be NULL if <i>*entriesCount</i> and <i>*pointerCount</i> are both zero.</para>
      <para>This array is interpreted as <code>POINTER_INFO[*entriesCount][*pointerCount]</code>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is non-zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetPointerFramePenInfo">
    <summary>Gets the entire frame of pen-based information for the specified pointers (of type <see cref="PT_PEN" />) associated with the current message.</summary>
    <param name="pointerId">An identifier of the pointer for which to retrieve frame information.</param>
    <param name="pointerCount">A pointer to a variable that specifies the count of structures in the buffer to which penInfo points. If <b>GetPointerFramePenInfo</b> succeeds, <i>pointerCount</i> is updated with the total count of pointers in the frame.</param>
    <param name="penInfo">Address of an array of <see cref="POINTER_PEN_INFO" /> structures to receive the pointer information. This parameter can be NULL if <i>*pointerCount</i> is zero.</param>
    <returns>
      <para>If the function succeeds, the return value is non-zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetPointerFrameTouchInfo">
    <summary>Gets the entire frame of touch-based information for the specified pointers (of type <see cref="PT_TOUCH" />) associated with the current message.</summary>
    <param name="pointerId">An identifier of the pointer for which to retrieve frame information.</param>
    <param name="pointerCount">A pointer to a variable that specifies the count of structures in the buffer to which touchInfo points. If <b>GetPointerFrameTouchInfo</b> succeeds, <i>pointerCount</i> is updated with the total count of pointers in the frame.</param>
    <param name="touchInfo">Address of an array of <see cref="POINTER_TOUCH_INFO" /> structures to receive the pointer information. This parameter can be NULL if <i>*pointerCount</i> is zero.</param>
    <returns>
      <para>If the function succeeds, the return value is non-zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetPointerFrameTouchInfoHistory">
    <summary>Gets the entire frame of touch-based information (including coalesced input frames) for the specified pointers (of type <see cref="PT_TOUCH" />) associated with the current message.</summary>
    <param name="pointerId">An identifier of the pointer for which to retrieve frame information.</param>
    <param name="entriesCount">A pointer to variable that specifies the count of rows in the two-dimensional array to which touchInfo points. If <b>GetPointerFrameTouchInfoHistory</b> succeeds, <i>entriesCount</i> is updated with the total count of frames available in the history.</param>
    <param name="pointerCount">A pointer to a variable that specifies the count of columns in the two-dimensional array to which touchInfo points. If <b>GetPointerFrameTouchInfoHistory</b> succeeds, <i>pointerCount</i> is updated with the total count of pointers in each frame.</param>
    <param name="touchInfo">
      <para>Address of a two-dimensional array of <see cref="POINTER_TOUCH_INFO" /> structures to receive the pointer information. This parameter can be NULL if <i>*entriesCount</i> and <i>*pointerCount</i> are both zero.</para>
      <para>This array is interpreted as <code>POINTER_TOUCH_INFO[*entriesCount][*pointerCount]</code>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is non-zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetPointerInfo">
    <summary>
      <para>Gets the information for the specified pointer associated with the current message.</para>
      <div>
        <b>Note</b>  Use <see cref="GetPointerType" /> if you don't need the additional information exposed by <b>GetPointerInfo</b>.</div>
    </summary>
    <param name="pointerId">The pointer identifier.</param>
    <param name="pointerInfo">Address of a <see cref="POINTER_INFO" /> structure that receives the pointer information.</param>
    <returns>
      <para>If the function succeeds, the return value is non-zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetPointerInfoHistory">
    <summary>Gets the information associated with the individual inputs, if any, that were coalesced into the current message for the specified pointer. The most recent input is included in the returned history and is the same as the most recent input returned by the <see cref="GetPointerInfo" /> function.</summary>
    <param name="pointerId">An identifier of the pointer for which to retrieve information.</param>
    <param name="entriesCount">A pointer to a variable that specifies the count of structures in the buffer to which pointerInfo points. If <b>GetPointerInfoHistory</b> succeeds, <i>entriesCount</i> is updated with the total count of structures available. The total count of structures available is the same as the <b>historyCount</b> field of the <see cref="POINTER_INFO" /> structure returned by a call to <see cref="GetPointerInfo" />.</param>
    <param name="pointerInfo">Address of an array of <see cref="POINTER_INFO" /> structures to receive the pointer information. This parameter can be NULL if <i>*entriesCount</i> is zero.</param>
    <returns>
      <para>If the function succeeds, the return value is non-zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetPointerInputTransform">
    <summary>Gets one or more transforms for the pointer information coordinates associated with the current message.</summary>
    <param name="pointerId">An identifier of the pointer for which to retrieve information.</param>
    <param name="historyCount">
      <para>The number of <see cref="INPUT_TRANSFORM" /> structures that <i>inputTransform</i> can point to.</para>
      <para>This value must be no less than 1 and no greater than the value specified in <b>historyCount</b> of the <see cref="POINTER_INFO" /> structure returned by <see cref="GetPointerInfo" />, <see cref="GetPointerTouchInfo" />, or <see cref="GetPointerPenInfo" /> (for a single input transform) or <see cref="GetPointerInfoHistory" />, <see cref="GetPointerTouchInfoHistory" />, or <see cref="GetPointerPenInfoHistory" /> (for an array of input transforms).</para>
      <para>If <b>GetPointerInputTransform</b> succeeds, <i>inputTransform</i> is updated with the total count of structures available. The total count of structures available is the same as the <b>historyCount</b> field of the <see cref="POINTER_INFO" /> structure.</para>
    </param>
    <param name="inputTransform">Address of an array of <see cref="INPUT_TRANSFORM" /> structures to receive the transform information. This parameter cannot be NULL.</param>
    <returns>
      <para>If the function succeeds, the return value is non-zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetPointerPenInfo">
    <summary>Gets the pen-based information for the specified pointer (of type <see cref="PT_PEN" />) associated with the current message.</summary>
    <param name="pointerId">An identifier of the pointer for which to retrieve information.</param>
    <param name="penInfo">Address of a <see cref="POINTER_PEN_INFO" /> structure to receive the pen-specific pointer information.</param>
    <returns>
      <para>If the function succeeds, the return value is non-zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetPointerPenInfoHistory">
    <summary>Gets the pen-based information associated with the individual inputs, if any, that were coalesced into the current message for the specified pointer (of type<see cref="PT_PEN" />). The most recent input is included in the returned history and is the same as the most recent input returned by the<see cref="GetPointerPenInfo" /> function.</summary>
    <param name="pointerId">An identifier of the pointer for which to retrieve information.</param>
    <param name="entriesCount">A pointer to a variable that specifies the count of structures in the buffer to which<i>penInfo</i> points. If<b>GetPointerPenInfoHistory</b> succeeds,<i>entriesCount</i> is updated with the total count of structures available. The total count of structures available is the same as the <i>historyCount</i> field in the<see cref="POINTER_PEN_INFO" /> structure returned by a call to <see cref="GetPointerPenInfo" />.</param>
    <param name="penInfo">Address of an array of<see cref="POINTER_PEN_INFO" /> structures to receive the pointer information. This parameter can be NULL if <i>*entriesCount</i> is zero.</param>
    <returns>
      <para>If the function succeeds, the return value is non-zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetPointerTouchInfo">
    <summary>Gets the touch-based information for the specified pointer (of type <see cref="PT_TOUCH" />) associated with the current message.</summary>
    <param name="pointerId">An identifier of the pointer for which to retrieve information.</param>
    <param name="touchInfo">Address of a <see cref="POINTER_TOUCH_INFO" /> structure to receive the touch-specific pointer information.</param>
    <returns>
      <para>If the function succeeds, the return value is non-zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetPointerTouchInfoHistory">
    <summary>Gets the touch-based information associated with the individual inputs, if any, that were coalesced into the current message for the specified pointer (of type <see cref="PT_TOUCH" />). The most recent input is included in the returned history and is the same as the most recent input returned by the <see cref="GetPointerTouchInfo" /> function.</summary>
    <param name="pointerId">An identifier of the pointer for which to retrieve information.</param>
    <param name="entriesCount">A pointer to a variable that specifies the count of structures in the buffer to which touchInfo points. If <b>GetPointerTouchInfoHistory</b> succeeds, <i>entriesCount</i> is updated with the total count of structures available. The total count of structures available is the same as the <i>historyCount</i> field in the <see cref="POINTER_INFO" /> structure returned by a call to <see cref="GetPointerInfo" /> or <see cref="GetPointerTouchInfo" />.</param>
    <param name="touchInfo">Address of an array of <see cref="POINTER_TOUCH_INFO" /> structures to receive the pointer information. This parameter can be NULL if *entriesCount is zero.</param>
    <returns>
      <para>If the function succeeds, the return value is non-zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetPointerType">
    <summary>Retrieves the pointer type for a specified pointer.</summary>
    <param name="pointerId">An identifier of the pointer for which to retrieve pointer type.</param>
    <param name="pointerType">An address of a <see cref="POINTER_INPUT_TYPE" /> type to receive a pointer input type.</param>
    <returns>
      <para>If the function succeeds, the return value is non-zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetPriorityClipboardFormat">
    <summary>Retrieves the first available clipboard format in the specified list.</summary>
    <param name="paFormatPriorityList">The clipboard formats, in priority order. For a description of the standard clipboard formats, see <a href="https://docs.microsoft.com//windows/desktop/dataxchg/standard-clipboard-formats">Standard Clipboard Formats</a> .</param>
    <param name="cFormats">The number of entries in the<i>paFormatPriorityList</i> array. This value must not be greater than the number of entries in the list.</param>
    <returns>If the function succeeds, the return value is the first clipboard format in the list for which data is available. If the clipboard is empty, the return value is NULL. If the clipboard contains data, but not in any of the specified formats, the return value is –1. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.GetProcessDefaultLayout">
    <summary>Retrieves the default layout that is used when windows are created with no parent or owner.</summary>
    <param name="pdwDefaultLayout">The current default process layout. For a list of values, see <see cref="SetProcessDefaultLayout" />.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetProcessWindowStation">
    <summary>Retrieves a handle to the current window station for the calling process.</summary>
    <returns>
      <para>If the function succeeds, the return value is a handle to the window station.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetProp">
    <summary>Retrieves a data handle from the property list of the specified window. The character string identifies the handle to be retrieved. The string and handle must have been added to the property list by a previous call to the <see cref="SetProp" /> function.</summary>
    <param name="hWnd">A handle to the window whose property list is to be searched.</param>
    <param name="lpString">An atom that identifies a string. If this parameter is an atom, it must have been created by using the <see cref="GlobalAddAtom" /> function. The atom, a 16-bit value, must be placed in the low-order word of the <i>lpString</i> parameter; the high-order word must be zero.</param>
    <returns>If the property list contains the string, the return value is the associated data handle. Otherwise, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.GetPropA">
    <summary>Retrieves a data handle from the property list of the specified window. The character string identifies the handle to be retrieved. The string and handle must have been added to the property list by a previous call to the <see cref="SetProp" /> function.</summary>
    <param name="hWnd">A handle to the window whose property list is to be searched.</param>
    <param name="lpString">An atom that identifies a string. If this parameter is an atom, it must have been created by using the <see cref="GlobalAddAtom" /> function. The atom, a 16-bit value, must be placed in the low-order word of the <i>lpString</i> parameter; the high-order word must be zero.</param>
    <returns>If the property list contains the string, the return value is the associated data handle. Otherwise, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.GetPropW">
    <summary>Retrieves a data handle from the property list of the specified window. The character string identifies the handle to be retrieved. The string and handle must have been added to the property list by a previous call to the <see cref="SetProp" /> function.</summary>
    <param name="hWnd">A handle to the window whose property list is to be searched.</param>
    <param name="lpString">An atom that identifies a string. If this parameter is an atom, it must have been created by using the <see cref="GlobalAddAtom" /> function. The atom, a 16-bit value, must be placed in the low-order word of the <i>lpString</i> parameter; the high-order word must be zero.</param>
    <returns>If the property list contains the string, the return value is the associated data handle. Otherwise, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.GetProp">
    <summary>Retrieves a data handle from the property list of the specified window. The character string identifies the handle to be retrieved. The string and handle must have been added to the property list by a previous call to the <see cref="SetProp" /> function.</summary>
    <param name="hWnd">A handle to the window whose property list is to be searched.</param>
    <param name="lpString">An atom that identifies a string. If this parameter is an atom, it must have been created by using the <see cref="GlobalAddAtom" /> function. The atom, a 16-bit value, must be placed in the low-order word of the <i>lpString</i> parameter; the high-order word must be zero.</param>
    <returns>If the property list contains the string, the return value is the associated data handle. Otherwise, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.GetPropA">
    <summary>Retrieves a data handle from the property list of the specified window. The character string identifies the handle to be retrieved. The string and handle must have been added to the property list by a previous call to the <see cref="SetProp" /> function.</summary>
    <param name="hWnd">A handle to the window whose property list is to be searched.</param>
    <param name="lpString">An atom that identifies a string. If this parameter is an atom, it must have been created by using the <see cref="GlobalAddAtom" /> function. The atom, a 16-bit value, must be placed in the low-order word of the <i>lpString</i> parameter; the high-order word must be zero.</param>
    <returns>If the property list contains the string, the return value is the associated data handle. Otherwise, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.GetPropW">
    <summary>Retrieves a data handle from the property list of the specified window. The character string identifies the handle to be retrieved. The string and handle must have been added to the property list by a previous call to the <see cref="SetProp" /> function.</summary>
    <param name="hWnd">A handle to the window whose property list is to be searched.</param>
    <param name="lpString">An atom that identifies a string. If this parameter is an atom, it must have been created by using the <see cref="GlobalAddAtom" /> function. The atom, a 16-bit value, must be placed in the low-order word of the <i>lpString</i> parameter; the high-order word must be zero.</param>
    <returns>If the property list contains the string, the return value is the associated data handle. Otherwise, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.GetRawInputBuffer">
    <summary>Performs a buffered read of the raw input messages data found in the calling thread's message queue.</summary>
    <param name="pData">
      <para>A pointer to a buffer of <see cref="RAWINPUT" /> structures that contain the raw input data. Buffer should be aligned on a pointer boundary, which is a <b>DWORD</b> on 32-bit architectures and a <b>QWORD</b> on 64-bit architectures.</para>
      <para>If <b>NULL</b>, size of the first raw input message data (minimum required buffer), in bytes, is returned in *<i>pcbSize</i>.</para>
    </param>
    <param name="pcbSize">The size, in bytes, of the provided <see cref="RAWINPUT" /> buffer.</param>
    <param name="cbSizeHeader">The size, in bytes, of the <see cref="RAWINPUTHEADER" /> structure.</param>
    <returns>
      <para>If <i>pData</i> is <b>NULL</b> and the function is successful, the return value is zero. If <i>pData</i> is not <b>NULL</b> and the function is successful, the return value is the number of <see cref="RAWINPUT" /> structures written to <i>pData</i>.</para>
      <para>If an error occurs, the return value is (<b>UINT</b>)-1. Call <see cref="GetLastError" /> for the error code.</para>
    </returns>
  </member>
  <member name="Windows.GetRawInputData">
    <summary>Retrieves the raw input from the specified device.</summary>
    <param name="hRawInput">A handle to the <see cref="RAWINPUT" /> structure. This comes from the<i>lParam</i> in <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-input">WM_INPUT</a>.</param>
    <param name="uiCommand">
      <para>The command flag. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RID_HEADER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x10000005</term>
              </listheader>
            </list>
          </description>
          <description>Get the header information from the <see cref="RAWINPUT" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RID_INPUT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x10000003</term>
              </listheader>
            </list>
          </description>
          <description>Get the raw data from the <see cref="RAWINPUT" /> structure.</description>
        </listheader>
      </list>
    </param>
    <param name="pData">A pointer to the data that comes from the <see cref="RAWINPUT" /> structure. This depends on the value of<i>uiCommand</i>. If<i>pData</i> is <b>NULL</b>, the required size of the buffer is returned in *<i>pcbSize</i>.</param>
    <param name="pcbSize">The size, in bytes, of the data in<i>pData</i>.</param>
    <param name="cbSizeHeader">The size, in bytes, of the <see cref="RAWINPUTHEADER" /> structure.</param>
    <returns>
      <para>If<i>pData</i> is <b>NULL</b> and the function is successful, the return value is 0. If<i>pData</i> is not <b>NULL</b> and the function is successful, the return value is the number of bytes copied into pData.</para>
      <para>If there is an error, the return value is (<b>UINT</b>)-1.</para>
    </returns>
  </member>
  <member name="Windows.GetRawInputDeviceInfo">
    <summary>Retrieves information about the raw input device.</summary>
    <param name="hDevice">A handle to the raw input device. This comes from the <b>hDevice</b> member of <see cref="RAWINPUTHEADER" /> or from <see cref="GetRawInputDeviceList" />.</param>
    <param name="uiCommand">
      <para>Specifies what data will be returned in <i>pData</i>. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RIDI_PREPARSEDDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000005</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pData</i> is a <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/hidclass/ni-hidclass-ioctl_hid_get_collection_descriptor">PHIDP_PREPARSED_DATA</a> pointer to a buffer for a <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/top-level-collections">top-level collection's</a><a href="https://docs.microsoft.com//windows-hardware/drivers/hid/preparsed-data">preparsed data</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RIDI_DEVICENAME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000007</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pData</i> points to a string that contains the <a href="https://docs.microsoft.com//windows-hardware/drivers/wdf/using-device-interfaces">device interface name</a>.<para>If this device is <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/hid-architecture#hid-clients-supported-in-windows">opened with Shared Access Mode</a> then you can call <see cref="CreateFile" /> with this name to open a HID collection and use returned handle for calling <see cref="ReadFile" /> to read input reports and <see cref="WriteFile" /> to send output reports.</para><para>For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/opening-hid-collections">Opening HID Collections</a> and <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/handling-hid-reports">Handling HID Reports</a>.</para><para>For this <i>uiCommand</i> only, the value in <i>pcbSize</i> is the character count (not the byte count).</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RIDI_DEVICEINFO</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2000000b</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pData</i> points to an <see cref="RID_DEVICE_INFO" /> structure.</description>
        </listheader>
      </list>
    </param>
    <param name="pData">
      <para>A pointer to a buffer that contains the information specified by <i>uiCommand</i>.</para>
      <para>If <i>uiCommand</i> is <b>RIDI_DEVICEINFO</b>, set the <b>cbSize</b> member of <see cref="RID_DEVICE_INFO" /> to <code>sizeof(RID_DEVICE_INFO)</code> before calling <b>GetRawInputDeviceInfo</b>.</para>
    </param>
    <param name="pcbSize">The size, in bytes, of the data in <i>pData</i>.</param>
    <returns>
      <para>If successful, this function returns a non-negative number indicating the number of bytes copied to <i>pData</i>.</para>
      <para>If <i>pData</i> is not large enough for the data, the function returns -1. If <i>pData</i> is <b>NULL</b>, the function returns a value of zero. In both of these cases, <i>pcbSize</i> is set to the minimum size required for the <i>pData</i> buffer.</para>
      <para>Call <see cref="GetLastError" /> to identify any other errors.</para>
    </returns>
  </member>
  <member name="Windows.GetRawInputDeviceInfoA">
    <summary>Retrieves information about the raw input device.</summary>
    <param name="hDevice">A handle to the raw input device. This comes from the <b>hDevice</b> member of <see cref="RAWINPUTHEADER" /> or from <see cref="GetRawInputDeviceList" />.</param>
    <param name="uiCommand">
      <para>Specifies what data will be returned in <i>pData</i>. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RIDI_PREPARSEDDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000005</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pData</i> is a <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/hidclass/ni-hidclass-ioctl_hid_get_collection_descriptor">PHIDP_PREPARSED_DATA</a> pointer to a buffer for a <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/top-level-collections">top-level collection's</a><a href="https://docs.microsoft.com//windows-hardware/drivers/hid/preparsed-data">preparsed data</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RIDI_DEVICENAME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000007</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pData</i> points to a string that contains the <a href="https://docs.microsoft.com//windows-hardware/drivers/wdf/using-device-interfaces">device interface name</a>.<para>If this device is <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/hid-architecture#hid-clients-supported-in-windows">opened with Shared Access Mode</a> then you can call <see cref="CreateFile" /> with this name to open a HID collection and use returned handle for calling <see cref="ReadFile" /> to read input reports and <see cref="WriteFile" /> to send output reports.</para><para>For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/opening-hid-collections">Opening HID Collections</a> and <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/handling-hid-reports">Handling HID Reports</a>.</para><para>For this <i>uiCommand</i> only, the value in <i>pcbSize</i> is the character count (not the byte count).</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RIDI_DEVICEINFO</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2000000b</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pData</i> points to an <see cref="RID_DEVICE_INFO" /> structure.</description>
        </listheader>
      </list>
    </param>
    <param name="pData">
      <para>A pointer to a buffer that contains the information specified by <i>uiCommand</i>.</para>
      <para>If <i>uiCommand</i> is <b>RIDI_DEVICEINFO</b>, set the <b>cbSize</b> member of <see cref="RID_DEVICE_INFO" /> to <code>sizeof(RID_DEVICE_INFO)</code> before calling <b>GetRawInputDeviceInfo</b>.</para>
    </param>
    <param name="pcbSize">The size, in bytes, of the data in <i>pData</i>.</param>
    <returns>
      <para>If successful, this function returns a non-negative number indicating the number of bytes copied to <i>pData</i>.</para>
      <para>If <i>pData</i> is not large enough for the data, the function returns -1. If <i>pData</i> is <b>NULL</b>, the function returns a value of zero. In both of these cases, <i>pcbSize</i> is set to the minimum size required for the <i>pData</i> buffer.</para>
      <para>Call <see cref="GetLastError" /> to identify any other errors.</para>
    </returns>
  </member>
  <member name="Windows.GetRawInputDeviceInfoW">
    <summary>Retrieves information about the raw input device.</summary>
    <param name="hDevice">A handle to the raw input device. This comes from the <b>hDevice</b> member of <see cref="RAWINPUTHEADER" /> or from <see cref="GetRawInputDeviceList" />.</param>
    <param name="uiCommand">
      <para>Specifies what data will be returned in <i>pData</i>. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RIDI_PREPARSEDDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000005</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pData</i> is a <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/hidclass/ni-hidclass-ioctl_hid_get_collection_descriptor">PHIDP_PREPARSED_DATA</a> pointer to a buffer for a <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/top-level-collections">top-level collection's</a><a href="https://docs.microsoft.com//windows-hardware/drivers/hid/preparsed-data">preparsed data</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RIDI_DEVICENAME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000007</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pData</i> points to a string that contains the <a href="https://docs.microsoft.com//windows-hardware/drivers/wdf/using-device-interfaces">device interface name</a>.<para>If this device is <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/hid-architecture#hid-clients-supported-in-windows">opened with Shared Access Mode</a> then you can call <see cref="CreateFile" /> with this name to open a HID collection and use returned handle for calling <see cref="ReadFile" /> to read input reports and <see cref="WriteFile" /> to send output reports.</para><para>For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/opening-hid-collections">Opening HID Collections</a> and <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/handling-hid-reports">Handling HID Reports</a>.</para><para>For this <i>uiCommand</i> only, the value in <i>pcbSize</i> is the character count (not the byte count).</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RIDI_DEVICEINFO</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2000000b</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pData</i> points to an <see cref="RID_DEVICE_INFO" /> structure.</description>
        </listheader>
      </list>
    </param>
    <param name="pData">
      <para>A pointer to a buffer that contains the information specified by <i>uiCommand</i>.</para>
      <para>If <i>uiCommand</i> is <b>RIDI_DEVICEINFO</b>, set the <b>cbSize</b> member of <see cref="RID_DEVICE_INFO" /> to <code>sizeof(RID_DEVICE_INFO)</code> before calling <b>GetRawInputDeviceInfo</b>.</para>
    </param>
    <param name="pcbSize">The size, in bytes, of the data in <i>pData</i>.</param>
    <returns>
      <para>If successful, this function returns a non-negative number indicating the number of bytes copied to <i>pData</i>.</para>
      <para>If <i>pData</i> is not large enough for the data, the function returns -1. If <i>pData</i> is <b>NULL</b>, the function returns a value of zero. In both of these cases, <i>pcbSize</i> is set to the minimum size required for the <i>pData</i> buffer.</para>
      <para>Call <see cref="GetLastError" /> to identify any other errors.</para>
    </returns>
  </member>
  <member name="Windows.GetRawInputDeviceInfo">
    <summary>Retrieves information about the raw input device.</summary>
    <param name="hDevice">A handle to the raw input device. This comes from the <b>hDevice</b> member of <see cref="RAWINPUTHEADER" /> or from <see cref="GetRawInputDeviceList" />.</param>
    <param name="uiCommand">
      <para>Specifies what data will be returned in <i>pData</i>. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RIDI_PREPARSEDDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000005</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pData</i> is a <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/hidclass/ni-hidclass-ioctl_hid_get_collection_descriptor">PHIDP_PREPARSED_DATA</a> pointer to a buffer for a <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/top-level-collections">top-level collection's</a><a href="https://docs.microsoft.com//windows-hardware/drivers/hid/preparsed-data">preparsed data</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RIDI_DEVICENAME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000007</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pData</i> points to a string that contains the <a href="https://docs.microsoft.com//windows-hardware/drivers/wdf/using-device-interfaces">device interface name</a>.<para>If this device is <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/hid-architecture#hid-clients-supported-in-windows">opened with Shared Access Mode</a> then you can call <see cref="CreateFile" /> with this name to open a HID collection and use returned handle for calling <see cref="ReadFile" /> to read input reports and <see cref="WriteFile" /> to send output reports.</para><para>For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/opening-hid-collections">Opening HID Collections</a> and <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/handling-hid-reports">Handling HID Reports</a>.</para><para>For this <i>uiCommand</i> only, the value in <i>pcbSize</i> is the character count (not the byte count).</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RIDI_DEVICEINFO</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2000000b</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pData</i> points to an <see cref="RID_DEVICE_INFO" /> structure.</description>
        </listheader>
      </list>
    </param>
    <param name="pData">
      <para>A pointer to a buffer that contains the information specified by <i>uiCommand</i>.</para>
      <para>If <i>uiCommand</i> is <b>RIDI_DEVICEINFO</b>, set the <b>cbSize</b> member of <see cref="RID_DEVICE_INFO" /> to <code>sizeof(RID_DEVICE_INFO)</code> before calling <b>GetRawInputDeviceInfo</b>.</para>
    </param>
    <param name="pcbSize">The size, in bytes, of the data in <i>pData</i>.</param>
    <returns>
      <para>If successful, this function returns a non-negative number indicating the number of bytes copied to <i>pData</i>.</para>
      <para>If <i>pData</i> is not large enough for the data, the function returns -1. If <i>pData</i> is <b>NULL</b>, the function returns a value of zero. In both of these cases, <i>pcbSize</i> is set to the minimum size required for the <i>pData</i> buffer.</para>
      <para>Call <see cref="GetLastError" /> to identify any other errors.</para>
    </returns>
  </member>
  <member name="Windows.GetRawInputDeviceInfoA">
    <summary>Retrieves information about the raw input device.</summary>
    <param name="hDevice">A handle to the raw input device. This comes from the <b>hDevice</b> member of <see cref="RAWINPUTHEADER" /> or from <see cref="GetRawInputDeviceList" />.</param>
    <param name="uiCommand">
      <para>Specifies what data will be returned in <i>pData</i>. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RIDI_PREPARSEDDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000005</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pData</i> is a <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/hidclass/ni-hidclass-ioctl_hid_get_collection_descriptor">PHIDP_PREPARSED_DATA</a> pointer to a buffer for a <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/top-level-collections">top-level collection's</a><a href="https://docs.microsoft.com//windows-hardware/drivers/hid/preparsed-data">preparsed data</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RIDI_DEVICENAME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000007</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pData</i> points to a string that contains the <a href="https://docs.microsoft.com//windows-hardware/drivers/wdf/using-device-interfaces">device interface name</a>.<para>If this device is <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/hid-architecture#hid-clients-supported-in-windows">opened with Shared Access Mode</a> then you can call <see cref="CreateFile" /> with this name to open a HID collection and use returned handle for calling <see cref="ReadFile" /> to read input reports and <see cref="WriteFile" /> to send output reports.</para><para>For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/opening-hid-collections">Opening HID Collections</a> and <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/handling-hid-reports">Handling HID Reports</a>.</para><para>For this <i>uiCommand</i> only, the value in <i>pcbSize</i> is the character count (not the byte count).</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RIDI_DEVICEINFO</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2000000b</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pData</i> points to an <see cref="RID_DEVICE_INFO" /> structure.</description>
        </listheader>
      </list>
    </param>
    <param name="pData">
      <para>A pointer to a buffer that contains the information specified by <i>uiCommand</i>.</para>
      <para>If <i>uiCommand</i> is <b>RIDI_DEVICEINFO</b>, set the <b>cbSize</b> member of <see cref="RID_DEVICE_INFO" /> to <code>sizeof(RID_DEVICE_INFO)</code> before calling <b>GetRawInputDeviceInfo</b>.</para>
    </param>
    <param name="pcbSize">The size, in bytes, of the data in <i>pData</i>.</param>
    <returns>
      <para>If successful, this function returns a non-negative number indicating the number of bytes copied to <i>pData</i>.</para>
      <para>If <i>pData</i> is not large enough for the data, the function returns -1. If <i>pData</i> is <b>NULL</b>, the function returns a value of zero. In both of these cases, <i>pcbSize</i> is set to the minimum size required for the <i>pData</i> buffer.</para>
      <para>Call <see cref="GetLastError" /> to identify any other errors.</para>
    </returns>
  </member>
  <member name="Windows.GetRawInputDeviceInfoW">
    <summary>Retrieves information about the raw input device.</summary>
    <param name="hDevice">A handle to the raw input device. This comes from the <b>hDevice</b> member of <see cref="RAWINPUTHEADER" /> or from <see cref="GetRawInputDeviceList" />.</param>
    <param name="uiCommand">
      <para>Specifies what data will be returned in <i>pData</i>. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RIDI_PREPARSEDDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000005</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pData</i> is a <a href="https://docs.microsoft.com//windows-hardware/drivers/ddi/hidclass/ni-hidclass-ioctl_hid_get_collection_descriptor">PHIDP_PREPARSED_DATA</a> pointer to a buffer for a <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/top-level-collections">top-level collection's</a><a href="https://docs.microsoft.com//windows-hardware/drivers/hid/preparsed-data">preparsed data</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RIDI_DEVICENAME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x20000007</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pData</i> points to a string that contains the <a href="https://docs.microsoft.com//windows-hardware/drivers/wdf/using-device-interfaces">device interface name</a>.<para>If this device is <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/hid-architecture#hid-clients-supported-in-windows">opened with Shared Access Mode</a> then you can call <see cref="CreateFile" /> with this name to open a HID collection and use returned handle for calling <see cref="ReadFile" /> to read input reports and <see cref="WriteFile" /> to send output reports.</para><para>For more information, see <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/opening-hid-collections">Opening HID Collections</a> and <a href="https://docs.microsoft.com//windows-hardware/drivers/hid/handling-hid-reports">Handling HID Reports</a>.</para><para>For this <i>uiCommand</i> only, the value in <i>pcbSize</i> is the character count (not the byte count).</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RIDI_DEVICEINFO</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2000000b</term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pData</i> points to an <see cref="RID_DEVICE_INFO" /> structure.</description>
        </listheader>
      </list>
    </param>
    <param name="pData">
      <para>A pointer to a buffer that contains the information specified by <i>uiCommand</i>.</para>
      <para>If <i>uiCommand</i> is <b>RIDI_DEVICEINFO</b>, set the <b>cbSize</b> member of <see cref="RID_DEVICE_INFO" /> to <code>sizeof(RID_DEVICE_INFO)</code> before calling <b>GetRawInputDeviceInfo</b>.</para>
    </param>
    <param name="pcbSize">The size, in bytes, of the data in <i>pData</i>.</param>
    <returns>
      <para>If successful, this function returns a non-negative number indicating the number of bytes copied to <i>pData</i>.</para>
      <para>If <i>pData</i> is not large enough for the data, the function returns -1. If <i>pData</i> is <b>NULL</b>, the function returns a value of zero. In both of these cases, <i>pcbSize</i> is set to the minimum size required for the <i>pData</i> buffer.</para>
      <para>Call <see cref="GetLastError" /> to identify any other errors.</para>
    </returns>
  </member>
  <member name="Windows.GetRawInputDeviceList">
    <summary>Enumerates the raw input devices attached to the system.</summary>
    <param name="pRawInputDeviceList">An array of <see cref="RAWINPUTDEVICELIST" /> structures for the devices attached to the system. If <b>NULL</b>, the number of devices are returned in *<i>puiNumDevices</i>.</param>
    <param name="puiNumDevices">If <i>pRawInputDeviceList</i> is <b>NULL</b>, the function populates this variable with the number of devices attached to the system; otherwise, this variable specifies the number of <see cref="RAWINPUTDEVICELIST" /> structures that can be contained in the buffer to which <i>pRawInputDeviceList</i> points. If this value is less than the number of devices attached to the system, the function returns the actual number of devices in this variable and fails with <b>ERROR_INSUFFICIENT_BUFFER</b>. If this value is greater than or equal to the number of devices attached to the system, then the value is unchanged, and the number of devices is reported as the return value.</param>
    <param name="cbSize">The size of a <see cref="RAWINPUTDEVICELIST" /> structure, in bytes.</param>
    <returns>
      <para>If the function is successful, the return value is the number of devices stored in the buffer pointed to by<i>pRawInputDeviceList</i>.</para>
      <para>On any other error, the function returns (<b>UINT</b>) -1 and<see cref="GetLastError" /> returns the error indication.</para>
    </returns>
  </member>
  <member name="Windows.GetRawPointerDeviceData">
    <summary>Gets the raw input data from the pointer device.</summary>
    <param name="pointerId">An identifier of the pointer for which to retrieve information.</param>
    <param name="historyCount">The pointer history.</param>
    <param name="propertiesCount">Number of properties to retrieve.</param>
    <param name="pProperties">Array of <see cref="POINTER_DEVICE_PROPERTY" /> structures that contain raw data reported by the device.</param>
    <param name="pValues">The values for <i>pProperties</i>.</param>
    <returns>TRUE if the function succeeds; otherwise, FALSE. If the function fails, call the <see cref="GetLastError" /> function for more information.</returns>
  </member>
  <member name="Windows.GetRegisteredRawInputDevices">
    <summary>Retrieves the information about the raw input devices for the current application.</summary>
    <param name="pRawInputDevices">An array of <see cref="RAWINPUTDEVICE" /> structures for the application.</param>
    <param name="puiNumDevices">The number of <see cref="RAWINPUTDEVICE" /> structures in *<i>pRawInputDevices</i>.</param>
    <param name="cbSize">The size, in bytes, of a <see cref="RAWINPUTDEVICE" /> structure.</param>
    <returns>
      <para>If successful, the function returns a non-negative number that is the number of <see cref="RAWINPUTDEVICE" /> structures written to the buffer.</para>
      <para>If the <i>pRawInputDevices</i> buffer is too small or <b>NULL</b>, the function sets the last error as <b>ERROR_INSUFFICIENT_BUFFER</b>, returns -1, and sets <i>puiNumDevices</i> to the required number of devices. If the function fails for any other reason, it returns -1. For more details, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetScrollBarInfo">
    <summary>The <b>GetScrollBarInfo</b> function retrieves information about the specified scroll bar.</summary>
    <param name="hwnd">Handle to a window associated with the scroll bar whose information is to be retrieved. If the<i>idObject</i> parameter is OBJID_CLIENT,<i>hwnd</i> is a handle to a scroll bar control. Otherwise,<i>hwnd</i> is a handle to a window created with <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_VSCROLL</a> and/or <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">WS_HSCROLL</a> style.</param>
    <param name="idObject">
      <para>Specifies the scroll bar object. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OBJID_CLIENT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The 						<i>hwnd</i> parameter is a handle to a scroll bar control.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OBJID_HSCROLL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The horizontal scroll bar of the 						<i>hwnd</i> window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OBJID_VSCROLL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The vertical scroll bar of the 						<i>hwnd</i> window.</description>
        </listheader>
      </list>
    </param>
    <param name="psbi">Pointer to a <see cref="SCROLLBARINFO" /> structure to receive the information. Before calling <b>GetScrollBarInfo</b>, set the<b>cbSize</b> member to<b>sizeof</b>(<b>SCROLLBARINFO</b>).</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetScrollInfo">
    <summary>The <b>GetScrollInfo</b> function retrieves the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb).</summary>
    <param name="hwnd">Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the<i>fnBar</i> parameter.</param>
    <param name="nBar">
      <para>Specifies the type of scroll bar for which to retrieve parameters. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_CTL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the parameters for a scroll bar control. The 						<i>hwnd</i> parameter must be the handle to the scroll bar control.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_HORZ</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the parameters for the window's standard horizontal scroll bar.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_VERT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the parameters for the window's standard vertical scroll bar.</description>
        </listheader>
      </list>
    </param>
    <param name="lpsi">
      <para>Pointer to a <see cref="SCROLLINFO" /> structure. Before calling <b>GetScrollInfo</b>, set the<b>cbSize</b> member to<b>sizeof</b>(<b>SCROLLINFO</b>), and set the<b>fMask</b> member to specify the scroll bar parameters to retrieve. Before returning, the function copies the specified parameters to the appropriate members of the structure.</para>
      <para>The<b>fMask</b> member can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SIF_PAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Copies the scroll page to the 						<b>nPage</b> member of the <see cref="SCROLLINFO" /> structure pointed to by 						<i>lpsi</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SIF_POS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Copies the scroll position to the 						<b>nPos</b> member of the <see cref="SCROLLINFO" /> structure pointed to by 						<i>lpsi</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SIF_RANGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Copies the scroll range to the 						<b>nMin</b> and 						<b>nMax</b> members of the <see cref="SCROLLINFO" /> structure pointed to by 						<i>lpsi</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SIF_TRACKPOS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Copies the current scroll box tracking position to the 						<b>nTrackPos</b> member of the <see cref="SCROLLINFO" /> structure pointed to by 						<i>lpsi</i>.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function retrieved any values, the return value is nonzero.</para>
      <para>If the function does not retrieve any values, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetScrollPos">
    <summary>
      <para>The <b>GetScrollPos</b> function retrieves the current position of the scroll box (thumb) in the specified scroll bar. The current position is a relative value that depends on the current scrolling range. For example, if the scrolling range is 0 through 100 and the scroll box is in the middle of the bar, the current position is 50.</para>
      <div>
        <b>Note</b>   The <b>GetScrollPos</b> function is provided for backward compatibility. New applications should use the <see cref="GetScrollInfo" /> function.</div>
    </summary>
    <param name="hWnd">Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the<i>nBar</i> parameter.</param>
    <param name="nBar">
      <para>Specifies the scroll bar to be examined. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_CTL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the position of the scroll box in a scroll bar control. The 						<i>hWnd</i> parameter must be the handle to the scroll bar control.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_HORZ</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the position of the scroll box in a window's standard horizontal scroll bar.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_VERT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the position of the scroll box in a window's standard vertical scroll bar.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the current position of the scroll box.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetScrollRange">
    <summary>
      <para>The <b>GetScrollRange</b> function retrieves the current minimum and maximum scroll box (thumb) positions for the specified scroll bar.</para>
      <div>
        <b>Note</b>  The <b>GetScrollRange</b> function is provided for compatibility only. New applications should use the <see cref="GetScrollInfo" /> function.</div>
    </summary>
    <param name="hWnd">Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the<i>nBar</i> parameter.</param>
    <param name="nBar">
      <para>Specifies the scroll bar from which the positions are retrieved. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_CTL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the positions of a scroll bar control. The 						<i>hWnd</i> parameter must be the handle to the scroll bar control.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_HORZ</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the positions of the window's standard horizontal scroll bar.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_VERT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the positions of the window's standard vertical scroll bar.</description>
        </listheader>
      </list>
    </param>
    <param name="lpMinPos">Pointer to the integer variable that receives the minimum position.</param>
    <param name="lpMaxPos">Pointer to the integer variable that receives the maximum position.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetShellWindow">
    <summary>Retrieves a handle to the Shell's desktop window.</summary>
    <returns>The return value is the handle of the Shell's desktop window. If no Shell process is present, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.GetSubMenu">
    <summary>Retrieves a handle to the drop-down menu or submenu activated by the specified menu item.</summary>
    <param name="hMenu">A handle to the menu.</param>
    <param name="nPos">The zero-based relative position in the specified menu of an item that activates a drop-down menu or submenu.</param>
    <returns>If the function succeeds, the return value is a handle to the drop-down menu or submenu activated by the menu item. If the menu item does not activate a drop-down menu or submenu, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.GetSysColorBrush">
    <summary>The <b>GetSysColorBrush</b> function retrieves a handle identifying a logical brush that corresponds to the specified color index.</summary>
    <param name="nIndex">A color index. This value corresponds to the color used to paint one of the window elements. See <see cref="GetSysColor" /> for system color index values.</param>
    <returns>The return value identifies a logical brush if the <i>nIndex</i> parameter is supported by the current platform. Otherwise, it returns <b>NULL</b>.</returns>
  </member>
  <member name="Windows.GetSystemDpiForProcess">
    <summary>Retrieves the system DPI associated with a given process. This is useful for avoiding compatibility issues that arise from sharing DPI-sensitive information between multiple system-aware processes with different system DPI values.</summary>
    <param name="hProcess">The handle for the process to examine. If this value is null, this API behaves identically to <see cref="GetDpiForSystem" />.</param>
    <returns>The process's system DPI value.</returns>
  </member>
  <member name="Windows.GetSystemMenu">
    <summary>Enables the application to access the window menu (also known as the system menu or the control menu) for copying and modifying.</summary>
    <param name="hWnd">A handle to the window that will own a copy of the window menu.</param>
    <param name="bRevert">The action to be taken. If this parameter is <b>FALSE</b>, <b>GetSystemMenu</b> returns a handle to the copy of the window menu currently in use. The copy is initially identical to the window menu, but it can be modified. If this parameter is <b>TRUE</b>, <b>GetSystemMenu</b> resets the window menu back to the default state. The previous window menu, if any, is destroyed.</param>
    <returns>If the <i>bRevert</i> parameter is <b>FALSE</b>, the return value is a handle to a copy of the window menu. If the <i>bRevert</i> parameter is <b>TRUE</b>, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.GetSystemMetrics">
    <summary>
      <para>Retrieves the specified system metric or system configuration setting.</para>
      <para>Note that all dimensions retrieved by <b>GetSystemMetrics</b> are in pixels.</para>
    </summary>
    <param name="nIndex">
      <para>The system metric or configuration setting to be retrieved. This parameter can be one of the following values. Note that all SM_CX* values are widths and all SM_CY* values are heights. Also note that all settings designed to return Boolean data represent <b>TRUE</b> as any nonzero value, and <b>FALSE</b> as a zero value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_ARRANGE</b>
                </term>
              </listheader>
              <listheader>
                <term>56</term>
              </listheader>
            </list>
          </description>
          <description>The flags that specify how the system arranged minimized windows. For more information, see the Remarks section in this topic.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CLEANBOOT</b>
                </term>
              </listheader>
              <listheader>
                <term>67</term>
              </listheader>
            </list>
          </description>
          <description>The value that specifies how the system is started: <list type="bullet"><item><description>0 Normal boot</description></item><item><description>1 Fail-safe boot</description></item><item><description>2 Fail-safe with network boot</description></item></list>A fail-safe boot (also called SafeBoot, Safe Mode, or Clean Boot) bypasses the user startup files.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CMONITORS</b>
                </term>
              </listheader>
              <listheader>
                <term>80</term>
              </listheader>
            </list>
          </description>
          <description>The number of display monitors on a desktop. For more information, see the Remarks section in this topic.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CMOUSEBUTTONS</b>
                </term>
              </listheader>
              <listheader>
                <term>43</term>
              </listheader>
            </list>
          </description>
          <description>The number of buttons on a mouse, or zero if no mouse is installed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CONVERTIBLESLATEMODE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2003</term>
              </listheader>
            </list>
          </description>
          <description>Reflects the state of the laptop or slate mode, 0 for Slate Mode and non-zero otherwise. When this system metric changes, the system sends a broadcast message via <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-settingchange">WM_SETTINGCHANGE</a> with "ConvertibleSlateMode" in the LPARAM. Note that this system metric doesn't apply to desktop PCs. In that case, use <see cref="GetAutoRotationState" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXBORDER</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The width of a window border, in pixels. This is equivalent to the SM_CXEDGE value for windows with the 3-D look.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>13</term>
              </listheader>
            </list>
          </description>
          <description>The nominal width of a cursor, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXDLGFRAME</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>This value is the same as SM_CXFIXEDFRAME.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXDOUBLECLK</b>
                </term>
              </listheader>
              <listheader>
                <term>36</term>
              </listheader>
            </list>
          </description>
          <description>The width of the rectangle around the location of a first click in a double-click sequence, in pixels. The second click must occur within the rectangle that is defined by SM_CXDOUBLECLK and SM_CYDOUBLECLK for the system to consider the two clicks a double-click. The two clicks must also occur within a specified time. <para>To set the width of the double-click rectangle, call<see cref="SystemParametersInfo" /> with SPI_SETDOUBLECLKWIDTH.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXDRAG</b>
                </term>
              </listheader>
              <listheader>
                <term>68</term>
              </listheader>
            </list>
          </description>
          <description>The number of pixels on either side of a mouse-down point that the mouse pointer can move before a drag operation begins. This allows the user to click and release the mouse button easily without unintentionally starting a drag operation. If this value is negative, it is subtracted from the left of the mouse-down point and added to the right of it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXEDGE</b>
                </term>
              </listheader>
              <listheader>
                <term>45</term>
              </listheader>
            </list>
          </description>
          <description>The width of a 3-D border, in pixels. This metric is the 3-D counterpart of SM_CXBORDER.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXFIXEDFRAME</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels. SM_CXFIXEDFRAME is the height of the horizontal border, and SM_CYFIXEDFRAME is the width of the vertical border. <para>This value is the same as SM_CXDLGFRAME.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXFOCUSBORDER</b>
                </term>
              </listheader>
              <listheader>
                <term>83</term>
              </listheader>
            </list>
          </description>
          <description>The width of the left and right edges of the focus rectangle that the <see cref="DrawFocusRect" /> draws. This value is in pixels. <para><b>Windows 2000:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXFRAME</b>
                </term>
              </listheader>
              <listheader>
                <term>32</term>
              </listheader>
            </list>
          </description>
          <description>This value is the same as SM_CXSIZEFRAME.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXFULLSCREEN</b>
                </term>
              </listheader>
              <listheader>
                <term>16</term>
              </listheader>
            </list>
          </description>
          <description>The width of the client area for a full-screen window on the primary display monitor, in pixels. To get the coordinates of the portion of the screen that is not obscured by the system taskbar or by application desktop toolbars, call the <see cref="SystemParametersInfo" /> function with the SPI_GETWORKAREA value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXHSCROLL</b>
                </term>
              </listheader>
              <listheader>
                <term>21</term>
              </listheader>
            </list>
          </description>
          <description>The width of the arrow bitmap on a horizontal scroll bar, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXHTHUMB</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The width of the thumb box in a horizontal scroll bar, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXICON</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The system large width of an icon, in pixels. The <see cref="LoadIcon" /> function can load only icons with the dimensions that SM_CXICON and SM_CYICON specifies. See <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons#icon-sizes">Icon Sizes</a> for more info.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXICONSPACING</b>
                </term>
              </listheader>
              <listheader>
                <term>38</term>
              </listheader>
            </list>
          </description>
          <description>The width of a grid cell for items in large icon view, in pixels. Each item fits into a rectangle of size SM_CXICONSPACING by SM_CYICONSPACING when arranged. This value is always greater than or equal to SM_CXICON.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXMAXIMIZED</b>
                </term>
              </listheader>
              <listheader>
                <term>61</term>
              </listheader>
            </list>
          </description>
          <description>The default width, in pixels, of a maximized top-level window on the primary display monitor.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXMAXTRACK</b>
                </term>
              </listheader>
              <listheader>
                <term>59</term>
              </listheader>
            </list>
          </description>
          <description>The default maximum width of a window that has a caption and sizing borders, in pixels. This metric refers to the entire desktop. The user cannot drag the window frame to a size larger than these dimensions. A window can override this value by processing the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-getminmaxinfo">WM_GETMINMAXINFO</a> message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXMENUCHECK</b>
                </term>
              </listheader>
              <listheader>
                <term>71</term>
              </listheader>
            </list>
          </description>
          <description>The width of the default menu check-mark bitmap, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXMENUSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>54</term>
              </listheader>
            </list>
          </description>
          <description>The width of menu bar buttons, such as the child window close button that is used in the multiple document interface, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXMIN</b>
                </term>
              </listheader>
              <listheader>
                <term>28</term>
              </listheader>
            </list>
          </description>
          <description>The minimum width of a window, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXMINIMIZED</b>
                </term>
              </listheader>
              <listheader>
                <term>57</term>
              </listheader>
            </list>
          </description>
          <description>The width of a minimized window, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXMINSPACING</b>
                </term>
              </listheader>
              <listheader>
                <term>47</term>
              </listheader>
            </list>
          </description>
          <description>The width of a grid cell for a minimized window, in pixels. Each minimized window fits into a rectangle this size when arranged. This value is always greater than or equal to SM_CXMINIMIZED.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXMINTRACK</b>
                </term>
              </listheader>
              <listheader>
                <term>34</term>
              </listheader>
            </list>
          </description>
          <description>The minimum tracking width of a window, in pixels. The user cannot drag the window frame to a size smaller than these dimensions. A window can override this value by processing the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-getminmaxinfo">WM_GETMINMAXINFO</a> message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXPADDEDBORDER</b>
                </term>
              </listheader>
              <listheader>
                <term>92</term>
              </listheader>
            </list>
          </description>
          <description>The amount of border padding for captioned windows, in pixels.<para><b>Windows XP/2000:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXSCREEN</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The width of the screen of the primary display monitor, in pixels. This is the same value obtained by calling <see cref="GetDeviceCaps" /> as follows: <code>GetDeviceCaps( hdcPrimaryMonitor, HORZRES)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>30</term>
              </listheader>
            </list>
          </description>
          <description>The width of a button in a window caption or title bar, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXSIZEFRAME</b>
                </term>
              </listheader>
              <listheader>
                <term>32</term>
              </listheader>
            </list>
          </description>
          <description>The thickness of the sizing border around the perimeter of a window that can be resized, in pixels. SM_CXSIZEFRAME is the width of the horizontal border, and SM_CYSIZEFRAME is the height of the vertical border. <para>This value is the same as SM_CXFRAME.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXSMICON</b>
                </term>
              </listheader>
              <listheader>
                <term>49</term>
              </listheader>
            </list>
          </description>
          <description>The system small width of an icon, in pixels. Small icons typically appear in window captions and in small icon view. See <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons#icon-sizes">Icon Sizes</a> for more info.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXSMSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>52</term>
              </listheader>
            </list>
          </description>
          <description>The width of small caption buttons, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXVIRTUALSCREEN</b>
                </term>
              </listheader>
              <listheader>
                <term>78</term>
              </listheader>
            </list>
          </description>
          <description>The width of the <a href="https://docs.microsoft.com//windows/win32/gdi/the-virtual-screen">virtual screen</a>, in pixels. The virtual screen is the bounding rectangle of all display monitors. The SM_XVIRTUALSCREEN metric is the coordinates for the left side of the virtual screen.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CXVSCROLL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The width of a vertical scroll bar, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYBORDER</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The height of a window border, in pixels. This is equivalent to the SM_CYEDGE value for windows with the 3-D look.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYCAPTION</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The height of a caption area, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>14</term>
              </listheader>
            </list>
          </description>
          <description>The nominal height of a cursor, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYDLGFRAME</b>
                </term>
              </listheader>
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>This value is the same as SM_CYFIXEDFRAME.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYDOUBLECLK</b>
                </term>
              </listheader>
              <listheader>
                <term>37</term>
              </listheader>
            </list>
          </description>
          <description>The height of the rectangle around the location of a first click in a double-click sequence, in pixels. The second click must occur within the rectangle defined by SM_CXDOUBLECLK and SM_CYDOUBLECLK for the system to consider the two clicks a double-click. The two clicks must also occur within a specified time. <para>To set the height of the double-click rectangle, call<see cref="SystemParametersInfo" /> with SPI_SETDOUBLECLKHEIGHT.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYDRAG</b>
                </term>
              </listheader>
              <listheader>
                <term>69</term>
              </listheader>
            </list>
          </description>
          <description>The number of pixels above and below a mouse-down point that the mouse pointer can move before a drag operation begins. This allows the user to click and release the mouse button easily without unintentionally starting a drag operation. If this value is negative, it is subtracted from above the mouse-down point and added below it.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYEDGE</b>
                </term>
              </listheader>
              <listheader>
                <term>46</term>
              </listheader>
            </list>
          </description>
          <description>The height of a 3-D border, in pixels. This is the 3-D counterpart of SM_CYBORDER.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYFIXEDFRAME</b>
                </term>
              </listheader>
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>The thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels. SM_CXFIXEDFRAME is the height of the horizontal border, and SM_CYFIXEDFRAME is the width of the vertical border.<para>This value is the same as SM_CYDLGFRAME.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYFOCUSBORDER</b>
                </term>
              </listheader>
              <listheader>
                <term>84</term>
              </listheader>
            </list>
          </description>
          <description>The height of the top and bottom edges of the focus rectangle drawn by <see cref="DrawFocusRect" />. This value is in pixels.<para><b>Windows 2000:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYFRAME</b>
                </term>
              </listheader>
              <listheader>
                <term>33</term>
              </listheader>
            </list>
          </description>
          <description>This value is the same as SM_CYSIZEFRAME.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYFULLSCREEN</b>
                </term>
              </listheader>
              <listheader>
                <term>17</term>
              </listheader>
            </list>
          </description>
          <description>The height of the client area for a full-screen window on the primary display monitor, in pixels. To get the coordinates of the portion of the screen not obscured by the system taskbar or by application desktop toolbars, call the <see cref="SystemParametersInfo" /> function with the SPI_GETWORKAREA value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYHSCROLL</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The height of a horizontal scroll bar, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYICON</b>
                </term>
              </listheader>
              <listheader>
                <term>12</term>
              </listheader>
            </list>
          </description>
          <description>The system large height of an icon, in pixels. The <see cref="LoadIcon" /> function can load only icons with the dimensions that SM_CXICON and SM_CYICON specifies. See <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons#icon-sizes">Icon Sizes</a> for more info.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYICONSPACING</b>
                </term>
              </listheader>
              <listheader>
                <term>39</term>
              </listheader>
            </list>
          </description>
          <description>The height of a grid cell for items in large icon view, in pixels. Each item fits into a rectangle of size SM_CXICONSPACING by SM_CYICONSPACING when arranged. This value is always greater than or equal to SM_CYICON.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYKANJIWINDOW</b>
                </term>
              </listheader>
              <listheader>
                <term>18</term>
              </listheader>
            </list>
          </description>
          <description>For double byte character set versions of the system, this is the height of the Kanji window at the bottom of the screen, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYMAXIMIZED</b>
                </term>
              </listheader>
              <listheader>
                <term>62</term>
              </listheader>
            </list>
          </description>
          <description>The default height, in pixels, of a maximized top-level window on the primary display monitor.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYMAXTRACK</b>
                </term>
              </listheader>
              <listheader>
                <term>60</term>
              </listheader>
            </list>
          </description>
          <description>The default maximum height of a window that has a caption and sizing borders, in pixels. This metric refers to the entire desktop. The user cannot drag the window frame to a size larger than these dimensions. A window can override this value by processing the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-getminmaxinfo">WM_GETMINMAXINFO</a> message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYMENU</b>
                </term>
              </listheader>
              <listheader>
                <term>15</term>
              </listheader>
            </list>
          </description>
          <description>The height of a single-line menu bar, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYMENUCHECK</b>
                </term>
              </listheader>
              <listheader>
                <term>72</term>
              </listheader>
            </list>
          </description>
          <description>The height of the default menu check-mark bitmap, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYMENUSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>55</term>
              </listheader>
            </list>
          </description>
          <description>The height of menu bar buttons, such as the child window close button that is used in the multiple document interface, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYMIN</b>
                </term>
              </listheader>
              <listheader>
                <term>29</term>
              </listheader>
            </list>
          </description>
          <description>The minimum height of a window, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYMINIMIZED</b>
                </term>
              </listheader>
              <listheader>
                <term>58</term>
              </listheader>
            </list>
          </description>
          <description>The height of a minimized window, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYMINSPACING</b>
                </term>
              </listheader>
              <listheader>
                <term>48</term>
              </listheader>
            </list>
          </description>
          <description>The height of a grid cell for a minimized window, in pixels. Each minimized window fits into a rectangle this size when arranged. This value is always greater than or equal to SM_CYMINIMIZED.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYMINTRACK</b>
                </term>
              </listheader>
              <listheader>
                <term>35</term>
              </listheader>
            </list>
          </description>
          <description>The minimum tracking height of a window, in pixels. The user cannot drag the window frame to a size smaller than these dimensions. A window can override this value by processing the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-getminmaxinfo">WM_GETMINMAXINFO</a> message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYSCREEN</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The height of the screen of the primary display monitor, in pixels. This is the same value obtained by calling <see cref="GetDeviceCaps" /> as follows: <code>GetDeviceCaps( hdcPrimaryMonitor, VERTRES)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>31</term>
              </listheader>
            </list>
          </description>
          <description>The height of a button in a window caption or title bar, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYSIZEFRAME</b>
                </term>
              </listheader>
              <listheader>
                <term>33</term>
              </listheader>
            </list>
          </description>
          <description>The thickness of the sizing border around the perimeter of a window that can be resized, in pixels. SM_CXSIZEFRAME is the width of the horizontal border, and SM_CYSIZEFRAME is the height of the vertical border. <para>This value is the same as SM_CYFRAME.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYSMCAPTION</b>
                </term>
              </listheader>
              <listheader>
                <term>51</term>
              </listheader>
            </list>
          </description>
          <description>The height of a small caption, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYSMICON</b>
                </term>
              </listheader>
              <listheader>
                <term>50</term>
              </listheader>
            </list>
          </description>
          <description>The system small height of an icon, in pixels. Small icons typically appear in window captions and in small icon view. See <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons#icon-sizes">Icon Sizes</a> for more info.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYSMSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>53</term>
              </listheader>
            </list>
          </description>
          <description>The height of small caption buttons, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYVIRTUALSCREEN</b>
                </term>
              </listheader>
              <listheader>
                <term>79</term>
              </listheader>
            </list>
          </description>
          <description>The height of the <a href="https://docs.microsoft.com//windows/win32/gdi/the-virtual-screen">virtual screen</a>, in pixels. The virtual screen is the bounding rectangle of all display monitors. The SM_YVIRTUALSCREEN metric is the coordinates for the top of the virtual screen.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYVSCROLL</b>
                </term>
              </listheader>
              <listheader>
                <term>20</term>
              </listheader>
            </list>
          </description>
          <description>The height of the arrow bitmap on a vertical scroll bar, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_CYVTHUMB</b>
                </term>
              </listheader>
              <listheader>
                <term>9</term>
              </listheader>
            </list>
          </description>
          <description>The height of the thumb box in a vertical scroll bar, in pixels.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_DBCSENABLED</b>
                </term>
              </listheader>
              <listheader>
                <term>42</term>
              </listheader>
            </list>
          </description>
          <description>Nonzero if User32.dll supports DBCS; otherwise, 0.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_DEBUG</b>
                </term>
              </listheader>
              <listheader>
                <term>22</term>
              </listheader>
            </list>
          </description>
          <description>Nonzero if the debug version of User.exe is installed; otherwise, 0.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_DIGITIZER</b>
                </term>
              </listheader>
              <listheader>
                <term>94</term>
              </listheader>
            </list>
          </description>
          <description>Nonzero if the current operating system is Windows 7 or Windows Server 2008 R2 and the Tablet PC Input service is started; otherwise, 0. The return value is a bitmask that specifies the type of digitizer input supported by the device. For more information, see Remarks.<para><b>Windows Server 2008, Windows Vista and Windows XP/2000:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_IMMENABLED</b>
                </term>
              </listheader>
              <listheader>
                <term>82</term>
              </listheader>
            </list>
          </description>
          <description>Nonzero if Input Method Manager/Input Method Editor features are enabled; otherwise, 0.<para>SM_IMMENABLED indicates whether the system is ready to use a Unicode-based IME on a Unicode application. To ensure that a language-dependent IME works, check SM_DBCSENABLED and the system ANSI code page. Otherwise the ANSI-to-Unicode conversion may not be performed correctly, or some components like fonts or registry settings may not be present.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_MAXIMUMTOUCHES</b>
                </term>
              </listheader>
              <listheader>
                <term>95</term>
              </listheader>
            </list>
          </description>
          <description>Nonzero if there are digitizers in the system; otherwise, 0. <para>SM_MAXIMUMTOUCHES returns the aggregate maximum of the maximum number of contacts supported by every digitizer in the system. If the system has only single-touch digitizers, the return value is 1. If the system has multi-touch digitizers, the return value is the number of simultaneous contacts the hardware can provide.</para><para><b>Windows Server 2008, Windows Vista and Windows XP/2000:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_MEDIACENTER</b>
                </term>
              </listheader>
              <listheader>
                <term>87</term>
              </listheader>
            </list>
          </description>
          <description>Nonzero if the current operating system is the Windows XP, Media Center Edition, 0 if not.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_MENUDROPALIGNMENT</b>
                </term>
              </listheader>
              <listheader>
                <term>40</term>
              </listheader>
            </list>
          </description>
          <description>Nonzero if drop-down menus are right-aligned with the corresponding menu-bar item; 0 if the menus are left-aligned.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_MIDEASTENABLED</b>
                </term>
              </listheader>
              <listheader>
                <term>74</term>
              </listheader>
            </list>
          </description>
          <description>Nonzero if the system is enabled for Hebrew and Arabic languages, 0 if not.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_MOUSEPRESENT</b>
                </term>
              </listheader>
              <listheader>
                <term>19</term>
              </listheader>
            </list>
          </description>
          <description>Nonzero if a mouse is installed; otherwise, 0. This value is rarely zero, because of support for virtual mice and because some systems detect the presence of the port instead of the presence of a mouse.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_MOUSEHORIZONTALWHEELPRESENT</b>
                </term>
              </listheader>
              <listheader>
                <term>91</term>
              </listheader>
            </list>
          </description>
          <description>Nonzero if a mouse with a horizontal scroll wheel is installed; otherwise 0.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_MOUSEWHEELPRESENT</b>
                </term>
              </listheader>
              <listheader>
                <term>75</term>
              </listheader>
            </list>
          </description>
          <description>Nonzero if a mouse with a vertical scroll wheel is installed; otherwise 0.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_NETWORK</b>
                </term>
              </listheader>
              <listheader>
                <term>63</term>
              </listheader>
            </list>
          </description>
          <description>The least significant bit is set if a network is present; otherwise, it is cleared. The other bits are reserved for future use.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_PENWINDOWS</b>
                </term>
              </listheader>
              <listheader>
                <term>41</term>
              </listheader>
            </list>
          </description>
          <description>Nonzero if the Microsoft Windows for Pen computing extensions are installed; zero otherwise.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_REMOTECONTROL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2001</term>
              </listheader>
            </list>
          </description>
          <description>This system metric is used in a Terminal Services environment to determine if the current Terminal Server session is being remotely controlled. Its value is nonzero if the current session is remotely controlled; otherwise, 0.<para>You can use terminal services management tools such as Terminal Services Manager (tsadmin.msc) and shadow.exe to control a remote session. When a session is being remotely controlled, another user can view the contents of that session and potentially interact with it.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_REMOTESESSION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x1000</term>
              </listheader>
            </list>
          </description>
          <description>This system metric is used in a Terminal Services environment. If the calling process is associated with a Terminal Services client session, the return value is nonzero. If the calling process is associated with the Terminal Services console session, the return value is 0. <b>Windows Server 2003 and Windows XP:  </b>The console session is not necessarily the physical console. For more information, see <see cref="WTSGetActiveConsoleSessionId" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_SAMEDISPLAYFORMAT</b>
                </term>
              </listheader>
              <listheader>
                <term>81</term>
              </listheader>
            </list>
          </description>
          <description>Nonzero if all the display monitors have the same color format, otherwise, 0. Two displays can have the same bit depth, but different color formats. For example, the red, green, and blue pixels can be encoded with different numbers of bits, or those bits can be located in different places in a pixel color value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_SECURE</b>
                </term>
              </listheader>
              <listheader>
                <term>44</term>
              </listheader>
            </list>
          </description>
          <description>This system metric should be ignored; it always returns 0.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_SERVERR2</b>
                </term>
              </listheader>
              <listheader>
                <term>89</term>
              </listheader>
            </list>
          </description>
          <description>The build number if the system is Windows Server 2003 R2; otherwise, 0.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_SHOWSOUNDS</b>
                </term>
              </listheader>
              <listheader>
                <term>70</term>
              </listheader>
            </list>
          </description>
          <description>Nonzero if the user requires an application to present information visually in situations where it would otherwise present the information only in audible form; otherwise, 0.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_SHUTTINGDOWN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2000</term>
              </listheader>
            </list>
          </description>
          <description>Nonzero if the current session is shutting down; otherwise, 0. <para><b>Windows 2000:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_SLOWMACHINE</b>
                </term>
              </listheader>
              <listheader>
                <term>73</term>
              </listheader>
            </list>
          </description>
          <description>Nonzero if the computer has a low-end (slow) processor; otherwise, 0.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_STARTER</b>
                </term>
              </listheader>
              <listheader>
                <term>88</term>
              </listheader>
            </list>
          </description>
          <description>Nonzero if the current operating system is Windows 7 Starter Edition, Windows Vista Starter, or Windows XP Starter Edition; otherwise, 0.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_SWAPBUTTON</b>
                </term>
              </listheader>
              <listheader>
                <term>23</term>
              </listheader>
            </list>
          </description>
          <description>Nonzero if the meanings of the left and right mouse buttons are swapped; otherwise, 0.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_SYSTEMDOCKED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2004</term>
              </listheader>
            </list>
          </description>
          <description>Reflects the state of the docking mode, 0 for Undocked Mode and non-zero otherwise. When this system metric changes, the system sends a broadcast message via <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-settingchange">WM_SETTINGCHANGE</a> with "SystemDockMode" in the LPARAM.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_TABLETPC</b>
                </term>
              </listheader>
              <listheader>
                <term>86</term>
              </listheader>
            </list>
          </description>
          <description>Nonzero if the current operating system is the Windows XP Tablet PC edition or if the current operating system is Windows Vista or Windows 7 and the Tablet PC Input service is started; otherwise, 0. The SM_DIGITIZER setting indicates the type of digitizer input supported by a device running Windows 7 or Windows Server 2008 R2. For more information, see Remarks.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_XVIRTUALSCREEN</b>
                </term>
              </listheader>
              <listheader>
                <term>76</term>
              </listheader>
            </list>
          </description>
          <description>The coordinates for the left side of the <a href="https://docs.microsoft.com//windows/win32/gdi/the-virtual-screen">virtual screen</a>. The virtual screen is the bounding rectangle of all display monitors. The SM_CXVIRTUALSCREEN metric is the width of the virtual screen.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SM_YVIRTUALSCREEN</b>
                </term>
              </listheader>
              <listheader>
                <term>77</term>
              </listheader>
            </list>
          </description>
          <description>The coordinates for the top of the <a href="https://docs.microsoft.com//windows/win32/gdi/the-virtual-screen">virtual screen</a>. The virtual screen is the bounding rectangle of all display monitors. The SM_CYVIRTUALSCREEN metric is the height of the virtual screen.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the requested system metric or configuration setting.</para>
      <para>If the function fails, the return value is 0.<see cref="GetLastError" /> does not provide extended error information.</para>
    </returns>
  </member>
  <member name="Windows.GetSystemMetricsForDpi">
    <summary>Retrieves the specified system metric or system configuration setting taking into account a provided DPI.</summary>
    <param name="nIndex">The system metric or configuration setting to be retrieved. See <see cref="GetSystemMetrics" /> for the possible values.</param>
    <param name="dpi">The DPI to use for scaling the metric.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetTabbedTextExtent">
    <summary>The <b>GetTabbedTextExtent</b> function computes the width and height of a character string. If the string contains one or more tab characters, the width of the string is based upon the specified tab stops. The <b>GetTabbedTextExtent</b> function uses the currently selected font to compute the dimensions of the string.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to a character string.</param>
    <param name="chCount">The length of the text string. For the ANSI function it is a BYTE count and for the Unicode function it is a WORD count. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.</param>
    <param name="nTabPositions">The number of tab-stop positions in the array pointed to by the <i>lpnTabStopPositions</i> parameter.</param>
    <param name="lpnTabStopPositions">A pointer to an array containing the tab-stop positions, in device units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.</param>
    <returns>
      <para>If the function succeeds, the return value is the dimensions of the string in logical units. The height is in the high-order word and the width is in the low-order word.</para>
      <para>If the function fails, the return value is 0. <b>GetTabbedTextExtent</b> will fail if <i>hDC</i> is invalid and if <i>nTabPositions</i> is less than 0.</para>
    </returns>
  </member>
  <member name="Windows.GetTabbedTextExtentA">
    <summary>The <b>GetTabbedTextExtent</b> function computes the width and height of a character string. If the string contains one or more tab characters, the width of the string is based upon the specified tab stops. The <b>GetTabbedTextExtent</b> function uses the currently selected font to compute the dimensions of the string.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to a character string.</param>
    <param name="chCount">The length of the text string. For the ANSI function it is a BYTE count and for the Unicode function it is a WORD count. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.</param>
    <param name="nTabPositions">The number of tab-stop positions in the array pointed to by the <i>lpnTabStopPositions</i> parameter.</param>
    <param name="lpnTabStopPositions">A pointer to an array containing the tab-stop positions, in device units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.</param>
    <returns>
      <para>If the function succeeds, the return value is the dimensions of the string in logical units. The height is in the high-order word and the width is in the low-order word.</para>
      <para>If the function fails, the return value is 0. <b>GetTabbedTextExtent</b> will fail if <i>hDC</i> is invalid and if <i>nTabPositions</i> is less than 0.</para>
    </returns>
  </member>
  <member name="Windows.GetTabbedTextExtentW">
    <summary>The <b>GetTabbedTextExtent</b> function computes the width and height of a character string. If the string contains one or more tab characters, the width of the string is based upon the specified tab stops. The <b>GetTabbedTextExtent</b> function uses the currently selected font to compute the dimensions of the string.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to a character string.</param>
    <param name="chCount">The length of the text string. For the ANSI function it is a BYTE count and for the Unicode function it is a WORD count. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.</param>
    <param name="nTabPositions">The number of tab-stop positions in the array pointed to by the <i>lpnTabStopPositions</i> parameter.</param>
    <param name="lpnTabStopPositions">A pointer to an array containing the tab-stop positions, in device units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.</param>
    <returns>
      <para>If the function succeeds, the return value is the dimensions of the string in logical units. The height is in the high-order word and the width is in the low-order word.</para>
      <para>If the function fails, the return value is 0. <b>GetTabbedTextExtent</b> will fail if <i>hDC</i> is invalid and if <i>nTabPositions</i> is less than 0.</para>
    </returns>
  </member>
  <member name="Windows.GetTabbedTextExtent">
    <summary>The <b>GetTabbedTextExtent</b> function computes the width and height of a character string. If the string contains one or more tab characters, the width of the string is based upon the specified tab stops. The <b>GetTabbedTextExtent</b> function uses the currently selected font to compute the dimensions of the string.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to a character string.</param>
    <param name="chCount">The length of the text string. For the ANSI function it is a BYTE count and for the Unicode function it is a WORD count. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.</param>
    <param name="nTabPositions">The number of tab-stop positions in the array pointed to by the <i>lpnTabStopPositions</i> parameter.</param>
    <param name="lpnTabStopPositions">A pointer to an array containing the tab-stop positions, in device units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.</param>
    <returns>
      <para>If the function succeeds, the return value is the dimensions of the string in logical units. The height is in the high-order word and the width is in the low-order word.</para>
      <para>If the function fails, the return value is 0. <b>GetTabbedTextExtent</b> will fail if <i>hDC</i> is invalid and if <i>nTabPositions</i> is less than 0.</para>
    </returns>
  </member>
  <member name="Windows.GetTabbedTextExtentA">
    <summary>The <b>GetTabbedTextExtent</b> function computes the width and height of a character string. If the string contains one or more tab characters, the width of the string is based upon the specified tab stops. The <b>GetTabbedTextExtent</b> function uses the currently selected font to compute the dimensions of the string.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to a character string.</param>
    <param name="chCount">The length of the text string. For the ANSI function it is a BYTE count and for the Unicode function it is a WORD count. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.</param>
    <param name="nTabPositions">The number of tab-stop positions in the array pointed to by the <i>lpnTabStopPositions</i> parameter.</param>
    <param name="lpnTabStopPositions">A pointer to an array containing the tab-stop positions, in device units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.</param>
    <returns>
      <para>If the function succeeds, the return value is the dimensions of the string in logical units. The height is in the high-order word and the width is in the low-order word.</para>
      <para>If the function fails, the return value is 0. <b>GetTabbedTextExtent</b> will fail if <i>hDC</i> is invalid and if <i>nTabPositions</i> is less than 0.</para>
    </returns>
  </member>
  <member name="Windows.GetTabbedTextExtentW">
    <summary>The <b>GetTabbedTextExtent</b> function computes the width and height of a character string. If the string contains one or more tab characters, the width of the string is based upon the specified tab stops. The <b>GetTabbedTextExtent</b> function uses the currently selected font to compute the dimensions of the string.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="lpString">A pointer to a character string.</param>
    <param name="chCount">The length of the text string. For the ANSI function it is a BYTE count and for the Unicode function it is a WORD count. Note that for the ANSI function, characters in SBCS code pages take one byte each, while most characters in DBCS code pages take two bytes; for the Unicode function, most currently defined Unicode characters (those in the Basic Multilingual Plane (BMP)) are one WORD while Unicode surrogates are two WORDs.</param>
    <param name="nTabPositions">The number of tab-stop positions in the array pointed to by the <i>lpnTabStopPositions</i> parameter.</param>
    <param name="lpnTabStopPositions">A pointer to an array containing the tab-stop positions, in device units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.</param>
    <returns>
      <para>If the function succeeds, the return value is the dimensions of the string in logical units. The height is in the high-order word and the width is in the low-order word.</para>
      <para>If the function fails, the return value is 0. <b>GetTabbedTextExtent</b> will fail if <i>hDC</i> is invalid and if <i>nTabPositions</i> is less than 0.</para>
    </returns>
  </member>
  <member name="Windows.GetThreadDesktop">
    <summary>Retrieves a handle to the desktop assigned to the specified thread.</summary>
    <param name="dwThreadId">The thread identifier. The<see cref="GetCurrentThreadId" /> and<see cref="CreateProcess" /> functions return thread identifiers.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the desktop associated with the specified thread. You do not need to call the<see cref="CloseDesktop" /> function to close the returned handle.</para>
      <para>If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetThreadDpiAwarenessContext">
    <summary>Gets the <a href="https://docs.microsoft.com//windows/desktop/hidpi/dpi-awareness-context">DPI_AWARENESS_CONTEXT</a> for the current thread.</summary>
    <returns>The current <a href="https://docs.microsoft.com//windows/desktop/hidpi/dpi-awareness-context">DPI_AWARENESS_CONTEXT</a> for the thread.</returns>
  </member>
  <member name="Windows.GetThreadDpiHostingBehavior">
    <summary>Retrieves the <see cref="DPI_HOSTING_BEHAVIOR" /> from the current thread.</summary>
    <returns>The <see cref="DPI_HOSTING_BEHAVIOR" /> of the current thread.</returns>
  </member>
  <member name="Windows.GetTitleBarInfo">
    <summary>Retrieves information about the specified title bar.</summary>
    <param name="hwnd">A handle to the title bar whose information is to be retrieved.</param>
    <param name="pti">A pointer to a <see cref="TITLEBARINFO" /> structure to receive the information. Note that you must set the <b>cbSize</b> member to <code>sizeof(TITLEBARINFO)</code> before calling this function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetTopWindow">
    <summary>Examines the Z order of the child windows associated with the specified parent window and retrieves a handle to the child window at the top of the Z order.</summary>
    <param name="hWnd">A handle to the parent window whose child windows are to be examined. If this parameter is <b>NULL</b>, the function returns a handle to the window at the top of the Z order.</param>
    <returns>If the function succeeds, the return value is a handle to the child window at the top of the Z order. If the specified window has no child windows, the return value is <b>NULL</b>. To get extended error information, use the <see cref="GetLastError" /> function.</returns>
  </member>
  <member name="Windows.GetTouchInputInfo">
    <summary>Retrieves detailed information about touch inputs associated with a particular touch input handle.</summary>
    <param name="hTouchInput">The touch input handle received in the <b>LPARAM</b> of a touch message. The function fails with <b>ERROR_INVALID_HANDLE</b> if this handle is not valid. Note that the handle is not valid after it has been used in a successful call to <see cref="CloseTouchInputHandle" /> or after it has been passed to <a href="https://docs.microsoft.com//windows/desktop/wintouch/sendmessage--postmessage--and-related-functions">DefWindowProc, PostMessage, SendMessage</a> or one of their variants.</param>
    <param name="cInputs">The number of structures in the <i>pInputs</i> array. This should ideally be at least equal to the number of touch points associated with the message as indicated in the message <b>WPARAM</b>. If <i>cInputs</i> is less than the number of touch points, the function will still succeed and populate the <i>pInputs</i> buffer with information about <i>cInputs</i> touch points.</param>
    <param name="pInputs">A pointer to an array of <see cref="TOUCHINPUT" /> structures to receive information about the touch points associated with the specified touch input handle.</param>
    <param name="cbSize">The size, in bytes, of a single <see cref="TOUCHINPUT" /> structure. If <i>cbSize</i> is not the size of a single <b>TOUCHINPUT</b> structure, the function fails with <b>ERROR_INVALID_PARAMETER</b>.</param>
    <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</returns>
  </member>
  <member name="Windows.GetUnpredictedMessagePos">
    <summary>Gets pointer data before it has gone through touch prediction processing.</summary>
    <returns>The screen location of the pointer input.</returns>
  </member>
  <member name="Windows.GetUpdatedClipboardFormats">
    <summary>Retrieves the currently supported clipboard formats.</summary>
    <param name="lpuiFormats">An array of clipboard formats. For a description of the standard clipboard formats, see <a href="https://docs.microsoft.com//windows/desktop/dataxchg/standard-clipboard-formats">Standard Clipboard Formats</a>.</param>
    <param name="cFormats">The number of entries in the array pointed to by <i>lpuiFormats</i>.</param>
    <param name="pcFormatsOut">The actual number of clipboard formats in the array pointed to by <i>lpuiFormats</i>.</param>
    <returns>The function returns <b>TRUE</b> if successful; otherwise, <b>FALSE</b>. Call <see cref="GetLastError" /> for additional details.</returns>
  </member>
  <member name="Windows.GetUpdateRect">
    <summary>The <b>GetUpdateRect</b> function retrieves the coordinates of the smallest rectangle that completely encloses the update region of the specified window. <b>GetUpdateRect</b> retrieves the rectangle in logical coordinates. If there is no update region, <b>GetUpdateRect</b> retrieves an empty rectangle (sets all coordinates to zero).</summary>
    <param name="hWnd">Handle to the window whose update region is to be retrieved.</param>
    <param name="lpRect">
      <para>Pointer to the <see cref="RECT" /> structure that receives the coordinates, in device units, of the enclosing rectangle.</para>
      <para>An application can set this parameter to <b>NULL</b> to determine whether an update region exists for the window. If this parameter is <b>NULL</b>, <b>GetUpdateRect</b> returns nonzero if an update region exists, and zero if one does not. This provides a simple and efficient means of determining whether a <b>WM_PAINT</b> message resulted from an invalid area.</para>
    </param>
    <param name="bErase">Specifies whether the background in the update region is to be erased. If this parameter is <b>TRUE</b> and the update region is not empty, <b>GetUpdateRect</b> sends a <b>WM_ERASEBKGND</b> message to the specified window to erase the background.</param>
    <returns>
      <para>If the update region is not empty, the return value is nonzero.</para>
      <para>If there is no update region, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GetUpdateRgn">
    <summary>The <b>GetUpdateRgn</b> function retrieves the update region of a window by copying it into the specified region. The coordinates of the update region are relative to the upper-left corner of the window (that is, they are client coordinates).</summary>
    <param name="hWnd">Handle to the window with an update region that is to be retrieved.</param>
    <param name="hRgn">Handle to the region to receive the update region.</param>
    <param name="bErase">Specifies whether the window background should be erased and whether nonclient areas of child windows should be drawn. If this parameter is <b>FALSE</b>, no drawing is done.</param>
    <returns>
      <para>The return value indicates the complexity of the resulting region; it can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>COMPLEXREGION</description>
          <description>Region consists of more than one rectangle.</description>
        </listheader>
        <listheader>
          <description>ERROR</description>
          <description>An error occurred.</description>
        </listheader>
        <listheader>
          <description>NULLREGION</description>
          <description>Region is empty.</description>
        </listheader>
        <listheader>
          <description>SIMPLEREGION</description>
          <description>Region is a single rectangle.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetUserObjectInformation">
    <summary>Retrieves information about the specified window station or desktop object.</summary>
    <param name="hObj">A handle to the window station or desktop object. This handle is returned by the<see cref="CreateWindowStation" />,<see cref="OpenWindowStation" />,<see cref="CreateDesktop" />, or<see cref="OpenDesktop" /> function.</param>
    <param name="nIndex">
      <para>The information to be retrieved. The parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_FLAGS</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The handle flags. The <i>pvInfo</i> parameter must point to a <see cref="USEROBJECTFLAGS" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_HEAPSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The size of the desktop heap, in KB, as a <b>ULONG</b> value. The <i>hObj</i> parameter must be a handle to a desktop object, otherwise, the function fails.<para><b>Windows Server 2003 and Windows XP/2000:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_IO</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>TRUE</b> if the <i>hObj</i> parameter is a handle to the desktop object that is receiving input from the user. <b>FALSE</b> otherwise.<para><b>Windows Server 2003 and Windows XP/2000:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_NAME</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The name of the object, as a string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The type name of the object, as a string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_USER_SID</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="SID" /> structure that identifies the user that is currently associated with the specified object. If no user is associated with the object, the value returned in the buffer pointed to by <i>lpnLengthNeeded</i> is zero. Note that <b>SID</b> is a variable length structure. You will usually make a call to <b>GetUserObjectInformation</b> to determine the length of the <b>SID</b> before retrieving its value.</description>
        </listheader>
      </list>
    </param>
    <param name="pvInfo">A pointer to a buffer to receive the object information.</param>
    <param name="nLength">The size of the buffer pointed to by the <i>pvInfo</i> parameter, in bytes.</param>
    <param name="lpnLengthNeeded">A pointer to a variable receiving the number of bytes required to store the requested information. If this variable's value is greater than the value of the <i>nLength</i> parameter when the function returns, the function returns FALSE, and none of the information is copied to the <i>pvInfo</i> buffer. If the value of the variable pointed to by <i>lpnLengthNeeded</i> is less than or equal to the value of <i>nLength</i>, the entire information block is copied.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetUserObjectInformationA">
    <summary>Retrieves information about the specified window station or desktop object.</summary>
    <param name="hObj">A handle to the window station or desktop object. This handle is returned by the<see cref="CreateWindowStation" />,<see cref="OpenWindowStation" />,<see cref="CreateDesktop" />, or<see cref="OpenDesktop" /> function.</param>
    <param name="nIndex">
      <para>The information to be retrieved. The parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_FLAGS</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The handle flags. The <i>pvInfo</i> parameter must point to a <see cref="USEROBJECTFLAGS" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_HEAPSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The size of the desktop heap, in KB, as a <b>ULONG</b> value. The <i>hObj</i> parameter must be a handle to a desktop object, otherwise, the function fails.<para><b>Windows Server 2003 and Windows XP/2000:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_IO</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>TRUE</b> if the <i>hObj</i> parameter is a handle to the desktop object that is receiving input from the user. <b>FALSE</b> otherwise.<para><b>Windows Server 2003 and Windows XP/2000:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_NAME</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The name of the object, as a string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The type name of the object, as a string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_USER_SID</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="SID" /> structure that identifies the user that is currently associated with the specified object. If no user is associated with the object, the value returned in the buffer pointed to by <i>lpnLengthNeeded</i> is zero. Note that <b>SID</b> is a variable length structure. You will usually make a call to <b>GetUserObjectInformation</b> to determine the length of the <b>SID</b> before retrieving its value.</description>
        </listheader>
      </list>
    </param>
    <param name="pvInfo">A pointer to a buffer to receive the object information.</param>
    <param name="nLength">The size of the buffer pointed to by the <i>pvInfo</i> parameter, in bytes.</param>
    <param name="lpnLengthNeeded">A pointer to a variable receiving the number of bytes required to store the requested information. If this variable's value is greater than the value of the <i>nLength</i> parameter when the function returns, the function returns FALSE, and none of the information is copied to the <i>pvInfo</i> buffer. If the value of the variable pointed to by <i>lpnLengthNeeded</i> is less than or equal to the value of <i>nLength</i>, the entire information block is copied.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetUserObjectInformationW">
    <summary>Retrieves information about the specified window station or desktop object.</summary>
    <param name="hObj">A handle to the window station or desktop object. This handle is returned by the<see cref="CreateWindowStation" />,<see cref="OpenWindowStation" />,<see cref="CreateDesktop" />, or<see cref="OpenDesktop" /> function.</param>
    <param name="nIndex">
      <para>The information to be retrieved. The parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_FLAGS</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The handle flags. The <i>pvInfo</i> parameter must point to a <see cref="USEROBJECTFLAGS" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_HEAPSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The size of the desktop heap, in KB, as a <b>ULONG</b> value. The <i>hObj</i> parameter must be a handle to a desktop object, otherwise, the function fails.<para><b>Windows Server 2003 and Windows XP/2000:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_IO</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>TRUE</b> if the <i>hObj</i> parameter is a handle to the desktop object that is receiving input from the user. <b>FALSE</b> otherwise.<para><b>Windows Server 2003 and Windows XP/2000:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_NAME</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The name of the object, as a string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The type name of the object, as a string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_USER_SID</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="SID" /> structure that identifies the user that is currently associated with the specified object. If no user is associated with the object, the value returned in the buffer pointed to by <i>lpnLengthNeeded</i> is zero. Note that <b>SID</b> is a variable length structure. You will usually make a call to <b>GetUserObjectInformation</b> to determine the length of the <b>SID</b> before retrieving its value.</description>
        </listheader>
      </list>
    </param>
    <param name="pvInfo">A pointer to a buffer to receive the object information.</param>
    <param name="nLength">The size of the buffer pointed to by the <i>pvInfo</i> parameter, in bytes.</param>
    <param name="lpnLengthNeeded">A pointer to a variable receiving the number of bytes required to store the requested information. If this variable's value is greater than the value of the <i>nLength</i> parameter when the function returns, the function returns FALSE, and none of the information is copied to the <i>pvInfo</i> buffer. If the value of the variable pointed to by <i>lpnLengthNeeded</i> is less than or equal to the value of <i>nLength</i>, the entire information block is copied.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetUserObjectInformation">
    <summary>Retrieves information about the specified window station or desktop object.</summary>
    <param name="hObj">A handle to the window station or desktop object. This handle is returned by the<see cref="CreateWindowStation" />,<see cref="OpenWindowStation" />,<see cref="CreateDesktop" />, or<see cref="OpenDesktop" /> function.</param>
    <param name="nIndex">
      <para>The information to be retrieved. The parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_FLAGS</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The handle flags. The <i>pvInfo</i> parameter must point to a <see cref="USEROBJECTFLAGS" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_HEAPSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The size of the desktop heap, in KB, as a <b>ULONG</b> value. The <i>hObj</i> parameter must be a handle to a desktop object, otherwise, the function fails.<para><b>Windows Server 2003 and Windows XP/2000:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_IO</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>TRUE</b> if the <i>hObj</i> parameter is a handle to the desktop object that is receiving input from the user. <b>FALSE</b> otherwise.<para><b>Windows Server 2003 and Windows XP/2000:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_NAME</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The name of the object, as a string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The type name of the object, as a string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_USER_SID</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="SID" /> structure that identifies the user that is currently associated with the specified object. If no user is associated with the object, the value returned in the buffer pointed to by <i>lpnLengthNeeded</i> is zero. Note that <b>SID</b> is a variable length structure. You will usually make a call to <b>GetUserObjectInformation</b> to determine the length of the <b>SID</b> before retrieving its value.</description>
        </listheader>
      </list>
    </param>
    <param name="pvInfo">A pointer to a buffer to receive the object information.</param>
    <param name="nLength">The size of the buffer pointed to by the <i>pvInfo</i> parameter, in bytes.</param>
    <param name="lpnLengthNeeded">A pointer to a variable receiving the number of bytes required to store the requested information. If this variable's value is greater than the value of the <i>nLength</i> parameter when the function returns, the function returns FALSE, and none of the information is copied to the <i>pvInfo</i> buffer. If the value of the variable pointed to by <i>lpnLengthNeeded</i> is less than or equal to the value of <i>nLength</i>, the entire information block is copied.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetUserObjectInformationA">
    <summary>Retrieves information about the specified window station or desktop object.</summary>
    <param name="hObj">A handle to the window station or desktop object. This handle is returned by the<see cref="CreateWindowStation" />,<see cref="OpenWindowStation" />,<see cref="CreateDesktop" />, or<see cref="OpenDesktop" /> function.</param>
    <param name="nIndex">
      <para>The information to be retrieved. The parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_FLAGS</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The handle flags. The <i>pvInfo</i> parameter must point to a <see cref="USEROBJECTFLAGS" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_HEAPSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The size of the desktop heap, in KB, as a <b>ULONG</b> value. The <i>hObj</i> parameter must be a handle to a desktop object, otherwise, the function fails.<para><b>Windows Server 2003 and Windows XP/2000:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_IO</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>TRUE</b> if the <i>hObj</i> parameter is a handle to the desktop object that is receiving input from the user. <b>FALSE</b> otherwise.<para><b>Windows Server 2003 and Windows XP/2000:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_NAME</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The name of the object, as a string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The type name of the object, as a string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_USER_SID</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="SID" /> structure that identifies the user that is currently associated with the specified object. If no user is associated with the object, the value returned in the buffer pointed to by <i>lpnLengthNeeded</i> is zero. Note that <b>SID</b> is a variable length structure. You will usually make a call to <b>GetUserObjectInformation</b> to determine the length of the <b>SID</b> before retrieving its value.</description>
        </listheader>
      </list>
    </param>
    <param name="pvInfo">A pointer to a buffer to receive the object information.</param>
    <param name="nLength">The size of the buffer pointed to by the <i>pvInfo</i> parameter, in bytes.</param>
    <param name="lpnLengthNeeded">A pointer to a variable receiving the number of bytes required to store the requested information. If this variable's value is greater than the value of the <i>nLength</i> parameter when the function returns, the function returns FALSE, and none of the information is copied to the <i>pvInfo</i> buffer. If the value of the variable pointed to by <i>lpnLengthNeeded</i> is less than or equal to the value of <i>nLength</i>, the entire information block is copied.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetUserObjectInformationW">
    <summary>Retrieves information about the specified window station or desktop object.</summary>
    <param name="hObj">A handle to the window station or desktop object. This handle is returned by the<see cref="CreateWindowStation" />,<see cref="OpenWindowStation" />,<see cref="CreateDesktop" />, or<see cref="OpenDesktop" /> function.</param>
    <param name="nIndex">
      <para>The information to be retrieved. The parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_FLAGS</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The handle flags. The <i>pvInfo</i> parameter must point to a <see cref="USEROBJECTFLAGS" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_HEAPSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The size of the desktop heap, in KB, as a <b>ULONG</b> value. The <i>hObj</i> parameter must be a handle to a desktop object, otherwise, the function fails.<para><b>Windows Server 2003 and Windows XP/2000:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_IO</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>TRUE</b> if the <i>hObj</i> parameter is a handle to the desktop object that is receiving input from the user. <b>FALSE</b> otherwise.<para><b>Windows Server 2003 and Windows XP/2000:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_NAME</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The name of the object, as a string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The type name of the object, as a string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_USER_SID</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="SID" /> structure that identifies the user that is currently associated with the specified object. If no user is associated with the object, the value returned in the buffer pointed to by <i>lpnLengthNeeded</i> is zero. Note that <b>SID</b> is a variable length structure. You will usually make a call to <b>GetUserObjectInformation</b> to determine the length of the <b>SID</b> before retrieving its value.</description>
        </listheader>
      </list>
    </param>
    <param name="pvInfo">A pointer to a buffer to receive the object information.</param>
    <param name="nLength">The size of the buffer pointed to by the <i>pvInfo</i> parameter, in bytes.</param>
    <param name="lpnLengthNeeded">A pointer to a variable receiving the number of bytes required to store the requested information. If this variable's value is greater than the value of the <i>nLength</i> parameter when the function returns, the function returns FALSE, and none of the information is copied to the <i>pvInfo</i> buffer. If the value of the variable pointed to by <i>lpnLengthNeeded</i> is less than or equal to the value of <i>nLength</i>, the entire information block is copied.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetUserObjectSecurity">
    <summary>The <b>GetUserObjectSecurity</b> function retrieves security information for the specified user object.</summary>
    <param name="hObj">A handle to the user object for which to return security information.</param>
    <param name="pSIRequested">A pointer to a<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> value that specifies the security information being requested.</param>
    <param name="pSID">A pointer to a<see cref="SECURITY_DESCRIPTOR" /> structure in <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative</a> format that contains the requested information when the function returns. This buffer must be aligned on a 4-byte boundary.</param>
    <param name="nLength">The length, in bytes, of the buffer pointed to by the <i>pSD</i> parameter.</param>
    <param name="lpnLengthNeeded">A pointer to a variable to receive the number of bytes required to store the complete <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>. If this variable's value is greater than the value of the <i>nLength</i> parameter when the function returns, the function returns <b>FALSE</b> and none of the security descriptor is copied to the buffer. Otherwise, the entire security descriptor is copied.</param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetWindow">
    <summary>Retrieves a handle to a window that has the specified relationship (<a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">Z-Order</a> or owner) to the specified window.</summary>
    <param name="hWnd">A handle to a window. The window handle retrieved is relative to this window, based on the value of the <i>uCmd</i> parameter.</param>
    <param name="uCmd">
      <para>The relationship between the specified window and the window whose handle is to be retrieved. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GW_CHILD</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The retrieved handle identifies the child window at the top of the Z order, if the specified window is a parent window; otherwise, the retrieved handle is <b>NULL</b>. The function examines only child windows of the specified window. It does not examine descendant windows.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GW_ENABLEDPOPUP</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The retrieved handle identifies the enabled popup window owned by the specified window (the search uses the first such window found using <b>GW_HWNDNEXT</b>); otherwise, if there are no enabled popup windows, the retrieved handle is that of the specified window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GW_HWNDFIRST</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The retrieved handle identifies the window of the same type that is highest in the Z order.<para>If the specified window is a topmost window, the handle identifies a topmost window. If the specified window is a top-level window, the handle identifies a top-level window. If the specified window is a child window, the handle identifies a sibling window.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GW_HWNDLAST</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The retrieved handle identifies the window of the same type that is lowest in the Z order.<para>If the specified window is a topmost window, the handle identifies a topmost window. If the specified window is a top-level window, the handle identifies a top-level window. If the specified window is a child window, the handle identifies a sibling window.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GW_HWNDNEXT</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The retrieved handle identifies the window below the specified window in the Z order.<para>If the specified window is a topmost window, the handle identifies a topmost window. If the specified window is a top-level window, the handle identifies a top-level window. If the specified window is a child window, the handle identifies a sibling window.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GW_HWNDPREV</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The retrieved handle identifies the window above the specified window in the Z order.<para>If the specified window is a topmost window, the handle identifies a topmost window. If the specified window is a top-level window, the handle identifies a top-level window. If the specified window is a child window, the handle identifies a sibling window.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GW_OWNER</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The retrieved handle identifies the specified window's owner window, if any. For more information, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">Owned Windows</a>.</description>
        </listheader>
      </list>
    </param>
    <returns>If the function succeeds, the return value is a window handle. If no window exists with the specified relationship to the specified window, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.GetWindowContextHelpId">
    <summary>Retrieves the Help context identifier, if any, associated with the specified window.</summary>
    <param name="unnamedParam1">A handle to the window for which the Help context identifier is to be retrieved.</param>
    <returns>Returns the Help context identifier if the window has one, or zero otherwise.</returns>
  </member>
  <member name="Windows.GetWindowDC">
    <summary>
      <para>The <b>GetWindowDC</b> function retrieves the device context (DC) for the entire window, including title bar, menus, and scroll bars. A window device context permits painting anywhere in a window, because the origin of the device context is the upper-left corner of the window instead of the client area.</para>
      <para>
        <b>GetWindowDC</b> assigns default attributes to the window device context each time it retrieves the device context. Previous attributes are lost.</para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window with a device context that is to be retrieved. If this value is <b>NULL</b>, <b>GetWindowDC</b> retrieves the device context for the entire screen.</para>
      <para>If this parameter is <b>NULL</b>, <b>GetWindowDC</b> retrieves the device context for the primary display monitor. To get the device context for other display monitors, use the <see cref="EnumDisplayMonitors" /> and <see cref="CreateDC" /> functions.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to a device context for the specified window.</para>
      <para>If the function fails, the return value is <b>NULL</b>, indicating an error or an invalid <i>hWnd</i> parameter.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowDisplayAffinity">
    <summary>Retrieves the current display affinity setting, from any process, for a given window.</summary>
    <param name="hWnd">A handle to the window.</param>
    <param name="pdwAffinity">A pointer to a variable that receives the display affinity setting. See <see cref="SetWindowDisplayAffinity" /> for a list of affinity settings and their meanings.</param>
    <returns>This function succeeds only when the window is layered and Desktop Windows Manager is composing the desktop. If this function succeeds, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b>. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.GetWindowDpiHostingBehavior">
    <summary>Returns the <see cref="DPI_HOSTING_BEHAVIOR" /> of the specified window.</summary>
    <param name="hwnd">The handle for the window to examine.</param>
    <returns>The <see cref="DPI_HOSTING_BEHAVIOR" /> of the specified window.</returns>
  </member>
  <member name="Windows.GetWindowFeedbackSetting">
    <summary>Retrieves the feedback configuration for a window.</summary>
    <param name="hwnd">The window to check for feedback configuration.</param>
    <param name="feedback">One of the values from the <see cref="FEEDBACK_TYPE" /> enumeration.</param>
    <param name="dwFlags">Specify <a href="https://docs.microsoft.com//previous-versions/windows/desktop/input_feedback/constants">GWFS_INCLUDE_ANCESTORS</a> to check the parent window chain until a value is found. The default is 0 and indicates that only the specified window will be checked.</param>
    <param name="pSize">
      <para>The size of memory region that the <i>config</i> parameter points to.</para>
      <para>The <i>pSize</i> parameter specifies the size of the configuration data for the feedback type in <i>feedback</i> and must be sizeof(BOOL).</para>
    </param>
    <param name="config">
      <para>The configuration data.</para>
      <para>The <i>config</i> parameter must point to a value of type BOOL.</para>
    </param>
    <returns>Returns TRUE if the specified feedback setting is configured on the specified window. Otherwise, it returns FALSE (and <i>config</i> won't be modified).</returns>
  </member>
  <member name="Windows.GetWindowInfo">
    <summary>Retrieves information about the specified window.</summary>
    <param name="hwnd">A handle to the window whose information is to be retrieved.</param>
    <param name="pwi">A pointer to a <see cref="WINDOWINFO" /> structure to receive the information. Note that you must set the <b>cbSize</b> member to <code>sizeof(WINDOWINFO)</code> before calling this function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
      <para>To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowLong">
    <summary>
      <para>Retrieves information about the specified window. The function also retrieves the 32-bit (<b>DWORD</b>) value at the specified offset into the extra window memory. <div><b>Note</b>  If you are retrieving a pointer or a handle, this function has been superseded by the <see cref="GetWindowLongPtr" /> function. (Pointers and handles are 32 bits on 32-bit Windows and 64 bits on 64-bit Windows.) To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>GetWindowLongPtr</b>.</div></para>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus four; for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32-bit integer. To retrieve any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the application instance.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_HWNDPARENT</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the parent window, if any.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the identifier of the window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Retrieves the address of the dialog box procedure, or a handle representing the address of the dialog box procedure. You must use the <see cref="CallWindowProc" /> function to call the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Retrieves the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Retrieves extra information private to the application, such as handles or pointers.</description></listheader></list></param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If <see cref="SetWindowLong" /> has not been called previously, <b>GetWindowLong</b> returns zero for values in the extra window or class memory.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowLongA">
    <summary>
      <para>Retrieves information about the specified window. The function also retrieves the 32-bit (<b>DWORD</b>) value at the specified offset into the extra window memory. <div><b>Note</b>  If you are retrieving a pointer or a handle, this function has been superseded by the <see cref="GetWindowLongPtr" /> function. (Pointers and handles are 32 bits on 32-bit Windows and 64 bits on 64-bit Windows.) To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>GetWindowLongPtr</b>.</div></para>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus four; for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32-bit integer. To retrieve any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the application instance.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_HWNDPARENT</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the parent window, if any.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the identifier of the window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Retrieves the address of the dialog box procedure, or a handle representing the address of the dialog box procedure. You must use the <see cref="CallWindowProc" /> function to call the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Retrieves the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Retrieves extra information private to the application, such as handles or pointers.</description></listheader></list></param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If <see cref="SetWindowLong" /> has not been called previously, <b>GetWindowLong</b> returns zero for values in the extra window or class memory.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowLongW">
    <summary>
      <para>Retrieves information about the specified window. The function also retrieves the 32-bit (<b>DWORD</b>) value at the specified offset into the extra window memory. <div><b>Note</b>  If you are retrieving a pointer or a handle, this function has been superseded by the <see cref="GetWindowLongPtr" /> function. (Pointers and handles are 32 bits on 32-bit Windows and 64 bits on 64-bit Windows.) To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>GetWindowLongPtr</b>.</div></para>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus four; for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32-bit integer. To retrieve any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the application instance.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_HWNDPARENT</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the parent window, if any.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the identifier of the window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Retrieves the address of the dialog box procedure, or a handle representing the address of the dialog box procedure. You must use the <see cref="CallWindowProc" /> function to call the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Retrieves the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Retrieves extra information private to the application, such as handles or pointers.</description></listheader></list></param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If <see cref="SetWindowLong" /> has not been called previously, <b>GetWindowLong</b> returns zero for values in the extra window or class memory.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowLongPtr">
    <summary>
      <para>Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.</para>
      <div>
        <b>Note</b>  To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>GetWindowLongPtr</b>. When compiling for 32-bit Windows, <b>GetWindowLongPtr</b> is defined as a call to the <see cref="GetWindowLong" /> function.</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a <b>LONG_PTR</b>. To retrieve any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the application instance.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_HWNDPARENT</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the parent window, if there is one.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the identifier of the window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the pointer to the window procedure, or a handle representing the pointer to the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Retrieves the pointer to the dialog box procedure, or a handle representing the pointer to the dialog box procedure. You must use the <see cref="CallWindowProc" /> function to call the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Retrieves the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Retrieves extra information private to the application, such as handles or pointers.</description></listheader></list></param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If <see cref="SetWindowLong" /> or <see cref="SetWindowLongPtr" /> has not been called previously, <b>GetWindowLongPtr</b> returns zero for values in the extra window or class memory.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowLongPtrA">
    <summary>
      <para>Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.</para>
      <div>
        <b>Note</b>  To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>GetWindowLongPtr</b>. When compiling for 32-bit Windows, <b>GetWindowLongPtr</b> is defined as a call to the <see cref="GetWindowLong" /> function.</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a <b>LONG_PTR</b>. To retrieve any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the application instance.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_HWNDPARENT</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the parent window, if there is one.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the identifier of the window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the pointer to the window procedure, or a handle representing the pointer to the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Retrieves the pointer to the dialog box procedure, or a handle representing the pointer to the dialog box procedure. You must use the <see cref="CallWindowProc" /> function to call the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Retrieves the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Retrieves extra information private to the application, such as handles or pointers.</description></listheader></list></param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If <see cref="SetWindowLong" /> or <see cref="SetWindowLongPtr" /> has not been called previously, <b>GetWindowLongPtr</b> returns zero for values in the extra window or class memory.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowLongPtrW">
    <summary>
      <para>Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.</para>
      <div>
        <b>Note</b>  To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>GetWindowLongPtr</b>. When compiling for 32-bit Windows, <b>GetWindowLongPtr</b> is defined as a call to the <see cref="GetWindowLong" /> function.</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a <b>LONG_PTR</b>. To retrieve any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the application instance.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_HWNDPARENT</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the parent window, if there is one.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the identifier of the window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the pointer to the window procedure, or a handle representing the pointer to the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Retrieves the pointer to the dialog box procedure, or a handle representing the pointer to the dialog box procedure. You must use the <see cref="CallWindowProc" /> function to call the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Retrieves the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Retrieves extra information private to the application, such as handles or pointers.</description></listheader></list></param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If <see cref="SetWindowLong" /> or <see cref="SetWindowLongPtr" /> has not been called previously, <b>GetWindowLongPtr</b> returns zero for values in the extra window or class memory.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowLongPtr">
    <summary>
      <para>Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.</para>
      <div>
        <b>Note</b>  To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>GetWindowLongPtr</b>. When compiling for 32-bit Windows, <b>GetWindowLongPtr</b> is defined as a call to the <see cref="GetWindowLong" /> function.</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a <b>LONG_PTR</b>. To retrieve any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the application instance.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_HWNDPARENT</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the parent window, if there is one.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the identifier of the window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the pointer to the window procedure, or a handle representing the pointer to the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Retrieves the pointer to the dialog box procedure, or a handle representing the pointer to the dialog box procedure. You must use the <see cref="CallWindowProc" /> function to call the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Retrieves the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Retrieves extra information private to the application, such as handles or pointers.</description></listheader></list></param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If <see cref="SetWindowLong" /> or <see cref="SetWindowLongPtr" /> has not been called previously, <b>GetWindowLongPtr</b> returns zero for values in the extra window or class memory.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowLongPtrA">
    <summary>
      <para>Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.</para>
      <div>
        <b>Note</b>  To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>GetWindowLongPtr</b>. When compiling for 32-bit Windows, <b>GetWindowLongPtr</b> is defined as a call to the <see cref="GetWindowLong" /> function.</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a <b>LONG_PTR</b>. To retrieve any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the application instance.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_HWNDPARENT</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the parent window, if there is one.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the identifier of the window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the pointer to the window procedure, or a handle representing the pointer to the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Retrieves the pointer to the dialog box procedure, or a handle representing the pointer to the dialog box procedure. You must use the <see cref="CallWindowProc" /> function to call the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Retrieves the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Retrieves extra information private to the application, such as handles or pointers.</description></listheader></list></param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If <see cref="SetWindowLong" /> or <see cref="SetWindowLongPtr" /> has not been called previously, <b>GetWindowLongPtr</b> returns zero for values in the extra window or class memory.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowLongPtrW">
    <summary>
      <para>Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.</para>
      <div>
        <b>Note</b>  To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>GetWindowLongPtr</b>. When compiling for 32-bit Windows, <b>GetWindowLongPtr</b> is defined as a call to the <see cref="GetWindowLong" /> function.</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a <b>LONG_PTR</b>. To retrieve any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the application instance.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_HWNDPARENT</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the parent window, if there is one.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the identifier of the window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the pointer to the window procedure, or a handle representing the pointer to the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Retrieves the pointer to the dialog box procedure, or a handle representing the pointer to the dialog box procedure. You must use the <see cref="CallWindowProc" /> function to call the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Retrieves the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Retrieves extra information private to the application, such as handles or pointers.</description></listheader></list></param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If <see cref="SetWindowLong" /> or <see cref="SetWindowLongPtr" /> has not been called previously, <b>GetWindowLongPtr</b> returns zero for values in the extra window or class memory.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowLong">
    <summary>
      <para>Retrieves information about the specified window. The function also retrieves the 32-bit (<b>DWORD</b>) value at the specified offset into the extra window memory. <div><b>Note</b>  If you are retrieving a pointer or a handle, this function has been superseded by the <see cref="GetWindowLongPtr" /> function. (Pointers and handles are 32 bits on 32-bit Windows and 64 bits on 64-bit Windows.) To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>GetWindowLongPtr</b>.</div></para>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus four; for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32-bit integer. To retrieve any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the application instance.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_HWNDPARENT</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the parent window, if any.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the identifier of the window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Retrieves the address of the dialog box procedure, or a handle representing the address of the dialog box procedure. You must use the <see cref="CallWindowProc" /> function to call the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Retrieves the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Retrieves extra information private to the application, such as handles or pointers.</description></listheader></list></param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If <see cref="SetWindowLong" /> has not been called previously, <b>GetWindowLong</b> returns zero for values in the extra window or class memory.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowLongA">
    <summary>
      <para>Retrieves information about the specified window. The function also retrieves the 32-bit (<b>DWORD</b>) value at the specified offset into the extra window memory. <div><b>Note</b>  If you are retrieving a pointer or a handle, this function has been superseded by the <see cref="GetWindowLongPtr" /> function. (Pointers and handles are 32 bits on 32-bit Windows and 64 bits on 64-bit Windows.) To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>GetWindowLongPtr</b>.</div></para>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus four; for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32-bit integer. To retrieve any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the application instance.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_HWNDPARENT</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the parent window, if any.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the identifier of the window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Retrieves the address of the dialog box procedure, or a handle representing the address of the dialog box procedure. You must use the <see cref="CallWindowProc" /> function to call the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Retrieves the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Retrieves extra information private to the application, such as handles or pointers.</description></listheader></list></param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If <see cref="SetWindowLong" /> has not been called previously, <b>GetWindowLong</b> returns zero for values in the extra window or class memory.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowLongW">
    <summary>
      <para>Retrieves information about the specified window. The function also retrieves the 32-bit (<b>DWORD</b>) value at the specified offset into the extra window memory. <div><b>Note</b>  If you are retrieving a pointer or a handle, this function has been superseded by the <see cref="GetWindowLongPtr" /> function. (Pointers and handles are 32 bits on 32-bit Windows and 64 bits on 64-bit Windows.) To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>GetWindowLongPtr</b>.</div></para>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus four; for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32-bit integer. To retrieve any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the application instance.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_HWNDPARENT</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the parent window, if any.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the identifier of the window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window styles</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the <see cref="CallWindowProc" /> function to call the window procedure.</description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Retrieves the address of the dialog box procedure, or a handle representing the address of the dialog box procedure. You must use the <see cref="CallWindowProc" /> function to call the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Retrieves the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Retrieves extra information private to the application, such as handles or pointers.</description></listheader></list></param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If <see cref="SetWindowLong" /> has not been called previously, <b>GetWindowLong</b> returns zero for values in the extra window or class memory.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowModuleFileName">
    <summary>Retrieves the full path and file name of the module associated with the specified window handle.</summary>
    <param name="hwnd">A handle to the window whose module file name is to be retrieved.</param>
    <param name="pszFileName">The path and file name.</param>
    <param name="cchFileNameMax">The maximum number of characters that can be copied into the <i>lpszFileName</i> buffer.</param>
    <returns>The return value is the total number of characters copied into the buffer.</returns>
  </member>
  <member name="Windows.GetWindowModuleFileNameA">
    <summary>Retrieves the full path and file name of the module associated with the specified window handle.</summary>
    <param name="hwnd">A handle to the window whose module file name is to be retrieved.</param>
    <param name="pszFileName">The path and file name.</param>
    <param name="cchFileNameMax">The maximum number of characters that can be copied into the <i>lpszFileName</i> buffer.</param>
    <returns>The return value is the total number of characters copied into the buffer.</returns>
  </member>
  <member name="Windows.GetWindowModuleFileNameW">
    <summary>Retrieves the full path and file name of the module associated with the specified window handle.</summary>
    <param name="hwnd">A handle to the window whose module file name is to be retrieved.</param>
    <param name="pszFileName">The path and file name.</param>
    <param name="cchFileNameMax">The maximum number of characters that can be copied into the <i>lpszFileName</i> buffer.</param>
    <returns>The return value is the total number of characters copied into the buffer.</returns>
  </member>
  <member name="Windows.GetWindowModuleFileName">
    <summary>Retrieves the full path and file name of the module associated with the specified window handle.</summary>
    <param name="hwnd">A handle to the window whose module file name is to be retrieved.</param>
    <param name="pszFileName">The path and file name.</param>
    <param name="cchFileNameMax">The maximum number of characters that can be copied into the <i>lpszFileName</i> buffer.</param>
    <returns>The return value is the total number of characters copied into the buffer.</returns>
  </member>
  <member name="Windows.GetWindowModuleFileNameA">
    <summary>Retrieves the full path and file name of the module associated with the specified window handle.</summary>
    <param name="hwnd">A handle to the window whose module file name is to be retrieved.</param>
    <param name="pszFileName">The path and file name.</param>
    <param name="cchFileNameMax">The maximum number of characters that can be copied into the <i>lpszFileName</i> buffer.</param>
    <returns>The return value is the total number of characters copied into the buffer.</returns>
  </member>
  <member name="Windows.GetWindowModuleFileNameW">
    <summary>Retrieves the full path and file name of the module associated with the specified window handle.</summary>
    <param name="hwnd">A handle to the window whose module file name is to be retrieved.</param>
    <param name="pszFileName">The path and file name.</param>
    <param name="cchFileNameMax">The maximum number of characters that can be copied into the <i>lpszFileName</i> buffer.</param>
    <returns>The return value is the total number of characters copied into the buffer.</returns>
  </member>
  <member name="Windows.GetWindowPlacement">
    <summary>Retrieves the show state and the restored, minimized, and maximized positions of the specified window.</summary>
    <param name="hWnd">A handle to the window.</param>
    <param name="lpwndpl">A pointer to the <see cref="WINDOWPLACEMENT" /> structure that receives the show state and position information. Before calling <b>GetWindowPlacement</b>, set the <b>length</b> member to <code>sizeof(WINDOWPLACEMENT)</code>. <b>GetWindowPlacement</b> fails if <i>lpwndpl</i>-&gt; <i>length</i> is not set correctly.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowRect">
    <summary>Retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.</summary>
    <param name="hWnd">A handle to the window.</param>
    <param name="lpRect">A pointer to a <see cref="RECT" /> structure that receives the screen coordinates of the upper-left and lower-right corners of the window.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowRgn">
    <summary>The <b>GetWindowRgn</b> function obtains a copy of the window region of a window. The window region of a window is set by calling the <see cref="SetWindowRgn" /> function. The window region determines the area within the window where the system permits drawing. The system does not display any portion of a window that lies outside of the window region</summary>
    <param name="hWnd">Handle to the window whose window region is to be obtained.</param>
    <param name="hRgn">Handle to the region which will be modified to represent the window region.</param>
    <returns>
      <para>The return value specifies the type of the region that the function obtains. It can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NULLREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The region is empty.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SIMPLEREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The region is a single rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>COMPLEXREGION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The region is more than one rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified window does not have a region, or an error occurred while attempting to return the region.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetWindowRgnBox">
    <summary>The <b>GetWindowRgnBox</b> function retrieves the dimensions of the tightest bounding rectangle for the window region of a window.</summary>
    <param name="hWnd">Handle to the window.</param>
    <param name="lprc">Pointer to a <see cref="RECT" /> structure that receives the rectangle dimensions, in device units relative to the upper-left corner of the window.</param>
    <returns>
      <para>The return value specifies the type of the region that the function obtains. It can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>COMPLEXREGION</description>
          <description>The region is more than one rectangle.</description>
        </listheader>
        <listheader>
          <description>ERROR</description>
          <description>The specified window does not have a region, or an error occurred while attempting to return the region.</description>
        </listheader>
        <listheader>
          <description>NULLREGION</description>
          <description>The region is empty.</description>
        </listheader>
        <listheader>
          <description>SIMPLEREGION</description>
          <description>The region is a single rectangle.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.GetWindowText">
    <summary>Copies the text of the specified window's title bar (if it has one) into a buffer. If the specified window is a control, the text of the control is copied. However, <b>GetWindowText</b> cannot retrieve the text of a control in another application.</summary>
    <param name="hWnd">A handle to the window or control containing the text.</param>
    <param name="lpString">The buffer that will receive the text. If the string is as long or longer than the buffer, the string is truncated and terminated with a null character.</param>
    <param name="nMaxCount">The maximum number of characters to copy to the buffer, including the null character. If the text exceeds this limit, it is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value is the length, in characters, of the copied string, not including the terminating null character. If the window has no title bar or text, if the title bar is empty, or if the window or control handle is invalid, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>This function cannot retrieve the text of an edit control in another application.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowTextA">
    <summary>Copies the text of the specified window's title bar (if it has one) into a buffer. If the specified window is a control, the text of the control is copied. However, <b>GetWindowText</b> cannot retrieve the text of a control in another application.</summary>
    <param name="hWnd">A handle to the window or control containing the text.</param>
    <param name="lpString">The buffer that will receive the text. If the string is as long or longer than the buffer, the string is truncated and terminated with a null character.</param>
    <param name="nMaxCount">The maximum number of characters to copy to the buffer, including the null character. If the text exceeds this limit, it is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value is the length, in characters, of the copied string, not including the terminating null character. If the window has no title bar or text, if the title bar is empty, or if the window or control handle is invalid, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>This function cannot retrieve the text of an edit control in another application.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowTextW">
    <summary>Copies the text of the specified window's title bar (if it has one) into a buffer. If the specified window is a control, the text of the control is copied. However, <b>GetWindowText</b> cannot retrieve the text of a control in another application.</summary>
    <param name="hWnd">A handle to the window or control containing the text.</param>
    <param name="lpString">The buffer that will receive the text. If the string is as long or longer than the buffer, the string is truncated and terminated with a null character.</param>
    <param name="nMaxCount">The maximum number of characters to copy to the buffer, including the null character. If the text exceeds this limit, it is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value is the length, in characters, of the copied string, not including the terminating null character. If the window has no title bar or text, if the title bar is empty, or if the window or control handle is invalid, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>This function cannot retrieve the text of an edit control in another application.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowTextLength">
    <summary>Retrieves the length, in characters, of the specified window's title bar text (if the window has a title bar). If the specified window is a control, the function retrieves the length of the text within the control. However, <b>GetWindowTextLength</b> cannot retrieve the length of the text of an edit control in another application.</summary>
    <param name="hWnd">A handle to the window or control.</param>
    <returns>
      <para>If the function succeeds, the return value is the length, in characters, of the text. Under certain conditions, this value might be greater than the length of the text (see Remarks).</para>
      <para>If the window has no text, the return value is zero.</para>
      <para>Function failure is indicated by a return value of zero and a <see cref="GetLastError" /> result that is nonzero.</para>
      <blockquote>[!NOTE] This function does not clear the most recent error information. To determine success or failure, clear the most recent error information by calling <see cref="SetLastError" /> with 0, then call <see cref="GetLastError" />.</blockquote>
    </returns>
  </member>
  <member name="Windows.GetWindowTextLengthA">
    <summary>Retrieves the length, in characters, of the specified window's title bar text (if the window has a title bar). If the specified window is a control, the function retrieves the length of the text within the control. However, <b>GetWindowTextLength</b> cannot retrieve the length of the text of an edit control in another application.</summary>
    <param name="hWnd">A handle to the window or control.</param>
    <returns>
      <para>If the function succeeds, the return value is the length, in characters, of the text. Under certain conditions, this value might be greater than the length of the text (see Remarks).</para>
      <para>If the window has no text, the return value is zero.</para>
      <para>Function failure is indicated by a return value of zero and a <see cref="GetLastError" /> result that is nonzero.</para>
      <blockquote>[!NOTE] This function does not clear the most recent error information. To determine success or failure, clear the most recent error information by calling <see cref="SetLastError" /> with 0, then call <see cref="GetLastError" />.</blockquote>
    </returns>
  </member>
  <member name="Windows.GetWindowTextLengthW">
    <summary>Retrieves the length, in characters, of the specified window's title bar text (if the window has a title bar). If the specified window is a control, the function retrieves the length of the text within the control. However, <b>GetWindowTextLength</b> cannot retrieve the length of the text of an edit control in another application.</summary>
    <param name="hWnd">A handle to the window or control.</param>
    <returns>
      <para>If the function succeeds, the return value is the length, in characters, of the text. Under certain conditions, this value might be greater than the length of the text (see Remarks).</para>
      <para>If the window has no text, the return value is zero.</para>
      <para>Function failure is indicated by a return value of zero and a <see cref="GetLastError" /> result that is nonzero.</para>
      <blockquote>[!NOTE] This function does not clear the most recent error information. To determine success or failure, clear the most recent error information by calling <see cref="SetLastError" /> with 0, then call <see cref="GetLastError" />.</blockquote>
    </returns>
  </member>
  <member name="Windows.GetWindowTextLength">
    <summary>Retrieves the length, in characters, of the specified window's title bar text (if the window has a title bar). If the specified window is a control, the function retrieves the length of the text within the control. However, <b>GetWindowTextLength</b> cannot retrieve the length of the text of an edit control in another application.</summary>
    <param name="hWnd">A handle to the window or control.</param>
    <returns>
      <para>If the function succeeds, the return value is the length, in characters, of the text. Under certain conditions, this value might be greater than the length of the text (see Remarks).</para>
      <para>If the window has no text, the return value is zero.</para>
      <para>Function failure is indicated by a return value of zero and a <see cref="GetLastError" /> result that is nonzero.</para>
      <blockquote>[!NOTE] This function does not clear the most recent error information. To determine success or failure, clear the most recent error information by calling <see cref="SetLastError" /> with 0, then call <see cref="GetLastError" />.</blockquote>
    </returns>
  </member>
  <member name="Windows.GetWindowTextLengthA">
    <summary>Retrieves the length, in characters, of the specified window's title bar text (if the window has a title bar). If the specified window is a control, the function retrieves the length of the text within the control. However, <b>GetWindowTextLength</b> cannot retrieve the length of the text of an edit control in another application.</summary>
    <param name="hWnd">A handle to the window or control.</param>
    <returns>
      <para>If the function succeeds, the return value is the length, in characters, of the text. Under certain conditions, this value might be greater than the length of the text (see Remarks).</para>
      <para>If the window has no text, the return value is zero.</para>
      <para>Function failure is indicated by a return value of zero and a <see cref="GetLastError" /> result that is nonzero.</para>
      <blockquote>[!NOTE] This function does not clear the most recent error information. To determine success or failure, clear the most recent error information by calling <see cref="SetLastError" /> with 0, then call <see cref="GetLastError" />.</blockquote>
    </returns>
  </member>
  <member name="Windows.GetWindowTextLengthW">
    <summary>Retrieves the length, in characters, of the specified window's title bar text (if the window has a title bar). If the specified window is a control, the function retrieves the length of the text within the control. However, <b>GetWindowTextLength</b> cannot retrieve the length of the text of an edit control in another application.</summary>
    <param name="hWnd">A handle to the window or control.</param>
    <returns>
      <para>If the function succeeds, the return value is the length, in characters, of the text. Under certain conditions, this value might be greater than the length of the text (see Remarks).</para>
      <para>If the window has no text, the return value is zero.</para>
      <para>Function failure is indicated by a return value of zero and a <see cref="GetLastError" /> result that is nonzero.</para>
      <blockquote>[!NOTE] This function does not clear the most recent error information. To determine success or failure, clear the most recent error information by calling <see cref="SetLastError" /> with 0, then call <see cref="GetLastError" />.</blockquote>
    </returns>
  </member>
  <member name="Windows.GetWindowText">
    <summary>Copies the text of the specified window's title bar (if it has one) into a buffer. If the specified window is a control, the text of the control is copied. However, <b>GetWindowText</b> cannot retrieve the text of a control in another application.</summary>
    <param name="hWnd">A handle to the window or control containing the text.</param>
    <param name="lpString">The buffer that will receive the text. If the string is as long or longer than the buffer, the string is truncated and terminated with a null character.</param>
    <param name="nMaxCount">The maximum number of characters to copy to the buffer, including the null character. If the text exceeds this limit, it is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value is the length, in characters, of the copied string, not including the terminating null character. If the window has no title bar or text, if the title bar is empty, or if the window or control handle is invalid, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>This function cannot retrieve the text of an edit control in another application.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowTextA">
    <summary>Copies the text of the specified window's title bar (if it has one) into a buffer. If the specified window is a control, the text of the control is copied. However, <b>GetWindowText</b> cannot retrieve the text of a control in another application.</summary>
    <param name="hWnd">A handle to the window or control containing the text.</param>
    <param name="lpString">The buffer that will receive the text. If the string is as long or longer than the buffer, the string is truncated and terminated with a null character.</param>
    <param name="nMaxCount">The maximum number of characters to copy to the buffer, including the null character. If the text exceeds this limit, it is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value is the length, in characters, of the copied string, not including the terminating null character. If the window has no title bar or text, if the title bar is empty, or if the window or control handle is invalid, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>This function cannot retrieve the text of an edit control in another application.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowTextW">
    <summary>Copies the text of the specified window's title bar (if it has one) into a buffer. If the specified window is a control, the text of the control is copied. However, <b>GetWindowText</b> cannot retrieve the text of a control in another application.</summary>
    <param name="hWnd">A handle to the window or control containing the text.</param>
    <param name="lpString">The buffer that will receive the text. If the string is as long or longer than the buffer, the string is truncated and terminated with a null character.</param>
    <param name="nMaxCount">The maximum number of characters to copy to the buffer, including the null character. If the text exceeds this limit, it is truncated.</param>
    <returns>
      <para>If the function succeeds, the return value is the length, in characters, of the copied string, not including the terminating null character. If the window has no title bar or text, if the title bar is empty, or if the window or control handle is invalid, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>This function cannot retrieve the text of an edit control in another application.</para>
    </returns>
  </member>
  <member name="Windows.GetWindowThreadProcessId">
    <summary>Retrieves the identifier of the thread that created the specified window and, optionally, the identifier of the process that created the window.</summary>
    <param name="hWnd">A handle to the window.</param>
    <param name="lpdwProcessId">A pointer to a variable that receives the process identifier. If this parameter is not <b>NULL</b>, <b>GetWindowThreadProcessId</b> copies the identifier of the process to the variable; otherwise, it does not. If the function fails, the value of the variable is unchanged.</param>
    <returns>If the function succeeds, the return value is the identifier of the thread that created the window. If the window handle is invalid, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.GetWindowWord">
    <summary>Retrieves the 16-bit (<b>DWORD</b>) value at the specified offset into the extra window memory.</summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus four; for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32-bit integer. To retrieve any other value, specify one of the following values.</para>
      <para>| Constant | Value | Meaning | |-----------|-------|---------| | GWW_HINSTANCE | -6 | Retrieves a handle to the application instance. | | GWW_HWNDPARENT -8 | Retrieves a handle to the parent window, if any. | | GWW_ID | -12 | Retrieves the identifier of the window. |</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the requested value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GET_APPCOMMAND_LPARAM">
    <summary>Retrieves the application command from the specified<b>LPARAM</b> value.</summary>
    <param name="lParam">The value to be converted.</param>
  </member>
  <member name="Windows.GET_DEVICE_LPARAM">
    <summary>Retrieves the input device type from the specified <b>LPARAM</b> value.</summary>
    <param name="lParam">The value to be converted.</param>
  </member>
  <member name="Windows.GET_FLAGS_LPARAM">
    <summary>Retrieves the state of certain virtual keys from the specified<b>LPARAM</b> value.</summary>
    <param name="lParam">The value to be converted.</param>
  </member>
  <member name="Windows.GET_KEYSTATE_LPARAM">
    <summary>Retrieves the state of certain virtual keys from the specified <b>LPARAM</b> value.</summary>
    <param name="lParam">The value to be converted.</param>
  </member>
  <member name="Windows.GET_KEYSTATE_WPARAM">
    <summary>Retrieves the state of certain virtual keys from the specified <b>WPARAM</b> value.</summary>
    <param name="wParam">The value to be converted.</param>
  </member>
  <member name="Windows.GET_NCHITTEST_WPARAM">
    <summary>Retrieves the hit-test value from the specified<b>WPARAM</b> value.</summary>
    <param name="wParam">The value to be converted.</param>
  </member>
  <member name="Windows.GET_POINTERID_WPARAM">
    <summary>Retrieves the pointer ID using the specified value.</summary>
    <param name="wParam">The value to be converted.</param>
  </member>
  <member name="Windows.GET_RAWINPUT_CODE_WPARAM">
    <summary>Retrieves the input code from <i>wParam</i> in <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-input">WM_INPUT</a> message.</summary>
    <param name="wParam">
      <i>wParam</i> from <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-input">WM_INPUT</a> message.</param>
    <returns>
      <para>Input code value. Can be one of the following:</para>
      <para>| Value | Meaning | | -------------------- | --------------------------------------------------------------- | | <b>RIM_INPUT</b> 0 | Input occurred while the application was in the foreground. | | <b>RIM_INPUTSINK</b> 1 | Input occurred while the application was not in the foreground. |</para>
    </returns>
  </member>
  <member name="Windows.GET_WHEEL_DELTA_WPARAM">
    <summary>Retrieves the wheel-delta value from the specified <b>WPARAM</b> value.</summary>
    <param name="wParam">The value to be converted.</param>
  </member>
  <member name="Windows.GET_XBUTTON_WPARAM">
    <summary>Retrieves the state of certain buttons from the specified <b>WPARAM</b> value.</summary>
    <param name="wParam">The value to be converted.</param>
  </member>
  <member name="Windows.GID_ROTATE_ANGLE_FROM_ARGUMENT">
    <summary>The <b>GID_ROTATE_ANGLE_FROM_ARGUMENT</b> macro is used to interpret the<b>GID_ROTATE</b><i>ullArgument</i> value when receiving the value in the <a href="https://docs.microsoft.com//windows/desktop/wintouch/wm-gesture">WM_GESTURE</a> structure.</summary>
    <param name="arg">A value from a <a href="https://docs.microsoft.com//windows/desktop/wintouch/wm-gesture">WM_GESTURE</a> message.</param>
  </member>
  <member name="Windows.GID_ROTATE_ANGLE_TO_ARGUMENT">
    <summary>Converts a radian value to an argument for rotation gesture messages.</summary>
    <param name="arg">The angle of rotation as a double in radians.</param>
  </member>
  <member name="Windows.GrayString">
    <summary>
      <para>The <b>GrayString</b> function draws gray text at the specified location. The function draws the text by copying it into a memory bitmap, graying the bitmap, and then copying the bitmap to the screen. The function grays the text regardless of the selected brush and background. <b>GrayString</b> uses the font currently selected for the specified device context.</para>
      <para>If thelpOutputFuncparameter is <b>NULL</b>, GDI uses the <see cref="TextOut" /> function, and thelpDataparameter is assumed to be a pointer to the character string to be output. If the characters to be output cannot be handled by <b>TextOut</b> (for example, the string is stored as a bitmap), the application must supply its own output function.</para>
    </summary>
    <param name="hDC">A handle to the device context.</param>
    <param name="hBrush">A handle to the brush to be used for graying. If this parameter is <b>NULL</b>, the text is grayed with the same brush that was used to draw window text.</param>
    <param name="lpOutputFunc">A pointer to the application-defined function that will draw the string, or, if <see cref="TextOut" /> is to be used to draw the string, it is a <b>NULL</b> pointer. For details, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-graystringproc">OutputProc</a> callback function.</param>
    <param name="lpData">A pointer to data to be passed to the output function. If the <i>lpOutputFunc</i> parameter is <b>NULL</b>, <i>lpData</i> must be a pointer to the string to be output.</param>
    <param name="nCount">The number of characters to be output. If the <i>nCount</i> parameter is zero, <b>GrayString</b> calculates the length of the string (assuming <i>lpData</i> is a pointer to the string). If <i>nCount</i> is 1 and the function pointed to by <i>lpOutputFunc</i> returns <b>FALSE</b>, the image is shown but not grayed.</param>
    <param name="X">The device x-coordinate of the starting position of the rectangle that encloses the string.</param>
    <param name="Y">The device y-coordinate of the starting position of the rectangle that encloses the string.</param>
    <param name="nWidth">The width, in device units, of the rectangle that encloses the string. If this parameter is zero, <b>GrayString</b> calculates the width of the area, assuming <i>lpData</i> is a pointer to the string.</param>
    <param name="nHeight">The height, in device units, of the rectangle that encloses the string. If this parameter is zero, <b>GrayString</b> calculates the height of the area, assuming <i>lpData</i> is a pointer to the string.</param>
    <returns>
      <para>If the string is drawn, the return value is nonzero.</para>
      <para>If either the <see cref="TextOut" /> function or the application-defined output function returned zero, or there was insufficient memory to create a memory bitmap for graying, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GrayStringA">
    <summary>
      <para>The <b>GrayString</b> function draws gray text at the specified location. The function draws the text by copying it into a memory bitmap, graying the bitmap, and then copying the bitmap to the screen. The function grays the text regardless of the selected brush and background. <b>GrayString</b> uses the font currently selected for the specified device context.</para>
      <para>If thelpOutputFuncparameter is <b>NULL</b>, GDI uses the <see cref="TextOut" /> function, and thelpDataparameter is assumed to be a pointer to the character string to be output. If the characters to be output cannot be handled by <b>TextOut</b> (for example, the string is stored as a bitmap), the application must supply its own output function.</para>
    </summary>
    <param name="hDC">A handle to the device context.</param>
    <param name="hBrush">A handle to the brush to be used for graying. If this parameter is <b>NULL</b>, the text is grayed with the same brush that was used to draw window text.</param>
    <param name="lpOutputFunc">A pointer to the application-defined function that will draw the string, or, if <see cref="TextOut" /> is to be used to draw the string, it is a <b>NULL</b> pointer. For details, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-graystringproc">OutputProc</a> callback function.</param>
    <param name="lpData">A pointer to data to be passed to the output function. If the <i>lpOutputFunc</i> parameter is <b>NULL</b>, <i>lpData</i> must be a pointer to the string to be output.</param>
    <param name="nCount">The number of characters to be output. If the <i>nCount</i> parameter is zero, <b>GrayString</b> calculates the length of the string (assuming <i>lpData</i> is a pointer to the string). If <i>nCount</i> is 1 and the function pointed to by <i>lpOutputFunc</i> returns <b>FALSE</b>, the image is shown but not grayed.</param>
    <param name="X">The device x-coordinate of the starting position of the rectangle that encloses the string.</param>
    <param name="Y">The device y-coordinate of the starting position of the rectangle that encloses the string.</param>
    <param name="nWidth">The width, in device units, of the rectangle that encloses the string. If this parameter is zero, <b>GrayString</b> calculates the width of the area, assuming <i>lpData</i> is a pointer to the string.</param>
    <param name="nHeight">The height, in device units, of the rectangle that encloses the string. If this parameter is zero, <b>GrayString</b> calculates the height of the area, assuming <i>lpData</i> is a pointer to the string.</param>
    <returns>
      <para>If the string is drawn, the return value is nonzero.</para>
      <para>If either the <see cref="TextOut" /> function or the application-defined output function returned zero, or there was insufficient memory to create a memory bitmap for graying, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GrayStringW">
    <summary>
      <para>The <b>GrayString</b> function draws gray text at the specified location. The function draws the text by copying it into a memory bitmap, graying the bitmap, and then copying the bitmap to the screen. The function grays the text regardless of the selected brush and background. <b>GrayString</b> uses the font currently selected for the specified device context.</para>
      <para>If thelpOutputFuncparameter is <b>NULL</b>, GDI uses the <see cref="TextOut" /> function, and thelpDataparameter is assumed to be a pointer to the character string to be output. If the characters to be output cannot be handled by <b>TextOut</b> (for example, the string is stored as a bitmap), the application must supply its own output function.</para>
    </summary>
    <param name="hDC">A handle to the device context.</param>
    <param name="hBrush">A handle to the brush to be used for graying. If this parameter is <b>NULL</b>, the text is grayed with the same brush that was used to draw window text.</param>
    <param name="lpOutputFunc">A pointer to the application-defined function that will draw the string, or, if <see cref="TextOut" /> is to be used to draw the string, it is a <b>NULL</b> pointer. For details, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-graystringproc">OutputProc</a> callback function.</param>
    <param name="lpData">A pointer to data to be passed to the output function. If the <i>lpOutputFunc</i> parameter is <b>NULL</b>, <i>lpData</i> must be a pointer to the string to be output.</param>
    <param name="nCount">The number of characters to be output. If the <i>nCount</i> parameter is zero, <b>GrayString</b> calculates the length of the string (assuming <i>lpData</i> is a pointer to the string). If <i>nCount</i> is 1 and the function pointed to by <i>lpOutputFunc</i> returns <b>FALSE</b>, the image is shown but not grayed.</param>
    <param name="X">The device x-coordinate of the starting position of the rectangle that encloses the string.</param>
    <param name="Y">The device y-coordinate of the starting position of the rectangle that encloses the string.</param>
    <param name="nWidth">The width, in device units, of the rectangle that encloses the string. If this parameter is zero, <b>GrayString</b> calculates the width of the area, assuming <i>lpData</i> is a pointer to the string.</param>
    <param name="nHeight">The height, in device units, of the rectangle that encloses the string. If this parameter is zero, <b>GrayString</b> calculates the height of the area, assuming <i>lpData</i> is a pointer to the string.</param>
    <returns>
      <para>If the string is drawn, the return value is nonzero.</para>
      <para>If either the <see cref="TextOut" /> function or the application-defined output function returned zero, or there was insufficient memory to create a memory bitmap for graying, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GrayString">
    <summary>
      <para>The <b>GrayString</b> function draws gray text at the specified location. The function draws the text by copying it into a memory bitmap, graying the bitmap, and then copying the bitmap to the screen. The function grays the text regardless of the selected brush and background. <b>GrayString</b> uses the font currently selected for the specified device context.</para>
      <para>If thelpOutputFuncparameter is <b>NULL</b>, GDI uses the <see cref="TextOut" /> function, and thelpDataparameter is assumed to be a pointer to the character string to be output. If the characters to be output cannot be handled by <b>TextOut</b> (for example, the string is stored as a bitmap), the application must supply its own output function.</para>
    </summary>
    <param name="hDC">A handle to the device context.</param>
    <param name="hBrush">A handle to the brush to be used for graying. If this parameter is <b>NULL</b>, the text is grayed with the same brush that was used to draw window text.</param>
    <param name="lpOutputFunc">A pointer to the application-defined function that will draw the string, or, if <see cref="TextOut" /> is to be used to draw the string, it is a <b>NULL</b> pointer. For details, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-graystringproc">OutputProc</a> callback function.</param>
    <param name="lpData">A pointer to data to be passed to the output function. If the <i>lpOutputFunc</i> parameter is <b>NULL</b>, <i>lpData</i> must be a pointer to the string to be output.</param>
    <param name="nCount">The number of characters to be output. If the <i>nCount</i> parameter is zero, <b>GrayString</b> calculates the length of the string (assuming <i>lpData</i> is a pointer to the string). If <i>nCount</i> is 1 and the function pointed to by <i>lpOutputFunc</i> returns <b>FALSE</b>, the image is shown but not grayed.</param>
    <param name="X">The device x-coordinate of the starting position of the rectangle that encloses the string.</param>
    <param name="Y">The device y-coordinate of the starting position of the rectangle that encloses the string.</param>
    <param name="nWidth">The width, in device units, of the rectangle that encloses the string. If this parameter is zero, <b>GrayString</b> calculates the width of the area, assuming <i>lpData</i> is a pointer to the string.</param>
    <param name="nHeight">The height, in device units, of the rectangle that encloses the string. If this parameter is zero, <b>GrayString</b> calculates the height of the area, assuming <i>lpData</i> is a pointer to the string.</param>
    <returns>
      <para>If the string is drawn, the return value is nonzero.</para>
      <para>If either the <see cref="TextOut" /> function or the application-defined output function returned zero, or there was insufficient memory to create a memory bitmap for graying, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GrayStringA">
    <summary>
      <para>The <b>GrayString</b> function draws gray text at the specified location. The function draws the text by copying it into a memory bitmap, graying the bitmap, and then copying the bitmap to the screen. The function grays the text regardless of the selected brush and background. <b>GrayString</b> uses the font currently selected for the specified device context.</para>
      <para>If thelpOutputFuncparameter is <b>NULL</b>, GDI uses the <see cref="TextOut" /> function, and thelpDataparameter is assumed to be a pointer to the character string to be output. If the characters to be output cannot be handled by <b>TextOut</b> (for example, the string is stored as a bitmap), the application must supply its own output function.</para>
    </summary>
    <param name="hDC">A handle to the device context.</param>
    <param name="hBrush">A handle to the brush to be used for graying. If this parameter is <b>NULL</b>, the text is grayed with the same brush that was used to draw window text.</param>
    <param name="lpOutputFunc">A pointer to the application-defined function that will draw the string, or, if <see cref="TextOut" /> is to be used to draw the string, it is a <b>NULL</b> pointer. For details, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-graystringproc">OutputProc</a> callback function.</param>
    <param name="lpData">A pointer to data to be passed to the output function. If the <i>lpOutputFunc</i> parameter is <b>NULL</b>, <i>lpData</i> must be a pointer to the string to be output.</param>
    <param name="nCount">The number of characters to be output. If the <i>nCount</i> parameter is zero, <b>GrayString</b> calculates the length of the string (assuming <i>lpData</i> is a pointer to the string). If <i>nCount</i> is 1 and the function pointed to by <i>lpOutputFunc</i> returns <b>FALSE</b>, the image is shown but not grayed.</param>
    <param name="X">The device x-coordinate of the starting position of the rectangle that encloses the string.</param>
    <param name="Y">The device y-coordinate of the starting position of the rectangle that encloses the string.</param>
    <param name="nWidth">The width, in device units, of the rectangle that encloses the string. If this parameter is zero, <b>GrayString</b> calculates the width of the area, assuming <i>lpData</i> is a pointer to the string.</param>
    <param name="nHeight">The height, in device units, of the rectangle that encloses the string. If this parameter is zero, <b>GrayString</b> calculates the height of the area, assuming <i>lpData</i> is a pointer to the string.</param>
    <returns>
      <para>If the string is drawn, the return value is nonzero.</para>
      <para>If either the <see cref="TextOut" /> function or the application-defined output function returned zero, or there was insufficient memory to create a memory bitmap for graying, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.GrayStringW">
    <summary>
      <para>The <b>GrayString</b> function draws gray text at the specified location. The function draws the text by copying it into a memory bitmap, graying the bitmap, and then copying the bitmap to the screen. The function grays the text regardless of the selected brush and background. <b>GrayString</b> uses the font currently selected for the specified device context.</para>
      <para>If thelpOutputFuncparameter is <b>NULL</b>, GDI uses the <see cref="TextOut" /> function, and thelpDataparameter is assumed to be a pointer to the character string to be output. If the characters to be output cannot be handled by <b>TextOut</b> (for example, the string is stored as a bitmap), the application must supply its own output function.</para>
    </summary>
    <param name="hDC">A handle to the device context.</param>
    <param name="hBrush">A handle to the brush to be used for graying. If this parameter is <b>NULL</b>, the text is grayed with the same brush that was used to draw window text.</param>
    <param name="lpOutputFunc">A pointer to the application-defined function that will draw the string, or, if <see cref="TextOut" /> is to be used to draw the string, it is a <b>NULL</b> pointer. For details, see the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-graystringproc">OutputProc</a> callback function.</param>
    <param name="lpData">A pointer to data to be passed to the output function. If the <i>lpOutputFunc</i> parameter is <b>NULL</b>, <i>lpData</i> must be a pointer to the string to be output.</param>
    <param name="nCount">The number of characters to be output. If the <i>nCount</i> parameter is zero, <b>GrayString</b> calculates the length of the string (assuming <i>lpData</i> is a pointer to the string). If <i>nCount</i> is 1 and the function pointed to by <i>lpOutputFunc</i> returns <b>FALSE</b>, the image is shown but not grayed.</param>
    <param name="X">The device x-coordinate of the starting position of the rectangle that encloses the string.</param>
    <param name="Y">The device y-coordinate of the starting position of the rectangle that encloses the string.</param>
    <param name="nWidth">The width, in device units, of the rectangle that encloses the string. If this parameter is zero, <b>GrayString</b> calculates the width of the area, assuming <i>lpData</i> is a pointer to the string.</param>
    <param name="nHeight">The height, in device units, of the rectangle that encloses the string. If this parameter is zero, <b>GrayString</b> calculates the height of the area, assuming <i>lpData</i> is a pointer to the string.</param>
    <returns>
      <para>If the string is drawn, the return value is nonzero.</para>
      <para>If either the <see cref="TextOut" /> function or the application-defined output function returned zero, or there was insufficient memory to create a memory bitmap for graying, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.HAS_POINTER_CONFIDENCE_WPARAM">
    <summary>Checks whether the specified pointer message is considered intentional rather than accidental.</summary>
    <param name="wParam">The value to be converted.</param>
  </member>
  <member name="Windows.HideCaret">
    <summary>Removes the caret from the screen. Hiding a caret does not destroy its current shape or invalidate the insertion point.</summary>
    <param name="hWnd">A handle to the window that owns the caret. If this parameter is <b>NULL</b>, <b>HideCaret</b> searches the current task for the window that owns the caret.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.HiliteMenuItem">
    <summary>Adds or removes highlighting from an item in a menu bar.</summary>
    <param name="hWnd">A handle to the window that contains the menu.</param>
    <param name="hMenu">A handle to the menu bar that contains the item.</param>
    <param name="uIDHiliteItem">The menu item. This parameter is either the identifier of the menu item or the offset of the menu item in the menu bar, depending on the value of the <i>uHilite</i> parameter.</param>
    <param name="uHilite">
      <para>Controls the interpretation of the <i>uItemHilite</i> parameter and indicates whether the menu item is highlighted. This parameter must be a combination of either <b>MF_BYCOMMAND</b> or <b>MF_BYPOSITION</b> and <b>MF_HILITE</b> or <b>MF_UNHILITE</b>.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uItemHilite</i> gives the identifier of the menu item.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uItemHilite</i> gives the zero-based relative position of the menu item.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_HILITE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080L</term>
              </listheader>
            </list>
          </description>
          <description>Highlights the menu item. If this flag is not specified, the highlighting is removed from the item.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_UNHILITE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Removes highlighting from the menu item.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the menu item is set to the specified highlight state, the return value is nonzero.</para>
      <para>If the menu item is not set to the specified highlight state, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.InflateRect">
    <summary>The <b>InflateRect</b> function increases or decreases the width and height of the specified rectangle. The <b>InflateRect</b> function adds <i>-dx</i> units to the left end and <i>dx</i> to the right end of the rectangle and <i>-dy</i> units to the top and <i>dy</i> to the bottom. The <i>dx</i> and <i>dy</i> parameters are signed values; positive values increase the width and height, and negative values decrease them.</summary>
    <param name="lprc">A pointer to the <see cref="RECT" /> structure that increases or decreases in size.</param>
    <param name="dx">The amount to increase or decrease the rectangle width. This parameter must be negative to decrease the width.</param>
    <param name="dy">The amount to increase or decrease the rectangle height. This parameter must be negative to decrease the height.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.InheritWindowMonitor">
    <summary>Causes a specified window to inherit the monitor of another window.</summary>
    <param name="hwnd">An HWND handle to the window for which monitor inheritance is set.</param>
    <param name="hwndInherit">An HWND handle to the window from which the monitor is inherited.</param>
    <returns>True if the call is successful.</returns>
  </member>
  <member name="Windows.InitializeTouchInjection">
    <summary>
      <para>Configures the touch injection context for the calling application and initializes the maximum number of simultaneous contacts that the app can inject.<div><b>Note</b>  <b>InitializeTouchInjection</b> must precede any call to <see cref="InjectTouchInput" />.</div></para>
    </summary>
    <param name="maxCount">
      <para>The maximum number of touch contacts.</para>
      <para>The <i>maxCount</i> parameter must be greater than 0 and less than or equal to MAX_TOUCH_COUNT (256) as defined in winuser.h.</para>
    </param>
    <param name="dwMode">
      <para>The contact visualization mode.</para>
      <para>The <i>dwMode</i> parameter must be <a href="https://docs.microsoft.com//previous-versions/windows/desktop/input_touchinjection/constants">TOUCH_FEEDBACK_DEFAULT</a>, <b>TOUCH_FEEDBACK_INDIRECT</b>, or <b>TOUCH_FEEDBACK_NONE</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is TRUE.</para>
      <para>If the function fails, the return value is FALSE. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.InjectSyntheticPointerInput">
    <summary>Simulates pointer input (pen or touch).</summary>
    <param name="device">A handle to the pointer injection device created by <see cref="CreateSyntheticPointerDevice" />.</param>
    <param name="pointerInfo">
      <para>An array of <see cref="POINTER_TYPE_INFO" /> structures represneting the injected pointers.</para>
      <para>The type must match the <i>pointerType</i> parameter of the <see cref="CreateSyntheticPointerDevice" /> call that created the injection device.</para>
      <para>The ptPixelLocation for each POINTER_TYPE_INFO is specified relative to top left of the virtual screen:</para>
    </param>
    <param name="count">
      <para>The number of contacts.</para>
      <para>For <see cref="PT_TOUCH" /> this value must be greater than 0 and less than or equal to <a href="https://docs.microsoft.com//previous-versions/windows/desktop/input_touchinjection/constants">MAX_TOUCH_COUNT</a>.</para>
      <para>For <see cref="PT_PEN" /> this value must be 1.</para>
    </param>
    <returns>
      <para>If this function succeeds, it returns TRUE.</para>
      <para>Otherwise, it returns FALSE. To retrieve extended error information, call the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.InjectTouchInput">
    <summary>
      <para>Simulates touch input.<div><b>Note</b>  <see cref="InitializeTouchInjection" /> must precede any call to <see cref="InjectTouchInput" />.</div></para>
    </summary>
    <param name="count">
      <para>The size of the array in <i>contacts</i>.</para>
      <para>The maximum value for <i>count</i> is specified by the <i>maxCount</i> parameter of the <see cref="InitializeTouchInjection" /> function.</para>
    </param>
    <param name="contacts">Array of <see cref="POINTER_TOUCH_INFO" /> structures that represents all contacts on the desktop. The screen coordinates of each contact must be within the bounds of the desktop.</param>
    <returns>
      <para>If the function succeeds, the return value is non-zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.InSendMessage">
    <summary>
      <para>Determines whether the current window procedure is processing a message that was sent from another thread (in the same process or a different process) by a call to the <see cref="SendMessage" /> function.</para>
      <para>To obtain additional information about how the message was sent, use the <see cref="InSendMessageEx" /> function.</para>
    </summary>
    <returns>
      <para>If the window procedure is processing a message sent to it from another thread using the <see cref="SendMessage" /> function, the return value is nonzero.</para>
      <para>If the window procedure is not processing a message sent to it from another thread using the <see cref="SendMessage" /> function, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.InSendMessageEx">
    <summary>Determines whether the current window procedure is processing a message that was sent from another thread (in the same process or a different process).</summary>
    <param name="lpReserved">Reserved; must be <b>NULL</b>.</param>
    <returns>
      <para>If the message was not sent, the return value is <b>ISMEX_NOSEND</b> (0x00000000). Otherwise, the return value is one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ISMEX_CALLBACK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>The message was sent using the <see cref="SendMessageCallback" /> function. The thread that sent the message is not blocked.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ISMEX_NOTIFY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>The message was sent using the <see cref="SendNotifyMessage" /> function. The thread that sent the message is not blocked.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ISMEX_REPLIED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>The window procedure has processed the message. The thread that sent the message is no longer blocked.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ISMEX_SEND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>The message was sent using the <see cref="SendMessage" /> or <see cref="SendMessageTimeout" /> function. If <b>ISMEX_REPLIED</b> is not set, the thread that sent the message is blocked.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.InsertMenu">
    <summary>
      <para>Inserts a new menu item into a menu, moving other items down the menu.</para>
      <div>
        <b>Note</b>  The <b>InsertMenu</b> function has been superseded by the <see cref="InsertMenuItem" /> function. You can still use <b>InsertMenu</b>, however, if you do not need any of the extended features of <b>InsertMenuItem</b>.</div>
    </summary>
    <param name="hMenu">A handle to the menu to be changed.</param>
    <param name="uPosition">The menu item before which the new menu item is to be inserted, as determined by the <i>uFlags</i> parameter.</param>
    <param name="uFlags">
      <para>Controls the interpretation of the <i>uPosition</i> parameter and the content, appearance, and behavior of the new menu item. This parameter must include one of the following required values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the identifier of the menu item. The <b>MF_BYCOMMAND</b> flag is the default if neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the zero-based relative position of the new menu item. If <i>uPosition</i> is -1, the new menu item is appended to the end of the menu.</description>
        </listheader>
      </list> <para>The parameter must also include at least one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_BITMAP</b></term></listheader><listheader><term>0x00000004L</term></listheader></list></description><description>Uses a bitmap as the menu item. The <i>lpNewItem</i> parameter contains a handle to the bitmap.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_CHECKED</b></term></listheader><listheader><term>0x00000008L</term></listheader></list></description><description>Places a check mark next to the menu item. If the application provides check-mark bitmaps (see <see cref="SetMenuItemBitmaps" />), this flag displays the check-mark bitmap next to the menu item.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_DISABLED</b></term></listheader><listheader><term>0x00000002L</term></listheader></list></description><description>Disables the menu item so that it cannot be selected, but does not gray it.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_ENABLED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Enables the menu item so that it can be selected and restores it from its grayed state.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_GRAYED</b></term></listheader><listheader><term>0x00000001L</term></listheader></list></description><description>Disables the menu item and grays it so it cannot be selected.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBARBREAK</b></term></listheader><listheader><term>0x00000020L</term></listheader></list></description><description>Functions the same as the <b>MF_MENUBREAK</b> flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBREAK</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>Places the item on a new line (for menu bars) or in a new column (for a drop-down menu, submenu, or shortcut menu) without separating columns.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_OWNERDRAW</b></term></listheader><listheader><term>0x00000100L</term></listheader></list></description><description>Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns the menu receives a <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> message to retrieve the width and height of the menu item. The <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_POPUP</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>Specifies that the menu item opens a drop-down menu or submenu. The <i>uIDNewItem</i> parameter specifies a handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar or a menu item that opens a submenu to a drop-down menu, submenu, or shortcut menu.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_SEPARATOR</b></term></listheader><listheader><term>0x00000800L</term></listheader></list></description><description>Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted. The 							<i>lpNewItem</i> and <i>uIDNewItem</i> parameters are ignored.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_STRING</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Specifies that the menu item is a text string; the 							<i>lpNewItem</i> parameter is a pointer to the string.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_UNCHECKED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Does not place a check mark next to the menu item (default). If the application supplies check-mark bitmaps (see the <see cref="SetMenuItemBitmaps" /> function), this flag displays the clear bitmap next to the menu item.</description></listheader></list></param>
    <param name="uIDNewItem">The identifier of the new menu item or, if the <i>uFlags</i> parameter has the <b>MF_POPUP</b> flag set, a handle to the drop-down menu or submenu.</param>
    <param name="lpNewItem">
      <para>The content of the new menu item. The interpretation of <i>lpNewItem</i> depends on whether the <i>uFlags</i> parameter includes the <b>MF_BITMAP</b>, <b>MF_OWNERDRAW</b>, or <b>MF_STRING</b> flag, as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a bitmap handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>Contains an application-supplied value that can be used to maintain additional data related to the menu item. The value is in the <b>itemData</b> member of the structure pointed to by the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message sent when the menu item is created or its appearance is updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a pointer to a null-terminated string (the default).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.InsertMenuA">
    <summary>
      <para>Inserts a new menu item into a menu, moving other items down the menu.</para>
      <div>
        <b>Note</b>  The <b>InsertMenu</b> function has been superseded by the <see cref="InsertMenuItem" /> function. You can still use <b>InsertMenu</b>, however, if you do not need any of the extended features of <b>InsertMenuItem</b>.</div>
    </summary>
    <param name="hMenu">A handle to the menu to be changed.</param>
    <param name="uPosition">The menu item before which the new menu item is to be inserted, as determined by the <i>uFlags</i> parameter.</param>
    <param name="uFlags">
      <para>Controls the interpretation of the <i>uPosition</i> parameter and the content, appearance, and behavior of the new menu item. This parameter must include one of the following required values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the identifier of the menu item. The <b>MF_BYCOMMAND</b> flag is the default if neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the zero-based relative position of the new menu item. If <i>uPosition</i> is -1, the new menu item is appended to the end of the menu.</description>
        </listheader>
      </list> <para>The parameter must also include at least one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_BITMAP</b></term></listheader><listheader><term>0x00000004L</term></listheader></list></description><description>Uses a bitmap as the menu item. The <i>lpNewItem</i> parameter contains a handle to the bitmap.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_CHECKED</b></term></listheader><listheader><term>0x00000008L</term></listheader></list></description><description>Places a check mark next to the menu item. If the application provides check-mark bitmaps (see <see cref="SetMenuItemBitmaps" />), this flag displays the check-mark bitmap next to the menu item.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_DISABLED</b></term></listheader><listheader><term>0x00000002L</term></listheader></list></description><description>Disables the menu item so that it cannot be selected, but does not gray it.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_ENABLED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Enables the menu item so that it can be selected and restores it from its grayed state.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_GRAYED</b></term></listheader><listheader><term>0x00000001L</term></listheader></list></description><description>Disables the menu item and grays it so it cannot be selected.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBARBREAK</b></term></listheader><listheader><term>0x00000020L</term></listheader></list></description><description>Functions the same as the <b>MF_MENUBREAK</b> flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBREAK</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>Places the item on a new line (for menu bars) or in a new column (for a drop-down menu, submenu, or shortcut menu) without separating columns.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_OWNERDRAW</b></term></listheader><listheader><term>0x00000100L</term></listheader></list></description><description>Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns the menu receives a <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> message to retrieve the width and height of the menu item. The <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_POPUP</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>Specifies that the menu item opens a drop-down menu or submenu. The <i>uIDNewItem</i> parameter specifies a handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar or a menu item that opens a submenu to a drop-down menu, submenu, or shortcut menu.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_SEPARATOR</b></term></listheader><listheader><term>0x00000800L</term></listheader></list></description><description>Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted. The 							<i>lpNewItem</i> and <i>uIDNewItem</i> parameters are ignored.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_STRING</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Specifies that the menu item is a text string; the 							<i>lpNewItem</i> parameter is a pointer to the string.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_UNCHECKED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Does not place a check mark next to the menu item (default). If the application supplies check-mark bitmaps (see the <see cref="SetMenuItemBitmaps" /> function), this flag displays the clear bitmap next to the menu item.</description></listheader></list></param>
    <param name="uIDNewItem">The identifier of the new menu item or, if the <i>uFlags</i> parameter has the <b>MF_POPUP</b> flag set, a handle to the drop-down menu or submenu.</param>
    <param name="lpNewItem">
      <para>The content of the new menu item. The interpretation of <i>lpNewItem</i> depends on whether the <i>uFlags</i> parameter includes the <b>MF_BITMAP</b>, <b>MF_OWNERDRAW</b>, or <b>MF_STRING</b> flag, as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a bitmap handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>Contains an application-supplied value that can be used to maintain additional data related to the menu item. The value is in the <b>itemData</b> member of the structure pointed to by the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message sent when the menu item is created or its appearance is updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a pointer to a null-terminated string (the default).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.InsertMenuW">
    <summary>
      <para>Inserts a new menu item into a menu, moving other items down the menu.</para>
      <div>
        <b>Note</b>  The <b>InsertMenu</b> function has been superseded by the <see cref="InsertMenuItem" /> function. You can still use <b>InsertMenu</b>, however, if you do not need any of the extended features of <b>InsertMenuItem</b>.</div>
    </summary>
    <param name="hMenu">A handle to the menu to be changed.</param>
    <param name="uPosition">The menu item before which the new menu item is to be inserted, as determined by the <i>uFlags</i> parameter.</param>
    <param name="uFlags">
      <para>Controls the interpretation of the <i>uPosition</i> parameter and the content, appearance, and behavior of the new menu item. This parameter must include one of the following required values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the identifier of the menu item. The <b>MF_BYCOMMAND</b> flag is the default if neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the zero-based relative position of the new menu item. If <i>uPosition</i> is -1, the new menu item is appended to the end of the menu.</description>
        </listheader>
      </list> <para>The parameter must also include at least one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_BITMAP</b></term></listheader><listheader><term>0x00000004L</term></listheader></list></description><description>Uses a bitmap as the menu item. The <i>lpNewItem</i> parameter contains a handle to the bitmap.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_CHECKED</b></term></listheader><listheader><term>0x00000008L</term></listheader></list></description><description>Places a check mark next to the menu item. If the application provides check-mark bitmaps (see <see cref="SetMenuItemBitmaps" />), this flag displays the check-mark bitmap next to the menu item.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_DISABLED</b></term></listheader><listheader><term>0x00000002L</term></listheader></list></description><description>Disables the menu item so that it cannot be selected, but does not gray it.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_ENABLED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Enables the menu item so that it can be selected and restores it from its grayed state.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_GRAYED</b></term></listheader><listheader><term>0x00000001L</term></listheader></list></description><description>Disables the menu item and grays it so it cannot be selected.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBARBREAK</b></term></listheader><listheader><term>0x00000020L</term></listheader></list></description><description>Functions the same as the <b>MF_MENUBREAK</b> flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBREAK</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>Places the item on a new line (for menu bars) or in a new column (for a drop-down menu, submenu, or shortcut menu) without separating columns.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_OWNERDRAW</b></term></listheader><listheader><term>0x00000100L</term></listheader></list></description><description>Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns the menu receives a <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> message to retrieve the width and height of the menu item. The <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_POPUP</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>Specifies that the menu item opens a drop-down menu or submenu. The <i>uIDNewItem</i> parameter specifies a handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar or a menu item that opens a submenu to a drop-down menu, submenu, or shortcut menu.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_SEPARATOR</b></term></listheader><listheader><term>0x00000800L</term></listheader></list></description><description>Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted. The 							<i>lpNewItem</i> and <i>uIDNewItem</i> parameters are ignored.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_STRING</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Specifies that the menu item is a text string; the 							<i>lpNewItem</i> parameter is a pointer to the string.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_UNCHECKED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Does not place a check mark next to the menu item (default). If the application supplies check-mark bitmaps (see the <see cref="SetMenuItemBitmaps" /> function), this flag displays the clear bitmap next to the menu item.</description></listheader></list></param>
    <param name="uIDNewItem">The identifier of the new menu item or, if the <i>uFlags</i> parameter has the <b>MF_POPUP</b> flag set, a handle to the drop-down menu or submenu.</param>
    <param name="lpNewItem">
      <para>The content of the new menu item. The interpretation of <i>lpNewItem</i> depends on whether the <i>uFlags</i> parameter includes the <b>MF_BITMAP</b>, <b>MF_OWNERDRAW</b>, or <b>MF_STRING</b> flag, as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a bitmap handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>Contains an application-supplied value that can be used to maintain additional data related to the menu item. The value is in the <b>itemData</b> member of the structure pointed to by the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message sent when the menu item is created or its appearance is updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a pointer to a null-terminated string (the default).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.InsertMenuItem">
    <summary>Inserts a new menu item at the specified position in a menu.</summary>
    <param name="hmenu">A handle to the menu in which the new menu item is inserted.</param>
    <param name="item">The identifier or position of the menu item before which to insert the new item. The meaning of this parameter depends on the value of <i>fByPosition</i>.</param>
    <param name="fByPosition">Controls the meaning of <i>item</i>. If this parameter is <b>FALSE</b>, <i>item</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com//windows/desktop/menurc/about-menus">Accessing Menu Items Programmatically</a> for more information.</param>
    <param name="lpmi">A pointer to a <see cref="MENUITEMINFO" /> structure that contains information about the new menu item.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.InsertMenuItemA">
    <summary>Inserts a new menu item at the specified position in a menu.</summary>
    <param name="hmenu">A handle to the menu in which the new menu item is inserted.</param>
    <param name="item">The identifier or position of the menu item before which to insert the new item. The meaning of this parameter depends on the value of <i>fByPosition</i>.</param>
    <param name="fByPosition">Controls the meaning of <i>item</i>. If this parameter is <b>FALSE</b>, <i>item</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com//windows/desktop/menurc/about-menus">Accessing Menu Items Programmatically</a> for more information.</param>
    <param name="lpmi">A pointer to a <see cref="MENUITEMINFO" /> structure that contains information about the new menu item.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.InsertMenuItemW">
    <summary>Inserts a new menu item at the specified position in a menu.</summary>
    <param name="hmenu">A handle to the menu in which the new menu item is inserted.</param>
    <param name="item">The identifier or position of the menu item before which to insert the new item. The meaning of this parameter depends on the value of <i>fByPosition</i>.</param>
    <param name="fByPosition">Controls the meaning of <i>item</i>. If this parameter is <b>FALSE</b>, <i>item</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com//windows/desktop/menurc/about-menus">Accessing Menu Items Programmatically</a> for more information.</param>
    <param name="lpmi">A pointer to a <see cref="MENUITEMINFO" /> structure that contains information about the new menu item.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.InsertMenuItem">
    <summary>Inserts a new menu item at the specified position in a menu.</summary>
    <param name="hmenu">A handle to the menu in which the new menu item is inserted.</param>
    <param name="item">The identifier or position of the menu item before which to insert the new item. The meaning of this parameter depends on the value of <i>fByPosition</i>.</param>
    <param name="fByPosition">Controls the meaning of <i>item</i>. If this parameter is <b>FALSE</b>, <i>item</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com//windows/desktop/menurc/about-menus">Accessing Menu Items Programmatically</a> for more information.</param>
    <param name="lpmi">A pointer to a <see cref="MENUITEMINFO" /> structure that contains information about the new menu item.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.InsertMenuItemA">
    <summary>Inserts a new menu item at the specified position in a menu.</summary>
    <param name="hmenu">A handle to the menu in which the new menu item is inserted.</param>
    <param name="item">The identifier or position of the menu item before which to insert the new item. The meaning of this parameter depends on the value of <i>fByPosition</i>.</param>
    <param name="fByPosition">Controls the meaning of <i>item</i>. If this parameter is <b>FALSE</b>, <i>item</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com//windows/desktop/menurc/about-menus">Accessing Menu Items Programmatically</a> for more information.</param>
    <param name="lpmi">A pointer to a <see cref="MENUITEMINFO" /> structure that contains information about the new menu item.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.InsertMenuItemW">
    <summary>Inserts a new menu item at the specified position in a menu.</summary>
    <param name="hmenu">A handle to the menu in which the new menu item is inserted.</param>
    <param name="item">The identifier or position of the menu item before which to insert the new item. The meaning of this parameter depends on the value of <i>fByPosition</i>.</param>
    <param name="fByPosition">Controls the meaning of <i>item</i>. If this parameter is <b>FALSE</b>, <i>item</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com//windows/desktop/menurc/about-menus">Accessing Menu Items Programmatically</a> for more information.</param>
    <param name="lpmi">A pointer to a <see cref="MENUITEMINFO" /> structure that contains information about the new menu item.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.InsertMenu">
    <summary>
      <para>Inserts a new menu item into a menu, moving other items down the menu.</para>
      <div>
        <b>Note</b>  The <b>InsertMenu</b> function has been superseded by the <see cref="InsertMenuItem" /> function. You can still use <b>InsertMenu</b>, however, if you do not need any of the extended features of <b>InsertMenuItem</b>.</div>
    </summary>
    <param name="hMenu">A handle to the menu to be changed.</param>
    <param name="uPosition">The menu item before which the new menu item is to be inserted, as determined by the <i>uFlags</i> parameter.</param>
    <param name="uFlags">
      <para>Controls the interpretation of the <i>uPosition</i> parameter and the content, appearance, and behavior of the new menu item. This parameter must include one of the following required values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the identifier of the menu item. The <b>MF_BYCOMMAND</b> flag is the default if neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the zero-based relative position of the new menu item. If <i>uPosition</i> is -1, the new menu item is appended to the end of the menu.</description>
        </listheader>
      </list> <para>The parameter must also include at least one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_BITMAP</b></term></listheader><listheader><term>0x00000004L</term></listheader></list></description><description>Uses a bitmap as the menu item. The <i>lpNewItem</i> parameter contains a handle to the bitmap.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_CHECKED</b></term></listheader><listheader><term>0x00000008L</term></listheader></list></description><description>Places a check mark next to the menu item. If the application provides check-mark bitmaps (see <see cref="SetMenuItemBitmaps" />), this flag displays the check-mark bitmap next to the menu item.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_DISABLED</b></term></listheader><listheader><term>0x00000002L</term></listheader></list></description><description>Disables the menu item so that it cannot be selected, but does not gray it.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_ENABLED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Enables the menu item so that it can be selected and restores it from its grayed state.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_GRAYED</b></term></listheader><listheader><term>0x00000001L</term></listheader></list></description><description>Disables the menu item and grays it so it cannot be selected.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBARBREAK</b></term></listheader><listheader><term>0x00000020L</term></listheader></list></description><description>Functions the same as the <b>MF_MENUBREAK</b> flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBREAK</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>Places the item on a new line (for menu bars) or in a new column (for a drop-down menu, submenu, or shortcut menu) without separating columns.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_OWNERDRAW</b></term></listheader><listheader><term>0x00000100L</term></listheader></list></description><description>Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns the menu receives a <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> message to retrieve the width and height of the menu item. The <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_POPUP</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>Specifies that the menu item opens a drop-down menu or submenu. The <i>uIDNewItem</i> parameter specifies a handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar or a menu item that opens a submenu to a drop-down menu, submenu, or shortcut menu.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_SEPARATOR</b></term></listheader><listheader><term>0x00000800L</term></listheader></list></description><description>Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted. The 							<i>lpNewItem</i> and <i>uIDNewItem</i> parameters are ignored.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_STRING</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Specifies that the menu item is a text string; the 							<i>lpNewItem</i> parameter is a pointer to the string.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_UNCHECKED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Does not place a check mark next to the menu item (default). If the application supplies check-mark bitmaps (see the <see cref="SetMenuItemBitmaps" /> function), this flag displays the clear bitmap next to the menu item.</description></listheader></list></param>
    <param name="uIDNewItem">The identifier of the new menu item or, if the <i>uFlags</i> parameter has the <b>MF_POPUP</b> flag set, a handle to the drop-down menu or submenu.</param>
    <param name="lpNewItem">
      <para>The content of the new menu item. The interpretation of <i>lpNewItem</i> depends on whether the <i>uFlags</i> parameter includes the <b>MF_BITMAP</b>, <b>MF_OWNERDRAW</b>, or <b>MF_STRING</b> flag, as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a bitmap handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>Contains an application-supplied value that can be used to maintain additional data related to the menu item. The value is in the <b>itemData</b> member of the structure pointed to by the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message sent when the menu item is created or its appearance is updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a pointer to a null-terminated string (the default).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.InsertMenuA">
    <summary>
      <para>Inserts a new menu item into a menu, moving other items down the menu.</para>
      <div>
        <b>Note</b>  The <b>InsertMenu</b> function has been superseded by the <see cref="InsertMenuItem" /> function. You can still use <b>InsertMenu</b>, however, if you do not need any of the extended features of <b>InsertMenuItem</b>.</div>
    </summary>
    <param name="hMenu">A handle to the menu to be changed.</param>
    <param name="uPosition">The menu item before which the new menu item is to be inserted, as determined by the <i>uFlags</i> parameter.</param>
    <param name="uFlags">
      <para>Controls the interpretation of the <i>uPosition</i> parameter and the content, appearance, and behavior of the new menu item. This parameter must include one of the following required values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the identifier of the menu item. The <b>MF_BYCOMMAND</b> flag is the default if neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the zero-based relative position of the new menu item. If <i>uPosition</i> is -1, the new menu item is appended to the end of the menu.</description>
        </listheader>
      </list> <para>The parameter must also include at least one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_BITMAP</b></term></listheader><listheader><term>0x00000004L</term></listheader></list></description><description>Uses a bitmap as the menu item. The <i>lpNewItem</i> parameter contains a handle to the bitmap.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_CHECKED</b></term></listheader><listheader><term>0x00000008L</term></listheader></list></description><description>Places a check mark next to the menu item. If the application provides check-mark bitmaps (see <see cref="SetMenuItemBitmaps" />), this flag displays the check-mark bitmap next to the menu item.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_DISABLED</b></term></listheader><listheader><term>0x00000002L</term></listheader></list></description><description>Disables the menu item so that it cannot be selected, but does not gray it.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_ENABLED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Enables the menu item so that it can be selected and restores it from its grayed state.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_GRAYED</b></term></listheader><listheader><term>0x00000001L</term></listheader></list></description><description>Disables the menu item and grays it so it cannot be selected.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBARBREAK</b></term></listheader><listheader><term>0x00000020L</term></listheader></list></description><description>Functions the same as the <b>MF_MENUBREAK</b> flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBREAK</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>Places the item on a new line (for menu bars) or in a new column (for a drop-down menu, submenu, or shortcut menu) without separating columns.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_OWNERDRAW</b></term></listheader><listheader><term>0x00000100L</term></listheader></list></description><description>Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns the menu receives a <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> message to retrieve the width and height of the menu item. The <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_POPUP</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>Specifies that the menu item opens a drop-down menu or submenu. The <i>uIDNewItem</i> parameter specifies a handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar or a menu item that opens a submenu to a drop-down menu, submenu, or shortcut menu.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_SEPARATOR</b></term></listheader><listheader><term>0x00000800L</term></listheader></list></description><description>Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted. The 							<i>lpNewItem</i> and <i>uIDNewItem</i> parameters are ignored.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_STRING</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Specifies that the menu item is a text string; the 							<i>lpNewItem</i> parameter is a pointer to the string.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_UNCHECKED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Does not place a check mark next to the menu item (default). If the application supplies check-mark bitmaps (see the <see cref="SetMenuItemBitmaps" /> function), this flag displays the clear bitmap next to the menu item.</description></listheader></list></param>
    <param name="uIDNewItem">The identifier of the new menu item or, if the <i>uFlags</i> parameter has the <b>MF_POPUP</b> flag set, a handle to the drop-down menu or submenu.</param>
    <param name="lpNewItem">
      <para>The content of the new menu item. The interpretation of <i>lpNewItem</i> depends on whether the <i>uFlags</i> parameter includes the <b>MF_BITMAP</b>, <b>MF_OWNERDRAW</b>, or <b>MF_STRING</b> flag, as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a bitmap handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>Contains an application-supplied value that can be used to maintain additional data related to the menu item. The value is in the <b>itemData</b> member of the structure pointed to by the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message sent when the menu item is created or its appearance is updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a pointer to a null-terminated string (the default).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.InsertMenuW">
    <summary>
      <para>Inserts a new menu item into a menu, moving other items down the menu.</para>
      <div>
        <b>Note</b>  The <b>InsertMenu</b> function has been superseded by the <see cref="InsertMenuItem" /> function. You can still use <b>InsertMenu</b>, however, if you do not need any of the extended features of <b>InsertMenuItem</b>.</div>
    </summary>
    <param name="hMenu">A handle to the menu to be changed.</param>
    <param name="uPosition">The menu item before which the new menu item is to be inserted, as determined by the <i>uFlags</i> parameter.</param>
    <param name="uFlags">
      <para>Controls the interpretation of the <i>uPosition</i> parameter and the content, appearance, and behavior of the new menu item. This parameter must include one of the following required values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the identifier of the menu item. The <b>MF_BYCOMMAND</b> flag is the default if neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the zero-based relative position of the new menu item. If <i>uPosition</i> is -1, the new menu item is appended to the end of the menu.</description>
        </listheader>
      </list> <para>The parameter must also include at least one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_BITMAP</b></term></listheader><listheader><term>0x00000004L</term></listheader></list></description><description>Uses a bitmap as the menu item. The <i>lpNewItem</i> parameter contains a handle to the bitmap.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_CHECKED</b></term></listheader><listheader><term>0x00000008L</term></listheader></list></description><description>Places a check mark next to the menu item. If the application provides check-mark bitmaps (see <see cref="SetMenuItemBitmaps" />), this flag displays the check-mark bitmap next to the menu item.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_DISABLED</b></term></listheader><listheader><term>0x00000002L</term></listheader></list></description><description>Disables the menu item so that it cannot be selected, but does not gray it.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_ENABLED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Enables the menu item so that it can be selected and restores it from its grayed state.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_GRAYED</b></term></listheader><listheader><term>0x00000001L</term></listheader></list></description><description>Disables the menu item and grays it so it cannot be selected.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBARBREAK</b></term></listheader><listheader><term>0x00000020L</term></listheader></list></description><description>Functions the same as the <b>MF_MENUBREAK</b> flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBREAK</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>Places the item on a new line (for menu bars) or in a new column (for a drop-down menu, submenu, or shortcut menu) without separating columns.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_OWNERDRAW</b></term></listheader><listheader><term>0x00000100L</term></listheader></list></description><description>Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns the menu receives a <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> message to retrieve the width and height of the menu item. The <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_POPUP</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>Specifies that the menu item opens a drop-down menu or submenu. The <i>uIDNewItem</i> parameter specifies a handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar or a menu item that opens a submenu to a drop-down menu, submenu, or shortcut menu.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_SEPARATOR</b></term></listheader><listheader><term>0x00000800L</term></listheader></list></description><description>Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted. The 							<i>lpNewItem</i> and <i>uIDNewItem</i> parameters are ignored.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_STRING</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Specifies that the menu item is a text string; the 							<i>lpNewItem</i> parameter is a pointer to the string.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_UNCHECKED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Does not place a check mark next to the menu item (default). If the application supplies check-mark bitmaps (see the <see cref="SetMenuItemBitmaps" /> function), this flag displays the clear bitmap next to the menu item.</description></listheader></list></param>
    <param name="uIDNewItem">The identifier of the new menu item or, if the <i>uFlags</i> parameter has the <b>MF_POPUP</b> flag set, a handle to the drop-down menu or submenu.</param>
    <param name="lpNewItem">
      <para>The content of the new menu item. The interpretation of <i>lpNewItem</i> depends on whether the <i>uFlags</i> parameter includes the <b>MF_BITMAP</b>, <b>MF_OWNERDRAW</b>, or <b>MF_STRING</b> flag, as follows.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a bitmap handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>Contains an application-supplied value that can be used to maintain additional data related to the menu item. The value is in the <b>itemData</b> member of the structure pointed to by the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message sent when the menu item is created or its appearance is updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Contains a pointer to a null-terminated string (the default).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IntersectRect">
    <summary>The <b>IntersectRect</b> function calculates the intersection of two source rectangles and places the coordinates of the intersection rectangle into the destination rectangle. If the source rectangles do not intersect, an empty rectangle (in which all coordinates are set to zero) is placed into the destination rectangle.</summary>
    <param name="lprcDst">A pointer to the <see cref="RECT" /> structure that is to receive the intersection of the rectangles pointed to by the <i>lprcSrc1</i> and <i>lprcSrc2</i> parameters. This parameter cannot be <b>NULL</b>.</param>
    <param name="lprcSrc1">A pointer to the <see cref="RECT" /> structure that contains the first source rectangle.</param>
    <param name="lprcSrc2">A pointer to the <see cref="RECT" /> structure that contains the second source rectangle.</param>
    <returns>
      <para>If the rectangles intersect, the return value is nonzero.</para>
      <para>If the rectangles do not intersect, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.InvalidateRect">
    <summary>The <b>InvalidateRect</b> function adds a rectangle to the specified window's update region. The update region represents the portion of the window's client area that must be redrawn.</summary>
    <param name="hWnd">A handle to the window whose update region has changed. If this parameter is <b>NULL</b>, the system invalidates and redraws all windows, not just the windows for this application, and sends the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-erasebkgnd">WM_ERASEBKGND</a> and <a href="https://docs.microsoft.com//windows/desktop/gdi/wm-ncpaint">WM_NCPAINT</a> messages before the function returns. Setting this parameter to <b>NULL</b> is not recommended.</param>
    <param name="lpRect">A pointer to a <see cref="RECT" /> structure that contains the client coordinates of the rectangle to be added to the update region. If this parameter is <b>NULL</b>, the entire client area is added to the update region.</param>
    <param name="bErase">Specifies whether the background within the update region is to be erased when the update region is processed. If this parameter is <b>TRUE</b>, the background is erased when the <see cref="BeginPaint" /> function is called. If this parameter is <b>FALSE</b>, the background remains unchanged.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.InvalidateRgn">
    <summary>The <b>InvalidateRgn</b> function invalidates the client area within the specified region by adding it to the current update region of a window. The invalidated region, along with all other areas in the update region, is marked for painting when the next <a href="https://docs.microsoft.com//windows/desktop/gdi/wm-paint">WM_PAINT</a> message occurs.</summary>
    <param name="hWnd">A handle to the window with an update region that is to be modified.</param>
    <param name="hRgn">A handle to the region to be added to the update region. The region is assumed to have client coordinates. If this parameter is <b>NULL</b>, the entire client area is added to the update region.</param>
    <param name="bErase">Specifies whether the background within the update region should be erased when the update region is processed. If this parameter is <b>TRUE</b>, the background is erased when the <see cref="BeginPaint" /> function is called. If the parameter is <b>FALSE</b>, the background remains unchanged.</param>
    <returns>The return value is always nonzero.</returns>
  </member>
  <member name="Windows.InvertRect">
    <summary>The <b>InvertRect</b> function inverts a rectangle in a window by performing a logical NOT operation on the color values for each pixel in the rectangle's interior.</summary>
    <param name="hDC">A handle to the device context.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that contains the logical coordinates of the rectangle to be inverted.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.IsCharAlpha">
    <summary>Determines whether a character is an alphabetical character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
    <param name="ch">The character to be tested.</param>
    <returns>
      <para>If the character is alphabetical, the return value is nonzero.</para>
      <para>If the character is not alphabetical, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsCharAlphaA">
    <summary>Determines whether a character is an alphabetical character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
    <param name="ch">The character to be tested.</param>
    <returns>
      <para>If the character is alphabetical, the return value is nonzero.</para>
      <para>If the character is not alphabetical, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsCharAlphaW">
    <summary>Determines whether a character is an alphabetical character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
    <param name="ch">The character to be tested.</param>
    <returns>
      <para>If the character is alphabetical, the return value is nonzero.</para>
      <para>If the character is not alphabetical, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsCharAlphaNumeric">
    <summary>Determines whether a character is either an alphabetical or a numeric character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
    <param name="ch">The character to be tested.</param>
    <returns>
      <para>If the character is alphanumeric, the return value is nonzero.</para>
      <para>If the character is not alphanumeric, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsCharAlphaNumericA">
    <summary>Determines whether a character is either an alphabetical or a numeric character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
    <param name="ch">The character to be tested.</param>
    <returns>
      <para>If the character is alphanumeric, the return value is nonzero.</para>
      <para>If the character is not alphanumeric, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsCharAlphaNumericW">
    <summary>Determines whether a character is either an alphabetical or a numeric character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
    <param name="ch">The character to be tested.</param>
    <returns>
      <para>If the character is alphanumeric, the return value is nonzero.</para>
      <para>If the character is not alphanumeric, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsCharAlphaNumeric">
    <summary>Determines whether a character is either an alphabetical or a numeric character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
    <param name="ch">The character to be tested.</param>
    <returns>
      <para>If the character is alphanumeric, the return value is nonzero.</para>
      <para>If the character is not alphanumeric, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsCharAlphaNumericA">
    <summary>Determines whether a character is either an alphabetical or a numeric character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
    <param name="ch">The character to be tested.</param>
    <returns>
      <para>If the character is alphanumeric, the return value is nonzero.</para>
      <para>If the character is not alphanumeric, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsCharAlphaNumericW">
    <summary>Determines whether a character is either an alphabetical or a numeric character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
    <param name="ch">The character to be tested.</param>
    <returns>
      <para>If the character is alphanumeric, the return value is nonzero.</para>
      <para>If the character is not alphanumeric, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsCharAlpha">
    <summary>Determines whether a character is an alphabetical character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
    <param name="ch">The character to be tested.</param>
    <returns>
      <para>If the character is alphabetical, the return value is nonzero.</para>
      <para>If the character is not alphabetical, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsCharAlphaA">
    <summary>Determines whether a character is an alphabetical character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
    <param name="ch">The character to be tested.</param>
    <returns>
      <para>If the character is alphabetical, the return value is nonzero.</para>
      <para>If the character is not alphabetical, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsCharAlphaW">
    <summary>Determines whether a character is an alphabetical character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
    <param name="ch">The character to be tested.</param>
    <returns>
      <para>If the character is alphabetical, the return value is nonzero.</para>
      <para>If the character is not alphabetical, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsCharLower">
    <summary>Determines whether a character is lowercase. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
    <param name="ch">The character to be tested.</param>
    <returns>
      <para>If the character is lowercase, the return value is nonzero.</para>
      <para>If the character is not lowercase, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsCharLowerA">
    <summary>Determines whether a character is lowercase. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
    <param name="ch">The character to be tested.</param>
    <returns>
      <para>If the character is lowercase, the return value is nonzero.</para>
      <para>If the character is not lowercase, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsCharLowerW">
    <summary>Determines whether a character is lowercase. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
    <param name="ch">The character to be tested.</param>
    <returns>
      <para>If the character is lowercase, the return value is nonzero.</para>
      <para>If the character is not lowercase, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsCharUpper">
    <summary>Determines whether a character is uppercase. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
    <param name="ch">The character to be tested.</param>
    <returns>
      <para>If the character is uppercase, the return value is nonzero.</para>
      <para>If the character is not uppercase, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsCharUpperA">
    <summary>Determines whether a character is uppercase. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
    <param name="ch">The character to be tested.</param>
    <returns>
      <para>If the character is uppercase, the return value is nonzero.</para>
      <para>If the character is not uppercase, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsCharUpperW">
    <summary>Determines whether a character is uppercase. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
    <param name="ch">The character to be tested.</param>
    <returns>
      <para>If the character is uppercase, the return value is nonzero.</para>
      <para>If the character is not uppercase, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsCharUpper">
    <summary>Determines whether a character is uppercase. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
    <param name="ch">The character to be tested.</param>
    <returns>
      <para>If the character is uppercase, the return value is nonzero.</para>
      <para>If the character is not uppercase, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsCharUpperA">
    <summary>Determines whether a character is uppercase. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
    <param name="ch">The character to be tested.</param>
    <returns>
      <para>If the character is uppercase, the return value is nonzero.</para>
      <para>If the character is not uppercase, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsCharUpperW">
    <summary>Determines whether a character is uppercase. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.</summary>
    <param name="ch">The character to be tested.</param>
    <returns>
      <para>If the character is uppercase, the return value is nonzero.</para>
      <para>If the character is not uppercase, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsChild">
    <summary>Determines whether a window is a child window or descendant window of a specified parent window. A child window is the direct descendant of a specified parent window if that parent window is in the chain of parent windows; the chain of parent windows leads from the original overlapped or pop-up window to the child window.</summary>
    <param name="hWndParent">A handle to the parent window.</param>
    <param name="hWnd">A handle to the window to be tested.</param>
    <returns>
      <para>If the window is a child or descendant window of the specified parent window, the return value is nonzero.</para>
      <para>If the window is not a child or descendant window of the specified parent window, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.IsClipboardFormatAvailable">
    <summary>Determines whether the clipboard contains data in the specified format.</summary>
    <param name="format">A standard or registered clipboard format. For a description of the standard clipboard formats, see <a href="https://docs.microsoft.com//windows/desktop/dataxchg/standard-clipboard-formats">Standard Clipboard Formats</a> .</param>
    <returns>
      <para>If the clipboard format is available, the return value is nonzero.</para>
      <para>If the clipboard format is not available, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsDialogMessage">
    <summary>Determines whether a message is intended for the specified dialog box and, if it is, processes the message.</summary>
    <param name="hDlg">A handle to the dialog box.</param>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that contains the message to be checked.</param>
    <returns>
      <para>If the message has been processed, the return value is nonzero.</para>
      <para>If the message has not been processed, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.IsDialogMessageA">
    <summary>Determines whether a message is intended for the specified dialog box and, if it is, processes the message.</summary>
    <param name="hDlg">A handle to the dialog box.</param>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that contains the message to be checked.</param>
    <returns>
      <para>If the message has been processed, the return value is nonzero.</para>
      <para>If the message has not been processed, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.IsDialogMessageW">
    <summary>Determines whether a message is intended for the specified dialog box and, if it is, processes the message.</summary>
    <param name="hDlg">A handle to the dialog box.</param>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that contains the message to be checked.</param>
    <returns>
      <para>If the message has been processed, the return value is nonzero.</para>
      <para>If the message has not been processed, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.IsDialogMessage">
    <summary>Determines whether a message is intended for the specified dialog box and, if it is, processes the message.</summary>
    <param name="hDlg">A handle to the dialog box.</param>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that contains the message to be checked.</param>
    <returns>
      <para>If the message has been processed, the return value is nonzero.</para>
      <para>If the message has not been processed, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.IsDialogMessageA">
    <summary>Determines whether a message is intended for the specified dialog box and, if it is, processes the message.</summary>
    <param name="hDlg">A handle to the dialog box.</param>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that contains the message to be checked.</param>
    <returns>
      <para>If the message has been processed, the return value is nonzero.</para>
      <para>If the message has not been processed, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.IsDialogMessageW">
    <summary>Determines whether a message is intended for the specified dialog box and, if it is, processes the message.</summary>
    <param name="hDlg">A handle to the dialog box.</param>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that contains the message to be checked.</param>
    <returns>
      <para>If the message has been processed, the return value is nonzero.</para>
      <para>If the message has not been processed, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.IsDlgButtonChecked">
    <summary>The <b>IsDlgButtonChecked</b> function determines whether a button control is checked or whether a three-state button control is checked, unchecked, or indeterminate.</summary>
    <param name="hDlg">A handle to the dialog box that contains the button control.</param>
    <param name="nIDButton">The identifier of the button control.</param>
    <returns>
      <para>The return value from a button created with the <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_AUTOCHECKBOX</a>, <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_AUTORADIOBUTTON</a>, <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_AUTO3STATE</a>, <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_CHECKBOX</a>, <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_RADIOBUTTON</a>, or <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_3STATE</a> styles can be one of the values in the following table. If the button has any other style, the return value is zero.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BST_CHECKED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The button is checked.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BST_INDETERMINATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The button is in an indeterminate state (applies only if the button has the <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_3STATE</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_AUTO3STATE</a> style).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BST_UNCHECKED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The button is not checked.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.IsGUIThread">
    <summary>Determines whether the calling thread is already a GUI thread. It can also optionally convert the thread to a GUI thread.</summary>
    <param name="bConvert">If <b>TRUE</b> and the thread is not a GUI thread, convert the thread to a GUI thread.</param>
    <returns>
      <para>The function returns a nonzero value in the following situations:</para>
      <list type="bullet">
        <item>
          <description>If the calling thread is already a GUI thread.</description>
        </item>
        <item>
          <description>If <i>bConvert</i> is <b>TRUE</b> and the function successfully converts the thread to a GUI thread.</description>
        </item>
      </list>Otherwise, the function returns zero.<para>If <i>bConvert</i> is <b>TRUE</b> and the function cannot successfully convert the thread to a GUI thread, <b>IsGUIThread</b> returns <b>ERROR_NOT_ENOUGH_MEMORY</b>.</para></returns>
  </member>
  <member name="Windows.IsIconic">
    <summary>Determines whether the specified window is minimized (iconic).</summary>
    <param name="hWnd">A handle to the window to be tested.</param>
    <returns>
      <para>If the window is iconic, the return value is nonzero.</para>
      <para>If the window is not iconic, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.IsImmersiveProcess">
    <summary>Determines whether the process belongs to a Windows Store app.</summary>
    <param name="hProcess">Target process handle.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.IsMenu">
    <summary>Determines whether a handle is a menu handle.</summary>
    <param name="hMenu">A handle to be tested.</param>
    <returns>
      <para>If the handle is a menu handle, the return value is nonzero.</para>
      <para>If the handle is not a menu handle, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.IsMouseInPointerEnabled">
    <summary>Indicates whether <see cref="EnableMouseInPointer" /> is set for the mouse to act as a pointer input device and send <a href="https://docs.microsoft.com//windows/win32/inputmsg/messages">WM_POINTER</a> messages.</summary>
    <returns>
      <para>If <see cref="EnableMouseInPointer" /> is set, the return value is nonzero.</para>
      <para>If <see cref="EnableMouseInPointer" /> is not set, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.IsRectEmpty">
    <summary>The <b>IsRectEmpty</b> function determines whether the specified rectangle is empty. An empty rectangle is one that has no area; that is, the coordinate of the right side is less than or equal to the coordinate of the left side, or the coordinate of the bottom side is less than or equal to the coordinate of the top side.</summary>
    <param name="lprc">Pointer to a <see cref="RECT" /> structure that contains the logical coordinates of the rectangle.</param>
    <returns>
      <para>If the rectangle is empty, the return value is nonzero.</para>
      <para>If the rectangle is not empty, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.IsTouchWindow">
    <summary>Checks whether a specified window is touch-capable and, optionally, retrieves the modifier flags set for the window's touch capability.</summary>
    <param name="hwnd">The handle of the window. The function fails with <b>ERROR_ACCESS_DENIED</b> if the calling thread is not on the same desktop as the specified window.</param>
    <param name="pulFlags">The address of the <b>ULONG</b> variable to receive the modifier flags for the specified window's touch capability.</param>
    <returns>Returns <b>TRUE</b> if the window supports Windows Touch; returns <b>FALSE</b> if the window does not support Windows Touch.</returns>
  </member>
  <member name="Windows.IsValidDpiAwarenessContext">
    <summary>Determines if a specified <b>DPI_AWARENESS_CONTEXT</b> is valid and supported by the current system.</summary>
    <param name="value">The context that you want to determine if it is supported.</param>
    <returns>
      <b>TRUE</b> if the provided context is supported, otherwise <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.IsWindow">
    <summary>Determines whether the specified window handle identifies an existing window.</summary>
    <param name="hWnd">A handle to the window to be tested.</param>
    <returns>
      <para>If the window handle identifies an existing window, the return value is nonzero.</para>
      <para>If the window handle does not identify an existing window, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.IsWindowArranged">
    <summary>Determines whether a window is arranged.</summary>
    <param name="hwnd">A handle to the window to be tested.</param>
    <returns>A nonzero value if the window is arranged; otherwise, zero.</returns>
  </member>
  <member name="Windows.IsWindowEnabled">
    <summary>Determines whether the specified window is enabled for mouse and keyboard input.</summary>
    <param name="hWnd">A handle to the window to be tested.</param>
    <returns>
      <para>If the window is enabled, the return value is nonzero.</para>
      <para>If the window is not enabled, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.IsWindowUnicode">
    <summary>Determines whether the specified window is a native Unicode window.</summary>
    <param name="hWnd">A handle to the window to be tested.</param>
    <returns>
      <para>If the window is a native Unicode window, the return value is nonzero.</para>
      <para>If the window is not a native Unicode window, the return value is zero. The window is a native ANSI window.</para>
    </returns>
  </member>
  <member name="Windows.IsWindowVisible">
    <summary>Determines the visibility state of the specified window.</summary>
    <param name="hWnd">A handle to the window to be tested.</param>
    <returns>
      <para>If the specified window, its parent window, its parent's parent window, and so forth, have the <b>WS_VISIBLE</b> style, the return value is nonzero. Otherwise, the return value is zero.</para>
      <para>Because the return value specifies whether the window has the <b>WS_VISIBLE</b> style, it may be nonzero even if the window is totally obscured by other windows.</para>
    </returns>
  </member>
  <member name="Windows.IsWinEventHookInstalled">
    <summary>Determines whether there is an installed WinEvent hook that might be notified of a specified event.</summary>
    <param name="event">The event constant that hooks might be notified of. The function checks whether there is an installed hook for this event constant.</param>
    <returns>
      <para>If there is a hook to be notified of the specified event, the return value is <b>TRUE</b>.</para>
      <para>If there are no hooks to be notified of the specified event, the return value is <b>FALSE</b>.</para>
    </returns>
  </member>
  <member name="Windows.IsWow64Message">
    <summary>Determines whether the last message read from the current thread's queue originated from a <a href="https://docs.microsoft.com//windows/desktop/WinProg64/running-32-bit-applications">WOW64</a> process.</summary>
    <returns>The function returns TRUE if the last message read from the current thread's queue originated from a WOW64 process, and FALSE otherwise.</returns>
  </member>
  <member name="Windows.IsZoomed">
    <summary>Determines whether a window is maximized.</summary>
    <param name="hWnd">A handle to the window to be tested.</param>
    <returns>
      <para>If the window is zoomed, the return value is nonzero.</para>
      <para>If the window is not zoomed, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.IS_INTRESOURCE">
    <summary>Determines whether a value is an integer identifier for a resource.</summary>
    <param name="_r">The pointer to be tested whether it contains an integer resource identifier.</param>
  </member>
  <member name="Windows.IS_POINTER_CANCELED_WPARAM">
    <summary>Checks whether the specified pointer input ended abruptly, or was invalid, indicating the interaction was not completed.</summary>
    <param name="wParam">The value to be converted.</param>
  </member>
  <member name="Windows.IS_POINTER_SECONDBUTTON_WPARAM">
    <summary>Checks whether the specified pointer took fifth action.</summary>
    <param name="wParam">The value to be converted.</param>
  </member>
  <member name="Windows.IS_POINTER_FIRSTBUTTON_WPARAM">
    <summary>Checks whether the specified pointer took first action.</summary>
    <param name="wParam">The value to be converted.</param>
  </member>
  <member name="Windows.IS_POINTER_FLAG_SET_WPARAM">
    <summary>Checks whether a pointer macro sets the specified flag.</summary>
    <param name="wParam">The value to be converted.</param>
    <param name="flag">The flag to be set. The value is one of the <a href="https://docs.microsoft.com//windows/win32/inputmsg/pointer-flags-contants">Pointer_Flags</a> constants.</param>
  </member>
  <member name="Windows.IS_POINTER_SECONDBUTTON_WPARAM">
    <summary>Checks whether the specified pointer took fourth action.</summary>
    <param name="wParam">The value to be converted.</param>
  </member>
  <member name="Windows.IS_POINTER_INCONTACT_WPARAM">
    <summary>Checks whether the specified pointer is in contact.</summary>
    <param name="wParam">The value to be converted.</param>
  </member>
  <member name="Windows.IS_POINTER_INRANGE_WPARAM">
    <summary>Checks whether the specified pointer is in range.</summary>
    <param name="wParam">The value to be converted.</param>
  </member>
  <member name="Windows.IS_POINTER_NEW_WPARAM">
    <summary>Checks whether the specified pointer is a new pointer.</summary>
    <param name="wParam">The value to be converted.</param>
  </member>
  <member name="Windows.IS_POINTER_SECONDBUTTON_WPARAM">
    <summary>Checks whether the specified pointer took second action.</summary>
    <param name="wParam">The value to be converted.</param>
  </member>
  <member name="Windows.IS_POINTER_SECONDBUTTON_WPARAM">
    <summary>Checks whether the specified pointer took third action.</summary>
    <param name="wParam">The value to be converted.</param>
  </member>
  <member name="Windows.keybd_event">
    <summary>
      <para>Synthesizes a keystroke. The system can use such a synthesized keystroke to generate a <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keyup">WM_KEYUP</a> or <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a> message. The keyboard driver's interrupt handler calls the <b>keybd_event</b> function.</para>
      <div>
        <b>Note</b>  This function has been superseded. Use <see cref="SendInput" /> instead.</div>
    </summary>
    <param name="bVk">A virtual-key code. The code must be a value in the range 1 to 254. For a complete list, see <a href="https://docs.microsoft.com//windows/desktop/inputdev/virtual-key-codes">Virtual Key Codes</a>.</param>
    <param name="bScan">A hardware scan code for the key.</param>
    <param name="dwFlags">
      <para>Controls various aspects of function operation. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KEYEVENTF_EXTENDEDKEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>If specified, the scan code was preceded by a prefix byte having the value 0xE0 (224).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KEYEVENTF_KEYUP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>If specified, the key is being released. If not specified, the key is being depressed.</description>
        </listheader>
      </list>
    </param>
    <param name="dwExtraInfo">An additional value associated with the key stroke.</param>
  </member>
  <member name="Windows.KillTimer">
    <summary>Destroys the specified timer.</summary>
    <param name="hWnd">A handle to the window associated with the specified timer. This value must be the same as the<i>hWnd</i> value passed to the <see cref="SetTimer" /> function that created the timer.</param>
    <param name="uIDEvent">
      <para>The timer to be destroyed. If the window handle passed to <see cref="SetTimer" /> is valid, this parameter must be the same as the<i>nIDEvent</i></para>
      <para>value passed to <b>SetTimer</b>. If the application calls <b>SetTimer</b> with<i>hWnd</i> set to <b>NULL</b>, this parameter must be the timer identifier returned by <b>SetTimer</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadAccelerators">
    <summary>Loads the specified accelerator table.</summary>
    <param name="hInstance">A handle to the module whose executable file contains the accelerator table to be loaded.</param>
    <param name="lpTableName">The name of the accelerator table to be loaded. Alternatively, this parameter can specify the resource identifier of an accelerator-table resource in the low-order word and zero in the high-order word. To create this value, use the <see cref="MAKEINTRESOURCE" /> macro.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the loaded accelerator table.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadAcceleratorsA">
    <summary>Loads the specified accelerator table.</summary>
    <param name="hInstance">A handle to the module whose executable file contains the accelerator table to be loaded.</param>
    <param name="lpTableName">The name of the accelerator table to be loaded. Alternatively, this parameter can specify the resource identifier of an accelerator-table resource in the low-order word and zero in the high-order word. To create this value, use the <see cref="MAKEINTRESOURCE" /> macro.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the loaded accelerator table.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadAcceleratorsW">
    <summary>Loads the specified accelerator table.</summary>
    <param name="hInstance">A handle to the module whose executable file contains the accelerator table to be loaded.</param>
    <param name="lpTableName">The name of the accelerator table to be loaded. Alternatively, this parameter can specify the resource identifier of an accelerator-table resource in the low-order word and zero in the high-order word. To create this value, use the <see cref="MAKEINTRESOURCE" /> macro.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the loaded accelerator table.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadAccelerators">
    <summary>Loads the specified accelerator table.</summary>
    <param name="hInstance">A handle to the module whose executable file contains the accelerator table to be loaded.</param>
    <param name="lpTableName">The name of the accelerator table to be loaded. Alternatively, this parameter can specify the resource identifier of an accelerator-table resource in the low-order word and zero in the high-order word. To create this value, use the <see cref="MAKEINTRESOURCE" /> macro.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the loaded accelerator table.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadAcceleratorsA">
    <summary>Loads the specified accelerator table.</summary>
    <param name="hInstance">A handle to the module whose executable file contains the accelerator table to be loaded.</param>
    <param name="lpTableName">The name of the accelerator table to be loaded. Alternatively, this parameter can specify the resource identifier of an accelerator-table resource in the low-order word and zero in the high-order word. To create this value, use the <see cref="MAKEINTRESOURCE" /> macro.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the loaded accelerator table.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadAcceleratorsW">
    <summary>Loads the specified accelerator table.</summary>
    <param name="hInstance">A handle to the module whose executable file contains the accelerator table to be loaded.</param>
    <param name="lpTableName">The name of the accelerator table to be loaded. Alternatively, this parameter can specify the resource identifier of an accelerator-table resource in the low-order word and zero in the high-order word. To create this value, use the <see cref="MAKEINTRESOURCE" /> macro.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the loaded accelerator table.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadCursor">
    <summary>
      <para>Loads the specified cursor resource from the executable (.EXE) file associated with an application instance.</para>
      <blockquote>[!NOTE] This function has been superseded by the <see cref="LoadImage" /> function (with <b>LR_DEFAULTSIZE</b> and <b>LR_SHARED</b> flags set).</blockquote>
    </summary>
    <param name="hInstance">
      <para>A handle to the module of either a DLL or executable (.exe) file that contains the cursor to be loaded. For more information, see <see cref="GetModuleHandle" />.</para>
      <para>To load a predefined system cursor, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="lpCursorName">
      <para>If <i>hInstance</i> is non-<b>NULL</b>, <i>lpCursorName</i> specifies the cursor resource either by name or ordinal. This ordinal must be packaged by using the <see cref="MAKEINTRESOURCE" /> macro.</para>
      <para>If <i>hInstance</i> is <b>NULL</b>, <i>lpCursorName</i> specifies the <a href="https://docs.microsoft.com//windows/win32/menurc/about-cursors">identifier (beginning with the IDC_ prefix)</a> of a predefined system cursor to load.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the newly loaded cursor.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadCursorA">
    <summary>
      <para>Loads the specified cursor resource from the executable (.EXE) file associated with an application instance.</para>
      <blockquote>[!NOTE] This function has been superseded by the <see cref="LoadImage" /> function (with <b>LR_DEFAULTSIZE</b> and <b>LR_SHARED</b> flags set).</blockquote>
    </summary>
    <param name="hInstance">
      <para>A handle to the module of either a DLL or executable (.exe) file that contains the cursor to be loaded. For more information, see <see cref="GetModuleHandle" />.</para>
      <para>To load a predefined system cursor, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="lpCursorName">
      <para>If <i>hInstance</i> is non-<b>NULL</b>, <i>lpCursorName</i> specifies the cursor resource either by name or ordinal. This ordinal must be packaged by using the <see cref="MAKEINTRESOURCE" /> macro.</para>
      <para>If <i>hInstance</i> is <b>NULL</b>, <i>lpCursorName</i> specifies the <a href="https://docs.microsoft.com//windows/win32/menurc/about-cursors">identifier (beginning with the IDC_ prefix)</a> of a predefined system cursor to load.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the newly loaded cursor.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadCursorW">
    <summary>
      <para>Loads the specified cursor resource from the executable (.EXE) file associated with an application instance.</para>
      <blockquote>[!NOTE] This function has been superseded by the <see cref="LoadImage" /> function (with <b>LR_DEFAULTSIZE</b> and <b>LR_SHARED</b> flags set).</blockquote>
    </summary>
    <param name="hInstance">
      <para>A handle to the module of either a DLL or executable (.exe) file that contains the cursor to be loaded. For more information, see <see cref="GetModuleHandle" />.</para>
      <para>To load a predefined system cursor, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="lpCursorName">
      <para>If <i>hInstance</i> is non-<b>NULL</b>, <i>lpCursorName</i> specifies the cursor resource either by name or ordinal. This ordinal must be packaged by using the <see cref="MAKEINTRESOURCE" /> macro.</para>
      <para>If <i>hInstance</i> is <b>NULL</b>, <i>lpCursorName</i> specifies the <a href="https://docs.microsoft.com//windows/win32/menurc/about-cursors">identifier (beginning with the IDC_ prefix)</a> of a predefined system cursor to load.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the newly loaded cursor.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadCursorFromFile">
    <summary>
      <para>Creates a cursor based on data contained in a file.</para>
      <blockquote>[!NOTE] This function has been superseded by the <see cref="LoadImage" /> function (with <b>LR_DEFAULTSIZE</b> and <b>LR_LOADFROMFILE</b> flags set).</blockquote>
    </summary>
    <param name="lpFileName">
      <para>The source of the file data to be used to create the cursor. The data in the file must be in either .CUR or .ANI format.</para>
      <para>If the high-order word of <i>lpFileName</i> is nonzero, it is a pointer to a string that is a fully qualified name of a file containing cursor data.</para>
    </param>
    <returns>
      <para>If the function is successful, the return value is a handle to the new cursor.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />. <b>GetLastError</b> may return the following value.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified file cannot be found.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.LoadCursorFromFileA">
    <summary>
      <para>Creates a cursor based on data contained in a file.</para>
      <blockquote>[!NOTE] This function has been superseded by the <see cref="LoadImage" /> function (with <b>LR_DEFAULTSIZE</b> and <b>LR_LOADFROMFILE</b> flags set).</blockquote>
    </summary>
    <param name="lpFileName">
      <para>The source of the file data to be used to create the cursor. The data in the file must be in either .CUR or .ANI format.</para>
      <para>If the high-order word of <i>lpFileName</i> is nonzero, it is a pointer to a string that is a fully qualified name of a file containing cursor data.</para>
    </param>
    <returns>
      <para>If the function is successful, the return value is a handle to the new cursor.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />. <b>GetLastError</b> may return the following value.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified file cannot be found.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.LoadCursorFromFileW">
    <summary>
      <para>Creates a cursor based on data contained in a file.</para>
      <blockquote>[!NOTE] This function has been superseded by the <see cref="LoadImage" /> function (with <b>LR_DEFAULTSIZE</b> and <b>LR_LOADFROMFILE</b> flags set).</blockquote>
    </summary>
    <param name="lpFileName">
      <para>The source of the file data to be used to create the cursor. The data in the file must be in either .CUR or .ANI format.</para>
      <para>If the high-order word of <i>lpFileName</i> is nonzero, it is a pointer to a string that is a fully qualified name of a file containing cursor data.</para>
    </param>
    <returns>
      <para>If the function is successful, the return value is a handle to the new cursor.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />. <b>GetLastError</b> may return the following value.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified file cannot be found.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.LoadCursorFromFile">
    <summary>
      <para>Creates a cursor based on data contained in a file.</para>
      <blockquote>[!NOTE] This function has been superseded by the <see cref="LoadImage" /> function (with <b>LR_DEFAULTSIZE</b> and <b>LR_LOADFROMFILE</b> flags set).</blockquote>
    </summary>
    <param name="lpFileName">
      <para>The source of the file data to be used to create the cursor. The data in the file must be in either .CUR or .ANI format.</para>
      <para>If the high-order word of <i>lpFileName</i> is nonzero, it is a pointer to a string that is a fully qualified name of a file containing cursor data.</para>
    </param>
    <returns>
      <para>If the function is successful, the return value is a handle to the new cursor.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />. <b>GetLastError</b> may return the following value.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified file cannot be found.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.LoadCursorFromFileA">
    <summary>
      <para>Creates a cursor based on data contained in a file.</para>
      <blockquote>[!NOTE] This function has been superseded by the <see cref="LoadImage" /> function (with <b>LR_DEFAULTSIZE</b> and <b>LR_LOADFROMFILE</b> flags set).</blockquote>
    </summary>
    <param name="lpFileName">
      <para>The source of the file data to be used to create the cursor. The data in the file must be in either .CUR or .ANI format.</para>
      <para>If the high-order word of <i>lpFileName</i> is nonzero, it is a pointer to a string that is a fully qualified name of a file containing cursor data.</para>
    </param>
    <returns>
      <para>If the function is successful, the return value is a handle to the new cursor.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />. <b>GetLastError</b> may return the following value.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified file cannot be found.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.LoadCursorFromFileW">
    <summary>
      <para>Creates a cursor based on data contained in a file.</para>
      <blockquote>[!NOTE] This function has been superseded by the <see cref="LoadImage" /> function (with <b>LR_DEFAULTSIZE</b> and <b>LR_LOADFROMFILE</b> flags set).</blockquote>
    </summary>
    <param name="lpFileName">
      <para>The source of the file data to be used to create the cursor. The data in the file must be in either .CUR or .ANI format.</para>
      <para>If the high-order word of <i>lpFileName</i> is nonzero, it is a pointer to a string that is a fully qualified name of a file containing cursor data.</para>
    </param>
    <returns>
      <para>If the function is successful, the return value is a handle to the new cursor.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />. <b>GetLastError</b> may return the following value.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_FILE_NOT_FOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified file cannot be found.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.LoadCursor">
    <summary>
      <para>Loads the specified cursor resource from the executable (.exe) file associated with an application instance.</para>
      <blockquote>[!NOTE] This function has been superseded by the <see cref="LoadImage" /> function (with <b>LR_DEFAULTSIZE</b> and <b>LR_SHARED</b> flags set).</blockquote>
    </summary>
    <param name="hInstance">
      <para>A handle to the module of either a DLL or executable (.exe) file that contains the cursor to be loaded. For more information, see <see cref="GetModuleHandle" />.</para>
      <para>To load a predefined system cursor, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="lpCursorName">
      <para>If <i>hInstance</i> is non-<b>NULL</b>, <i>lpCursorName</i> specifies the cursor resource either by name or ordinal. This ordinal must be packaged by using the <see cref="MAKEINTRESOURCE" /> macro.</para>
      <para>If <i>hInstance</i> is <b>NULL</b>, <i>lpCursorName</i> specifies the identifier that begins with the <a href="https://docs.microsoft.com//windows/win32/menurc/about-cursors">IDC_ prefix</a> of a predefined system cursor to load.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the newly loaded cursor.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadCursorA">
    <summary>
      <para>Loads the specified cursor resource from the executable (.exe) file associated with an application instance.</para>
      <blockquote>[!NOTE] This function has been superseded by the <see cref="LoadImage" /> function (with <b>LR_DEFAULTSIZE</b> and <b>LR_SHARED</b> flags set).</blockquote>
    </summary>
    <param name="hInstance">
      <para>A handle to the module of either a DLL or executable (.exe) file that contains the cursor to be loaded. For more information, see <see cref="GetModuleHandle" />.</para>
      <para>To load a predefined system cursor, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="lpCursorName">
      <para>If <i>hInstance</i> is non-<b>NULL</b>, <i>lpCursorName</i> specifies the cursor resource either by name or ordinal. This ordinal must be packaged by using the <see cref="MAKEINTRESOURCE" /> macro.</para>
      <para>If <i>hInstance</i> is <b>NULL</b>, <i>lpCursorName</i> specifies the identifier that begins with the <a href="https://docs.microsoft.com//windows/win32/menurc/about-cursors">IDC_ prefix</a> of a predefined system cursor to load.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the newly loaded cursor.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadCursorW">
    <summary>
      <para>Loads the specified cursor resource from the executable (.exe) file associated with an application instance.</para>
      <blockquote>[!NOTE] This function has been superseded by the <see cref="LoadImage" /> function (with <b>LR_DEFAULTSIZE</b> and <b>LR_SHARED</b> flags set).</blockquote>
    </summary>
    <param name="hInstance">
      <para>A handle to the module of either a DLL or executable (.exe) file that contains the cursor to be loaded. For more information, see <see cref="GetModuleHandle" />.</para>
      <para>To load a predefined system cursor, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="lpCursorName">
      <para>If <i>hInstance</i> is non-<b>NULL</b>, <i>lpCursorName</i> specifies the cursor resource either by name or ordinal. This ordinal must be packaged by using the <see cref="MAKEINTRESOURCE" /> macro.</para>
      <para>If <i>hInstance</i> is <b>NULL</b>, <i>lpCursorName</i> specifies the identifier that begins with the <a href="https://docs.microsoft.com//windows/win32/menurc/about-cursors">IDC_ prefix</a> of a predefined system cursor to load.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the newly loaded cursor.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadIcon">
    <summary>
      <para>Loads the specified icon resource from the executable (.exe) file associated with an application instance.</para>
      <blockquote>[!NOTE] This function has been superseded by the <see cref="LoadImage" /> function (with <b>LR_DEFAULTSIZE</b> and <b>LR_SHARED</b> flags set).</blockquote>
    </summary>
    <param name="hInstance">
      <para>A handle to the module of either a DLL or executable (.exe) file that contains the icon to be loaded. For more information, see <see cref="GetModuleHandle" />.</para>
      <para>To load a predefined system icon, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="lpIconName">
      <para>If <i>hInstance</i> is non-<b>NULL</b>, <i>lpIconName</i> specifies the icon resource either by name or ordinal. This ordinal must be packaged by using the <see cref="MAKEINTRESOURCE" /> macro.</para>
      <para>If <i>hInstance</i> is <b>NULL</b>, <i>lpIconName</i> specifies the <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons">identifier (beginning with the IDI_ prefix)</a> of a predefined system icon to load.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly loaded icon.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadIconA">
    <summary>
      <para>Loads the specified icon resource from the executable (.exe) file associated with an application instance.</para>
      <blockquote>[!NOTE] This function has been superseded by the <see cref="LoadImage" /> function (with <b>LR_DEFAULTSIZE</b> and <b>LR_SHARED</b> flags set).</blockquote>
    </summary>
    <param name="hInstance">
      <para>A handle to the module of either a DLL or executable (.exe) file that contains the icon to be loaded. For more information, see <see cref="GetModuleHandle" />.</para>
      <para>To load a predefined system icon, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="lpIconName">
      <para>If <i>hInstance</i> is non-<b>NULL</b>, <i>lpIconName</i> specifies the icon resource either by name or ordinal. This ordinal must be packaged by using the <see cref="MAKEINTRESOURCE" /> macro.</para>
      <para>If <i>hInstance</i> is <b>NULL</b>, <i>lpIconName</i> specifies the <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons">identifier (beginning with the IDI_ prefix)</a> of a predefined system icon to load.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly loaded icon.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadIconW">
    <summary>
      <para>Loads the specified icon resource from the executable (.exe) file associated with an application instance.</para>
      <blockquote>[!NOTE] This function has been superseded by the <see cref="LoadImage" /> function (with <b>LR_DEFAULTSIZE</b> and <b>LR_SHARED</b> flags set).</blockquote>
    </summary>
    <param name="hInstance">
      <para>A handle to the module of either a DLL or executable (.exe) file that contains the icon to be loaded. For more information, see <see cref="GetModuleHandle" />.</para>
      <para>To load a predefined system icon, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="lpIconName">
      <para>If <i>hInstance</i> is non-<b>NULL</b>, <i>lpIconName</i> specifies the icon resource either by name or ordinal. This ordinal must be packaged by using the <see cref="MAKEINTRESOURCE" /> macro.</para>
      <para>If <i>hInstance</i> is <b>NULL</b>, <i>lpIconName</i> specifies the <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons">identifier (beginning with the IDI_ prefix)</a> of a predefined system icon to load.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly loaded icon.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadIcon">
    <summary>
      <para>Loads the specified icon resource from the executable (.exe) file associated with an application instance.</para>
      <blockquote>[!NOTE] This function has been superseded by the <see cref="LoadImage" /> function (with <b>LR_DEFAULTSIZE</b> and <b>LR_SHARED</b> flags set).</blockquote>
    </summary>
    <param name="hInstance">
      <para>A handle to the module of either a DLL or executable (.exe) file that contains the icon to be loaded. For more information, see <see cref="GetModuleHandle" />.</para>
      <para>To load a predefined system icon, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="lpIconName">
      <para>If <i>hInstance</i> is non-<b>NULL</b>, <i>lpIconName</i> specifies the icon resource either by name or ordinal. This ordinal must be packaged by using the <see cref="MAKEINTRESOURCE" /> macro.</para>
      <para>If <i>hInstance</i> is <b>NULL</b>, <i>lpIconName</i> specifies the <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons">identifier (beginning with the IDI_ prefix)</a> of a predefined system icon to load.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly loaded icon.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadIconA">
    <summary>
      <para>Loads the specified icon resource from the executable (.exe) file associated with an application instance.</para>
      <blockquote>[!NOTE] This function has been superseded by the <see cref="LoadImage" /> function (with <b>LR_DEFAULTSIZE</b> and <b>LR_SHARED</b> flags set).</blockquote>
    </summary>
    <param name="hInstance">
      <para>A handle to the module of either a DLL or executable (.exe) file that contains the icon to be loaded. For more information, see <see cref="GetModuleHandle" />.</para>
      <para>To load a predefined system icon, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="lpIconName">
      <para>If <i>hInstance</i> is non-<b>NULL</b>, <i>lpIconName</i> specifies the icon resource either by name or ordinal. This ordinal must be packaged by using the <see cref="MAKEINTRESOURCE" /> macro.</para>
      <para>If <i>hInstance</i> is <b>NULL</b>, <i>lpIconName</i> specifies the <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons">identifier (beginning with the IDI_ prefix)</a> of a predefined system icon to load.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly loaded icon.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadIconW">
    <summary>
      <para>Loads the specified icon resource from the executable (.exe) file associated with an application instance.</para>
      <blockquote>[!NOTE] This function has been superseded by the <see cref="LoadImage" /> function (with <b>LR_DEFAULTSIZE</b> and <b>LR_SHARED</b> flags set).</blockquote>
    </summary>
    <param name="hInstance">
      <para>A handle to the module of either a DLL or executable (.exe) file that contains the icon to be loaded. For more information, see <see cref="GetModuleHandle" />.</para>
      <para>To load a predefined system icon, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="lpIconName">
      <para>If <i>hInstance</i> is non-<b>NULL</b>, <i>lpIconName</i> specifies the icon resource either by name or ordinal. This ordinal must be packaged by using the <see cref="MAKEINTRESOURCE" /> macro.</para>
      <para>If <i>hInstance</i> is <b>NULL</b>, <i>lpIconName</i> specifies the <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons">identifier (beginning with the IDI_ prefix)</a> of a predefined system icon to load.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the newly loaded icon.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadImage">
    <summary>Loads an icon, cursor, animated cursor, or bitmap.</summary>
    <param name="hInst">
      <para>A handle to the module of either a DLL or executable (.exe) that contains the image to be loaded. For more information, see <see cref="GetModuleHandle" />. Note that as of 32-bit Windows, an instance handle (<b>HINSTANCE</b>), such as the application instance handle exposed by system function call of <see cref="WinMain" />, and a module handle (<b>HMODULE</b>) are the same thing.</para>
      <para>To load a predefined image or a standalone resource (icon, cursor, or bitmap file), set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="name">
      <para>The image to be loaded.</para>
      <para>If the <i>hInst</i> parameter is non-<b>NULL</b> and the <i>fuLoad</i> parameter omits <b>LR_LOADFROMFILE</b>, <i>name</i> specifies the image resource in the <i>hInst</i> module.</para>
      <para>If the image resource is to be loaded by name from the module, the <i>name</i> parameter is a pointer to a null-terminated string that contains the name of the image resource.</para>
      <para>If the image resource is to be loaded by ordinal from the module, use the <see cref="MAKEINTRESOURCE" /> macro to convert the image ordinal into a form that can be passed to the <b>LoadImage</b> function.</para>
      <para>If the <i>hInst</i> parameter is <b>NULL</b> and the <i>fuLoad</i> parameter omits the <b>LR_LOADFROMFILE</b> value, the <i>name</i> specifies the predefined image to load.</para>
      <para>The predefined image identifiers are defined in <code>Winuser.h</code> and have the following prefixes:</para>
      <para>| Prefix | Meaning | |---|---| | <b>OBM_</b> | OEM bitmaps. Use the <see cref="MAKEINTRESOURCE" /> macro to pass these. | | <b>OIC_</b> | OEM icons. Use the <see cref="MAKEINTRESOURCE" /> macro to pass these. | | <b>OCR_</b> | OEM cursors. Use the <see cref="MAKEINTRESOURCE" /> macro to pass these. | | <b>IDI_</b> | <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons">Standard icons</a> | | <b>IDC_</b> | <a href="https://docs.microsoft.com//windows/win32/menurc/about-cursors">Standard cursors</a> |</para>
      <para>To pass OEM image identifiers constants to the <b>LoadImage</b> function, use the <see cref="MAKEINTRESOURCE" /> macro. For example, to load the <b>OCR_NORMAL</b> cursor, pass <code>MAKEINTRESOURCE(OCR_NORMAL)</code> as the <i>name</i> parameter, <b>NULL</b> as the <i>hInst</i> parameter, and <b>LR_SHARED</b> as one of the flags to the <i>fuLoad</i> parameter.</para>
      <para>If the <i>hInst</i> parameter is <b>NULL</b> and the <i>fuLoad</i> parameter includes the <b>LR_LOADFROMFILE</b> value, <i>name</i> is the name of the file that contains the standalone resource (icon, cursor, or bitmap file), - for example, <code>c:\myicon.ico</code>.</para>
      <para>For more information, see the Remarks section below.</para>
    </param>
    <param name="type">
      <para>The type of image to be loaded.</para>
      <para>This parameter can be one of the following values:</para>
      <para>| Value | Meaning | |---|---| | <b>IMAGE_BITMAP</b> | Loads a bitmap. | | <b>IMAGE_CURSOR</b> | Loads a cursor. | | <b>IMAGE_ICON</b> | Loads an icon. |</para>
    </param>
    <param name="cx">The width, in pixels, of the icon or cursor. If this parameter is zero and the <i>fuLoad</i> parameter is <b>LR_DEFAULTSIZE</b>, the function uses the <b>SM_CXICON</b> or <b>SM_CXCURSOR</b> system metric value to set the width. If this parameter is zero and <b>LR_DEFAULTSIZE</b> is not used, the function uses the actual resource width.</param>
    <param name="cy">The height, in pixels, of the icon or cursor. If this parameter is zero and the <i>fuLoad</i> parameter is <b>LR_DEFAULTSIZE</b>, the function uses the <b>SM_CYICON</b> or <b>SM_CYCURSOR</b> system metric value to set the height. If this parameter is zero and <b>LR_DEFAULTSIZE</b> is not used, the function uses the actual resource height.</param>
    <param name="fuLoad">
      <para>This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_CREATEDIBSECTION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00002000</term>
              </listheader>
            </list>
          </description>
          <description>When the <i>uType</i> parameter specifies <b>IMAGE_BITMAP</b>, causes the function to return a DIB section bitmap rather than a compatible bitmap. This flag is useful for loading a bitmap without mapping it to the colors of the display device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_DEFAULTCOLOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>The default flag; it does nothing. All it means is "not <b>LR_MONOCHROME</b>".</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_DEFAULTSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Uses the width or height specified by the system metric values for cursors or icons, if the <i>cxDesired</i> or <i>cyDesired</i> values are set to zero. If this flag is not specified and <i>cxDesired</i> and <i>cyDesired</i> are set to zero, the function uses the actual resource size. If the resource contains multiple images, the function uses the size of the first image.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_LOADFROMFILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Loads the standalone image from the file specified by <i>name</i> (icon, cursor, or bitmap file).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_LOADMAP3DCOLORS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>Searches the color table for the image and replaces the following shades of gray with the corresponding 3-D color. 						 <list type="bullet"><item><description>Dk Gray, RGB(128,128,128) with <b>COLOR_3DSHADOW</b></description></item><item><description>Gray, RGB(192,192,192) with <b>COLOR_3DFACE</b></description></item><item><description>Lt Gray, RGB(223,223,223) with <b>COLOR_3DLIGHT</b></description></item></list>Do not use this option if you are loading a bitmap with a color depth greater than 8bpp.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_LOADTRANSPARENT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the color value of the first pixel in the image and replaces the corresponding entry in the color table with the default window color (<b>COLOR_WINDOW</b>). All pixels in the image that use that entry become the default window color. This value applies only to images that have corresponding color tables.<para>Do not use this option if you are loading a bitmap with a color depth greater than 8bpp.</para><para>If <i>fuLoad</i> includes both the <b>LR_LOADTRANSPARENT</b> and <b>LR_LOADMAP3DCOLORS</b> values, <b>LR_LOADTRANSPARENT</b> takes precedence. However, the color table entry is replaced with <b>COLOR_3DFACE</b> rather than <b>COLOR_WINDOW</b>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_MONOCHROME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Loads the image in black and white.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_SHARED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00008000</term>
              </listheader>
            </list>
          </description>
          <description>Shares the image handle if the image is loaded multiple times. If <b>LR_SHARED</b> is not set, a second call to <b>LoadImage</b> for the same resource will load the image again and return a different handle. <para>When you use this flag, the system will destroy the resource when it is no longer needed.</para><para>Do not use <b>LR_SHARED</b> for images that have non-standard sizes, that may change after loading, or that are loaded from a file.</para><para>When loading a system icon or cursor, you must use <b>LR_SHARED</b> or the function will fail to load the resource.</para><para>This function finds the first image in the cache with the requested resource name, regardless of the size requested.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_VGACOLOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>Uses true VGA colors.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle of the newly loaded image.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadImageA">
    <summary>Loads an icon, cursor, animated cursor, or bitmap.</summary>
    <param name="hInst">
      <para>A handle to the module of either a DLL or executable (.exe) that contains the image to be loaded. For more information, see <see cref="GetModuleHandle" />. Note that as of 32-bit Windows, an instance handle (<b>HINSTANCE</b>), such as the application instance handle exposed by system function call of <see cref="WinMain" />, and a module handle (<b>HMODULE</b>) are the same thing.</para>
      <para>To load a predefined image or a standalone resource (icon, cursor, or bitmap file), set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="name">
      <para>The image to be loaded.</para>
      <para>If the <i>hInst</i> parameter is non-<b>NULL</b> and the <i>fuLoad</i> parameter omits <b>LR_LOADFROMFILE</b>, <i>name</i> specifies the image resource in the <i>hInst</i> module.</para>
      <para>If the image resource is to be loaded by name from the module, the <i>name</i> parameter is a pointer to a null-terminated string that contains the name of the image resource.</para>
      <para>If the image resource is to be loaded by ordinal from the module, use the <see cref="MAKEINTRESOURCE" /> macro to convert the image ordinal into a form that can be passed to the <b>LoadImage</b> function.</para>
      <para>If the <i>hInst</i> parameter is <b>NULL</b> and the <i>fuLoad</i> parameter omits the <b>LR_LOADFROMFILE</b> value, the <i>name</i> specifies the predefined image to load.</para>
      <para>The predefined image identifiers are defined in <code>Winuser.h</code> and have the following prefixes:</para>
      <para>| Prefix | Meaning | |---|---| | <b>OBM_</b> | OEM bitmaps. Use the <see cref="MAKEINTRESOURCE" /> macro to pass these. | | <b>OIC_</b> | OEM icons. Use the <see cref="MAKEINTRESOURCE" /> macro to pass these. | | <b>OCR_</b> | OEM cursors. Use the <see cref="MAKEINTRESOURCE" /> macro to pass these. | | <b>IDI_</b> | <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons">Standard icons</a> | | <b>IDC_</b> | <a href="https://docs.microsoft.com//windows/win32/menurc/about-cursors">Standard cursors</a> |</para>
      <para>To pass OEM image identifiers constants to the <b>LoadImage</b> function, use the <see cref="MAKEINTRESOURCE" /> macro. For example, to load the <b>OCR_NORMAL</b> cursor, pass <code>MAKEINTRESOURCE(OCR_NORMAL)</code> as the <i>name</i> parameter, <b>NULL</b> as the <i>hInst</i> parameter, and <b>LR_SHARED</b> as one of the flags to the <i>fuLoad</i> parameter.</para>
      <para>If the <i>hInst</i> parameter is <b>NULL</b> and the <i>fuLoad</i> parameter includes the <b>LR_LOADFROMFILE</b> value, <i>name</i> is the name of the file that contains the standalone resource (icon, cursor, or bitmap file), - for example, <code>c:\myicon.ico</code>.</para>
      <para>For more information, see the Remarks section below.</para>
    </param>
    <param name="type">
      <para>The type of image to be loaded.</para>
      <para>This parameter can be one of the following values:</para>
      <para>| Value | Meaning | |---|---| | <b>IMAGE_BITMAP</b> | Loads a bitmap. | | <b>IMAGE_CURSOR</b> | Loads a cursor. | | <b>IMAGE_ICON</b> | Loads an icon. |</para>
    </param>
    <param name="cx">The width, in pixels, of the icon or cursor. If this parameter is zero and the <i>fuLoad</i> parameter is <b>LR_DEFAULTSIZE</b>, the function uses the <b>SM_CXICON</b> or <b>SM_CXCURSOR</b> system metric value to set the width. If this parameter is zero and <b>LR_DEFAULTSIZE</b> is not used, the function uses the actual resource width.</param>
    <param name="cy">The height, in pixels, of the icon or cursor. If this parameter is zero and the <i>fuLoad</i> parameter is <b>LR_DEFAULTSIZE</b>, the function uses the <b>SM_CYICON</b> or <b>SM_CYCURSOR</b> system metric value to set the height. If this parameter is zero and <b>LR_DEFAULTSIZE</b> is not used, the function uses the actual resource height.</param>
    <param name="fuLoad">
      <para>This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_CREATEDIBSECTION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00002000</term>
              </listheader>
            </list>
          </description>
          <description>When the <i>uType</i> parameter specifies <b>IMAGE_BITMAP</b>, causes the function to return a DIB section bitmap rather than a compatible bitmap. This flag is useful for loading a bitmap without mapping it to the colors of the display device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_DEFAULTCOLOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>The default flag; it does nothing. All it means is "not <b>LR_MONOCHROME</b>".</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_DEFAULTSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Uses the width or height specified by the system metric values for cursors or icons, if the <i>cxDesired</i> or <i>cyDesired</i> values are set to zero. If this flag is not specified and <i>cxDesired</i> and <i>cyDesired</i> are set to zero, the function uses the actual resource size. If the resource contains multiple images, the function uses the size of the first image.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_LOADFROMFILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Loads the standalone image from the file specified by <i>name</i> (icon, cursor, or bitmap file).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_LOADMAP3DCOLORS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>Searches the color table for the image and replaces the following shades of gray with the corresponding 3-D color. 						 <list type="bullet"><item><description>Dk Gray, RGB(128,128,128) with <b>COLOR_3DSHADOW</b></description></item><item><description>Gray, RGB(192,192,192) with <b>COLOR_3DFACE</b></description></item><item><description>Lt Gray, RGB(223,223,223) with <b>COLOR_3DLIGHT</b></description></item></list>Do not use this option if you are loading a bitmap with a color depth greater than 8bpp.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_LOADTRANSPARENT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the color value of the first pixel in the image and replaces the corresponding entry in the color table with the default window color (<b>COLOR_WINDOW</b>). All pixels in the image that use that entry become the default window color. This value applies only to images that have corresponding color tables.<para>Do not use this option if you are loading a bitmap with a color depth greater than 8bpp.</para><para>If <i>fuLoad</i> includes both the <b>LR_LOADTRANSPARENT</b> and <b>LR_LOADMAP3DCOLORS</b> values, <b>LR_LOADTRANSPARENT</b> takes precedence. However, the color table entry is replaced with <b>COLOR_3DFACE</b> rather than <b>COLOR_WINDOW</b>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_MONOCHROME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Loads the image in black and white.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_SHARED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00008000</term>
              </listheader>
            </list>
          </description>
          <description>Shares the image handle if the image is loaded multiple times. If <b>LR_SHARED</b> is not set, a second call to <b>LoadImage</b> for the same resource will load the image again and return a different handle. <para>When you use this flag, the system will destroy the resource when it is no longer needed.</para><para>Do not use <b>LR_SHARED</b> for images that have non-standard sizes, that may change after loading, or that are loaded from a file.</para><para>When loading a system icon or cursor, you must use <b>LR_SHARED</b> or the function will fail to load the resource.</para><para>This function finds the first image in the cache with the requested resource name, regardless of the size requested.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_VGACOLOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>Uses true VGA colors.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle of the newly loaded image.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadImageW">
    <summary>Loads an icon, cursor, animated cursor, or bitmap.</summary>
    <param name="hInst">
      <para>A handle to the module of either a DLL or executable (.exe) that contains the image to be loaded. For more information, see <see cref="GetModuleHandle" />. Note that as of 32-bit Windows, an instance handle (<b>HINSTANCE</b>), such as the application instance handle exposed by system function call of <see cref="WinMain" />, and a module handle (<b>HMODULE</b>) are the same thing.</para>
      <para>To load a predefined image or a standalone resource (icon, cursor, or bitmap file), set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="name">
      <para>The image to be loaded.</para>
      <para>If the <i>hInst</i> parameter is non-<b>NULL</b> and the <i>fuLoad</i> parameter omits <b>LR_LOADFROMFILE</b>, <i>name</i> specifies the image resource in the <i>hInst</i> module.</para>
      <para>If the image resource is to be loaded by name from the module, the <i>name</i> parameter is a pointer to a null-terminated string that contains the name of the image resource.</para>
      <para>If the image resource is to be loaded by ordinal from the module, use the <see cref="MAKEINTRESOURCE" /> macro to convert the image ordinal into a form that can be passed to the <b>LoadImage</b> function.</para>
      <para>If the <i>hInst</i> parameter is <b>NULL</b> and the <i>fuLoad</i> parameter omits the <b>LR_LOADFROMFILE</b> value, the <i>name</i> specifies the predefined image to load.</para>
      <para>The predefined image identifiers are defined in <code>Winuser.h</code> and have the following prefixes:</para>
      <para>| Prefix | Meaning | |---|---| | <b>OBM_</b> | OEM bitmaps. Use the <see cref="MAKEINTRESOURCE" /> macro to pass these. | | <b>OIC_</b> | OEM icons. Use the <see cref="MAKEINTRESOURCE" /> macro to pass these. | | <b>OCR_</b> | OEM cursors. Use the <see cref="MAKEINTRESOURCE" /> macro to pass these. | | <b>IDI_</b> | <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons">Standard icons</a> | | <b>IDC_</b> | <a href="https://docs.microsoft.com//windows/win32/menurc/about-cursors">Standard cursors</a> |</para>
      <para>To pass OEM image identifiers constants to the <b>LoadImage</b> function, use the <see cref="MAKEINTRESOURCE" /> macro. For example, to load the <b>OCR_NORMAL</b> cursor, pass <code>MAKEINTRESOURCE(OCR_NORMAL)</code> as the <i>name</i> parameter, <b>NULL</b> as the <i>hInst</i> parameter, and <b>LR_SHARED</b> as one of the flags to the <i>fuLoad</i> parameter.</para>
      <para>If the <i>hInst</i> parameter is <b>NULL</b> and the <i>fuLoad</i> parameter includes the <b>LR_LOADFROMFILE</b> value, <i>name</i> is the name of the file that contains the standalone resource (icon, cursor, or bitmap file), - for example, <code>c:\myicon.ico</code>.</para>
      <para>For more information, see the Remarks section below.</para>
    </param>
    <param name="type">
      <para>The type of image to be loaded.</para>
      <para>This parameter can be one of the following values:</para>
      <para>| Value | Meaning | |---|---| | <b>IMAGE_BITMAP</b> | Loads a bitmap. | | <b>IMAGE_CURSOR</b> | Loads a cursor. | | <b>IMAGE_ICON</b> | Loads an icon. |</para>
    </param>
    <param name="cx">The width, in pixels, of the icon or cursor. If this parameter is zero and the <i>fuLoad</i> parameter is <b>LR_DEFAULTSIZE</b>, the function uses the <b>SM_CXICON</b> or <b>SM_CXCURSOR</b> system metric value to set the width. If this parameter is zero and <b>LR_DEFAULTSIZE</b> is not used, the function uses the actual resource width.</param>
    <param name="cy">The height, in pixels, of the icon or cursor. If this parameter is zero and the <i>fuLoad</i> parameter is <b>LR_DEFAULTSIZE</b>, the function uses the <b>SM_CYICON</b> or <b>SM_CYCURSOR</b> system metric value to set the height. If this parameter is zero and <b>LR_DEFAULTSIZE</b> is not used, the function uses the actual resource height.</param>
    <param name="fuLoad">
      <para>This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_CREATEDIBSECTION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00002000</term>
              </listheader>
            </list>
          </description>
          <description>When the <i>uType</i> parameter specifies <b>IMAGE_BITMAP</b>, causes the function to return a DIB section bitmap rather than a compatible bitmap. This flag is useful for loading a bitmap without mapping it to the colors of the display device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_DEFAULTCOLOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>The default flag; it does nothing. All it means is "not <b>LR_MONOCHROME</b>".</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_DEFAULTSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Uses the width or height specified by the system metric values for cursors or icons, if the <i>cxDesired</i> or <i>cyDesired</i> values are set to zero. If this flag is not specified and <i>cxDesired</i> and <i>cyDesired</i> are set to zero, the function uses the actual resource size. If the resource contains multiple images, the function uses the size of the first image.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_LOADFROMFILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Loads the standalone image from the file specified by <i>name</i> (icon, cursor, or bitmap file).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_LOADMAP3DCOLORS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>Searches the color table for the image and replaces the following shades of gray with the corresponding 3-D color. 						 <list type="bullet"><item><description>Dk Gray, RGB(128,128,128) with <b>COLOR_3DSHADOW</b></description></item><item><description>Gray, RGB(192,192,192) with <b>COLOR_3DFACE</b></description></item><item><description>Lt Gray, RGB(223,223,223) with <b>COLOR_3DLIGHT</b></description></item></list>Do not use this option if you are loading a bitmap with a color depth greater than 8bpp.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_LOADTRANSPARENT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the color value of the first pixel in the image and replaces the corresponding entry in the color table with the default window color (<b>COLOR_WINDOW</b>). All pixels in the image that use that entry become the default window color. This value applies only to images that have corresponding color tables.<para>Do not use this option if you are loading a bitmap with a color depth greater than 8bpp.</para><para>If <i>fuLoad</i> includes both the <b>LR_LOADTRANSPARENT</b> and <b>LR_LOADMAP3DCOLORS</b> values, <b>LR_LOADTRANSPARENT</b> takes precedence. However, the color table entry is replaced with <b>COLOR_3DFACE</b> rather than <b>COLOR_WINDOW</b>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_MONOCHROME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Loads the image in black and white.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_SHARED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00008000</term>
              </listheader>
            </list>
          </description>
          <description>Shares the image handle if the image is loaded multiple times. If <b>LR_SHARED</b> is not set, a second call to <b>LoadImage</b> for the same resource will load the image again and return a different handle. <para>When you use this flag, the system will destroy the resource when it is no longer needed.</para><para>Do not use <b>LR_SHARED</b> for images that have non-standard sizes, that may change after loading, or that are loaded from a file.</para><para>When loading a system icon or cursor, you must use <b>LR_SHARED</b> or the function will fail to load the resource.</para><para>This function finds the first image in the cache with the requested resource name, regardless of the size requested.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_VGACOLOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>Uses true VGA colors.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle of the newly loaded image.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadImage">
    <summary>Loads an icon, cursor, animated cursor, or bitmap.</summary>
    <param name="hInst">
      <para>A handle to the module of either a DLL or executable (.exe) that contains the image to be loaded. For more information, see <see cref="GetModuleHandle" />. Note that as of 32-bit Windows, an instance handle (<b>HINSTANCE</b>), such as the application instance handle exposed by system function call of <see cref="WinMain" />, and a module handle (<b>HMODULE</b>) are the same thing.</para>
      <para>To load a predefined image or a standalone resource (icon, cursor, or bitmap file), set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="name">
      <para>The image to be loaded.</para>
      <para>If the <i>hInst</i> parameter is non-<b>NULL</b> and the <i>fuLoad</i> parameter omits <b>LR_LOADFROMFILE</b>, <i>name</i> specifies the image resource in the <i>hInst</i> module.</para>
      <para>If the image resource is to be loaded by name from the module, the <i>name</i> parameter is a pointer to a null-terminated string that contains the name of the image resource.</para>
      <para>If the image resource is to be loaded by ordinal from the module, use the <see cref="MAKEINTRESOURCE" /> macro to convert the image ordinal into a form that can be passed to the <b>LoadImage</b> function.</para>
      <para>If the <i>hInst</i> parameter is <b>NULL</b> and the <i>fuLoad</i> parameter omits the <b>LR_LOADFROMFILE</b> value, the <i>name</i> specifies the predefined image to load.</para>
      <para>The predefined image identifiers are defined in <code>Winuser.h</code> and have the following prefixes:</para>
      <para>| Prefix | Meaning | |---|---| | <b>OBM_</b> | OEM bitmaps. Use the <see cref="MAKEINTRESOURCE" /> macro to pass these. | | <b>OIC_</b> | OEM icons. Use the <see cref="MAKEINTRESOURCE" /> macro to pass these. | | <b>OCR_</b> | OEM cursors. Use the <see cref="MAKEINTRESOURCE" /> macro to pass these. | | <b>IDI_</b> | <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons">Standard icons</a> | | <b>IDC_</b> | <a href="https://docs.microsoft.com//windows/win32/menurc/about-cursors">Standard cursors</a> |</para>
      <para>To pass OEM image identifiers constants to the <b>LoadImage</b> function, use the <see cref="MAKEINTRESOURCE" /> macro. For example, to load the <b>OCR_NORMAL</b> cursor, pass <code>MAKEINTRESOURCE(OCR_NORMAL)</code> as the <i>name</i> parameter, <b>NULL</b> as the <i>hInst</i> parameter, and <b>LR_SHARED</b> as one of the flags to the <i>fuLoad</i> parameter.</para>
      <para>If the <i>hInst</i> parameter is <b>NULL</b> and the <i>fuLoad</i> parameter includes the <b>LR_LOADFROMFILE</b> value, <i>name</i> is the name of the file that contains the standalone resource (icon, cursor, or bitmap file), - for example, <code>c:\myicon.ico</code>.</para>
      <para>For more information, see the Remarks section below.</para>
    </param>
    <param name="type">
      <para>The type of image to be loaded.</para>
      <para>This parameter can be one of the following values:</para>
      <para>| Value | Meaning | |---|---| | <b>IMAGE_BITMAP</b> | Loads a bitmap. | | <b>IMAGE_CURSOR</b> | Loads a cursor. | | <b>IMAGE_ICON</b> | Loads an icon. |</para>
    </param>
    <param name="cx">The width, in pixels, of the icon or cursor. If this parameter is zero and the <i>fuLoad</i> parameter is <b>LR_DEFAULTSIZE</b>, the function uses the <b>SM_CXICON</b> or <b>SM_CXCURSOR</b> system metric value to set the width. If this parameter is zero and <b>LR_DEFAULTSIZE</b> is not used, the function uses the actual resource width.</param>
    <param name="cy">The height, in pixels, of the icon or cursor. If this parameter is zero and the <i>fuLoad</i> parameter is <b>LR_DEFAULTSIZE</b>, the function uses the <b>SM_CYICON</b> or <b>SM_CYCURSOR</b> system metric value to set the height. If this parameter is zero and <b>LR_DEFAULTSIZE</b> is not used, the function uses the actual resource height.</param>
    <param name="fuLoad">
      <para>This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_CREATEDIBSECTION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00002000</term>
              </listheader>
            </list>
          </description>
          <description>When the <i>uType</i> parameter specifies <b>IMAGE_BITMAP</b>, causes the function to return a DIB section bitmap rather than a compatible bitmap. This flag is useful for loading a bitmap without mapping it to the colors of the display device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_DEFAULTCOLOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>The default flag; it does nothing. All it means is "not <b>LR_MONOCHROME</b>".</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_DEFAULTSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Uses the width or height specified by the system metric values for cursors or icons, if the <i>cxDesired</i> or <i>cyDesired</i> values are set to zero. If this flag is not specified and <i>cxDesired</i> and <i>cyDesired</i> are set to zero, the function uses the actual resource size. If the resource contains multiple images, the function uses the size of the first image.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_LOADFROMFILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Loads the standalone image from the file specified by <i>name</i> (icon, cursor, or bitmap file).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_LOADMAP3DCOLORS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>Searches the color table for the image and replaces the following shades of gray with the corresponding 3-D color. 						 <list type="bullet"><item><description>Dk Gray, RGB(128,128,128) with <b>COLOR_3DSHADOW</b></description></item><item><description>Gray, RGB(192,192,192) with <b>COLOR_3DFACE</b></description></item><item><description>Lt Gray, RGB(223,223,223) with <b>COLOR_3DLIGHT</b></description></item></list>Do not use this option if you are loading a bitmap with a color depth greater than 8bpp.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_LOADTRANSPARENT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the color value of the first pixel in the image and replaces the corresponding entry in the color table with the default window color (<b>COLOR_WINDOW</b>). All pixels in the image that use that entry become the default window color. This value applies only to images that have corresponding color tables.<para>Do not use this option if you are loading a bitmap with a color depth greater than 8bpp.</para><para>If <i>fuLoad</i> includes both the <b>LR_LOADTRANSPARENT</b> and <b>LR_LOADMAP3DCOLORS</b> values, <b>LR_LOADTRANSPARENT</b> takes precedence. However, the color table entry is replaced with <b>COLOR_3DFACE</b> rather than <b>COLOR_WINDOW</b>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_MONOCHROME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Loads the image in black and white.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_SHARED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00008000</term>
              </listheader>
            </list>
          </description>
          <description>Shares the image handle if the image is loaded multiple times. If <b>LR_SHARED</b> is not set, a second call to <b>LoadImage</b> for the same resource will load the image again and return a different handle. <para>When you use this flag, the system will destroy the resource when it is no longer needed.</para><para>Do not use <b>LR_SHARED</b> for images that have non-standard sizes, that may change after loading, or that are loaded from a file.</para><para>When loading a system icon or cursor, you must use <b>LR_SHARED</b> or the function will fail to load the resource.</para><para>This function finds the first image in the cache with the requested resource name, regardless of the size requested.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_VGACOLOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>Uses true VGA colors.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle of the newly loaded image.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadImageA">
    <summary>Loads an icon, cursor, animated cursor, or bitmap.</summary>
    <param name="hInst">
      <para>A handle to the module of either a DLL or executable (.exe) that contains the image to be loaded. For more information, see <see cref="GetModuleHandle" />. Note that as of 32-bit Windows, an instance handle (<b>HINSTANCE</b>), such as the application instance handle exposed by system function call of <see cref="WinMain" />, and a module handle (<b>HMODULE</b>) are the same thing.</para>
      <para>To load a predefined image or a standalone resource (icon, cursor, or bitmap file), set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="name">
      <para>The image to be loaded.</para>
      <para>If the <i>hInst</i> parameter is non-<b>NULL</b> and the <i>fuLoad</i> parameter omits <b>LR_LOADFROMFILE</b>, <i>name</i> specifies the image resource in the <i>hInst</i> module.</para>
      <para>If the image resource is to be loaded by name from the module, the <i>name</i> parameter is a pointer to a null-terminated string that contains the name of the image resource.</para>
      <para>If the image resource is to be loaded by ordinal from the module, use the <see cref="MAKEINTRESOURCE" /> macro to convert the image ordinal into a form that can be passed to the <b>LoadImage</b> function.</para>
      <para>If the <i>hInst</i> parameter is <b>NULL</b> and the <i>fuLoad</i> parameter omits the <b>LR_LOADFROMFILE</b> value, the <i>name</i> specifies the predefined image to load.</para>
      <para>The predefined image identifiers are defined in <code>Winuser.h</code> and have the following prefixes:</para>
      <para>| Prefix | Meaning | |---|---| | <b>OBM_</b> | OEM bitmaps. Use the <see cref="MAKEINTRESOURCE" /> macro to pass these. | | <b>OIC_</b> | OEM icons. Use the <see cref="MAKEINTRESOURCE" /> macro to pass these. | | <b>OCR_</b> | OEM cursors. Use the <see cref="MAKEINTRESOURCE" /> macro to pass these. | | <b>IDI_</b> | <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons">Standard icons</a> | | <b>IDC_</b> | <a href="https://docs.microsoft.com//windows/win32/menurc/about-cursors">Standard cursors</a> |</para>
      <para>To pass OEM image identifiers constants to the <b>LoadImage</b> function, use the <see cref="MAKEINTRESOURCE" /> macro. For example, to load the <b>OCR_NORMAL</b> cursor, pass <code>MAKEINTRESOURCE(OCR_NORMAL)</code> as the <i>name</i> parameter, <b>NULL</b> as the <i>hInst</i> parameter, and <b>LR_SHARED</b> as one of the flags to the <i>fuLoad</i> parameter.</para>
      <para>If the <i>hInst</i> parameter is <b>NULL</b> and the <i>fuLoad</i> parameter includes the <b>LR_LOADFROMFILE</b> value, <i>name</i> is the name of the file that contains the standalone resource (icon, cursor, or bitmap file), - for example, <code>c:\myicon.ico</code>.</para>
      <para>For more information, see the Remarks section below.</para>
    </param>
    <param name="type">
      <para>The type of image to be loaded.</para>
      <para>This parameter can be one of the following values:</para>
      <para>| Value | Meaning | |---|---| | <b>IMAGE_BITMAP</b> | Loads a bitmap. | | <b>IMAGE_CURSOR</b> | Loads a cursor. | | <b>IMAGE_ICON</b> | Loads an icon. |</para>
    </param>
    <param name="cx">The width, in pixels, of the icon or cursor. If this parameter is zero and the <i>fuLoad</i> parameter is <b>LR_DEFAULTSIZE</b>, the function uses the <b>SM_CXICON</b> or <b>SM_CXCURSOR</b> system metric value to set the width. If this parameter is zero and <b>LR_DEFAULTSIZE</b> is not used, the function uses the actual resource width.</param>
    <param name="cy">The height, in pixels, of the icon or cursor. If this parameter is zero and the <i>fuLoad</i> parameter is <b>LR_DEFAULTSIZE</b>, the function uses the <b>SM_CYICON</b> or <b>SM_CYCURSOR</b> system metric value to set the height. If this parameter is zero and <b>LR_DEFAULTSIZE</b> is not used, the function uses the actual resource height.</param>
    <param name="fuLoad">
      <para>This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_CREATEDIBSECTION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00002000</term>
              </listheader>
            </list>
          </description>
          <description>When the <i>uType</i> parameter specifies <b>IMAGE_BITMAP</b>, causes the function to return a DIB section bitmap rather than a compatible bitmap. This flag is useful for loading a bitmap without mapping it to the colors of the display device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_DEFAULTCOLOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>The default flag; it does nothing. All it means is "not <b>LR_MONOCHROME</b>".</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_DEFAULTSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Uses the width or height specified by the system metric values for cursors or icons, if the <i>cxDesired</i> or <i>cyDesired</i> values are set to zero. If this flag is not specified and <i>cxDesired</i> and <i>cyDesired</i> are set to zero, the function uses the actual resource size. If the resource contains multiple images, the function uses the size of the first image.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_LOADFROMFILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Loads the standalone image from the file specified by <i>name</i> (icon, cursor, or bitmap file).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_LOADMAP3DCOLORS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>Searches the color table for the image and replaces the following shades of gray with the corresponding 3-D color. 						 <list type="bullet"><item><description>Dk Gray, RGB(128,128,128) with <b>COLOR_3DSHADOW</b></description></item><item><description>Gray, RGB(192,192,192) with <b>COLOR_3DFACE</b></description></item><item><description>Lt Gray, RGB(223,223,223) with <b>COLOR_3DLIGHT</b></description></item></list>Do not use this option if you are loading a bitmap with a color depth greater than 8bpp.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_LOADTRANSPARENT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the color value of the first pixel in the image and replaces the corresponding entry in the color table with the default window color (<b>COLOR_WINDOW</b>). All pixels in the image that use that entry become the default window color. This value applies only to images that have corresponding color tables.<para>Do not use this option if you are loading a bitmap with a color depth greater than 8bpp.</para><para>If <i>fuLoad</i> includes both the <b>LR_LOADTRANSPARENT</b> and <b>LR_LOADMAP3DCOLORS</b> values, <b>LR_LOADTRANSPARENT</b> takes precedence. However, the color table entry is replaced with <b>COLOR_3DFACE</b> rather than <b>COLOR_WINDOW</b>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_MONOCHROME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Loads the image in black and white.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_SHARED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00008000</term>
              </listheader>
            </list>
          </description>
          <description>Shares the image handle if the image is loaded multiple times. If <b>LR_SHARED</b> is not set, a second call to <b>LoadImage</b> for the same resource will load the image again and return a different handle. <para>When you use this flag, the system will destroy the resource when it is no longer needed.</para><para>Do not use <b>LR_SHARED</b> for images that have non-standard sizes, that may change after loading, or that are loaded from a file.</para><para>When loading a system icon or cursor, you must use <b>LR_SHARED</b> or the function will fail to load the resource.</para><para>This function finds the first image in the cache with the requested resource name, regardless of the size requested.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_VGACOLOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>Uses true VGA colors.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle of the newly loaded image.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadImageW">
    <summary>Loads an icon, cursor, animated cursor, or bitmap.</summary>
    <param name="hInst">
      <para>A handle to the module of either a DLL or executable (.exe) that contains the image to be loaded. For more information, see <see cref="GetModuleHandle" />. Note that as of 32-bit Windows, an instance handle (<b>HINSTANCE</b>), such as the application instance handle exposed by system function call of <see cref="WinMain" />, and a module handle (<b>HMODULE</b>) are the same thing.</para>
      <para>To load a predefined image or a standalone resource (icon, cursor, or bitmap file), set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="name">
      <para>The image to be loaded.</para>
      <para>If the <i>hInst</i> parameter is non-<b>NULL</b> and the <i>fuLoad</i> parameter omits <b>LR_LOADFROMFILE</b>, <i>name</i> specifies the image resource in the <i>hInst</i> module.</para>
      <para>If the image resource is to be loaded by name from the module, the <i>name</i> parameter is a pointer to a null-terminated string that contains the name of the image resource.</para>
      <para>If the image resource is to be loaded by ordinal from the module, use the <see cref="MAKEINTRESOURCE" /> macro to convert the image ordinal into a form that can be passed to the <b>LoadImage</b> function.</para>
      <para>If the <i>hInst</i> parameter is <b>NULL</b> and the <i>fuLoad</i> parameter omits the <b>LR_LOADFROMFILE</b> value, the <i>name</i> specifies the predefined image to load.</para>
      <para>The predefined image identifiers are defined in <code>Winuser.h</code> and have the following prefixes:</para>
      <para>| Prefix | Meaning | |---|---| | <b>OBM_</b> | OEM bitmaps. Use the <see cref="MAKEINTRESOURCE" /> macro to pass these. | | <b>OIC_</b> | OEM icons. Use the <see cref="MAKEINTRESOURCE" /> macro to pass these. | | <b>OCR_</b> | OEM cursors. Use the <see cref="MAKEINTRESOURCE" /> macro to pass these. | | <b>IDI_</b> | <a href="https://docs.microsoft.com//windows/win32/menurc/about-icons">Standard icons</a> | | <b>IDC_</b> | <a href="https://docs.microsoft.com//windows/win32/menurc/about-cursors">Standard cursors</a> |</para>
      <para>To pass OEM image identifiers constants to the <b>LoadImage</b> function, use the <see cref="MAKEINTRESOURCE" /> macro. For example, to load the <b>OCR_NORMAL</b> cursor, pass <code>MAKEINTRESOURCE(OCR_NORMAL)</code> as the <i>name</i> parameter, <b>NULL</b> as the <i>hInst</i> parameter, and <b>LR_SHARED</b> as one of the flags to the <i>fuLoad</i> parameter.</para>
      <para>If the <i>hInst</i> parameter is <b>NULL</b> and the <i>fuLoad</i> parameter includes the <b>LR_LOADFROMFILE</b> value, <i>name</i> is the name of the file that contains the standalone resource (icon, cursor, or bitmap file), - for example, <code>c:\myicon.ico</code>.</para>
      <para>For more information, see the Remarks section below.</para>
    </param>
    <param name="type">
      <para>The type of image to be loaded.</para>
      <para>This parameter can be one of the following values:</para>
      <para>| Value | Meaning | |---|---| | <b>IMAGE_BITMAP</b> | Loads a bitmap. | | <b>IMAGE_CURSOR</b> | Loads a cursor. | | <b>IMAGE_ICON</b> | Loads an icon. |</para>
    </param>
    <param name="cx">The width, in pixels, of the icon or cursor. If this parameter is zero and the <i>fuLoad</i> parameter is <b>LR_DEFAULTSIZE</b>, the function uses the <b>SM_CXICON</b> or <b>SM_CXCURSOR</b> system metric value to set the width. If this parameter is zero and <b>LR_DEFAULTSIZE</b> is not used, the function uses the actual resource width.</param>
    <param name="cy">The height, in pixels, of the icon or cursor. If this parameter is zero and the <i>fuLoad</i> parameter is <b>LR_DEFAULTSIZE</b>, the function uses the <b>SM_CYICON</b> or <b>SM_CYCURSOR</b> system metric value to set the height. If this parameter is zero and <b>LR_DEFAULTSIZE</b> is not used, the function uses the actual resource height.</param>
    <param name="fuLoad">
      <para>This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_CREATEDIBSECTION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00002000</term>
              </listheader>
            </list>
          </description>
          <description>When the <i>uType</i> parameter specifies <b>IMAGE_BITMAP</b>, causes the function to return a DIB section bitmap rather than a compatible bitmap. This flag is useful for loading a bitmap without mapping it to the colors of the display device.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_DEFAULTCOLOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>The default flag; it does nothing. All it means is "not <b>LR_MONOCHROME</b>".</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_DEFAULTSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Uses the width or height specified by the system metric values for cursors or icons, if the <i>cxDesired</i> or <i>cyDesired</i> values are set to zero. If this flag is not specified and <i>cxDesired</i> and <i>cyDesired</i> are set to zero, the function uses the actual resource size. If the resource contains multiple images, the function uses the size of the first image.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_LOADFROMFILE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Loads the standalone image from the file specified by <i>name</i> (icon, cursor, or bitmap file).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_LOADMAP3DCOLORS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>Searches the color table for the image and replaces the following shades of gray with the corresponding 3-D color. 						 <list type="bullet"><item><description>Dk Gray, RGB(128,128,128) with <b>COLOR_3DSHADOW</b></description></item><item><description>Gray, RGB(192,192,192) with <b>COLOR_3DFACE</b></description></item><item><description>Lt Gray, RGB(223,223,223) with <b>COLOR_3DLIGHT</b></description></item></list>Do not use this option if you are loading a bitmap with a color depth greater than 8bpp.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_LOADTRANSPARENT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves the color value of the first pixel in the image and replaces the corresponding entry in the color table with the default window color (<b>COLOR_WINDOW</b>). All pixels in the image that use that entry become the default window color. This value applies only to images that have corresponding color tables.<para>Do not use this option if you are loading a bitmap with a color depth greater than 8bpp.</para><para>If <i>fuLoad</i> includes both the <b>LR_LOADTRANSPARENT</b> and <b>LR_LOADMAP3DCOLORS</b> values, <b>LR_LOADTRANSPARENT</b> takes precedence. However, the color table entry is replaced with <b>COLOR_3DFACE</b> rather than <b>COLOR_WINDOW</b>.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_MONOCHROME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Loads the image in black and white.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_SHARED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00008000</term>
              </listheader>
            </list>
          </description>
          <description>Shares the image handle if the image is loaded multiple times. If <b>LR_SHARED</b> is not set, a second call to <b>LoadImage</b> for the same resource will load the image again and return a different handle. <para>When you use this flag, the system will destroy the resource when it is no longer needed.</para><para>Do not use <b>LR_SHARED</b> for images that have non-standard sizes, that may change after loading, or that are loaded from a file.</para><para>When loading a system icon or cursor, you must use <b>LR_SHARED</b> or the function will fail to load the resource.</para><para>This function finds the first image in the cache with the requested resource name, regardless of the size requested.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_VGACOLOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>Uses true VGA colors.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle of the newly loaded image.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadKeyboardLayout">
    <summary>
      <para>Loads a new input locale identifier (formerly called the keyboard layout) into the system.</para>
      <para>
        <b>Prior to Windows 8:</b> Several input locale identifiers can be loaded at a time, but only one per process is active at a time. Loading multiple input locale identifiers makes it possible to rapidly switch between them.</para>
      <para>
        <b>Beginning in Windows 8:</b> The input locale identifier is loaded for the entire system. This function has no effect if the current process does not own the window with keyboard focus.</para>
    </summary>
    <param name="pwszKLID">
      <para>The name of the input locale identifier to load. This name is a string composed of the hexadecimal value of the <a href="https://docs.microsoft.com//windows/desktop/Intl/language-identifiers">Language Identifier</a> (low word) and a device identifier (high word). For example, U.S. English has a language identifier of 0x0409, so the primary U.S. English layout is named "00000409". Variants of U.S. English layout (such as the Dvorak layout) are named "00010409", "00020409", and so on.</para>
      <para>For a list of the input layouts that are supplied with Windows, see <a href="https://docs.microsoft.com//windows-hardware/manufacture/desktop/windows-language-pack-default-values">Keyboard Identifiers and Input Method Editors for Windows</a>.</para>
    </param>
    <param name="Flags">
      <para>Specifies how the input locale identifier is to be loaded. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_ACTIVATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> If the specified input locale identifier is not already loaded, the function loads and activates the input locale identifier for the current thread.<para><b>Beginning in Windows 8:</b> If the specified input locale identifier is not already loaded, the function loads and activates the input locale identifier for the system.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_NOTELLSHELL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> Prevents a <a href="https://docs.microsoft.com//windows/win32/winmsg/shellproc">ShellProc</a> hook procedure from receiving an <b>HSHELL_LANGUAGE</b> hook code when the new input locale identifier is loaded. This value is typically used when an application loads multiple input locale identifiers one after another. Applying this value to all but the last input locale identifier delays the shell's processing until all input locale identifiers have been added.<para><b>Beginning in Windows 8:</b> In this scenario, the last input locale identifier is set for the entire system.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_REORDER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> Moves the specified input locale identifier to the head of the input locale identifier list, making that locale identifier the active locale identifier for the current thread. This value reorders the input locale identifier list even if <b>KLF_ACTIVATE</b> is not provided.<para><b>Beginning in Windows 8:</b> Moves the specified input locale identifier to the head of the input locale identifier list, making that locale identifier the active locale identifier for the system. This value reorders the input locale identifier list even if <b>KLF_ACTIVATE</b> is not provided.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_REPLACELANG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>If the new input locale identifier has the same language identifier as a current input locale identifier, the new input locale identifier replaces the current one as the input locale identifier for that language. If this value is not provided and the input locale identifiers have the same language identifiers, the current input locale identifier is not replaced and the function returns <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_SUBSTITUTE_OK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Substitutes the specified input locale identifier with another locale preferred by the user. The system starts with this flag set, and it is recommended that your application always use this flag. The substitution occurs only if the registry key <b>HKEY_CURRENT_USER\Keyboard Layout\Substitutes</b> explicitly defines a substitution locale. For example, if the key includes the value name "00000409" with value "00010409", loading the US layout ("00000409") causes the United States-Dvorak layout ("00010409") to be loaded instead. The system uses <b>KLF_SUBSTITUTE_OK</b> when booting, and it is recommended that all applications use this value when loading input locale identifiers to ensure that the user's preference is selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_SETFORPROCESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> This flag is valid only with <b>KLF_ACTIVATE</b>. Activates the specified input locale identifier for the entire process and sends the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-inputlangchange">WM_INPUTLANGCHANGE</a> message to the current thread's Focus or Active window. Typically, <b>LoadKeyboardLayout</b> activates an input locale identifier only for the current thread.<para><b>Beginning in Windows 8:</b> This flag is not used. <b>LoadKeyboardLayout</b> always activates an input locale identifier for the entire system if the current process owns the window with keyboard focus.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_UNLOADPREVIOUS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag is unsupported. Use the <see cref="UnloadKeyboardLayout" /> function instead.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the input locale identifier corresponding to the name specified in <i>pwszKLID</i>. If no matching locale is available, the return value is the default language of the system.</para>
      <para>If the function fails, the return value is NULL. This can occur if the layout library is loaded from the application directory.</para>
      <para>To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadKeyboardLayoutA">
    <summary>
      <para>Loads a new input locale identifier (formerly called the keyboard layout) into the system.</para>
      <para>
        <b>Prior to Windows 8:</b> Several input locale identifiers can be loaded at a time, but only one per process is active at a time. Loading multiple input locale identifiers makes it possible to rapidly switch between them.</para>
      <para>
        <b>Beginning in Windows 8:</b> The input locale identifier is loaded for the entire system. This function has no effect if the current process does not own the window with keyboard focus.</para>
    </summary>
    <param name="pwszKLID">
      <para>The name of the input locale identifier to load. This name is a string composed of the hexadecimal value of the <a href="https://docs.microsoft.com//windows/desktop/Intl/language-identifiers">Language Identifier</a> (low word) and a device identifier (high word). For example, U.S. English has a language identifier of 0x0409, so the primary U.S. English layout is named "00000409". Variants of U.S. English layout (such as the Dvorak layout) are named "00010409", "00020409", and so on.</para>
      <para>For a list of the input layouts that are supplied with Windows, see <a href="https://docs.microsoft.com//windows-hardware/manufacture/desktop/windows-language-pack-default-values">Keyboard Identifiers and Input Method Editors for Windows</a>.</para>
    </param>
    <param name="Flags">
      <para>Specifies how the input locale identifier is to be loaded. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_ACTIVATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> If the specified input locale identifier is not already loaded, the function loads and activates the input locale identifier for the current thread.<para><b>Beginning in Windows 8:</b> If the specified input locale identifier is not already loaded, the function loads and activates the input locale identifier for the system.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_NOTELLSHELL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> Prevents a <a href="https://docs.microsoft.com//windows/win32/winmsg/shellproc">ShellProc</a> hook procedure from receiving an <b>HSHELL_LANGUAGE</b> hook code when the new input locale identifier is loaded. This value is typically used when an application loads multiple input locale identifiers one after another. Applying this value to all but the last input locale identifier delays the shell's processing until all input locale identifiers have been added.<para><b>Beginning in Windows 8:</b> In this scenario, the last input locale identifier is set for the entire system.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_REORDER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> Moves the specified input locale identifier to the head of the input locale identifier list, making that locale identifier the active locale identifier for the current thread. This value reorders the input locale identifier list even if <b>KLF_ACTIVATE</b> is not provided.<para><b>Beginning in Windows 8:</b> Moves the specified input locale identifier to the head of the input locale identifier list, making that locale identifier the active locale identifier for the system. This value reorders the input locale identifier list even if <b>KLF_ACTIVATE</b> is not provided.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_REPLACELANG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>If the new input locale identifier has the same language identifier as a current input locale identifier, the new input locale identifier replaces the current one as the input locale identifier for that language. If this value is not provided and the input locale identifiers have the same language identifiers, the current input locale identifier is not replaced and the function returns <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_SUBSTITUTE_OK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Substitutes the specified input locale identifier with another locale preferred by the user. The system starts with this flag set, and it is recommended that your application always use this flag. The substitution occurs only if the registry key <b>HKEY_CURRENT_USER\Keyboard Layout\Substitutes</b> explicitly defines a substitution locale. For example, if the key includes the value name "00000409" with value "00010409", loading the US layout ("00000409") causes the United States-Dvorak layout ("00010409") to be loaded instead. The system uses <b>KLF_SUBSTITUTE_OK</b> when booting, and it is recommended that all applications use this value when loading input locale identifiers to ensure that the user's preference is selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_SETFORPROCESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> This flag is valid only with <b>KLF_ACTIVATE</b>. Activates the specified input locale identifier for the entire process and sends the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-inputlangchange">WM_INPUTLANGCHANGE</a> message to the current thread's Focus or Active window. Typically, <b>LoadKeyboardLayout</b> activates an input locale identifier only for the current thread.<para><b>Beginning in Windows 8:</b> This flag is not used. <b>LoadKeyboardLayout</b> always activates an input locale identifier for the entire system if the current process owns the window with keyboard focus.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_UNLOADPREVIOUS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag is unsupported. Use the <see cref="UnloadKeyboardLayout" /> function instead.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the input locale identifier corresponding to the name specified in <i>pwszKLID</i>. If no matching locale is available, the return value is the default language of the system.</para>
      <para>If the function fails, the return value is NULL. This can occur if the layout library is loaded from the application directory.</para>
      <para>To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadKeyboardLayoutW">
    <summary>
      <para>Loads a new input locale identifier (formerly called the keyboard layout) into the system.</para>
      <para>
        <b>Prior to Windows 8:</b> Several input locale identifiers can be loaded at a time, but only one per process is active at a time. Loading multiple input locale identifiers makes it possible to rapidly switch between them.</para>
      <para>
        <b>Beginning in Windows 8:</b> The input locale identifier is loaded for the entire system. This function has no effect if the current process does not own the window with keyboard focus.</para>
    </summary>
    <param name="pwszKLID">
      <para>The name of the input locale identifier to load. This name is a string composed of the hexadecimal value of the <a href="https://docs.microsoft.com//windows/desktop/Intl/language-identifiers">Language Identifier</a> (low word) and a device identifier (high word). For example, U.S. English has a language identifier of 0x0409, so the primary U.S. English layout is named "00000409". Variants of U.S. English layout (such as the Dvorak layout) are named "00010409", "00020409", and so on.</para>
      <para>For a list of the input layouts that are supplied with Windows, see <a href="https://docs.microsoft.com//windows-hardware/manufacture/desktop/windows-language-pack-default-values">Keyboard Identifiers and Input Method Editors for Windows</a>.</para>
    </param>
    <param name="Flags">
      <para>Specifies how the input locale identifier is to be loaded. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_ACTIVATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> If the specified input locale identifier is not already loaded, the function loads and activates the input locale identifier for the current thread.<para><b>Beginning in Windows 8:</b> If the specified input locale identifier is not already loaded, the function loads and activates the input locale identifier for the system.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_NOTELLSHELL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> Prevents a <a href="https://docs.microsoft.com//windows/win32/winmsg/shellproc">ShellProc</a> hook procedure from receiving an <b>HSHELL_LANGUAGE</b> hook code when the new input locale identifier is loaded. This value is typically used when an application loads multiple input locale identifiers one after another. Applying this value to all but the last input locale identifier delays the shell's processing until all input locale identifiers have been added.<para><b>Beginning in Windows 8:</b> In this scenario, the last input locale identifier is set for the entire system.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_REORDER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> Moves the specified input locale identifier to the head of the input locale identifier list, making that locale identifier the active locale identifier for the current thread. This value reorders the input locale identifier list even if <b>KLF_ACTIVATE</b> is not provided.<para><b>Beginning in Windows 8:</b> Moves the specified input locale identifier to the head of the input locale identifier list, making that locale identifier the active locale identifier for the system. This value reorders the input locale identifier list even if <b>KLF_ACTIVATE</b> is not provided.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_REPLACELANG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>If the new input locale identifier has the same language identifier as a current input locale identifier, the new input locale identifier replaces the current one as the input locale identifier for that language. If this value is not provided and the input locale identifiers have the same language identifiers, the current input locale identifier is not replaced and the function returns <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_SUBSTITUTE_OK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Substitutes the specified input locale identifier with another locale preferred by the user. The system starts with this flag set, and it is recommended that your application always use this flag. The substitution occurs only if the registry key <b>HKEY_CURRENT_USER\Keyboard Layout\Substitutes</b> explicitly defines a substitution locale. For example, if the key includes the value name "00000409" with value "00010409", loading the US layout ("00000409") causes the United States-Dvorak layout ("00010409") to be loaded instead. The system uses <b>KLF_SUBSTITUTE_OK</b> when booting, and it is recommended that all applications use this value when loading input locale identifiers to ensure that the user's preference is selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_SETFORPROCESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> This flag is valid only with <b>KLF_ACTIVATE</b>. Activates the specified input locale identifier for the entire process and sends the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-inputlangchange">WM_INPUTLANGCHANGE</a> message to the current thread's Focus or Active window. Typically, <b>LoadKeyboardLayout</b> activates an input locale identifier only for the current thread.<para><b>Beginning in Windows 8:</b> This flag is not used. <b>LoadKeyboardLayout</b> always activates an input locale identifier for the entire system if the current process owns the window with keyboard focus.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_UNLOADPREVIOUS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag is unsupported. Use the <see cref="UnloadKeyboardLayout" /> function instead.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the input locale identifier corresponding to the name specified in <i>pwszKLID</i>. If no matching locale is available, the return value is the default language of the system.</para>
      <para>If the function fails, the return value is NULL. This can occur if the layout library is loaded from the application directory.</para>
      <para>To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadKeyboardLayout">
    <summary>
      <para>Loads a new input locale identifier (formerly called the keyboard layout) into the system.</para>
      <para>
        <b>Prior to Windows 8:</b> Several input locale identifiers can be loaded at a time, but only one per process is active at a time. Loading multiple input locale identifiers makes it possible to rapidly switch between them.</para>
      <para>
        <b>Beginning in Windows 8:</b> The input locale identifier is loaded for the entire system. This function has no effect if the current process does not own the window with keyboard focus.</para>
    </summary>
    <param name="pwszKLID">
      <para>The name of the input locale identifier to load. This name is a string composed of the hexadecimal value of the <a href="https://docs.microsoft.com//windows/desktop/Intl/language-identifiers">Language Identifier</a> (low word) and a device identifier (high word). For example, U.S. English has a language identifier of 0x0409, so the primary U.S. English layout is named "00000409". Variants of U.S. English layout (such as the Dvorak layout) are named "00010409", "00020409", and so on.</para>
      <para>For a list of the input layouts that are supplied with Windows, see <a href="https://docs.microsoft.com//windows-hardware/manufacture/desktop/windows-language-pack-default-values">Keyboard Identifiers and Input Method Editors for Windows</a>.</para>
    </param>
    <param name="Flags">
      <para>Specifies how the input locale identifier is to be loaded. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_ACTIVATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> If the specified input locale identifier is not already loaded, the function loads and activates the input locale identifier for the current thread.<para><b>Beginning in Windows 8:</b> If the specified input locale identifier is not already loaded, the function loads and activates the input locale identifier for the system.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_NOTELLSHELL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> Prevents a <a href="https://docs.microsoft.com//windows/win32/winmsg/shellproc">ShellProc</a> hook procedure from receiving an <b>HSHELL_LANGUAGE</b> hook code when the new input locale identifier is loaded. This value is typically used when an application loads multiple input locale identifiers one after another. Applying this value to all but the last input locale identifier delays the shell's processing until all input locale identifiers have been added.<para><b>Beginning in Windows 8:</b> In this scenario, the last input locale identifier is set for the entire system.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_REORDER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> Moves the specified input locale identifier to the head of the input locale identifier list, making that locale identifier the active locale identifier for the current thread. This value reorders the input locale identifier list even if <b>KLF_ACTIVATE</b> is not provided.<para><b>Beginning in Windows 8:</b> Moves the specified input locale identifier to the head of the input locale identifier list, making that locale identifier the active locale identifier for the system. This value reorders the input locale identifier list even if <b>KLF_ACTIVATE</b> is not provided.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_REPLACELANG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>If the new input locale identifier has the same language identifier as a current input locale identifier, the new input locale identifier replaces the current one as the input locale identifier for that language. If this value is not provided and the input locale identifiers have the same language identifiers, the current input locale identifier is not replaced and the function returns <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_SUBSTITUTE_OK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Substitutes the specified input locale identifier with another locale preferred by the user. The system starts with this flag set, and it is recommended that your application always use this flag. The substitution occurs only if the registry key <b>HKEY_CURRENT_USER\Keyboard Layout\Substitutes</b> explicitly defines a substitution locale. For example, if the key includes the value name "00000409" with value "00010409", loading the US layout ("00000409") causes the United States-Dvorak layout ("00010409") to be loaded instead. The system uses <b>KLF_SUBSTITUTE_OK</b> when booting, and it is recommended that all applications use this value when loading input locale identifiers to ensure that the user's preference is selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_SETFORPROCESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> This flag is valid only with <b>KLF_ACTIVATE</b>. Activates the specified input locale identifier for the entire process and sends the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-inputlangchange">WM_INPUTLANGCHANGE</a> message to the current thread's Focus or Active window. Typically, <b>LoadKeyboardLayout</b> activates an input locale identifier only for the current thread.<para><b>Beginning in Windows 8:</b> This flag is not used. <b>LoadKeyboardLayout</b> always activates an input locale identifier for the entire system if the current process owns the window with keyboard focus.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_UNLOADPREVIOUS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag is unsupported. Use the <see cref="UnloadKeyboardLayout" /> function instead.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the input locale identifier corresponding to the name specified in <i>pwszKLID</i>. If no matching locale is available, the return value is the default language of the system.</para>
      <para>If the function fails, the return value is NULL. This can occur if the layout library is loaded from the application directory.</para>
      <para>To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadKeyboardLayoutA">
    <summary>
      <para>Loads a new input locale identifier (formerly called the keyboard layout) into the system.</para>
      <para>
        <b>Prior to Windows 8:</b> Several input locale identifiers can be loaded at a time, but only one per process is active at a time. Loading multiple input locale identifiers makes it possible to rapidly switch between them.</para>
      <para>
        <b>Beginning in Windows 8:</b> The input locale identifier is loaded for the entire system. This function has no effect if the current process does not own the window with keyboard focus.</para>
    </summary>
    <param name="pwszKLID">
      <para>The name of the input locale identifier to load. This name is a string composed of the hexadecimal value of the <a href="https://docs.microsoft.com//windows/desktop/Intl/language-identifiers">Language Identifier</a> (low word) and a device identifier (high word). For example, U.S. English has a language identifier of 0x0409, so the primary U.S. English layout is named "00000409". Variants of U.S. English layout (such as the Dvorak layout) are named "00010409", "00020409", and so on.</para>
      <para>For a list of the input layouts that are supplied with Windows, see <a href="https://docs.microsoft.com//windows-hardware/manufacture/desktop/windows-language-pack-default-values">Keyboard Identifiers and Input Method Editors for Windows</a>.</para>
    </param>
    <param name="Flags">
      <para>Specifies how the input locale identifier is to be loaded. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_ACTIVATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> If the specified input locale identifier is not already loaded, the function loads and activates the input locale identifier for the current thread.<para><b>Beginning in Windows 8:</b> If the specified input locale identifier is not already loaded, the function loads and activates the input locale identifier for the system.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_NOTELLSHELL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> Prevents a <a href="https://docs.microsoft.com//windows/win32/winmsg/shellproc">ShellProc</a> hook procedure from receiving an <b>HSHELL_LANGUAGE</b> hook code when the new input locale identifier is loaded. This value is typically used when an application loads multiple input locale identifiers one after another. Applying this value to all but the last input locale identifier delays the shell's processing until all input locale identifiers have been added.<para><b>Beginning in Windows 8:</b> In this scenario, the last input locale identifier is set for the entire system.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_REORDER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> Moves the specified input locale identifier to the head of the input locale identifier list, making that locale identifier the active locale identifier for the current thread. This value reorders the input locale identifier list even if <b>KLF_ACTIVATE</b> is not provided.<para><b>Beginning in Windows 8:</b> Moves the specified input locale identifier to the head of the input locale identifier list, making that locale identifier the active locale identifier for the system. This value reorders the input locale identifier list even if <b>KLF_ACTIVATE</b> is not provided.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_REPLACELANG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>If the new input locale identifier has the same language identifier as a current input locale identifier, the new input locale identifier replaces the current one as the input locale identifier for that language. If this value is not provided and the input locale identifiers have the same language identifiers, the current input locale identifier is not replaced and the function returns <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_SUBSTITUTE_OK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Substitutes the specified input locale identifier with another locale preferred by the user. The system starts with this flag set, and it is recommended that your application always use this flag. The substitution occurs only if the registry key <b>HKEY_CURRENT_USER\Keyboard Layout\Substitutes</b> explicitly defines a substitution locale. For example, if the key includes the value name "00000409" with value "00010409", loading the US layout ("00000409") causes the United States-Dvorak layout ("00010409") to be loaded instead. The system uses <b>KLF_SUBSTITUTE_OK</b> when booting, and it is recommended that all applications use this value when loading input locale identifiers to ensure that the user's preference is selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_SETFORPROCESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> This flag is valid only with <b>KLF_ACTIVATE</b>. Activates the specified input locale identifier for the entire process and sends the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-inputlangchange">WM_INPUTLANGCHANGE</a> message to the current thread's Focus or Active window. Typically, <b>LoadKeyboardLayout</b> activates an input locale identifier only for the current thread.<para><b>Beginning in Windows 8:</b> This flag is not used. <b>LoadKeyboardLayout</b> always activates an input locale identifier for the entire system if the current process owns the window with keyboard focus.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_UNLOADPREVIOUS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag is unsupported. Use the <see cref="UnloadKeyboardLayout" /> function instead.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the input locale identifier corresponding to the name specified in <i>pwszKLID</i>. If no matching locale is available, the return value is the default language of the system.</para>
      <para>If the function fails, the return value is NULL. This can occur if the layout library is loaded from the application directory.</para>
      <para>To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadKeyboardLayoutW">
    <summary>
      <para>Loads a new input locale identifier (formerly called the keyboard layout) into the system.</para>
      <para>
        <b>Prior to Windows 8:</b> Several input locale identifiers can be loaded at a time, but only one per process is active at a time. Loading multiple input locale identifiers makes it possible to rapidly switch between them.</para>
      <para>
        <b>Beginning in Windows 8:</b> The input locale identifier is loaded for the entire system. This function has no effect if the current process does not own the window with keyboard focus.</para>
    </summary>
    <param name="pwszKLID">
      <para>The name of the input locale identifier to load. This name is a string composed of the hexadecimal value of the <a href="https://docs.microsoft.com//windows/desktop/Intl/language-identifiers">Language Identifier</a> (low word) and a device identifier (high word). For example, U.S. English has a language identifier of 0x0409, so the primary U.S. English layout is named "00000409". Variants of U.S. English layout (such as the Dvorak layout) are named "00010409", "00020409", and so on.</para>
      <para>For a list of the input layouts that are supplied with Windows, see <a href="https://docs.microsoft.com//windows-hardware/manufacture/desktop/windows-language-pack-default-values">Keyboard Identifiers and Input Method Editors for Windows</a>.</para>
    </param>
    <param name="Flags">
      <para>Specifies how the input locale identifier is to be loaded. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_ACTIVATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> If the specified input locale identifier is not already loaded, the function loads and activates the input locale identifier for the current thread.<para><b>Beginning in Windows 8:</b> If the specified input locale identifier is not already loaded, the function loads and activates the input locale identifier for the system.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_NOTELLSHELL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> Prevents a <a href="https://docs.microsoft.com//windows/win32/winmsg/shellproc">ShellProc</a> hook procedure from receiving an <b>HSHELL_LANGUAGE</b> hook code when the new input locale identifier is loaded. This value is typically used when an application loads multiple input locale identifiers one after another. Applying this value to all but the last input locale identifier delays the shell's processing until all input locale identifiers have been added.<para><b>Beginning in Windows 8:</b> In this scenario, the last input locale identifier is set for the entire system.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_REORDER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> Moves the specified input locale identifier to the head of the input locale identifier list, making that locale identifier the active locale identifier for the current thread. This value reorders the input locale identifier list even if <b>KLF_ACTIVATE</b> is not provided.<para><b>Beginning in Windows 8:</b> Moves the specified input locale identifier to the head of the input locale identifier list, making that locale identifier the active locale identifier for the system. This value reorders the input locale identifier list even if <b>KLF_ACTIVATE</b> is not provided.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_REPLACELANG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>If the new input locale identifier has the same language identifier as a current input locale identifier, the new input locale identifier replaces the current one as the input locale identifier for that language. If this value is not provided and the input locale identifiers have the same language identifiers, the current input locale identifier is not replaced and the function returns <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_SUBSTITUTE_OK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Substitutes the specified input locale identifier with another locale preferred by the user. The system starts with this flag set, and it is recommended that your application always use this flag. The substitution occurs only if the registry key <b>HKEY_CURRENT_USER\Keyboard Layout\Substitutes</b> explicitly defines a substitution locale. For example, if the key includes the value name "00000409" with value "00010409", loading the US layout ("00000409") causes the United States-Dvorak layout ("00010409") to be loaded instead. The system uses <b>KLF_SUBSTITUTE_OK</b> when booting, and it is recommended that all applications use this value when loading input locale identifiers to ensure that the user's preference is selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_SETFORPROCESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>
            <b>Prior to Windows 8:</b> This flag is valid only with <b>KLF_ACTIVATE</b>. Activates the specified input locale identifier for the entire process and sends the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-inputlangchange">WM_INPUTLANGCHANGE</a> message to the current thread's Focus or Active window. Typically, <b>LoadKeyboardLayout</b> activates an input locale identifier only for the current thread.<para><b>Beginning in Windows 8:</b> This flag is not used. <b>LoadKeyboardLayout</b> always activates an input locale identifier for the entire system if the current process owns the window with keyboard focus.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>KLF_UNLOADPREVIOUS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This flag is unsupported. Use the <see cref="UnloadKeyboardLayout" /> function instead.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the input locale identifier corresponding to the name specified in <i>pwszKLID</i>. If no matching locale is available, the return value is the default language of the system.</para>
      <para>If the function fails, the return value is NULL. This can occur if the layout library is loaded from the application directory.</para>
      <para>To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadMenu">
    <summary>Loads the specified menu resource from the executable (.exe) file associated with an application instance.</summary>
    <param name="hInstance">A handle to the module containing the menu resource to be loaded.</param>
    <param name="lpMenuName">The name of the menu resource. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. To create this value, use the <see cref="MAKEINTRESOURCE" /> macro.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the menu resource.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadMenuA">
    <summary>Loads the specified menu resource from the executable (.exe) file associated with an application instance.</summary>
    <param name="hInstance">A handle to the module containing the menu resource to be loaded.</param>
    <param name="lpMenuName">The name of the menu resource. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. To create this value, use the <see cref="MAKEINTRESOURCE" /> macro.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the menu resource.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadMenuW">
    <summary>Loads the specified menu resource from the executable (.exe) file associated with an application instance.</summary>
    <param name="hInstance">A handle to the module containing the menu resource to be loaded.</param>
    <param name="lpMenuName">The name of the menu resource. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. To create this value, use the <see cref="MAKEINTRESOURCE" /> macro.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the menu resource.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadMenuIndirect">
    <summary>Loads the specified menu template in memory.</summary>
    <param name="lpMenuTemplate">A pointer to a menu template or an extended menu template. A menu template consists of a <see cref="MENUITEMTEMPLATEHEADER" /> structure followed by one or more contiguous <see cref="MENUITEMTEMPLATE" /> structures. An extended menu template consists of a <a href="https://docs.microsoft.com//windows/desktop/menurc/menuex-template-header">MENUEX_TEMPLATE_HEADER</a> structure followed by one or more contiguous <a href="https://docs.microsoft.com//windows/desktop/menurc/menuex-template-item">MENUEX_TEMPLATE_ITEM</a> structures.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the menu.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadMenuIndirectA">
    <summary>Loads the specified menu template in memory.</summary>
    <param name="lpMenuTemplate">A pointer to a menu template or an extended menu template. A menu template consists of a <see cref="MENUITEMTEMPLATEHEADER" /> structure followed by one or more contiguous <see cref="MENUITEMTEMPLATE" /> structures. An extended menu template consists of a <a href="https://docs.microsoft.com//windows/desktop/menurc/menuex-template-header">MENUEX_TEMPLATE_HEADER</a> structure followed by one or more contiguous <a href="https://docs.microsoft.com//windows/desktop/menurc/menuex-template-item">MENUEX_TEMPLATE_ITEM</a> structures.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the menu.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadMenuIndirectW">
    <summary>Loads the specified menu template in memory.</summary>
    <param name="lpMenuTemplate">A pointer to a menu template or an extended menu template. A menu template consists of a <see cref="MENUITEMTEMPLATEHEADER" /> structure followed by one or more contiguous <see cref="MENUITEMTEMPLATE" /> structures. An extended menu template consists of a <a href="https://docs.microsoft.com//windows/desktop/menurc/menuex-template-header">MENUEX_TEMPLATE_HEADER</a> structure followed by one or more contiguous <a href="https://docs.microsoft.com//windows/desktop/menurc/menuex-template-item">MENUEX_TEMPLATE_ITEM</a> structures.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the menu.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadMenuIndirect">
    <summary>Loads the specified menu template in memory.</summary>
    <param name="lpMenuTemplate">A pointer to a menu template or an extended menu template. A menu template consists of a <see cref="MENUITEMTEMPLATEHEADER" /> structure followed by one or more contiguous <see cref="MENUITEMTEMPLATE" /> structures. An extended menu template consists of a <a href="https://docs.microsoft.com//windows/desktop/menurc/menuex-template-header">MENUEX_TEMPLATE_HEADER</a> structure followed by one or more contiguous <a href="https://docs.microsoft.com//windows/desktop/menurc/menuex-template-item">MENUEX_TEMPLATE_ITEM</a> structures.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the menu.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadMenuIndirectA">
    <summary>Loads the specified menu template in memory.</summary>
    <param name="lpMenuTemplate">A pointer to a menu template or an extended menu template. A menu template consists of a <see cref="MENUITEMTEMPLATEHEADER" /> structure followed by one or more contiguous <see cref="MENUITEMTEMPLATE" /> structures. An extended menu template consists of a <a href="https://docs.microsoft.com//windows/desktop/menurc/menuex-template-header">MENUEX_TEMPLATE_HEADER</a> structure followed by one or more contiguous <a href="https://docs.microsoft.com//windows/desktop/menurc/menuex-template-item">MENUEX_TEMPLATE_ITEM</a> structures.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the menu.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadMenuIndirectW">
    <summary>Loads the specified menu template in memory.</summary>
    <param name="lpMenuTemplate">A pointer to a menu template or an extended menu template. A menu template consists of a <see cref="MENUITEMTEMPLATEHEADER" /> structure followed by one or more contiguous <see cref="MENUITEMTEMPLATE" /> structures. An extended menu template consists of a <a href="https://docs.microsoft.com//windows/desktop/menurc/menuex-template-header">MENUEX_TEMPLATE_HEADER</a> structure followed by one or more contiguous <a href="https://docs.microsoft.com//windows/desktop/menurc/menuex-template-item">MENUEX_TEMPLATE_ITEM</a> structures.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the menu.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadMenu">
    <summary>Loads the specified menu resource from the executable (.exe) file associated with an application instance.</summary>
    <param name="hInstance">A handle to the module containing the menu resource to be loaded.</param>
    <param name="lpMenuName">The name of the menu resource. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. To create this value, use the <see cref="MAKEINTRESOURCE" /> macro.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the menu resource.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadMenuA">
    <summary>Loads the specified menu resource from the executable (.exe) file associated with an application instance.</summary>
    <param name="hInstance">A handle to the module containing the menu resource to be loaded.</param>
    <param name="lpMenuName">The name of the menu resource. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. To create this value, use the <see cref="MAKEINTRESOURCE" /> macro.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the menu resource.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadMenuW">
    <summary>Loads the specified menu resource from the executable (.exe) file associated with an application instance.</summary>
    <param name="hInstance">A handle to the module containing the menu resource to be loaded.</param>
    <param name="lpMenuName">The name of the menu resource. Alternatively, this parameter can consist of the resource identifier in the low-order word and zero in the high-order word. To create this value, use the <see cref="MAKEINTRESOURCE" /> macro.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the menu resource.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadString">
    <summary>Loads a string resource from the executable file associated with a specified module and either copies the string into a buffer with a terminating null character or returns a read-only pointer to the string resource itself.</summary>
    <param name="hInstance">A handle to an instance of the module whose executable file contains the string resource. To get the handle to the application itself, call the <see cref="GetModuleHandle" /> function with <b>NULL</b>.</param>
    <param name="uID">The identifier of the string to be loaded.</param>
    <param name="lpBuffer">The buffer to receive the string (if <i>cchBufferMax</i> is non-zero) or a read-only pointer to the string resource itself (if <i>cchBufferMax</i> is zero). Must be of sufficient length to hold a pointer (8 bytes).</param>
    <param name="cchBufferMax">The size of the buffer, in characters. The string is truncated and null-terminated if it is longer than the number of characters specified. If this parameter is 0, then <i>lpBuffer</i> receives a read-only pointer to the string resource itself.</param>
    <returns>
      <para>If the function succeeds, the return value is one of the following:</para>
      <list type="bullet">
        <item>
          <description>The number of characters copied into the buffer (if <i>cchBufferMax</i> is non-zero), not including the terminating null character.</description>
        </item>
        <item>
          <description>The number of characters in the string resource that <i>lpBuffer</i> points to (if <i>cchBufferMax</i> is zero). The string resource is not guaranteed to be null-terminated in the module's resource table, and you can use this value to determine where the string resource ends.</description>
        </item>
        <item>
          <description>Zero if the string resource does not exist.</description>
        </item>
      </list>
      <para>To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadStringA">
    <summary>Loads a string resource from the executable file associated with a specified module and either copies the string into a buffer with a terminating null character or returns a read-only pointer to the string resource itself.</summary>
    <param name="hInstance">A handle to an instance of the module whose executable file contains the string resource. To get the handle to the application itself, call the <see cref="GetModuleHandle" /> function with <b>NULL</b>.</param>
    <param name="uID">The identifier of the string to be loaded.</param>
    <param name="lpBuffer">The buffer to receive the string (if <i>cchBufferMax</i> is non-zero) or a read-only pointer to the string resource itself (if <i>cchBufferMax</i> is zero). Must be of sufficient length to hold a pointer (8 bytes).</param>
    <param name="cchBufferMax">The size of the buffer, in characters. The string is truncated and null-terminated if it is longer than the number of characters specified. If this parameter is 0, then <i>lpBuffer</i> receives a read-only pointer to the string resource itself.</param>
    <returns>
      <para>If the function succeeds, the return value is one of the following:</para>
      <list type="bullet">
        <item>
          <description>The number of characters copied into the buffer (if <i>cchBufferMax</i> is non-zero), not including the terminating null character.</description>
        </item>
        <item>
          <description>The number of characters in the string resource that <i>lpBuffer</i> points to (if <i>cchBufferMax</i> is zero). The string resource is not guaranteed to be null-terminated in the module's resource table, and you can use this value to determine where the string resource ends.</description>
        </item>
        <item>
          <description>Zero if the string resource does not exist.</description>
        </item>
      </list>
      <para>To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadStringW">
    <summary>Loads a string resource from the executable file associated with a specified module and either copies the string into a buffer with a terminating null character or returns a read-only pointer to the string resource itself.</summary>
    <param name="hInstance">A handle to an instance of the module whose executable file contains the string resource. To get the handle to the application itself, call the <see cref="GetModuleHandle" /> function with <b>NULL</b>.</param>
    <param name="uID">The identifier of the string to be loaded.</param>
    <param name="lpBuffer">The buffer to receive the string (if <i>cchBufferMax</i> is non-zero) or a read-only pointer to the string resource itself (if <i>cchBufferMax</i> is zero). Must be of sufficient length to hold a pointer (8 bytes).</param>
    <param name="cchBufferMax">The size of the buffer, in characters. The string is truncated and null-terminated if it is longer than the number of characters specified. If this parameter is 0, then <i>lpBuffer</i> receives a read-only pointer to the string resource itself.</param>
    <returns>
      <para>If the function succeeds, the return value is one of the following:</para>
      <list type="bullet">
        <item>
          <description>The number of characters copied into the buffer (if <i>cchBufferMax</i> is non-zero), not including the terminating null character.</description>
        </item>
        <item>
          <description>The number of characters in the string resource that <i>lpBuffer</i> points to (if <i>cchBufferMax</i> is zero). The string resource is not guaranteed to be null-terminated in the module's resource table, and you can use this value to determine where the string resource ends.</description>
        </item>
        <item>
          <description>Zero if the string resource does not exist.</description>
        </item>
      </list>
      <para>To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadString">
    <summary>Loads a string resource from the executable file associated with a specified module and either copies the string into a buffer with a terminating null character or returns a read-only pointer to the string resource itself.</summary>
    <param name="hInstance">A handle to an instance of the module whose executable file contains the string resource. To get the handle to the application itself, call the <see cref="GetModuleHandle" /> function with <b>NULL</b>.</param>
    <param name="uID">The identifier of the string to be loaded.</param>
    <param name="lpBuffer">The buffer to receive the string (if <i>cchBufferMax</i> is non-zero) or a read-only pointer to the string resource itself (if <i>cchBufferMax</i> is zero). Must be of sufficient length to hold a pointer (8 bytes).</param>
    <param name="cchBufferMax">The size of the buffer, in characters. The string is truncated and null-terminated if it is longer than the number of characters specified. If this parameter is 0, then <i>lpBuffer</i> receives a read-only pointer to the string resource itself.</param>
    <returns>
      <para>If the function succeeds, the return value is one of the following:</para>
      <list type="bullet">
        <item>
          <description>The number of characters copied into the buffer (if <i>cchBufferMax</i> is non-zero), not including the terminating null character.</description>
        </item>
        <item>
          <description>The number of characters in the string resource that <i>lpBuffer</i> points to (if <i>cchBufferMax</i> is zero). The string resource is not guaranteed to be null-terminated in the module's resource table, and you can use this value to determine where the string resource ends.</description>
        </item>
        <item>
          <description>Zero if the string resource does not exist.</description>
        </item>
      </list>
      <para>To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadStringA">
    <summary>Loads a string resource from the executable file associated with a specified module and either copies the string into a buffer with a terminating null character or returns a read-only pointer to the string resource itself.</summary>
    <param name="hInstance">A handle to an instance of the module whose executable file contains the string resource. To get the handle to the application itself, call the <see cref="GetModuleHandle" /> function with <b>NULL</b>.</param>
    <param name="uID">The identifier of the string to be loaded.</param>
    <param name="lpBuffer">The buffer to receive the string (if <i>cchBufferMax</i> is non-zero) or a read-only pointer to the string resource itself (if <i>cchBufferMax</i> is zero). Must be of sufficient length to hold a pointer (8 bytes).</param>
    <param name="cchBufferMax">The size of the buffer, in characters. The string is truncated and null-terminated if it is longer than the number of characters specified. If this parameter is 0, then <i>lpBuffer</i> receives a read-only pointer to the string resource itself.</param>
    <returns>
      <para>If the function succeeds, the return value is one of the following:</para>
      <list type="bullet">
        <item>
          <description>The number of characters copied into the buffer (if <i>cchBufferMax</i> is non-zero), not including the terminating null character.</description>
        </item>
        <item>
          <description>The number of characters in the string resource that <i>lpBuffer</i> points to (if <i>cchBufferMax</i> is zero). The string resource is not guaranteed to be null-terminated in the module's resource table, and you can use this value to determine where the string resource ends.</description>
        </item>
        <item>
          <description>Zero if the string resource does not exist.</description>
        </item>
      </list>
      <para>To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LoadStringW">
    <summary>Loads a string resource from the executable file associated with a specified module and either copies the string into a buffer with a terminating null character or returns a read-only pointer to the string resource itself.</summary>
    <param name="hInstance">A handle to an instance of the module whose executable file contains the string resource. To get the handle to the application itself, call the <see cref="GetModuleHandle" /> function with <b>NULL</b>.</param>
    <param name="uID">The identifier of the string to be loaded.</param>
    <param name="lpBuffer">The buffer to receive the string (if <i>cchBufferMax</i> is non-zero) or a read-only pointer to the string resource itself (if <i>cchBufferMax</i> is zero). Must be of sufficient length to hold a pointer (8 bytes).</param>
    <param name="cchBufferMax">The size of the buffer, in characters. The string is truncated and null-terminated if it is longer than the number of characters specified. If this parameter is 0, then <i>lpBuffer</i> receives a read-only pointer to the string resource itself.</param>
    <returns>
      <para>If the function succeeds, the return value is one of the following:</para>
      <list type="bullet">
        <item>
          <description>The number of characters copied into the buffer (if <i>cchBufferMax</i> is non-zero), not including the terminating null character.</description>
        </item>
        <item>
          <description>The number of characters in the string resource that <i>lpBuffer</i> points to (if <i>cchBufferMax</i> is zero). The string resource is not guaranteed to be null-terminated in the module's resource table, and you can use this value to determine where the string resource ends.</description>
        </item>
        <item>
          <description>Zero if the string resource does not exist.</description>
        </item>
      </list>
      <para>To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LockSetForegroundWindow">
    <summary>The foreground process can call the <b>LockSetForegroundWindow</b> function to disable calls to the <see cref="SetForegroundWindow" /> function.</summary>
    <param name="uLockCode">
      <para>Specifies whether to enable or disable calls to <see cref="SetForegroundWindow" />. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LSFW_LOCK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Disables calls to <see cref="SetForegroundWindow" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LSFW_UNLOCK</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Enables calls to <see cref="SetForegroundWindow" />.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LockWindowUpdate">
    <summary>The <b>LockWindowUpdate</b> function disables or enables drawing in the specified window. Only one window can be locked at a time.</summary>
    <param name="hWndLock">The window in which drawing will be disabled. If this parameter is <b>NULL</b>, drawing in the locked window is enabled.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero, indicating that an error occurred or another window was already locked.</para>
    </returns>
  </member>
  <member name="Windows.LockWorkStation">
    <summary>Locks the workstation's display. Locking a workstation protects it from unauthorized use.</summary>
    <returns>
      <para>If the function succeeds, the return value is nonzero. Because the function executes asynchronously, a nonzero return value indicates that the operation has been initiated. It does not indicate whether the workstation has been successfully locked.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LogicalToPhysicalPoint">
    <summary>Converts the logical coordinates of a point in a window to physical coordinates.</summary>
    <param name="hWnd">A handle to the window whose transform is used for the conversion. Top level windows are fully supported. In the case of child windows, only the area of overlap between the parent and the child window is converted.</param>
    <param name="lpPoint">A pointer to a <see cref="POINT" /> structure that specifies the logical coordinates to be converted. The new physical coordinates are copied into this structure if the function succeeds.</param>
  </member>
  <member name="Windows.LookupIconIdFromDirectory">
    <summary>
      <para>Searches through icon (<b>RT_GROUP_ICON</b>) or cursor (<b>RT_GROUP_CURSOR</b>) resource data for the icon or cursor that best fits the current display device.</para>
      <para>To specify a desired height or width, use the <see cref="LookupIconIdFromDirectoryEx" /> function. This function calls it by passing zero in the <b>cxDesired</b>/<b>cyDesired</b> parameters.</para>
    </summary>
    <param name="presbits">The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if <i>presbits</i> is not pointing to valid resource data.</param>
    <param name="fIcon">Indicates whether an icon or a cursor is sought. If this parameter is <b>TRUE</b>, the function is searching for an icon; if the parameter is <b>FALSE</b>, the function is searching for a cursor.</param>
    <returns>
      <para>If the function succeeds, the return value is an integer resource identifier for the icon (<b>RT_ICON</b>) or cursor (<b>RT_CURSOR</b>) that best fits the current display device.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.LookupIconIdFromDirectoryEx">
    <summary>
      <para>Searches through icon (<b>RT_GROUP_ICON</b>) or cursor (<b>RT_GROUP_CURSOR</b>) resource data for the icon or cursor that best fits the current display device.</para>
      <para>If more than one image exists in resource group, this method uses the following criteria to choose an image:</para>
      <list type="bullet">
        <item>
          <description>The image closest but not exceed the requested size is selected.</description>
        </item>
        <item>
          <description>If two or more images of that size are present, the one that matches the color depth of the display is chosen.</description>
        </item>
        <item>
          <description>If no images exactly match the color depth of the display, the image with the greatest color depth that does not exceed the color depth of the display is chosen. If all exceed the color depth, the one with the lowest color depth is chosen.</description>
        </item>
      </list>
    </summary>
    <param name="presbits">The icon or cursor directory data. Because this function does not validate the resource data, it causes a general protection (GP) fault or returns an undefined value if <i>presbits</i> is not pointing to valid resource data.</param>
    <param name="fIcon">Indicates whether an icon or a cursor is sought. If this parameter is <b>TRUE</b>, the function is searching for an icon; if the parameter is <b>FALSE</b>, the function is searching for a cursor.</param>
    <param name="cxDesired">The desired width, in pixels, of the icon. If this parameter is zero, the function uses the <b>SM_CXICON</b> or <b>SM_CXCURSOR</b> system metric value.</param>
    <param name="cyDesired">The desired height, in pixels, of the icon. If this parameter is zero, the function uses the <b>SM_CYICON</b> or <b>SM_CYCURSOR</b> system metric value.</param>
    <param name="Flags">
      <para>A combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_DEFAULTCOLOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Uses the default color format.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LR_MONOCHROME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Creates a monochrome icon or cursor.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an integer resource identifier for the icon (<b>RT_ICON</b>) or cursor (<b>RT_CURSOR</b>) that best fits the current display device.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.MAKEINTRESOURCE">
    <summary>Converts an integer value to a resource type compatible with the resource-management functions. This macro is used in place of a string containing the name of the resource.</summary>
    <param name="i">The integer value to be converted.</param>
  </member>
  <member name="Windows.MAKEINTRESOURCE">
    <summary>Converts an integer value to a resource type compatible with the resource-management functions. This macro is used in place of a string containing the name of the resource.</summary>
    <param name="i">The integer value to be converted.</param>
  </member>
  <member name="Windows.MAKELPARAM">
    <summary>Creates a value for use as an<i>lParam</i> parameter in a message. The macro concatenates the specified values.</summary>
    <param name="l">The low-order word of the new value.</param>
    <param name="h">The high-order word of the new value.</param>
  </member>
  <member name="Windows.MAKELRESULT">
    <summary>Creates a value for use as a return value from a window procedure. The macro concatenates the specified values.</summary>
    <param name="l">The low-order word of the new value.</param>
    <param name="h">The high-order word of the new value.</param>
  </member>
  <member name="Windows.MAKEWPARAM">
    <summary>Creates a value for use as a <i>wParam</i> parameter in a message. The macro concatenates the specified values.</summary>
    <param name="l">The low-order word of the new value.</param>
    <param name="h">The high-order word of the new value.</param>
  </member>
  <member name="Windows.MapDialogRect">
    <summary>Converts the specified dialog box units to screen units (pixels). The function replaces the coordinates in the specified <see cref="RECT" /> structure with the converted coordinates, which allows the structure to be used to create a dialog box or position a control within a dialog box.</summary>
    <param name="hDlg">A handle to a dialog box. This function accepts only handles returned by one of the dialog box creation functions; handles for other windows are not valid.</param>
    <param name="lpRect">A pointer to a <see cref="RECT" /> structure that contains the dialog box coordinates to be converted.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.MapWindowPoints">
    <summary>The <b>MapWindowPoints</b> function converts (maps) a set of points from a coordinate space relative to one window to a coordinate space relative to another window.</summary>
    <param name="hWndFrom">A handle to the window from which points are converted. If this parameter is <b>NULL</b> or HWND_DESKTOP, the points are presumed to be in screen coordinates.</param>
    <param name="hWndTo">A handle to the window to which points are converted. If this parameter is <b>NULL</b> or HWND_DESKTOP, the points are converted to screen coordinates.</param>
    <param name="lpPoints">A pointer to an array of <see cref="POINT" /> structures that contain the set of points to be converted. The points are in device units. This parameter can also point to a <see cref="RECT" /> structure, in which case the <i>cPoints</i> parameter should be set to 2.</param>
    <param name="cPoints">The number of <see cref="POINT" /> structures in the array pointed to by the <i>lpPoints</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the low-order word of the return value is the number of pixels added to the horizontal coordinate of each source point in order to compute the horizontal coordinate of each destination point. (In addition to that, if precisely one of <i>hWndFrom</i> and <i>hWndTo</i> is mirrored, then each resulting horizontal coordinate is multiplied by -1.) The high-order word is the number of pixels added to the vertical coordinate of each source point in order to compute the vertical coordinate of each destination point.</para>
      <para>If the function fails, the return value is zero. Call <see cref="SetLastError" /> prior to calling this method to differentiate an error return value from a legitimate "0" return value.</para>
    </returns>
  </member>
  <member name="Windows.MenuItemFromPoint">
    <summary>Determines which menu item, if any, is at the specified location.</summary>
    <param name="hWnd">A handle to the window containing the menu. If this value is <b>NULL</b> and the <i>hMenu</i> parameter represents a popup menu, the function will find the menu window.</param>
    <param name="hMenu">A handle to the menu containing the menu items to hit test.</param>
    <param name="ptScreen">A structure that specifies the location to test. If <i>hMenu</i> specifies a menu bar, this parameter is in window coordinates. Otherwise, it is in client coordinates.</param>
    <returns>Returns the zero-based position of the menu item at the specified location or -1 if no menu item is at the specified location.</returns>
  </member>
  <member name="Windows.MessageBeep">
    <summary>Plays a waveform sound. The waveform sound for each sound type is identified by an entry in the registry.<div><b>Note</b>  On Windows Server 2022, the Microsoft\Windows\Multimedia\SystemSoundsService task in Task Scheduler is disabled. This task will need to be enabled for MessageBeep to function.</div></summary>
    <param name="uType">
      <para>The sound to be played. The sounds are set by the user through the Sound control panel application, and then stored in the registry.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>0xFFFFFFFF</description>
          <description>A simple beep. If the sound card is not available, the sound is generated using the speaker.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_ICONASTERISK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040L</term>
              </listheader>
            </list>
          </description>
          <description>See <b>MB_ICONINFORMATION</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_ICONEXCLAMATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000030L</term>
              </listheader>
            </list>
          </description>
          <description>See <b>MB_ICONWARNING</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_ICONERROR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010L</term>
              </listheader>
            </list>
          </description>
          <description>The sound specified as the Windows Critical Stop sound.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_ICONHAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010L</term>
              </listheader>
            </list>
          </description>
          <description>See <b>MB_ICONERROR</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_ICONINFORMATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040L</term>
              </listheader>
            </list>
          </description>
          <description>The sound specified as the Windows Asterisk sound.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_ICONQUESTION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020L</term>
              </listheader>
            </list>
          </description>
          <description>The sound specified as the Windows Question sound.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_ICONSTOP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010L</term>
              </listheader>
            </list>
          </description>
          <description>See <b>MB_ICONERROR</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_ICONWARNING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000030L</term>
              </listheader>
            </list>
          </description>
          <description>The sound specified as the Windows Exclamation sound.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_OK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>The sound specified as the Windows Default Beep sound.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.MessageBox">
    <summary>Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information. The message box returns an integer value that indicates which button the user clicked.</summary>
    <param name="hWnd">A handle to the owner window of the message box to be created. If this parameter is <b>NULL</b>, the message box has no owner window.</param>
    <param name="lpText">The message to be displayed. If the string consists of more than one line, you can separate the lines using a carriage return and/or linefeed character between each line.</param>
    <param name="lpCaption">The dialog box title. If this parameter is <b>NULL</b>, the default title is <b>Error</b>.</param>
    <param name="uType">
      <para>The contents and behavior of the dialog box. This parameter can be a combination of flags from the following groups of flags.</para>
      <para>To indicate the buttons displayed in the message box, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_ABORTRETRYIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains three push buttons: <b>Abort</b>, <b>Retry</b>, and <b>Ignore</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_CANCELTRYCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000006L</term>
              </listheader>
            </list>
          </description>
          <description> The message box contains three push buttons: <b>Cancel</b>, <b>Try Again</b>, <b>Continue</b>. Use this message box type instead of MB_ABORTRETRYIGNORE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_HELP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00004000L</term>
              </listheader>
            </list>
          </description>
          <description> Adds a <b>Help</b> button to the message box. When the user clicks the <b>Help</b> button or presses F1, the system sends a <a href="https://docs.microsoft.com//windows/desktop/shell/wm-help">WM_HELP</a> message to the owner.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_OK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains one push button: <b>OK</b>. This is the default.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_OKCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>OK</b> and <b>Cancel</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_RETRYCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000005L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>Retry</b> and <b>Cancel</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_YESNO</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>Yes</b> and <b>No</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_YESNOCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains three push buttons: <b>Yes</b>, <b>No</b>, and <b>Cancel</b>.</description>
        </listheader>
      </list> <para>To display an icon in the message box, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONEXCLAMATION</b></term></listheader><listheader><term>0x00000030L</term></listheader></list></description><description>An exclamation-point icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONWARNING</b></term></listheader><listheader><term>0x00000030L</term></listheader></list></description><description>An exclamation-point icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONINFORMATION</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>An icon consisting of a lowercase letter <i>i</i> in a circle appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONASTERISK</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>An icon consisting of a lowercase letter <i>i</i> in a circle appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONQUESTION</b></term></listheader><listheader><term>0x00000020L</term></listheader></list></description><description>A question-mark icon appears in the message box. The question-mark message icon is no longer recommended because it does not clearly represent a specific type of message and because the phrasing of a message as a question could apply to any message type. In addition, users can confuse the message symbol question mark with Help information. Therefore, do not use this question mark message symbol in your message boxes. The system continues to support its inclusion only for backward compatibility.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONSTOP</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONERROR</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONHAND</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader></list> <para>To indicate the default button, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON1</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>The first button is the default button.<para><b>MB_DEFBUTTON1</b> is the default unless <b>MB_DEFBUTTON2</b>, <b>MB_DEFBUTTON3</b>, or <b>MB_DEFBUTTON4</b> is specified.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON2</b></term></listheader><listheader><term>0x00000100L</term></listheader></list></description><description>The second button is the default button.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON3</b></term></listheader><listheader><term>0x00000200L</term></listheader></list></description><description>The third button is the default button.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON4</b></term></listheader><listheader><term>0x00000300L</term></listheader></list></description><description>The fourth button is the default button.</description></listheader></list> <para>To indicate the modality of the dialog box, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_APPLMODAL</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>The user must respond to the message box before continuing work in the window identified by the <i>hWnd</i> parameter. However, the user can move to the windows of other threads and work in those windows. 							 <para>Depending on the hierarchy of windows in the application, the user may be able to move to other windows within the thread. All child windows of the parent of the message box are automatically disabled, but pop-up windows are not.</para><para><b>MB_APPLMODAL</b> is the default if neither <b>MB_SYSTEMMODAL</b> nor <b>MB_TASKMODAL</b> is specified.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SYSTEMMODAL</b></term></listheader><listheader><term>0x00001000L</term></listheader></list></description><description>Same as MB_APPLMODAL except that the message box has the <b>WS_EX_TOPMOST</b> style. Use system-modal message boxes to notify the user of serious, potentially damaging errors that require immediate attention (for example, running out of memory). This flag has no effect on the user's ability to interact with windows other than those associated with <i>hWnd</i>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_TASKMODAL</b></term></listheader><listheader><term>0x00002000L</term></listheader></list></description><description>Same as <b>MB_APPLMODAL</b> except that all the top-level windows belonging to the current thread are disabled if the <i>hWnd</i> parameter is <b>NULL</b>. Use this flag when the calling application or library does not have a window handle available but still needs to prevent input to other windows in the calling thread without suspending other threads.</description></listheader></list> <para>To specify other options, use one or more of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFAULT_DESKTOP_ONLY</b></term></listheader><listheader><term>0x00020000L</term></listheader></list></description><description> Same as desktop of the interactive window station. For more information, see <a href="https://docs.microsoft.com//windows/desktop/winstation/window-stations">Window Stations</a>. 					 		 					 		<para>If the current input desktop is not the default desktop, <b>MessageBox</b> does not return until the user switches to the default desktop.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_RIGHT</b></term></listheader><listheader><term>0x00080000L</term></listheader></list></description><description>The text is right-justified.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_RTLREADING</b></term></listheader><listheader><term>0x00100000L</term></listheader></list></description><description>Displays message and caption text using right-to-left reading order on Hebrew and Arabic systems.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SETFOREGROUND</b></term></listheader><listheader><term>0x00010000L</term></listheader></list></description><description>The message box becomes the foreground window. Internally, the system calls the <see cref="SetForegroundWindow" /> function for the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_TOPMOST</b></term></listheader><listheader><term>0x00040000L</term></listheader></list></description><description>The message box is created with the <b>WS_EX_TOPMOST</b> window style.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SERVICE_NOTIFICATION</b></term></listheader><listheader><term>0x00200000L</term></listheader></list></description><description>The caller is a service notifying the user of an event. The function displays a message box on the current active desktop, even if there is no user logged on to the computer.<para><b>Terminal Services:</b> If the calling thread has an impersonation token, the function directs the message box to the session specified in the impersonation token.</para><para>If this flag is set, the <i>hWnd</i> parameter must be <b>NULL</b>. This is so that the message box can appear on a desktop other than the desktop corresponding to the <i>hWnd</i>.</para><para>For information on security considerations in regard to using this flag, see <a href="https://docs.microsoft.com//windows/desktop/Services/interactive-services">Interactive Services</a>. In particular, be aware that this flag can produce interactive content on a locked desktop and should therefore be used for only a very limited set of scenarios, such as resource exhaustion.</para></description></listheader></list></param>
    <returns>
      <para>If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC will no effect - unless an MB_OK button is present. If an MB_OK button is displayed and the user presses ESC, the return value will be <b>IDOK</b>.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the function succeeds, the return value is one of the following menu-item values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDABORT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Abort</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Cancel</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Continue</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Ignore</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDNO</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The <b>No</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDOK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The <b>OK</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDRETRY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Retry</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDTRYAGAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Try Again</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDYES</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Yes</b> button was selected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MessageBoxA">
    <summary>Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information. The message box returns an integer value that indicates which button the user clicked.</summary>
    <param name="hWnd">A handle to the owner window of the message box to be created. If this parameter is <b>NULL</b>, the message box has no owner window.</param>
    <param name="lpText">The message to be displayed. If the string consists of more than one line, you can separate the lines using a carriage return and/or linefeed character between each line.</param>
    <param name="lpCaption">The dialog box title. If this parameter is <b>NULL</b>, the default title is <b>Error</b>.</param>
    <param name="uType">
      <para>The contents and behavior of the dialog box. This parameter can be a combination of flags from the following groups of flags.</para>
      <para>To indicate the buttons displayed in the message box, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_ABORTRETRYIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains three push buttons: <b>Abort</b>, <b>Retry</b>, and <b>Ignore</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_CANCELTRYCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000006L</term>
              </listheader>
            </list>
          </description>
          <description> The message box contains three push buttons: <b>Cancel</b>, <b>Try Again</b>, <b>Continue</b>. Use this message box type instead of MB_ABORTRETRYIGNORE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_HELP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00004000L</term>
              </listheader>
            </list>
          </description>
          <description> Adds a <b>Help</b> button to the message box. When the user clicks the <b>Help</b> button or presses F1, the system sends a <a href="https://docs.microsoft.com//windows/desktop/shell/wm-help">WM_HELP</a> message to the owner.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_OK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains one push button: <b>OK</b>. This is the default.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_OKCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>OK</b> and <b>Cancel</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_RETRYCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000005L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>Retry</b> and <b>Cancel</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_YESNO</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>Yes</b> and <b>No</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_YESNOCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains three push buttons: <b>Yes</b>, <b>No</b>, and <b>Cancel</b>.</description>
        </listheader>
      </list> <para>To display an icon in the message box, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONEXCLAMATION</b></term></listheader><listheader><term>0x00000030L</term></listheader></list></description><description>An exclamation-point icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONWARNING</b></term></listheader><listheader><term>0x00000030L</term></listheader></list></description><description>An exclamation-point icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONINFORMATION</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>An icon consisting of a lowercase letter <i>i</i> in a circle appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONASTERISK</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>An icon consisting of a lowercase letter <i>i</i> in a circle appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONQUESTION</b></term></listheader><listheader><term>0x00000020L</term></listheader></list></description><description>A question-mark icon appears in the message box. The question-mark message icon is no longer recommended because it does not clearly represent a specific type of message and because the phrasing of a message as a question could apply to any message type. In addition, users can confuse the message symbol question mark with Help information. Therefore, do not use this question mark message symbol in your message boxes. The system continues to support its inclusion only for backward compatibility.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONSTOP</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONERROR</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONHAND</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader></list> <para>To indicate the default button, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON1</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>The first button is the default button.<para><b>MB_DEFBUTTON1</b> is the default unless <b>MB_DEFBUTTON2</b>, <b>MB_DEFBUTTON3</b>, or <b>MB_DEFBUTTON4</b> is specified.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON2</b></term></listheader><listheader><term>0x00000100L</term></listheader></list></description><description>The second button is the default button.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON3</b></term></listheader><listheader><term>0x00000200L</term></listheader></list></description><description>The third button is the default button.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON4</b></term></listheader><listheader><term>0x00000300L</term></listheader></list></description><description>The fourth button is the default button.</description></listheader></list> <para>To indicate the modality of the dialog box, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_APPLMODAL</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>The user must respond to the message box before continuing work in the window identified by the <i>hWnd</i> parameter. However, the user can move to the windows of other threads and work in those windows. 							 <para>Depending on the hierarchy of windows in the application, the user may be able to move to other windows within the thread. All child windows of the parent of the message box are automatically disabled, but pop-up windows are not.</para><para><b>MB_APPLMODAL</b> is the default if neither <b>MB_SYSTEMMODAL</b> nor <b>MB_TASKMODAL</b> is specified.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SYSTEMMODAL</b></term></listheader><listheader><term>0x00001000L</term></listheader></list></description><description>Same as MB_APPLMODAL except that the message box has the <b>WS_EX_TOPMOST</b> style. Use system-modal message boxes to notify the user of serious, potentially damaging errors that require immediate attention (for example, running out of memory). This flag has no effect on the user's ability to interact with windows other than those associated with <i>hWnd</i>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_TASKMODAL</b></term></listheader><listheader><term>0x00002000L</term></listheader></list></description><description>Same as <b>MB_APPLMODAL</b> except that all the top-level windows belonging to the current thread are disabled if the <i>hWnd</i> parameter is <b>NULL</b>. Use this flag when the calling application or library does not have a window handle available but still needs to prevent input to other windows in the calling thread without suspending other threads.</description></listheader></list> <para>To specify other options, use one or more of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFAULT_DESKTOP_ONLY</b></term></listheader><listheader><term>0x00020000L</term></listheader></list></description><description> Same as desktop of the interactive window station. For more information, see <a href="https://docs.microsoft.com//windows/desktop/winstation/window-stations">Window Stations</a>. 					 		 					 		<para>If the current input desktop is not the default desktop, <b>MessageBox</b> does not return until the user switches to the default desktop.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_RIGHT</b></term></listheader><listheader><term>0x00080000L</term></listheader></list></description><description>The text is right-justified.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_RTLREADING</b></term></listheader><listheader><term>0x00100000L</term></listheader></list></description><description>Displays message and caption text using right-to-left reading order on Hebrew and Arabic systems.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SETFOREGROUND</b></term></listheader><listheader><term>0x00010000L</term></listheader></list></description><description>The message box becomes the foreground window. Internally, the system calls the <see cref="SetForegroundWindow" /> function for the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_TOPMOST</b></term></listheader><listheader><term>0x00040000L</term></listheader></list></description><description>The message box is created with the <b>WS_EX_TOPMOST</b> window style.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SERVICE_NOTIFICATION</b></term></listheader><listheader><term>0x00200000L</term></listheader></list></description><description>The caller is a service notifying the user of an event. The function displays a message box on the current active desktop, even if there is no user logged on to the computer.<para><b>Terminal Services:</b> If the calling thread has an impersonation token, the function directs the message box to the session specified in the impersonation token.</para><para>If this flag is set, the <i>hWnd</i> parameter must be <b>NULL</b>. This is so that the message box can appear on a desktop other than the desktop corresponding to the <i>hWnd</i>.</para><para>For information on security considerations in regard to using this flag, see <a href="https://docs.microsoft.com//windows/desktop/Services/interactive-services">Interactive Services</a>. In particular, be aware that this flag can produce interactive content on a locked desktop and should therefore be used for only a very limited set of scenarios, such as resource exhaustion.</para></description></listheader></list></param>
    <returns>
      <para>If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC will no effect - unless an MB_OK button is present. If an MB_OK button is displayed and the user presses ESC, the return value will be <b>IDOK</b>.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the function succeeds, the return value is one of the following menu-item values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDABORT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Abort</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Cancel</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Continue</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Ignore</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDNO</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The <b>No</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDOK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The <b>OK</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDRETRY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Retry</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDTRYAGAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Try Again</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDYES</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Yes</b> button was selected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MessageBoxW">
    <summary>Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information. The message box returns an integer value that indicates which button the user clicked.</summary>
    <param name="hWnd">A handle to the owner window of the message box to be created. If this parameter is <b>NULL</b>, the message box has no owner window.</param>
    <param name="lpText">The message to be displayed. If the string consists of more than one line, you can separate the lines using a carriage return and/or linefeed character between each line.</param>
    <param name="lpCaption">The dialog box title. If this parameter is <b>NULL</b>, the default title is <b>Error</b>.</param>
    <param name="uType">
      <para>The contents and behavior of the dialog box. This parameter can be a combination of flags from the following groups of flags.</para>
      <para>To indicate the buttons displayed in the message box, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_ABORTRETRYIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains three push buttons: <b>Abort</b>, <b>Retry</b>, and <b>Ignore</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_CANCELTRYCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000006L</term>
              </listheader>
            </list>
          </description>
          <description> The message box contains three push buttons: <b>Cancel</b>, <b>Try Again</b>, <b>Continue</b>. Use this message box type instead of MB_ABORTRETRYIGNORE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_HELP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00004000L</term>
              </listheader>
            </list>
          </description>
          <description> Adds a <b>Help</b> button to the message box. When the user clicks the <b>Help</b> button or presses F1, the system sends a <a href="https://docs.microsoft.com//windows/desktop/shell/wm-help">WM_HELP</a> message to the owner.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_OK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains one push button: <b>OK</b>. This is the default.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_OKCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>OK</b> and <b>Cancel</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_RETRYCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000005L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>Retry</b> and <b>Cancel</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_YESNO</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>Yes</b> and <b>No</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_YESNOCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains three push buttons: <b>Yes</b>, <b>No</b>, and <b>Cancel</b>.</description>
        </listheader>
      </list> <para>To display an icon in the message box, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONEXCLAMATION</b></term></listheader><listheader><term>0x00000030L</term></listheader></list></description><description>An exclamation-point icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONWARNING</b></term></listheader><listheader><term>0x00000030L</term></listheader></list></description><description>An exclamation-point icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONINFORMATION</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>An icon consisting of a lowercase letter <i>i</i> in a circle appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONASTERISK</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>An icon consisting of a lowercase letter <i>i</i> in a circle appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONQUESTION</b></term></listheader><listheader><term>0x00000020L</term></listheader></list></description><description>A question-mark icon appears in the message box. The question-mark message icon is no longer recommended because it does not clearly represent a specific type of message and because the phrasing of a message as a question could apply to any message type. In addition, users can confuse the message symbol question mark with Help information. Therefore, do not use this question mark message symbol in your message boxes. The system continues to support its inclusion only for backward compatibility.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONSTOP</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONERROR</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONHAND</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader></list> <para>To indicate the default button, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON1</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>The first button is the default button.<para><b>MB_DEFBUTTON1</b> is the default unless <b>MB_DEFBUTTON2</b>, <b>MB_DEFBUTTON3</b>, or <b>MB_DEFBUTTON4</b> is specified.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON2</b></term></listheader><listheader><term>0x00000100L</term></listheader></list></description><description>The second button is the default button.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON3</b></term></listheader><listheader><term>0x00000200L</term></listheader></list></description><description>The third button is the default button.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON4</b></term></listheader><listheader><term>0x00000300L</term></listheader></list></description><description>The fourth button is the default button.</description></listheader></list> <para>To indicate the modality of the dialog box, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_APPLMODAL</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>The user must respond to the message box before continuing work in the window identified by the <i>hWnd</i> parameter. However, the user can move to the windows of other threads and work in those windows. 							 <para>Depending on the hierarchy of windows in the application, the user may be able to move to other windows within the thread. All child windows of the parent of the message box are automatically disabled, but pop-up windows are not.</para><para><b>MB_APPLMODAL</b> is the default if neither <b>MB_SYSTEMMODAL</b> nor <b>MB_TASKMODAL</b> is specified.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SYSTEMMODAL</b></term></listheader><listheader><term>0x00001000L</term></listheader></list></description><description>Same as MB_APPLMODAL except that the message box has the <b>WS_EX_TOPMOST</b> style. Use system-modal message boxes to notify the user of serious, potentially damaging errors that require immediate attention (for example, running out of memory). This flag has no effect on the user's ability to interact with windows other than those associated with <i>hWnd</i>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_TASKMODAL</b></term></listheader><listheader><term>0x00002000L</term></listheader></list></description><description>Same as <b>MB_APPLMODAL</b> except that all the top-level windows belonging to the current thread are disabled if the <i>hWnd</i> parameter is <b>NULL</b>. Use this flag when the calling application or library does not have a window handle available but still needs to prevent input to other windows in the calling thread without suspending other threads.</description></listheader></list> <para>To specify other options, use one or more of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFAULT_DESKTOP_ONLY</b></term></listheader><listheader><term>0x00020000L</term></listheader></list></description><description> Same as desktop of the interactive window station. For more information, see <a href="https://docs.microsoft.com//windows/desktop/winstation/window-stations">Window Stations</a>. 					 		 					 		<para>If the current input desktop is not the default desktop, <b>MessageBox</b> does not return until the user switches to the default desktop.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_RIGHT</b></term></listheader><listheader><term>0x00080000L</term></listheader></list></description><description>The text is right-justified.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_RTLREADING</b></term></listheader><listheader><term>0x00100000L</term></listheader></list></description><description>Displays message and caption text using right-to-left reading order on Hebrew and Arabic systems.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SETFOREGROUND</b></term></listheader><listheader><term>0x00010000L</term></listheader></list></description><description>The message box becomes the foreground window. Internally, the system calls the <see cref="SetForegroundWindow" /> function for the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_TOPMOST</b></term></listheader><listheader><term>0x00040000L</term></listheader></list></description><description>The message box is created with the <b>WS_EX_TOPMOST</b> window style.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SERVICE_NOTIFICATION</b></term></listheader><listheader><term>0x00200000L</term></listheader></list></description><description>The caller is a service notifying the user of an event. The function displays a message box on the current active desktop, even if there is no user logged on to the computer.<para><b>Terminal Services:</b> If the calling thread has an impersonation token, the function directs the message box to the session specified in the impersonation token.</para><para>If this flag is set, the <i>hWnd</i> parameter must be <b>NULL</b>. This is so that the message box can appear on a desktop other than the desktop corresponding to the <i>hWnd</i>.</para><para>For information on security considerations in regard to using this flag, see <a href="https://docs.microsoft.com//windows/desktop/Services/interactive-services">Interactive Services</a>. In particular, be aware that this flag can produce interactive content on a locked desktop and should therefore be used for only a very limited set of scenarios, such as resource exhaustion.</para></description></listheader></list></param>
    <returns>
      <para>If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC will no effect - unless an MB_OK button is present. If an MB_OK button is displayed and the user presses ESC, the return value will be <b>IDOK</b>.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the function succeeds, the return value is one of the following menu-item values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDABORT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Abort</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Cancel</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Continue</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Ignore</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDNO</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The <b>No</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDOK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The <b>OK</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDRETRY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Retry</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDTRYAGAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Try Again</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDYES</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Yes</b> button was selected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MessageBox">
    <summary>Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information. The message box returns an integer value that indicates which button the user clicked.</summary>
    <param name="hWnd">A handle to the owner window of the message box to be created. If this parameter is <b>NULL</b>, the message box has no owner window.</param>
    <param name="lpText">The message to be displayed. If the string consists of more than one line, you can separate the lines using a carriage return and/or linefeed character between each line.</param>
    <param name="lpCaption">The dialog box title. If this parameter is <b>NULL</b>, the default title is <b>Error</b>.</param>
    <param name="uType">
      <para>The contents and behavior of the dialog box. This parameter can be a combination of flags from the following groups of flags.</para>
      <para>To indicate the buttons displayed in the message box, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_ABORTRETRYIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains three push buttons: <b>Abort</b>, <b>Retry</b>, and <b>Ignore</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_CANCELTRYCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000006L</term>
              </listheader>
            </list>
          </description>
          <description> The message box contains three push buttons: <b>Cancel</b>, <b>Try Again</b>, <b>Continue</b>. Use this message box type instead of MB_ABORTRETRYIGNORE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_HELP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00004000L</term>
              </listheader>
            </list>
          </description>
          <description> Adds a <b>Help</b> button to the message box. When the user clicks the <b>Help</b> button or presses F1, the system sends a <a href="https://docs.microsoft.com//windows/desktop/shell/wm-help">WM_HELP</a> message to the owner.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_OK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains one push button: <b>OK</b>. This is the default.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_OKCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>OK</b> and <b>Cancel</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_RETRYCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000005L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>Retry</b> and <b>Cancel</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_YESNO</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>Yes</b> and <b>No</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_YESNOCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains three push buttons: <b>Yes</b>, <b>No</b>, and <b>Cancel</b>.</description>
        </listheader>
      </list> <para>To display an icon in the message box, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONEXCLAMATION</b></term></listheader><listheader><term>0x00000030L</term></listheader></list></description><description>An exclamation-point icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONWARNING</b></term></listheader><listheader><term>0x00000030L</term></listheader></list></description><description>An exclamation-point icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONINFORMATION</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>An icon consisting of a lowercase letter <i>i</i> in a circle appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONASTERISK</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>An icon consisting of a lowercase letter <i>i</i> in a circle appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONQUESTION</b></term></listheader><listheader><term>0x00000020L</term></listheader></list></description><description>A question-mark icon appears in the message box. The question-mark message icon is no longer recommended because it does not clearly represent a specific type of message and because the phrasing of a message as a question could apply to any message type. In addition, users can confuse the message symbol question mark with Help information. Therefore, do not use this question mark message symbol in your message boxes. The system continues to support its inclusion only for backward compatibility.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONSTOP</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONERROR</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONHAND</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader></list> <para>To indicate the default button, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON1</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>The first button is the default button.<para><b>MB_DEFBUTTON1</b> is the default unless <b>MB_DEFBUTTON2</b>, <b>MB_DEFBUTTON3</b>, or <b>MB_DEFBUTTON4</b> is specified.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON2</b></term></listheader><listheader><term>0x00000100L</term></listheader></list></description><description>The second button is the default button.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON3</b></term></listheader><listheader><term>0x00000200L</term></listheader></list></description><description>The third button is the default button.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON4</b></term></listheader><listheader><term>0x00000300L</term></listheader></list></description><description>The fourth button is the default button.</description></listheader></list> <para>To indicate the modality of the dialog box, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_APPLMODAL</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>The user must respond to the message box before continuing work in the window identified by the <i>hWnd</i> parameter. However, the user can move to the windows of other threads and work in those windows. 							 <para>Depending on the hierarchy of windows in the application, the user may be able to move to other windows within the thread. All child windows of the parent of the message box are automatically disabled, but pop-up windows are not.</para><para><b>MB_APPLMODAL</b> is the default if neither <b>MB_SYSTEMMODAL</b> nor <b>MB_TASKMODAL</b> is specified.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SYSTEMMODAL</b></term></listheader><listheader><term>0x00001000L</term></listheader></list></description><description>Same as MB_APPLMODAL except that the message box has the <b>WS_EX_TOPMOST</b> style. Use system-modal message boxes to notify the user of serious, potentially damaging errors that require immediate attention (for example, running out of memory). This flag has no effect on the user's ability to interact with windows other than those associated with <i>hWnd</i>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_TASKMODAL</b></term></listheader><listheader><term>0x00002000L</term></listheader></list></description><description>Same as <b>MB_APPLMODAL</b> except that all the top-level windows belonging to the current thread are disabled if the <i>hWnd</i> parameter is <b>NULL</b>. Use this flag when the calling application or library does not have a window handle available but still needs to prevent input to other windows in the calling thread without suspending other threads.</description></listheader></list> <para>To specify other options, use one or more of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFAULT_DESKTOP_ONLY</b></term></listheader><listheader><term>0x00020000L</term></listheader></list></description><description> Same as desktop of the interactive window station. For more information, see <a href="https://docs.microsoft.com//windows/desktop/winstation/window-stations">Window Stations</a>. 					 		 					 		<para>If the current input desktop is not the default desktop, <b>MessageBox</b> does not return until the user switches to the default desktop.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_RIGHT</b></term></listheader><listheader><term>0x00080000L</term></listheader></list></description><description>The text is right-justified.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_RTLREADING</b></term></listheader><listheader><term>0x00100000L</term></listheader></list></description><description>Displays message and caption text using right-to-left reading order on Hebrew and Arabic systems.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SETFOREGROUND</b></term></listheader><listheader><term>0x00010000L</term></listheader></list></description><description>The message box becomes the foreground window. Internally, the system calls the <see cref="SetForegroundWindow" /> function for the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_TOPMOST</b></term></listheader><listheader><term>0x00040000L</term></listheader></list></description><description>The message box is created with the <b>WS_EX_TOPMOST</b> window style.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SERVICE_NOTIFICATION</b></term></listheader><listheader><term>0x00200000L</term></listheader></list></description><description>The caller is a service notifying the user of an event. The function displays a message box on the current active desktop, even if there is no user logged on to the computer.<para><b>Terminal Services:</b> If the calling thread has an impersonation token, the function directs the message box to the session specified in the impersonation token.</para><para>If this flag is set, the <i>hWnd</i> parameter must be <b>NULL</b>. This is so that the message box can appear on a desktop other than the desktop corresponding to the <i>hWnd</i>.</para><para>For information on security considerations in regard to using this flag, see <a href="https://docs.microsoft.com//windows/desktop/Services/interactive-services">Interactive Services</a>. In particular, be aware that this flag can produce interactive content on a locked desktop and should therefore be used for only a very limited set of scenarios, such as resource exhaustion.</para></description></listheader></list></param>
    <returns>
      <para>If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC will no effect - unless an MB_OK button is present. If an MB_OK button is displayed and the user presses ESC, the return value will be <b>IDOK</b>.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the function succeeds, the return value is one of the following menu-item values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDABORT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Abort</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Cancel</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Continue</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Ignore</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDNO</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The <b>No</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDOK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The <b>OK</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDRETRY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Retry</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDTRYAGAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Try Again</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDYES</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Yes</b> button was selected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MessageBoxA">
    <summary>Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information. The message box returns an integer value that indicates which button the user clicked.</summary>
    <param name="hWnd">A handle to the owner window of the message box to be created. If this parameter is <b>NULL</b>, the message box has no owner window.</param>
    <param name="lpText">The message to be displayed. If the string consists of more than one line, you can separate the lines using a carriage return and/or linefeed character between each line.</param>
    <param name="lpCaption">The dialog box title. If this parameter is <b>NULL</b>, the default title is <b>Error</b>.</param>
    <param name="uType">
      <para>The contents and behavior of the dialog box. This parameter can be a combination of flags from the following groups of flags.</para>
      <para>To indicate the buttons displayed in the message box, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_ABORTRETRYIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains three push buttons: <b>Abort</b>, <b>Retry</b>, and <b>Ignore</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_CANCELTRYCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000006L</term>
              </listheader>
            </list>
          </description>
          <description> The message box contains three push buttons: <b>Cancel</b>, <b>Try Again</b>, <b>Continue</b>. Use this message box type instead of MB_ABORTRETRYIGNORE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_HELP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00004000L</term>
              </listheader>
            </list>
          </description>
          <description> Adds a <b>Help</b> button to the message box. When the user clicks the <b>Help</b> button or presses F1, the system sends a <a href="https://docs.microsoft.com//windows/desktop/shell/wm-help">WM_HELP</a> message to the owner.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_OK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains one push button: <b>OK</b>. This is the default.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_OKCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>OK</b> and <b>Cancel</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_RETRYCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000005L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>Retry</b> and <b>Cancel</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_YESNO</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>Yes</b> and <b>No</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_YESNOCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains three push buttons: <b>Yes</b>, <b>No</b>, and <b>Cancel</b>.</description>
        </listheader>
      </list> <para>To display an icon in the message box, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONEXCLAMATION</b></term></listheader><listheader><term>0x00000030L</term></listheader></list></description><description>An exclamation-point icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONWARNING</b></term></listheader><listheader><term>0x00000030L</term></listheader></list></description><description>An exclamation-point icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONINFORMATION</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>An icon consisting of a lowercase letter <i>i</i> in a circle appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONASTERISK</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>An icon consisting of a lowercase letter <i>i</i> in a circle appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONQUESTION</b></term></listheader><listheader><term>0x00000020L</term></listheader></list></description><description>A question-mark icon appears in the message box. The question-mark message icon is no longer recommended because it does not clearly represent a specific type of message and because the phrasing of a message as a question could apply to any message type. In addition, users can confuse the message symbol question mark with Help information. Therefore, do not use this question mark message symbol in your message boxes. The system continues to support its inclusion only for backward compatibility.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONSTOP</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONERROR</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONHAND</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader></list> <para>To indicate the default button, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON1</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>The first button is the default button.<para><b>MB_DEFBUTTON1</b> is the default unless <b>MB_DEFBUTTON2</b>, <b>MB_DEFBUTTON3</b>, or <b>MB_DEFBUTTON4</b> is specified.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON2</b></term></listheader><listheader><term>0x00000100L</term></listheader></list></description><description>The second button is the default button.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON3</b></term></listheader><listheader><term>0x00000200L</term></listheader></list></description><description>The third button is the default button.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON4</b></term></listheader><listheader><term>0x00000300L</term></listheader></list></description><description>The fourth button is the default button.</description></listheader></list> <para>To indicate the modality of the dialog box, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_APPLMODAL</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>The user must respond to the message box before continuing work in the window identified by the <i>hWnd</i> parameter. However, the user can move to the windows of other threads and work in those windows. 							 <para>Depending on the hierarchy of windows in the application, the user may be able to move to other windows within the thread. All child windows of the parent of the message box are automatically disabled, but pop-up windows are not.</para><para><b>MB_APPLMODAL</b> is the default if neither <b>MB_SYSTEMMODAL</b> nor <b>MB_TASKMODAL</b> is specified.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SYSTEMMODAL</b></term></listheader><listheader><term>0x00001000L</term></listheader></list></description><description>Same as MB_APPLMODAL except that the message box has the <b>WS_EX_TOPMOST</b> style. Use system-modal message boxes to notify the user of serious, potentially damaging errors that require immediate attention (for example, running out of memory). This flag has no effect on the user's ability to interact with windows other than those associated with <i>hWnd</i>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_TASKMODAL</b></term></listheader><listheader><term>0x00002000L</term></listheader></list></description><description>Same as <b>MB_APPLMODAL</b> except that all the top-level windows belonging to the current thread are disabled if the <i>hWnd</i> parameter is <b>NULL</b>. Use this flag when the calling application or library does not have a window handle available but still needs to prevent input to other windows in the calling thread without suspending other threads.</description></listheader></list> <para>To specify other options, use one or more of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFAULT_DESKTOP_ONLY</b></term></listheader><listheader><term>0x00020000L</term></listheader></list></description><description> Same as desktop of the interactive window station. For more information, see <a href="https://docs.microsoft.com//windows/desktop/winstation/window-stations">Window Stations</a>. 					 		 					 		<para>If the current input desktop is not the default desktop, <b>MessageBox</b> does not return until the user switches to the default desktop.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_RIGHT</b></term></listheader><listheader><term>0x00080000L</term></listheader></list></description><description>The text is right-justified.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_RTLREADING</b></term></listheader><listheader><term>0x00100000L</term></listheader></list></description><description>Displays message and caption text using right-to-left reading order on Hebrew and Arabic systems.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SETFOREGROUND</b></term></listheader><listheader><term>0x00010000L</term></listheader></list></description><description>The message box becomes the foreground window. Internally, the system calls the <see cref="SetForegroundWindow" /> function for the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_TOPMOST</b></term></listheader><listheader><term>0x00040000L</term></listheader></list></description><description>The message box is created with the <b>WS_EX_TOPMOST</b> window style.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SERVICE_NOTIFICATION</b></term></listheader><listheader><term>0x00200000L</term></listheader></list></description><description>The caller is a service notifying the user of an event. The function displays a message box on the current active desktop, even if there is no user logged on to the computer.<para><b>Terminal Services:</b> If the calling thread has an impersonation token, the function directs the message box to the session specified in the impersonation token.</para><para>If this flag is set, the <i>hWnd</i> parameter must be <b>NULL</b>. This is so that the message box can appear on a desktop other than the desktop corresponding to the <i>hWnd</i>.</para><para>For information on security considerations in regard to using this flag, see <a href="https://docs.microsoft.com//windows/desktop/Services/interactive-services">Interactive Services</a>. In particular, be aware that this flag can produce interactive content on a locked desktop and should therefore be used for only a very limited set of scenarios, such as resource exhaustion.</para></description></listheader></list></param>
    <returns>
      <para>If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC will no effect - unless an MB_OK button is present. If an MB_OK button is displayed and the user presses ESC, the return value will be <b>IDOK</b>.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the function succeeds, the return value is one of the following menu-item values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDABORT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Abort</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Cancel</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Continue</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Ignore</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDNO</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The <b>No</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDOK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The <b>OK</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDRETRY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Retry</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDTRYAGAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Try Again</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDYES</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Yes</b> button was selected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MessageBoxW">
    <summary>Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information. The message box returns an integer value that indicates which button the user clicked.</summary>
    <param name="hWnd">A handle to the owner window of the message box to be created. If this parameter is <b>NULL</b>, the message box has no owner window.</param>
    <param name="lpText">The message to be displayed. If the string consists of more than one line, you can separate the lines using a carriage return and/or linefeed character between each line.</param>
    <param name="lpCaption">The dialog box title. If this parameter is <b>NULL</b>, the default title is <b>Error</b>.</param>
    <param name="uType">
      <para>The contents and behavior of the dialog box. This parameter can be a combination of flags from the following groups of flags.</para>
      <para>To indicate the buttons displayed in the message box, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_ABORTRETRYIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains three push buttons: <b>Abort</b>, <b>Retry</b>, and <b>Ignore</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_CANCELTRYCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000006L</term>
              </listheader>
            </list>
          </description>
          <description> The message box contains three push buttons: <b>Cancel</b>, <b>Try Again</b>, <b>Continue</b>. Use this message box type instead of MB_ABORTRETRYIGNORE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_HELP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00004000L</term>
              </listheader>
            </list>
          </description>
          <description> Adds a <b>Help</b> button to the message box. When the user clicks the <b>Help</b> button or presses F1, the system sends a <a href="https://docs.microsoft.com//windows/desktop/shell/wm-help">WM_HELP</a> message to the owner.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_OK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains one push button: <b>OK</b>. This is the default.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_OKCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>OK</b> and <b>Cancel</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_RETRYCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000005L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>Retry</b> and <b>Cancel</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_YESNO</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>Yes</b> and <b>No</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_YESNOCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains three push buttons: <b>Yes</b>, <b>No</b>, and <b>Cancel</b>.</description>
        </listheader>
      </list> <para>To display an icon in the message box, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONEXCLAMATION</b></term></listheader><listheader><term>0x00000030L</term></listheader></list></description><description>An exclamation-point icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONWARNING</b></term></listheader><listheader><term>0x00000030L</term></listheader></list></description><description>An exclamation-point icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONINFORMATION</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>An icon consisting of a lowercase letter <i>i</i> in a circle appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONASTERISK</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>An icon consisting of a lowercase letter <i>i</i> in a circle appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONQUESTION</b></term></listheader><listheader><term>0x00000020L</term></listheader></list></description><description>A question-mark icon appears in the message box. The question-mark message icon is no longer recommended because it does not clearly represent a specific type of message and because the phrasing of a message as a question could apply to any message type. In addition, users can confuse the message symbol question mark with Help information. Therefore, do not use this question mark message symbol in your message boxes. The system continues to support its inclusion only for backward compatibility.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONSTOP</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONERROR</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONHAND</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader></list> <para>To indicate the default button, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON1</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>The first button is the default button.<para><b>MB_DEFBUTTON1</b> is the default unless <b>MB_DEFBUTTON2</b>, <b>MB_DEFBUTTON3</b>, or <b>MB_DEFBUTTON4</b> is specified.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON2</b></term></listheader><listheader><term>0x00000100L</term></listheader></list></description><description>The second button is the default button.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON3</b></term></listheader><listheader><term>0x00000200L</term></listheader></list></description><description>The third button is the default button.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON4</b></term></listheader><listheader><term>0x00000300L</term></listheader></list></description><description>The fourth button is the default button.</description></listheader></list> <para>To indicate the modality of the dialog box, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_APPLMODAL</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>The user must respond to the message box before continuing work in the window identified by the <i>hWnd</i> parameter. However, the user can move to the windows of other threads and work in those windows. 							 <para>Depending on the hierarchy of windows in the application, the user may be able to move to other windows within the thread. All child windows of the parent of the message box are automatically disabled, but pop-up windows are not.</para><para><b>MB_APPLMODAL</b> is the default if neither <b>MB_SYSTEMMODAL</b> nor <b>MB_TASKMODAL</b> is specified.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SYSTEMMODAL</b></term></listheader><listheader><term>0x00001000L</term></listheader></list></description><description>Same as MB_APPLMODAL except that the message box has the <b>WS_EX_TOPMOST</b> style. Use system-modal message boxes to notify the user of serious, potentially damaging errors that require immediate attention (for example, running out of memory). This flag has no effect on the user's ability to interact with windows other than those associated with <i>hWnd</i>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_TASKMODAL</b></term></listheader><listheader><term>0x00002000L</term></listheader></list></description><description>Same as <b>MB_APPLMODAL</b> except that all the top-level windows belonging to the current thread are disabled if the <i>hWnd</i> parameter is <b>NULL</b>. Use this flag when the calling application or library does not have a window handle available but still needs to prevent input to other windows in the calling thread without suspending other threads.</description></listheader></list> <para>To specify other options, use one or more of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFAULT_DESKTOP_ONLY</b></term></listheader><listheader><term>0x00020000L</term></listheader></list></description><description> Same as desktop of the interactive window station. For more information, see <a href="https://docs.microsoft.com//windows/desktop/winstation/window-stations">Window Stations</a>. 					 		 					 		<para>If the current input desktop is not the default desktop, <b>MessageBox</b> does not return until the user switches to the default desktop.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_RIGHT</b></term></listheader><listheader><term>0x00080000L</term></listheader></list></description><description>The text is right-justified.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_RTLREADING</b></term></listheader><listheader><term>0x00100000L</term></listheader></list></description><description>Displays message and caption text using right-to-left reading order on Hebrew and Arabic systems.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SETFOREGROUND</b></term></listheader><listheader><term>0x00010000L</term></listheader></list></description><description>The message box becomes the foreground window. Internally, the system calls the <see cref="SetForegroundWindow" /> function for the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_TOPMOST</b></term></listheader><listheader><term>0x00040000L</term></listheader></list></description><description>The message box is created with the <b>WS_EX_TOPMOST</b> window style.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SERVICE_NOTIFICATION</b></term></listheader><listheader><term>0x00200000L</term></listheader></list></description><description>The caller is a service notifying the user of an event. The function displays a message box on the current active desktop, even if there is no user logged on to the computer.<para><b>Terminal Services:</b> If the calling thread has an impersonation token, the function directs the message box to the session specified in the impersonation token.</para><para>If this flag is set, the <i>hWnd</i> parameter must be <b>NULL</b>. This is so that the message box can appear on a desktop other than the desktop corresponding to the <i>hWnd</i>.</para><para>For information on security considerations in regard to using this flag, see <a href="https://docs.microsoft.com//windows/desktop/Services/interactive-services">Interactive Services</a>. In particular, be aware that this flag can produce interactive content on a locked desktop and should therefore be used for only a very limited set of scenarios, such as resource exhaustion.</para></description></listheader></list></param>
    <returns>
      <para>If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC will no effect - unless an MB_OK button is present. If an MB_OK button is displayed and the user presses ESC, the return value will be <b>IDOK</b>.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the function succeeds, the return value is one of the following menu-item values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDABORT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Abort</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Cancel</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Continue</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Ignore</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDNO</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The <b>No</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDOK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The <b>OK</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDRETRY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Retry</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDTRYAGAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Try Again</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDYES</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Yes</b> button was selected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MessageBoxEx">
    <summary>
      <para>Creates, displays, and operates a message box. The message box contains an application-defined message and title, plus any combination of predefined icons and push buttons. The buttons are in the language of the system user interface.</para>
      <para>Currently <b>MessageBoxEx</b> and <see cref="MessageBox" /> work the same way.</para>
    </summary>
    <param name="hWnd">A handle to the owner window of the message box to be created. If this parameter is <b>NULL</b>, the message box has no owner window.</param>
    <param name="lpText">The message to be displayed.</param>
    <param name="lpCaption">The dialog box title. If this parameter is <b>NULL</b>, the default title <b>Error</b> is used.</param>
    <param name="uType">The contents and behavior of the dialog box. For information on the supported flags, see <see cref="MessageBox" />.</param>
    <param name="wLanguageId">
      <para>The language for the text displayed in the message box button(s). Specifying a value of zero (0) indicates to display the button text in the default system language. If this parameter is <code>MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL)</code>, the current language associated with the calling thread is used.</para>
      <para>To specify a language other than the current language, use the <see cref="MAKELANGID" /> macro to create this parameter. For more information, see <b>MAKELANGID</b>.</para>
    </param>
    <returns>
      <para>If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC will no effect - unless an MB_OK button is present. If an MB_OK button is displayed and the user presses ESC, the return value will be <b>IDOK</b>.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the function succeeds, the return value is one of the following menu-item values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDABORT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Abort</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Cancel</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Continue</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Ignore</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDNO</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The <b>No</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDOK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The <b>OK</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDRETRY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Retry</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDTRYAGAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Try Again</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDYES</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Yes</b> button was selected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MessageBoxExA">
    <summary>
      <para>Creates, displays, and operates a message box. The message box contains an application-defined message and title, plus any combination of predefined icons and push buttons. The buttons are in the language of the system user interface.</para>
      <para>Currently <b>MessageBoxEx</b> and <see cref="MessageBox" /> work the same way.</para>
    </summary>
    <param name="hWnd">A handle to the owner window of the message box to be created. If this parameter is <b>NULL</b>, the message box has no owner window.</param>
    <param name="lpText">The message to be displayed.</param>
    <param name="lpCaption">The dialog box title. If this parameter is <b>NULL</b>, the default title <b>Error</b> is used.</param>
    <param name="uType">The contents and behavior of the dialog box. For information on the supported flags, see <see cref="MessageBox" />.</param>
    <param name="wLanguageId">
      <para>The language for the text displayed in the message box button(s). Specifying a value of zero (0) indicates to display the button text in the default system language. If this parameter is <code>MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL)</code>, the current language associated with the calling thread is used.</para>
      <para>To specify a language other than the current language, use the <see cref="MAKELANGID" /> macro to create this parameter. For more information, see <b>MAKELANGID</b>.</para>
    </param>
    <returns>
      <para>If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC will no effect - unless an MB_OK button is present. If an MB_OK button is displayed and the user presses ESC, the return value will be <b>IDOK</b>.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the function succeeds, the return value is one of the following menu-item values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDABORT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Abort</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Cancel</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Continue</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Ignore</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDNO</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The <b>No</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDOK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The <b>OK</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDRETRY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Retry</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDTRYAGAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Try Again</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDYES</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Yes</b> button was selected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MessageBoxExW">
    <summary>
      <para>Creates, displays, and operates a message box. The message box contains an application-defined message and title, plus any combination of predefined icons and push buttons. The buttons are in the language of the system user interface.</para>
      <para>Currently <b>MessageBoxEx</b> and <see cref="MessageBox" /> work the same way.</para>
    </summary>
    <param name="hWnd">A handle to the owner window of the message box to be created. If this parameter is <b>NULL</b>, the message box has no owner window.</param>
    <param name="lpText">The message to be displayed.</param>
    <param name="lpCaption">The dialog box title. If this parameter is <b>NULL</b>, the default title <b>Error</b> is used.</param>
    <param name="uType">The contents and behavior of the dialog box. For information on the supported flags, see <see cref="MessageBox" />.</param>
    <param name="wLanguageId">
      <para>The language for the text displayed in the message box button(s). Specifying a value of zero (0) indicates to display the button text in the default system language. If this parameter is <code>MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL)</code>, the current language associated with the calling thread is used.</para>
      <para>To specify a language other than the current language, use the <see cref="MAKELANGID" /> macro to create this parameter. For more information, see <b>MAKELANGID</b>.</para>
    </param>
    <returns>
      <para>If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC will no effect - unless an MB_OK button is present. If an MB_OK button is displayed and the user presses ESC, the return value will be <b>IDOK</b>.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the function succeeds, the return value is one of the following menu-item values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDABORT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Abort</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Cancel</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Continue</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Ignore</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDNO</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The <b>No</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDOK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The <b>OK</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDRETRY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Retry</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDTRYAGAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Try Again</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDYES</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Yes</b> button was selected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MessageBoxEx">
    <summary>
      <para>Creates, displays, and operates a message box. The message box contains an application-defined message and title, plus any combination of predefined icons and push buttons. The buttons are in the language of the system user interface.</para>
      <para>Currently <b>MessageBoxEx</b> and <see cref="MessageBox" /> work the same way.</para>
    </summary>
    <param name="hWnd">A handle to the owner window of the message box to be created. If this parameter is <b>NULL</b>, the message box has no owner window.</param>
    <param name="lpText">The message to be displayed.</param>
    <param name="lpCaption">The dialog box title. If this parameter is <b>NULL</b>, the default title <b>Error</b> is used.</param>
    <param name="uType">The contents and behavior of the dialog box. For information on the supported flags, see <see cref="MessageBox" />.</param>
    <param name="wLanguageId">
      <para>The language for the text displayed in the message box button(s). Specifying a value of zero (0) indicates to display the button text in the default system language. If this parameter is <code>MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL)</code>, the current language associated with the calling thread is used.</para>
      <para>To specify a language other than the current language, use the <see cref="MAKELANGID" /> macro to create this parameter. For more information, see <b>MAKELANGID</b>.</para>
    </param>
    <returns>
      <para>If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC will no effect - unless an MB_OK button is present. If an MB_OK button is displayed and the user presses ESC, the return value will be <b>IDOK</b>.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the function succeeds, the return value is one of the following menu-item values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDABORT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Abort</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Cancel</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Continue</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Ignore</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDNO</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The <b>No</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDOK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The <b>OK</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDRETRY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Retry</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDTRYAGAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Try Again</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDYES</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Yes</b> button was selected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MessageBoxExA">
    <summary>
      <para>Creates, displays, and operates a message box. The message box contains an application-defined message and title, plus any combination of predefined icons and push buttons. The buttons are in the language of the system user interface.</para>
      <para>Currently <b>MessageBoxEx</b> and <see cref="MessageBox" /> work the same way.</para>
    </summary>
    <param name="hWnd">A handle to the owner window of the message box to be created. If this parameter is <b>NULL</b>, the message box has no owner window.</param>
    <param name="lpText">The message to be displayed.</param>
    <param name="lpCaption">The dialog box title. If this parameter is <b>NULL</b>, the default title <b>Error</b> is used.</param>
    <param name="uType">The contents and behavior of the dialog box. For information on the supported flags, see <see cref="MessageBox" />.</param>
    <param name="wLanguageId">
      <para>The language for the text displayed in the message box button(s). Specifying a value of zero (0) indicates to display the button text in the default system language. If this parameter is <code>MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL)</code>, the current language associated with the calling thread is used.</para>
      <para>To specify a language other than the current language, use the <see cref="MAKELANGID" /> macro to create this parameter. For more information, see <b>MAKELANGID</b>.</para>
    </param>
    <returns>
      <para>If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC will no effect - unless an MB_OK button is present. If an MB_OK button is displayed and the user presses ESC, the return value will be <b>IDOK</b>.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the function succeeds, the return value is one of the following menu-item values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDABORT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Abort</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Cancel</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Continue</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Ignore</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDNO</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The <b>No</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDOK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The <b>OK</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDRETRY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Retry</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDTRYAGAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Try Again</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDYES</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Yes</b> button was selected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MessageBoxExW">
    <summary>
      <para>Creates, displays, and operates a message box. The message box contains an application-defined message and title, plus any combination of predefined icons and push buttons. The buttons are in the language of the system user interface.</para>
      <para>Currently <b>MessageBoxEx</b> and <see cref="MessageBox" /> work the same way.</para>
    </summary>
    <param name="hWnd">A handle to the owner window of the message box to be created. If this parameter is <b>NULL</b>, the message box has no owner window.</param>
    <param name="lpText">The message to be displayed.</param>
    <param name="lpCaption">The dialog box title. If this parameter is <b>NULL</b>, the default title <b>Error</b> is used.</param>
    <param name="uType">The contents and behavior of the dialog box. For information on the supported flags, see <see cref="MessageBox" />.</param>
    <param name="wLanguageId">
      <para>The language for the text displayed in the message box button(s). Specifying a value of zero (0) indicates to display the button text in the default system language. If this parameter is <code>MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL)</code>, the current language associated with the calling thread is used.</para>
      <para>To specify a language other than the current language, use the <see cref="MAKELANGID" /> macro to create this parameter. For more information, see <b>MAKELANGID</b>.</para>
    </param>
    <returns>
      <para>If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC will no effect - unless an MB_OK button is present. If an MB_OK button is displayed and the user presses ESC, the return value will be <b>IDOK</b>.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the function succeeds, the return value is one of the following menu-item values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDABORT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Abort</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Cancel</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Continue</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Ignore</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDNO</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The <b>No</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDOK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The <b>OK</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDRETRY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Retry</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDTRYAGAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Try Again</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDYES</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Yes</b> button was selected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MessageBoxIndirect">
    <summary>Creates, displays, and operates a message box. The message box contains application-defined message text and title, any icon, and any combination of predefined push buttons.</summary>
    <param name="lpmbp">A pointer to a <see cref="MSGBOXPARAMS" /> structure that contains information used to display the message box.</param>
    <returns>
      <para>If the function succeeds, the return value is one of the following menu-item values.</para>
      <para>If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC has no effect.</para>
      <para>If there is not enough memory to create the message box, the return value is zero.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDABORT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Abort</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Cancel</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Continue</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Ignore</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDNO</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The <b>No</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDOK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The <b>OK</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDRETRY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Retry</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDTRYAGAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Try Again</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDYES</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Yes</b> button was selected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MessageBoxIndirectA">
    <summary>Creates, displays, and operates a message box. The message box contains application-defined message text and title, any icon, and any combination of predefined push buttons.</summary>
    <param name="lpmbp">A pointer to a <see cref="MSGBOXPARAMS" /> structure that contains information used to display the message box.</param>
    <returns>
      <para>If the function succeeds, the return value is one of the following menu-item values.</para>
      <para>If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC has no effect.</para>
      <para>If there is not enough memory to create the message box, the return value is zero.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDABORT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Abort</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Cancel</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Continue</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Ignore</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDNO</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The <b>No</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDOK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The <b>OK</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDRETRY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Retry</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDTRYAGAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Try Again</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDYES</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Yes</b> button was selected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MessageBoxIndirectW">
    <summary>Creates, displays, and operates a message box. The message box contains application-defined message text and title, any icon, and any combination of predefined push buttons.</summary>
    <param name="lpmbp">A pointer to a <see cref="MSGBOXPARAMS" /> structure that contains information used to display the message box.</param>
    <returns>
      <para>If the function succeeds, the return value is one of the following menu-item values.</para>
      <para>If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC has no effect.</para>
      <para>If there is not enough memory to create the message box, the return value is zero.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDABORT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Abort</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Cancel</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Continue</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Ignore</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDNO</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The <b>No</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDOK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The <b>OK</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDRETRY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Retry</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDTRYAGAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Try Again</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDYES</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Yes</b> button was selected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MessageBoxIndirect">
    <summary>Creates, displays, and operates a message box. The message box contains application-defined message text and title, any icon, and any combination of predefined push buttons.</summary>
    <param name="lpmbp">A pointer to a <see cref="MSGBOXPARAMS" /> structure that contains information used to display the message box.</param>
    <returns>
      <para>If the function succeeds, the return value is one of the following menu-item values.</para>
      <para>If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC has no effect.</para>
      <para>If there is not enough memory to create the message box, the return value is zero.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDABORT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Abort</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Cancel</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Continue</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Ignore</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDNO</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The <b>No</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDOK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The <b>OK</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDRETRY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Retry</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDTRYAGAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Try Again</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDYES</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Yes</b> button was selected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MessageBoxIndirectA">
    <summary>Creates, displays, and operates a message box. The message box contains application-defined message text and title, any icon, and any combination of predefined push buttons.</summary>
    <param name="lpmbp">A pointer to a <see cref="MSGBOXPARAMS" /> structure that contains information used to display the message box.</param>
    <returns>
      <para>If the function succeeds, the return value is one of the following menu-item values.</para>
      <para>If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC has no effect.</para>
      <para>If there is not enough memory to create the message box, the return value is zero.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDABORT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Abort</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Cancel</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Continue</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Ignore</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDNO</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The <b>No</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDOK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The <b>OK</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDRETRY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Retry</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDTRYAGAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Try Again</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDYES</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Yes</b> button was selected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MessageBoxIndirectW">
    <summary>Creates, displays, and operates a message box. The message box contains application-defined message text and title, any icon, and any combination of predefined push buttons.</summary>
    <param name="lpmbp">A pointer to a <see cref="MSGBOXPARAMS" /> structure that contains information used to display the message box.</param>
    <returns>
      <para>If the function succeeds, the return value is one of the following menu-item values.</para>
      <para>If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC has no effect.</para>
      <para>If there is not enough memory to create the message box, the return value is zero.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDABORT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Abort</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Cancel</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Continue</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Ignore</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDNO</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The <b>No</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDOK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The <b>OK</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDRETRY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Retry</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDTRYAGAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Try Again</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDYES</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Yes</b> button was selected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MessageBox">
    <summary>Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information. The message box returns an integer value that indicates which button the user clicked.</summary>
    <param name="hWnd">A handle to the owner window of the message box to be created. If this parameter is <b>NULL</b>, the message box has no owner window.</param>
    <param name="lpText">The message to be displayed. If the string consists of more than one line, you can separate the lines using a carriage return and/or linefeed character between each line.</param>
    <param name="lpCaption">The dialog box title. If this parameter is <b>NULL</b>, the default title is <b>Error</b>.</param>
    <param name="uType">
      <para>The contents and behavior of the dialog box. This parameter can be a combination of flags from the following groups of flags.</para>
      <para>To indicate the buttons displayed in the message box, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_ABORTRETRYIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains three push buttons: <b>Abort</b>, <b>Retry</b>, and <b>Ignore</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_CANCELTRYCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000006L</term>
              </listheader>
            </list>
          </description>
          <description> The message box contains three push buttons: <b>Cancel</b>, <b>Try Again</b>, <b>Continue</b>. Use this message box type instead of MB_ABORTRETRYIGNORE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_HELP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00004000L</term>
              </listheader>
            </list>
          </description>
          <description> Adds a <b>Help</b> button to the message box. When the user clicks the <b>Help</b> button or presses F1, the system sends a <a href="https://docs.microsoft.com//windows/desktop/shell/wm-help">WM_HELP</a> message to the owner.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_OK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains one push button: <b>OK</b>. This is the default.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_OKCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>OK</b> and <b>Cancel</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_RETRYCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000005L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>Retry</b> and <b>Cancel</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_YESNO</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>Yes</b> and <b>No</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_YESNOCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains three push buttons: <b>Yes</b>, <b>No</b>, and <b>Cancel</b>.</description>
        </listheader>
      </list> <para>To display an icon in the message box, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONEXCLAMATION</b></term></listheader><listheader><term>0x00000030L</term></listheader></list></description><description>An exclamation-point icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONWARNING</b></term></listheader><listheader><term>0x00000030L</term></listheader></list></description><description>An exclamation-point icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONINFORMATION</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>An icon consisting of a lowercase letter <i>i</i> in a circle appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONASTERISK</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>An icon consisting of a lowercase letter <i>i</i> in a circle appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONQUESTION</b></term></listheader><listheader><term>0x00000020L</term></listheader></list></description><description>A question-mark icon appears in the message box. The question-mark message icon is no longer recommended because it does not clearly represent a specific type of message and because the phrasing of a message as a question could apply to any message type. In addition, users can confuse the message symbol question mark with Help information. Therefore, do not use this question mark message symbol in your message boxes. The system continues to support its inclusion only for backward compatibility.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONSTOP</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONERROR</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONHAND</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader></list> <para>To indicate the default button, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON1</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>The first button is the default button.<para><b>MB_DEFBUTTON1</b> is the default unless <b>MB_DEFBUTTON2</b>, <b>MB_DEFBUTTON3</b>, or <b>MB_DEFBUTTON4</b> is specified.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON2</b></term></listheader><listheader><term>0x00000100L</term></listheader></list></description><description>The second button is the default button.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON3</b></term></listheader><listheader><term>0x00000200L</term></listheader></list></description><description>The third button is the default button.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON4</b></term></listheader><listheader><term>0x00000300L</term></listheader></list></description><description>The fourth button is the default button.</description></listheader></list> <para>To indicate the modality of the dialog box, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_APPLMODAL</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>The user must respond to the message box before continuing work in the window identified by the <i>hWnd</i> parameter. However, the user can move to the windows of other threads and work in those windows. 							 <para>Depending on the hierarchy of windows in the application, the user may be able to move to other windows within the thread. All child windows of the parent of the message box are automatically disabled, but pop-up windows are not.</para><para><b>MB_APPLMODAL</b> is the default if neither <b>MB_SYSTEMMODAL</b> nor <b>MB_TASKMODAL</b> is specified.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SYSTEMMODAL</b></term></listheader><listheader><term>0x00001000L</term></listheader></list></description><description>Same as MB_APPLMODAL except that the message box has the <b>WS_EX_TOPMOST</b> style. Use system-modal message boxes to notify the user of serious, potentially damaging errors that require immediate attention (for example, running out of memory). This flag has no effect on the user's ability to interact with windows other than those associated with <i>hWnd</i>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_TASKMODAL</b></term></listheader><listheader><term>0x00002000L</term></listheader></list></description><description>Same as <b>MB_APPLMODAL</b> except that all the top-level windows belonging to the current thread are disabled if the <i>hWnd</i> parameter is <b>NULL</b>. Use this flag when the calling application or library does not have a window handle available but still needs to prevent input to other windows in the calling thread without suspending other threads.</description></listheader></list> <para>To specify other options, use one or more of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFAULT_DESKTOP_ONLY</b></term></listheader><listheader><term>0x00020000L</term></listheader></list></description><description> Same as desktop of the interactive window station. For more information, see <a href="https://docs.microsoft.com//windows/desktop/winstation/window-stations">Window Stations</a>. 					 		 					 		<para>If the current input desktop is not the default desktop, <b>MessageBox</b> does not return until the user switches to the default desktop.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_RIGHT</b></term></listheader><listheader><term>0x00080000L</term></listheader></list></description><description>The text is right-justified.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_RTLREADING</b></term></listheader><listheader><term>0x00100000L</term></listheader></list></description><description>Displays message and caption text using right-to-left reading order on Hebrew and Arabic systems.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SETFOREGROUND</b></term></listheader><listheader><term>0x00010000L</term></listheader></list></description><description>The message box becomes the foreground window. Internally, the system calls the <see cref="SetForegroundWindow" /> function for the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_TOPMOST</b></term></listheader><listheader><term>0x00040000L</term></listheader></list></description><description>The message box is created with the <b>WS_EX_TOPMOST</b> window style.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SERVICE_NOTIFICATION</b></term></listheader><listheader><term>0x00200000L</term></listheader></list></description><description>The caller is a service notifying the user of an event. The function displays a message box on the current active desktop, even if there is no user logged on to the computer.<para><b>Terminal Services:</b> If the calling thread has an impersonation token, the function directs the message box to the session specified in the impersonation token.</para><para>If this flag is set, the <i>hWnd</i> parameter must be <b>NULL</b>. This is so that the message box can appear on a desktop other than the desktop corresponding to the <i>hWnd</i>.</para><para>For information on security considerations in regard to using this flag, see <a href="https://docs.microsoft.com//windows/desktop/Services/interactive-services">Interactive Services</a>. In particular, be aware that this flag can produce interactive content on a locked desktop and should therefore be used for only a very limited set of scenarios, such as resource exhaustion.</para></description></listheader></list></param>
    <returns>
      <para>If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC will no effect - unless an MB_OK button is present. If an MB_OK button is displayed and the user presses ESC, the return value will be <b>IDOK</b>.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the function succeeds, the return value is one of the following menu-item values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDABORT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Abort</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Cancel</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Continue</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Ignore</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDNO</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The <b>No</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDOK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The <b>OK</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDRETRY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Retry</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDTRYAGAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Try Again</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDYES</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Yes</b> button was selected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MessageBoxA">
    <summary>Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information. The message box returns an integer value that indicates which button the user clicked.</summary>
    <param name="hWnd">A handle to the owner window of the message box to be created. If this parameter is <b>NULL</b>, the message box has no owner window.</param>
    <param name="lpText">The message to be displayed. If the string consists of more than one line, you can separate the lines using a carriage return and/or linefeed character between each line.</param>
    <param name="lpCaption">The dialog box title. If this parameter is <b>NULL</b>, the default title is <b>Error</b>.</param>
    <param name="uType">
      <para>The contents and behavior of the dialog box. This parameter can be a combination of flags from the following groups of flags.</para>
      <para>To indicate the buttons displayed in the message box, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_ABORTRETRYIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains three push buttons: <b>Abort</b>, <b>Retry</b>, and <b>Ignore</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_CANCELTRYCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000006L</term>
              </listheader>
            </list>
          </description>
          <description> The message box contains three push buttons: <b>Cancel</b>, <b>Try Again</b>, <b>Continue</b>. Use this message box type instead of MB_ABORTRETRYIGNORE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_HELP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00004000L</term>
              </listheader>
            </list>
          </description>
          <description> Adds a <b>Help</b> button to the message box. When the user clicks the <b>Help</b> button or presses F1, the system sends a <a href="https://docs.microsoft.com//windows/desktop/shell/wm-help">WM_HELP</a> message to the owner.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_OK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains one push button: <b>OK</b>. This is the default.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_OKCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>OK</b> and <b>Cancel</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_RETRYCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000005L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>Retry</b> and <b>Cancel</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_YESNO</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>Yes</b> and <b>No</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_YESNOCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains three push buttons: <b>Yes</b>, <b>No</b>, and <b>Cancel</b>.</description>
        </listheader>
      </list> <para>To display an icon in the message box, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONEXCLAMATION</b></term></listheader><listheader><term>0x00000030L</term></listheader></list></description><description>An exclamation-point icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONWARNING</b></term></listheader><listheader><term>0x00000030L</term></listheader></list></description><description>An exclamation-point icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONINFORMATION</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>An icon consisting of a lowercase letter <i>i</i> in a circle appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONASTERISK</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>An icon consisting of a lowercase letter <i>i</i> in a circle appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONQUESTION</b></term></listheader><listheader><term>0x00000020L</term></listheader></list></description><description>A question-mark icon appears in the message box. The question-mark message icon is no longer recommended because it does not clearly represent a specific type of message and because the phrasing of a message as a question could apply to any message type. In addition, users can confuse the message symbol question mark with Help information. Therefore, do not use this question mark message symbol in your message boxes. The system continues to support its inclusion only for backward compatibility.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONSTOP</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONERROR</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONHAND</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader></list> <para>To indicate the default button, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON1</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>The first button is the default button.<para><b>MB_DEFBUTTON1</b> is the default unless <b>MB_DEFBUTTON2</b>, <b>MB_DEFBUTTON3</b>, or <b>MB_DEFBUTTON4</b> is specified.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON2</b></term></listheader><listheader><term>0x00000100L</term></listheader></list></description><description>The second button is the default button.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON3</b></term></listheader><listheader><term>0x00000200L</term></listheader></list></description><description>The third button is the default button.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON4</b></term></listheader><listheader><term>0x00000300L</term></listheader></list></description><description>The fourth button is the default button.</description></listheader></list> <para>To indicate the modality of the dialog box, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_APPLMODAL</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>The user must respond to the message box before continuing work in the window identified by the <i>hWnd</i> parameter. However, the user can move to the windows of other threads and work in those windows. 							 <para>Depending on the hierarchy of windows in the application, the user may be able to move to other windows within the thread. All child windows of the parent of the message box are automatically disabled, but pop-up windows are not.</para><para><b>MB_APPLMODAL</b> is the default if neither <b>MB_SYSTEMMODAL</b> nor <b>MB_TASKMODAL</b> is specified.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SYSTEMMODAL</b></term></listheader><listheader><term>0x00001000L</term></listheader></list></description><description>Same as MB_APPLMODAL except that the message box has the <b>WS_EX_TOPMOST</b> style. Use system-modal message boxes to notify the user of serious, potentially damaging errors that require immediate attention (for example, running out of memory). This flag has no effect on the user's ability to interact with windows other than those associated with <i>hWnd</i>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_TASKMODAL</b></term></listheader><listheader><term>0x00002000L</term></listheader></list></description><description>Same as <b>MB_APPLMODAL</b> except that all the top-level windows belonging to the current thread are disabled if the <i>hWnd</i> parameter is <b>NULL</b>. Use this flag when the calling application or library does not have a window handle available but still needs to prevent input to other windows in the calling thread without suspending other threads.</description></listheader></list> <para>To specify other options, use one or more of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFAULT_DESKTOP_ONLY</b></term></listheader><listheader><term>0x00020000L</term></listheader></list></description><description> Same as desktop of the interactive window station. For more information, see <a href="https://docs.microsoft.com//windows/desktop/winstation/window-stations">Window Stations</a>. 					 		 					 		<para>If the current input desktop is not the default desktop, <b>MessageBox</b> does not return until the user switches to the default desktop.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_RIGHT</b></term></listheader><listheader><term>0x00080000L</term></listheader></list></description><description>The text is right-justified.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_RTLREADING</b></term></listheader><listheader><term>0x00100000L</term></listheader></list></description><description>Displays message and caption text using right-to-left reading order on Hebrew and Arabic systems.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SETFOREGROUND</b></term></listheader><listheader><term>0x00010000L</term></listheader></list></description><description>The message box becomes the foreground window. Internally, the system calls the <see cref="SetForegroundWindow" /> function for the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_TOPMOST</b></term></listheader><listheader><term>0x00040000L</term></listheader></list></description><description>The message box is created with the <b>WS_EX_TOPMOST</b> window style.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SERVICE_NOTIFICATION</b></term></listheader><listheader><term>0x00200000L</term></listheader></list></description><description>The caller is a service notifying the user of an event. The function displays a message box on the current active desktop, even if there is no user logged on to the computer.<para><b>Terminal Services:</b> If the calling thread has an impersonation token, the function directs the message box to the session specified in the impersonation token.</para><para>If this flag is set, the <i>hWnd</i> parameter must be <b>NULL</b>. This is so that the message box can appear on a desktop other than the desktop corresponding to the <i>hWnd</i>.</para><para>For information on security considerations in regard to using this flag, see <a href="https://docs.microsoft.com//windows/desktop/Services/interactive-services">Interactive Services</a>. In particular, be aware that this flag can produce interactive content on a locked desktop and should therefore be used for only a very limited set of scenarios, such as resource exhaustion.</para></description></listheader></list></param>
    <returns>
      <para>If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC will no effect - unless an MB_OK button is present. If an MB_OK button is displayed and the user presses ESC, the return value will be <b>IDOK</b>.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the function succeeds, the return value is one of the following menu-item values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDABORT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Abort</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Cancel</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Continue</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Ignore</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDNO</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The <b>No</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDOK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The <b>OK</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDRETRY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Retry</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDTRYAGAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Try Again</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDYES</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Yes</b> button was selected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MessageBoxW">
    <summary>Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific message, such as status or error information. The message box returns an integer value that indicates which button the user clicked.</summary>
    <param name="hWnd">A handle to the owner window of the message box to be created. If this parameter is <b>NULL</b>, the message box has no owner window.</param>
    <param name="lpText">The message to be displayed. If the string consists of more than one line, you can separate the lines using a carriage return and/or linefeed character between each line.</param>
    <param name="lpCaption">The dialog box title. If this parameter is <b>NULL</b>, the default title is <b>Error</b>.</param>
    <param name="uType">
      <para>The contents and behavior of the dialog box. This parameter can be a combination of flags from the following groups of flags.</para>
      <para>To indicate the buttons displayed in the message box, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_ABORTRETRYIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains three push buttons: <b>Abort</b>, <b>Retry</b>, and <b>Ignore</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_CANCELTRYCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000006L</term>
              </listheader>
            </list>
          </description>
          <description> The message box contains three push buttons: <b>Cancel</b>, <b>Try Again</b>, <b>Continue</b>. Use this message box type instead of MB_ABORTRETRYIGNORE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_HELP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00004000L</term>
              </listheader>
            </list>
          </description>
          <description> Adds a <b>Help</b> button to the message box. When the user clicks the <b>Help</b> button or presses F1, the system sends a <a href="https://docs.microsoft.com//windows/desktop/shell/wm-help">WM_HELP</a> message to the owner.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_OK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains one push button: <b>OK</b>. This is the default.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_OKCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>OK</b> and <b>Cancel</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_RETRYCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000005L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>Retry</b> and <b>Cancel</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_YESNO</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains two push buttons: <b>Yes</b> and <b>No</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MB_YESNOCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000003L</term>
              </listheader>
            </list>
          </description>
          <description>The message box contains three push buttons: <b>Yes</b>, <b>No</b>, and <b>Cancel</b>.</description>
        </listheader>
      </list> <para>To display an icon in the message box, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONEXCLAMATION</b></term></listheader><listheader><term>0x00000030L</term></listheader></list></description><description>An exclamation-point icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONWARNING</b></term></listheader><listheader><term>0x00000030L</term></listheader></list></description><description>An exclamation-point icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONINFORMATION</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>An icon consisting of a lowercase letter <i>i</i> in a circle appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONASTERISK</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>An icon consisting of a lowercase letter <i>i</i> in a circle appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONQUESTION</b></term></listheader><listheader><term>0x00000020L</term></listheader></list></description><description>A question-mark icon appears in the message box. The question-mark message icon is no longer recommended because it does not clearly represent a specific type of message and because the phrasing of a message as a question could apply to any message type. In addition, users can confuse the message symbol question mark with Help information. Therefore, do not use this question mark message symbol in your message boxes. The system continues to support its inclusion only for backward compatibility.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONSTOP</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONERROR</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_ICONHAND</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>A stop-sign icon appears in the message box.</description></listheader></list> <para>To indicate the default button, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON1</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>The first button is the default button.<para><b>MB_DEFBUTTON1</b> is the default unless <b>MB_DEFBUTTON2</b>, <b>MB_DEFBUTTON3</b>, or <b>MB_DEFBUTTON4</b> is specified.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON2</b></term></listheader><listheader><term>0x00000100L</term></listheader></list></description><description>The second button is the default button.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON3</b></term></listheader><listheader><term>0x00000200L</term></listheader></list></description><description>The third button is the default button.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFBUTTON4</b></term></listheader><listheader><term>0x00000300L</term></listheader></list></description><description>The fourth button is the default button.</description></listheader></list> <para>To indicate the modality of the dialog box, specify one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_APPLMODAL</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>The user must respond to the message box before continuing work in the window identified by the <i>hWnd</i> parameter. However, the user can move to the windows of other threads and work in those windows. 							 <para>Depending on the hierarchy of windows in the application, the user may be able to move to other windows within the thread. All child windows of the parent of the message box are automatically disabled, but pop-up windows are not.</para><para><b>MB_APPLMODAL</b> is the default if neither <b>MB_SYSTEMMODAL</b> nor <b>MB_TASKMODAL</b> is specified.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SYSTEMMODAL</b></term></listheader><listheader><term>0x00001000L</term></listheader></list></description><description>Same as MB_APPLMODAL except that the message box has the <b>WS_EX_TOPMOST</b> style. Use system-modal message boxes to notify the user of serious, potentially damaging errors that require immediate attention (for example, running out of memory). This flag has no effect on the user's ability to interact with windows other than those associated with <i>hWnd</i>.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_TASKMODAL</b></term></listheader><listheader><term>0x00002000L</term></listheader></list></description><description>Same as <b>MB_APPLMODAL</b> except that all the top-level windows belonging to the current thread are disabled if the <i>hWnd</i> parameter is <b>NULL</b>. Use this flag when the calling application or library does not have a window handle available but still needs to prevent input to other windows in the calling thread without suspending other threads.</description></listheader></list> <para>To specify other options, use one or more of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_DEFAULT_DESKTOP_ONLY</b></term></listheader><listheader><term>0x00020000L</term></listheader></list></description><description> Same as desktop of the interactive window station. For more information, see <a href="https://docs.microsoft.com//windows/desktop/winstation/window-stations">Window Stations</a>. 					 		 					 		<para>If the current input desktop is not the default desktop, <b>MessageBox</b> does not return until the user switches to the default desktop.</para></description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_RIGHT</b></term></listheader><listheader><term>0x00080000L</term></listheader></list></description><description>The text is right-justified.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_RTLREADING</b></term></listheader><listheader><term>0x00100000L</term></listheader></list></description><description>Displays message and caption text using right-to-left reading order on Hebrew and Arabic systems.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SETFOREGROUND</b></term></listheader><listheader><term>0x00010000L</term></listheader></list></description><description>The message box becomes the foreground window. Internally, the system calls the <see cref="SetForegroundWindow" /> function for the message box.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_TOPMOST</b></term></listheader><listheader><term>0x00040000L</term></listheader></list></description><description>The message box is created with the <b>WS_EX_TOPMOST</b> window style.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MB_SERVICE_NOTIFICATION</b></term></listheader><listheader><term>0x00200000L</term></listheader></list></description><description>The caller is a service notifying the user of an event. The function displays a message box on the current active desktop, even if there is no user logged on to the computer.<para><b>Terminal Services:</b> If the calling thread has an impersonation token, the function directs the message box to the session specified in the impersonation token.</para><para>If this flag is set, the <i>hWnd</i> parameter must be <b>NULL</b>. This is so that the message box can appear on a desktop other than the desktop corresponding to the <i>hWnd</i>.</para><para>For information on security considerations in regard to using this flag, see <a href="https://docs.microsoft.com//windows/desktop/Services/interactive-services">Interactive Services</a>. In particular, be aware that this flag can produce interactive content on a locked desktop and should therefore be used for only a very limited set of scenarios, such as resource exhaustion.</para></description></listheader></list></param>
    <returns>
      <para>If a message box has a <b>Cancel</b> button, the function returns the <b>IDCANCEL</b> value if either the ESC key is pressed or the <b>Cancel</b> button is selected. If the message box has no <b>Cancel</b> button, pressing ESC will no effect - unless an MB_OK button is present. If an MB_OK button is displayed and the user presses ESC, the return value will be <b>IDOK</b>.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the function succeeds, the return value is one of the following menu-item values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDABORT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Abort</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCANCEL</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Cancel</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDCONTINUE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Continue</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDIGNORE</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Ignore</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDNO</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>The <b>No</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDOK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The <b>OK</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDRETRY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Retry</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDTRYAGAIN</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Try Again</b> button was selected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IDYES</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The <b>Yes</b> button was selected.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.ModifyMenu">
    <summary>
      <para>Changes an existing menu item. This function is used to specify the content, appearance, and behavior of the menu item.</para>
      <div>
        <b>Note</b>  The <b>ModifyMenu</b> function has been superseded by the <see cref="SetMenuItemInfo" /> function. You can still use <b>ModifyMenu</b>, however, if you do not need any of the extended features of <b>SetMenuItemInfo</b>.</div>
    </summary>
    <param name="hMnu">A handle to the menu to be changed.</param>
    <param name="uPosition">The menu item to be changed, as determined by the <i>uFlags</i> parameter.</param>
    <param name="uFlags">
      <para>Controls the interpretation of the <i>uPosition</i> parameter and the content, appearance, and behavior of the menu item. This parameter must include one of the following required values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the identifier of the menu item. The <b>MF_BYCOMMAND</b> flag is the default if neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the zero-based relative position of the menu item.</description>
        </listheader>
      </list> <para>The parameter must also include at least one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_BITMAP</b></term></listheader><listheader><term>0x00000004L</term></listheader></list></description><description>Uses a bitmap as the menu item. The <i>lpNewItem</i> parameter contains a handle to the bitmap.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_CHECKED</b></term></listheader><listheader><term>0x00000008L</term></listheader></list></description><description>Places a check mark next to the item. If your application provides check-mark bitmaps (see the <see cref="SetMenuItemBitmaps" /> function), this flag displays a selected bitmap next to the menu item.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_DISABLED</b></term></listheader><listheader><term>0x00000002L</term></listheader></list></description><description>Disables the menu item so that it cannot be selected, but this flag does not gray it.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_ENABLED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Enables the menu item so that it can be selected and restores it from its grayed state.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_GRAYED</b></term></listheader><listheader><term>0x00000001L</term></listheader></list></description><description>Disables the menu item and grays it so that it cannot be selected.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBARBREAK</b></term></listheader><listheader><term>0x00000020L</term></listheader></list></description><description>Functions the same as the <b>MF_MENUBREAK</b> flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBREAK</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>Places the item on a new line (for menu bars) or in a new column (for a drop-down menu, submenu, or shortcut menu) without separating columns.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_OWNERDRAW</b></term></listheader><listheader><term>0x00000100L</term></listheader></list></description><description>Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns the menu receives a <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> message to retrieve the width and height of the menu item. The <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_POPUP</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>Specifies that the menu item opens a drop-down menu or submenu. The <i>uIDNewItem</i> parameter specifies a handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar or a menu item that opens a submenu to a drop-down menu, submenu, or shortcut menu.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_SEPARATOR</b></term></listheader><listheader><term>0x00000800L</term></listheader></list></description><description>Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted. The <i>lpNewItem</i> and <i>uIDNewItem</i> parameters are ignored.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_STRING</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Specifies that the menu item is a text string; the <i>lpNewItem</i> parameter is a pointer to the string.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_UNCHECKED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Does not place a check mark next to the item (the default). If your application supplies check-mark bitmaps (see the <see cref="SetMenuItemBitmaps" /> function), this flag displays a clear bitmap next to the menu item.</description></listheader></list></param>
    <param name="uIDNewItem">The identifier of the modified menu item or, if the <i>uFlags</i> parameter has the <b>MF_POPUP</b> flag set, a handle to the drop-down menu or submenu.</param>
    <param name="lpNewItem">
      <para>The contents of the changed menu item. The interpretation of this parameter depends on whether the <i>uFlags</i> parameter includes the <b>MF_BITMAP</b>, <b>MF_OWNERDRAW</b>, or <b>MF_STRING</b> flag.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>A bitmap handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>A value supplied by an application that is used to maintain additional data related to the menu item. The value is in the <b>itemData</b> member of the structure pointed to by the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> messages sent when the menu item is created or its appearance is updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>A pointer to a null-terminated string (the default).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ModifyMenuA">
    <summary>
      <para>Changes an existing menu item. This function is used to specify the content, appearance, and behavior of the menu item.</para>
      <div>
        <b>Note</b>  The <b>ModifyMenu</b> function has been superseded by the <see cref="SetMenuItemInfo" /> function. You can still use <b>ModifyMenu</b>, however, if you do not need any of the extended features of <b>SetMenuItemInfo</b>.</div>
    </summary>
    <param name="hMnu">A handle to the menu to be changed.</param>
    <param name="uPosition">The menu item to be changed, as determined by the <i>uFlags</i> parameter.</param>
    <param name="uFlags">
      <para>Controls the interpretation of the <i>uPosition</i> parameter and the content, appearance, and behavior of the menu item. This parameter must include one of the following required values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the identifier of the menu item. The <b>MF_BYCOMMAND</b> flag is the default if neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the zero-based relative position of the menu item.</description>
        </listheader>
      </list> <para>The parameter must also include at least one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_BITMAP</b></term></listheader><listheader><term>0x00000004L</term></listheader></list></description><description>Uses a bitmap as the menu item. The <i>lpNewItem</i> parameter contains a handle to the bitmap.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_CHECKED</b></term></listheader><listheader><term>0x00000008L</term></listheader></list></description><description>Places a check mark next to the item. If your application provides check-mark bitmaps (see the <see cref="SetMenuItemBitmaps" /> function), this flag displays a selected bitmap next to the menu item.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_DISABLED</b></term></listheader><listheader><term>0x00000002L</term></listheader></list></description><description>Disables the menu item so that it cannot be selected, but this flag does not gray it.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_ENABLED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Enables the menu item so that it can be selected and restores it from its grayed state.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_GRAYED</b></term></listheader><listheader><term>0x00000001L</term></listheader></list></description><description>Disables the menu item and grays it so that it cannot be selected.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBARBREAK</b></term></listheader><listheader><term>0x00000020L</term></listheader></list></description><description>Functions the same as the <b>MF_MENUBREAK</b> flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBREAK</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>Places the item on a new line (for menu bars) or in a new column (for a drop-down menu, submenu, or shortcut menu) without separating columns.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_OWNERDRAW</b></term></listheader><listheader><term>0x00000100L</term></listheader></list></description><description>Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns the menu receives a <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> message to retrieve the width and height of the menu item. The <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_POPUP</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>Specifies that the menu item opens a drop-down menu or submenu. The <i>uIDNewItem</i> parameter specifies a handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar or a menu item that opens a submenu to a drop-down menu, submenu, or shortcut menu.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_SEPARATOR</b></term></listheader><listheader><term>0x00000800L</term></listheader></list></description><description>Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted. The <i>lpNewItem</i> and <i>uIDNewItem</i> parameters are ignored.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_STRING</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Specifies that the menu item is a text string; the <i>lpNewItem</i> parameter is a pointer to the string.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_UNCHECKED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Does not place a check mark next to the item (the default). If your application supplies check-mark bitmaps (see the <see cref="SetMenuItemBitmaps" /> function), this flag displays a clear bitmap next to the menu item.</description></listheader></list></param>
    <param name="uIDNewItem">The identifier of the modified menu item or, if the <i>uFlags</i> parameter has the <b>MF_POPUP</b> flag set, a handle to the drop-down menu or submenu.</param>
    <param name="lpNewItem">
      <para>The contents of the changed menu item. The interpretation of this parameter depends on whether the <i>uFlags</i> parameter includes the <b>MF_BITMAP</b>, <b>MF_OWNERDRAW</b>, or <b>MF_STRING</b> flag.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>A bitmap handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>A value supplied by an application that is used to maintain additional data related to the menu item. The value is in the <b>itemData</b> member of the structure pointed to by the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> messages sent when the menu item is created or its appearance is updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>A pointer to a null-terminated string (the default).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ModifyMenuW">
    <summary>
      <para>Changes an existing menu item. This function is used to specify the content, appearance, and behavior of the menu item.</para>
      <div>
        <b>Note</b>  The <b>ModifyMenu</b> function has been superseded by the <see cref="SetMenuItemInfo" /> function. You can still use <b>ModifyMenu</b>, however, if you do not need any of the extended features of <b>SetMenuItemInfo</b>.</div>
    </summary>
    <param name="hMnu">A handle to the menu to be changed.</param>
    <param name="uPosition">The menu item to be changed, as determined by the <i>uFlags</i> parameter.</param>
    <param name="uFlags">
      <para>Controls the interpretation of the <i>uPosition</i> parameter and the content, appearance, and behavior of the menu item. This parameter must include one of the following required values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the identifier of the menu item. The <b>MF_BYCOMMAND</b> flag is the default if neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the zero-based relative position of the menu item.</description>
        </listheader>
      </list> <para>The parameter must also include at least one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_BITMAP</b></term></listheader><listheader><term>0x00000004L</term></listheader></list></description><description>Uses a bitmap as the menu item. The <i>lpNewItem</i> parameter contains a handle to the bitmap.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_CHECKED</b></term></listheader><listheader><term>0x00000008L</term></listheader></list></description><description>Places a check mark next to the item. If your application provides check-mark bitmaps (see the <see cref="SetMenuItemBitmaps" /> function), this flag displays a selected bitmap next to the menu item.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_DISABLED</b></term></listheader><listheader><term>0x00000002L</term></listheader></list></description><description>Disables the menu item so that it cannot be selected, but this flag does not gray it.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_ENABLED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Enables the menu item so that it can be selected and restores it from its grayed state.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_GRAYED</b></term></listheader><listheader><term>0x00000001L</term></listheader></list></description><description>Disables the menu item and grays it so that it cannot be selected.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBARBREAK</b></term></listheader><listheader><term>0x00000020L</term></listheader></list></description><description>Functions the same as the <b>MF_MENUBREAK</b> flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBREAK</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>Places the item on a new line (for menu bars) or in a new column (for a drop-down menu, submenu, or shortcut menu) without separating columns.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_OWNERDRAW</b></term></listheader><listheader><term>0x00000100L</term></listheader></list></description><description>Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns the menu receives a <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> message to retrieve the width and height of the menu item. The <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_POPUP</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>Specifies that the menu item opens a drop-down menu or submenu. The <i>uIDNewItem</i> parameter specifies a handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar or a menu item that opens a submenu to a drop-down menu, submenu, or shortcut menu.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_SEPARATOR</b></term></listheader><listheader><term>0x00000800L</term></listheader></list></description><description>Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted. The <i>lpNewItem</i> and <i>uIDNewItem</i> parameters are ignored.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_STRING</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Specifies that the menu item is a text string; the <i>lpNewItem</i> parameter is a pointer to the string.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_UNCHECKED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Does not place a check mark next to the item (the default). If your application supplies check-mark bitmaps (see the <see cref="SetMenuItemBitmaps" /> function), this flag displays a clear bitmap next to the menu item.</description></listheader></list></param>
    <param name="uIDNewItem">The identifier of the modified menu item or, if the <i>uFlags</i> parameter has the <b>MF_POPUP</b> flag set, a handle to the drop-down menu or submenu.</param>
    <param name="lpNewItem">
      <para>The contents of the changed menu item. The interpretation of this parameter depends on whether the <i>uFlags</i> parameter includes the <b>MF_BITMAP</b>, <b>MF_OWNERDRAW</b>, or <b>MF_STRING</b> flag.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>A bitmap handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>A value supplied by an application that is used to maintain additional data related to the menu item. The value is in the <b>itemData</b> member of the structure pointed to by the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> messages sent when the menu item is created or its appearance is updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>A pointer to a null-terminated string (the default).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ModifyMenu">
    <summary>
      <para>Changes an existing menu item. This function is used to specify the content, appearance, and behavior of the menu item.</para>
      <div>
        <b>Note</b>  The <b>ModifyMenu</b> function has been superseded by the <see cref="SetMenuItemInfo" /> function. You can still use <b>ModifyMenu</b>, however, if you do not need any of the extended features of <b>SetMenuItemInfo</b>.</div>
    </summary>
    <param name="hMnu">A handle to the menu to be changed.</param>
    <param name="uPosition">The menu item to be changed, as determined by the <i>uFlags</i> parameter.</param>
    <param name="uFlags">
      <para>Controls the interpretation of the <i>uPosition</i> parameter and the content, appearance, and behavior of the menu item. This parameter must include one of the following required values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the identifier of the menu item. The <b>MF_BYCOMMAND</b> flag is the default if neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the zero-based relative position of the menu item.</description>
        </listheader>
      </list> <para>The parameter must also include at least one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_BITMAP</b></term></listheader><listheader><term>0x00000004L</term></listheader></list></description><description>Uses a bitmap as the menu item. The <i>lpNewItem</i> parameter contains a handle to the bitmap.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_CHECKED</b></term></listheader><listheader><term>0x00000008L</term></listheader></list></description><description>Places a check mark next to the item. If your application provides check-mark bitmaps (see the <see cref="SetMenuItemBitmaps" /> function), this flag displays a selected bitmap next to the menu item.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_DISABLED</b></term></listheader><listheader><term>0x00000002L</term></listheader></list></description><description>Disables the menu item so that it cannot be selected, but this flag does not gray it.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_ENABLED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Enables the menu item so that it can be selected and restores it from its grayed state.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_GRAYED</b></term></listheader><listheader><term>0x00000001L</term></listheader></list></description><description>Disables the menu item and grays it so that it cannot be selected.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBARBREAK</b></term></listheader><listheader><term>0x00000020L</term></listheader></list></description><description>Functions the same as the <b>MF_MENUBREAK</b> flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBREAK</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>Places the item on a new line (for menu bars) or in a new column (for a drop-down menu, submenu, or shortcut menu) without separating columns.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_OWNERDRAW</b></term></listheader><listheader><term>0x00000100L</term></listheader></list></description><description>Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns the menu receives a <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> message to retrieve the width and height of the menu item. The <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_POPUP</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>Specifies that the menu item opens a drop-down menu or submenu. The <i>uIDNewItem</i> parameter specifies a handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar or a menu item that opens a submenu to a drop-down menu, submenu, or shortcut menu.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_SEPARATOR</b></term></listheader><listheader><term>0x00000800L</term></listheader></list></description><description>Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted. The <i>lpNewItem</i> and <i>uIDNewItem</i> parameters are ignored.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_STRING</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Specifies that the menu item is a text string; the <i>lpNewItem</i> parameter is a pointer to the string.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_UNCHECKED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Does not place a check mark next to the item (the default). If your application supplies check-mark bitmaps (see the <see cref="SetMenuItemBitmaps" /> function), this flag displays a clear bitmap next to the menu item.</description></listheader></list></param>
    <param name="uIDNewItem">The identifier of the modified menu item or, if the <i>uFlags</i> parameter has the <b>MF_POPUP</b> flag set, a handle to the drop-down menu or submenu.</param>
    <param name="lpNewItem">
      <para>The contents of the changed menu item. The interpretation of this parameter depends on whether the <i>uFlags</i> parameter includes the <b>MF_BITMAP</b>, <b>MF_OWNERDRAW</b>, or <b>MF_STRING</b> flag.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>A bitmap handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>A value supplied by an application that is used to maintain additional data related to the menu item. The value is in the <b>itemData</b> member of the structure pointed to by the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> messages sent when the menu item is created or its appearance is updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>A pointer to a null-terminated string (the default).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ModifyMenuA">
    <summary>
      <para>Changes an existing menu item. This function is used to specify the content, appearance, and behavior of the menu item.</para>
      <div>
        <b>Note</b>  The <b>ModifyMenu</b> function has been superseded by the <see cref="SetMenuItemInfo" /> function. You can still use <b>ModifyMenu</b>, however, if you do not need any of the extended features of <b>SetMenuItemInfo</b>.</div>
    </summary>
    <param name="hMnu">A handle to the menu to be changed.</param>
    <param name="uPosition">The menu item to be changed, as determined by the <i>uFlags</i> parameter.</param>
    <param name="uFlags">
      <para>Controls the interpretation of the <i>uPosition</i> parameter and the content, appearance, and behavior of the menu item. This parameter must include one of the following required values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the identifier of the menu item. The <b>MF_BYCOMMAND</b> flag is the default if neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the zero-based relative position of the menu item.</description>
        </listheader>
      </list> <para>The parameter must also include at least one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_BITMAP</b></term></listheader><listheader><term>0x00000004L</term></listheader></list></description><description>Uses a bitmap as the menu item. The <i>lpNewItem</i> parameter contains a handle to the bitmap.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_CHECKED</b></term></listheader><listheader><term>0x00000008L</term></listheader></list></description><description>Places a check mark next to the item. If your application provides check-mark bitmaps (see the <see cref="SetMenuItemBitmaps" /> function), this flag displays a selected bitmap next to the menu item.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_DISABLED</b></term></listheader><listheader><term>0x00000002L</term></listheader></list></description><description>Disables the menu item so that it cannot be selected, but this flag does not gray it.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_ENABLED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Enables the menu item so that it can be selected and restores it from its grayed state.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_GRAYED</b></term></listheader><listheader><term>0x00000001L</term></listheader></list></description><description>Disables the menu item and grays it so that it cannot be selected.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBARBREAK</b></term></listheader><listheader><term>0x00000020L</term></listheader></list></description><description>Functions the same as the <b>MF_MENUBREAK</b> flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBREAK</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>Places the item on a new line (for menu bars) or in a new column (for a drop-down menu, submenu, or shortcut menu) without separating columns.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_OWNERDRAW</b></term></listheader><listheader><term>0x00000100L</term></listheader></list></description><description>Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns the menu receives a <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> message to retrieve the width and height of the menu item. The <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_POPUP</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>Specifies that the menu item opens a drop-down menu or submenu. The <i>uIDNewItem</i> parameter specifies a handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar or a menu item that opens a submenu to a drop-down menu, submenu, or shortcut menu.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_SEPARATOR</b></term></listheader><listheader><term>0x00000800L</term></listheader></list></description><description>Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted. The <i>lpNewItem</i> and <i>uIDNewItem</i> parameters are ignored.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_STRING</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Specifies that the menu item is a text string; the <i>lpNewItem</i> parameter is a pointer to the string.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_UNCHECKED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Does not place a check mark next to the item (the default). If your application supplies check-mark bitmaps (see the <see cref="SetMenuItemBitmaps" /> function), this flag displays a clear bitmap next to the menu item.</description></listheader></list></param>
    <param name="uIDNewItem">The identifier of the modified menu item or, if the <i>uFlags</i> parameter has the <b>MF_POPUP</b> flag set, a handle to the drop-down menu or submenu.</param>
    <param name="lpNewItem">
      <para>The contents of the changed menu item. The interpretation of this parameter depends on whether the <i>uFlags</i> parameter includes the <b>MF_BITMAP</b>, <b>MF_OWNERDRAW</b>, or <b>MF_STRING</b> flag.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>A bitmap handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>A value supplied by an application that is used to maintain additional data related to the menu item. The value is in the <b>itemData</b> member of the structure pointed to by the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> messages sent when the menu item is created or its appearance is updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>A pointer to a null-terminated string (the default).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ModifyMenuW">
    <summary>
      <para>Changes an existing menu item. This function is used to specify the content, appearance, and behavior of the menu item.</para>
      <div>
        <b>Note</b>  The <b>ModifyMenu</b> function has been superseded by the <see cref="SetMenuItemInfo" /> function. You can still use <b>ModifyMenu</b>, however, if you do not need any of the extended features of <b>SetMenuItemInfo</b>.</div>
    </summary>
    <param name="hMnu">A handle to the menu to be changed.</param>
    <param name="uPosition">The menu item to be changed, as determined by the <i>uFlags</i> parameter.</param>
    <param name="uFlags">
      <para>Controls the interpretation of the <i>uPosition</i> parameter and the content, appearance, and behavior of the menu item. This parameter must include one of the following required values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the identifier of the menu item. The <b>MF_BYCOMMAND</b> flag is the default if neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the <i>uPosition</i> parameter gives the zero-based relative position of the menu item.</description>
        </listheader>
      </list> <para>The parameter must also include at least one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_BITMAP</b></term></listheader><listheader><term>0x00000004L</term></listheader></list></description><description>Uses a bitmap as the menu item. The <i>lpNewItem</i> parameter contains a handle to the bitmap.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_CHECKED</b></term></listheader><listheader><term>0x00000008L</term></listheader></list></description><description>Places a check mark next to the item. If your application provides check-mark bitmaps (see the <see cref="SetMenuItemBitmaps" /> function), this flag displays a selected bitmap next to the menu item.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_DISABLED</b></term></listheader><listheader><term>0x00000002L</term></listheader></list></description><description>Disables the menu item so that it cannot be selected, but this flag does not gray it.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_ENABLED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Enables the menu item so that it can be selected and restores it from its grayed state.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_GRAYED</b></term></listheader><listheader><term>0x00000001L</term></listheader></list></description><description>Disables the menu item and grays it so that it cannot be selected.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBARBREAK</b></term></listheader><listheader><term>0x00000020L</term></listheader></list></description><description>Functions the same as the <b>MF_MENUBREAK</b> flag for a menu bar. For a drop-down menu, submenu, or shortcut menu, the new column is separated from the old column by a vertical line.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_MENUBREAK</b></term></listheader><listheader><term>0x00000040L</term></listheader></list></description><description>Places the item on a new line (for menu bars) or in a new column (for a drop-down menu, submenu, or shortcut menu) without separating columns.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_OWNERDRAW</b></term></listheader><listheader><term>0x00000100L</term></listheader></list></description><description>Specifies that the item is an owner-drawn item. Before the menu is displayed for the first time, the window that owns the menu receives a <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> message to retrieve the width and height of the menu item. The <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> message is then sent to the window procedure of the owner window whenever the appearance of the menu item must be updated.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_POPUP</b></term></listheader><listheader><term>0x00000010L</term></listheader></list></description><description>Specifies that the menu item opens a drop-down menu or submenu. The <i>uIDNewItem</i> parameter specifies a handle to the drop-down menu or submenu. This flag is used to add a menu name to a menu bar or a menu item that opens a submenu to a drop-down menu, submenu, or shortcut menu.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_SEPARATOR</b></term></listheader><listheader><term>0x00000800L</term></listheader></list></description><description>Draws a horizontal dividing line. This flag is used only in a drop-down menu, submenu, or shortcut menu. The line cannot be grayed, disabled, or highlighted. The <i>lpNewItem</i> and <i>uIDNewItem</i> parameters are ignored.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_STRING</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Specifies that the menu item is a text string; the <i>lpNewItem</i> parameter is a pointer to the string.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>MF_UNCHECKED</b></term></listheader><listheader><term>0x00000000L</term></listheader></list></description><description>Does not place a check mark next to the item (the default). If your application supplies check-mark bitmaps (see the <see cref="SetMenuItemBitmaps" /> function), this flag displays a clear bitmap next to the menu item.</description></listheader></list></param>
    <param name="uIDNewItem">The identifier of the modified menu item or, if the <i>uFlags</i> parameter has the <b>MF_POPUP</b> flag set, a handle to the drop-down menu or submenu.</param>
    <param name="lpNewItem">
      <para>The contents of the changed menu item. The interpretation of this parameter depends on whether the <i>uFlags</i> parameter includes the <b>MF_BITMAP</b>, <b>MF_OWNERDRAW</b>, or <b>MF_STRING</b> flag.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BITMAP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004L</term>
              </listheader>
            </list>
          </description>
          <description>A bitmap handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_OWNERDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100L</term>
              </listheader>
            </list>
          </description>
          <description>A value supplied by an application that is used to maintain additional data related to the menu item. The value is in the <b>itemData</b> member of the structure pointed to by the <i>lParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-measureitem">WM_MEASUREITEM</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/wm-drawitem">WM_DRAWITEM</a> messages sent when the menu item is created or its appearance is updated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_STRING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>A pointer to a null-terminated string (the default).</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.MonitorFromPoint">
    <summary>The <b>MonitorFromPoint</b> function retrieves a handle to the display monitor that contains a specified point.</summary>
    <param name="pt">A <see cref="POINT" /> structure that specifies the point of interest in virtual-screen coordinates.</param>
    <param name="dwFlags">
      <para>Determines the function's return value if the point is not contained within any display monitor.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
          <listheader>
            <description>
              <list type="bullet">
                <listheader>
                  <term>
                    <b>MONITOR_DEFAULTTONULL</b>
                  </term>
                </listheader>
                <listheader>
                  <term>0x00000000</term>
                </listheader>
              </list>
            </description>
            <description>Returns <b>NULL</b>.</description>
          </listheader>
          <listheader>
            <description>
              <list type="bullet">
                <listheader>
                  <term>
                    <b>MONITOR_DEFAULTTOPRIMARY</b>
                  </term>
                </listheader>
                <listheader>
                  <term>0x00000001</term>
                </listheader>
              </list>
            </description>
            <description>Returns a handle to the primary display monitor.</description>
          </listheader>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MONITOR_DEFAULTTONEAREST</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Returns a handle to the display monitor that is nearest to the point.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the point is contained by a display monitor, the return value is an <b>HMONITOR</b> handle to that display monitor.</para>
      <para>If the point is not contained by a display monitor, the return value depends on the value of <i>dwFlags</i>.</para>
    </returns>
  </member>
  <member name="Windows.MonitorFromRect">
    <summary>The <b>MonitorFromRect</b> function retrieves a handle to the display monitor that has the largest area of intersection with a specified rectangle.</summary>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that specifies the rectangle of interest in virtual-screen coordinates.</param>
    <param name="dwFlags">
      <para>Determines the function's return value if the rectangle does not intersect any display monitor.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MONITOR_DEFAULTTONEAREST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns a handle to the display monitor that is nearest to the rectangle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MONITOR_DEFAULTTONULL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MONITOR_DEFAULTTOPRIMARY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns a handle to the primary display monitor.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the rectangle intersects one or more display monitor rectangles, the return value is an <b>HMONITOR</b> handle to the display monitor that has the largest area of intersection with the rectangle.</para>
      <para>If the rectangle does not intersect a display monitor, the return value depends on the value of <i>dwFlags</i>.</para>
    </returns>
  </member>
  <member name="Windows.MonitorFromWindow">
    <summary>The <b>MonitorFromWindow</b> function retrieves a handle to the display monitor that has the largest area of intersection with the bounding rectangle of a specified window.</summary>
    <param name="hwnd">A handle to the window of interest.</param>
    <param name="dwFlags">
      <para>Determines the function's return value if the window does not intersect any display monitor.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MONITOR_DEFAULTTONEAREST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns a handle to the display monitor that is nearest to the window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MONITOR_DEFAULTTONULL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MONITOR_DEFAULTTOPRIMARY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Returns a handle to the primary display monitor.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the window intersects one or more display monitor rectangles, the return value is an <b>HMONITOR</b> handle to the display monitor that has the largest area of intersection with the window.</para>
      <para>If the window does not intersect a display monitor, the return value depends on the value of <i>dwFlags</i>.</para>
    </returns>
  </member>
  <member name="Windows.mouse_event">
    <summary>
      <para>The <b>mouse_event</b> function synthesizes mouse motion and button clicks.</para>
      <div>
        <b>Note</b>  This function has been superseded. Use <see cref="SendInput" /> instead.</div>
    </summary>
    <param name="dwFlags">
      <para>Controls various aspects of mouse motion and button clicking. This parameter can be certain combinations of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MOUSEEVENTF_ABSOLUTE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8000</term>
              </listheader>
            </list>
          </description>
          <description>The 						<i>dx</i> and 						<i>dy</i> parameters contain normalized absolute coordinates. If not set, those parameters contain relative data: the change in position since the last reported position. This flag can be set, or not set, regardless of what kind of mouse or mouse-like device, if any, is connected to the system. For further information about relative mouse motion, see the following Remarks section.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MOUSEEVENTF_LEFTDOWN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>The left button is down.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MOUSEEVENTF_LEFTUP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>The left button is up.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MOUSEEVENTF_MIDDLEDOWN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0020</term>
              </listheader>
            </list>
          </description>
          <description>The middle button is down.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MOUSEEVENTF_MIDDLEUP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0040</term>
              </listheader>
            </list>
          </description>
          <description>The middle button is up.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MOUSEEVENTF_MOVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Movement occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MOUSEEVENTF_RIGHTDOWN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>The right button is down.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MOUSEEVENTF_RIGHTUP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0010</term>
              </listheader>
            </list>
          </description>
          <description>The right button is up.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MOUSEEVENTF_WHEEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0800</term>
              </listheader>
            </list>
          </description>
          <description>The wheel has been moved, if the mouse has a wheel. The amount of movement is specified in 						<i>dwData</i></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MOUSEEVENTF_XDOWN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0080</term>
              </listheader>
            </list>
          </description>
          <description>An X button was pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MOUSEEVENTF_XUP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0100</term>
              </listheader>
            </list>
          </description>
          <description>An X button was released.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MOUSEEVENTF_WHEEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0800</term>
              </listheader>
            </list>
          </description>
          <description>The wheel button is rotated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MOUSEEVENTF_HWHEEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01000</term>
              </listheader>
            </list>
          </description>
          <description>The wheel button is tilted.</description>
        </listheader>
      </list> <para>The values that specify mouse button status are set to indicate changes in status, not ongoing conditions. For example, if the left mouse button is pressed and held down, <b>MOUSEEVENTF_LEFTDOWN</b> is set when the left button is first pressed, but not for subsequent motions. Similarly, <b>MOUSEEVENTF_LEFTUP</b> is set only when the button is first released.</para><para>You cannot specify both <b>MOUSEEVENTF_WHEEL</b> and either <b>MOUSEEVENTF_XDOWN</b> or <b>MOUSEEVENTF_XUP</b> simultaneously in the<i>dwFlags</i> parameter, because they both require use of the<i>dwData</i> field.</para></param>
    <param name="dx">The mouse's absolute position along the x-axis or its amount of motion since the last mouse event was generated, depending on the setting of <b>MOUSEEVENTF_ABSOLUTE</b>. Absolute data is specified as the mouse's actual x-coordinate; relative data is specified as the number of mickeys moved. A<i>mickey</i> is the amount that a mouse has to move for it to report that it has moved.</param>
    <param name="dy">The mouse's absolute position along the y-axis or its amount of motion since the last mouse event was generated, depending on the setting of <b>MOUSEEVENTF_ABSOLUTE</b>. Absolute data is specified as the mouse's actual y-coordinate; relative data is specified as the number of mickeys moved.</param>
    <param name="dwData">
      <para>If<i>dwFlags</i> contains <b>MOUSEEVENTF_WHEEL</b>, then<i>dwData</i> specifies the amount of wheel movement. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotated backward, toward the user. One wheel click is defined as <b>WHEEL_DELTA</b>, which is 120.</para>
      <para>If <i>dwFlags</i> contains <b>MOUSEEVENTF_HWHEEL</b>, then<i>dwData</i> specifies the amount of wheel movement. A positive value indicates that the wheel was tilted to the right; a negative value indicates that the wheel was tilted to the left.</para>
      <para>If<i>dwFlags</i> contains <b>MOUSEEVENTF_XDOWN</b> or <b>MOUSEEVENTF_XUP</b>, then<i>dwData</i> specifies which X buttons were pressed or released. This value may be any combination of the following flags.</para>
      <para>If<i>dwFlags</i> is not <b>MOUSEEVENTF_WHEEL</b>, <b>MOUSEEVENTF_XDOWN</b>, or <b>MOUSEEVENTF_XUP</b>, then<i>dwData</i> should be zero.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>XBUTTON1</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Set if the first X button was pressed or released.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>XBUTTON2</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Set if the second X button was pressed or released.</description>
        </listheader>
      </list>
    </param>
    <param name="dwExtraInfo">An additional value associated with the mouse event. An application calls <see cref="GetMessageExtraInfo" /> to obtain this extra information.</param>
  </member>
  <member name="Windows.MoveWindow">
    <summary>Changes the position and dimensions of the specified window. For a top-level window, the position and dimensions are relative to the upper-left corner of the screen. For a child window, they are relative to the upper-left corner of the parent window's client area.</summary>
    <param name="hWnd">A handle to the window.</param>
    <param name="X">The new position of the left side of the window.</param>
    <param name="Y">The new position of the top of the window.</param>
    <param name="nWidth">The new width of the window.</param>
    <param name="nHeight">The new height of the window.</param>
    <param name="bRepaint">Indicates whether the window is to be repainted. If this parameter is <b>TRUE</b>, the window receives a message. If the parameter is <b>FALSE</b>, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of moving a child window.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.MsgWaitForMultipleObjects">
    <summary>
      <para>Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses. The objects can include input event objects, which you specify using the <i>dwWakeMask</i> parameter.</para>
      <para>To enter an alertable wait state, use the<see cref="MsgWaitForMultipleObjectsEx" /> function.</para>
    </summary>
    <param name="nCount">The number of object handles in the array pointed to by <i>pHandles</i>. The maximum number of object handles is <b>MAXIMUM_WAIT_OBJECTS</b> minus one. If this parameter has the value zero, then the function waits only for an input event.</param>
    <param name="pHandles">
      <para>An array of object handles. For a list of the object types whose handles can be specified, see the following Remarks section. The array can contain handles of objects of different types. It may not contain multiple copies of the same handle.</para>
      <para>If one of these handles is closed while the wait is still pending, the function's behavior is undefined.</para>
      <para>The handles must have the <b>SYNCHRONIZE</b> access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/standard-access-rights">Standard Access Rights</a>.</para>
    </param>
    <param name="fWaitAll">If this parameter is <b>TRUE</b>, the function returns when the states of all objects in the <i>pHandles</i> array have been set to signaled and an input event has been received. If this parameter is <b>FALSE</b>, the function returns when the state of any one of the objects is set to signaled or an input event has been received. In this case, the return value indicates the object whose state caused the function to return.</param>
    <param name="dwMilliseconds">
      <para>The time-out interval, in milliseconds. If a nonzero value is specified, the function waits until the specified objects are signaled or the interval elapses. If <i>dwMilliseconds</i> is zero, the function does not enter a wait state if the specified objects are not signaled; it always returns immediately. If <i>dwMilliseconds</i> is <b>INFINITE</b>, the function will return only when the specified objects are signaled.</para>
      <para>
        <b>Windows XP, Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 and Windows Server 2008 R2:  </b>The <i>dwMilliseconds</i> value does include time spent in low-power states. For example, the timeout does keep counting down while the computer is asleep.</para>
      <para>
        <b>Windows 8, Windows Server 2012, Windows 8.1, Windows Server 2012 R2, Windows 10 and Windows Server 2016:  </b>The <i>dwMilliseconds</i> value does not include time spent in low-power states. For example, the timeout does not keep counting down while the computer is asleep.</para>
    </param>
    <param name="dwWakeMask">The input types for which an input event object handle will be added to the array of object handles. This parameter can be any combination of the values listed in <see cref="GetQueueStatus" /><i>flags</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value indicates the event that caused the function to return. It can be one of the following values. (Note that <b>WAIT_OBJECT_0</b> is defined as 0 and <b>WAIT_ABANDONED_0</b> is defined as 0x00000080L.)</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WAIT_OBJECT_0</b> to (<b>WAIT_OBJECT_0</b> + <i>nCount</i>– 1)</term>
              </listheader>
            </list>
          </description>
          <description>If <i>bWaitAll</i> is <b>TRUE</b>, a return value within the specified range indicates that the state of all specified objects is signaled. If <i>bWaitAll</i> is <b>FALSE</b>, the return value minus <b>WAIT_OBJECT_0</b> indicates the <i>pHandles</i> array index of the object that satisfied the wait.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WAIT_OBJECT_0</b> + <i>nCount</i></term>
              </listheader>
            </list>
          </description>
          <description>New input of the type specified in the <i>dwWakeMask</i> parameter is available in the thread's input queue. Functions such as <see cref="PeekMessage" />, <a href="https://docs.microsoft.com//previous-versions/windows/desktop/fax/-mfax-faxaccountincomingarchive-getmessage-vb">GetMessage</a>, and <see cref="WaitMessage" /> mark messages in the queue as old messages. Therefore, after you call one of these functions, a subsequent call to <see cref="MsgWaitForMultipleObjects" /> will not return until new input of the specified type arrives. <para>This value is also returned upon the occurrence of a system event that requires the thread's action, such as foreground activation. Therefore,<see cref="MsgWaitForMultipleObjects" /> can return even though no appropriate input is available and even if <i>dwWakeMask</i> is set to 0. If this occurs, call <a href="https://docs.microsoft.com//previous-versions/windows/desktop/fax/-mfax-faxaccountincomingarchive-getmessage-vb">GetMessage</a> or <see cref="PeekMessage" /> to process the system event before trying the call to<b>MsgWaitForMultipleObjects</b> again.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WAIT_ABANDONED_0</b> to (<b>WAIT_ABANDONED_0</b> + <i>nCount</i>– 1)</term>
              </listheader>
            </list>
          </description>
          <description>If <i>bWaitAll</i> is <b>TRUE</b>, a return value within the specified range indicates that the state of all specified objects is signaled and at least one of the objects is an abandoned mutex object. If <i>bWaitAll</i> is <b>FALSE</b>, the return value minus <b>WAIT_ABANDONED_0</b> indicates the <i>pHandles</i> array index of an abandoned mutex object that satisfied the wait. Ownership of the mutex object is granted to the calling thread, and the mutex is set to nonsignaled.<para>If the mutex was protecting persistent state information, you should check it for consistency.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WAIT_TIMEOUT</b>
                </term>
              </listheader>
              <listheader>
                <term>258L</term>
              </listheader>
            </list>
          </description>
          <description>The time-out interval elapsed and the conditions specified by the <i>bWaitAll</i> and <i>dwWakeMask</i> parameters were not satisfied.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WAIT_FAILED</b>
                </term>
              </listheader>
              <listheader>
                <term>(DWORD)0xFFFFFFFF</term>
              </listheader>
            </list>
          </description>
          <description>The function has failed. To get extended error information, call <see cref="GetLastError" />.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.MsgWaitForMultipleObjectsEx">
    <summary>Waits until one or all of the specified objects are in the signaled state, an I/O completion routine or asynchronous procedure call (APC) is queued to the thread, or the time-out interval elapses. The array of objects can include input event objects, which you specify using the <i>dwWakeMask</i> parameter.</summary>
    <param name="nCount">The number of object handles in the array pointed to by <i>pHandles</i>. The maximum number of object handles is <b>MAXIMUM_WAIT_OBJECTS</b> minus one. If this parameter has the value zero, then the function waits only for an input event.</param>
    <param name="pHandles">
      <para>An array of object handles. For a list of the object types whose handles you can specify, see the Remarks section later in this topic. The array can contain handles to multiple types of objects. It may not contain multiple copies of the same handle.</para>
      <para>If one of these handles is closed while the wait is still pending, the function's behavior is undefined.</para>
      <para>The handles must have the <b>SYNCHRONIZE</b> access right. For more information, see<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/standard-access-rights">Standard Access Rights</a>.</para>
    </param>
    <param name="dwMilliseconds">
      <para>The time-out interval, in milliseconds. If a nonzero value is specified, the function waits until the specified objects are signaled, an I/O completion routine or APC is queued, or the interval elapses. If <i>dwMilliseconds</i> is zero, the function does not enter a wait state if the criteria is not met; it always returns immediately. If <i>dwMilliseconds</i> is <b>INFINITE</b>, the function will return only when the specified objects are signaled or an I/O completion routine or APC is queued.</para>
      <para>
        <b>Windows XP, Windows Server 2003, Windows Vista, Windows 7, Windows Server 2008 and Windows Server 2008 R2:  </b>The <i>dwMilliseconds</i> value does include time spent in low-power states. For example, the timeout does keep counting down while the computer is asleep.</para>
      <para>
        <b>Windows 8, Windows Server 2012, Windows 8.1, Windows Server 2012 R2, Windows 10 and Windows Server 2016:  </b>The <i>dwMilliseconds</i> value does not include time spent in low-power states. For example, the timeout does not keep counting down while the computer is asleep.</para>
    </param>
    <param name="dwWakeMask">The input types for which an input event object handle will be added to the array of object handles. This parameter can be any combination of the values listed in <see cref="GetQueueStatus" /><i>flags</i> parameter.</param>
    <param name="dwFlags">
      <para>The wait type. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The function returns when any one of the objects is signaled. The return value indicates the object whose state caused the function to return.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MWMO_ALERTABLE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>The function also returns if an APC has been queued to the thread with <see cref="QueueUserAPC" /> while the thread is in the waiting state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MWMO_INPUTAVAILABLE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>The function returns if input exists for the queue, even if the input has been seen (but not removed) using a call to another function, such as <see cref="PeekMessage" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MWMO_WAITALL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>The function returns when all objects in the <i>pHandles</i> array are signaled and an input event has been received, all at the same time.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value indicates the event that caused the function to return. It can be one of the following values. (Note that <b>WAIT_OBJECT_0</b> is defined as 0 and <b>WAIT_ABANDONED_0</b> is defined as 0x00000080L.)</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WAIT_OBJECT_0</b> to (<b>WAIT_OBJECT_0</b> + <i>nCount</i> - 1)</term>
              </listheader>
            </list>
          </description>
          <description>If the <b>MWMO_WAITALL</b> flag is used, a return value within the specified range indicates that the state of all specified objects is signaled. Otherwise, the return value minus <b>WAIT_OBJECT_0</b> indicates the <i>pHandles</i> array index of the object that caused the function to return.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WAIT_OBJECT_0</b> + <i>nCount</i></term>
              </listheader>
            </list>
          </description>
          <description>New input of the type specified in the <i>dwWakeMask</i> parameter is available in the thread's input queue. Functions such as <see cref="PeekMessage" />, <a href="https://docs.microsoft.com//previous-versions/windows/desktop/fax/-mfax-faxaccountincomingarchive-getmessage-vb">GetMessage</a>, <a href="https://docs.microsoft.com//windows/desktop/direct3d10/id3dx10threadpump-getqueuestatus">GetQueueStatus</a>, and <see cref="WaitMessage" /> mark messages in the queue as old messages. Therefore, after you call one of these functions, a subsequent call to <see cref="MsgWaitForMultipleObjectsEx" /> will not return until new input of the specified type arrives. <para>This value is also returned upon the occurrence of a system event that requires the thread's action, such as foreground activation. Therefore,<see cref="MsgWaitForMultipleObjectsEx" /> can return even though no appropriate input is available and even if <i>dwWakeMask</i> is set to 0. If this occurs, call <a href="https://docs.microsoft.com//previous-versions/windows/desktop/fax/-mfax-faxaccountincomingarchive-getmessage-vb">GetMessage</a> or <see cref="PeekMessage" /> to process the system event before trying the call to<b>MsgWaitForMultipleObjectsEx</b> again.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WAIT_ABANDONED_0</b> to (<b>WAIT_ABANDONED_0</b> + <i>nCount</i> - 1)</term>
              </listheader>
            </list>
          </description>
          <description>If the <b>MWMO_WAITALL</b> flag is used, a return value within the specified range indicates that the state of all specified objects is signaled and at least one of the objects is an abandoned mutex object. Otherwise, the return value minus <b>WAIT_ABANDONED_0</b> indicates the <i>pHandles</i> array index of an abandoned mutex object that caused the function to return. Ownership of the mutex object is granted to the calling thread, and the mutex is set to nonsignaled.<para>If the mutex was protecting persistent state information, you should check it for consistency.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WAIT_IO_COMPLETION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x000000C0L</term>
              </listheader>
            </list>
          </description>
          <description>The wait was ended by one or more user-mode <a href="https://docs.microsoft.com//windows/desktop/Sync/asynchronous-procedure-calls">asynchronous procedure calls</a> (APC) queued to the thread.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WAIT_TIMEOUT</b>
                </term>
              </listheader>
              <listheader>
                <term>258L</term>
              </listheader>
            </list>
          </description>
          <description>The time-out interval elapsed, but the conditions specified by the <i>dwFlags</i> and <i>dwWakeMask</i> parameters were not met.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WAIT_FAILED</b>
                </term>
              </listheader>
              <listheader>
                <term>(DWORD)0xFFFFFFFF</term>
              </listheader>
            </list>
          </description>
          <description>The function has failed. To get extended error information, call <see cref="GetLastError" />.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.NEXTRAWINPUTBLOCK">
    <summary>Retrieves the location of the next structure in an array of <see cref="RAWINPUT" /> structures.</summary>
    <param name="ptr">A pointer to a structure in an array of <see cref="RAWINPUT" /> structures.</param>
  </member>
  <member name="Windows.NotifyWinEvent">
    <summary>Signals the system that a predefined event occurred. If any client applications have registered a hook function for the event, the system calls the client's hook function.</summary>
    <param name="event">Specifies the event that occurred. This value must be one of the <a href="https://docs.microsoft.com//windows/desktop/WinAuto/event-constants">event constants</a>.</param>
    <param name="hwnd">Handle to the window that contains the object that generated the event.</param>
    <param name="idObject">Identifies the object that generated the event. This value is either one of the predefined <a href="https://docs.microsoft.com//windows/desktop/WinAuto/object-identifiers">object identifiers</a> or a custom object ID value.</param>
    <param name="idChild">Identifies whether the event was generated by an object or by a child element of the object. If this value is CHILDID_SELF, the event was generated by the object itself. If not CHILDID_SELF, this value is the child ID of the element that generated the event.</param>
  </member>
  <member name="Windows.OemKeyScan">
    <summary>Maps OEMASCII codes 0 through 0x0FF into the OEM scan codes and shift states. The function provides information that allows a program to send OEM text to another program by simulating keyboard input.</summary>
    <param name="wOemChar">The ASCII value of the OEM character.</param>
    <returns>
      <para>The low-order word of the return value contains the scan code of the OEM character, and the high-order word contains the shift state, which can be a combination of the following bits.</para>
      <list type="table">
        <listheader>
          <description>Bit</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Either SHIFT key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Either CTRL key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Either ALT key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>The Hankaku key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>16</term>
              </listheader>
            </list>
          </description>
          <description>Reserved (defined by the keyboard layout driver).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>32</term>
              </listheader>
            </list>
          </description>
          <description>Reserved (defined by the keyboard layout driver).</description>
        </listheader>
      </list> <para>If the character cannot be produced by a single keystroke using the current keyboard layout, the return value is –1.</para></returns>
  </member>
  <member name="Windows.OemToChar">
    <summary>
      <para>Translates a string from the OEM-defined character set into either an ANSI or a wide-character string.</para>
      <div>
        <b>Warning</b>  Do not use. See Security Considerations.</div>
    </summary>
    <param name="pSrc">A null-terminated string of characters from the OEM-defined character set.</param>
    <param name="pDst">The destination buffer, which receives the translated string. If the <b>OemToChar</b> function is being used as an ANSI function, the string can be translated in place by setting the<i>lpszDst</i> parameter to the same address as the<i>lpszSrc</i> parameter. This cannot be done if <b>OemToChar</b> is being used as a wide-character function.</param>
    <returns>The return value is always nonzero except when you pass the same address to<i>lpszSrc</i> and<i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and<see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.OemToCharA">
    <summary>
      <para>Translates a string from the OEM-defined character set into either an ANSI or a wide-character string.</para>
      <div>
        <b>Warning</b>  Do not use. See Security Considerations.</div>
    </summary>
    <param name="pSrc">A null-terminated string of characters from the OEM-defined character set.</param>
    <param name="pDst">The destination buffer, which receives the translated string. If the <b>OemToChar</b> function is being used as an ANSI function, the string can be translated in place by setting the<i>lpszDst</i> parameter to the same address as the<i>lpszSrc</i> parameter. This cannot be done if <b>OemToChar</b> is being used as a wide-character function.</param>
    <returns>The return value is always nonzero except when you pass the same address to<i>lpszSrc</i> and<i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and<see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.OemToCharW">
    <summary>
      <para>Translates a string from the OEM-defined character set into either an ANSI or a wide-character string.</para>
      <div>
        <b>Warning</b>  Do not use. See Security Considerations.</div>
    </summary>
    <param name="pSrc">A null-terminated string of characters from the OEM-defined character set.</param>
    <param name="pDst">The destination buffer, which receives the translated string. If the <b>OemToChar</b> function is being used as an ANSI function, the string can be translated in place by setting the<i>lpszDst</i> parameter to the same address as the<i>lpszSrc</i> parameter. This cannot be done if <b>OemToChar</b> is being used as a wide-character function.</param>
    <returns>The return value is always nonzero except when you pass the same address to<i>lpszSrc</i> and<i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and<see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.OemToCharBuff">
    <summary>Translates a specified number of characters in a string from the OEM-defined character set into either an ANSI or a wide-character string.</summary>
    <param name="lpszSrc">One or more characters from the OEM-defined character set.</param>
    <param name="lpszDst">The destination buffer, which receives the translated string. If the <b>OemToCharBuff</b> function is being used as an ANSI function, the string can be translated in place by setting the<i>lpszDst</i> parameter to the same address as the<i>lpszSrc</i> parameter. This cannot be done if the <b>OemToCharBuff</b> function is being used as a wide-character function.</param>
    <param name="cchDstLength">The number of characters to be translated in the buffer identified by the<i>lpszSrc</i> parameter.</param>
    <returns>The return value is always nonzero except when you pass the same address to<i>lpszSrc</i> and<i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and<see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.OemToCharBuffA">
    <summary>Translates a specified number of characters in a string from the OEM-defined character set into either an ANSI or a wide-character string.</summary>
    <param name="lpszSrc">One or more characters from the OEM-defined character set.</param>
    <param name="lpszDst">The destination buffer, which receives the translated string. If the <b>OemToCharBuff</b> function is being used as an ANSI function, the string can be translated in place by setting the<i>lpszDst</i> parameter to the same address as the<i>lpszSrc</i> parameter. This cannot be done if the <b>OemToCharBuff</b> function is being used as a wide-character function.</param>
    <param name="cchDstLength">The number of characters to be translated in the buffer identified by the<i>lpszSrc</i> parameter.</param>
    <returns>The return value is always nonzero except when you pass the same address to<i>lpszSrc</i> and<i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and<see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.OemToCharBuffW">
    <summary>Translates a specified number of characters in a string from the OEM-defined character set into either an ANSI or a wide-character string.</summary>
    <param name="lpszSrc">One or more characters from the OEM-defined character set.</param>
    <param name="lpszDst">The destination buffer, which receives the translated string. If the <b>OemToCharBuff</b> function is being used as an ANSI function, the string can be translated in place by setting the<i>lpszDst</i> parameter to the same address as the<i>lpszSrc</i> parameter. This cannot be done if the <b>OemToCharBuff</b> function is being used as a wide-character function.</param>
    <param name="cchDstLength">The number of characters to be translated in the buffer identified by the<i>lpszSrc</i> parameter.</param>
    <returns>The return value is always nonzero except when you pass the same address to<i>lpszSrc</i> and<i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and<see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.OemToCharBuff">
    <summary>Translates a specified number of characters in a string from the OEM-defined character set into either an ANSI or a wide-character string.</summary>
    <param name="lpszSrc">One or more characters from the OEM-defined character set.</param>
    <param name="lpszDst">The destination buffer, which receives the translated string. If the <b>OemToCharBuff</b> function is being used as an ANSI function, the string can be translated in place by setting the<i>lpszDst</i> parameter to the same address as the<i>lpszSrc</i> parameter. This cannot be done if the <b>OemToCharBuff</b> function is being used as a wide-character function.</param>
    <param name="cchDstLength">The number of characters to be translated in the buffer identified by the<i>lpszSrc</i> parameter.</param>
    <returns>The return value is always nonzero except when you pass the same address to<i>lpszSrc</i> and<i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and<see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.OemToCharBuffA">
    <summary>Translates a specified number of characters in a string from the OEM-defined character set into either an ANSI or a wide-character string.</summary>
    <param name="lpszSrc">One or more characters from the OEM-defined character set.</param>
    <param name="lpszDst">The destination buffer, which receives the translated string. If the <b>OemToCharBuff</b> function is being used as an ANSI function, the string can be translated in place by setting the<i>lpszDst</i> parameter to the same address as the<i>lpszSrc</i> parameter. This cannot be done if the <b>OemToCharBuff</b> function is being used as a wide-character function.</param>
    <param name="cchDstLength">The number of characters to be translated in the buffer identified by the<i>lpszSrc</i> parameter.</param>
    <returns>The return value is always nonzero except when you pass the same address to<i>lpszSrc</i> and<i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and<see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.OemToCharBuffW">
    <summary>Translates a specified number of characters in a string from the OEM-defined character set into either an ANSI or a wide-character string.</summary>
    <param name="lpszSrc">One or more characters from the OEM-defined character set.</param>
    <param name="lpszDst">The destination buffer, which receives the translated string. If the <b>OemToCharBuff</b> function is being used as an ANSI function, the string can be translated in place by setting the<i>lpszDst</i> parameter to the same address as the<i>lpszSrc</i> parameter. This cannot be done if the <b>OemToCharBuff</b> function is being used as a wide-character function.</param>
    <param name="cchDstLength">The number of characters to be translated in the buffer identified by the<i>lpszSrc</i> parameter.</param>
    <returns>The return value is always nonzero except when you pass the same address to<i>lpszSrc</i> and<i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and<see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.OemToChar">
    <summary>
      <para>Translates a string from the OEM-defined character set into either an ANSI or a wide-character string.</para>
      <div>
        <b>Warning</b>  Do not use. See Security Considerations.</div>
    </summary>
    <param name="pSrc">A null-terminated string of characters from the OEM-defined character set.</param>
    <param name="pDst">The destination buffer, which receives the translated string. If the <b>OemToChar</b> function is being used as an ANSI function, the string can be translated in place by setting the<i>lpszDst</i> parameter to the same address as the<i>lpszSrc</i> parameter. This cannot be done if <b>OemToChar</b> is being used as a wide-character function.</param>
    <returns>The return value is always nonzero except when you pass the same address to<i>lpszSrc</i> and<i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and<see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.OemToCharA">
    <summary>
      <para>Translates a string from the OEM-defined character set into either an ANSI or a wide-character string.</para>
      <div>
        <b>Warning</b>  Do not use. See Security Considerations.</div>
    </summary>
    <param name="pSrc">A null-terminated string of characters from the OEM-defined character set.</param>
    <param name="pDst">The destination buffer, which receives the translated string. If the <b>OemToChar</b> function is being used as an ANSI function, the string can be translated in place by setting the<i>lpszDst</i> parameter to the same address as the<i>lpszSrc</i> parameter. This cannot be done if <b>OemToChar</b> is being used as a wide-character function.</param>
    <returns>The return value is always nonzero except when you pass the same address to<i>lpszSrc</i> and<i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and<see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.OemToCharW">
    <summary>
      <para>Translates a string from the OEM-defined character set into either an ANSI or a wide-character string.</para>
      <div>
        <b>Warning</b>  Do not use. See Security Considerations.</div>
    </summary>
    <param name="pSrc">A null-terminated string of characters from the OEM-defined character set.</param>
    <param name="pDst">The destination buffer, which receives the translated string. If the <b>OemToChar</b> function is being used as an ANSI function, the string can be translated in place by setting the<i>lpszDst</i> parameter to the same address as the<i>lpszSrc</i> parameter. This cannot be done if <b>OemToChar</b> is being used as a wide-character function.</param>
    <returns>The return value is always nonzero except when you pass the same address to<i>lpszSrc</i> and<i>lpszDst</i> in the wide-character version of the function. In this case the function returns zero and<see cref="GetLastError" /> returns <b>ERROR_INVALID_ADDRESS</b>.</returns>
  </member>
  <member name="Windows.OffsetRect">
    <summary>The <b>OffsetRect</b> function moves the specified rectangle by the specified offsets.</summary>
    <param name="lprc">Pointer to a <see cref="RECT" /> structure that contains the logical coordinates of the rectangle to be moved.</param>
    <param name="dx">Specifies the amount to move the rectangle left or right. This parameter must be a negative value to move the rectangle to the left.</param>
    <param name="dy">Specifies the amount to move the rectangle up or down. This parameter must be a negative value to move the rectangle up.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.OpenClipboard">
    <summary>Opens the clipboard for examination and prevents other applications from modifying the clipboard content.</summary>
    <param name="hWndNewOwner">A handle to the window to be associated with the open clipboard. If this parameter is <b>NULL</b>, the open clipboard is associated with the current task.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.OpenDesktop">
    <summary>Opens the specified desktop object.</summary>
    <param name="lpszDesktop">
      <para>The name of the desktop to be opened. Desktop names are case-insensitive.</para>
      <para>This desktop must belong to the current window station.</para>
    </param>
    <param name="dwFlags">
      <para>This parameter can be zero or the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DF_ALLOWOTHERACCOUNTHOOK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Allows processes running in other accounts on the desktop to set hooks in this process.</description>
        </listheader>
      </list>
    </param>
    <param name="fInherit">If this value is <b>TRUE</b>, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</param>
    <param name="dwDesiredAccess">The access to the desktop. For a list of access rights, see<a href="https://docs.microsoft.com//windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the opened desktop. When you are finished using the handle, call the<see cref="CloseDesktop" /> function to close it.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.OpenDesktopA">
    <summary>Opens the specified desktop object.</summary>
    <param name="lpszDesktop">
      <para>The name of the desktop to be opened. Desktop names are case-insensitive.</para>
      <para>This desktop must belong to the current window station.</para>
    </param>
    <param name="dwFlags">
      <para>This parameter can be zero or the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DF_ALLOWOTHERACCOUNTHOOK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Allows processes running in other accounts on the desktop to set hooks in this process.</description>
        </listheader>
      </list>
    </param>
    <param name="fInherit">If this value is <b>TRUE</b>, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</param>
    <param name="dwDesiredAccess">The access to the desktop. For a list of access rights, see<a href="https://docs.microsoft.com//windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the opened desktop. When you are finished using the handle, call the<see cref="CloseDesktop" /> function to close it.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.OpenDesktopW">
    <summary>Opens the specified desktop object.</summary>
    <param name="lpszDesktop">
      <para>The name of the desktop to be opened. Desktop names are case-insensitive.</para>
      <para>This desktop must belong to the current window station.</para>
    </param>
    <param name="dwFlags">
      <para>This parameter can be zero or the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DF_ALLOWOTHERACCOUNTHOOK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Allows processes running in other accounts on the desktop to set hooks in this process.</description>
        </listheader>
      </list>
    </param>
    <param name="fInherit">If this value is <b>TRUE</b>, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</param>
    <param name="dwDesiredAccess">The access to the desktop. For a list of access rights, see<a href="https://docs.microsoft.com//windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the opened desktop. When you are finished using the handle, call the<see cref="CloseDesktop" /> function to close it.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.OpenDesktop">
    <summary>Opens the specified desktop object.</summary>
    <param name="lpszDesktop">
      <para>The name of the desktop to be opened. Desktop names are case-insensitive.</para>
      <para>This desktop must belong to the current window station.</para>
    </param>
    <param name="dwFlags">
      <para>This parameter can be zero or the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DF_ALLOWOTHERACCOUNTHOOK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Allows processes running in other accounts on the desktop to set hooks in this process.</description>
        </listheader>
      </list>
    </param>
    <param name="fInherit">If this value is <b>TRUE</b>, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</param>
    <param name="dwDesiredAccess">The access to the desktop. For a list of access rights, see<a href="https://docs.microsoft.com//windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the opened desktop. When you are finished using the handle, call the<see cref="CloseDesktop" /> function to close it.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.OpenDesktopA">
    <summary>Opens the specified desktop object.</summary>
    <param name="lpszDesktop">
      <para>The name of the desktop to be opened. Desktop names are case-insensitive.</para>
      <para>This desktop must belong to the current window station.</para>
    </param>
    <param name="dwFlags">
      <para>This parameter can be zero or the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DF_ALLOWOTHERACCOUNTHOOK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Allows processes running in other accounts on the desktop to set hooks in this process.</description>
        </listheader>
      </list>
    </param>
    <param name="fInherit">If this value is <b>TRUE</b>, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</param>
    <param name="dwDesiredAccess">The access to the desktop. For a list of access rights, see<a href="https://docs.microsoft.com//windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the opened desktop. When you are finished using the handle, call the<see cref="CloseDesktop" /> function to close it.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.OpenDesktopW">
    <summary>Opens the specified desktop object.</summary>
    <param name="lpszDesktop">
      <para>The name of the desktop to be opened. Desktop names are case-insensitive.</para>
      <para>This desktop must belong to the current window station.</para>
    </param>
    <param name="dwFlags">
      <para>This parameter can be zero or the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DF_ALLOWOTHERACCOUNTHOOK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Allows processes running in other accounts on the desktop to set hooks in this process.</description>
        </listheader>
      </list>
    </param>
    <param name="fInherit">If this value is <b>TRUE</b>, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</param>
    <param name="dwDesiredAccess">The access to the desktop. For a list of access rights, see<a href="https://docs.microsoft.com//windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the opened desktop. When you are finished using the handle, call the<see cref="CloseDesktop" /> function to close it.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.OpenIcon">
    <summary>Restores a minimized (iconic) window to its previous size and position; it then activates the window.</summary>
    <param name="hWnd">A handle to the window to be restored and activated.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.OpenInputDesktop">
    <summary>Opens the desktop that receives user input.</summary>
    <param name="dwFlags">
      <para>This parameter can be zero or the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DF_ALLOWOTHERACCOUNTHOOK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Allows processes running in other accounts on the desktop to set hooks in this process.</description>
        </listheader>
      </list>
    </param>
    <param name="fInherit">If this value is <b>TRUE</b>, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</param>
    <param name="dwDesiredAccess">The access to the desktop. For a list of access rights, see<a href="https://docs.microsoft.com//windows/desktop/winstation/desktop-security-and-access-rights">Desktop Security and Access Rights</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the desktop that receives user input. When you are finished using the handle, call the<see cref="CloseDesktop" /> function to close it.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.OpenWindowStation">
    <summary>Opens the specified window station.</summary>
    <param name="lpszWinSta">
      <para>The name of the window station to be opened. Window station names are case-insensitive.</para>
      <para>This window station must belong to the current session.</para>
    </param>
    <param name="fInherit">If this value is <b>TRUE</b>, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</param>
    <param name="dwDesiredAccess">The access to the window station. For a list of access rights, see<a href="https://docs.microsoft.com//windows/desktop/winstation/window-station-security-and-access-rights">Window Station Security and Access Rights</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the specified window station.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.OpenWindowStationA">
    <summary>Opens the specified window station.</summary>
    <param name="lpszWinSta">
      <para>The name of the window station to be opened. Window station names are case-insensitive.</para>
      <para>This window station must belong to the current session.</para>
    </param>
    <param name="fInherit">If this value is <b>TRUE</b>, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</param>
    <param name="dwDesiredAccess">The access to the window station. For a list of access rights, see<a href="https://docs.microsoft.com//windows/desktop/winstation/window-station-security-and-access-rights">Window Station Security and Access Rights</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the specified window station.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.OpenWindowStationW">
    <summary>Opens the specified window station.</summary>
    <param name="lpszWinSta">
      <para>The name of the window station to be opened. Window station names are case-insensitive.</para>
      <para>This window station must belong to the current session.</para>
    </param>
    <param name="fInherit">If this value is <b>TRUE</b>, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</param>
    <param name="dwDesiredAccess">The access to the window station. For a list of access rights, see<a href="https://docs.microsoft.com//windows/desktop/winstation/window-station-security-and-access-rights">Window Station Security and Access Rights</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the specified window station.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.OpenWindowStation">
    <summary>Opens the specified window station.</summary>
    <param name="lpszWinSta">
      <para>The name of the window station to be opened. Window station names are case-insensitive.</para>
      <para>This window station must belong to the current session.</para>
    </param>
    <param name="fInherit">If this value is <b>TRUE</b>, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</param>
    <param name="dwDesiredAccess">The access to the window station. For a list of access rights, see<a href="https://docs.microsoft.com//windows/desktop/winstation/window-station-security-and-access-rights">Window Station Security and Access Rights</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the specified window station.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.OpenWindowStationA">
    <summary>Opens the specified window station.</summary>
    <param name="lpszWinSta">
      <para>The name of the window station to be opened. Window station names are case-insensitive.</para>
      <para>This window station must belong to the current session.</para>
    </param>
    <param name="fInherit">If this value is <b>TRUE</b>, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</param>
    <param name="dwDesiredAccess">The access to the window station. For a list of access rights, see<a href="https://docs.microsoft.com//windows/desktop/winstation/window-station-security-and-access-rights">Window Station Security and Access Rights</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the specified window station.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.OpenWindowStationW">
    <summary>Opens the specified window station.</summary>
    <param name="lpszWinSta">
      <para>The name of the window station to be opened. Window station names are case-insensitive.</para>
      <para>This window station must belong to the current session.</para>
    </param>
    <param name="fInherit">If this value is <b>TRUE</b>, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</param>
    <param name="dwDesiredAccess">The access to the window station. For a list of access rights, see<a href="https://docs.microsoft.com//windows/desktop/winstation/window-station-security-and-access-rights">Window Station Security and Access Rights</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the specified window station.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.PackTouchHitTestingProximityEvaluation">
    <summary>Returns the proximity evaluation score and the adjusted touch-point coordinates as a packed value for the <a href="https://docs.microsoft.com//windows/win32/inputmsg/wm-touchhittesting">WM_TOUCHHITTESTING</a> callback.</summary>
    <param name="pHitTestingInput">The <see cref="TOUCH_HIT_TESTING_INPUT" /> structure that holds the data for the touch contact area.</param>
    <param name="pProximityEval">The <see cref="TOUCH_HIT_TESTING_PROXIMITY_EVALUATION" /> structure that holds the score and adjusted touch-point data that the <see cref="EvaluateProximityToPolygon" /> or <see cref="EvaluateProximityToRect" /> function returns.</param>
    <returns>If this function succeeds, it returns the <b>score</b> and <b>adjustedPoint</b> values from <see cref="TOUCH_HIT_TESTING_PROXIMITY_EVALUATION" /> as an LRESULT. To retrieve extended error information, call the <see cref="GetLastError" /> function.</returns>
  </member>
  <member name="Windows.PaintDesktop">
    <summary>The <b>PaintDesktop</b> function fills the clipping region in the specified device context with the desktop pattern or wallpaper. The function is provided primarily for shell desktops.</summary>
    <param name="hdc">Handle to the device context.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PeekMessage">
    <summary>Dispatches incoming nonqueued messages, checks the thread message queue for a posted message, and retrieves the message (if any exist).</summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that receives message information.</param>
    <param name="hWnd">
      <para>A handle to the window whose messages are to be retrieved. The window must belong to the current thread.</para>
      <para>If <i>hWnd</i> is <b>NULL</b>, <b>PeekMessage</b> retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b> (see the <see cref="MSG" /> structure). Therefore if hWnd is <b>NULL</b>, both window messages and thread messages are processed.</para>
      <para>If <i>hWnd</i> is -1, <b>PeekMessage</b> retrieves only messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b>, that is, thread messages as posted by <see cref="PostMessage" /> (when the <i>hWnd</i> parameter is <b>NULL</b>) or <see cref="PostThreadMessage" />.</para>
    </param>
    <param name="wMsgFilterMin">
      <para>The value of the first message in the range of messages to be examined. Use <b>WM_KEYFIRST</b> (0x0100) to specify the first keyboard message or <b>WM_MOUSEFIRST</b> (0x0200) to specify the first mouse message.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>PeekMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <param name="wMsgFilterMax">
      <para>The value of the last message in the range of messages to be examined. Use <b>WM_KEYLAST</b> to specify the last keyboard message or <b>WM_MOUSELAST</b> to specify the last mouse message.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>PeekMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <param name="wRemoveMsg">
      <para>Specifies how messages are to be handled. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PM_NOREMOVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000</term>
              </listheader>
            </list>
          </description>
          <description>Messages are not removed from the queue after processing by <b>PeekMessage</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PM_REMOVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Messages are removed from the queue after processing by <b>PeekMessage</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PM_NOYIELD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Prevents the system from releasing any thread that is waiting for the caller to go idle (see <see cref="WaitForInputIdle" />).<para>Combine this value with either <b>PM_NOREMOVE</b> or <b>PM_REMOVE</b>.</para></description>
        </listheader>
      </list> <para>By default, all message types are processed. To specify that only certain message should be processed, specify one or more of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_INPUT</b></term></listheader><listheader><term>(QS_INPUT &lt;&lt; 16)</term></listheader></list></description><description> Process mouse and keyboard messages.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_PAINT</b></term></listheader><listheader><term>(QS_PAINT &lt;&lt; 16)</term></listheader></list></description><description> Process paint messages.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_POSTMESSAGE</b></term></listheader><listheader><term>((QS_POSTMESSAGE | QS_HOTKEY | QS_TIMER) &lt;&lt; 16)</term></listheader></list></description><description> Process all posted messages, including timers and hotkeys.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_SENDMESSAGE</b></term></listheader><listheader><term>(QS_SENDMESSAGE &lt;&lt; 16)</term></listheader></list></description><description> Process all sent messages.</description></listheader></list></param>
    <returns>
      <para>If a message is available, the return value is nonzero.</para>
      <para>If no messages are available, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PeekMessageA">
    <summary>Dispatches incoming nonqueued messages, checks the thread message queue for a posted message, and retrieves the message (if any exist).</summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that receives message information.</param>
    <param name="hWnd">
      <para>A handle to the window whose messages are to be retrieved. The window must belong to the current thread.</para>
      <para>If <i>hWnd</i> is <b>NULL</b>, <b>PeekMessage</b> retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b> (see the <see cref="MSG" /> structure). Therefore if hWnd is <b>NULL</b>, both window messages and thread messages are processed.</para>
      <para>If <i>hWnd</i> is -1, <b>PeekMessage</b> retrieves only messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b>, that is, thread messages as posted by <see cref="PostMessage" /> (when the <i>hWnd</i> parameter is <b>NULL</b>) or <see cref="PostThreadMessage" />.</para>
    </param>
    <param name="wMsgFilterMin">
      <para>The value of the first message in the range of messages to be examined. Use <b>WM_KEYFIRST</b> (0x0100) to specify the first keyboard message or <b>WM_MOUSEFIRST</b> (0x0200) to specify the first mouse message.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>PeekMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <param name="wMsgFilterMax">
      <para>The value of the last message in the range of messages to be examined. Use <b>WM_KEYLAST</b> to specify the last keyboard message or <b>WM_MOUSELAST</b> to specify the last mouse message.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>PeekMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <param name="wRemoveMsg">
      <para>Specifies how messages are to be handled. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PM_NOREMOVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000</term>
              </listheader>
            </list>
          </description>
          <description>Messages are not removed from the queue after processing by <b>PeekMessage</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PM_REMOVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Messages are removed from the queue after processing by <b>PeekMessage</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PM_NOYIELD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Prevents the system from releasing any thread that is waiting for the caller to go idle (see <see cref="WaitForInputIdle" />).<para>Combine this value with either <b>PM_NOREMOVE</b> or <b>PM_REMOVE</b>.</para></description>
        </listheader>
      </list> <para>By default, all message types are processed. To specify that only certain message should be processed, specify one or more of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_INPUT</b></term></listheader><listheader><term>(QS_INPUT &lt;&lt; 16)</term></listheader></list></description><description> Process mouse and keyboard messages.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_PAINT</b></term></listheader><listheader><term>(QS_PAINT &lt;&lt; 16)</term></listheader></list></description><description> Process paint messages.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_POSTMESSAGE</b></term></listheader><listheader><term>((QS_POSTMESSAGE | QS_HOTKEY | QS_TIMER) &lt;&lt; 16)</term></listheader></list></description><description> Process all posted messages, including timers and hotkeys.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_SENDMESSAGE</b></term></listheader><listheader><term>(QS_SENDMESSAGE &lt;&lt; 16)</term></listheader></list></description><description> Process all sent messages.</description></listheader></list></param>
    <returns>
      <para>If a message is available, the return value is nonzero.</para>
      <para>If no messages are available, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PeekMessageW">
    <summary>Dispatches incoming nonqueued messages, checks the thread message queue for a posted message, and retrieves the message (if any exist).</summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that receives message information.</param>
    <param name="hWnd">
      <para>A handle to the window whose messages are to be retrieved. The window must belong to the current thread.</para>
      <para>If <i>hWnd</i> is <b>NULL</b>, <b>PeekMessage</b> retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b> (see the <see cref="MSG" /> structure). Therefore if hWnd is <b>NULL</b>, both window messages and thread messages are processed.</para>
      <para>If <i>hWnd</i> is -1, <b>PeekMessage</b> retrieves only messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b>, that is, thread messages as posted by <see cref="PostMessage" /> (when the <i>hWnd</i> parameter is <b>NULL</b>) or <see cref="PostThreadMessage" />.</para>
    </param>
    <param name="wMsgFilterMin">
      <para>The value of the first message in the range of messages to be examined. Use <b>WM_KEYFIRST</b> (0x0100) to specify the first keyboard message or <b>WM_MOUSEFIRST</b> (0x0200) to specify the first mouse message.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>PeekMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <param name="wMsgFilterMax">
      <para>The value of the last message in the range of messages to be examined. Use <b>WM_KEYLAST</b> to specify the last keyboard message or <b>WM_MOUSELAST</b> to specify the last mouse message.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>PeekMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <param name="wRemoveMsg">
      <para>Specifies how messages are to be handled. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PM_NOREMOVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000</term>
              </listheader>
            </list>
          </description>
          <description>Messages are not removed from the queue after processing by <b>PeekMessage</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PM_REMOVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Messages are removed from the queue after processing by <b>PeekMessage</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PM_NOYIELD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Prevents the system from releasing any thread that is waiting for the caller to go idle (see <see cref="WaitForInputIdle" />).<para>Combine this value with either <b>PM_NOREMOVE</b> or <b>PM_REMOVE</b>.</para></description>
        </listheader>
      </list> <para>By default, all message types are processed. To specify that only certain message should be processed, specify one or more of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_INPUT</b></term></listheader><listheader><term>(QS_INPUT &lt;&lt; 16)</term></listheader></list></description><description> Process mouse and keyboard messages.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_PAINT</b></term></listheader><listheader><term>(QS_PAINT &lt;&lt; 16)</term></listheader></list></description><description> Process paint messages.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_POSTMESSAGE</b></term></listheader><listheader><term>((QS_POSTMESSAGE | QS_HOTKEY | QS_TIMER) &lt;&lt; 16)</term></listheader></list></description><description> Process all posted messages, including timers and hotkeys.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_SENDMESSAGE</b></term></listheader><listheader><term>(QS_SENDMESSAGE &lt;&lt; 16)</term></listheader></list></description><description> Process all sent messages.</description></listheader></list></param>
    <returns>
      <para>If a message is available, the return value is nonzero.</para>
      <para>If no messages are available, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PeekMessage">
    <summary>Dispatches incoming nonqueued messages, checks the thread message queue for a posted message, and retrieves the message (if any exist).</summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that receives message information.</param>
    <param name="hWnd">
      <para>A handle to the window whose messages are to be retrieved. The window must belong to the current thread.</para>
      <para>If <i>hWnd</i> is <b>NULL</b>, <b>PeekMessage</b> retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b> (see the <see cref="MSG" /> structure). Therefore if hWnd is <b>NULL</b>, both window messages and thread messages are processed.</para>
      <para>If <i>hWnd</i> is -1, <b>PeekMessage</b> retrieves only messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b>, that is, thread messages as posted by <see cref="PostMessage" /> (when the <i>hWnd</i> parameter is <b>NULL</b>) or <see cref="PostThreadMessage" />.</para>
    </param>
    <param name="wMsgFilterMin">
      <para>The value of the first message in the range of messages to be examined. Use <b>WM_KEYFIRST</b> (0x0100) to specify the first keyboard message or <b>WM_MOUSEFIRST</b> (0x0200) to specify the first mouse message.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>PeekMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <param name="wMsgFilterMax">
      <para>The value of the last message in the range of messages to be examined. Use <b>WM_KEYLAST</b> to specify the last keyboard message or <b>WM_MOUSELAST</b> to specify the last mouse message.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>PeekMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <param name="wRemoveMsg">
      <para>Specifies how messages are to be handled. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PM_NOREMOVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000</term>
              </listheader>
            </list>
          </description>
          <description>Messages are not removed from the queue after processing by <b>PeekMessage</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PM_REMOVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Messages are removed from the queue after processing by <b>PeekMessage</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PM_NOYIELD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Prevents the system from releasing any thread that is waiting for the caller to go idle (see <see cref="WaitForInputIdle" />).<para>Combine this value with either <b>PM_NOREMOVE</b> or <b>PM_REMOVE</b>.</para></description>
        </listheader>
      </list> <para>By default, all message types are processed. To specify that only certain message should be processed, specify one or more of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_INPUT</b></term></listheader><listheader><term>(QS_INPUT &lt;&lt; 16)</term></listheader></list></description><description> Process mouse and keyboard messages.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_PAINT</b></term></listheader><listheader><term>(QS_PAINT &lt;&lt; 16)</term></listheader></list></description><description> Process paint messages.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_POSTMESSAGE</b></term></listheader><listheader><term>((QS_POSTMESSAGE | QS_HOTKEY | QS_TIMER) &lt;&lt; 16)</term></listheader></list></description><description> Process all posted messages, including timers and hotkeys.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_SENDMESSAGE</b></term></listheader><listheader><term>(QS_SENDMESSAGE &lt;&lt; 16)</term></listheader></list></description><description> Process all sent messages.</description></listheader></list></param>
    <returns>
      <para>If a message is available, the return value is nonzero.</para>
      <para>If no messages are available, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PeekMessageA">
    <summary>Dispatches incoming nonqueued messages, checks the thread message queue for a posted message, and retrieves the message (if any exist).</summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that receives message information.</param>
    <param name="hWnd">
      <para>A handle to the window whose messages are to be retrieved. The window must belong to the current thread.</para>
      <para>If <i>hWnd</i> is <b>NULL</b>, <b>PeekMessage</b> retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b> (see the <see cref="MSG" /> structure). Therefore if hWnd is <b>NULL</b>, both window messages and thread messages are processed.</para>
      <para>If <i>hWnd</i> is -1, <b>PeekMessage</b> retrieves only messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b>, that is, thread messages as posted by <see cref="PostMessage" /> (when the <i>hWnd</i> parameter is <b>NULL</b>) or <see cref="PostThreadMessage" />.</para>
    </param>
    <param name="wMsgFilterMin">
      <para>The value of the first message in the range of messages to be examined. Use <b>WM_KEYFIRST</b> (0x0100) to specify the first keyboard message or <b>WM_MOUSEFIRST</b> (0x0200) to specify the first mouse message.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>PeekMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <param name="wMsgFilterMax">
      <para>The value of the last message in the range of messages to be examined. Use <b>WM_KEYLAST</b> to specify the last keyboard message or <b>WM_MOUSELAST</b> to specify the last mouse message.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>PeekMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <param name="wRemoveMsg">
      <para>Specifies how messages are to be handled. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PM_NOREMOVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000</term>
              </listheader>
            </list>
          </description>
          <description>Messages are not removed from the queue after processing by <b>PeekMessage</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PM_REMOVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Messages are removed from the queue after processing by <b>PeekMessage</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PM_NOYIELD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Prevents the system from releasing any thread that is waiting for the caller to go idle (see <see cref="WaitForInputIdle" />).<para>Combine this value with either <b>PM_NOREMOVE</b> or <b>PM_REMOVE</b>.</para></description>
        </listheader>
      </list> <para>By default, all message types are processed. To specify that only certain message should be processed, specify one or more of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_INPUT</b></term></listheader><listheader><term>(QS_INPUT &lt;&lt; 16)</term></listheader></list></description><description> Process mouse and keyboard messages.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_PAINT</b></term></listheader><listheader><term>(QS_PAINT &lt;&lt; 16)</term></listheader></list></description><description> Process paint messages.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_POSTMESSAGE</b></term></listheader><listheader><term>((QS_POSTMESSAGE | QS_HOTKEY | QS_TIMER) &lt;&lt; 16)</term></listheader></list></description><description> Process all posted messages, including timers and hotkeys.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_SENDMESSAGE</b></term></listheader><listheader><term>(QS_SENDMESSAGE &lt;&lt; 16)</term></listheader></list></description><description> Process all sent messages.</description></listheader></list></param>
    <returns>
      <para>If a message is available, the return value is nonzero.</para>
      <para>If no messages are available, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PeekMessageW">
    <summary>Dispatches incoming nonqueued messages, checks the thread message queue for a posted message, and retrieves the message (if any exist).</summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that receives message information.</param>
    <param name="hWnd">
      <para>A handle to the window whose messages are to be retrieved. The window must belong to the current thread.</para>
      <para>If <i>hWnd</i> is <b>NULL</b>, <b>PeekMessage</b> retrieves messages for any window that belongs to the current thread, and any messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b> (see the <see cref="MSG" /> structure). Therefore if hWnd is <b>NULL</b>, both window messages and thread messages are processed.</para>
      <para>If <i>hWnd</i> is -1, <b>PeekMessage</b> retrieves only messages on the current thread's message queue whose <b>hwnd</b> value is <b>NULL</b>, that is, thread messages as posted by <see cref="PostMessage" /> (when the <i>hWnd</i> parameter is <b>NULL</b>) or <see cref="PostThreadMessage" />.</para>
    </param>
    <param name="wMsgFilterMin">
      <para>The value of the first message in the range of messages to be examined. Use <b>WM_KEYFIRST</b> (0x0100) to specify the first keyboard message or <b>WM_MOUSEFIRST</b> (0x0200) to specify the first mouse message.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>PeekMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <param name="wMsgFilterMax">
      <para>The value of the last message in the range of messages to be examined. Use <b>WM_KEYLAST</b> to specify the last keyboard message or <b>WM_MOUSELAST</b> to specify the last mouse message.</para>
      <para>If <i>wMsgFilterMin</i> and <i>wMsgFilterMax</i> are both zero, <b>PeekMessage</b> returns all available messages (that is, no range filtering is performed).</para>
    </param>
    <param name="wRemoveMsg">
      <para>Specifies how messages are to be handled. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PM_NOREMOVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000</term>
              </listheader>
            </list>
          </description>
          <description>Messages are not removed from the queue after processing by <b>PeekMessage</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PM_REMOVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Messages are removed from the queue after processing by <b>PeekMessage</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PM_NOYIELD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Prevents the system from releasing any thread that is waiting for the caller to go idle (see <see cref="WaitForInputIdle" />).<para>Combine this value with either <b>PM_NOREMOVE</b> or <b>PM_REMOVE</b>.</para></description>
        </listheader>
      </list> <para>By default, all message types are processed. To specify that only certain message should be processed, specify one or more of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_INPUT</b></term></listheader><listheader><term>(QS_INPUT &lt;&lt; 16)</term></listheader></list></description><description> Process mouse and keyboard messages.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_PAINT</b></term></listheader><listheader><term>(QS_PAINT &lt;&lt; 16)</term></listheader></list></description><description> Process paint messages.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_POSTMESSAGE</b></term></listheader><listheader><term>((QS_POSTMESSAGE | QS_HOTKEY | QS_TIMER) &lt;&lt; 16)</term></listheader></list></description><description> Process all posted messages, including timers and hotkeys.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>PM_QS_SENDMESSAGE</b></term></listheader><listheader><term>(QS_SENDMESSAGE &lt;&lt; 16)</term></listheader></list></description><description> Process all sent messages.</description></listheader></list></param>
    <returns>
      <para>If a message is available, the return value is nonzero.</para>
      <para>If no messages are available, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.PhysicalToLogicalPoint">
    <summary>Converts the physical coordinates of a point in a window to logical coordinates.</summary>
    <param name="hWnd">A handle to the window whose transform is used for the conversion. Top level windows are fully supported. In the case of child windows, only the area of overlap between the parent and the child window is converted.</param>
    <param name="lpPoint">A pointer to a <see cref="POINT" /> structure that specifies the physical/screen coordinates to be converted. The new logical coordinates are copied into this structure if the function succeeds.</param>
  </member>
  <member name="Windows.PhysicalToLogicalPointForPerMonitorDPI">
    <summary>Converts a point in a window from physical coordinates into logical coordinates, regardless of the dots per inch (dpi) awareness of the caller. For more information about DPI awareness levels, see <see cref="PROCESS_DPI_AWARENESS" />.</summary>
    <param name="hWnd">A handle to the window whose transform is used for the conversion.</param>
    <param name="lpPoint">A pointer to a <see cref="POINT" /> structure that specifies the physical/screen coordinates to be converted. The new logical coordinates are copied into this structure if the function succeeds.</param>
    <returns>Returns <b>TRUE</b> if successful, or <b>FALSE</b> otherwise.</returns>
  </member>
  <member name="Windows.POINTSTOPOINT">
    <summary>The <b>POINTSTOPOINT</b> macro copies the contents of a <see cref="POINTS" /> structure into a <see cref="POINT" /> structure.</summary>
    <param name="pt">The <see cref="POINT" /> structure to receive the contents of the <see cref="POINTS" /> structure.</param>
    <param name="pts">The <see cref="POINTS" /> structure to copy.</param>
  </member>
  <member name="Windows.POINTTOPOINTS">
    <summary>The <b>POINTTOPOINTS</b> macro converts a <see cref="POINT" /> structure to a <see cref="POINTS" /> structure.</summary>
    <param name="pt">The <see cref="POINT" /> structure to convert.</param>
  </member>
  <member name="Windows.PostMessage">
    <summary>
      <para>Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.</para>
      <para>To post a message in the message queue associated with a thread, use the <see cref="PostThreadMessage" /> function.</para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window whose window procedure is to receive the message. The following values have special meanings.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HWND_BROADCAST</b>
                </term>
              </listheader>
              <listheader>
                <term>((HWND)0xffff)</term>
              </listheader>
            </list>
          </description>
          <description>The message is posted to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows. The message is not posted to child windows.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>NULL</term>
              </listheader>
            </list>
          </description>
          <description>The function behaves like a call to <see cref="PostThreadMessage" /> with the <i>dwThreadId</i> parameter set to the identifier of the current thread.</description>
        </listheader>
      </list> <para>Starting with Windows Vista, message posting is subject to UIPI. The thread of a process can post messages only to message queues of threads in processes of lesser or equal integrity level.</para></param>
    <param name="Msg">
      <para>The message to be posted.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.PostMessageA">
    <summary>
      <para>Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.</para>
      <para>To post a message in the message queue associated with a thread, use the <see cref="PostThreadMessage" /> function.</para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window whose window procedure is to receive the message. The following values have special meanings.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HWND_BROADCAST</b>
                </term>
              </listheader>
              <listheader>
                <term>((HWND)0xffff)</term>
              </listheader>
            </list>
          </description>
          <description>The message is posted to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows. The message is not posted to child windows.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>NULL</term>
              </listheader>
            </list>
          </description>
          <description>The function behaves like a call to <see cref="PostThreadMessage" /> with the <i>dwThreadId</i> parameter set to the identifier of the current thread.</description>
        </listheader>
      </list> <para>Starting with Windows Vista, message posting is subject to UIPI. The thread of a process can post messages only to message queues of threads in processes of lesser or equal integrity level.</para></param>
    <param name="Msg">
      <para>The message to be posted.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.PostMessageW">
    <summary>
      <para>Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.</para>
      <para>To post a message in the message queue associated with a thread, use the <see cref="PostThreadMessage" /> function.</para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window whose window procedure is to receive the message. The following values have special meanings.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HWND_BROADCAST</b>
                </term>
              </listheader>
              <listheader>
                <term>((HWND)0xffff)</term>
              </listheader>
            </list>
          </description>
          <description>The message is posted to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows. The message is not posted to child windows.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>NULL</term>
              </listheader>
            </list>
          </description>
          <description>The function behaves like a call to <see cref="PostThreadMessage" /> with the <i>dwThreadId</i> parameter set to the identifier of the current thread.</description>
        </listheader>
      </list> <para>Starting with Windows Vista, message posting is subject to UIPI. The thread of a process can post messages only to message queues of threads in processes of lesser or equal integrity level.</para></param>
    <param name="Msg">
      <para>The message to be posted.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.PostMessage">
    <summary>
      <para>Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.</para>
      <para>To post a message in the message queue associated with a thread, use the <see cref="PostThreadMessage" /> function.</para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window whose window procedure is to receive the message. The following values have special meanings.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HWND_BROADCAST</b>
                </term>
              </listheader>
              <listheader>
                <term>((HWND)0xffff)</term>
              </listheader>
            </list>
          </description>
          <description>The message is posted to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows. The message is not posted to child windows.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>NULL</term>
              </listheader>
            </list>
          </description>
          <description>The function behaves like a call to <see cref="PostThreadMessage" /> with the <i>dwThreadId</i> parameter set to the identifier of the current thread.</description>
        </listheader>
      </list> <para>Starting with Windows Vista, message posting is subject to UIPI. The thread of a process can post messages only to message queues of threads in processes of lesser or equal integrity level.</para></param>
    <param name="Msg">
      <para>The message to be posted.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.PostMessageA">
    <summary>
      <para>Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.</para>
      <para>To post a message in the message queue associated with a thread, use the <see cref="PostThreadMessage" /> function.</para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window whose window procedure is to receive the message. The following values have special meanings.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HWND_BROADCAST</b>
                </term>
              </listheader>
              <listheader>
                <term>((HWND)0xffff)</term>
              </listheader>
            </list>
          </description>
          <description>The message is posted to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows. The message is not posted to child windows.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>NULL</term>
              </listheader>
            </list>
          </description>
          <description>The function behaves like a call to <see cref="PostThreadMessage" /> with the <i>dwThreadId</i> parameter set to the identifier of the current thread.</description>
        </listheader>
      </list> <para>Starting with Windows Vista, message posting is subject to UIPI. The thread of a process can post messages only to message queues of threads in processes of lesser or equal integrity level.</para></param>
    <param name="Msg">
      <para>The message to be posted.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.PostMessageW">
    <summary>
      <para>Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.</para>
      <para>To post a message in the message queue associated with a thread, use the <see cref="PostThreadMessage" /> function.</para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window whose window procedure is to receive the message. The following values have special meanings.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HWND_BROADCAST</b>
                </term>
              </listheader>
              <listheader>
                <term>((HWND)0xffff)</term>
              </listheader>
            </list>
          </description>
          <description>The message is posted to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows. The message is not posted to child windows.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>NULL</term>
              </listheader>
            </list>
          </description>
          <description>The function behaves like a call to <see cref="PostThreadMessage" /> with the <i>dwThreadId</i> parameter set to the identifier of the current thread.</description>
        </listheader>
      </list> <para>Starting with Windows Vista, message posting is subject to UIPI. The thread of a process can post messages only to message queues of threads in processes of lesser or equal integrity level.</para></param>
    <param name="Msg">
      <para>The message to be posted.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.PostQuitMessage">
    <summary>Indicates to the system that a thread has made a request to terminate (quit). It is typically used in response to a <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-destroy">WM_DESTROY</a> message.</summary>
    <param name="nExitCode">The application exit code. This value is used as the <i>wParam</i> parameter of the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-quit">WM_QUIT</a> message.</param>
  </member>
  <member name="Windows.PostThreadMessage">
    <summary>Posts a message to the message queue of the specified thread. It returns without waiting for the thread to process the message.</summary>
    <param name="idThread">
      <para>The identifier of the thread to which the message is to be posted.</para>
      <para>The function fails if the specified thread does not have a message queue. The system creates a thread's message queue when the thread makes its first call to one of the User or GDI functions. For more information, see the Remarks section.</para>
      <para>Message posting is subject to UIPI. The thread of a process can post messages only to posted-message queues of threads in processes of lesser or equal integrity level.</para>
      <para>This thread must have the <b>SE_TCB_NAME</b> privilege to post a message to a thread that belongs to a process with the same locally unique identifier (LUID) but is in a different desktop. Otherwise, the function fails and returns <b>ERROR_INVALID_THREAD_ID</b>.</para>
      <para>This thread must either belong to the same desktop as the calling thread or to a process with the same LUID. Otherwise, the function fails and returns <b>ERROR_INVALID_THREAD_ID</b>.</para>
    </param>
    <param name="Msg">The type of message to be posted.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />. <b>GetLastError</b> returns <b>ERROR_INVALID_THREAD_ID</b> if <i>idThread</i> is not a valid thread identifier, or if the thread specified by <i>idThread</i> does not have a message queue. <b>GetLastError</b> returns <b>ERROR_NOT_ENOUGH_QUOTA</b> when the message limit is hit.</para>
    </returns>
  </member>
  <member name="Windows.PostThreadMessageA">
    <summary>Posts a message to the message queue of the specified thread. It returns without waiting for the thread to process the message.</summary>
    <param name="idThread">
      <para>The identifier of the thread to which the message is to be posted.</para>
      <para>The function fails if the specified thread does not have a message queue. The system creates a thread's message queue when the thread makes its first call to one of the User or GDI functions. For more information, see the Remarks section.</para>
      <para>Message posting is subject to UIPI. The thread of a process can post messages only to posted-message queues of threads in processes of lesser or equal integrity level.</para>
      <para>This thread must have the <b>SE_TCB_NAME</b> privilege to post a message to a thread that belongs to a process with the same locally unique identifier (LUID) but is in a different desktop. Otherwise, the function fails and returns <b>ERROR_INVALID_THREAD_ID</b>.</para>
      <para>This thread must either belong to the same desktop as the calling thread or to a process with the same LUID. Otherwise, the function fails and returns <b>ERROR_INVALID_THREAD_ID</b>.</para>
    </param>
    <param name="Msg">The type of message to be posted.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />. <b>GetLastError</b> returns <b>ERROR_INVALID_THREAD_ID</b> if <i>idThread</i> is not a valid thread identifier, or if the thread specified by <i>idThread</i> does not have a message queue. <b>GetLastError</b> returns <b>ERROR_NOT_ENOUGH_QUOTA</b> when the message limit is hit.</para>
    </returns>
  </member>
  <member name="Windows.PostThreadMessageW">
    <summary>Posts a message to the message queue of the specified thread. It returns without waiting for the thread to process the message.</summary>
    <param name="idThread">
      <para>The identifier of the thread to which the message is to be posted.</para>
      <para>The function fails if the specified thread does not have a message queue. The system creates a thread's message queue when the thread makes its first call to one of the User or GDI functions. For more information, see the Remarks section.</para>
      <para>Message posting is subject to UIPI. The thread of a process can post messages only to posted-message queues of threads in processes of lesser or equal integrity level.</para>
      <para>This thread must have the <b>SE_TCB_NAME</b> privilege to post a message to a thread that belongs to a process with the same locally unique identifier (LUID) but is in a different desktop. Otherwise, the function fails and returns <b>ERROR_INVALID_THREAD_ID</b>.</para>
      <para>This thread must either belong to the same desktop as the calling thread or to a process with the same LUID. Otherwise, the function fails and returns <b>ERROR_INVALID_THREAD_ID</b>.</para>
    </param>
    <param name="Msg">The type of message to be posted.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />. <b>GetLastError</b> returns <b>ERROR_INVALID_THREAD_ID</b> if <i>idThread</i> is not a valid thread identifier, or if the thread specified by <i>idThread</i> does not have a message queue. <b>GetLastError</b> returns <b>ERROR_NOT_ENOUGH_QUOTA</b> when the message limit is hit.</para>
    </returns>
  </member>
  <member name="Windows.PostThreadMessage">
    <summary>Posts a message to the message queue of the specified thread. It returns without waiting for the thread to process the message.</summary>
    <param name="idThread">
      <para>The identifier of the thread to which the message is to be posted.</para>
      <para>The function fails if the specified thread does not have a message queue. The system creates a thread's message queue when the thread makes its first call to one of the User or GDI functions. For more information, see the Remarks section.</para>
      <para>Message posting is subject to UIPI. The thread of a process can post messages only to posted-message queues of threads in processes of lesser or equal integrity level.</para>
      <para>This thread must have the <b>SE_TCB_NAME</b> privilege to post a message to a thread that belongs to a process with the same locally unique identifier (LUID) but is in a different desktop. Otherwise, the function fails and returns <b>ERROR_INVALID_THREAD_ID</b>.</para>
      <para>This thread must either belong to the same desktop as the calling thread or to a process with the same LUID. Otherwise, the function fails and returns <b>ERROR_INVALID_THREAD_ID</b>.</para>
    </param>
    <param name="Msg">The type of message to be posted.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />. <b>GetLastError</b> returns <b>ERROR_INVALID_THREAD_ID</b> if <i>idThread</i> is not a valid thread identifier, or if the thread specified by <i>idThread</i> does not have a message queue. <b>GetLastError</b> returns <b>ERROR_NOT_ENOUGH_QUOTA</b> when the message limit is hit.</para>
    </returns>
  </member>
  <member name="Windows.PostThreadMessageA">
    <summary>Posts a message to the message queue of the specified thread. It returns without waiting for the thread to process the message.</summary>
    <param name="idThread">
      <para>The identifier of the thread to which the message is to be posted.</para>
      <para>The function fails if the specified thread does not have a message queue. The system creates a thread's message queue when the thread makes its first call to one of the User or GDI functions. For more information, see the Remarks section.</para>
      <para>Message posting is subject to UIPI. The thread of a process can post messages only to posted-message queues of threads in processes of lesser or equal integrity level.</para>
      <para>This thread must have the <b>SE_TCB_NAME</b> privilege to post a message to a thread that belongs to a process with the same locally unique identifier (LUID) but is in a different desktop. Otherwise, the function fails and returns <b>ERROR_INVALID_THREAD_ID</b>.</para>
      <para>This thread must either belong to the same desktop as the calling thread or to a process with the same LUID. Otherwise, the function fails and returns <b>ERROR_INVALID_THREAD_ID</b>.</para>
    </param>
    <param name="Msg">The type of message to be posted.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />. <b>GetLastError</b> returns <b>ERROR_INVALID_THREAD_ID</b> if <i>idThread</i> is not a valid thread identifier, or if the thread specified by <i>idThread</i> does not have a message queue. <b>GetLastError</b> returns <b>ERROR_NOT_ENOUGH_QUOTA</b> when the message limit is hit.</para>
    </returns>
  </member>
  <member name="Windows.PostThreadMessageW">
    <summary>Posts a message to the message queue of the specified thread. It returns without waiting for the thread to process the message.</summary>
    <param name="idThread">
      <para>The identifier of the thread to which the message is to be posted.</para>
      <para>The function fails if the specified thread does not have a message queue. The system creates a thread's message queue when the thread makes its first call to one of the User or GDI functions. For more information, see the Remarks section.</para>
      <para>Message posting is subject to UIPI. The thread of a process can post messages only to posted-message queues of threads in processes of lesser or equal integrity level.</para>
      <para>This thread must have the <b>SE_TCB_NAME</b> privilege to post a message to a thread that belongs to a process with the same locally unique identifier (LUID) but is in a different desktop. Otherwise, the function fails and returns <b>ERROR_INVALID_THREAD_ID</b>.</para>
      <para>This thread must either belong to the same desktop as the calling thread or to a process with the same LUID. Otherwise, the function fails and returns <b>ERROR_INVALID_THREAD_ID</b>.</para>
    </param>
    <param name="Msg">The type of message to be posted.</param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />. <b>GetLastError</b> returns <b>ERROR_INVALID_THREAD_ID</b> if <i>idThread</i> is not a valid thread identifier, or if the thread specified by <i>idThread</i> does not have a message queue. <b>GetLastError</b> returns <b>ERROR_NOT_ENOUGH_QUOTA</b> when the message limit is hit.</para>
    </returns>
  </member>
  <member name="Windows.PrintWindow">
    <summary>The <b>PrintWindow</b> function copies a visual window into the specified device context (DC), typically a printer DC.</summary>
    <param name="hwnd">A handle to the window that will be copied.</param>
    <param name="hdcBlt">A handle to the device context.</param>
    <param name="nFlags">
      <para>The drawing options. It can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PW_CLIENTONLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Only the client area of the window is copied to <i>hdcBlt</i>. By default, the entire window is copied.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, it returns a nonzero value.</para>
      <para>If the function fails, it returns zero.</para>
    </returns>
  </member>
  <member name="Windows.PtInRect">
    <summary>The <b>PtInRect</b> function determines whether the specified point lies within the specified rectangle. A point is within a rectangle if it lies on the left or top side or is within all four sides. A point on the right or bottom side is considered outside the rectangle.</summary>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that contains the specified rectangle.</param>
    <param name="pt">A <see cref="POINT" /> structure that contains the specified point.</param>
    <returns>
      <para>If the specified point lies within the rectangle, the return value is nonzero.</para>
      <para>If the specified point does not lie within the rectangle, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.QueryDisplayConfig">
    <summary>The <b>QueryDisplayConfig</b> function retrieves information about all possible display paths for all display devices, or views, in the current setting.</summary>
    <param name="flags">
      <para>The type of information to retrieve. The value for the <i>Flags</i> parameter must use one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>QDC_ALL_PATHS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Returns all the possible path combinations of sources to targets.<blockquote>[!NOTE] In the case of any temporary modes, the QDC_ALL_PATHS setting means the mode data returned may not be the same as that which is stored in the persistence database.</blockquote><blockquote>[!NOTE] This flag may be very expensive to compute. It's not recommended to use this flag unless the caller is trying to determine the set of valid connections between sources and targets.</blockquote></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>QDC_ONLY_ACTIVE_PATHS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Returns currently active paths only. <blockquote>[!NOTE] In the case of any temporary modes, the QDC_ONLY_ACTIVE_PATHS setting means the mode data returned may not be the same as that which is stored in the persistence database.</blockquote></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>QDC_DATABASE_CURRENT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Returns active paths as defined in the CCD database for the currently connected displays.</description>
        </listheader>
      </list>
      <para>The <i>Flags</i> parameter may also be bitwise OR'ed with zero or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>QDC_VIRTUAL_MODE_AWARE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>This flag should be bitwise OR'ed with other flags to indicate that the caller is aware of virtual mode support.<para>Supported starting in Windows 10.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>QDC_INCLUDE_HMD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>This flag should be bitwise OR'ed with QDC_ONLY_ACTIVE_PATHS to indicate that the caller would like to include head-mounted displays (HMDs) in the list of active paths. See Remarks for more information.<para>Supported starting in Windows 10 1703 Creators Update.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>QDC_VIRTUAL_REFRESH_RATE_AWARE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>This flag should be bitwise OR'ed with other flags to indicate that the caller is aware of virtual refresh rate support.<para>Supported starting in Windows 11.</para></description>
        </listheader>
      </list>
    </param>
    <param name="numPathArrayElements">Pointer to a variable that contains the number of elements in <i>pPathInfoArray</i>. This parameter cannot be <b>NULL</b>. If <b>QueryDisplayConfig</b> returns ERROR_SUCCESS, <i>pNumPathInfoElements</i> is updated with the number of valid entries in <i>pPathInfoArray</i>.</param>
    <param name="pathArray">Pointer to a variable that contains an array of <see cref="DISPLAYCONFIG_PATH_INFO" /> elements. Each element in <i>pPathInfoArray</i> describes a single path from a source to a target. The source and target mode information indexes are only valid in combination with the <i>pmodeInfoArray</i> tables that are returned for the API at the same time. This parameter cannot be <b>NULL</b>. The <i>pPathInfoArray</i> is always returned in path priority order. For more information about path priority order, see <a href="https://docs.microsoft.com//windows-hardware/drivers/display/path-priority-order">Path Priority Order</a>.</param>
    <param name="numModeInfoArrayElements">Pointer to a variable that specifies the number in element of the mode information table. This parameter cannot be <b>NULL</b>. If <b>QueryDisplayConfig</b> returns ERROR_SUCCESS, <i>pNumModeInfoArrayElements</i> is updated with the number of valid entries in <i>pModeInfoArray</i>.</param>
    <param name="modeInfoArray">Pointer to a variable that contains an array of <see cref="DISPLAYCONFIG_MODE_INFO" /> elements. This parameter cannot be <b>NULL</b>.</param>
    <param name="currentTopologyId">
      <para>Pointer to a variable that receives the identifier of the currently active topology in the CCD database. For a list of possible values, see the <see cref="DISPLAYCONFIG_TOPOLOGY_ID" /> enumerated type.</para>
      <para>The <i>pCurrentTopologyId</i> parameter is only set when the <i>Flags</i> parameter value is QDC_DATABASE_CURRENT.</para>
      <para>If the <i>Flags</i> parameter value is set to QDC_DATABASE_CURRENT, the <i>pCurrentTopologyId</i> parameter must not be <b>NULL</b>. If the <i>Flags</i> parameter value is not set to QDC_DATABASE_CURRENT, the <i>pCurrentTopologyId</i> parameter value must be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>The function returns one of the following return codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SUCCESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The combination of parameters and flags that are specified is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system is not running a graphics driver that was written according to the <a href="https://docs.microsoft.com//windows-hardware/drivers/display/windows-vista-display-driver-model-design-guide">Windows Display Driver Model (WDDM)</a>. The function is only supported on a system with a WDDM driver running.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have access to the console session. This error occurs if the calling process does not have access to the current desktop or is running on a remote session.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_GEN_FAILURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An unspecified error occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The supplied path and mode buffer are too small.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.RealChildWindowFromPoint">
    <summary>Retrieves a handle to the child window at the specified point. The search is restricted to immediate child windows; grandchildren and deeper descendant windows are not searched.</summary>
    <param name="hwndParent">A handle to the window whose child is to be retrieved.</param>
    <param name="ptParentClientCoords">A <see cref="POINT" /> structure that defines the client coordinates of the point to be checked.</param>
    <returns>The return value is a handle to the child window that contains the specified point.</returns>
  </member>
  <member name="Windows.RealGetWindowClass">
    <summary>Retrieves a string that specifies the window type.</summary>
    <param name="hwnd">A handle to the window whose type will be retrieved.</param>
    <param name="ptszClassName">A pointer to a string that receives the window type.</param>
    <param name="cchClassNameMax">The length, in characters, of the buffer pointed to by the <i>pszType</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters copied to the specified buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RealGetWindowClassA">
    <summary>Retrieves a string that specifies the window type.</summary>
    <param name="hwnd">A handle to the window whose type will be retrieved.</param>
    <param name="ptszClassName">A pointer to a string that receives the window type.</param>
    <param name="cchClassNameMax">The length, in characters, of the buffer pointed to by the <i>pszType</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters copied to the specified buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RealGetWindowClass">
    <summary>Retrieves a string that specifies the window type.</summary>
    <param name="hwnd">A handle to the window whose type will be retrieved.</param>
    <param name="ptszClassName">A pointer to a string that receives the window type.</param>
    <param name="cchClassNameMax">The length, in characters, of the buffer pointed to by the <i>pszType</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters copied to the specified buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RealGetWindowClassW">
    <summary>Retrieves a string that specifies the window type.</summary>
    <param name="hwnd">A handle to the window whose type will be retrieved.</param>
    <param name="ptszClassName">A pointer to a string that receives the window type.</param>
    <param name="cchClassNameMax">The length, in characters, of the buffer pointed to by the <i>pszType</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters copied to the specified buffer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RedrawWindow">
    <summary>The <b>RedrawWindow</b> function updates the specified rectangle or region in a window's client area.</summary>
    <param name="hWnd">A handle to the window to be redrawn. If this parameter is <b>NULL</b>, the desktop window is updated.</param>
    <param name="lprcUpdate">A pointer to a <see cref="RECT" /> structure containing the coordinates, in device units, of the update rectangle. This parameter is ignored if the <i>hrgnUpdate</i> parameter identifies a region.</param>
    <param name="hrgnUpdate">A handle to the update region. If both the <i>hrgnUpdate</i> and <i>lprcUpdate</i> parameters are <b>NULL</b>, the entire client area is added to the update region.</param>
    <param name="flags">
      <para>One or more redraw flags. This parameter can be used to invalidate or validate a window, control repainting, and control which windows are affected by <b>RedrawWindow</b>.</para>
      <para>The following flags are used to invalidate the window.</para>
      <list type="table">
        <listheader>
          <description>Flag (invalidation)</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RDW_ERASE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Causes the window to receive a <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-erasebkgnd">WM_ERASEBKGND</a> message when the window is repainted. The RDW_INVALIDATE flag must also be specified; otherwise, RDW_ERASE has no effect.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RDW_FRAME</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Causes any part of the nonclient area of the window that intersects the update region to receive a <a href="https://docs.microsoft.com//windows/desktop/gdi/wm-ncpaint">WM_NCPAINT</a> message. The RDW_INVALIDATE flag must also be specified; otherwise, RDW_FRAME has no effect. The <b>WM_NCPAINT</b> message is typically not sent during the execution of <b>RedrawWindow</b> unless either RDW_UPDATENOW or RDW_ERASENOW is specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RDW_INTERNALPAINT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Causes a <a href="https://docs.microsoft.com//windows/desktop/gdi/wm-paint">WM_PAINT</a> message to be posted to the window regardless of whether any portion of the window is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RDW_INVALIDATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalidates <i>lprcUpdate</i> or <i>hrgnUpdate</i> (only one may be non-<b>NULL</b>). If both are <b>NULL</b>, the entire window is invalidated.</description>
        </listheader>
      </list> <para>The following flags are used to validate the window.</para><list type="table"><listheader><description>Flag (validation)</description><description>Description</description></listheader><listheader><description><list type="bullet"><listheader><term><b>RDW_NOERASE</b></term></listheader></list></description><description>Suppresses any pending <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-erasebkgnd">WM_ERASEBKGND</a> messages.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>RDW_NOFRAME</b></term></listheader></list></description><description>Suppresses any pending <a href="https://docs.microsoft.com//windows/desktop/gdi/wm-ncpaint">WM_NCPAINT</a> messages. This flag must be used with RDW_VALIDATE and is typically used with RDW_NOCHILDREN. RDW_NOFRAME should be used with care, as it could cause parts of a window to be painted improperly.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>RDW_NOINTERNALPAINT</b></term></listheader></list></description><description>Suppresses any pending internal <a href="https://docs.microsoft.com//windows/desktop/gdi/wm-paint">WM_PAINT</a> messages. This flag does not affect <b>WM_PAINT</b> messages resulting from a non-<b>NULL</b> update area.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>RDW_VALIDATE</b></term></listheader></list></description><description>Validates <i>lprcUpdate</i> or <i>hrgnUpdate</i> (only one may be non-<b>NULL</b>). If both are <b>NULL</b>, the entire window is validated. This flag does not affect internal <a href="https://docs.microsoft.com//windows/desktop/gdi/wm-paint">WM_PAINT</a> messages.</description></listheader></list> <para>The following flags control when repainting occurs. <b>RedrawWindow</b> will not repaint unless one of these flags is specified.</para><list type="table"><listheader><description>Flag</description><description>Description</description></listheader><listheader><description><list type="bullet"><listheader><term><b>RDW_ERASENOW</b></term></listheader></list></description><description>Causes the affected windows (as specified by the RDW_ALLCHILDREN and RDW_NOCHILDREN flags) to receive <a href="https://docs.microsoft.com//windows/desktop/gdi/wm-ncpaint">WM_NCPAINT</a> and <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-erasebkgnd">WM_ERASEBKGND</a> messages, if necessary, before the function returns. <a href="https://docs.microsoft.com//windows/desktop/gdi/wm-paint">WM_PAINT</a> messages are received at the ordinary time.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>RDW_UPDATENOW</b></term></listheader></list></description><description>Causes the affected windows (as specified by the RDW_ALLCHILDREN and RDW_NOCHILDREN flags) to receive <a href="https://docs.microsoft.com//windows/desktop/gdi/wm-ncpaint">WM_NCPAINT</a>, <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-erasebkgnd">WM_ERASEBKGND</a>, and <a href="https://docs.microsoft.com//windows/desktop/gdi/wm-paint">WM_PAINT</a> messages, if necessary, before the function returns.</description></listheader></list> <para>By default, the windows affected by <b>RedrawWindow</b> depend on whether the specified window has the WS_CLIPCHILDREN style. Child windows that are not the WS_CLIPCHILDREN style are unaffected; non-WS_CLIPCHILDREN windows are recursively validated or invalidated until a WS_CLIPCHILDREN window is encountered. The following flags control which windows are affected by the <b>RedrawWindow</b> function.</para><list type="table"><listheader><description>Flag</description><description>Description</description></listheader><listheader><description><list type="bullet"><listheader><term><b>RDW_ALLCHILDREN</b></term></listheader></list></description><description>Includes child windows, if any, in the repainting operation.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>RDW_NOCHILDREN</b></term></listheader></list></description><description>Excludes child windows, if any, from the repainting operation.</description></listheader></list></param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.RegisterClass">
    <summary>
      <para>Registers a window class for subsequent use in calls to the <see cref="CreateWindow" /> or <see cref="CreateWindowEx" /> function.</para>
      <div>
        <b>Note</b>  The <b>RegisterClass</b> function has been superseded by the <see cref="RegisterClassEx" /> function. You can still use <b>RegisterClass</b>, however, if you do not need to set the class small icon.</div>
    </summary>
    <param name="lpWndClass">A pointer to a <see cref="WNDCLASS" /> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</param>
    <returns>
      <para>If the function succeeds, the return value is a class atom that uniquely identifies the class being registered. This atom can only be used by the <see cref="CreateWindow" />, <see cref="CreateWindowEx" />, <see cref="GetClassInfo" />, <see cref="GetClassInfoEx" />, <see cref="FindWindow" />, <see cref="FindWindowEx" />, and <see cref="UnregisterClass" /> functions and the <b>IActiveIMMap.FilterClientWindows</b> method.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterClassA">
    <summary>
      <para>Registers a window class for subsequent use in calls to the <see cref="CreateWindow" /> or <see cref="CreateWindowEx" /> function.</para>
      <div>
        <b>Note</b>  The <b>RegisterClass</b> function has been superseded by the <see cref="RegisterClassEx" /> function. You can still use <b>RegisterClass</b>, however, if you do not need to set the class small icon.</div>
    </summary>
    <param name="lpWndClass">A pointer to a <see cref="WNDCLASS" /> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</param>
    <returns>
      <para>If the function succeeds, the return value is a class atom that uniquely identifies the class being registered. This atom can only be used by the <see cref="CreateWindow" />, <see cref="CreateWindowEx" />, <see cref="GetClassInfo" />, <see cref="GetClassInfoEx" />, <see cref="FindWindow" />, <see cref="FindWindowEx" />, and <see cref="UnregisterClass" /> functions and the <b>IActiveIMMap.FilterClientWindows</b> method.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterClassW">
    <summary>
      <para>Registers a window class for subsequent use in calls to the <see cref="CreateWindow" /> or <see cref="CreateWindowEx" /> function.</para>
      <div>
        <b>Note</b>  The <b>RegisterClass</b> function has been superseded by the <see cref="RegisterClassEx" /> function. You can still use <b>RegisterClass</b>, however, if you do not need to set the class small icon.</div>
    </summary>
    <param name="lpWndClass">A pointer to a <see cref="WNDCLASS" /> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</param>
    <returns>
      <para>If the function succeeds, the return value is a class atom that uniquely identifies the class being registered. This atom can only be used by the <see cref="CreateWindow" />, <see cref="CreateWindowEx" />, <see cref="GetClassInfo" />, <see cref="GetClassInfoEx" />, <see cref="FindWindow" />, <see cref="FindWindowEx" />, and <see cref="UnregisterClass" /> functions and the <b>IActiveIMMap.FilterClientWindows</b> method.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterClassEx">
    <summary>Registers a window class for subsequent use in calls to the <see cref="CreateWindow" /> or <see cref="CreateWindowEx" /> function.</summary>
    <param name="unnamedParam1">A pointer to a <see cref="WNDCLASSEX" /> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</param>
    <returns>
      <para>If the function succeeds, the return value is a class atom that uniquely identifies the class being registered. This atom can only be used by the <see cref="CreateWindow" />, <see cref="CreateWindowEx" />, <see cref="GetClassInfo" />, <see cref="GetClassInfoEx" />, <see cref="FindWindow" />, <see cref="FindWindowEx" />, and <see cref="UnregisterClass" /> functions and the <b>IActiveIMMap.FilterClientWindows</b> method.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterClassExA">
    <summary>Registers a window class for subsequent use in calls to the <see cref="CreateWindow" /> or <see cref="CreateWindowEx" /> function.</summary>
    <param name="unnamedParam1">A pointer to a <see cref="WNDCLASSEX" /> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</param>
    <returns>
      <para>If the function succeeds, the return value is a class atom that uniquely identifies the class being registered. This atom can only be used by the <see cref="CreateWindow" />, <see cref="CreateWindowEx" />, <see cref="GetClassInfo" />, <see cref="GetClassInfoEx" />, <see cref="FindWindow" />, <see cref="FindWindowEx" />, and <see cref="UnregisterClass" /> functions and the <b>IActiveIMMap.FilterClientWindows</b> method.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterClassExW">
    <summary>Registers a window class for subsequent use in calls to the <see cref="CreateWindow" /> or <see cref="CreateWindowEx" /> function.</summary>
    <param name="unnamedParam1">A pointer to a <see cref="WNDCLASSEX" /> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</param>
    <returns>
      <para>If the function succeeds, the return value is a class atom that uniquely identifies the class being registered. This atom can only be used by the <see cref="CreateWindow" />, <see cref="CreateWindowEx" />, <see cref="GetClassInfo" />, <see cref="GetClassInfoEx" />, <see cref="FindWindow" />, <see cref="FindWindowEx" />, and <see cref="UnregisterClass" /> functions and the <b>IActiveIMMap.FilterClientWindows</b> method.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterClassEx">
    <summary>Registers a window class for subsequent use in calls to the <see cref="CreateWindow" /> or <see cref="CreateWindowEx" /> function.</summary>
    <param name="unnamedParam1">A pointer to a <see cref="WNDCLASSEX" /> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</param>
    <returns>
      <para>If the function succeeds, the return value is a class atom that uniquely identifies the class being registered. This atom can only be used by the <see cref="CreateWindow" />, <see cref="CreateWindowEx" />, <see cref="GetClassInfo" />, <see cref="GetClassInfoEx" />, <see cref="FindWindow" />, <see cref="FindWindowEx" />, and <see cref="UnregisterClass" /> functions and the <b>IActiveIMMap.FilterClientWindows</b> method.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterClassExA">
    <summary>Registers a window class for subsequent use in calls to the <see cref="CreateWindow" /> or <see cref="CreateWindowEx" /> function.</summary>
    <param name="unnamedParam1">A pointer to a <see cref="WNDCLASSEX" /> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</param>
    <returns>
      <para>If the function succeeds, the return value is a class atom that uniquely identifies the class being registered. This atom can only be used by the <see cref="CreateWindow" />, <see cref="CreateWindowEx" />, <see cref="GetClassInfo" />, <see cref="GetClassInfoEx" />, <see cref="FindWindow" />, <see cref="FindWindowEx" />, and <see cref="UnregisterClass" /> functions and the <b>IActiveIMMap.FilterClientWindows</b> method.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterClassExW">
    <summary>Registers a window class for subsequent use in calls to the <see cref="CreateWindow" /> or <see cref="CreateWindowEx" /> function.</summary>
    <param name="unnamedParam1">A pointer to a <see cref="WNDCLASSEX" /> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</param>
    <returns>
      <para>If the function succeeds, the return value is a class atom that uniquely identifies the class being registered. This atom can only be used by the <see cref="CreateWindow" />, <see cref="CreateWindowEx" />, <see cref="GetClassInfo" />, <see cref="GetClassInfoEx" />, <see cref="FindWindow" />, <see cref="FindWindowEx" />, and <see cref="UnregisterClass" /> functions and the <b>IActiveIMMap.FilterClientWindows</b> method.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterClass">
    <summary>
      <para>Registers a window class for subsequent use in calls to the <see cref="CreateWindow" /> or <see cref="CreateWindowEx" /> function.</para>
      <div>
        <b>Note</b>  The <b>RegisterClass</b> function has been superseded by the <see cref="RegisterClassEx" /> function. You can still use <b>RegisterClass</b>, however, if you do not need to set the class small icon.</div>
    </summary>
    <param name="lpWndClass">A pointer to a <see cref="WNDCLASS" /> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</param>
    <returns>
      <para>If the function succeeds, the return value is a class atom that uniquely identifies the class being registered. This atom can only be used by the <see cref="CreateWindow" />, <see cref="CreateWindowEx" />, <see cref="GetClassInfo" />, <see cref="GetClassInfoEx" />, <see cref="FindWindow" />, <see cref="FindWindowEx" />, and <see cref="UnregisterClass" /> functions and the <b>IActiveIMMap.FilterClientWindows</b> method.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterClassA">
    <summary>
      <para>Registers a window class for subsequent use in calls to the <see cref="CreateWindow" /> or <see cref="CreateWindowEx" /> function.</para>
      <div>
        <b>Note</b>  The <b>RegisterClass</b> function has been superseded by the <see cref="RegisterClassEx" /> function. You can still use <b>RegisterClass</b>, however, if you do not need to set the class small icon.</div>
    </summary>
    <param name="lpWndClass">A pointer to a <see cref="WNDCLASS" /> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</param>
    <returns>
      <para>If the function succeeds, the return value is a class atom that uniquely identifies the class being registered. This atom can only be used by the <see cref="CreateWindow" />, <see cref="CreateWindowEx" />, <see cref="GetClassInfo" />, <see cref="GetClassInfoEx" />, <see cref="FindWindow" />, <see cref="FindWindowEx" />, and <see cref="UnregisterClass" /> functions and the <b>IActiveIMMap.FilterClientWindows</b> method.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterClassW">
    <summary>
      <para>Registers a window class for subsequent use in calls to the <see cref="CreateWindow" /> or <see cref="CreateWindowEx" /> function.</para>
      <div>
        <b>Note</b>  The <b>RegisterClass</b> function has been superseded by the <see cref="RegisterClassEx" /> function. You can still use <b>RegisterClass</b>, however, if you do not need to set the class small icon.</div>
    </summary>
    <param name="lpWndClass">A pointer to a <see cref="WNDCLASS" /> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</param>
    <returns>
      <para>If the function succeeds, the return value is a class atom that uniquely identifies the class being registered. This atom can only be used by the <see cref="CreateWindow" />, <see cref="CreateWindowEx" />, <see cref="GetClassInfo" />, <see cref="GetClassInfoEx" />, <see cref="FindWindow" />, <see cref="FindWindowEx" />, and <see cref="UnregisterClass" /> functions and the <b>IActiveIMMap.FilterClientWindows</b> method.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterClipboardFormat">
    <summary>Registers a new clipboard format. This format can then be used as a valid clipboard format.</summary>
    <param name="lpszFormat">The name of the new format.</param>
    <returns>
      <para>If the function succeeds, the return value identifies the registered clipboard format.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterClipboardFormatA">
    <summary>Registers a new clipboard format. This format can then be used as a valid clipboard format.</summary>
    <param name="lpszFormat">The name of the new format.</param>
    <returns>
      <para>If the function succeeds, the return value identifies the registered clipboard format.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterClipboardFormatW">
    <summary>Registers a new clipboard format. This format can then be used as a valid clipboard format.</summary>
    <param name="lpszFormat">The name of the new format.</param>
    <returns>
      <para>If the function succeeds, the return value identifies the registered clipboard format.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterClipboardFormat">
    <summary>Registers a new clipboard format. This format can then be used as a valid clipboard format.</summary>
    <param name="lpszFormat">The name of the new format.</param>
    <returns>
      <para>If the function succeeds, the return value identifies the registered clipboard format.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterClipboardFormatA">
    <summary>Registers a new clipboard format. This format can then be used as a valid clipboard format.</summary>
    <param name="lpszFormat">The name of the new format.</param>
    <returns>
      <para>If the function succeeds, the return value identifies the registered clipboard format.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterClipboardFormatW">
    <summary>Registers a new clipboard format. This format can then be used as a valid clipboard format.</summary>
    <param name="lpszFormat">The name of the new format.</param>
    <returns>
      <para>If the function succeeds, the return value identifies the registered clipboard format.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterDeviceNotification">
    <summary>
      <para>Registers the device or type of device for which a window will receive notifications.</para>
      <blockquote>[!NOTE] You can use <see cref="CM_Register_Notification" /> instead of <b>RegisterDeviceNotification</b> if your code targets Windows 8 or newer versions of Windows. The advantage of <b>CM_Register_Notification</b> is that it does not require a window handle to work.</blockquote>
    </summary>
    <param name="hRecipient">
      <para>A handle to the window or service that will receive device events for the devices specified in the<i>NotificationFilter</i> parameter. The same window handle can be used in multiple calls to<b>RegisterDeviceNotification</b>.</para>
      <para>Services can specify either a window handle or service status handle.</para>
    </param>
    <param name="NotificationFilter">A pointer to a block of data that specifies the type of device for which notifications should be sent. This block always begins with the <see cref="DEV_BROADCAST_HDR" />structure. The data following this header is dependent on the value of the<b>dbch_devicetype</b> member, which can be<b>DBT_DEVTYP_DEVICEINTERFACE</b> or <b>DBT_DEVTYP_HANDLE</b>. For more information, see Remarks.</param>
    <param name="Flags">
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEVICE_NOTIFY_WINDOW_HANDLE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>The <i>hRecipient</i> parameter is a window handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEVICE_NOTIFY_SERVICE_HANDLE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>The <i>hRecipient</i> parameter is a service status handle.</description>
        </listheader>
      </list> <para>In addition, you can specify the following value.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DEVICE_NOTIFY_ALL_INTERFACE_CLASSES</b></term></listheader><listheader><term>0x00000004</term></listheader></list></description><description>Notifies the recipient of device interface events for all device interface classes. (The <b>dbcc_classguid</b> member is ignored.)<para>This value can be used only if the <b>dbch_devicetype</b> member is<b>DBT_DEVTYP_DEVICEINTERFACE</b>.</para></description></listheader></list></param>
    <returns>
      <para>If the function succeeds, the return value is a device notification handle.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterDeviceNotificationA">
    <summary>
      <para>Registers the device or type of device for which a window will receive notifications.</para>
      <blockquote>[!NOTE] You can use <see cref="CM_Register_Notification" /> instead of <b>RegisterDeviceNotification</b> if your code targets Windows 8 or newer versions of Windows. The advantage of <b>CM_Register_Notification</b> is that it does not require a window handle to work.</blockquote>
    </summary>
    <param name="hRecipient">
      <para>A handle to the window or service that will receive device events for the devices specified in the<i>NotificationFilter</i> parameter. The same window handle can be used in multiple calls to<b>RegisterDeviceNotification</b>.</para>
      <para>Services can specify either a window handle or service status handle.</para>
    </param>
    <param name="NotificationFilter">A pointer to a block of data that specifies the type of device for which notifications should be sent. This block always begins with the <see cref="DEV_BROADCAST_HDR" />structure. The data following this header is dependent on the value of the<b>dbch_devicetype</b> member, which can be<b>DBT_DEVTYP_DEVICEINTERFACE</b> or <b>DBT_DEVTYP_HANDLE</b>. For more information, see Remarks.</param>
    <param name="Flags">
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEVICE_NOTIFY_WINDOW_HANDLE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>The <i>hRecipient</i> parameter is a window handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEVICE_NOTIFY_SERVICE_HANDLE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>The <i>hRecipient</i> parameter is a service status handle.</description>
        </listheader>
      </list> <para>In addition, you can specify the following value.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DEVICE_NOTIFY_ALL_INTERFACE_CLASSES</b></term></listheader><listheader><term>0x00000004</term></listheader></list></description><description>Notifies the recipient of device interface events for all device interface classes. (The <b>dbcc_classguid</b> member is ignored.)<para>This value can be used only if the <b>dbch_devicetype</b> member is<b>DBT_DEVTYP_DEVICEINTERFACE</b>.</para></description></listheader></list></param>
    <returns>
      <para>If the function succeeds, the return value is a device notification handle.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterDeviceNotificationW">
    <summary>
      <para>Registers the device or type of device for which a window will receive notifications.</para>
      <blockquote>[!NOTE] You can use <see cref="CM_Register_Notification" /> instead of <b>RegisterDeviceNotification</b> if your code targets Windows 8 or newer versions of Windows. The advantage of <b>CM_Register_Notification</b> is that it does not require a window handle to work.</blockquote>
    </summary>
    <param name="hRecipient">
      <para>A handle to the window or service that will receive device events for the devices specified in the<i>NotificationFilter</i> parameter. The same window handle can be used in multiple calls to<b>RegisterDeviceNotification</b>.</para>
      <para>Services can specify either a window handle or service status handle.</para>
    </param>
    <param name="NotificationFilter">A pointer to a block of data that specifies the type of device for which notifications should be sent. This block always begins with the <see cref="DEV_BROADCAST_HDR" />structure. The data following this header is dependent on the value of the<b>dbch_devicetype</b> member, which can be<b>DBT_DEVTYP_DEVICEINTERFACE</b> or <b>DBT_DEVTYP_HANDLE</b>. For more information, see Remarks.</param>
    <param name="Flags">
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEVICE_NOTIFY_WINDOW_HANDLE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>The <i>hRecipient</i> parameter is a window handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEVICE_NOTIFY_SERVICE_HANDLE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>The <i>hRecipient</i> parameter is a service status handle.</description>
        </listheader>
      </list> <para>In addition, you can specify the following value.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DEVICE_NOTIFY_ALL_INTERFACE_CLASSES</b></term></listheader><listheader><term>0x00000004</term></listheader></list></description><description>Notifies the recipient of device interface events for all device interface classes. (The <b>dbcc_classguid</b> member is ignored.)<para>This value can be used only if the <b>dbch_devicetype</b> member is<b>DBT_DEVTYP_DEVICEINTERFACE</b>.</para></description></listheader></list></param>
    <returns>
      <para>If the function succeeds, the return value is a device notification handle.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterDeviceNotification">
    <summary>
      <para>Registers the device or type of device for which a window will receive notifications.</para>
      <blockquote>[!NOTE] You can use <see cref="CM_Register_Notification" /> instead of <b>RegisterDeviceNotification</b> if your code targets Windows 8 or newer versions of Windows. The advantage of <b>CM_Register_Notification</b> is that it does not require a window handle to work.</blockquote>
    </summary>
    <param name="hRecipient">
      <para>A handle to the window or service that will receive device events for the devices specified in the<i>NotificationFilter</i> parameter. The same window handle can be used in multiple calls to<b>RegisterDeviceNotification</b>.</para>
      <para>Services can specify either a window handle or service status handle.</para>
    </param>
    <param name="NotificationFilter">A pointer to a block of data that specifies the type of device for which notifications should be sent. This block always begins with the <see cref="DEV_BROADCAST_HDR" />structure. The data following this header is dependent on the value of the<b>dbch_devicetype</b> member, which can be<b>DBT_DEVTYP_DEVICEINTERFACE</b> or <b>DBT_DEVTYP_HANDLE</b>. For more information, see Remarks.</param>
    <param name="Flags">
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEVICE_NOTIFY_WINDOW_HANDLE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>The <i>hRecipient</i> parameter is a window handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEVICE_NOTIFY_SERVICE_HANDLE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>The <i>hRecipient</i> parameter is a service status handle.</description>
        </listheader>
      </list> <para>In addition, you can specify the following value.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DEVICE_NOTIFY_ALL_INTERFACE_CLASSES</b></term></listheader><listheader><term>0x00000004</term></listheader></list></description><description>Notifies the recipient of device interface events for all device interface classes. (The <b>dbcc_classguid</b> member is ignored.)<para>This value can be used only if the <b>dbch_devicetype</b> member is<b>DBT_DEVTYP_DEVICEINTERFACE</b>.</para></description></listheader></list></param>
    <returns>
      <para>If the function succeeds, the return value is a device notification handle.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterDeviceNotificationA">
    <summary>
      <para>Registers the device or type of device for which a window will receive notifications.</para>
      <blockquote>[!NOTE] You can use <see cref="CM_Register_Notification" /> instead of <b>RegisterDeviceNotification</b> if your code targets Windows 8 or newer versions of Windows. The advantage of <b>CM_Register_Notification</b> is that it does not require a window handle to work.</blockquote>
    </summary>
    <param name="hRecipient">
      <para>A handle to the window or service that will receive device events for the devices specified in the<i>NotificationFilter</i> parameter. The same window handle can be used in multiple calls to<b>RegisterDeviceNotification</b>.</para>
      <para>Services can specify either a window handle or service status handle.</para>
    </param>
    <param name="NotificationFilter">A pointer to a block of data that specifies the type of device for which notifications should be sent. This block always begins with the <see cref="DEV_BROADCAST_HDR" />structure. The data following this header is dependent on the value of the<b>dbch_devicetype</b> member, which can be<b>DBT_DEVTYP_DEVICEINTERFACE</b> or <b>DBT_DEVTYP_HANDLE</b>. For more information, see Remarks.</param>
    <param name="Flags">
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEVICE_NOTIFY_WINDOW_HANDLE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>The <i>hRecipient</i> parameter is a window handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEVICE_NOTIFY_SERVICE_HANDLE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>The <i>hRecipient</i> parameter is a service status handle.</description>
        </listheader>
      </list> <para>In addition, you can specify the following value.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DEVICE_NOTIFY_ALL_INTERFACE_CLASSES</b></term></listheader><listheader><term>0x00000004</term></listheader></list></description><description>Notifies the recipient of device interface events for all device interface classes. (The <b>dbcc_classguid</b> member is ignored.)<para>This value can be used only if the <b>dbch_devicetype</b> member is<b>DBT_DEVTYP_DEVICEINTERFACE</b>.</para></description></listheader></list></param>
    <returns>
      <para>If the function succeeds, the return value is a device notification handle.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterDeviceNotificationW">
    <summary>
      <para>Registers the device or type of device for which a window will receive notifications.</para>
      <blockquote>[!NOTE] You can use <see cref="CM_Register_Notification" /> instead of <b>RegisterDeviceNotification</b> if your code targets Windows 8 or newer versions of Windows. The advantage of <b>CM_Register_Notification</b> is that it does not require a window handle to work.</blockquote>
    </summary>
    <param name="hRecipient">
      <para>A handle to the window or service that will receive device events for the devices specified in the<i>NotificationFilter</i> parameter. The same window handle can be used in multiple calls to<b>RegisterDeviceNotification</b>.</para>
      <para>Services can specify either a window handle or service status handle.</para>
    </param>
    <param name="NotificationFilter">A pointer to a block of data that specifies the type of device for which notifications should be sent. This block always begins with the <see cref="DEV_BROADCAST_HDR" />structure. The data following this header is dependent on the value of the<b>dbch_devicetype</b> member, which can be<b>DBT_DEVTYP_DEVICEINTERFACE</b> or <b>DBT_DEVTYP_HANDLE</b>. For more information, see Remarks.</param>
    <param name="Flags">
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEVICE_NOTIFY_WINDOW_HANDLE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>The <i>hRecipient</i> parameter is a window handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEVICE_NOTIFY_SERVICE_HANDLE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>The <i>hRecipient</i> parameter is a service status handle.</description>
        </listheader>
      </list> <para>In addition, you can specify the following value.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DEVICE_NOTIFY_ALL_INTERFACE_CLASSES</b></term></listheader><listheader><term>0x00000004</term></listheader></list></description><description>Notifies the recipient of device interface events for all device interface classes. (The <b>dbcc_classguid</b> member is ignored.)<para>This value can be used only if the <b>dbch_devicetype</b> member is<b>DBT_DEVTYP_DEVICEINTERFACE</b>.</para></description></listheader></list></param>
    <returns>
      <para>If the function succeeds, the return value is a device notification handle.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterForTooltipDismissNotification">
    <summary>Registers or unregisters windows to receive notification to dismiss their tooltip windows.</summary>
    <param name="hWnd">The handle of the window to receive the <b>WM_TOOLTIPDISMISS</b> message.</param>
    <param name="tdFlags">A value of the enumeration that specifies whether the function registers or unregisters the window. <b>TDF_REGISTER</b> to register; <b>TDF_UNREGISTER</b> to unregister.</param>
    <returns>
      <b>TRUE</b> if the window was successfully registered or unregistered; otherwise, <b>FALSE</b>. (See Remarks.)</returns>
  </member>
  <member name="Windows.RegisterHotKey">
    <summary>Defines a system-wide hot key.</summary>
    <param name="hWnd">A handle to the window that will receive <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-hotkey">WM_HOTKEY</a> messages generated by the hot key. If this parameter is <b>NULL</b>, <b>WM_HOTKEY</b> messages are posted to the message queue of the calling thread and must be processed in the message loop.</param>
    <param name="id">The identifier of the hot key. If the <i>hWnd</i> parameter is NULL, then the hot key is associated with the current thread rather than with a particular window. If a hot key already exists with the same <i>hWnd</i> and <i>id</i> parameters, see Remarks for the action taken.</param>
    <param name="fsModifiers">
      <para>The keys that must be pressed in combination with the key specified by the<i>vk</i> parameter in order to generate the <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-hotkey">WM_HOTKEY</a> message. The <i>fsModifiers</i> parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MOD_ALT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Either ALT key must be held down.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MOD_CONTROL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Either CTRL key must be held down.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MOD_NOREPEAT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x4000</term>
              </listheader>
            </list>
          </description>
          <description>Changes the hotkey behavior so that the keyboard auto-repeat does not yield multiple hotkey notifications.<para><b>Windows Vista:  </b>This flag is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MOD_SHIFT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>Either SHIFT key must be held down.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MOD_WIN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Either WINDOWS key was held down. These keys are labeled with the Windows logo. Keyboard shortcuts that involve the WINDOWS key are reserved for use by the operating system.</description>
        </listheader>
      </list>
    </param>
    <param name="vk">The virtual-key code of the hot key. See <a href="https://docs.microsoft.com//windows/desktop/inputdev/virtual-key-codes">Virtual Key Codes</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterPointerDeviceNotifications">
    <summary>Registers a window to process the <a href="https://docs.microsoft.com//windows/win32/inputmsg/wm-pointerdevicechange">WM_POINTERDEVICECHANGE</a>,<a href="https://docs.microsoft.com//windows/win32/inputmsg/wm-pointerdeviceinrange">WM_POINTERDEVICEINRANGE</a>, and<a href="https://docs.microsoft.com//windows/win32/inputmsg/wm-pointerdeviceoutofrange">WM_POINTERDEVICEOUTOFRANGE</a> pointer device notifications.</summary>
    <param name="window">The window that receives <a href="https://docs.microsoft.com//windows/win32/inputmsg/wm-pointerdevicechange">WM_POINTERDEVICECHANGE</a>,<a href="https://docs.microsoft.com//windows/win32/inputmsg/wm-pointerdeviceinrange">WM_POINTERDEVICEINRANGE</a>, and<a href="https://docs.microsoft.com//windows/win32/inputmsg/wm-pointerdeviceoutofrange">WM_POINTERDEVICEOUTOFRANGE</a> notifications.</param>
    <param name="notifyRange">If set to TRUE, process the <a href="https://docs.microsoft.com//windows/win32/inputmsg/wm-pointerdeviceinrange">WM_POINTERDEVICEINRANGE</a> and<a href="https://docs.microsoft.com//windows/win32/inputmsg/wm-pointerdeviceoutofrange">WM_POINTERDEVICEOUTOFRANGE</a> messages. If set to FALSE, these messages aren't processed.</param>
    <returns>
      <para>If this function succeeds, it returns TRUE.</para>
      <para>Otherwise, it returns FALSE. To retrieve extended error information, call the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.RegisterPointerInputTarget">
    <summary>Allows the caller to register a target window to which all pointer input of the specified type is redirected.</summary>
    <param name="hwnd">
      <para>The window to register as a global redirection target.</para>
      <para>Redirection can cause the foreground window to lose activation (focus). To avoid this, ensure the window is a message-only window or has the <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">WS_EX_NOACTIVATE</a> style set.</para>
    </param>
    <param name="pointerType">Type of pointer input to be redirected to the specified window. This is any valid and supported value from the <see cref="POINTER_INPUT_TYPE" /> enumeration. Note that the generic <b>PT_POINTER</b> type and the <b>PT_MOUSE</b> type are not valid in this parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is non-zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterPowerSettingNotification">
    <summary>Registers the application to receive power setting notifications for the specific power setting event.</summary>
    <param name="hRecipient">Handle indicating where the power setting notifications are to be sent. For interactive applications, the<i>Flags</i> parameter should be zero, and the <i>hRecipient</i> parameter should be a window handle. For services, the <i>Flags</i> parameter should be one, and the<i>hRecipient</i> parameter should be a <b>SERVICE_STATUS_HANDLE</b>as returned from<see cref="RegisterServiceCtrlHandlerEx" />.</param>
    <param name="PowerSettingGuid">The <b>GUID</b> of the power setting for which notifications are to be sent. For more information see <a href="https://docs.microsoft.com//windows/desktop/Power/registering-for-power-events">Registering for Power
Events</a>.</param>
    <param name="Flags">
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEVICE_NOTIFY_WINDOW_HANDLE</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>Notifications are sent using <a href="https://docs.microsoft.com//windows/desktop/Power/wm-powerbroadcast">WM_POWERBROADCAST</a> messages with a <i>wParam</i> parameter of <a href="https://docs.microsoft.com//windows/desktop/Power/pbt-powersettingchange">PBT_POWERSETTINGCHANGE</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>DEVICE_NOTIFY_SERVICE_HANDLE</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Notifications are sent to the <a href="https://docs.microsoft.com//windows/desktop/api/winsvc/nc-winsvc-lphandler_function_ex">HandlerEx</a> callback function with a <i>dwControl</i> parameter of <b>SERVICE_CONTROL_POWEREVENT</b> and a <i>dwEventType</i> of <a href="https://docs.microsoft.com//windows/desktop/Power/pbt-powersettingchange">PBT_POWERSETTINGCHANGE</a>.</description>
        </listheader>
      </list>
    </param>
    <returns>Returns a notification handle for unregistering for power notifications. If the function fails, the return value is NULL. To get extended error information, call<see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.RegisterRawInputDevices">
    <summary>Registers the devices that supply the raw input data.</summary>
    <param name="pRawInputDevices">An array of <see cref="RAWINPUTDEVICE" /> structures that represent the devices that supply the raw input.</param>
    <param name="uiNumDevices">The number of <see cref="RAWINPUTDEVICE" /> structures pointed to by <i>pRawInputDevices</i>.</param>
    <param name="cbSize">The size, in bytes, of a <see cref="RAWINPUTDEVICE" /> structure.</param>
    <returns>
      <b>TRUE</b> if the function succeeds; otherwise, <b>FALSE</b>. If the function fails, call <see cref="GetLastError" /> for more information.</returns>
  </member>
  <member name="Windows.RegisterSuspendResumeNotification">
    <summary>Registers to receive notification when the system is suspended or resumed. Similar to <see cref="PowerRegisterSuspendResumeNotification" />, but operates in user mode and can take a window handle.</summary>
    <param name="hRecipient">
      <para>This parameter contains parameters for subscribing to a power notification or a window handle representing the subscribing process.</para>
      <para>If <i>Flags</i> is <b>DEVICE_NOTIFY_CALLBACK</b>, <i>hRecipient</i> is interpreted as a pointer to a <see cref="DEVICE_NOTIFY_SUBSCRIBE_PARAMETERS" /> structure. In this case, the callback function is <a href="https://docs.microsoft.com//windows/desktop/api/powrprof/nc-powrprof-device_notify_callback_routine">DeviceNotifyCallbackRoutine</a>. When the <b>Callback</b> function executes, the <i>Type</i> parameter is set indicating the type of event that occurred. Possible values include <b>PBT_APMSUSPEND</b>, <b>PBT_APMRESUMESUSPEND</b>, and <b>PBT_APMRESUMEAUTOMATIC</b> - see <a href="https://docs.microsoft.com//windows/desktop/Power/power-management-events">Power Management Events</a> for more info. The <i>Setting</i> parameter is not used with suspend/resume notifications.</para>
      <para>If <i>Flags</i> is <b>DEVICE_NOTIFY_WINDOW_HANDLE</b>, <i>hRecipient</i> is a handle to the window to deliver events to.</para>
    </param>
    <param name="Flags">This parameter can be <b>DEVICE_NOTIFY_WINDOW_HANDLE</b> or <b>DEVICE_NOTIFY_CALLBACK</b>.</param>
    <returns>
      <para>A handle to the registration. Use this handle to unregister for notifications.</para>
      <para>If the function fails, the return value is NULL. To get extended error information call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterTouchHitTestingWindow">
    <summary>
      <para>Registers a window to process the</para>
      <para>
        <a href="https://docs.microsoft.com//windows/win32/inputmsg/wm-touchhittesting">WM_TOUCHHITTESTING</a> notification.</para>
    </summary>
    <param name="hwnd">The window that receives the <a href="https://docs.microsoft.com//windows/win32/inputmsg/wm-touchhittesting">WM_TOUCHHITTESTING</a> notification.</param>
    <param name="value">
      <para>One of the following values:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//previous-versions/windows/desktop/input_touchhittest/hit-testing-behaviors">TOUCH_HIT_TESTING_CLIENT</a>: Send <a href="https://docs.microsoft.com//windows/win32/inputmsg/wm-touchhittesting">WM_TOUCHHITTESTING</a> messages to the target window.</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//previous-versions/windows/desktop/input_touchhittest/hit-testing-behaviors">TOUCH_HIT_TESTING_DEFAULT</a>: Don't send <a href="https://docs.microsoft.com//windows/win32/inputmsg/wm-touchhittesting">WM_TOUCHHITTESTING</a> messages to the target window but continue to send the messages to child windows.</description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//previous-versions/windows/desktop/input_touchhittest/hit-testing-behaviors">TOUCH_HIT_TESTING_NONE</a>: Don't send <a href="https://docs.microsoft.com//windows/win32/inputmsg/wm-touchhittesting">WM_TOUCHHITTESTING</a> messages to the target window or child windows.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>If this function succeeds, it returns TRUE.</para>
      <para>Otherwise, it returns FALSE. To retrieve extended error information, call the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.RegisterTouchWindow">
    <summary>Registers a window as being touch-capable.</summary>
    <param name="hwnd">The handle of the window being registered. The function fails with <b>ERROR_ACCESS_DENIED</b> if the calling thread does not own the specified window.</param>
    <param name="ulFlags">
      <para>A set of bit flags that specify optional modifications. This field may contain 0 or one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TWF_FINETOUCH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Specifies that <i>hWnd</i> prefers noncoalesced touch input.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TWF_WANTPALM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Setting this flag disables palm rejection which reduces delays for getting <a href="https://docs.microsoft.com//windows/desktop/wintouch/wm-touchdown">WM_TOUCH</a> messages. 						 This is useful if you want as quick of a response as possible when a user touches your application. 						 <para>By default, palm detection is enabled and some <a href="https://docs.microsoft.com//windows/desktop/wintouch/wm-touchdown">WM_TOUCH</a> messages are prevented from being sent to your application. This is useful if you do not want to receive <b>WM_TOUCH</b> messages that are from palm contact.</para></description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.RegisterWindowMessage">
    <summary>Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.</summary>
    <param name="lpString">The message to be registered.</param>
    <returns>
      <para>If the message is successfully registered, the return value is a message identifier in the range 0xC000 through 0xFFFF.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterWindowMessageA">
    <summary>Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.</summary>
    <param name="lpString">The message to be registered.</param>
    <returns>
      <para>If the message is successfully registered, the return value is a message identifier in the range 0xC000 through 0xFFFF.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterWindowMessageW">
    <summary>Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.</summary>
    <param name="lpString">The message to be registered.</param>
    <returns>
      <para>If the message is successfully registered, the return value is a message identifier in the range 0xC000 through 0xFFFF.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterWindowMessage">
    <summary>Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.</summary>
    <param name="lpString">The message to be registered.</param>
    <returns>
      <para>If the message is successfully registered, the return value is a message identifier in the range 0xC000 through 0xFFFF.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterWindowMessageA">
    <summary>Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.</summary>
    <param name="lpString">The message to be registered.</param>
    <returns>
      <para>If the message is successfully registered, the return value is a message identifier in the range 0xC000 through 0xFFFF.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RegisterWindowMessageW">
    <summary>Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.</summary>
    <param name="lpString">The message to be registered.</param>
    <returns>
      <para>If the message is successfully registered, the return value is a message identifier in the range 0xC000 through 0xFFFF.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ReleaseCapture">
    <summary>Releases the mouse capture from a window in the current thread and restores normal mouse input processing. A window that has captured the mouse receives all mouse input, regardless of the position of the cursor, except when a mouse button is clicked while the cursor hot spot is in the window of another thread.</summary>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ReleaseDC">
    <summary>The <b>ReleaseDC</b> function releases a device context (DC), freeing it for use by other applications. The effect of the <b>ReleaseDC</b> function depends on the type of DC. It frees only common and window DCs. It has no effect on class or private DCs.</summary>
    <param name="hWnd">A handle to the window whose DC is to be released.</param>
    <param name="hDC">A handle to the DC to be released.</param>
    <returns>
      <para>The return value indicates whether the DC was released. If the DC was released, the return value is 1.</para>
      <para>If the DC was not released, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.RemoveClipboardFormatListener">
    <summary>Removes the given window from the system-maintained clipboard format listener list.</summary>
    <param name="hwnd">A handle to the window to remove from the clipboard format listener list.</param>
    <returns>Returns <b>TRUE</b> if successful, <b>FALSE</b> otherwise. Call <see cref="GetLastError" /> for additional details.</returns>
  </member>
  <member name="Windows.RemoveMenu">
    <summary>Deletes a menu item or detaches a submenu from the specified menu. If the menu item opens a drop-down menu or submenu, <b>RemoveMenu</b> does not destroy the menu or its handle, allowing the menu to be reused. Before this function is called, the <see cref="GetSubMenu" /> function should retrieve a handle to the drop-down menu or submenu.</summary>
    <param name="hMenu">A handle to the menu to be changed.</param>
    <param name="uPosition">The menu item to be deleted, as determined by the <i>uFlags</i> parameter.</param>
    <param name="uFlags">
      <para>Indicates how the <i>uPosition</i> parameter is interpreted. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uPosition</i> gives the identifier of the menu item. If neither the <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> flag is specified, the <b>MF_BYCOMMAND</b> flag is the default flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uPosition</i> gives the zero-based relative position of the menu item.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.RemoveProp">
    <summary>Removes an entry from the property list of the specified window. The specified character string identifies the entry to be removed.</summary>
    <param name="hWnd">A handle to the window whose property list is to be changed.</param>
    <param name="lpString">A null-terminated character string or an atom that identifies a string. If this parameter is an atom, it must have been created using the <see cref="GlobalAddAtom" /> function. The atom, a 16-bit value, must be placed in the low-order word of <i>lpString</i>; the high-order word must be zero.</param>
    <returns>The return value identifies the specified data. If the data cannot be found in the specified property list, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.RemovePropA">
    <summary>Removes an entry from the property list of the specified window. The specified character string identifies the entry to be removed.</summary>
    <param name="hWnd">A handle to the window whose property list is to be changed.</param>
    <param name="lpString">A null-terminated character string or an atom that identifies a string. If this parameter is an atom, it must have been created using the <see cref="GlobalAddAtom" /> function. The atom, a 16-bit value, must be placed in the low-order word of <i>lpString</i>; the high-order word must be zero.</param>
    <returns>The return value identifies the specified data. If the data cannot be found in the specified property list, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.RemovePropW">
    <summary>Removes an entry from the property list of the specified window. The specified character string identifies the entry to be removed.</summary>
    <param name="hWnd">A handle to the window whose property list is to be changed.</param>
    <param name="lpString">A null-terminated character string or an atom that identifies a string. If this parameter is an atom, it must have been created using the <see cref="GlobalAddAtom" /> function. The atom, a 16-bit value, must be placed in the low-order word of <i>lpString</i>; the high-order word must be zero.</param>
    <returns>The return value identifies the specified data. If the data cannot be found in the specified property list, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.RemoveProp">
    <summary>Removes an entry from the property list of the specified window. The specified character string identifies the entry to be removed.</summary>
    <param name="hWnd">A handle to the window whose property list is to be changed.</param>
    <param name="lpString">A null-terminated character string or an atom that identifies a string. If this parameter is an atom, it must have been created using the <see cref="GlobalAddAtom" /> function. The atom, a 16-bit value, must be placed in the low-order word of <i>lpString</i>; the high-order word must be zero.</param>
    <returns>The return value identifies the specified data. If the data cannot be found in the specified property list, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.RemovePropA">
    <summary>Removes an entry from the property list of the specified window. The specified character string identifies the entry to be removed.</summary>
    <param name="hWnd">A handle to the window whose property list is to be changed.</param>
    <param name="lpString">A null-terminated character string or an atom that identifies a string. If this parameter is an atom, it must have been created using the <see cref="GlobalAddAtom" /> function. The atom, a 16-bit value, must be placed in the low-order word of <i>lpString</i>; the high-order word must be zero.</param>
    <returns>The return value identifies the specified data. If the data cannot be found in the specified property list, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.RemovePropW">
    <summary>Removes an entry from the property list of the specified window. The specified character string identifies the entry to be removed.</summary>
    <param name="hWnd">A handle to the window whose property list is to be changed.</param>
    <param name="lpString">A null-terminated character string or an atom that identifies a string. If this parameter is an atom, it must have been created using the <see cref="GlobalAddAtom" /> function. The atom, a 16-bit value, must be placed in the low-order word of <i>lpString</i>; the high-order word must be zero.</param>
    <returns>The return value identifies the specified data. If the data cannot be found in the specified property list, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.ReplyMessage">
    <summary>Replies to a message sent from another thread by the <see cref="SendMessage" /> function.</summary>
    <param name="lResult">The result of the message processing. The possible values are based on the message sent.</param>
    <returns>
      <para>If the calling thread was processing a message sent from another thread or process, the return value is nonzero.</para>
      <para>If the calling thread was not processing a message sent from another thread or process, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.ScreenToClient">
    <summary>The <b>ScreenToClient</b> function converts the screen coordinates of a specified point on the screen to client-area coordinates.</summary>
    <param name="hWnd">A handle to the window whose client area will be used for the conversion.</param>
    <param name="lpPoint">A pointer to a <see cref="POINT" /> structure that specifies the screen coordinates to be converted.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.ScrollDC">
    <summary>The <b>ScrollDC</b> function scrolls a rectangle of bits horizontally and vertically.</summary>
    <param name="hDC">Handle to the device context that contains the bits to be scrolled.</param>
    <param name="dx">Specifies the amount, in device units, of horizontal scrolling. This parameter must be a negative value to scroll to the left.</param>
    <param name="dy">Specifies the amount, in device units, of vertical scrolling. This parameter must be a negative value to scroll up.</param>
    <param name="lprcScroll">Pointer to a <see cref="RECT" /> structure containing the coordinates of the bits to be scrolled. The only bits affected by the scroll operation are bits in the intersection of this rectangle and the rectangle specified by<i>lprcClip</i>. If<i>lprcScroll</i> is <b>NULL</b>, the entire client area is used.</param>
    <param name="lprcClip">Pointer to a<see cref="RECT" /> structure containing the coordinates of the clipping rectangle. The only bits that will be painted are the bits that remain inside this rectangle after the scroll operation has been completed. If<i>lprcClip</i> is <b>NULL</b>, the entire client area is used.</param>
    <param name="hrgnUpdate">Handle to the region uncovered by the scrolling process. <b>ScrollDC</b> defines this region; it is not necessarily a rectangle.</param>
    <param name="lprcUpdate">Pointer to a <see cref="RECT" /> structure that receives the coordinates of the rectangle bounding the scrolling update region. This is the largest rectangular area that requires repainting. When the function returns, the values in the structure are in client coordinates, regardless of the mapping mode for the specified device context. This allows applications to use the update region in a call to the <see cref="InvalidateRgn" /> function, if required.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ScrollWindow">
    <summary>
      <para>The <b>ScrollWindow</b> function scrolls the contents of the specified window's client area.</para>
      <div>
        <b>Note</b>  The <b>ScrollWindow</b> function is provided for backward compatibility. New applications should use the <see cref="ScrollWindowEx" /> function.</div>
    </summary>
    <param name="hWnd">Handle to the window where the client area is to be scrolled.</param>
    <param name="XAmount">Specifies the amount, in device units, of horizontal scrolling. If the window being scrolled has the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-class-styles">CS_OWNDC</a> or <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-class-styles">CS_CLASSDC</a> style, then this parameter uses logical units rather than device units. This parameter must be a negative value to scroll the content of the window to the left.</param>
    <param name="YAmount">Specifies the amount, in device units, of vertical scrolling. If the window being scrolled has the <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-class-styles">CS_OWNDC</a> or <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-class-styles">CS_CLASSDC</a> style, then this parameter uses logical units rather than device units. This parameter must be a negative value to scroll the content of the window up.</param>
    <param name="lpRect">Pointer to the <see cref="RECT" /> structure specifying the portion of the client area to be scrolled. If this parameter is <b>NULL</b>, the entire client area is scrolled.</param>
    <param name="lpClipRect">Pointer to the<see cref="RECT" /> structure containing the coordinates of the clipping rectangle. Only device bits within the clipping rectangle are affected. Bits scrolled from the outside of the rectangle to the inside are painted; bits scrolled from the inside of the rectangle to the outside are not painted.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ScrollWindowEx">
    <summary>The <b>ScrollWindowEx</b> function scrolls the contents of the specified window's client area.</summary>
    <param name="hWnd">Handle to the window where the client area is to be scrolled.</param>
    <param name="dx">Specifies the amount, in device units, of horizontal scrolling. This parameter must be a negative value to scroll to the left.</param>
    <param name="dy">Specifies the amount, in device units, of vertical scrolling. This parameter must be a negative value to scroll up.</param>
    <param name="prcScroll">Pointer to a <see cref="RECT" /> structure that specifies the portion of the client area to be scrolled. If this parameter is <b>NULL</b>, the entire client area is scrolled.</param>
    <param name="prcClip">Pointer to a<see cref="RECT" /> structure that contains the coordinates of the clipping rectangle. Only device bits within the clipping rectangle are affected. Bits scrolled from the outside of the rectangle to the inside are painted; bits scrolled from the inside of the rectangle to the outside are not painted. This parameter may be <b>NULL</b>.</param>
    <param name="hrgnUpdate">Handle to the region that is modified to hold the region invalidated by scrolling. This parameter may be <b>NULL</b>.</param>
    <param name="prcUpdate">Pointer to a <see cref="RECT" /> structure that receives the boundaries of the rectangle invalidated by scrolling. This parameter may be <b>NULL</b>.</param>
    <param name="flags">
      <para>Specifies flags that control scrolling. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SW_ERASE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Erases the newly invalidated region by sending a 						<a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-erasebkgnd">WM_ERASEBKGND</a> message to the window when specified with the SW_INVALIDATE flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SW_INVALIDATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Invalidates the region identified by the 						<i>hrgnUpdate</i> parameter after scrolling.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SW_SCROLLCHILDREN</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Scrolls all child windows that intersect the rectangle pointed to by the 						<i>prcScroll</i> parameter. The child windows are scrolled by the number of pixels specified by the 						<i>dx</i> and 						<i>dy</i> parameters. The system sends a 						<a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-move">WM_MOVE</a> message to all child windows that intersect the 						<i>prcScroll</i> rectangle, even if they do not move.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SW_SMOOTHSCROLL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Scrolls using smooth scrolling. Use the 						<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms632657(v=vs.85)">HIWORD</a> portion of the 						<i>flags</i> parameter to indicate how much time, in milliseconds, the smooth-scrolling operation should take.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is SIMPLEREGION (rectangular invalidated region), COMPLEXREGION (nonrectangular invalidated region; overlapping rectangles), or NULLREGION (no invalidated region).</para>
      <para>If the function fails, the return value is ERROR. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SendDlgItemMessage">
    <summary>Sends a message to the specified control in a dialog box.</summary>
    <param name="hDlg">A handle to the dialog box that contains the control.</param>
    <param name="nIDDlgItem">The identifier of the control that receives the message.</param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message sent.</returns>
  </member>
  <member name="Windows.SendDlgItemMessageA">
    <summary>Sends a message to the specified control in a dialog box.</summary>
    <param name="hDlg">A handle to the dialog box that contains the control.</param>
    <param name="nIDDlgItem">The identifier of the control that receives the message.</param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message sent.</returns>
  </member>
  <member name="Windows.SendDlgItemMessageW">
    <summary>Sends a message to the specified control in a dialog box.</summary>
    <param name="hDlg">A handle to the dialog box that contains the control.</param>
    <param name="nIDDlgItem">The identifier of the control that receives the message.</param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message sent.</returns>
  </member>
  <member name="Windows.SendDlgItemMessage">
    <summary>Sends a message to the specified control in a dialog box.</summary>
    <param name="hDlg">A handle to the dialog box that contains the control.</param>
    <param name="nIDDlgItem">The identifier of the control that receives the message.</param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message sent.</returns>
  </member>
  <member name="Windows.SendDlgItemMessageA">
    <summary>Sends a message to the specified control in a dialog box.</summary>
    <param name="hDlg">A handle to the dialog box that contains the control.</param>
    <param name="nIDDlgItem">The identifier of the control that receives the message.</param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message sent.</returns>
  </member>
  <member name="Windows.SendDlgItemMessageW">
    <summary>Sends a message to the specified control in a dialog box.</summary>
    <param name="hDlg">A handle to the dialog box that contains the control.</param>
    <param name="nIDDlgItem">The identifier of the control that receives the message.</param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing and depends on the message sent.</returns>
  </member>
  <member name="Windows.SendInput">
    <summary>Synthesizes keystrokes, mouse motions, and button clicks.</summary>
    <param name="cInputs">The number of structures in the <i>pInputs</i> array.</param>
    <param name="pInputs">An array of <see cref="INPUT" /> structures. Each structure represents an event to be inserted into the keyboard or mouse input stream.</param>
    <param name="cbSize">The size, in bytes, of an <see cref="INPUT" /> structure. If <i>cbSize</i> is not the size of an <b>INPUT</b> structure, the function fails.</param>
    <returns>
      <para>The function returns the number of events that it successfully inserted into the keyboard or mouse input stream. If the function returns zero, the input was already blocked by another thread. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>This function fails when it is blocked by UIPI. Note that neither <see cref="GetLastError" /> nor the return value will indicate the failure was caused by UIPI blocking.</para>
    </returns>
  </member>
  <member name="Windows.SendMessage">
    <summary>
      <para>Sends the specified message to a window or windows. The <b>SendMessage</b> function calls the window procedure for the specified window and does not return until the window procedure has processed the message.</para>
      <para>To send a message and return immediately, use the <see cref="SendMessageCallback" /> or <see cref="SendNotifyMessage" /> function. To post a message to a thread's message queue and return immediately, use the <see cref="PostMessage" /> or <see cref="PostThreadMessage" /> function.</para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</para>
      <para>Message sending is subject to UIPI. The thread of a process can send messages only to message queues of threads in processes of lesser or equal integrity level.</para>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
  </member>
  <member name="Windows.SendMessageA">
    <summary>
      <para>Sends the specified message to a window or windows. The <b>SendMessage</b> function calls the window procedure for the specified window and does not return until the window procedure has processed the message.</para>
      <para>To send a message and return immediately, use the <see cref="SendMessageCallback" /> or <see cref="SendNotifyMessage" /> function. To post a message to a thread's message queue and return immediately, use the <see cref="PostMessage" /> or <see cref="PostThreadMessage" /> function.</para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</para>
      <para>Message sending is subject to UIPI. The thread of a process can send messages only to message queues of threads in processes of lesser or equal integrity level.</para>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
  </member>
  <member name="Windows.SendMessageW">
    <summary>
      <para>Sends the specified message to a window or windows. The <b>SendMessage</b> function calls the window procedure for the specified window and does not return until the window procedure has processed the message.</para>
      <para>To send a message and return immediately, use the <see cref="SendMessageCallback" /> or <see cref="SendNotifyMessage" /> function. To post a message to a thread's message queue and return immediately, use the <see cref="PostMessage" /> or <see cref="PostThreadMessage" /> function.</para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</para>
      <para>Message sending is subject to UIPI. The thread of a process can send messages only to message queues of threads in processes of lesser or equal integrity level.</para>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
  </member>
  <member name="Windows.SendMessage">
    <summary>
      <para>Sends the specified message to a window or windows. The <b>SendMessage</b> function calls the window procedure for the specified window and does not return until the window procedure has processed the message.</para>
      <para>To send a message and return immediately, use the <see cref="SendMessageCallback" /> or <see cref="SendNotifyMessage" /> function. To post a message to a thread's message queue and return immediately, use the <see cref="PostMessage" /> or <see cref="PostThreadMessage" /> function.</para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</para>
      <para>Message sending is subject to UIPI. The thread of a process can send messages only to message queues of threads in processes of lesser or equal integrity level.</para>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
  </member>
  <member name="Windows.SendMessageA">
    <summary>
      <para>Sends the specified message to a window or windows. The <b>SendMessage</b> function calls the window procedure for the specified window and does not return until the window procedure has processed the message.</para>
      <para>To send a message and return immediately, use the <see cref="SendMessageCallback" /> or <see cref="SendNotifyMessage" /> function. To post a message to a thread's message queue and return immediately, use the <see cref="PostMessage" /> or <see cref="PostThreadMessage" /> function.</para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</para>
      <para>Message sending is subject to UIPI. The thread of a process can send messages only to message queues of threads in processes of lesser or equal integrity level.</para>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
  </member>
  <member name="Windows.SendMessageW">
    <summary>
      <para>Sends the specified message to a window or windows. The <b>SendMessage</b> function calls the window procedure for the specified window and does not return until the window procedure has processed the message.</para>
      <para>To send a message and return immediately, use the <see cref="SendMessageCallback" /> or <see cref="SendNotifyMessage" /> function. To post a message to a thread's message queue and return immediately, use the <see cref="PostMessage" /> or <see cref="PostThreadMessage" /> function.</para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</para>
      <para>Message sending is subject to UIPI. The thread of a process can send messages only to message queues of threads in processes of lesser or equal integrity level.</para>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
  </member>
  <member name="Windows.SendMessageCallback">
    <summary>Sends the specified message to a window or windows. It calls the window procedure for the specified window and returns immediately if the window belongs to another thread. After the window procedure processes the message, the system calls the specified callback function, passing the result of the message processing and an application-defined value to the callback function.</summary>
    <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <param name="lpResultCallBack">
      <para>A pointer to a callback function that the system calls after the window procedure processes the message. For more information, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-sendasyncproc">SendAsyncProc</a>.</para>
      <para>If <i>hWnd</i> is <b>HWND_BROADCAST</b> ((HWND)0xffff), the system calls the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-sendasyncproc">SendAsyncProc</a> callback function once for each top-level window.</para>
    </param>
    <param name="dwData">An application-defined value to be sent to the callback function pointed to by the <i>lpCallBack</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SendMessageCallbackA">
    <summary>Sends the specified message to a window or windows. It calls the window procedure for the specified window and returns immediately if the window belongs to another thread. After the window procedure processes the message, the system calls the specified callback function, passing the result of the message processing and an application-defined value to the callback function.</summary>
    <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <param name="lpResultCallBack">
      <para>A pointer to a callback function that the system calls after the window procedure processes the message. For more information, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-sendasyncproc">SendAsyncProc</a>.</para>
      <para>If <i>hWnd</i> is <b>HWND_BROADCAST</b> ((HWND)0xffff), the system calls the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-sendasyncproc">SendAsyncProc</a> callback function once for each top-level window.</para>
    </param>
    <param name="dwData">An application-defined value to be sent to the callback function pointed to by the <i>lpCallBack</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SendMessageCallbackW">
    <summary>Sends the specified message to a window or windows. It calls the window procedure for the specified window and returns immediately if the window belongs to another thread. After the window procedure processes the message, the system calls the specified callback function, passing the result of the message processing and an application-defined value to the callback function.</summary>
    <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <param name="lpResultCallBack">
      <para>A pointer to a callback function that the system calls after the window procedure processes the message. For more information, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-sendasyncproc">SendAsyncProc</a>.</para>
      <para>If <i>hWnd</i> is <b>HWND_BROADCAST</b> ((HWND)0xffff), the system calls the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-sendasyncproc">SendAsyncProc</a> callback function once for each top-level window.</para>
    </param>
    <param name="dwData">An application-defined value to be sent to the callback function pointed to by the <i>lpCallBack</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SendMessageCallback">
    <summary>Sends the specified message to a window or windows. It calls the window procedure for the specified window and returns immediately if the window belongs to another thread. After the window procedure processes the message, the system calls the specified callback function, passing the result of the message processing and an application-defined value to the callback function.</summary>
    <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <param name="lpResultCallBack">
      <para>A pointer to a callback function that the system calls after the window procedure processes the message. For more information, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-sendasyncproc">SendAsyncProc</a>.</para>
      <para>If <i>hWnd</i> is <b>HWND_BROADCAST</b> ((HWND)0xffff), the system calls the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-sendasyncproc">SendAsyncProc</a> callback function once for each top-level window.</para>
    </param>
    <param name="dwData">An application-defined value to be sent to the callback function pointed to by the <i>lpCallBack</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SendMessageCallbackA">
    <summary>Sends the specified message to a window or windows. It calls the window procedure for the specified window and returns immediately if the window belongs to another thread. After the window procedure processes the message, the system calls the specified callback function, passing the result of the message processing and an application-defined value to the callback function.</summary>
    <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <param name="lpResultCallBack">
      <para>A pointer to a callback function that the system calls after the window procedure processes the message. For more information, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-sendasyncproc">SendAsyncProc</a>.</para>
      <para>If <i>hWnd</i> is <b>HWND_BROADCAST</b> ((HWND)0xffff), the system calls the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-sendasyncproc">SendAsyncProc</a> callback function once for each top-level window.</para>
    </param>
    <param name="dwData">An application-defined value to be sent to the callback function pointed to by the <i>lpCallBack</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SendMessageCallbackW">
    <summary>Sends the specified message to a window or windows. It calls the window procedure for the specified window and returns immediately if the window belongs to another thread. After the window procedure processes the message, the system calls the specified callback function, passing the result of the message processing and an application-defined value to the callback function.</summary>
    <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <param name="lpResultCallBack">
      <para>A pointer to a callback function that the system calls after the window procedure processes the message. For more information, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-sendasyncproc">SendAsyncProc</a>.</para>
      <para>If <i>hWnd</i> is <b>HWND_BROADCAST</b> ((HWND)0xffff), the system calls the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-sendasyncproc">SendAsyncProc</a> callback function once for each top-level window.</para>
    </param>
    <param name="dwData">An application-defined value to be sent to the callback function pointed to by the <i>lpCallBack</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SendMessageTimeout">
    <summary>Sends the specified message to one or more windows.</summary>
    <param name="hWnd">
      <para>A handle to the window whose window procedure will receive the message.</para>
      <para>If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows. The function does not return until each window has timed out. Therefore, the total wait time can be up to the value of <i>uTimeout</i> multiplied by the number of top-level windows.</para>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Any additional message-specific information.</param>
    <param name="lParam">Any additional message-specific information.</param>
    <param name="fuFlags">
      <para>The behavior of this function. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_ABORTIFHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>The function returns without waiting for the time-out period to elapse if the receiving thread appears to not respond or "hangs."</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_BLOCK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Prevents the calling thread from processing any other requests until the function returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_NORMAL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000</term>
              </listheader>
            </list>
          </description>
          <description>The calling thread is not prevented from processing other requests while waiting for the function to return.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_NOTIMEOUTIFNOTHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>The function does not enforce the time-out period as long as the receiving thread is processing messages.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_ERRORONEXIT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0020</term>
              </listheader>
            </list>
          </description>
          <description>The function should return 0 if the receiving window is destroyed or its owning thread dies while the message is being processed.</description>
        </listheader>
      </list>
    </param>
    <param name="uTimeout">The duration of the time-out period, in milliseconds. If the message is a broadcast message, each window can use the full time-out period. For example, if you specify a five second time-out period and there are three top-level windows that fail to process the message, you could have up to a 15 second delay.</param>
    <param name="lpdwResult">The result of the message processing. The value of this parameter depends on the message that is specified.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero. <b>SendMessageTimeout</b> does not provide information about individual windows timing out if <b>HWND_BROADCAST</b> is used.</para>
      <para>If the function fails or times out, the return value is 0. To get extended error information, call <see cref="GetLastError" />. If <b>GetLastError</b> returns <b>ERROR_TIMEOUT</b>, then the function timed out.</para>
      <para>
        <b>Windows 2000:  </b>If <see cref="GetLastError" /> returns 0, then the function timed out.</para>
    </returns>
  </member>
  <member name="Windows.SendMessageTimeoutA">
    <summary>Sends the specified message to one or more windows.</summary>
    <param name="hWnd">
      <para>A handle to the window whose window procedure will receive the message.</para>
      <para>If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows. The function does not return until each window has timed out. Therefore, the total wait time can be up to the value of <i>uTimeout</i> multiplied by the number of top-level windows.</para>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Any additional message-specific information.</param>
    <param name="lParam">Any additional message-specific information.</param>
    <param name="fuFlags">
      <para>The behavior of this function. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_ABORTIFHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>The function returns without waiting for the time-out period to elapse if the receiving thread appears to not respond or "hangs."</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_BLOCK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Prevents the calling thread from processing any other requests until the function returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_NORMAL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000</term>
              </listheader>
            </list>
          </description>
          <description>The calling thread is not prevented from processing other requests while waiting for the function to return.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_NOTIMEOUTIFNOTHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>The function does not enforce the time-out period as long as the receiving thread is processing messages.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_ERRORONEXIT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0020</term>
              </listheader>
            </list>
          </description>
          <description>The function should return 0 if the receiving window is destroyed or its owning thread dies while the message is being processed.</description>
        </listheader>
      </list>
    </param>
    <param name="uTimeout">The duration of the time-out period, in milliseconds. If the message is a broadcast message, each window can use the full time-out period. For example, if you specify a five second time-out period and there are three top-level windows that fail to process the message, you could have up to a 15 second delay.</param>
    <param name="lpdwResult">The result of the message processing. The value of this parameter depends on the message that is specified.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero. <b>SendMessageTimeout</b> does not provide information about individual windows timing out if <b>HWND_BROADCAST</b> is used.</para>
      <para>If the function fails or times out, the return value is 0. To get extended error information, call <see cref="GetLastError" />. If <b>GetLastError</b> returns <b>ERROR_TIMEOUT</b>, then the function timed out.</para>
      <para>
        <b>Windows 2000:  </b>If <see cref="GetLastError" /> returns 0, then the function timed out.</para>
    </returns>
  </member>
  <member name="Windows.SendMessageTimeoutW">
    <summary>Sends the specified message to one or more windows.</summary>
    <param name="hWnd">
      <para>A handle to the window whose window procedure will receive the message.</para>
      <para>If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows. The function does not return until each window has timed out. Therefore, the total wait time can be up to the value of <i>uTimeout</i> multiplied by the number of top-level windows.</para>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Any additional message-specific information.</param>
    <param name="lParam">Any additional message-specific information.</param>
    <param name="fuFlags">
      <para>The behavior of this function. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_ABORTIFHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>The function returns without waiting for the time-out period to elapse if the receiving thread appears to not respond or "hangs."</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_BLOCK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Prevents the calling thread from processing any other requests until the function returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_NORMAL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000</term>
              </listheader>
            </list>
          </description>
          <description>The calling thread is not prevented from processing other requests while waiting for the function to return.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_NOTIMEOUTIFNOTHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>The function does not enforce the time-out period as long as the receiving thread is processing messages.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_ERRORONEXIT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0020</term>
              </listheader>
            </list>
          </description>
          <description>The function should return 0 if the receiving window is destroyed or its owning thread dies while the message is being processed.</description>
        </listheader>
      </list>
    </param>
    <param name="uTimeout">The duration of the time-out period, in milliseconds. If the message is a broadcast message, each window can use the full time-out period. For example, if you specify a five second time-out period and there are three top-level windows that fail to process the message, you could have up to a 15 second delay.</param>
    <param name="lpdwResult">The result of the message processing. The value of this parameter depends on the message that is specified.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero. <b>SendMessageTimeout</b> does not provide information about individual windows timing out if <b>HWND_BROADCAST</b> is used.</para>
      <para>If the function fails or times out, the return value is 0. To get extended error information, call <see cref="GetLastError" />. If <b>GetLastError</b> returns <b>ERROR_TIMEOUT</b>, then the function timed out.</para>
      <para>
        <b>Windows 2000:  </b>If <see cref="GetLastError" /> returns 0, then the function timed out.</para>
    </returns>
  </member>
  <member name="Windows.SendMessageTimeout">
    <summary>Sends the specified message to one or more windows.</summary>
    <param name="hWnd">
      <para>A handle to the window whose window procedure will receive the message.</para>
      <para>If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows. The function does not return until each window has timed out. Therefore, the total wait time can be up to the value of <i>uTimeout</i> multiplied by the number of top-level windows.</para>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Any additional message-specific information.</param>
    <param name="lParam">Any additional message-specific information.</param>
    <param name="fuFlags">
      <para>The behavior of this function. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_ABORTIFHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>The function returns without waiting for the time-out period to elapse if the receiving thread appears to not respond or "hangs."</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_BLOCK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Prevents the calling thread from processing any other requests until the function returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_NORMAL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000</term>
              </listheader>
            </list>
          </description>
          <description>The calling thread is not prevented from processing other requests while waiting for the function to return.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_NOTIMEOUTIFNOTHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>The function does not enforce the time-out period as long as the receiving thread is processing messages.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_ERRORONEXIT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0020</term>
              </listheader>
            </list>
          </description>
          <description>The function should return 0 if the receiving window is destroyed or its owning thread dies while the message is being processed.</description>
        </listheader>
      </list>
    </param>
    <param name="uTimeout">The duration of the time-out period, in milliseconds. If the message is a broadcast message, each window can use the full time-out period. For example, if you specify a five second time-out period and there are three top-level windows that fail to process the message, you could have up to a 15 second delay.</param>
    <param name="lpdwResult">The result of the message processing. The value of this parameter depends on the message that is specified.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero. <b>SendMessageTimeout</b> does not provide information about individual windows timing out if <b>HWND_BROADCAST</b> is used.</para>
      <para>If the function fails or times out, the return value is 0. To get extended error information, call <see cref="GetLastError" />. If <b>GetLastError</b> returns <b>ERROR_TIMEOUT</b>, then the function timed out.</para>
      <para>
        <b>Windows 2000:  </b>If <see cref="GetLastError" /> returns 0, then the function timed out.</para>
    </returns>
  </member>
  <member name="Windows.SendMessageTimeoutA">
    <summary>Sends the specified message to one or more windows.</summary>
    <param name="hWnd">
      <para>A handle to the window whose window procedure will receive the message.</para>
      <para>If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows. The function does not return until each window has timed out. Therefore, the total wait time can be up to the value of <i>uTimeout</i> multiplied by the number of top-level windows.</para>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Any additional message-specific information.</param>
    <param name="lParam">Any additional message-specific information.</param>
    <param name="fuFlags">
      <para>The behavior of this function. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_ABORTIFHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>The function returns without waiting for the time-out period to elapse if the receiving thread appears to not respond or "hangs."</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_BLOCK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Prevents the calling thread from processing any other requests until the function returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_NORMAL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000</term>
              </listheader>
            </list>
          </description>
          <description>The calling thread is not prevented from processing other requests while waiting for the function to return.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_NOTIMEOUTIFNOTHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>The function does not enforce the time-out period as long as the receiving thread is processing messages.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_ERRORONEXIT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0020</term>
              </listheader>
            </list>
          </description>
          <description>The function should return 0 if the receiving window is destroyed or its owning thread dies while the message is being processed.</description>
        </listheader>
      </list>
    </param>
    <param name="uTimeout">The duration of the time-out period, in milliseconds. If the message is a broadcast message, each window can use the full time-out period. For example, if you specify a five second time-out period and there are three top-level windows that fail to process the message, you could have up to a 15 second delay.</param>
    <param name="lpdwResult">The result of the message processing. The value of this parameter depends on the message that is specified.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero. <b>SendMessageTimeout</b> does not provide information about individual windows timing out if <b>HWND_BROADCAST</b> is used.</para>
      <para>If the function fails or times out, the return value is 0. To get extended error information, call <see cref="GetLastError" />. If <b>GetLastError</b> returns <b>ERROR_TIMEOUT</b>, then the function timed out.</para>
      <para>
        <b>Windows 2000:  </b>If <see cref="GetLastError" /> returns 0, then the function timed out.</para>
    </returns>
  </member>
  <member name="Windows.SendMessageTimeoutW">
    <summary>Sends the specified message to one or more windows.</summary>
    <param name="hWnd">
      <para>A handle to the window whose window procedure will receive the message.</para>
      <para>If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows. The function does not return until each window has timed out. Therefore, the total wait time can be up to the value of <i>uTimeout</i> multiplied by the number of top-level windows.</para>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Any additional message-specific information.</param>
    <param name="lParam">Any additional message-specific information.</param>
    <param name="fuFlags">
      <para>The behavior of this function. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_ABORTIFHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>The function returns without waiting for the time-out period to elapse if the receiving thread appears to not respond or "hangs."</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_BLOCK</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Prevents the calling thread from processing any other requests until the function returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_NORMAL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000</term>
              </listheader>
            </list>
          </description>
          <description>The calling thread is not prevented from processing other requests while waiting for the function to return.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_NOTIMEOUTIFNOTHUNG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>The function does not enforce the time-out period as long as the receiving thread is processing messages.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMTO_ERRORONEXIT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0020</term>
              </listheader>
            </list>
          </description>
          <description>The function should return 0 if the receiving window is destroyed or its owning thread dies while the message is being processed.</description>
        </listheader>
      </list>
    </param>
    <param name="uTimeout">The duration of the time-out period, in milliseconds. If the message is a broadcast message, each window can use the full time-out period. For example, if you specify a five second time-out period and there are three top-level windows that fail to process the message, you could have up to a 15 second delay.</param>
    <param name="lpdwResult">The result of the message processing. The value of this parameter depends on the message that is specified.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero. <b>SendMessageTimeout</b> does not provide information about individual windows timing out if <b>HWND_BROADCAST</b> is used.</para>
      <para>If the function fails or times out, the return value is 0. To get extended error information, call <see cref="GetLastError" />. If <b>GetLastError</b> returns <b>ERROR_TIMEOUT</b>, then the function timed out.</para>
      <para>
        <b>Windows 2000:  </b>If <see cref="GetLastError" /> returns 0, then the function timed out.</para>
    </returns>
  </member>
  <member name="Windows.SendMessage">
    <summary>
      <para>Sends the specified message to a window or windows. The <b>SendMessage</b> function calls the window procedure for the specified window and does not return until the window procedure has processed the message.</para>
      <para>To send a message and return immediately, use the <see cref="SendMessageCallback" /> or <see cref="SendNotifyMessage" /> function. To post a message to a thread's message queue and return immediately, use the <see cref="PostMessage" /> or <see cref="PostThreadMessage" /> function.</para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</para>
      <para>Message sending is subject to UIPI. The thread of a process can send messages only to message queues of threads in processes of lesser or equal integrity level.</para>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
  </member>
  <member name="Windows.SendMessageA">
    <summary>
      <para>Sends the specified message to a window or windows. The <b>SendMessage</b> function calls the window procedure for the specified window and does not return until the window procedure has processed the message.</para>
      <para>To send a message and return immediately, use the <see cref="SendMessageCallback" /> or <see cref="SendNotifyMessage" /> function. To post a message to a thread's message queue and return immediately, use the <see cref="PostMessage" /> or <see cref="PostThreadMessage" /> function.</para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</para>
      <para>Message sending is subject to UIPI. The thread of a process can send messages only to message queues of threads in processes of lesser or equal integrity level.</para>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
  </member>
  <member name="Windows.SendMessageW">
    <summary>
      <para>Sends the specified message to a window or windows. The <b>SendMessage</b> function calls the window procedure for the specified window and does not return until the window procedure has processed the message.</para>
      <para>To send a message and return immediately, use the <see cref="SendMessageCallback" /> or <see cref="SendNotifyMessage" /> function. To post a message to a thread's message queue and return immediately, use the <see cref="PostMessage" /> or <see cref="PostThreadMessage" /> function.</para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</para>
      <para>Message sending is subject to UIPI. The thread of a process can send messages only to message queues of threads in processes of lesser or equal integrity level.</para>
    </param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
  </member>
  <member name="Windows.SendNotifyMessage">
    <summary>Sends the specified message to a window or windows. If the window was created by the calling thread, <b>SendNotifyMessage</b> calls the window procedure for the window and does not return until the window procedure has processed the message. If the window was created by a different thread, <b>SendNotifyMessage</b> passes the message to the window procedure and returns immediately; it does not wait for the window procedure to finish processing the message.</summary>
    <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SendNotifyMessageA">
    <summary>Sends the specified message to a window or windows. If the window was created by the calling thread, <b>SendNotifyMessage</b> calls the window procedure for the window and does not return until the window procedure has processed the message. If the window was created by a different thread, <b>SendNotifyMessage</b> passes the message to the window procedure and returns immediately; it does not wait for the window procedure to finish processing the message.</summary>
    <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SendNotifyMessageW">
    <summary>Sends the specified message to a window or windows. If the window was created by the calling thread, <b>SendNotifyMessage</b> calls the window procedure for the window and does not return until the window procedure has processed the message. If the window was created by a different thread, <b>SendNotifyMessage</b> passes the message to the window procedure and returns immediately; it does not wait for the window procedure to finish processing the message.</summary>
    <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SendNotifyMessage">
    <summary>Sends the specified message to a window or windows. If the window was created by the calling thread, <b>SendNotifyMessage</b> calls the window procedure for the window and does not return until the window procedure has processed the message. If the window was created by a different thread, <b>SendNotifyMessage</b> passes the message to the window procedure and returns immediately; it does not wait for the window procedure to finish processing the message.</summary>
    <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SendNotifyMessageA">
    <summary>Sends the specified message to a window or windows. If the window was created by the calling thread, <b>SendNotifyMessage</b> calls the window procedure for the window and does not return until the window procedure has processed the message. If the window was created by a different thread, <b>SendNotifyMessage</b> passes the message to the window procedure and returns immediately; it does not wait for the window procedure to finish processing the message.</summary>
    <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SendNotifyMessageW">
    <summary>Sends the specified message to a window or windows. If the window was created by the calling thread, <b>SendNotifyMessage</b> calls the window procedure for the window and does not return until the window procedure has processed the message. If the window was created by a different thread, <b>SendNotifyMessage</b> passes the message to the window procedure and returns immediately; it does not wait for the window procedure to finish processing the message.</summary>
    <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is <b>HWND_BROADCAST</b> ((HWND)0xffff), the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
    <param name="Msg">
      <para>The message to be sent.</para>
      <para>For lists of the system-provided messages, see <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-messages-and-message-queues">System-Defined Messages</a>.</para>
    </param>
    <param name="wParam">Additional message-specific information.</param>
    <param name="lParam">Additional message-specific information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetActiveWindow">
    <summary>Activates a window. The window must be attached to the calling thread's message queue.</summary>
    <param name="hWnd">A handle to the top-level window to be activated.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the window that was previously active.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetAdditionalForegroundBoostProcesses">
    <summary>
      <para>
        <b>SetAdditionalForegroundBoostProcesses</b> is a performance assist API to help applications with a multi-process application model where multiple processes contribute to a foreground experience, either as data or rendering. Examples include browsers (with the browser manager or frame, tabs, plugins, etc. hosted in different processes) and IDEs (which spawn processes for compilation and other tasks).</para>
      <para>Applications can use this API to provide a foreground priority boost to worker processes that help support the main application. Such applications can have a uniform priority boost applied to all of their constituent processes when the application's top level window is in the foreground.</para>
    </summary>
    <param name="topLevelWindow">A handle to the top level window (HWND) of the application.</param>
    <param name="processHandleCount">The number of process handles in <b>processHandleArray</b>. This function can be called at a single time with a maximum of 32 handles. Set this parameter to <b>0</b> along with setting <b>processHandleArray</b> to <b>NULL</b> to clear a prior boost configuration.</param>
    <param name="processHandleArray">A group of process handles to be foreground boosted or de-boosted. Set this parameter to <b>NULL</b> along with setting <b>processHandleCount</b> to <b>0</b> to clear a prior boost configuration.</param>
    <returns>Returns <b>TRUE</b> if the call succeeds in boosting the application, <b>FALSE</b> otherwise. <b>SetAdditionalForegroundBoostProcesses</b> sets the last error code, so the application can call <see cref="GetLastError()" /> to obtain extended information if the call failed (for example, ERROR_INVALID_PARAMETER, ERROR_NOT_ENOUGH_MEMORY, or ERROR_ACCESS_DENIED).</returns>
  </member>
  <member name="Windows.SetCapture">
    <summary>
      <para>Sets the mouse capture to the specified window belonging to the current thread. <b>SetCapture</b> captures mouse input either when the mouse is over the capturing window, or when the mouse button was pressed while the mouse was over the capturing window and the button is still down. Only one window at a time can capture the mouse.</para>
      <para>If the mouse cursor is over a window created by another thread, the system will direct mouse input to the specified window only if a mouse button is down.</para>
    </summary>
    <param name="hWnd">A handle to the window in the current thread that is to capture the mouse.</param>
    <returns>The return value is a handle to the window that had previously captured the mouse. If there is no such window, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.SetCaretBlinkTime">
    <summary>Sets the caret blink time to the specified number of milliseconds. The blink time is the elapsed time, in milliseconds, required to invert the caret's pixels.</summary>
    <param name="uMSeconds">The new blink time, in milliseconds.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetCaretPos">
    <summary>Moves the caret to the specified coordinates. If the window that owns the caret was created with the <b>CS_OWNDC</b> class style, then the specified coordinates are subject to the mapping mode of the device context associated with that window.</summary>
    <param name="X">The new x-coordinate of the caret.</param>
    <param name="Y">The new y-coordinate of the caret.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetClassLong">
    <summary>
      <para>Replaces the specified 32-bit (<b>long</b>) value at the specified offset into the extra class memory or the <see cref="WNDCLASSEX" /> structure for the class to which the specified window belongs.</para>
      <div>
        <b>Note</b>  This function has been superseded by the <see cref="SetClassLongPtr" /> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>SetClassLongPtr</b>. 			</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be replaced. To set a 32-bit value in the extra class memory, specify the positive, zero-based byte offset of the value to be set. Valid values are in the range zero through the number of bytes of extra class memory, minus four; for example, if you specified 12 or more bytes of extra class memory, a value of 8 would be an index to the third 32-bit integer. To set any other value from the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra memory associated with the class. Setting this value does not change the number of extra bytes already allocated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra window memory associated with each window in the class. Setting this value does not change the number of extra bytes already allocated. For information on how to access this memory, see <see cref="SetWindowLong" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Replace a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the address of the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the address of the window procedure associated with the class.</description>
        </listheader>
      </list>
    </param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified 32-bit integer. If the value was not previously set, the return value is zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetClassLongA">
    <summary>
      <para>Replaces the specified 32-bit (<b>long</b>) value at the specified offset into the extra class memory or the <see cref="WNDCLASSEX" /> structure for the class to which the specified window belongs.</para>
      <div>
        <b>Note</b>  This function has been superseded by the <see cref="SetClassLongPtr" /> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>SetClassLongPtr</b>. 			</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be replaced. To set a 32-bit value in the extra class memory, specify the positive, zero-based byte offset of the value to be set. Valid values are in the range zero through the number of bytes of extra class memory, minus four; for example, if you specified 12 or more bytes of extra class memory, a value of 8 would be an index to the third 32-bit integer. To set any other value from the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra memory associated with the class. Setting this value does not change the number of extra bytes already allocated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra window memory associated with each window in the class. Setting this value does not change the number of extra bytes already allocated. For information on how to access this memory, see <see cref="SetWindowLong" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Replace a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the address of the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the address of the window procedure associated with the class.</description>
        </listheader>
      </list>
    </param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified 32-bit integer. If the value was not previously set, the return value is zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetClassLongW">
    <summary>
      <para>Replaces the specified 32-bit (<b>long</b>) value at the specified offset into the extra class memory or the <see cref="WNDCLASSEX" /> structure for the class to which the specified window belongs.</para>
      <div>
        <b>Note</b>  This function has been superseded by the <see cref="SetClassLongPtr" /> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>SetClassLongPtr</b>. 			</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be replaced. To set a 32-bit value in the extra class memory, specify the positive, zero-based byte offset of the value to be set. Valid values are in the range zero through the number of bytes of extra class memory, minus four; for example, if you specified 12 or more bytes of extra class memory, a value of 8 would be an index to the third 32-bit integer. To set any other value from the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra memory associated with the class. Setting this value does not change the number of extra bytes already allocated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra window memory associated with each window in the class. Setting this value does not change the number of extra bytes already allocated. For information on how to access this memory, see <see cref="SetWindowLong" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Replace a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the address of the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the address of the window procedure associated with the class.</description>
        </listheader>
      </list>
    </param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified 32-bit integer. If the value was not previously set, the return value is zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetClassLongPtr">
    <summary>
      <para>Replaces the specified value at the specified offset in the extra class memory or the <see cref="WNDCLASSEX" /> structure for the class to which the specified window belongs. <div><b>Note</b>  To write code that is compatible with both 32-bit and 64-bit Windows, use <b>SetClassLongPtr</b>. When compiling for 32-bit Windows, <b>SetClassLongPtr</b> is defined as a call to the <see cref="SetClassLong" /> function</div></para>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be replaced. To set a value in the extra class memory, specify the positive, zero-based byte offset of the value to be set. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To set a value other than the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra memory associated with the class. Setting this value does not change the number of extra bytes already allocated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra window memory associated with each window in the class. Setting this value does not change the number of extra bytes already allocated. For information on how to access this memory, see <see cref="SetWindowLongPtr" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_ HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the pointer to the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the pointer to the window procedure associated with the class.</description>
        </listheader>
      </list>
    </param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified offset. If this was not previously set, the return value is zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetClassLongPtrA">
    <summary>
      <para>Replaces the specified value at the specified offset in the extra class memory or the <see cref="WNDCLASSEX" /> structure for the class to which the specified window belongs. <div><b>Note</b>  To write code that is compatible with both 32-bit and 64-bit Windows, use <b>SetClassLongPtr</b>. When compiling for 32-bit Windows, <b>SetClassLongPtr</b> is defined as a call to the <see cref="SetClassLong" /> function</div></para>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be replaced. To set a value in the extra class memory, specify the positive, zero-based byte offset of the value to be set. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To set a value other than the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra memory associated with the class. Setting this value does not change the number of extra bytes already allocated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra window memory associated with each window in the class. Setting this value does not change the number of extra bytes already allocated. For information on how to access this memory, see <see cref="SetWindowLongPtr" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_ HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the pointer to the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the pointer to the window procedure associated with the class.</description>
        </listheader>
      </list>
    </param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified offset. If this was not previously set, the return value is zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetClassLongPtrW">
    <summary>
      <para>Replaces the specified value at the specified offset in the extra class memory or the <see cref="WNDCLASSEX" /> structure for the class to which the specified window belongs. <div><b>Note</b>  To write code that is compatible with both 32-bit and 64-bit Windows, use <b>SetClassLongPtr</b>. When compiling for 32-bit Windows, <b>SetClassLongPtr</b> is defined as a call to the <see cref="SetClassLong" /> function</div></para>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be replaced. To set a value in the extra class memory, specify the positive, zero-based byte offset of the value to be set. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To set a value other than the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra memory associated with the class. Setting this value does not change the number of extra bytes already allocated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra window memory associated with each window in the class. Setting this value does not change the number of extra bytes already allocated. For information on how to access this memory, see <see cref="SetWindowLongPtr" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_ HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the pointer to the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the pointer to the window procedure associated with the class.</description>
        </listheader>
      </list>
    </param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified offset. If this was not previously set, the return value is zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetClassLongPtr">
    <summary>
      <para>Replaces the specified value at the specified offset in the extra class memory or the <see cref="WNDCLASSEX" /> structure for the class to which the specified window belongs. <div><b>Note</b>  To write code that is compatible with both 32-bit and 64-bit Windows, use <b>SetClassLongPtr</b>. When compiling for 32-bit Windows, <b>SetClassLongPtr</b> is defined as a call to the <see cref="SetClassLong" /> function</div></para>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be replaced. To set a value in the extra class memory, specify the positive, zero-based byte offset of the value to be set. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To set a value other than the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra memory associated with the class. Setting this value does not change the number of extra bytes already allocated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra window memory associated with each window in the class. Setting this value does not change the number of extra bytes already allocated. For information on how to access this memory, see <see cref="SetWindowLongPtr" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_ HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the pointer to the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the pointer to the window procedure associated with the class.</description>
        </listheader>
      </list>
    </param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified offset. If this was not previously set, the return value is zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetClassLongPtrA">
    <summary>
      <para>Replaces the specified value at the specified offset in the extra class memory or the <see cref="WNDCLASSEX" /> structure for the class to which the specified window belongs. <div><b>Note</b>  To write code that is compatible with both 32-bit and 64-bit Windows, use <b>SetClassLongPtr</b>. When compiling for 32-bit Windows, <b>SetClassLongPtr</b> is defined as a call to the <see cref="SetClassLong" /> function</div></para>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be replaced. To set a value in the extra class memory, specify the positive, zero-based byte offset of the value to be set. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To set a value other than the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra memory associated with the class. Setting this value does not change the number of extra bytes already allocated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra window memory associated with each window in the class. Setting this value does not change the number of extra bytes already allocated. For information on how to access this memory, see <see cref="SetWindowLongPtr" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_ HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the pointer to the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the pointer to the window procedure associated with the class.</description>
        </listheader>
      </list>
    </param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified offset. If this was not previously set, the return value is zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetClassLongPtrW">
    <summary>
      <para>Replaces the specified value at the specified offset in the extra class memory or the <see cref="WNDCLASSEX" /> structure for the class to which the specified window belongs. <div><b>Note</b>  To write code that is compatible with both 32-bit and 64-bit Windows, use <b>SetClassLongPtr</b>. When compiling for 32-bit Windows, <b>SetClassLongPtr</b> is defined as a call to the <see cref="SetClassLong" /> function</div></para>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be replaced. To set a value in the extra class memory, specify the positive, zero-based byte offset of the value to be set. Valid values are in the range zero through the number of bytes of extra class memory, minus eight; for example, if you specified 24 or more bytes of extra class memory, a value of 16 would be an index to the third integer. To set a value other than the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra memory associated with the class. Setting this value does not change the number of extra bytes already allocated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra window memory associated with each window in the class. Setting this value does not change the number of extra bytes already allocated. For information on how to access this memory, see <see cref="SetWindowLongPtr" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_ HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Retrieves a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the pointer to the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the pointer to the window procedure associated with the class.</description>
        </listheader>
      </list>
    </param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified offset. If this was not previously set, the return value is zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetClassLong">
    <summary>
      <para>Replaces the specified 32-bit (<b>long</b>) value at the specified offset into the extra class memory or the <see cref="WNDCLASSEX" /> structure for the class to which the specified window belongs.</para>
      <div>
        <b>Note</b>  This function has been superseded by the <see cref="SetClassLongPtr" /> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>SetClassLongPtr</b>. 			</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be replaced. To set a 32-bit value in the extra class memory, specify the positive, zero-based byte offset of the value to be set. Valid values are in the range zero through the number of bytes of extra class memory, minus four; for example, if you specified 12 or more bytes of extra class memory, a value of 8 would be an index to the third 32-bit integer. To set any other value from the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra memory associated with the class. Setting this value does not change the number of extra bytes already allocated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra window memory associated with each window in the class. Setting this value does not change the number of extra bytes already allocated. For information on how to access this memory, see <see cref="SetWindowLong" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Replace a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the address of the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the address of the window procedure associated with the class.</description>
        </listheader>
      </list>
    </param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified 32-bit integer. If the value was not previously set, the return value is zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetClassLongA">
    <summary>
      <para>Replaces the specified 32-bit (<b>long</b>) value at the specified offset into the extra class memory or the <see cref="WNDCLASSEX" /> structure for the class to which the specified window belongs.</para>
      <div>
        <b>Note</b>  This function has been superseded by the <see cref="SetClassLongPtr" /> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>SetClassLongPtr</b>. 			</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be replaced. To set a 32-bit value in the extra class memory, specify the positive, zero-based byte offset of the value to be set. Valid values are in the range zero through the number of bytes of extra class memory, minus four; for example, if you specified 12 or more bytes of extra class memory, a value of 8 would be an index to the third 32-bit integer. To set any other value from the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra memory associated with the class. Setting this value does not change the number of extra bytes already allocated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra window memory associated with each window in the class. Setting this value does not change the number of extra bytes already allocated. For information on how to access this memory, see <see cref="SetWindowLong" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Replace a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the address of the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the address of the window procedure associated with the class.</description>
        </listheader>
      </list>
    </param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified 32-bit integer. If the value was not previously set, the return value is zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetClassLongW">
    <summary>
      <para>Replaces the specified 32-bit (<b>long</b>) value at the specified offset into the extra class memory or the <see cref="WNDCLASSEX" /> structure for the class to which the specified window belongs.</para>
      <div>
        <b>Note</b>  This function has been superseded by the <see cref="SetClassLongPtr" /> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>SetClassLongPtr</b>. 			</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The value to be replaced. To set a 32-bit value in the extra class memory, specify the positive, zero-based byte offset of the value to be set. Valid values are in the range zero through the number of bytes of extra class memory, minus four; for example, if you specified 12 or more bytes of extra class memory, a value of 8 would be an index to the third 32-bit integer. To set any other value from the <see cref="WNDCLASSEX" /> structure, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBCLSEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra memory associated with the class. Setting this value does not change the number of extra bytes already allocated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_CBWNDEXTRA</b>
                </term>
              </listheader>
              <listheader>
                <term>-18</term>
              </listheader>
            </list>
          </description>
          <description>Sets the size, in bytes, of the extra window memory associated with each window in the class. Setting this value does not change the number of extra bytes already allocated. For information on how to access this memory, see <see cref="SetWindowLong" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HBRBACKGROUND</b>
                </term>
              </listheader>
              <listheader>
                <term>-10</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the background brush associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HCURSOR</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the cursor associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICON</b>
                </term>
              </listheader>
              <listheader>
                <term>-14</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HICONSM</b>
                </term>
              </listheader>
              <listheader>
                <term>-34</term>
              </listheader>
            </list>
          </description>
          <description>Replace a handle to the small icon associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_HMODULE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Replaces a handle to the module that registered the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_MENUNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>-8</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the address of the menu name string. The string identifies the menu resource associated with the class.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-26</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the window-class style bits.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GCL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-24</term>
              </listheader>
            </list>
          </description>
          <description>Replaces the address of the window procedure associated with the class.</description>
        </listheader>
      </list>
    </param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified 32-bit integer. If the value was not previously set, the return value is zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetClassWord">
    <summary>
      <para>Replaces the 16-bit (<b>WORD</b>) value at the specified offset into the extra class memory for the window class to which the specified window belongs.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility with 16-bit versions of Windows. Applications should use the <see cref="SetClassLong" /> function.</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">The zero-based byte offset of the value to be replaced. Valid values are in the range zero through the number of bytes of class memory minus two; for example, if you specified 10 or more bytes of extra class memory, a value of 8 would be an index to the fifth 16-bit integer.</param>
    <param name="wNewWord">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified 16-bit integer. If the value was not previously set, the return value is zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetClipboardData">
    <summary>Places data on the clipboard in a specified clipboard format. The window must be the current clipboard owner, and the application must have called the <see cref="OpenClipboard" /> function. (When responding to the <a href="https://docs.microsoft.com//windows/win32/dataxchg/wm-renderformat">WM_RENDERFORMAT</a> message, the clipboard owner must not call <b>OpenClipboard</b> before calling <b>SetClipboardData</b>.)</summary>
    <param name="uFormat">The clipboard format. This parameter can be a registered format or any of the standard clipboard formats. For more information, see <a href="https://docs.microsoft.com//windows/desktop/dataxchg/standard-clipboard-formats">Standard Clipboard Formats</a> and <a href="https://docs.microsoft.com//windows/desktop/dataxchg/clipboard-formats">Registered Clipboard Formats</a>.</param>
    <param name="hMem">
      <para>A handle to the data in the specified format. This parameter can be <b>NULL</b>, indicating that the window provides data in the specified clipboard format (renders the format) upon request; this is known as <a href="https://docs.microsoft.com//windows/win32/dataxchg/clipboard-operations#delayed-rendering">delayed rendering</a>. If a window delays rendering, it must process the <a href="https://docs.microsoft.com//windows/win32/dataxchg/wm-renderformat">WM_RENDERFORMAT</a> and <a href="https://docs.microsoft.com//windows/win32/dataxchg/wm-renderallformats">WM_RENDERALLFORMATS</a> messages.</para>
      <para>If <b>SetClipboardData</b> succeeds, the system owns the object identified by the <i>hMem</i> parameter. The application may not write to or free the data once ownership has been transferred to the system, but it can lock and read from the data until the <see cref="CloseClipboard" /> function is called. (The memory must be unlocked before the Clipboard is closed.) If the <i>hMem</i> parameter identifies a memory object, the object must have been allocated using the function with the <b>GMEM_MOVEABLE</b> flag.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the data.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetClipboardViewer">
    <summary>Adds the specified window to the chain of clipboard viewers. Clipboard viewer windows receive a <a href="https://docs.microsoft.com//windows/desktop/dataxchg/wm-drawclipboard">WM_DRAWCLIPBOARD</a> message whenever the content of the clipboard changes. This function is used for backward compatibility with earlier versions of Windows.</summary>
    <param name="hWndNewViewer">A handle to the window to be added to the clipboard chain.</param>
    <returns>If the function succeeds, the return value identifies the next window in the clipboard viewer chain. If an error occurs or there are no other windows in the clipboard viewer chain, the return value is NULL. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.SetCoalescableTimer">
    <summary>Creates a timer with the specified time-out value and coalescing tolerance delay.</summary>
    <param name="hWnd">A handle to the window to be associated with the timer. This window must be owned by the calling thread. If a <b>NULL</b> value for <i>hWnd</i> is passed in along with an <i>nIDEvent</i> of an existing timer, that timer will be replaced in the same way that an existing non-NULL <i>hWnd</i> timer will be.</param>
    <param name="nIDEvent">A timer identifier. If the <i>hWnd</i> parameter is <b>NULL</b>, and the <i>nIDEvent</i> does not match an existing timer, then the <i>nIDEvent</i> is ignored and a new timer ID is generated. If the <i>hWnd</i> parameter is not <b>NULL</b> and the window specified by <i>hWnd</i> already has a timer with the value <i>nIDEvent</i>, then the existing timer is replaced by the new timer. When <b>SetCoalescableTimer</b> replaces a timer, the timer is reset. Therefore, a message will be sent after the current time-out value elapses, but the previously set time-out value is ignored. If the call is not intended to replace an existing timer, <i>nIDEvent</i> should be 0 if the <i>hWnd</i> is <b>NULL</b>.</param>
    <param name="uElapse">
      <para>The time-out value, in milliseconds.</para>
      <para>If <i>uElapse</i> is less than <b>USER_TIMER_MINIMUM</b> (0x0000000A), the timeout is set to <b>USER_TIMER_MINIMUM</b>. If <i>uElapse</i> is greater than <b>USER_TIMER_MAXIMUM</b> (0x7FFFFFFF), the timeout is set to <b>USER_TIMER_MAXIMUM</b>.</para>
      <para>If the sum of <i>uElapse</i> and <i>uToleranceDelay</i> exceeds <b>USER_TIMER_MAXIMUM</b>, an ERROR_INVALID_PARAMETER exception occurs.</para>
    </param>
    <param name="lpTimerFunc">A pointer to the function to be notified when the time-out value elapses. For more information about the function, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a>. If <i>lpTimerFunc</i> is <b>NULL</b>, the system posts a <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-timer">WM_TIMER</a> message to the application queue. The <b>hwnd</b> member of the message's <see cref="MSG" /> structure contains the value of the <i>hWnd</i> parameter.</param>
    <param name="uToleranceDelay">
      <para>It can be one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TIMERV_DEFAULT_COALESCING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Uses the system default timer coalescing.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TIMERV_NO_COALESCING</b>
                </term>
              </listheader>
              <listheader>
                <term>0xFFFFFFFF</term>
              </listheader>
            </list>
          </description>
          <description>Uses no timer coalescing. When this value is used, the created timer is not coalesced, no matter what the system default timer coalescing is or the application compatibility flags are.<div><b>Note</b>  Do not use this value unless you are certain that the timer requires no coalescing.</div></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>0x1 - 0x7FFFFFF5</term>
              </listheader>
            </list>
          </description>
          <description>Specifies the coalescing tolerance delay, in milliseconds. <para>Applications should set this value to the system default (<b>TIMERV_DEFAULT_COALESCING</b>) or the largest value possible.</para><para>If the sum of <i>uElapse</i> and <i>uToleranceDelay</i> exceeds <b>USER_TIMER_MAXIMUM</b> (0x7FFFFFFF), an ERROR_INVALID_PARAMETER exception occurs.</para><para>See <a href="https://download.microsoft.com/download/9/c/5/9c5b2167-8017-4bae-9fde-d599bac8184a/timercoal.docx">Windows Timer Coalescing</a> for more details and best practices.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>Any other value</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid value. If <i>uToleranceDelay</i> is set to an invalid value, the function fails and returns zero.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds and the <i>hWnd</i> parameter is <b>NULL</b>, the return value is an integer identifying the new timer. An application can pass this value to the <see cref="KillTimer" /> function to destroy the timer.</para>
      <para>If the function succeeds and the <i>hWnd</i> parameter is not <b>NULL</b>, then the return value is a nonzero integer. An application can pass the value of the <i>nIDEvent</i> parameter to the <see cref="KillTimer" /> function to destroy the timer.</para>
      <para>If the function fails to create a timer, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetCursor">
    <summary>Sets the cursor shape.</summary>
    <param name="hCursor">
      <para>A handle to the cursor.</para>
      <para>The cursor must have been created by either the <see cref="CreateCursor" /> or the <see cref="CreateIconIndirect" /> function, or loaded by either the <see cref="LoadCursor" /> or the <see cref="LoadImage" /> function.</para>
      <para>If this parameter is <b>NULL</b>, the cursor is removed from the screen.</para>
    </param>
    <returns>
      <para>The return value is the handle to the previous cursor, if there was one.</para>
      <para>If there was no previous cursor, the return value is <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.SetCursorPos">
    <summary>Moves the cursor to the specified screen coordinates. If the new coordinates are not within the screen rectangle set by the most recent <see cref="ClipCursor" /> function call, the system automatically adjusts the coordinates so that the cursor stays within the rectangle.</summary>
    <param name="X">The new x-coordinate of the cursor, in screen coordinates.</param>
    <param name="Y">The new y-coordinate of the cursor, in screen coordinates.</param>
    <returns>Returns nonzero if successful or zero otherwise. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.SetDialogResizeBehavior">
    <summary>Overrides the default per-monitor DPI scaling behavior of a child window in a dialog.</summary>
    <param name="hWnd">A handle for the window whose behavior will be modified.</param>
    <param name="mask">A mask specifying the subset of flags to be changed.</param>
    <param name="values">The desired value to be set for the specified subset of flags.</param>
    <returns>
      <para>This function returns TRUE if the operation was successful, and FALSE otherwise. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>Possible errors are <b>ERROR_INVALID_HANDLE</b> if passed an invalid HWND, and <b>ERROR_ACCESS_DENIED</b> if the windows belongs to another process.</para>
    </returns>
  </member>
  <member name="Windows.SetDialogDpiChangeBehavior">
    <summary>
      <para>Dialogs in <a href="https://docs.microsoft.com//windows/desktop/hidpi/dpi-awareness-context">Per-Monitor v2 contexts</a> are automatically DPI scaled. This method lets you customize their DPI change behavior.</para>
      <para>This function works in conjunction with the <see cref="DIALOG_DPI_CHANGE_BEHAVIORS" /> enum in order to override the default DPI scaling behavior for dialogs. This function is called on a specified dialog, for which the specified flags are individually saved.</para>
      <para>This function does not affect the DPI scaling behavior for the child windows of the dialog in question - that is done with <see cref="SetDialogControlDpiChangeBehavior" />.</para>
    </summary>
    <param name="hDlg">A handle for the dialog whose behavior will be modified.</param>
    <param name="mask">A mask specifying the subset of flags to be changed.</param>
    <param name="values">The desired value to be set for the specified subset of flags.</param>
    <returns>
      <para>This function returns TRUE if the operation was successful, and FALSE otherwise. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>Possible errors are <b>ERROR_INVALID_HANDLE</b> if passed an invalid dialog HWND, and <b>ERROR_ACCESS_DENIED</b> if the dialog belongs to another process.</para>
    </returns>
  </member>
  <member name="Windows.SetDisplayAutoRotationPreferences">
    <summary>Sets the screen auto-rotation preferences for the current process.</summary>
    <param name="orientation">Pointer to a location in memory with the screen orientation preferences to set for the calling process.</param>
    <returns>
      <para>TRUE if the method succeeds, otherwise FALSE.</para>
      <para>See <see cref="GetDisplayAutoRotationPreferences" /> for an example of using this function.</para>
    </returns>
  </member>
  <member name="Windows.SetDisplayConfig">
    <summary>The <b>SetDisplayConfig</b> function modifies the display topology, source, and target modes by exclusively enabling the specified paths in the current session.</summary>
    <param name="numPathArrayElements">Number of elements in <i>pathArray</i>.</param>
    <param name="pathArray">Array of all display paths that are to be set. Only the paths within this array that have the DISPLAYCONFIG_PATH_ACTIVE flag set in the <b>flags</b> member of <see cref="DISPLAYCONFIG_PATH_INFO" /> are set. This parameter can be <b>NULL</b>. The order in which active paths appear in this array determines the path priority. For more information about path priority order, see <a href="https://docs.microsoft.com//windows-hardware/drivers/display/path-priority-order">Path Priority Order</a>.</param>
    <param name="numModeInfoArrayElements">Number of elements in <i>modeInfoArray</i>.</param>
    <param name="modeInfoArray">Array of display source and target mode information (<see cref="DISPLAYCONFIG_MODE_INFO" />) that is referenced by the <b>modeInfoIdx</b> member of DISPLAYCONFIG_PATH_SOURCE_INFO and DISPLAYCONFIG_PATH_TARGET_INFO element of path information from <i>pathArray</i>. This parameter can be <b>NULL</b>.</param>
    <param name="flags">
      <para>A bitwise OR of flag values that indicates the behavior of this function. This parameter can be one the following values, or a combination of the following values; 0 is not valid. See below for a description of valid flag combinations.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SDC_APPLY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>The resulting topology, source, and target mode is set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SDC_NO_OPTIMIZATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>A modifier to the SDC_APPLY flag. This causes the change mode to be forced all the way down to the driver for each active display.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SDC_USE_SUPPLIED_DISPLAY_CONFIG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000020</term>
              </listheader>
            </list>
          </description>
          <description>The topology, source, and target mode information that are supplied in the <i>pathArray</i> and the <i>modeInfoArray</i> parameters are used, rather than looking up the configuration in the database.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SDC_SAVE_TO_DATABASE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>The resulting topology, source, and target mode are saved to the database.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SDC_VALIDATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>The system tests for the requested topology, source, and target mode information to determine whether it can be set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SDC_ALLOW_CHANGES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If required, the function can modify the specified source and target mode information in order to create a functional display path set.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SDC_TOPOLOGY_CLONE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>The caller requests the last clone configuration from the persistence database.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SDC_TOPOLOGY_EXTEND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>The caller requests the last extended configuration from the persistence database.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SDC_TOPOLOGY_INTERNAL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>The caller requests the last internal configuration from the persistence database.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SDC_TOPOLOGY_EXTERNAL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>The caller requests the last external configuration from the persistence database.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SDC_TOPOLOGY_SUPPLIED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>The caller provides the path data so the function only queries the persistence database to find and use the source and target mode.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SDC_USE_DATABASE_CURRENT</b>
                </term>
              </listheader>
              <listheader>
                <term>(SDC_TOPOLOGY_INTERNAL | SDC_TOPOLOGY_CLONE | SDC_TOPOLOGY_EXTEND | SDC_TOPOLOGY_EXTERNAL)</term>
              </listheader>
            </list>
          </description>
          <description>The caller requests a combination of all four SDC_TOPOLOGY_XXX configurations. This value informs the API to set the last known display configuration for the current connected monitors.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SDC_PATH_PERSIST_IF_REQUIRED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>When the function processes a SDC_TOPOLOGY_XXX request, it can force path persistence on a target to satisfy the request if necessary. For information about the other flags that this flag can be combined with, see the following list.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SDC_FORCE_MODE_ENUMERATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>The caller requests that the driver is given an opportunity to update the GDI mode list while <b>SetDisplayConfig</b> sets the new display configuration. This flag value is only valid when the SDC_USE_SUPPLIED_DISPLAY_CONFIG and SDC_APPLY flag values are also specified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SDC_ALLOW_PATH_ORDER_CHANGES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00002000</term>
              </listheader>
            </list>
          </description>
          <description>A modifier to the SDC_TOPOLOGY_SUPPLIED flag that indicates that <b>SetDisplayConfig</b> should ignore the path order of the supplied topology when searching the database. When this flag is set, the topology set is the most recent topology that contains all the paths regardless of the path order.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SDC_VIRTUAL_MODE_AWARE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00008000</term>
              </listheader>
            </list>
          </description>
          <description>A modifier to the SDC_USE_SUPPLIED_DISPLAY_CONFIG and SDC_TOPOLOGY_SUPPLIED flags that the caller is aware of virtual modes. Supported starting in Windows 10.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SDC_VIRTUAL_REFRESH_RATE_AWARE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00020000</term>
              </listheader>
            </list>
          </description>
          <description>A modifier to the SDC_USE_SUPPLIED_DISPLAY_CONFIG and SDC_TOPOLOGY_SUPPLIED flags that the caller is aware of virtual refresh rates. Supported starting in Windows 11.</description>
        </listheader>
      </list>
      <para>The following list contains valid combinations of values for the <i>Flags</i> parameter:</para>
      <list type="bullet">
        <item>
          <description>Either SDC_APPLY or SDC_VALIDATE must be set, but not both.</description>
        </item>
        <item>
          <description>Either SDC_USE_SUPPLIED_DISPLAY_CONFIG or any combinations of SDC_TOPOLOGY_XXX must be set. SDC_USE_SUPPLIED_DISPLAY_CONFIG cannot be set with any SDC_TOPOLOGY_XXX flag.</description>
        </item>
        <item>
          <description>SDC_NO_OPTIMIZATION can only be set with SDC_APPLY.</description>
        </item>
        <item>
          <description>SDC_ALLOW_CHANGES is allowed with any other valid combination.</description>
        </item>
        <item>
          <description>SDC_SAVE_TO_DATABASE can only be set with SDC_USE_SUPPLIED_DISPLAY_CONFIG.</description>
        </item>
        <item>
          <description>SDC_PATH_PERSIST_IF_REQUIRED cannot be used with SDC_USE_SUPPLIED_DISPLAY_CONFIG or SDC_TOPOLOGY_SUPPLIED.</description>
        </item>
        <item>
          <description>SDC_FORCE_MODE_ENUMERATION is only valid when SDC_APPLY and SDC_USE_SUPPLIED_DISPLAY_CONFIG are specified.</description>
        </item>
        <item>
          <description>SDC_ALLOW_PATH_ORDER_CHANGES is allowed only when SDC_TOPOLOGY_SUPPLIED is specified.</description>
        </item>
        <item>
          <description>SDC_TOPOLOGY_SUPPLIED cannot be used with any other SDC_TOPOLOGY_XXX flag. Because of a validation issue, if a caller violates this rule, <b>SetDisplayConfig</b> does not fail. However, <b>SetDisplayConfig</b> ignores the SDC_TOPOLOGY_SUPPLIED flag.</description>
        </item>
      </list>SDC_TOPOLOGY_XXX flags can be used in combinations. For example, if SDC_TOPOLOGY_CLONE and SDC_TOPOLOGY_EXTEND are set, the API uses the most recent clone or extend topology, which every topology was set with most recently for the current connected monitors.</param>
    <returns>
      <para>The function returns one of the following return codes.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_SUCCESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The combination of parameters and flags specified is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_NOT_SUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The system is not running a graphics driver that was written according to the <a href="https://docs.microsoft.com//windows-hardware/drivers/display/windows-vista-display-driver-model-design-guide">Windows Display Driver Model (WDDM)</a>. The function is only supported on a system with a WDDM driver running.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_ACCESS_DENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller does not have access to the console session. This error occurs if the calling process does not have access to the current desktop or is running on a remote session.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_GEN_FAILURE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An unspecified error occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_BAD_CONFIGURATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function could not find a workable solution for the source and target modes that the caller did not specify.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SetDlgItemInt">
    <summary>Sets the text of a control in a dialog box to the string representation of a specified integer value.</summary>
    <param name="hDlg">A handle to the dialog box that contains the control.</param>
    <param name="nIDDlgItem">The control to be changed.</param>
    <param name="uValue">The integer value used to generate the item text.</param>
    <param name="bSigned">Indicates whether the <i>uValue</i> parameter is signed or unsigned. If this parameter is <b>TRUE</b>, <i>uValue</i> is signed. If this parameter is <b>TRUE</b> and <i>uValue</i> is less than zero, a minus sign is placed before the first digit in the string. If this parameter is <b>FALSE</b>, <i>uValue</i> is unsigned.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetDlgItemText">
    <summary>Sets the title or text of a control in a dialog box.</summary>
    <param name="hDlg">A handle to the dialog box that contains the control.</param>
    <param name="nIDDlgItem">The control with a title or text to be set.</param>
    <param name="lpString">The text to be copied to the control.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetDlgItemTextA">
    <summary>Sets the title or text of a control in a dialog box.</summary>
    <param name="hDlg">A handle to the dialog box that contains the control.</param>
    <param name="nIDDlgItem">The control with a title or text to be set.</param>
    <param name="lpString">The text to be copied to the control.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetDlgItemTextW">
    <summary>Sets the title or text of a control in a dialog box.</summary>
    <param name="hDlg">A handle to the dialog box that contains the control.</param>
    <param name="nIDDlgItem">The control with a title or text to be set.</param>
    <param name="lpString">The text to be copied to the control.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetDlgItemText">
    <summary>Sets the title or text of a control in a dialog box.</summary>
    <param name="hDlg">A handle to the dialog box that contains the control.</param>
    <param name="nIDDlgItem">The control with a title or text to be set.</param>
    <param name="lpString">The text to be copied to the control.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetDlgItemTextA">
    <summary>Sets the title or text of a control in a dialog box.</summary>
    <param name="hDlg">A handle to the dialog box that contains the control.</param>
    <param name="nIDDlgItem">The control with a title or text to be set.</param>
    <param name="lpString">The text to be copied to the control.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetDlgItemTextW">
    <summary>Sets the title or text of a control in a dialog box.</summary>
    <param name="hDlg">A handle to the dialog box that contains the control.</param>
    <param name="nIDDlgItem">The control with a title or text to be set.</param>
    <param name="lpString">The text to be copied to the control.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetDoubleClickTime">
    <summary>Sets the double-click time for the mouse. A double-click is a series of two clicks of a mouse button, the second occurring within a specified time after the first. The double-click time is the maximum number of milliseconds that may occur between the first and second clicks of a double-click.</summary>
    <param name="unnamedParam1">The number of milliseconds that may occur between the first and second clicks of a double-click. If this parameter is set to 0, the system uses the default double-click time of 500 milliseconds. If this parameter value is greater than 5000 milliseconds, the system sets the value to 5000 milliseconds.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetFocus">
    <summary>Sets the keyboard focus to the specified window. The window must be attached to the calling thread's message queue.</summary>
    <param name="hWnd">A handle to the window that will receive the keyboard input. If this parameter is NULL, keystrokes are ignored.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the window that previously had the keyboard focus. If the <i>hWnd</i> parameter is invalid or the window is not attached to the calling thread's message queue, the return value is NULL. To get extended error information, call <see cref="GetLastError function" />.</para>
      <para>Extended error ERROR_INVALID_PARAMETER (0x57) means that window is in disabled state.</para>
    </returns>
  </member>
  <member name="Windows.SetForegroundWindow">
    <summary>Brings the thread that created the specified window into the foreground and activates the window. Keyboard input is directed to the window, and various visual cues are changed for the user. The system assigns a slightly higher priority to the thread that created the foreground window than it does to other threads.</summary>
    <param name="hWnd">A handle to the window that should be activated and brought to the foreground.</param>
    <returns>
      <para>If the window was brought to the foreground, the return value is nonzero.</para>
      <para>If the window was not brought to the foreground, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetGestureConfig">
    <summary>Configures the messages that are sent from a window for Windows Touch gestures.</summary>
    <param name="hwnd">A handle to the window to set the gesture configuration on.</param>
    <param name="dwReserved">This value is reserved and must be set to 0.</param>
    <param name="cIDs">A count of the gesture configuration structures that are being passed.</param>
    <param name="pGestureConfig">An array of gesture configuration structures that specify the gesture configuration.</param>
    <param name="cbSize">The size of the gesture configuration (<see cref="GESTURECONFIG" />) structure.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.SetKeyboardState">
    <summary>Copies an array of keyboard key states into the calling thread's keyboard input-state table. This is the same table accessed by the <see cref="GetKeyboardState" /> and <see cref="GetKeyState" /> functions. Changes made to this table do not affect keyboard input to any other thread.</summary>
    <param name="lpKeyState">A pointer to a 256-byte array that contains keyboard key states.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetLastErrorEx">
    <summary>
      <para>Sets the last-error code.</para>
      <para>Currently, this function is identical to the<see cref="SetLastError" /> function. The second parameter is ignored.</para>
    </summary>
    <param name="dwErrCode">The last-error code for the thread.</param>
    <param name="dwType">This parameter is ignored.</param>
  </member>
  <member name="Windows.SetLayeredWindowAttributes">
    <summary>Sets the opacity and transparency color key of a layered window.</summary>
    <param name="hwnd">
      <para>A handle to the layered window. A layered window is created by specifying <b>WS_EX_LAYERED</b> when creating the window with the <see cref="CreateWindowEx" /> function or by setting <b>WS_EX_LAYERED</b> via <see cref="SetWindowLong" /> after the window has been created.</para>
      <para>
        <b>Windows 8:  </b>The <b>WS_EX_LAYERED</b> style is supported for top-level windows and child windows. Previous Windows versions support <b>WS_EX_LAYERED</b> only for top-level windows.</para>
    </param>
    <param name="crKey">A <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> structure that specifies the transparency color key to be used when composing the layered window. All pixels painted by the window in this color will be transparent. To generate a <b>COLORREF</b>, use the <see cref="RGB" /> macro.</param>
    <param name="bAlpha">Alpha value used to describe the opacity of the layered window. Similar to the <b>SourceConstantAlpha</b> member of the <see cref="BLENDFUNCTION" /> structure. When <i>bAlpha</i> is 0, the window is completely transparent. When <i>bAlpha</i> is 255, the window is opaque.</param>
    <param name="dwFlags">
      <para>An action to be taken. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LWA_ALPHA</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Use <i>bAlpha</i> to determine the opacity of the layered window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LWA_COLORKEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Use <i>crKey</i> as the transparency color.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetMenu">
    <summary>Assigns a new menu to the specified window.</summary>
    <param name="hWnd">A handle to the window to which the menu is to be assigned.</param>
    <param name="hMenu">A handle to the new menu. If this parameter is <b>NULL</b>, the window's current menu is removed.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetMenuContextHelpId">
    <summary>Associates a Help context identifier with a menu.</summary>
    <param name="unnamedParam1">A handle to the menu with which to associate the Help context identifier.</param>
    <param name="unnamedParam2">The help context identifier.</param>
    <returns>
      <para>Returns nonzero if successful, or zero otherwise.</para>
      <para>To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetMenuDefaultItem">
    <summary>Sets the default menu item for the specified menu.</summary>
    <param name="hMenu">A handle to the menu to set the default item for.</param>
    <param name="uItem">The identifier or position of the new default menu item or -1 for no default item. The meaning of this parameter depends on the value of<i>fByPos</i>.</param>
    <param name="fByPos">The meaning of <i>uItem</i>. If this parameter is <b>FALSE</b>, <i>uItem</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com//windows/desktop/menurc/about-menus">About Menus</a> for more information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.SetMenuInfo">
    <summary>Sets information for a specified menu.</summary>
    <param name="unnamedParam1">A handle to a menu.</param>
    <param name="unnamedParam2">A pointer to a <see cref="MENUINFO" /> structure for the menu.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetMenuItemBitmaps">
    <summary>Associates the specified bitmap with a menu item. Whether the menu item is selected or clear, the system displays the appropriate bitmap next to the menu item.</summary>
    <param name="hMenu">A handle to the menu containing the item to receive new check-mark bitmaps.</param>
    <param name="uPosition">The menu item to be changed, as determined by the <i>uFlags</i> parameter.</param>
    <param name="uFlags">
      <para>Specifies how the <i>uPosition</i> parameter is to be interpreted. The <i>uFlags</i> parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYCOMMAND</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uPosition</i> gives the identifier of the menu item. If neither <b>MF_BYCOMMAND</b> nor <b>MF_BYPOSITION</b> is specified, <b>MF_BYCOMMAND</b> is the default flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MF_BYPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400L</term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>uPosition</i> gives the zero-based relative position of the menu item.</description>
        </listheader>
      </list>
    </param>
    <param name="hBitmapUnchecked">A handle to the bitmap displayed when the menu item is not selected.</param>
    <param name="hBitmapChecked">A handle to the bitmap displayed when the menu item is selected.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetMenuItemInfo">
    <summary>Changes information about a menu item.</summary>
    <param name="hmenu">A handle to the menu that contains the menu item.</param>
    <param name="item">The identifier or position of the menu item to change. The meaning of this parameter depends on the value of <i>fByPosition</i>.</param>
    <param name="fByPosition">The meaning of <i>uItem</i>. If this parameter is <b>FALSE</b>, <i>uItem</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com//windows/desktop/menurc/about-menus">About Menus</a> for more information.</param>
    <param name="lpmii">A pointer to a <see cref="MENUITEMINFO" /> structure that contains information about the menu item and specifies which menu item attributes to change.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.SetMenuItemInfoA">
    <summary>Changes information about a menu item.</summary>
    <param name="hmenu">A handle to the menu that contains the menu item.</param>
    <param name="item">The identifier or position of the menu item to change. The meaning of this parameter depends on the value of <i>fByPosition</i>.</param>
    <param name="fByPosition">The meaning of <i>uItem</i>. If this parameter is <b>FALSE</b>, <i>uItem</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com//windows/desktop/menurc/about-menus">About Menus</a> for more information.</param>
    <param name="lpmii">A pointer to a <see cref="MENUITEMINFO" /> structure that contains information about the menu item and specifies which menu item attributes to change.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.SetMenuItemInfoW">
    <summary>Changes information about a menu item.</summary>
    <param name="hmenu">A handle to the menu that contains the menu item.</param>
    <param name="item">The identifier or position of the menu item to change. The meaning of this parameter depends on the value of <i>fByPosition</i>.</param>
    <param name="fByPosition">The meaning of <i>uItem</i>. If this parameter is <b>FALSE</b>, <i>uItem</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com//windows/desktop/menurc/about-menus">About Menus</a> for more information.</param>
    <param name="lpmii">A pointer to a <see cref="MENUITEMINFO" /> structure that contains information about the menu item and specifies which menu item attributes to change.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.SetMenuItemInfo">
    <summary>Changes information about a menu item.</summary>
    <param name="hmenu">A handle to the menu that contains the menu item.</param>
    <param name="item">The identifier or position of the menu item to change. The meaning of this parameter depends on the value of <i>fByPosition</i>.</param>
    <param name="fByPosition">The meaning of <i>uItem</i>. If this parameter is <b>FALSE</b>, <i>uItem</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com//windows/desktop/menurc/about-menus">About Menus</a> for more information.</param>
    <param name="lpmii">A pointer to a <see cref="MENUITEMINFO" /> structure that contains information about the menu item and specifies which menu item attributes to change.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.SetMenuItemInfoA">
    <summary>Changes information about a menu item.</summary>
    <param name="hmenu">A handle to the menu that contains the menu item.</param>
    <param name="item">The identifier or position of the menu item to change. The meaning of this parameter depends on the value of <i>fByPosition</i>.</param>
    <param name="fByPosition">The meaning of <i>uItem</i>. If this parameter is <b>FALSE</b>, <i>uItem</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com//windows/desktop/menurc/about-menus">About Menus</a> for more information.</param>
    <param name="lpmii">A pointer to a <see cref="MENUITEMINFO" /> structure that contains information about the menu item and specifies which menu item attributes to change.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.SetMenuItemInfoW">
    <summary>Changes information about a menu item.</summary>
    <param name="hmenu">A handle to the menu that contains the menu item.</param>
    <param name="item">The identifier or position of the menu item to change. The meaning of this parameter depends on the value of <i>fByPosition</i>.</param>
    <param name="fByPosition">The meaning of <i>uItem</i>. If this parameter is <b>FALSE</b>, <i>uItem</i> is a menu item identifier. Otherwise, it is a menu item position. See <a href="https://docs.microsoft.com//windows/desktop/menurc/about-menus">About Menus</a> for more information.</param>
    <param name="lpmii">A pointer to a <see cref="MENUITEMINFO" /> structure that contains information about the menu item and specifies which menu item attributes to change.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.SetMessageExtraInfo">
    <summary>Sets the extra message information for the current thread. Extra message information is an application- or driver-defined value associated with the current thread's message queue. An application can use the <see cref="GetMessageExtraInfo" /> function to retrieve a thread's extra message information.</summary>
    <param name="lParam">The value to be associated with the current thread.</param>
    <returns>The return value is the previous value associated with the current thread.</returns>
  </member>
  <member name="Windows.SetParent">
    <summary>Changes the parent window of the specified child window.</summary>
    <param name="hWndChild">A handle to the child window.</param>
    <param name="hWndNewParent">A handle to the new parent window. If this parameter is <b>NULL</b>, the desktop window becomes the new parent window. If this parameter is <b>HWND_MESSAGE</b>, the child window becomes a <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-features">message-only window</a>.</param>
    <returns>
      <para>If the function succeeds, the return value is a handle to the previous parent window.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetPhysicalCursorPos">
    <summary>Sets the position of the cursor in physical coordinates.</summary>
    <param name="X">The new x-coordinate of the cursor, in physical coordinates.</param>
    <param name="Y">The new y-coordinate of the cursor, in physical coordinates.</param>
    <returns>
      <b>TRUE</b> if successful; otherwise <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.SetProcessDefaultLayout">
    <summary>Changes the default layout when windows are created with no parent or owner only for the currently running process.</summary>
    <param name="dwDefaultLayout">
      <para>The default process layout. This parameter can be 0 or the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LAYOUT_RTL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Sets the default horizontal layout to be right to left.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetProcessDPIAware">
    <summary>
      <para>Sets the process-default DPI awareness to system-DPI awareness. This is equivalent to calling <see cref="SetProcessDpiAwarenessContext" /> with a <a href="https://docs.microsoft.com//windows/desktop/hidpi/dpi-awareness-context">DPI_AWARENESS_CONTEXT</a> value of DPI_AWARENESS_CONTEXT_SYSTEM_AWARE.</para>
      <blockquote>[!NOTE] It is recommended that you set the process-default DPI awareness via application manifest, not an API call. See <a href="https://docs.microsoft.com//windows/win32/hidpi/setting-the-default-dpi-awareness-for-a-process">Setting the default DPI awareness for a process</a> for more information. Setting the process-default DPI awareness via API call can lead to unexpected application behavior.</blockquote>
    </summary>
    <returns>If the function succeeds, the return value is nonzero. Otherwise, the return value is zero.</returns>
  </member>
  <member name="Windows.SetProcessDpiAwarenessContext">
    <summary>
      <para>Sets the current process to a specified dots per inch (dpi) awareness context. The DPI awareness contexts are from the <a href="https://docs.microsoft.com//windows/desktop/hidpi/dpi-awareness-context">DPI_AWARENESS_CONTEXT</a> value.</para>
      <blockquote>[!NOTE] It is recommended that you set the process-default DPI awareness via application manifest, not an API call. See <a href="https://docs.microsoft.com//windows/win32/hidpi/setting-the-default-dpi-awareness-for-a-process">Setting the default DPI awareness for a process</a> for more information. Setting the process-default DPI awareness via API call can lead to unexpected application behavior.</blockquote>
    </summary>
    <param name="value">A <a href="https://docs.microsoft.com//windows/desktop/hidpi/dpi-awareness-context">DPI_AWARENESS_CONTEXT</a> handle to set.</param>
    <returns>
      <para>This function returns TRUE if the operation was successful, and FALSE otherwise. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>Possible errors are <b>ERROR_INVALID_PARAMETER</b> for an invalid input, and <b>ERROR_ACCESS_DENIED</b> if the default API awareness mode for the process has already been set (via a previous API call or within the application manifest).</para>
    </returns>
  </member>
  <member name="Windows.SetProcessRestrictionExemption">
    <summary>
      <para>Exempts the calling process from restrictions preventing desktop processes from interacting with the Windows Store app environment. This function is used by development and debugging tools.</para>
      <para>This function only succeeds if a developer license is present on the system. Once successful the calling process will be able to perform the following actions, subject to User Interface Privilege Isolation (UIPI) restrictions:</para>
      <list type="bullet">
        <item>
          <description>Attach global hooks (and event hooks) to Windows Store app processes.</description>
        </item>
        <item>
          <description>Attach input queues between Windows Store app processes, Windows Store app browsers, system processes, and desktop application processes.</description>
        </item>
        <item>
          <description>Change foreground arbitrarily between the Windows Store app and desktop environments.</description>
        </item>
      </list>
    </summary>
    <param name="fEnableExemption">When set to TRUE, indicates a request to disable exemption for the calling process.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetProcessWindowStation">
    <summary>Assigns the specified window station to the calling process. This enables the process to access objects in the window station such as desktops, the clipboard, and global atoms. All subsequent operations on the window station use the access rights granted to <i>hWinSta</i>.</summary>
    <param name="hWinSta">
      <para>A handle to the window station. This can be a handle returned by the<see cref="CreateWindowStation" />,<see cref="OpenWindowStation" />, or<see cref="GetProcessWindowStation" /> function.</para>
      <para>This window station must be associated with the current session.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetProp">
    <summary>Adds a new entry or changes an existing entry in the property list of the specified window. The function adds a new entry to the list if the specified character string does not exist already in the list. The new entry contains the string and the handle. Otherwise, the function replaces the string's current handle with the specified handle.</summary>
    <param name="hWnd">A handle to the window whose property list receives the new entry.</param>
    <param name="lpString">A null-terminated string or an atom that identifies a string. If this parameter is an atom, it must be a global atom created by a previous call to the <see cref="GlobalAddAtom" /> function. The atom must be placed in the low-order word of <i>lpString</i>; the high-order word must be zero.</param>
    <param name="hData">A handle to the data to be copied to the property list. The data handle can identify any value useful to the application.</param>
    <returns>
      <para>If the data handle and string are added to the property list, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetPropA">
    <summary>Adds a new entry or changes an existing entry in the property list of the specified window. The function adds a new entry to the list if the specified character string does not exist already in the list. The new entry contains the string and the handle. Otherwise, the function replaces the string's current handle with the specified handle.</summary>
    <param name="hWnd">A handle to the window whose property list receives the new entry.</param>
    <param name="lpString">A null-terminated string or an atom that identifies a string. If this parameter is an atom, it must be a global atom created by a previous call to the <see cref="GlobalAddAtom" /> function. The atom must be placed in the low-order word of <i>lpString</i>; the high-order word must be zero.</param>
    <param name="hData">A handle to the data to be copied to the property list. The data handle can identify any value useful to the application.</param>
    <returns>
      <para>If the data handle and string are added to the property list, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetPropW">
    <summary>Adds a new entry or changes an existing entry in the property list of the specified window. The function adds a new entry to the list if the specified character string does not exist already in the list. The new entry contains the string and the handle. Otherwise, the function replaces the string's current handle with the specified handle.</summary>
    <param name="hWnd">A handle to the window whose property list receives the new entry.</param>
    <param name="lpString">A null-terminated string or an atom that identifies a string. If this parameter is an atom, it must be a global atom created by a previous call to the <see cref="GlobalAddAtom" /> function. The atom must be placed in the low-order word of <i>lpString</i>; the high-order word must be zero.</param>
    <param name="hData">A handle to the data to be copied to the property list. The data handle can identify any value useful to the application.</param>
    <returns>
      <para>If the data handle and string are added to the property list, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetProp">
    <summary>Adds a new entry or changes an existing entry in the property list of the specified window. The function adds a new entry to the list if the specified character string does not exist already in the list. The new entry contains the string and the handle. Otherwise, the function replaces the string's current handle with the specified handle.</summary>
    <param name="hWnd">A handle to the window whose property list receives the new entry.</param>
    <param name="lpString">A null-terminated string or an atom that identifies a string. If this parameter is an atom, it must be a global atom created by a previous call to the <see cref="GlobalAddAtom" /> function. The atom must be placed in the low-order word of <i>lpString</i>; the high-order word must be zero.</param>
    <param name="hData">A handle to the data to be copied to the property list. The data handle can identify any value useful to the application.</param>
    <returns>
      <para>If the data handle and string are added to the property list, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetPropA">
    <summary>Adds a new entry or changes an existing entry in the property list of the specified window. The function adds a new entry to the list if the specified character string does not exist already in the list. The new entry contains the string and the handle. Otherwise, the function replaces the string's current handle with the specified handle.</summary>
    <param name="hWnd">A handle to the window whose property list receives the new entry.</param>
    <param name="lpString">A null-terminated string or an atom that identifies a string. If this parameter is an atom, it must be a global atom created by a previous call to the <see cref="GlobalAddAtom" /> function. The atom must be placed in the low-order word of <i>lpString</i>; the high-order word must be zero.</param>
    <param name="hData">A handle to the data to be copied to the property list. The data handle can identify any value useful to the application.</param>
    <returns>
      <para>If the data handle and string are added to the property list, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetPropW">
    <summary>Adds a new entry or changes an existing entry in the property list of the specified window. The function adds a new entry to the list if the specified character string does not exist already in the list. The new entry contains the string and the handle. Otherwise, the function replaces the string's current handle with the specified handle.</summary>
    <param name="hWnd">A handle to the window whose property list receives the new entry.</param>
    <param name="lpString">A null-terminated string or an atom that identifies a string. If this parameter is an atom, it must be a global atom created by a previous call to the <see cref="GlobalAddAtom" /> function. The atom must be placed in the low-order word of <i>lpString</i>; the high-order word must be zero.</param>
    <param name="hData">A handle to the data to be copied to the property list. The data handle can identify any value useful to the application.</param>
    <returns>
      <para>If the data handle and string are added to the property list, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetRect">
    <summary>The <b>SetRect</b> function sets the coordinates of the specified rectangle. This is equivalent to assigning the left, top, right, and bottom arguments to the appropriate members of the <b>RECT</b> structure.</summary>
    <param name="lprc">Pointer to the <see cref="RECT" /> structure that contains the rectangle to be set.</param>
    <param name="xLeft">Specifies the x-coordinate of the rectangle's upper-left corner.</param>
    <param name="yTop">Specifies the y-coordinate of the rectangle's upper-left corner.</param>
    <param name="xRight">Specifies the x-coordinate of the rectangle's lower-right corner.</param>
    <param name="yBottom">Specifies the y-coordinate of the rectangle's lower-right corner.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetRectEmpty">
    <summary>The <b>SetRectEmpty</b> function creates an empty rectangle in which all coordinates are set to zero.</summary>
    <param name="lprc">Pointer to the <see cref="RECT" /> structure that contains the coordinates of the rectangle.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetScrollInfo">
    <summary>The <b>SetScrollInfo</b> function sets the parameters of a scroll bar, including the minimum and maximum scrolling positions, the page size, and the position of the scroll box (thumb). The function also redraws the scroll bar, if requested.</summary>
    <param name="hwnd">Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the<i>fnBar</i> parameter.</param>
    <param name="nBar">
      <para>Specifies the type of scroll bar for which to set parameters. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_CTL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the parameters of a scroll bar control. The 						<i>hwnd</i> parameter must be the handle to the scroll bar control.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_HORZ</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the parameters of the window's standard horizontal scroll bar.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_VERT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the parameters of the window's standard vertical scroll bar.</description>
        </listheader>
      </list>
    </param>
    <param name="lpsi">
      <para>Pointer to a <see cref="SCROLLINFO" /> structure. Before calling <b>SetScrollInfo</b>, set the<b>cbSize</b> member of the structure to<b>sizeof</b>(<b>SCROLLINFO</b>), set the<b>fMask</b> member to indicate the parameters to set, and specify the new parameter values in the appropriate members.</para>
      <para>The<b>fMask</b> member can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SIF_DISABLENOSCROLL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Disables the scroll bar instead of removing it, if the scroll bar's new parameters make the scroll bar unnecessary.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SIF_PAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the scroll page to the value specified in the 						<b>nPage</b> member of the <see cref="SCROLLINFO" /> structure pointed to by 						<i>lpsi</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SIF_POS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the scroll position to the value specified in the 						<b>nPos</b> member of the <see cref="SCROLLINFO" /> structure pointed to by <i>lpsi</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SIF_RANGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the scroll range to the value specified in the 						<b>nMin</b> and 						<b>nMax</b> members of the <see cref="SCROLLINFO" /> structure pointed to by 						<i>lpsi</i>.</description>
        </listheader>
      </list>
    </param>
    <param name="redraw">Specifies whether the scroll bar is redrawn to reflect the changes to the scroll bar. If this parameter is <b>TRUE</b>, the scroll bar is redrawn, otherwise, it is not redrawn.</param>
    <returns>The return value is the current position of the scroll box.</returns>
  </member>
  <member name="Windows.SetScrollPos">
    <summary>
      <para>The <b>SetScrollPos</b> function sets the position of the scroll box (thumb) in the specified scroll bar and, if requested, redraws the scroll bar to reflect the new position of the scroll box.</para>
      <div>
        <b>Note</b>  The <b>SetScrollPos</b> function is provided for backward compatibility. New applications should use the <see cref="SetScrollInfo" /> function.</div>
    </summary>
    <param name="hWnd">Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the <i>nBar</i> parameter.</param>
    <param name="nBar">
      <para>Specifies the scroll bar to be set. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_CTL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the position of the scroll box in a scroll bar control. The <i>hwnd</i> parameter must be the handle to the scroll bar control.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_HORZ</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the position of the scroll box in a window's standard horizontal scroll bar.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_VERT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the position of the scroll box in a window's standard vertical scroll bar.</description>
        </listheader>
      </list>
    </param>
    <param name="nPos">Specifies the new position of the scroll box. The position must be within the scrolling range. For more information about the scrolling range, see the <see cref="SetScrollRange" /> function.</param>
    <param name="bRedraw">Specifies whether the scroll bar is redrawn to reflect the new scroll box position. If this parameter is <b>TRUE</b>, the scroll bar is redrawn. If it is <b>FALSE</b>, the scroll bar is not redrawn.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous position of the scroll box.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetScrollRange">
    <summary>
      <para>The <b>SetScrollRange</b> function sets the minimum and maximum scroll box positions for the specified scroll bar.</para>
      <div>
        <b>Note</b>  The <b>SetScrollRange</b> function is provided for backward compatibility. New applications should use the <see cref="SetScrollInfo" /> function.</div>
    </summary>
    <param name="hWnd">Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the<i>nBar</i> parameter.</param>
    <param name="nBar">
      <para>Specifies the scroll bar to be set. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_CTL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the range of a scroll bar control. The 						<i>hwnd</i> parameter must be the handle to the scroll bar control.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_HORZ</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the range of a window's standard horizontal scroll bar.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_VERT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the range of a window's standard vertical scroll bar.</description>
        </listheader>
      </list>
    </param>
    <param name="nMinPos">Specifies the minimum scrolling position.</param>
    <param name="nMaxPos">Specifies the maximum scrolling position.</param>
    <param name="bRedraw">Specifies whether the scroll bar should be redrawn to reflect the change. If this parameter is <b>TRUE</b>, the scroll bar is redrawn. If it is <b>FALSE</b>, the scroll bar is not redrawn.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetSysColors">
    <summary>Sets the colors for the specified display elements. Display elements are the various parts of a window and the display that appear on the system display screen.</summary>
    <param name="cElements">The number of display elements in the <i>lpaElements</i> array.</param>
    <param name="lpaElements">An array of integers that specify the display elements to be changed. For a list of display elements, see<see cref="GetSysColor" />.</param>
    <param name="lpaRgbValues">
      <para>An array of<a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a> values that contain the new red, green, blue (RGB) color values for the display elements in the array pointed to by the <i>lpaElements</i> parameter.</para>
      <para>To generate a<a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a>, use the<see cref="RGB" /> macro.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a nonzero value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetSystemCursor">
    <summary>Enables an application to customize the system cursors. It replaces the contents of the system cursor specified by the <i>id</i> parameter with the contents of the cursor specified by the <i>hcur</i> parameter and then destroys <i>hcur</i>.</summary>
    <param name="hcur">
      <para>A handle to the cursor. The function replaces the contents of the system cursor specified by <i>id</i> with the contents of the cursor handled by <i>hcur</i>.</para>
      <para>The system destroys <i>hcur</i> by calling the <see cref="DestroyCursor" /> function. Therefore, <i>hcur</i> cannot be a cursor loaded using the <see cref="LoadCursor" /> function. To specify a cursor loaded from a resource, copy the cursor using the <see cref="CopyCursor" /> function, then pass the copy to <b>SetSystemCursor</b>.</para>
    </param>
    <param name="id">
      <para>The system cursor to replace with the contents of <i>hcur</i>. This parameter can be one of the following values.</para>
      <para>| Value | Meaning | |---|---| | <b>OCR_NORMAL</b><br /><code>32512</code> | Normal select | | <b>OCR_IBEAM</b><br /><code>32513</code> | Text select | | <b>OCR_WAIT</b><br /><code>32514</code> | Busy | | <b>OCR_CROSS</b><br /><code>32515</code> | Precision select | | <b>OCR_UP</b><br /><code>32516</code> | Alternate select | | <b>OCR_SIZENWSE</b><br /><code>32642</code> | Diagonal resize 1 | | <b>OCR_SIZENESW</b><br /><code>32643</code> | Diagonal resize 2 | | <b>OCR_SIZEWE</b><br /><code>32644</code> | Horizontal resize | | <b>OCR_SIZENS</b><br /><code>32645</code> | Vertical resize | | <b>OCR_SIZEALL</b><br /><code>32646</code> | Move |<br />| <b>OCR_NO</b><br /><code>32648</code> | Unavailable | | <b>OCR_HAND</b><br /><code>32649</code> | Link select | | <b>OCR_APPSTARTING</b><br /><code>32650</code> | Working in background |</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetThreadCursorCreationScaling">
    <summary>Sets the DPI scale for which the cursors being created on this thread are intended. This value is taken into account when scaling the cursor for the specific monitor on which it is being shown.</summary>
    <param name="cursorDpi">
      <para>The 96-based DPI scale of the cursors that the application will be creating. For example, a 96 DPI value corresponds to 100% monitor scale factor, 144 DPI corresponds to 150%, and so on.</para>
      <para>There are two special values:</para>
      <para>CURSOR_CREATION_SCALING_DEFAULT – resets cursor scaling to default system behavior (as if SetThreadCursorCreationScaling was never called on this thread).</para>
      <para>CURSOR_CREATION_SCALING_NONE – disables all cursor scaling (the cursors created after calling SetThreadCursorCreationScaling with this parameter will never be scaled up or down on any monitor).</para>
    </param>
    <returns>The previous value set for the thread before calling this API.</returns>
  </member>
  <member name="Windows.SetThreadDesktop">
    <summary>Assigns the specified desktop to the calling thread. All subsequent operations on the desktop use the access rights granted to the desktop.</summary>
    <param name="hDesktop">
      <para>A handle to the desktop to be assigned to the calling thread. This handle is returned by the<see cref="CreateDesktop" />,<see cref="GetThreadDesktop" />, <see cref="OpenDesktop" />, or<see cref="OpenInputDesktop" /> function.</para>
      <para>This desktop must be associated with the current window station for the process.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetThreadDpiAwarenessContext">
    <summary>Set the DPI awareness for the current thread to the provided value.</summary>
    <param name="dpiContext">The new <a href="https://docs.microsoft.com//windows/desktop/hidpi/dpi-awareness-context">DPI_AWARENESS_CONTEXT</a> for the current thread. This context includes the <see cref="DPI_AWARENESS" /> value.</param>
    <returns>The old <a href="https://docs.microsoft.com//windows/desktop/hidpi/dpi-awareness-context">DPI_AWARENESS_CONTEXT</a> for the thread. If the <i>dpiContext</i> is invalid, the thread will not be updated and the return value will be <b>NULL</b>. You can use this value to restore the old <b>DPI_AWARENESS_CONTEXT</b> after overriding it with a predefined value.</returns>
  </member>
  <member name="Windows.SetThreadDpiHostingBehavior">
    <summary>Sets the thread's <see cref="DPI_HOSTING_BEHAVIOR" />. This behavior allows windows created in the thread to host child windows with a different <b>DPI_AWARENESS_CONTEXT</b>.</summary>
    <param name="value">The new <see cref="DPI_HOSTING_BEHAVIOR" /> value for the current thread.</param>
    <returns>The previous <see cref="DPI_HOSTING_BEHAVIOR" /> for the thread. If the hosting behavior passed in is invalid, the thread will not be updated and the return value will be <b>DPI_HOSTING_BEHAVIOR_INVALID</b>. You can use this value to restore the old <b>DPI_HOSTING_BEHAVIOR</b> after overriding it with a predefined value.</returns>
  </member>
  <member name="Windows.SetTimer">
    <summary>Creates a timer with the specified time-out value.</summary>
    <param name="hWnd">A handle to the window to be associated with the timer. This window must be owned by the calling thread. If a <b>NULL</b> value for <i>hWnd</i> is passed in along with an <i>nIDEvent</i> of an existing timer, that timer will be replaced in the same way that an existing non-NULL <i>hWnd</i> timer will be.</param>
    <param name="nIDEvent">A nonzero timer identifier. If the <i>hWnd</i> parameter is <b>NULL</b>, and the <i>nIDEvent</i> does not match an existing timer then it is ignored and a new timer ID is generated. If the <i>hWnd</i> parameter is not <b>NULL</b> and the window specified by <i>hWnd</i> already has a timer with the value <i>nIDEvent</i>, then the existing timer is replaced by the new timer. When <b>SetTimer</b> replaces a timer, the timer is reset. Therefore, a message will be sent after the current time-out value elapses, but the previously set time-out value is ignored. If the call is not intended to replace an existing timer, <i>nIDEvent</i> should be 0 if the <i>hWnd</i> is <b>NULL</b>.</param>
    <param name="uElapse">
      <para>The time-out value, in milliseconds.</para>
      <para>If <i>uElapse</i> is less than <b>USER_TIMER_MINIMUM</b> (0x0000000A), the timeout is set to <b>USER_TIMER_MINIMUM</b>. If <i>uElapse</i> is greater than <b>USER_TIMER_MAXIMUM</b> (0x7FFFFFFF), the timeout is set to <b>USER_TIMER_MAXIMUM</b>.</para>
    </param>
    <param name="lpTimerFunc">A pointer to the function to be notified when the time-out value elapses. For more information about the function, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a>. If <i>lpTimerFunc</i> is <b>NULL</b>, the system posts a <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-timer">WM_TIMER</a> message to the application queue. The <b>hwnd</b> member of the message's <see cref="MSG" /> structure contains the value of the <i>hWnd</i> parameter.</param>
    <returns>
      <para>If the function succeeds and the <i>hWnd</i> parameter is <b>NULL</b>, the return value is an integer identifying the new timer. An application can pass this value to the <see cref="KillTimer" /> function to destroy the timer.</para>
      <para>If the function succeeds and the <i>hWnd</i> parameter is not <b>NULL</b>, then the return value is a nonzero integer. An application can pass the value of the <i>nIDEvent</i> parameter to the <see cref="KillTimer" /> function to destroy the timer.</para>
      <para>If the function fails to create a timer, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetUserObjectInformation">
    <summary>Sets information about the specified window station or desktop object.</summary>
    <param name="hObj">A handle to the window station, desktop object or a current process pseudo handle. This handle can be returned by the <see cref="CreateWindowStation" />,<see cref="OpenWindowStation" />,<see cref="CreateDesktop" />, <see cref="OpenDesktop" /> or <see cref="GetCurrentProcess" /> function.</param>
    <param name="nIndex">
      <para>The object information to be set. This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_FLAGS</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Sets the object's handle flags. The <i>pvInfo</i> parameter must point to a <see cref="USEROBJECTFLAGS" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_TIMERPROC_EXCEPTION_SUPPRESSION</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>Sets the exception handling behavior when calling <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a>. <i>hObj</i> must be the process handle returned by the <see cref="GetCurrentProcess" /> function. <para>The <i>pvInfo</i> parameter must point to a BOOL. If TRUE, Windows will enclose its calls to <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a> with an exception handler that consumes and discards all exceptions. This has been the default behavior since Windows 2000, although that may change in future versions of Windows.</para><para>If <i>pvInfo</i> points to FALSE, Windows will not enclose its calls to <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a> with an exception handler. A setting of FALSE is recommended. Otherwise, the application could behave unpredictably, and could be more vulnerable to security exploits.</para></description>
        </listheader>
      </list>
    </param>
    <param name="pvInfo">A pointer to a buffer containing the object information, or a BOOL.</param>
    <param name="nLength">The size of the information contained in the buffer pointed to by <i>pvInfo</i>, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetUserObjectInformationA">
    <summary>Sets information about the specified window station or desktop object.</summary>
    <param name="hObj">A handle to the window station, desktop object or a current process pseudo handle. This handle can be returned by the <see cref="CreateWindowStation" />,<see cref="OpenWindowStation" />,<see cref="CreateDesktop" />, <see cref="OpenDesktop" /> or <see cref="GetCurrentProcess" /> function.</param>
    <param name="nIndex">
      <para>The object information to be set. This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_FLAGS</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Sets the object's handle flags. The <i>pvInfo</i> parameter must point to a <see cref="USEROBJECTFLAGS" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_TIMERPROC_EXCEPTION_SUPPRESSION</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>Sets the exception handling behavior when calling <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a>. <i>hObj</i> must be the process handle returned by the <see cref="GetCurrentProcess" /> function. <para>The <i>pvInfo</i> parameter must point to a BOOL. If TRUE, Windows will enclose its calls to <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a> with an exception handler that consumes and discards all exceptions. This has been the default behavior since Windows 2000, although that may change in future versions of Windows.</para><para>If <i>pvInfo</i> points to FALSE, Windows will not enclose its calls to <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a> with an exception handler. A setting of FALSE is recommended. Otherwise, the application could behave unpredictably, and could be more vulnerable to security exploits.</para></description>
        </listheader>
      </list>
    </param>
    <param name="pvInfo">A pointer to a buffer containing the object information, or a BOOL.</param>
    <param name="nLength">The size of the information contained in the buffer pointed to by <i>pvInfo</i>, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetUserObjectInformationW">
    <summary>Sets information about the specified window station or desktop object.</summary>
    <param name="hObj">A handle to the window station, desktop object or a current process pseudo handle. This handle can be returned by the <see cref="CreateWindowStation" />,<see cref="OpenWindowStation" />,<see cref="CreateDesktop" />, <see cref="OpenDesktop" /> or <see cref="GetCurrentProcess" /> function.</param>
    <param name="nIndex">
      <para>The object information to be set. This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_FLAGS</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Sets the object's handle flags. The <i>pvInfo</i> parameter must point to a <see cref="USEROBJECTFLAGS" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_TIMERPROC_EXCEPTION_SUPPRESSION</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>Sets the exception handling behavior when calling <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a>. <i>hObj</i> must be the process handle returned by the <see cref="GetCurrentProcess" /> function. <para>The <i>pvInfo</i> parameter must point to a BOOL. If TRUE, Windows will enclose its calls to <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a> with an exception handler that consumes and discards all exceptions. This has been the default behavior since Windows 2000, although that may change in future versions of Windows.</para><para>If <i>pvInfo</i> points to FALSE, Windows will not enclose its calls to <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a> with an exception handler. A setting of FALSE is recommended. Otherwise, the application could behave unpredictably, and could be more vulnerable to security exploits.</para></description>
        </listheader>
      </list>
    </param>
    <param name="pvInfo">A pointer to a buffer containing the object information, or a BOOL.</param>
    <param name="nLength">The size of the information contained in the buffer pointed to by <i>pvInfo</i>, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetUserObjectInformation">
    <summary>Sets information about the specified window station or desktop object.</summary>
    <param name="hObj">A handle to the window station, desktop object or a current process pseudo handle. This handle can be returned by the <see cref="CreateWindowStation" />,<see cref="OpenWindowStation" />,<see cref="CreateDesktop" />, <see cref="OpenDesktop" /> or <see cref="GetCurrentProcess" /> function.</param>
    <param name="nIndex">
      <para>The object information to be set. This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_FLAGS</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Sets the object's handle flags. The <i>pvInfo</i> parameter must point to a <see cref="USEROBJECTFLAGS" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_TIMERPROC_EXCEPTION_SUPPRESSION</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>Sets the exception handling behavior when calling <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a>. <i>hObj</i> must be the process handle returned by the <see cref="GetCurrentProcess" /> function. <para>The <i>pvInfo</i> parameter must point to a BOOL. If TRUE, Windows will enclose its calls to <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a> with an exception handler that consumes and discards all exceptions. This has been the default behavior since Windows 2000, although that may change in future versions of Windows.</para><para>If <i>pvInfo</i> points to FALSE, Windows will not enclose its calls to <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a> with an exception handler. A setting of FALSE is recommended. Otherwise, the application could behave unpredictably, and could be more vulnerable to security exploits.</para></description>
        </listheader>
      </list>
    </param>
    <param name="pvInfo">A pointer to a buffer containing the object information, or a BOOL.</param>
    <param name="nLength">The size of the information contained in the buffer pointed to by <i>pvInfo</i>, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetUserObjectInformationA">
    <summary>Sets information about the specified window station or desktop object.</summary>
    <param name="hObj">A handle to the window station, desktop object or a current process pseudo handle. This handle can be returned by the <see cref="CreateWindowStation" />,<see cref="OpenWindowStation" />,<see cref="CreateDesktop" />, <see cref="OpenDesktop" /> or <see cref="GetCurrentProcess" /> function.</param>
    <param name="nIndex">
      <para>The object information to be set. This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_FLAGS</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Sets the object's handle flags. The <i>pvInfo</i> parameter must point to a <see cref="USEROBJECTFLAGS" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_TIMERPROC_EXCEPTION_SUPPRESSION</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>Sets the exception handling behavior when calling <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a>. <i>hObj</i> must be the process handle returned by the <see cref="GetCurrentProcess" /> function. <para>The <i>pvInfo</i> parameter must point to a BOOL. If TRUE, Windows will enclose its calls to <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a> with an exception handler that consumes and discards all exceptions. This has been the default behavior since Windows 2000, although that may change in future versions of Windows.</para><para>If <i>pvInfo</i> points to FALSE, Windows will not enclose its calls to <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a> with an exception handler. A setting of FALSE is recommended. Otherwise, the application could behave unpredictably, and could be more vulnerable to security exploits.</para></description>
        </listheader>
      </list>
    </param>
    <param name="pvInfo">A pointer to a buffer containing the object information, or a BOOL.</param>
    <param name="nLength">The size of the information contained in the buffer pointed to by <i>pvInfo</i>, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetUserObjectInformationW">
    <summary>Sets information about the specified window station or desktop object.</summary>
    <param name="hObj">A handle to the window station, desktop object or a current process pseudo handle. This handle can be returned by the <see cref="CreateWindowStation" />,<see cref="OpenWindowStation" />,<see cref="CreateDesktop" />, <see cref="OpenDesktop" /> or <see cref="GetCurrentProcess" /> function.</param>
    <param name="nIndex">
      <para>The object information to be set. This parameter can be the following value.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_FLAGS</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Sets the object's handle flags. The <i>pvInfo</i> parameter must point to a <see cref="USEROBJECTFLAGS" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UOI_TIMERPROC_EXCEPTION_SUPPRESSION</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>Sets the exception handling behavior when calling <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a>. <i>hObj</i> must be the process handle returned by the <see cref="GetCurrentProcess" /> function. <para>The <i>pvInfo</i> parameter must point to a BOOL. If TRUE, Windows will enclose its calls to <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a> with an exception handler that consumes and discards all exceptions. This has been the default behavior since Windows 2000, although that may change in future versions of Windows.</para><para>If <i>pvInfo</i> points to FALSE, Windows will not enclose its calls to <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-timerproc">TimerProc</a> with an exception handler. A setting of FALSE is recommended. Otherwise, the application could behave unpredictably, and could be more vulnerable to security exploits.</para></description>
        </listheader>
      </list>
    </param>
    <param name="pvInfo">A pointer to a buffer containing the object information, or a BOOL.</param>
    <param name="nLength">The size of the information contained in the buffer pointed to by <i>pvInfo</i>, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowContextHelpId">
    <summary>Associates a Help context identifier with the specified window.</summary>
    <param name="unnamedParam1">A handle to the window with which to associate the Help context identifier.</param>
    <param name="unnamedParam2">The Help context identifier.</param>
    <returns>
      <para>Returns nonzero if successful, or zero otherwise.</para>
      <para>To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowDisplayAffinity">
    <summary>Specifies where the content of the window can be displayed.</summary>
    <param name="hWnd">A handle to the top-level window. The window must belong to the current process.</param>
    <param name="dwAffinity">
      <para>The display affinity setting that specifies where the content of the window can be displayed.</para>
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WDA_NONE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000000</term>
              </listheader>
            </list>
          </description>
          <description>Imposes no restrictions on where the window can be displayed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WDA_MONITOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>The window content is displayed only on a monitor. Everywhere else, the window appears with no content.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WDA_EXCLUDEFROMCAPTURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000011</term>
              </listheader>
            </list>
          </description>
          <description>The window is displayed only on a monitor. Everywhere else, the window does not appear at all.<para>One use for this affinity is for windows that show video recording controls, so that the controls are not included in the capture.</para><para>Introduced in Windows 10 Version 2004. See remarks about compatibility regarding previous versions of Windows.</para></description>
        </listheader>
      </list>
    </param>
    <returns>If the function succeeds, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b> when, for example, the function call is made on a non top-level window. To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.SetWindowFeedbackSetting">
    <summary>Sets the feedback configuration for a window.</summary>
    <param name="hwnd">The window to configure feedback on.</param>
    <param name="feedback">One of the values from the <see cref="FEEDBACK_TYPE" /> enumeration.</param>
    <param name="dwFlags">Reserved. Must be 0.</param>
    <param name="size">The size, in bytes, of the configuration data. Must be sizeof(BOOL) or 0 if the feedback setting is being reset.</param>
    <param name="configuration">The configuration data. Must be BOOL or NULL if the feedback setting is being reset.</param>
    <returns>Returns TRUE if successful; otherwise, returns FALSE.</returns>
  </member>
  <member name="Windows.SetWindowLong">
    <summary>
      <para>Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.</para>
      <div>
        <b>Note</b>  This function has been superseded by the <see cref="SetWindowLongPtr" /> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use the <b>SetWindowLongPtr</b> function.</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer. To set any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new application instance handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new identifier of the child window. The window cannot be a top-level window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Sets the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new address for the window procedure.<para>You cannot change this attribute if the window does not belong to the same process as the calling thread.</para></description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Sets the new address of the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Sets the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Sets new extra information that is private to the application, such as handles or pointers.</description></listheader></list></param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified 32-bit integer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the previous value of the specified 32-bit integer is zero, and the function succeeds, the return value is zero, but the function does not clear the last error information. This makes it difficult to determine success or failure. To deal with this, you should clear the last error information by calling <see cref="SetLastError" /> with 0 before calling <b>SetWindowLong</b>. Then, function failure will be indicated by a return value of zero and a <see cref="GetLastError" /> result that is nonzero.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowLongA">
    <summary>
      <para>Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.</para>
      <div>
        <b>Note</b>  This function has been superseded by the <see cref="SetWindowLongPtr" /> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use the <b>SetWindowLongPtr</b> function.</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer. To set any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new application instance handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new identifier of the child window. The window cannot be a top-level window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Sets the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new address for the window procedure.<para>You cannot change this attribute if the window does not belong to the same process as the calling thread.</para></description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Sets the new address of the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Sets the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Sets new extra information that is private to the application, such as handles or pointers.</description></listheader></list></param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified 32-bit integer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the previous value of the specified 32-bit integer is zero, and the function succeeds, the return value is zero, but the function does not clear the last error information. This makes it difficult to determine success or failure. To deal with this, you should clear the last error information by calling <see cref="SetLastError" /> with 0 before calling <b>SetWindowLong</b>. Then, function failure will be indicated by a return value of zero and a <see cref="GetLastError" /> result that is nonzero.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowLongW">
    <summary>
      <para>Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.</para>
      <div>
        <b>Note</b>  This function has been superseded by the <see cref="SetWindowLongPtr" /> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use the <b>SetWindowLongPtr</b> function.</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer. To set any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new application instance handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new identifier of the child window. The window cannot be a top-level window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Sets the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new address for the window procedure.<para>You cannot change this attribute if the window does not belong to the same process as the calling thread.</para></description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Sets the new address of the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Sets the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Sets new extra information that is private to the application, such as handles or pointers.</description></listheader></list></param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified 32-bit integer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the previous value of the specified 32-bit integer is zero, and the function succeeds, the return value is zero, but the function does not clear the last error information. This makes it difficult to determine success or failure. To deal with this, you should clear the last error information by calling <see cref="SetLastError" /> with 0 before calling <b>SetWindowLong</b>. Then, function failure will be indicated by a return value of zero and a <see cref="GetLastError" /> result that is nonzero.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowLongPtr">
    <summary>
      <para>Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory. <div><b>Note</b>  To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>SetWindowLongPtr</b>. When compiling for 32-bit Windows, <b>SetWindowLongPtr</b> is defined as a call to the <see cref="SetWindowLong" /> function.</div></para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window and, indirectly, the class to which the window belongs. The <b>SetWindowLongPtr</b> function fails if the process that owns the window specified by the <i>hWnd</i> parameter is at a higher process privilege in the UIPI hierarchy than the process the calling thread resides in.</para>
      <para>
        <b>Windows XP/2000:  </b> The <b>SetWindowLongPtr</b> function fails if the window specified by the <i>hWnd</i> parameter does not belong to the same process as the calling thread.</para>
    </param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a <b>LONG_PTR</b>. To set any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new application instance handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new identifier of the child window. The window cannot be a top-level window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Sets the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new address for the window procedure.</description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Sets the new pointer to the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Sets the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Sets new extra information that is private to the application, such as handles or pointers.</description></listheader></list></param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified offset.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the previous value is zero and the function succeeds, the return value is zero, but the function does not clear the last error information. To determine success or failure, clear the last error information by calling <see cref="SetLastError" /> with 0, then call <b>SetWindowLongPtr</b>. Function failure will be indicated by a return value of zero and a <see cref="GetLastError" /> result that is nonzero.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowLongPtrA">
    <summary>
      <para>Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory. <div><b>Note</b>  To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>SetWindowLongPtr</b>. When compiling for 32-bit Windows, <b>SetWindowLongPtr</b> is defined as a call to the <see cref="SetWindowLong" /> function.</div></para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window and, indirectly, the class to which the window belongs. The <b>SetWindowLongPtr</b> function fails if the process that owns the window specified by the <i>hWnd</i> parameter is at a higher process privilege in the UIPI hierarchy than the process the calling thread resides in.</para>
      <para>
        <b>Windows XP/2000:  </b> The <b>SetWindowLongPtr</b> function fails if the window specified by the <i>hWnd</i> parameter does not belong to the same process as the calling thread.</para>
    </param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a <b>LONG_PTR</b>. To set any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new application instance handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new identifier of the child window. The window cannot be a top-level window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Sets the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new address for the window procedure.</description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Sets the new pointer to the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Sets the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Sets new extra information that is private to the application, such as handles or pointers.</description></listheader></list></param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified offset.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the previous value is zero and the function succeeds, the return value is zero, but the function does not clear the last error information. To determine success or failure, clear the last error information by calling <see cref="SetLastError" /> with 0, then call <b>SetWindowLongPtr</b>. Function failure will be indicated by a return value of zero and a <see cref="GetLastError" /> result that is nonzero.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowLongPtrW">
    <summary>
      <para>Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory. <div><b>Note</b>  To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>SetWindowLongPtr</b>. When compiling for 32-bit Windows, <b>SetWindowLongPtr</b> is defined as a call to the <see cref="SetWindowLong" /> function.</div></para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window and, indirectly, the class to which the window belongs. The <b>SetWindowLongPtr</b> function fails if the process that owns the window specified by the <i>hWnd</i> parameter is at a higher process privilege in the UIPI hierarchy than the process the calling thread resides in.</para>
      <para>
        <b>Windows XP/2000:  </b> The <b>SetWindowLongPtr</b> function fails if the window specified by the <i>hWnd</i> parameter does not belong to the same process as the calling thread.</para>
    </param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a <b>LONG_PTR</b>. To set any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new application instance handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new identifier of the child window. The window cannot be a top-level window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Sets the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new address for the window procedure.</description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Sets the new pointer to the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Sets the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Sets new extra information that is private to the application, such as handles or pointers.</description></listheader></list></param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified offset.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the previous value is zero and the function succeeds, the return value is zero, but the function does not clear the last error information. To determine success or failure, clear the last error information by calling <see cref="SetLastError" /> with 0, then call <b>SetWindowLongPtr</b>. Function failure will be indicated by a return value of zero and a <see cref="GetLastError" /> result that is nonzero.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowLongPtr">
    <summary>
      <para>Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory. <div><b>Note</b>  To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>SetWindowLongPtr</b>. When compiling for 32-bit Windows, <b>SetWindowLongPtr</b> is defined as a call to the <see cref="SetWindowLong" /> function.</div></para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window and, indirectly, the class to which the window belongs. The <b>SetWindowLongPtr</b> function fails if the process that owns the window specified by the <i>hWnd</i> parameter is at a higher process privilege in the UIPI hierarchy than the process the calling thread resides in.</para>
      <para>
        <b>Windows XP/2000:  </b> The <b>SetWindowLongPtr</b> function fails if the window specified by the <i>hWnd</i> parameter does not belong to the same process as the calling thread.</para>
    </param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a <b>LONG_PTR</b>. To set any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new application instance handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new identifier of the child window. The window cannot be a top-level window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Sets the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new address for the window procedure.</description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Sets the new pointer to the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Sets the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Sets new extra information that is private to the application, such as handles or pointers.</description></listheader></list></param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified offset.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the previous value is zero and the function succeeds, the return value is zero, but the function does not clear the last error information. To determine success or failure, clear the last error information by calling <see cref="SetLastError" /> with 0, then call <b>SetWindowLongPtr</b>. Function failure will be indicated by a return value of zero and a <see cref="GetLastError" /> result that is nonzero.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowLongPtrA">
    <summary>
      <para>Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory. <div><b>Note</b>  To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>SetWindowLongPtr</b>. When compiling for 32-bit Windows, <b>SetWindowLongPtr</b> is defined as a call to the <see cref="SetWindowLong" /> function.</div></para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window and, indirectly, the class to which the window belongs. The <b>SetWindowLongPtr</b> function fails if the process that owns the window specified by the <i>hWnd</i> parameter is at a higher process privilege in the UIPI hierarchy than the process the calling thread resides in.</para>
      <para>
        <b>Windows XP/2000:  </b> The <b>SetWindowLongPtr</b> function fails if the window specified by the <i>hWnd</i> parameter does not belong to the same process as the calling thread.</para>
    </param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a <b>LONG_PTR</b>. To set any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new application instance handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new identifier of the child window. The window cannot be a top-level window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Sets the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new address for the window procedure.</description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Sets the new pointer to the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Sets the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Sets new extra information that is private to the application, such as handles or pointers.</description></listheader></list></param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified offset.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the previous value is zero and the function succeeds, the return value is zero, but the function does not clear the last error information. To determine success or failure, clear the last error information by calling <see cref="SetLastError" /> with 0, then call <b>SetWindowLongPtr</b>. Function failure will be indicated by a return value of zero and a <see cref="GetLastError" /> result that is nonzero.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowLongPtrW">
    <summary>
      <para>Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory. <div><b>Note</b>  To write code that is compatible with both 32-bit and 64-bit versions of Windows, use <b>SetWindowLongPtr</b>. When compiling for 32-bit Windows, <b>SetWindowLongPtr</b> is defined as a call to the <see cref="SetWindowLong" /> function.</div></para>
    </summary>
    <param name="hWnd">
      <para>A handle to the window and, indirectly, the class to which the window belongs. The <b>SetWindowLongPtr</b> function fails if the process that owns the window specified by the <i>hWnd</i> parameter is at a higher process privilege in the UIPI hierarchy than the process the calling thread resides in.</para>
      <para>
        <b>Windows XP/2000:  </b> The <b>SetWindowLongPtr</b> function fails if the window specified by the <i>hWnd</i> parameter does not belong to the same process as the calling thread.</para>
    </param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of a <b>LONG_PTR</b>. To set any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new application instance handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new identifier of the child window. The window cannot be a top-level window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Sets the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWLP_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new address for the window procedure.</description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Sets the new pointer to the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Sets the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWLP_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Sets new extra information that is private to the application, such as handles or pointers.</description></listheader></list></param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified offset.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the previous value is zero and the function succeeds, the return value is zero, but the function does not clear the last error information. To determine success or failure, clear the last error information by calling <see cref="SetLastError" /> with 0, then call <b>SetWindowLongPtr</b>. Function failure will be indicated by a return value of zero and a <see cref="GetLastError" /> result that is nonzero.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowLong">
    <summary>
      <para>Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.</para>
      <div>
        <b>Note</b>  This function has been superseded by the <see cref="SetWindowLongPtr" /> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use the <b>SetWindowLongPtr</b> function.</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer. To set any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new application instance handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new identifier of the child window. The window cannot be a top-level window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Sets the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new address for the window procedure.<para>You cannot change this attribute if the window does not belong to the same process as the calling thread.</para></description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Sets the new address of the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Sets the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Sets new extra information that is private to the application, such as handles or pointers.</description></listheader></list></param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified 32-bit integer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the previous value of the specified 32-bit integer is zero, and the function succeeds, the return value is zero, but the function does not clear the last error information. This makes it difficult to determine success or failure. To deal with this, you should clear the last error information by calling <see cref="SetLastError" /> with 0 before calling <b>SetWindowLong</b>. Then, function failure will be indicated by a return value of zero and a <see cref="GetLastError" /> result that is nonzero.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowLongA">
    <summary>
      <para>Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.</para>
      <div>
        <b>Note</b>  This function has been superseded by the <see cref="SetWindowLongPtr" /> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use the <b>SetWindowLongPtr</b> function.</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer. To set any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new application instance handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new identifier of the child window. The window cannot be a top-level window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Sets the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new address for the window procedure.<para>You cannot change this attribute if the window does not belong to the same process as the calling thread.</para></description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Sets the new address of the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Sets the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Sets new extra information that is private to the application, such as handles or pointers.</description></listheader></list></param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified 32-bit integer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the previous value of the specified 32-bit integer is zero, and the function succeeds, the return value is zero, but the function does not clear the last error information. This makes it difficult to determine success or failure. To deal with this, you should clear the last error information by calling <see cref="SetLastError" /> with 0 before calling <b>SetWindowLong</b>. Then, function failure will be indicated by a return value of zero and a <see cref="GetLastError" /> result that is nonzero.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowLongW">
    <summary>
      <para>Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.</para>
      <div>
        <b>Note</b>  This function has been superseded by the <see cref="SetWindowLongPtr" /> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use the <b>SetWindowLongPtr</b> function.</div>
    </summary>
    <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
    <param name="nIndex">
      <para>The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer. To set any other value, specify one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_EXSTYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-20</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/extended-window-styles">extended window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_HINSTANCE</b>
                </term>
              </listheader>
              <listheader>
                <term>-6</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new application instance handle.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_ID</b>
                </term>
              </listheader>
              <listheader>
                <term>-12</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new identifier of the child window. The window cannot be a top-level window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_STYLE</b>
                </term>
              </listheader>
              <listheader>
                <term>-16</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new <a href="https://docs.microsoft.com//windows/desktop/winmsg/window-styles">window style</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_USERDATA</b>
                </term>
              </listheader>
              <listheader>
                <term>-21</term>
              </listheader>
            </list>
          </description>
          <description>Sets the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>GWL_WNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>-4</term>
              </listheader>
            </list>
          </description>
          <description>Sets a new address for the window procedure.<para>You cannot change this attribute if the window does not belong to the same process as the calling thread.</para></description>
        </listheader>
      </list> <para>The following values are also available when the <i>hWnd</i> parameter identifies a dialog box.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_DLGPROC</b></term></listheader><listheader><term>DWLP_MSGRESULT + sizeof(LRESULT)</term></listheader></list></description><description>Sets the new address of the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_MSGRESULT</b></term></listheader><listheader><term>0</term></listheader></list></description><description>Sets the return value of a message processed in the dialog box procedure.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>DWL_USER</b></term></listheader><listheader><term>DWLP_DLGPROC + sizeof(DLGPROC)</term></listheader></list></description><description>Sets new extra information that is private to the application, such as handles or pointers.</description></listheader></list></param>
    <param name="dwNewLong">The replacement value.</param>
    <returns>
      <para>If the function succeeds, the return value is the previous value of the specified 32-bit integer.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
      <para>If the previous value of the specified 32-bit integer is zero, and the function succeeds, the return value is zero, but the function does not clear the last error information. This makes it difficult to determine success or failure. To deal with this, you should clear the last error information by calling <see cref="SetLastError" /> with 0 before calling <b>SetWindowLong</b>. Then, function failure will be indicated by a return value of zero and a <see cref="GetLastError" /> result that is nonzero.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowPlacement">
    <summary>Sets the show state and the restored, minimized, and maximized positions of the specified window.</summary>
    <param name="hWnd">A handle to the window.</param>
    <param name="lpwndpl">
      <para>A pointer to a <see cref="WINDOWPLACEMENT" /> structure that specifies the new show state and window positions.</para>
      <para>Before calling <b>SetWindowPlacement</b>, set the <b>length</b> member of the <see cref="WINDOWPLACEMENT" /> structure to sizeof(<b>WINDOWPLACEMENT</b>). <b>SetWindowPlacement</b> fails if the <b>length</b> member is not set correctly.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowPos">
    <summary>Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are ordered according to their appearance on the screen. The topmost window receives the highest rank and is the first window in the Z order.</summary>
    <param name="hWnd">A handle to the window.</param>
    <param name="hWndInsertAfter">
      <para>A handle to the window to precede the positioned window in the Z order. This parameter must be a window handle or one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HWND_BOTTOM</b>
                </term>
              </listheader>
              <listheader>
                <term>(HWND)1</term>
              </listheader>
            </list>
          </description>
          <description>Places the window at the bottom of the Z order. If the <i>hWnd</i> parameter identifies a topmost window, the window loses its topmost status and is placed at the bottom of all other windows.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HWND_NOTOPMOST</b>
                </term>
              </listheader>
              <listheader>
                <term>(HWND)-2</term>
              </listheader>
            </list>
          </description>
          <description>Places the window above all non-topmost windows (that is, behind all topmost windows). This flag has no effect if the window is already a non-topmost window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HWND_TOP</b>
                </term>
              </listheader>
              <listheader>
                <term>(HWND)0</term>
              </listheader>
            </list>
          </description>
          <description>Places the window at the top of the Z order.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>HWND_TOPMOST</b>
                </term>
              </listheader>
              <listheader>
                <term>(HWND)-1</term>
              </listheader>
            </list>
          </description>
          <description>Places the window above all non-topmost windows. The window maintains its topmost position even when it is deactivated.</description>
        </listheader>
      </list> <para>For more information about how this parameter is used, see the following Remarks section.</para></param>
    <param name="X">The new position of the left side of the window, in client coordinates.</param>
    <param name="Y">The new position of the top of the window, in client coordinates.</param>
    <param name="cx">The new width of the window, in pixels.</param>
    <param name="cy">The new height of the window, in pixels.</param>
    <param name="uFlags">
      <para>The window sizing and positioning flags. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_ASYNCWINDOWPOS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x4000</term>
              </listheader>
            </list>
          </description>
          <description>If the calling thread and the thread that owns the window are attached to different input queues, the system posts the request to the thread that owns the window. This prevents the calling thread from blocking its execution while other threads process the request.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_DEFERERASE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2000</term>
              </listheader>
            </list>
          </description>
          <description>Prevents generation of the <a href="https://docs.microsoft.com//windows/desktop/gdi/wm-syncpaint">WM_SYNCPAINT</a> message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_DRAWFRAME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0020</term>
              </listheader>
            </list>
          </description>
          <description>Draws a frame (defined in the window's class description) around the window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_FRAMECHANGED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0020</term>
              </listheader>
            </list>
          </description>
          <description>Applies new frame styles set using the <see cref="SetWindowLong" /> function. Sends a <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-nccalcsize">WM_NCCALCSIZE</a> message to the window, even if the window's size is not being changed. If this flag is not specified, <b>WM_NCCALCSIZE</b> is sent only when the window's size is being changed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_HIDEWINDOW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0080</term>
              </listheader>
            </list>
          </description>
          <description>Hides the window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_NOACTIVATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0010</term>
              </listheader>
            </list>
          </description>
          <description>Does not activate the window. If this flag is not set, the window is activated and moved to the top of either the topmost or non-topmost group (depending on the setting of the <i>hWndInsertAfter</i> parameter).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_NOCOPYBITS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0100</term>
              </listheader>
            </list>
          </description>
          <description>Discards the entire contents of the client area. If this flag is not specified, the valid contents of the client area are saved and copied back into the client area after the window is sized or repositioned.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_NOMOVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Retains the current position (ignores <i>X</i> and <i>Y</i> parameters).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_NOOWNERZORDER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0200</term>
              </listheader>
            </list>
          </description>
          <description>Does not change the owner window's position in the Z order.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_NOREDRAW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of the window being moved. When this flag is set, the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_NOREPOSITION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0200</term>
              </listheader>
            </list>
          </description>
          <description>Same as the <b>SWP_NOOWNERZORDER</b> flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_NOSENDCHANGING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0400</term>
              </listheader>
            </list>
          </description>
          <description>Prevents the window from receiving the <a href="https://docs.microsoft.com//windows/desktop/winmsg/wm-windowposchanging">WM_WINDOWPOSCHANGING</a> message.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_NOSIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Retains the current size (ignores the <i>cx</i> and <i>cy</i> parameters).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_NOZORDER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>Retains the current Z order (ignores the <i>hWndInsertAfter</i> parameter).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SWP_SHOWWINDOW</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0040</term>
              </listheader>
            </list>
          </description>
          <description>Displays the window.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowRgn">
    <summary>The <b>SetWindowRgn</b> function sets the window region of a window. The window region determines the area within the window where the system permits drawing. The system does not display any portion of a window that lies outside of the window region</summary>
    <param name="hWnd">A handle to the window whose window region is to be set.</param>
    <param name="hRgn">
      <para>A handle to a region. The function sets the window region of the window to this region.</para>
      <para>If <i>hRgn</i> is <b>NULL</b>, the function sets the window region to <b>NULL</b>.</para>
    </param>
    <param name="bRedraw">
      <para>Specifies whether the system redraws the window after setting the window region. If <i>bRedraw</i> is <b>TRUE</b>, the system does so; otherwise, it does not.</para>
      <para>Typically, you set <i>bRedraw</i> to <b>TRUE</b> if the window is visible.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowsHookEx">
    <summary>Installs an application-defined hook procedure into a hook chain. You would install a hook procedure to monitor the system for certain types of events. These events are associated either with a specific thread or with all threads in the same desktop as the calling thread.</summary>
    <param name="idHook">
      <para>The type of hook procedure to be installed. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_CALLWNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages before the system sends them to the destination window procedure. For more information, see the <see cref="CallWindowProcW function" />/<see cref="CallWindowProcA function" /> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_CALLWNDPROCRET</b>
                </term>
              </listheader>
              <listheader>
                <term>12</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages after they have been processed by the destination window procedure. For more information, see the [HOOKPROC callback function](nc-winuser-hookproc.md) hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_CBT</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that receives notifications useful to a CBT application. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/cbtproc">CBTProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_DEBUG</b>
                </term>
              </listheader>
              <listheader>
                <term>9</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure useful for debugging other hook procedures. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/debugproc">DebugProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_FOREGROUNDIDLE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that will be called when the application's foreground thread is about to become idle. This hook is useful for performing low priority tasks during idle time. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/foregroundidleproc">ForegroundIdleProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_GETMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages posted to a message queue. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/getmsgproc">GetMsgProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_JOURNALPLAYBACK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>
            <blockquote>[!WARNING]<b>Windows 11 and newer</b>: Journaling hook APIs are not supported. We recommend using the <see cref="SendInput" /> TextInput API instead.</blockquote>
            <para>Installs a hook procedure that posts messages previously recorded by a <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-hooks">WH_JOURNALRECORD</a> hook procedure. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/journalplaybackproc">JournalPlaybackProc</a> hook procedure.</para>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_JOURNALRECORD</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>
            <blockquote>[!WARNING]<b>Windows 11 and newer</b>: Journaling hook APIs are not supported. We recommend using the <see cref="SendInput" /> TextInput API instead.</blockquote>
            <para>Installs a hook procedure that records input messages posted to the system message queue. This hook is useful for recording macros. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/journalrecordproc">JournalRecordProc</a> hook procedure.</para>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_KEYBOARD</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors keystroke messages. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/keyboardproc">KeyboardProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_KEYBOARD_LL</b>
                </term>
              </listheader>
              <listheader>
                <term>13</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors low-level keyboard input events. For more information, see the [LowLevelKeyboardProc](/windows/win32/winmsg/lowlevelkeyboardproc) hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_MOUSE</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors mouse messages. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/mouseproc">MouseProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_MOUSE_LL</b>
                </term>
              </listheader>
              <listheader>
                <term>14</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors low-level mouse input events. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/lowlevelmouseproc">LowLevelMouseProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_MSGFILTER</b>
                </term>
              </listheader>
              <listheader>
                <term>-1</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/messageproc">MessageProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_SHELL</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that receives notifications useful to shell applications. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/shellproc">ShellProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_SYSMSGFILTER</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. The hook procedure monitors these messages for all applications in the same desktop as the calling thread. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/sysmsgproc">SysMsgProc</a> hook procedure.</description>
        </listheader>
      </list>
    </param>
    <param name="lpfn">A pointer to the hook procedure. If the <i>dwThreadId</i> parameter is zero or specifies the identifier of a thread created by a different process, the <i>lpfn</i> parameter must point to a hook procedure in a DLL. Otherwise, <i>lpfn</i> can point to a hook procedure in the code associated with the current process.</param>
    <param name="hmod">A handle to the DLL containing the hook procedure pointed to by the <i>lpfn</i> parameter. The <i>hMod</i> parameter must be set to <b>NULL</b> if the <i>dwThreadId</i> parameter specifies a thread created by the current process and if the hook procedure is within the code associated with the current process.</param>
    <param name="dwThreadId">The identifier of the thread with which the hook procedure is to be associated. For desktop apps, if this parameter is zero, the hook procedure is associated with all existing threads running in the same desktop as the calling thread. For Windows Store apps, see the Remarks section.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the hook procedure.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowsHookExA">
    <summary>Installs an application-defined hook procedure into a hook chain. You would install a hook procedure to monitor the system for certain types of events. These events are associated either with a specific thread or with all threads in the same desktop as the calling thread.</summary>
    <param name="idHook">
      <para>The type of hook procedure to be installed. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_CALLWNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages before the system sends them to the destination window procedure. For more information, see the <see cref="CallWindowProcW function" />/<see cref="CallWindowProcA function" /> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_CALLWNDPROCRET</b>
                </term>
              </listheader>
              <listheader>
                <term>12</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages after they have been processed by the destination window procedure. For more information, see the [HOOKPROC callback function](nc-winuser-hookproc.md) hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_CBT</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that receives notifications useful to a CBT application. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/cbtproc">CBTProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_DEBUG</b>
                </term>
              </listheader>
              <listheader>
                <term>9</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure useful for debugging other hook procedures. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/debugproc">DebugProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_FOREGROUNDIDLE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that will be called when the application's foreground thread is about to become idle. This hook is useful for performing low priority tasks during idle time. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/foregroundidleproc">ForegroundIdleProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_GETMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages posted to a message queue. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/getmsgproc">GetMsgProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_JOURNALPLAYBACK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>
            <blockquote>[!WARNING]<b>Windows 11 and newer</b>: Journaling hook APIs are not supported. We recommend using the <see cref="SendInput" /> TextInput API instead.</blockquote>
            <para>Installs a hook procedure that posts messages previously recorded by a <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-hooks">WH_JOURNALRECORD</a> hook procedure. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/journalplaybackproc">JournalPlaybackProc</a> hook procedure.</para>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_JOURNALRECORD</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>
            <blockquote>[!WARNING]<b>Windows 11 and newer</b>: Journaling hook APIs are not supported. We recommend using the <see cref="SendInput" /> TextInput API instead.</blockquote>
            <para>Installs a hook procedure that records input messages posted to the system message queue. This hook is useful for recording macros. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/journalrecordproc">JournalRecordProc</a> hook procedure.</para>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_KEYBOARD</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors keystroke messages. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/keyboardproc">KeyboardProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_KEYBOARD_LL</b>
                </term>
              </listheader>
              <listheader>
                <term>13</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors low-level keyboard input events. For more information, see the [LowLevelKeyboardProc](/windows/win32/winmsg/lowlevelkeyboardproc) hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_MOUSE</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors mouse messages. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/mouseproc">MouseProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_MOUSE_LL</b>
                </term>
              </listheader>
              <listheader>
                <term>14</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors low-level mouse input events. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/lowlevelmouseproc">LowLevelMouseProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_MSGFILTER</b>
                </term>
              </listheader>
              <listheader>
                <term>-1</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/messageproc">MessageProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_SHELL</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that receives notifications useful to shell applications. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/shellproc">ShellProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_SYSMSGFILTER</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. The hook procedure monitors these messages for all applications in the same desktop as the calling thread. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/sysmsgproc">SysMsgProc</a> hook procedure.</description>
        </listheader>
      </list>
    </param>
    <param name="lpfn">A pointer to the hook procedure. If the <i>dwThreadId</i> parameter is zero or specifies the identifier of a thread created by a different process, the <i>lpfn</i> parameter must point to a hook procedure in a DLL. Otherwise, <i>lpfn</i> can point to a hook procedure in the code associated with the current process.</param>
    <param name="hmod">A handle to the DLL containing the hook procedure pointed to by the <i>lpfn</i> parameter. The <i>hMod</i> parameter must be set to <b>NULL</b> if the <i>dwThreadId</i> parameter specifies a thread created by the current process and if the hook procedure is within the code associated with the current process.</param>
    <param name="dwThreadId">The identifier of the thread with which the hook procedure is to be associated. For desktop apps, if this parameter is zero, the hook procedure is associated with all existing threads running in the same desktop as the calling thread. For Windows Store apps, see the Remarks section.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the hook procedure.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowsHookExW">
    <summary>Installs an application-defined hook procedure into a hook chain. You would install a hook procedure to monitor the system for certain types of events. These events are associated either with a specific thread or with all threads in the same desktop as the calling thread.</summary>
    <param name="idHook">
      <para>The type of hook procedure to be installed. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_CALLWNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages before the system sends them to the destination window procedure. For more information, see the <see cref="CallWindowProcW function" />/<see cref="CallWindowProcA function" /> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_CALLWNDPROCRET</b>
                </term>
              </listheader>
              <listheader>
                <term>12</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages after they have been processed by the destination window procedure. For more information, see the [HOOKPROC callback function](nc-winuser-hookproc.md) hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_CBT</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that receives notifications useful to a CBT application. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/cbtproc">CBTProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_DEBUG</b>
                </term>
              </listheader>
              <listheader>
                <term>9</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure useful for debugging other hook procedures. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/debugproc">DebugProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_FOREGROUNDIDLE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that will be called when the application's foreground thread is about to become idle. This hook is useful for performing low priority tasks during idle time. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/foregroundidleproc">ForegroundIdleProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_GETMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages posted to a message queue. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/getmsgproc">GetMsgProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_JOURNALPLAYBACK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>
            <blockquote>[!WARNING]<b>Windows 11 and newer</b>: Journaling hook APIs are not supported. We recommend using the <see cref="SendInput" /> TextInput API instead.</blockquote>
            <para>Installs a hook procedure that posts messages previously recorded by a <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-hooks">WH_JOURNALRECORD</a> hook procedure. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/journalplaybackproc">JournalPlaybackProc</a> hook procedure.</para>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_JOURNALRECORD</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>
            <blockquote>[!WARNING]<b>Windows 11 and newer</b>: Journaling hook APIs are not supported. We recommend using the <see cref="SendInput" /> TextInput API instead.</blockquote>
            <para>Installs a hook procedure that records input messages posted to the system message queue. This hook is useful for recording macros. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/journalrecordproc">JournalRecordProc</a> hook procedure.</para>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_KEYBOARD</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors keystroke messages. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/keyboardproc">KeyboardProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_KEYBOARD_LL</b>
                </term>
              </listheader>
              <listheader>
                <term>13</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors low-level keyboard input events. For more information, see the [LowLevelKeyboardProc](/windows/win32/winmsg/lowlevelkeyboardproc) hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_MOUSE</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors mouse messages. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/mouseproc">MouseProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_MOUSE_LL</b>
                </term>
              </listheader>
              <listheader>
                <term>14</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors low-level mouse input events. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/lowlevelmouseproc">LowLevelMouseProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_MSGFILTER</b>
                </term>
              </listheader>
              <listheader>
                <term>-1</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/messageproc">MessageProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_SHELL</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that receives notifications useful to shell applications. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/shellproc">ShellProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_SYSMSGFILTER</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. The hook procedure monitors these messages for all applications in the same desktop as the calling thread. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/sysmsgproc">SysMsgProc</a> hook procedure.</description>
        </listheader>
      </list>
    </param>
    <param name="lpfn">A pointer to the hook procedure. If the <i>dwThreadId</i> parameter is zero or specifies the identifier of a thread created by a different process, the <i>lpfn</i> parameter must point to a hook procedure in a DLL. Otherwise, <i>lpfn</i> can point to a hook procedure in the code associated with the current process.</param>
    <param name="hmod">A handle to the DLL containing the hook procedure pointed to by the <i>lpfn</i> parameter. The <i>hMod</i> parameter must be set to <b>NULL</b> if the <i>dwThreadId</i> parameter specifies a thread created by the current process and if the hook procedure is within the code associated with the current process.</param>
    <param name="dwThreadId">The identifier of the thread with which the hook procedure is to be associated. For desktop apps, if this parameter is zero, the hook procedure is associated with all existing threads running in the same desktop as the calling thread. For Windows Store apps, see the Remarks section.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the hook procedure.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowsHookEx">
    <summary>Installs an application-defined hook procedure into a hook chain. You would install a hook procedure to monitor the system for certain types of events. These events are associated either with a specific thread or with all threads in the same desktop as the calling thread.</summary>
    <param name="idHook">
      <para>The type of hook procedure to be installed. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_CALLWNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages before the system sends them to the destination window procedure. For more information, see the <see cref="CallWindowProcW function" />/<see cref="CallWindowProcA function" /> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_CALLWNDPROCRET</b>
                </term>
              </listheader>
              <listheader>
                <term>12</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages after they have been processed by the destination window procedure. For more information, see the <a href="https://docs.microsoft.com/nc-winuser-hookproc.md">HOOKPROC callback function</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_CBT</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that receives notifications useful to a CBT application. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/cbtproc">CBTProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_DEBUG</b>
                </term>
              </listheader>
              <listheader>
                <term>9</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure useful for debugging other hook procedures. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/debugproc">DebugProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_FOREGROUNDIDLE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that will be called when the application's foreground thread is about to become idle. This hook is useful for performing low priority tasks during idle time. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/foregroundidleproc">ForegroundIdleProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_GETMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages posted to a message queue. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/getmsgproc">GetMsgProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_JOURNALPLAYBACK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>
            <blockquote>[!WARNING] Journaling Hooks APIs are unsupported starting in Windows 11 and will be removed in a future release. Because of this, we highly recommend calling the <see cref="SendInput" /> TextInput API instead.</blockquote>
            <para>Installs a hook procedure that posts messages previously recorded by a <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-hooks">WH_JOURNALRECORD</a> hook procedure. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/journalplaybackproc">JournalPlaybackProc</a> hook procedure.</para>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_JOURNALRECORD</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>
            <blockquote>[!WARNING] Journaling Hooks APIs are unsupported starting in Windows 11 and will be removed in a future release. Because of this, we highly recommend calling the <see cref="SendInput" /> TextInput API instead.</blockquote>
            <para>Installs a hook procedure that records input messages posted to the system message queue. This hook is useful for recording macros. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/journalrecordproc">JournalRecordProc</a> hook procedure.</para>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_KEYBOARD</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors keystroke messages. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/keyboardproc">KeyboardProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_KEYBOARD_LL</b>
                </term>
              </listheader>
              <listheader>
                <term>13</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors low-level keyboard input events. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/lowlevelkeyboardproc">LowLevelKeyboardProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_MOUSE</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors mouse messages. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/mouseproc">MouseProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_MOUSE_LL</b>
                </term>
              </listheader>
              <listheader>
                <term>14</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors low-level mouse input events. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/lowlevelmouseproc">LowLevelMouseProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_MSGFILTER</b>
                </term>
              </listheader>
              <listheader>
                <term>-1</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/messageproc">MessageProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_SHELL</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that receives notifications useful to shell applications. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/shellproc">ShellProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_SYSMSGFILTER</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. The hook procedure monitors these messages for all applications in the same desktop as the calling thread. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/sysmsgproc">SysMsgProc</a> hook procedure.</description>
        </listheader>
      </list>
    </param>
    <param name="lpfn">A pointer to the hook procedure. If the <i>dwThreadId</i> parameter is zero or specifies the identifier of a thread created by a different process, the <i>lpfn</i> parameter must point to a hook procedure in a DLL. Otherwise, <i>lpfn</i> can point to a hook procedure in the code associated with the current process.</param>
    <param name="hmod">A handle to the DLL containing the hook procedure pointed to by the <i>lpfn</i> parameter. The <i>hMod</i> parameter must be set to <b>NULL</b> if the <i>dwThreadId</i> parameter specifies a thread created by the current process and if the hook procedure is within the code associated with the current process.</param>
    <param name="dwThreadId">The identifier of the thread with which the hook procedure is to be associated. For desktop apps, if this parameter is zero, the hook procedure is associated with all existing threads running in the same desktop as the calling thread. For Windows Store apps, see the Remarks section.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the hook procedure.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowsHookExA">
    <summary>Installs an application-defined hook procedure into a hook chain. You would install a hook procedure to monitor the system for certain types of events. These events are associated either with a specific thread or with all threads in the same desktop as the calling thread.</summary>
    <param name="idHook">
      <para>The type of hook procedure to be installed. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_CALLWNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages before the system sends them to the destination window procedure. For more information, see the <see cref="CallWindowProcW function" />/<see cref="CallWindowProcA function" /> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_CALLWNDPROCRET</b>
                </term>
              </listheader>
              <listheader>
                <term>12</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages after they have been processed by the destination window procedure. For more information, see the <a href="https://docs.microsoft.com/nc-winuser-hookproc.md">HOOKPROC callback function</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_CBT</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that receives notifications useful to a CBT application. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/cbtproc">CBTProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_DEBUG</b>
                </term>
              </listheader>
              <listheader>
                <term>9</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure useful for debugging other hook procedures. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/debugproc">DebugProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_FOREGROUNDIDLE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that will be called when the application's foreground thread is about to become idle. This hook is useful for performing low priority tasks during idle time. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/foregroundidleproc">ForegroundIdleProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_GETMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages posted to a message queue. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/getmsgproc">GetMsgProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_JOURNALPLAYBACK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>
            <blockquote>[!WARNING] Journaling Hooks APIs are unsupported starting in Windows 11 and will be removed in a future release. Because of this, we highly recommend calling the <see cref="SendInput" /> TextInput API instead.</blockquote>
            <para>Installs a hook procedure that posts messages previously recorded by a <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-hooks">WH_JOURNALRECORD</a> hook procedure. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/journalplaybackproc">JournalPlaybackProc</a> hook procedure.</para>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_JOURNALRECORD</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>
            <blockquote>[!WARNING] Journaling Hooks APIs are unsupported starting in Windows 11 and will be removed in a future release. Because of this, we highly recommend calling the <see cref="SendInput" /> TextInput API instead.</blockquote>
            <para>Installs a hook procedure that records input messages posted to the system message queue. This hook is useful for recording macros. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/journalrecordproc">JournalRecordProc</a> hook procedure.</para>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_KEYBOARD</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors keystroke messages. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/keyboardproc">KeyboardProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_KEYBOARD_LL</b>
                </term>
              </listheader>
              <listheader>
                <term>13</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors low-level keyboard input events. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/lowlevelkeyboardproc">LowLevelKeyboardProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_MOUSE</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors mouse messages. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/mouseproc">MouseProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_MOUSE_LL</b>
                </term>
              </listheader>
              <listheader>
                <term>14</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors low-level mouse input events. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/lowlevelmouseproc">LowLevelMouseProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_MSGFILTER</b>
                </term>
              </listheader>
              <listheader>
                <term>-1</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/messageproc">MessageProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_SHELL</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that receives notifications useful to shell applications. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/shellproc">ShellProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_SYSMSGFILTER</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. The hook procedure monitors these messages for all applications in the same desktop as the calling thread. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/sysmsgproc">SysMsgProc</a> hook procedure.</description>
        </listheader>
      </list>
    </param>
    <param name="lpfn">A pointer to the hook procedure. If the <i>dwThreadId</i> parameter is zero or specifies the identifier of a thread created by a different process, the <i>lpfn</i> parameter must point to a hook procedure in a DLL. Otherwise, <i>lpfn</i> can point to a hook procedure in the code associated with the current process.</param>
    <param name="hmod">A handle to the DLL containing the hook procedure pointed to by the <i>lpfn</i> parameter. The <i>hMod</i> parameter must be set to <b>NULL</b> if the <i>dwThreadId</i> parameter specifies a thread created by the current process and if the hook procedure is within the code associated with the current process.</param>
    <param name="dwThreadId">The identifier of the thread with which the hook procedure is to be associated. For desktop apps, if this parameter is zero, the hook procedure is associated with all existing threads running in the same desktop as the calling thread. For Windows Store apps, see the Remarks section.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the hook procedure.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowsHookExW">
    <summary>Installs an application-defined hook procedure into a hook chain. You would install a hook procedure to monitor the system for certain types of events. These events are associated either with a specific thread or with all threads in the same desktop as the calling thread.</summary>
    <param name="idHook">
      <para>The type of hook procedure to be installed. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_CALLWNDPROC</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages before the system sends them to the destination window procedure. For more information, see the <see cref="CallWindowProcW function" />/<see cref="CallWindowProcA function" /> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_CALLWNDPROCRET</b>
                </term>
              </listheader>
              <listheader>
                <term>12</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages after they have been processed by the destination window procedure. For more information, see the <a href="https://docs.microsoft.com/nc-winuser-hookproc.md">HOOKPROC callback function</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_CBT</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that receives notifications useful to a CBT application. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/cbtproc">CBTProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_DEBUG</b>
                </term>
              </listheader>
              <listheader>
                <term>9</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure useful for debugging other hook procedures. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/debugproc">DebugProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_FOREGROUNDIDLE</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that will be called when the application's foreground thread is about to become idle. This hook is useful for performing low priority tasks during idle time. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/foregroundidleproc">ForegroundIdleProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_GETMESSAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages posted to a message queue. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/getmsgproc">GetMsgProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_JOURNALPLAYBACK</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>
            <blockquote>[!WARNING] Journaling Hooks APIs are unsupported starting in Windows 11 and will be removed in a future release. Because of this, we highly recommend calling the <see cref="SendInput" /> TextInput API instead.</blockquote>
            <para>Installs a hook procedure that posts messages previously recorded by a <a href="https://docs.microsoft.com//windows/desktop/winmsg/about-hooks">WH_JOURNALRECORD</a> hook procedure. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/journalplaybackproc">JournalPlaybackProc</a> hook procedure.</para>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_JOURNALRECORD</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>
            <blockquote>[!WARNING] Journaling Hooks APIs are unsupported starting in Windows 11 and will be removed in a future release. Because of this, we highly recommend calling the <see cref="SendInput" /> TextInput API instead.</blockquote>
            <para>Installs a hook procedure that records input messages posted to the system message queue. This hook is useful for recording macros. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/journalrecordproc">JournalRecordProc</a> hook procedure.</para>
          </description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_KEYBOARD</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors keystroke messages. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/keyboardproc">KeyboardProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_KEYBOARD_LL</b>
                </term>
              </listheader>
              <listheader>
                <term>13</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors low-level keyboard input events. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/lowlevelkeyboardproc">LowLevelKeyboardProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_MOUSE</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors mouse messages. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/mouseproc">MouseProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_MOUSE_LL</b>
                </term>
              </listheader>
              <listheader>
                <term>14</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors low-level mouse input events. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/lowlevelmouseproc">LowLevelMouseProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_MSGFILTER</b>
                </term>
              </listheader>
              <listheader>
                <term>-1</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/messageproc">MessageProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_SHELL</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that receives notifications useful to shell applications. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/shellproc">ShellProc</a> hook procedure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WH_SYSMSGFILTER</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. The hook procedure monitors these messages for all applications in the same desktop as the calling thread. For more information, see the <a href="https://docs.microsoft.com//windows/win32/winmsg/sysmsgproc">SysMsgProc</a> hook procedure.</description>
        </listheader>
      </list>
    </param>
    <param name="lpfn">A pointer to the hook procedure. If the <i>dwThreadId</i> parameter is zero or specifies the identifier of a thread created by a different process, the <i>lpfn</i> parameter must point to a hook procedure in a DLL. Otherwise, <i>lpfn</i> can point to a hook procedure in the code associated with the current process.</param>
    <param name="hmod">A handle to the DLL containing the hook procedure pointed to by the <i>lpfn</i> parameter. The <i>hMod</i> parameter must be set to <b>NULL</b> if the <i>dwThreadId</i> parameter specifies a thread created by the current process and if the hook procedure is within the code associated with the current process.</param>
    <param name="dwThreadId">The identifier of the thread with which the hook procedure is to be associated. For desktop apps, if this parameter is zero, the hook procedure is associated with all existing threads running in the same desktop as the calling thread. For Windows Store apps, see the Remarks section.</param>
    <returns>
      <para>If the function succeeds, the return value is the handle to the hook procedure.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowText">
    <summary>Changes the text of the specified window's title bar (if it has one). If the specified window is a control, the text of the control is changed. However, <b>SetWindowText</b> cannot change the text of a control in another application.</summary>
    <param name="hWnd">A handle to the window or control whose text is to be changed.</param>
    <param name="lpString">The new title or control text.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowTextA">
    <summary>Changes the text of the specified window's title bar (if it has one). If the specified window is a control, the text of the control is changed. However, <b>SetWindowText</b> cannot change the text of a control in another application.</summary>
    <param name="hWnd">A handle to the window or control whose text is to be changed.</param>
    <param name="lpString">The new title or control text.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowTextW">
    <summary>Changes the text of the specified window's title bar (if it has one). If the specified window is a control, the text of the control is changed. However, <b>SetWindowText</b> cannot change the text of a control in another application.</summary>
    <param name="hWnd">A handle to the window or control whose text is to be changed.</param>
    <param name="lpString">The new title or control text.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowText">
    <summary>Changes the text of the specified window's title bar (if it has one). If the specified window is a control, the text of the control is changed. However, <b>SetWindowText</b> cannot change the text of a control in another application.</summary>
    <param name="hWnd">A handle to the window or control whose text is to be changed.</param>
    <param name="lpString">The new title or control text.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowTextA">
    <summary>Changes the text of the specified window's title bar (if it has one). If the specified window is a control, the text of the control is changed. However, <b>SetWindowText</b> cannot change the text of a control in another application.</summary>
    <param name="hWnd">A handle to the window or control whose text is to be changed.</param>
    <param name="lpString">The new title or control text.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetWindowTextW">
    <summary>Changes the text of the specified window's title bar (if it has one). If the specified window is a control, the text of the control is changed. However, <b>SetWindowText</b> cannot change the text of a control in another application.</summary>
    <param name="hWnd">A handle to the window or control whose text is to be changed.</param>
    <param name="lpString">The new title or control text.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetWinEventHook">
    <summary>Sets an event hook function for a range of events.</summary>
    <param name="eventMin">Specifies the <a href="https://docs.microsoft.com//windows/desktop/WinAuto/event-constants">event constant</a> for the lowest event value in the range of events that are handled by the hook function. This parameter can be set to <b>EVENT_MIN</b> to indicate the lowest possible event value.</param>
    <param name="eventMax">Specifies the event constant for the highest event value in the range of events that are handled by the hook function. This parameter can be set to <a href="https://docs.microsoft.com//windows/desktop/WinAuto/event-constants">EVENT_MAX</a> to indicate the highest possible event value.</param>
    <param name="hmodWinEventProc">Handle to the DLL that contains the hook function at <i>lpfnWinEventProc</i>, if the WINEVENT_INCONTEXT flag is specified in the <i>dwFlags</i> parameter. If the hook function is not located in a DLL, or if the WINEVENT_OUTOFCONTEXT flag is specified, this parameter is <b>NULL</b>.</param>
    <param name="pfnWinEventProc">Pointer to the event hook function. For more information about this function, see <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-wineventproc">WinEventProc</a>.</param>
    <param name="idProcess">Specifies the ID of the process from which the hook function receives events. Specify zero (0) to receive events from all processes on the current desktop.</param>
    <param name="idThread">Specifies the ID of the thread from which the hook function receives events. If this parameter is zero, the hook function is associated with all existing threads on the current desktop.</param>
    <param name="dwFlags">
      <para>Flag values that specify the location of the hook function and of the events to be skipped. The following flags are valid:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINEVENT_INCONTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The DLL that contains the callback function is mapped into the address space of the process that generates the event. With this flag, the system sends event notifications to the callback function as they occur. The hook function must be in a DLL when this flag is specified. This flag has no effect when both the calling process and the generating process are not 32-bit or 64-bit processes, or when the generating process is a console application. For more information, see <a href="https://docs.microsoft.com//windows/desktop/WinAuto/in-context-hook-functions">In-Context Hook Functions</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINEVENT_OUTOFCONTEXT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The callback function is not mapped into the address space of the process that generates the event. Because the hook function is called across process boundaries, the system must queue events. Although this method is asynchronous, events are guaranteed to be in sequential order. For more information, see <a href="https://docs.microsoft.com//windows/desktop/WinAuto/out-of-context-hook-functions">Out-of-Context Hook Functions</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINEVENT_SKIPOWNPROCESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Prevents this instance of the hook from receiving the events that are generated by threads in this process. This flag does not prevent threads from generating events.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WINEVENT_SKIPOWNTHREAD</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Prevents this instance of the hook from receiving the events that are generated by the thread that is registering this hook.</description>
        </listheader>
      </list> <para>The following flag combinations are valid:</para><list type="bullet"><item><description>WINEVENT_INCONTEXT | WINEVENT_SKIPOWNPROCESS</description></item><item><description>WINEVENT_INCONTEXT | WINEVENT_SKIPOWNTHREAD</description></item><item><description>WINEVENT_OUTOFCONTEXT | WINEVENT_SKIPOWNPROCESS</description></item><item><description>WINEVENT_OUTOFCONTEXT | WINEVENT_SKIPOWNTHREAD</description></item></list>Additionally, client applications can specify WINEVENT_INCONTEXT, or WINEVENT_OUTOFCONTEXT alone.<para>See Remarks section for information on Windows Store app development.</para></param>
    <returns>
      <para>If successful, returns an <a href="https://docs.microsoft.com//windows/desktop/WinAuto/hwineventhook">HWINEVENTHOOK</a> value that identifies this event hook instance. Applications save this return value to use it with the <see cref="UnhookWinEvent" /> function.</para>
      <para>If unsuccessful, returns zero.</para>
    </returns>
  </member>
  <member name="Windows.ShowCaret">
    <summary>Makes the caret visible on the screen at the caret's current position. When the caret becomes visible, it begins flashing automatically.</summary>
    <param name="hWnd">A handle to the window that owns the caret. If this parameter is <b>NULL</b>, <b>ShowCaret</b> searches the current task for the window that owns the caret.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ShowCursor">
    <summary>Displays or hides the cursor.</summary>
    <param name="bShow">If <i>bShow</i> is <b>TRUE</b>, the display count is incremented by one. If <i>bShow</i> is <b>FALSE</b>, the display count is decremented by one.</param>
    <returns>The return value specifies the new display counter.</returns>
  </member>
  <member name="Windows.ShowOwnedPopups">
    <summary>Shows or hides all pop-up windows owned by the specified window.</summary>
    <param name="hWnd">A handle to the window that owns the pop-up windows to be shown or hidden.</param>
    <param name="fShow">If this parameter is <b>TRUE</b>, all hidden pop-up windows are shown. If this parameter is <b>FALSE</b>, all visible pop-up windows are hidden.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ShowScrollBar">
    <summary>The <b>ShowScrollBar</b> function shows or hides the specified scroll bar.</summary>
    <param name="hWnd">Handle to a scroll bar control or a window with a standard scroll bar, depending on the value of the<i>wBar</i> parameter.</param>
    <param name="wBar">
      <para>Specifies the scroll bar(s) to be shown or hidden. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_BOTH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Shows or hides a window's standard horizontal and vertical scroll bars.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_CTL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Shows or hides a scroll bar control. The 						<i>hwnd</i> parameter must be the handle to the scroll bar control.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_HORZ</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Shows or hides a window's standard horizontal scroll bars.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SB_VERT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Shows or hides a window's standard vertical scroll bar.</description>
        </listheader>
      </list>
    </param>
    <param name="bShow">Specifies whether the scroll bar is shown or hidden. If this parameter is <b>TRUE</b>, the scroll bar is shown; otherwise, it is hidden.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ShowWindowAsync">
    <summary>Sets the show state of a window without waiting for the operation to complete.</summary>
    <param name="hWnd">A handle to the window.</param>
    <param name="nCmdShow">Controls how the window is to be shown. For a list of possible values, see the description of the <see cref="ShowWindow" /> function.</param>
    <returns>If the operation was successfully started, the return value is nonzero.</returns>
  </member>
  <member name="Windows.ShutdownBlockReasonCreate">
    <summary>Indicates that the system cannot be shut down and sets a reason string to be displayed to the user if system shutdown is initiated.</summary>
    <param name="hWnd">A handle to the main window of the application.</param>
    <param name="pwszReason">The reason the application must block system shutdown. This string will be truncated for display purposes after MAX_STR_BLOCKREASON characters.</param>
    <returns>
      <para>If the call succeeds, the return value is nonzero.</para>
      <para>If the call fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ShutdownBlockReasonDestroy">
    <summary>Indicates that the system can be shut down and frees the reason string.</summary>
    <param name="hWnd">A handle to the main window of the application.</param>
    <returns>
      <para>If the call succeeds, the return value is nonzero.</para>
      <para>If the call fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ShutdownBlockReasonQuery">
    <summary>Retrieves the reason string set by the <see cref="ShutdownBlockReasonCreate" /> function.</summary>
    <param name="hWnd">A handle to the main window of the application.</param>
    <param name="pwszBuff">A pointer to a buffer that receives the reason string. If this parameter is <b>NULL</b>, the function retrieves the number of characters in the reason string.</param>
    <param name="pcchBuff">A pointer to a variable that specifies the size of the <i>pwszBuff</i> buffer, in characters. If the function succeeds, this variable receives the number of characters copied into the buffer, including the <b>null</b>-terminating character. If the buffer is too small, the variable receives the required buffer size, in characters, not including the <b>null</b>-terminating character.</param>
    <returns>
      <para>If the call succeeds, the return value is nonzero.</para>
      <para>If the call fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SkipPointerFrameMessages">
    <summary>Determines which pointer input frame generated the most recently retrieved message for the specified pointer and discards any queued (unretrieved) pointer input messages generated from the same pointer input frame. If an application has retrieved information for an entire frame using the <see cref="GetPointerFrameInfo" /> function, the <see cref="GetPointerFrameInfoHistory" /> function or one of their type-specific variants, it can use this function to avoid retrieving and discarding remaining messages from that frame one by one.</summary>
    <param name="pointerId">Identifier of the pointer. Pending messages will be skipped for the frame that includes the most recently retrieved input for this pointer.</param>
    <returns>
      <para>If the function succeeds, the return value is non-zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SoundSentry">
    <summary>Triggers a visual signal to indicate that a sound is playing.</summary>
    <returns>
      <para>This function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TRUE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The visual signal was or will be displayed correctly.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An error prevented the signal from being displayed.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SubtractRect">
    <summary>The <b>SubtractRect</b> function determines the coordinates of a rectangle formed by subtracting one rectangle from another.</summary>
    <param name="lprcDst">A pointer to a <see cref="RECT" /> structure that receives the coordinates of the rectangle determined by subtracting the rectangle pointed to by <i>lprcSrc2</i> from the rectangle pointed to by <i>lprcSrc1</i>.</param>
    <param name="lprcSrc1">A pointer to a <see cref="RECT" /> structure from which the function subtracts the rectangle pointed to by <i>lprcSrc2</i>.</param>
    <param name="lprcSrc2">A pointer to a <see cref="RECT" /> structure that the function subtracts from the rectangle pointed to by <i>lprcSrc1</i>.</param>
    <returns>
      <para>If the resulting rectangle is empty, the return value is zero.</para>
      <para>If the resulting rectangle is not empty, the return value is nonzero.</para>
    </returns>
  </member>
  <member name="Windows.SwapMouseButton">
    <summary>Reverses or restores the meaning of the left and right mouse buttons.</summary>
    <param name="fSwap">If this parameter is <b>TRUE</b>, the left button generates right-button messages and the right button generates left-button messages. If this parameter is <b>FALSE</b>, the buttons are restored to their original meanings.</param>
    <returns>
      <para>If the meaning of the mouse buttons was reversed previously, before the function was called, the return value is nonzero.</para>
      <para>If the meaning of the mouse buttons was not reversed, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.SwitchDesktop">
    <summary>Makes the specified desktop visible and activates it. This enables the desktop to receive input from the user. The calling process must have DESKTOP_SWITCHDESKTOP access to the desktop for the<b>SwitchDesktop</b> function to succeed.</summary>
    <param name="hDesktop">
      <para>A handle to the desktop. This handle is returned by the<see cref="CreateDesktop" /> and<see cref="OpenDesktop" /> functions.</para>
      <para>This desktop must be associated with the current window station for the process.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />. However,<b>SwitchDesktop</b> only sets the last error for the following cases:</para>
      <list type="bullet">
        <item>
          <description>When the desktop belongs to an invisible window station</description>
        </item>
        <item>
          <description>When <i>hDesktop</i> is an invalid handle, refers to a destroyed desktop, or belongs to a different session than that of the calling process</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.SystemParametersInfoForDpi">
    <summary>Retrieves the value of one of the system-wide parameters, taking into account the provided DPI value.</summary>
    <param name="uiAction">The system-wide parameter to be retrieved. This function is only intended for use with <b>SPI_GETICONTITLELOGFONT</b>, <b>SPI_GETICONMETRICS</b>, or <b>SPI_GETNONCLIENTMETRICS</b>. See <see cref="SystemParametersInfo" /> for more information on these values.</param>
    <param name="uiParam">A parameter whose usage and format depends on the system parameter being queried. For more information about system-wide parameters, see the <i>uiAction</i> parameter. If not otherwise indicated, you must specify zero for this parameter.</param>
    <param name="pvParam">A parameter whose usage and format depends on the system parameter being queried. For more information about system-wide parameters, see the <i>uiAction</i> parameter. If not otherwise indicated, you must specify <b>NULL</b> for this parameter. For information on the <b>PVOID</b> datatype, see <a href="https://docs.microsoft.com//windows/desktop/WinProg/windows-data-types">Windows Data Types</a>.</param>
    <param name="fWinIni">Has no effect for with this API. This parameter only has an effect if you're setting parameter.</param>
    <param name="dpi">The DPI to use for scaling the metric.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.TabbedTextOut">
    <summary>The <b>TabbedTextOut</b> function writes a character string at a specified location, expanding tabs to the values specified in an array of tab-stop positions. Text is written in the currently selected font, background color, and text color.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate of the starting point of the string, in logical units.</param>
    <param name="y">The y-coordinate of the starting point of the string, in logical units.</param>
    <param name="lpString">A pointer to the character string to draw. The string does not need to be zero-terminated, since <i>nCount</i> specifies the length of the string.</param>
    <param name="chCount">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="nTabPositions">The number of values in the array of tab-stop positions.</param>
    <param name="lpnTabStopPositions">A pointer to an array containing the tab-stop positions, in logical units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.</param>
    <param name="nTabOrigin">The x-coordinate of the starting position from which tabs are expanded, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is the dimensions, in logical units, of the string. The height is in the high-order word and the width is in the low-order word.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.TabbedTextOutA">
    <summary>The <b>TabbedTextOut</b> function writes a character string at a specified location, expanding tabs to the values specified in an array of tab-stop positions. Text is written in the currently selected font, background color, and text color.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate of the starting point of the string, in logical units.</param>
    <param name="y">The y-coordinate of the starting point of the string, in logical units.</param>
    <param name="lpString">A pointer to the character string to draw. The string does not need to be zero-terminated, since <i>nCount</i> specifies the length of the string.</param>
    <param name="chCount">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="nTabPositions">The number of values in the array of tab-stop positions.</param>
    <param name="lpnTabStopPositions">A pointer to an array containing the tab-stop positions, in logical units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.</param>
    <param name="nTabOrigin">The x-coordinate of the starting position from which tabs are expanded, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is the dimensions, in logical units, of the string. The height is in the high-order word and the width is in the low-order word.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.TabbedTextOutW">
    <summary>The <b>TabbedTextOut</b> function writes a character string at a specified location, expanding tabs to the values specified in an array of tab-stop positions. Text is written in the currently selected font, background color, and text color.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate of the starting point of the string, in logical units.</param>
    <param name="y">The y-coordinate of the starting point of the string, in logical units.</param>
    <param name="lpString">A pointer to the character string to draw. The string does not need to be zero-terminated, since <i>nCount</i> specifies the length of the string.</param>
    <param name="chCount">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="nTabPositions">The number of values in the array of tab-stop positions.</param>
    <param name="lpnTabStopPositions">A pointer to an array containing the tab-stop positions, in logical units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.</param>
    <param name="nTabOrigin">The x-coordinate of the starting position from which tabs are expanded, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is the dimensions, in logical units, of the string. The height is in the high-order word and the width is in the low-order word.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.TabbedTextOut">
    <summary>The <b>TabbedTextOut</b> function writes a character string at a specified location, expanding tabs to the values specified in an array of tab-stop positions. Text is written in the currently selected font, background color, and text color.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate of the starting point of the string, in logical units.</param>
    <param name="y">The y-coordinate of the starting point of the string, in logical units.</param>
    <param name="lpString">A pointer to the character string to draw. The string does not need to be zero-terminated, since <i>nCount</i> specifies the length of the string.</param>
    <param name="chCount">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="nTabPositions">The number of values in the array of tab-stop positions.</param>
    <param name="lpnTabStopPositions">A pointer to an array containing the tab-stop positions, in logical units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.</param>
    <param name="nTabOrigin">The x-coordinate of the starting position from which tabs are expanded, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is the dimensions, in logical units, of the string. The height is in the high-order word and the width is in the low-order word.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.TabbedTextOutA">
    <summary>The <b>TabbedTextOut</b> function writes a character string at a specified location, expanding tabs to the values specified in an array of tab-stop positions. Text is written in the currently selected font, background color, and text color.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate of the starting point of the string, in logical units.</param>
    <param name="y">The y-coordinate of the starting point of the string, in logical units.</param>
    <param name="lpString">A pointer to the character string to draw. The string does not need to be zero-terminated, since <i>nCount</i> specifies the length of the string.</param>
    <param name="chCount">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="nTabPositions">The number of values in the array of tab-stop positions.</param>
    <param name="lpnTabStopPositions">A pointer to an array containing the tab-stop positions, in logical units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.</param>
    <param name="nTabOrigin">The x-coordinate of the starting position from which tabs are expanded, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is the dimensions, in logical units, of the string. The height is in the high-order word and the width is in the low-order word.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.TabbedTextOutW">
    <summary>The <b>TabbedTextOut</b> function writes a character string at a specified location, expanding tabs to the values specified in an array of tab-stop positions. Text is written in the currently selected font, background color, and text color.</summary>
    <param name="hdc">A handle to the device context.</param>
    <param name="x">The x-coordinate of the starting point of the string, in logical units.</param>
    <param name="y">The y-coordinate of the starting point of the string, in logical units.</param>
    <param name="lpString">A pointer to the character string to draw. The string does not need to be zero-terminated, since <i>nCount</i> specifies the length of the string.</param>
    <param name="chCount">The <a href="https://docs.microsoft.com//windows/desktop/gdi/specifying-length-of-text-output-string">length of the string</a> pointed to by <i>lpString</i>.</param>
    <param name="nTabPositions">The number of values in the array of tab-stop positions.</param>
    <param name="lpnTabStopPositions">A pointer to an array containing the tab-stop positions, in logical units. The tab stops must be sorted in increasing order; the smallest x-value should be the first item in the array.</param>
    <param name="nTabOrigin">The x-coordinate of the starting position from which tabs are expanded, in logical units.</param>
    <returns>
      <para>If the function succeeds, the return value is the dimensions, in logical units, of the string. The height is in the high-order word and the width is in the low-order word.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.TileWindows">
    <summary>Tiles the specified child windows of the specified parent window.</summary>
    <param name="hwndParent">A handle to the parent window. If this parameter is <b>NULL</b>, the desktop window is assumed.</param>
    <param name="wHow">
      <para>The tiling flags. This parameter can be one of the following values—optionally combined with <b>MDITILE_SKIPDISABLED</b> to prevent disabled MDI child windows from being tiled.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MDITILE_HORIZONTAL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Tiles windows horizontally.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MDITILE_VERTICAL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000</term>
              </listheader>
            </list>
          </description>
          <description>Tiles windows vertically.</description>
        </listheader>
      </list>
    </param>
    <param name="lpRect">A pointer to a structure that specifies the rectangular area, in client coordinates, within which the windows are arranged. If this parameter is <b>NULL</b>, the client area of the parent window is used.</param>
    <param name="cKids">The number of elements in the array specified by the <i>lpKids</i> parameter. This parameter is ignored if <i>lpKids</i> is <b>NULL</b>.</param>
    <param name="lpKids">An array of handles to the child windows to arrange. If a specified child window is a top-level window with the style <b>WS_EX_TOPMOST</b> or <b>WS_EX_TOOLWINDOW</b>, the child window is not arranged. If this parameter is <b>NULL</b>, all child windows of the specified parent window (or of the desktop window) are arranged.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of windows arranged.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ToAscii">
    <summary>
      <para>Translates the specified virtual-key code and keyboard state to the corresponding character or characters. The function translates the code using the input language and physical keyboard layout identified by the keyboard layout handle.</para>
      <para>To specify a handle to the keyboard layout to use to translate the specified code, use the <see cref="ToAsciiEx" /> function.</para>
      <blockquote>[!NOTE] This method may not work properly with some that may produce multiple characters (i.e. ligatures) and/or supplementary Unicode characters on a single key press. It is highly recommended to use the <see cref="ToUnicode" /> or <see cref="ToUnicodeEx" /> methods that handles such cases properly.</blockquote>
    </summary>
    <param name="uVirtKey">The virtual-key code to be translated. See <a href="https://docs.microsoft.com//windows/desktop/inputdev/virtual-key-codes">Virtual-Key Codes</a>.</param>
    <param name="uScanCode">The hardware scan code of the key to be translated. The high-order bit of this value is set if the key is up (not pressed).</param>
    <param name="lpKeyState">
      <para>A pointer to a 256-byte array that contains the current keyboard state. Each element (byte) in the array contains the state of one key. If the high-order bit of a byte is set, the key is down (pressed).</para>
      <para>The low bit, if set, indicates that the key is toggled on. In this function, only the toggle bit of the CAPS LOCK key is relevant. The toggle state of the NUM LOCK and SCROLL LOCK keys is ignored.</para>
    </param>
    <param name="lpChar">A pointer to the buffer that receives the translated character (or two characters packed into a single <b>WORD</b> value, where the low-order byte contains the first character and the high-order byte contains the second character).</param>
    <param name="uFlags">This parameter must be 1 if a menu is active, or 0 otherwise.</param>
    <returns>
      <para>The return value is one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The specified virtual key has no translation for the current state of the keyboard.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>One character was copied to the buffer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Two characters were copied to the buffer. This usually happens when a dead-key character (accent or diacritic) stored in the keyboard layout cannot be composed with the specified virtual key to form a single character.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.ToAsciiEx">
    <summary>
      <para>Translates the specified virtual-key code and keyboard state to the corresponding character or characters. The function translates the code using the input language and physical keyboard layout identified by the input locale identifier.</para>
      <blockquote>[!NOTE] This method may not work properly with some that may produce multiple characters (i.e. ligatures) and/or supplementary Unicode characters on a single key press. It is highly recommended to use the <see cref="ToUnicode" /> or <see cref="ToUnicodeEx" /> methods that handles such cases properly.</blockquote>
    </summary>
    <param name="uVirtKey">The virtual-key code to be translated. See <a href="https://docs.microsoft.com//windows/desktop/inputdev/virtual-key-codes">Virtual-Key Codes</a>.</param>
    <param name="uScanCode">The hardware scan code of the key to be translated. The high-order bit of this value is set if the key is up (not pressed).</param>
    <param name="lpKeyState">
      <para>A pointer to a 256-byte array that contains the current keyboard state. Each element (byte) in the array contains the state of one key. If the high-order bit of a byte is set, the key is down (pressed).</para>
      <para>The low bit, if set, indicates that the key is toggled on. In this function, only the toggle bit of the CAPS LOCK key is relevant. The toggle state of the NUM LOCK and SCOLL LOCK keys is ignored.</para>
    </param>
    <param name="lpChar">A pointer to the buffer that receives the translated character (or two characters packed into a single <b>WORD</b> value, where the low-order byte contains the first character and the high-order byte contains the second character).</param>
    <param name="uFlags">This parameter must be 1 if a menu is active, zero otherwise.</param>
    <param name="dwhkl">Input locale identifier to use to translate the code. This parameter can be any input locale identifier previously returned by the <see cref="LoadKeyboardLayout" /> function.</param>
    <returns>
      <para>The return value is one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The specified virtual key has no translation for the current state of the keyboard.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>One character was copied to the buffer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Two characters were copied to the buffer. This usually happens when a dead-key character (accent or diacritic) stored in the keyboard layout cannot be composed with the specified virtual key to form a single character.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.TOUCH_COORD_TO_PIXEL">
    <summary>Converts touch coordinates to pixels.</summary>
    <param name="l">The value to be converted from touch coordinates to pixels.</param>
  </member>
  <member name="Windows.TrackMouseEvent">
    <summary>
      <para>Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time.</para>
      <div>
        <b>Note</b>  The <see cref="_TrackMouseEvent" /> function calls <b>TrackMouseEvent</b> if it exists, otherwise <b>_TrackMouseEvent</b> emulates <b>TrackMouseEvent</b>.</div>
    </summary>
    <param name="lpEventTrack">A pointer to a <see cref="TRACKMOUSEEVENT" /> structure that contains tracking information.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero .</para>
      <para>If the function fails, return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.TrackPopupMenu">
    <summary>Displays a shortcut menu at the specified location and tracks the selection of items on the menu. The shortcut menu can appear anywhere on the screen.</summary>
    <param name="hMenu">A handle to the shortcut menu to be displayed. The handle can be obtained by calling <see cref="CreatePopupMenu" /> to create a new shortcut menu, or by calling <see cref="GetSubMenu" /> to retrieve a handle to a submenu associated with an existing menu item.</param>
    <param name="uFlags">
      <para>Use zero of more of these flags to specify function options.</para>
      <para>Use one of the following flags to specify how the function positions the shortcut menu horizontally.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TPM_CENTERALIGN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004L</term>
              </listheader>
            </list>
          </description>
          <description>Centers the shortcut menu horizontally relative to the coordinate specified by the <i>x</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TPM_LEFTALIGN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000L</term>
              </listheader>
            </list>
          </description>
          <description>Positions the shortcut menu so that its left side is aligned with the coordinate specified by the <i>x</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TPM_RIGHTALIGN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008L</term>
              </listheader>
            </list>
          </description>
          <description>Positions the shortcut menu so that its right side is aligned with the coordinate specified by the <i>x</i> parameter.</description>
        </listheader>
      </list> <para>Use one of the following flags to specify how the function positions the shortcut menu vertically.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_BOTTOMALIGN</b></term></listheader><listheader><term>0x0020L</term></listheader></list></description><description>Positions the shortcut menu so that its bottom side is aligned with the coordinate specified by the <i>y</i> parameter.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_TOPALIGN</b></term></listheader><listheader><term>0x0000L</term></listheader></list></description><description>Positions the shortcut menu so that its top side is aligned with the coordinate specified by the <i>y</i> parameter.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_VCENTERALIGN</b></term></listheader><listheader><term>0x0010L</term></listheader></list></description><description>Centers the shortcut menu vertically relative to the coordinate specified by the <i>y</i> parameter.</description></listheader></list> <para>Use the following flags to control discovery of the user selection without having to set up a parent window for the menu.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_NONOTIFY</b></term></listheader><listheader><term>0x0080L</term></listheader></list></description><description>The function does not send notification messages when the user clicks a menu item.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_RETURNCMD</b></term></listheader><listheader><term>0x0100L</term></listheader></list></description><description>The function returns the menu item identifier of the user's selection in the return value.</description></listheader></list> <para>Use one of the following flags to specify which mouse button the shortcut menu tracks.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_LEFTBUTTON</b></term></listheader><listheader><term>0x0000L</term></listheader></list></description><description>The user can select menu items with only the left mouse button.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_RIGHTBUTTON</b></term></listheader><listheader><term>0x0002L</term></listheader></list></description><description>The user can select menu items with both the left and right mouse buttons.</description></listheader></list> <para>Use any reasonable combination of the following flags to modify the animation of a menu. For example, by selecting a horizontal and a vertical flag, you can achieve diagonal animation.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_HORNEGANIMATION</b></term></listheader><listheader><term>0x0800L</term></listheader></list></description><description>Animates the menu from right to left.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_HORPOSANIMATION</b></term></listheader><listheader><term>0x0400L</term></listheader></list></description><description>Animates the menu from left to right.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_NOANIMATION</b></term></listheader><listheader><term>0x4000L</term></listheader></list></description><description>Displays menu without animation.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_VERNEGANIMATION</b></term></listheader><listheader><term>0x2000L</term></listheader></list></description><description>Animates the menu from bottom to top.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_VERPOSANIMATION</b></term></listheader><listheader><term>0x1000L</term></listheader></list></description><description>Animates the menu from top to bottom.</description></listheader></list> <para>For any animation to occur, the <see cref="SystemParametersInfo" /> function must set <b>SPI_SETMENUANIMATION</b>. Also, all the TPM_*ANIMATION flags, except <b>TPM_NOANIMATION</b>, are ignored if menu fade animation is on. For more information, see the <b>SPI_GETMENUFADE</b> flag in <b>SystemParametersInfo</b>.</para><para>Use the <b>TPM_RECURSE</b> flag to display a menu when another menu is already displayed. This is intended to support context menus within a menu.</para><para>For right-to-left text layout, use <b>TPM_LAYOUTRTL</b>. By default, the text layout is left-to-right.</para></param>
    <param name="x">The horizontal location of the shortcut menu, in screen coordinates.</param>
    <param name="y">The vertical location of the shortcut menu, in screen coordinates.</param>
    <param name="nReserved">Reserved; must be zero.</param>
    <param name="hWnd">A handle to the window that owns the shortcut menu. This window receives all messages from the menu. The window does not receive a <a href="https://docs.microsoft.com//windows/desktop/menurc/wm-command">WM_COMMAND</a> message from the menu until the function returns. If you specify TPM_NONOTIFY in the <i>uFlags</i> parameter, the function does not send messages to the window identified by <i>hWnd</i>. However, you must still pass a window handle in <i>hWnd</i>. It can be any window handle from your application.</param>
    <param name="prcRect">Ignored.</param>
    <returns>
      <para>If you specify <b>TPM_RETURNCMD</b> in the <i>uFlags</i> parameter, the return value is the menu-item identifier of the item that the user selected. If the user cancels the menu without making a selection, or if an error occurs, the return value is zero.</para>
      <para>If you do not specify <b>TPM_RETURNCMD</b> in the <i>uFlags</i> parameter, the return value is nonzero if the function succeeds and zero if it fails. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.TrackPopupMenuEx">
    <summary>Displays a shortcut menu at the specified location and tracks the selection of items on the shortcut menu. The shortcut menu can appear anywhere on the screen.</summary>
    <param name="hMenu">A handle to the shortcut menu to be displayed. This handle can be obtained by calling the <see cref="CreatePopupMenu" /> function to create a new shortcut menu or by calling the <see cref="GetSubMenu" /> function to retrieve a handle to a submenu associated with an existing menu item.</param>
    <param name="uFlags">
      <para>Specifies function options.</para>
      <para>Use one of the following flags to specify how the function positions the shortcut menu horizontally.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TPM_CENTERALIGN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004L</term>
              </listheader>
            </list>
          </description>
          <description>Centers the shortcut menu horizontally relative to the coordinate specified by the <i>x</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TPM_LEFTALIGN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000L</term>
              </listheader>
            </list>
          </description>
          <description>Positions the shortcut menu so that its left side is aligned with the coordinate specified by the <i>x</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TPM_RIGHTALIGN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008L</term>
              </listheader>
            </list>
          </description>
          <description>Positions the shortcut menu so that its right side is aligned with the coordinate specified by the <i>x</i> parameter.</description>
        </listheader>
      </list> <para>Use one of the following flags to specify how the function positions the shortcut menu vertically.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_BOTTOMALIGN</b></term></listheader><listheader><term>0x0020L</term></listheader></list></description><description>Positions the shortcut menu so that its bottom side is aligned with the coordinate specified by the <i>y</i> parameter.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_TOPALIGN</b></term></listheader><listheader><term>0x0000L</term></listheader></list></description><description>Positions the shortcut menu so that its top side is aligned with the coordinate specified by the <i>y</i> parameter.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_VCENTERALIGN</b></term></listheader><listheader><term>0x0010L</term></listheader></list></description><description>Centers the shortcut menu vertically relative to the coordinate specified by the <i>y</i> parameter.</description></listheader></list> <para>Use the following flags to control discovery of the user selection without having to set up a parent window for the menu.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_NONOTIFY</b></term></listheader><listheader><term>0x0080L</term></listheader></list></description><description>The function does not send notification messages when the user clicks a menu item.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_RETURNCMD</b></term></listheader><listheader><term>0x0100L</term></listheader></list></description><description>The function returns the menu item identifier of the user's selection in the return value.</description></listheader></list> <para>Use one of the following flags to specify which mouse button the shortcut menu tracks.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_LEFTBUTTON</b></term></listheader><listheader><term>0x0000L</term></listheader></list></description><description>The user can select menu items with only the left mouse button.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_RIGHTBUTTON</b></term></listheader><listheader><term>0x0002L</term></listheader></list></description><description>The user can select menu items with both the left and right mouse buttons.</description></listheader></list> <para>Use any reasonable combination of the following flags to modify the animation of a menu. For example, by selecting a horizontal and a vertical flag, you can achieve diagonal animation.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_HORNEGANIMATION</b></term></listheader><listheader><term>0x0800L</term></listheader></list></description><description>Animates the menu from right to left.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_HORPOSANIMATION</b></term></listheader><listheader><term>0x0400L</term></listheader></list></description><description>Animates the menu from left to right.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_NOANIMATION</b></term></listheader><listheader><term>0x4000L</term></listheader></list></description><description>Displays menu without animation.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_VERNEGANIMATION</b></term></listheader><listheader><term>0x2000L</term></listheader></list></description><description>Animates the menu from bottom to top.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_VERPOSANIMATION</b></term></listheader><listheader><term>0x1000L</term></listheader></list></description><description>Animates the menu from top to bottom.</description></listheader></list> <para>For any animation to occur, the <see cref="SystemParametersInfo" /> function must set <b>SPI_SETMENUANIMATION</b>. Also, all the <b>TPM_*ANIMATION</b> flags, except <b>TPM_NOANIMATION</b>, are ignored if menu fade animation is on. For more information, see the <b>SPI_GETMENUFADE</b> flag in <b>SystemParametersInfo</b>.</para><para>Use the <b>TPM_RECURSE</b> flag to display a menu when another menu is already displayed. This is intended to support context menus within a menu.</para><para>Use one of the following flags to specify whether to accommodate horizontal or vertical alignment.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_HORIZONTAL</b></term></listheader><listheader><term>0x0000L</term></listheader></list></description><description>If the menu cannot be shown at the specified location without overlapping the excluded rectangle, the system tries to accommodate the requested horizontal alignment before the requested vertical alignment.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>TPM_VERTICAL</b></term></listheader><listheader><term>0x0040L</term></listheader></list></description><description>If the menu cannot be shown at the specified location without overlapping the excluded rectangle, the system tries to accommodate the requested vertical alignment before the requested horizontal alignment.</description></listheader></list> <para>The excluded rectangle is a portion of the screen that the menu should not overlap; it is specified by the <i>lptpm</i> parameter.</para><para>For right-to-left text layout, use <b>TPM_LAYOUTRTL</b>. By default, the text layout is left-to-right.</para></param>
    <param name="x">The horizontal location of the shortcut menu, in screen coordinates.</param>
    <param name="y">The vertical location of the shortcut menu, in screen coordinates.</param>
    <param name="hwnd">A handle to the window that owns the shortcut menu. This window receives all messages from the menu. The window does not receive a <a href="https://docs.microsoft.com//windows/desktop/menurc/wm-command">WM_COMMAND</a> message from the menu until the function returns. If you specify TPM_NONOTIFY in the <i>fuFlags</i> parameter, the function does not send messages to the window identified by <i>hwnd</i>. However, you must still pass a window handle in <i>hwnd</i>. It can be any window handle from your application.</param>
    <param name="lptpm">A pointer to a <see cref="TPMPARAMS" /> structure that specifies an area of the screen the menu should not overlap. This parameter can be <b>NULL</b>.</param>
    <returns>
      <para>If you specify <b>TPM_RETURNCMD</b> in the <i>fuFlags</i> parameter, the return value is the menu-item identifier of the item that the user selected. If the user cancels the menu without making a selection, or if an error occurs, the return value is zero.</para>
      <para>If you do not specify <b>TPM_RETURNCMD</b> in the <i>fuFlags</i> parameter, the return value is nonzero if the function succeeds and zero if it fails. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.TranslateAccelerator">
    <summary>Processes accelerator keys for menu commands. The function translates a <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a> or <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-syskeydown">WM_SYSKEYDOWN</a> message to a <a href="https://docs.microsoft.com//windows/desktop/menurc/wm-command">WM_COMMAND</a> or <a href="https://docs.microsoft.com//windows/desktop/menurc/wm-syscommand">WM_SYSCOMMAND</a> message (if there is an entry for the key in the specified accelerator table) and then sends the <b>WM_COMMAND</b> or <b>WM_SYSCOMMAND</b> message directly to the specified window procedure. <b>TranslateAccelerator</b> does not return until the window procedure has processed the message.</summary>
    <param name="hWnd">A handle to the window whose messages are to be translated.</param>
    <param name="hAccTable">A handle to the accelerator table. The accelerator table must have been loaded by a call to the <see cref="LoadAccelerators" /> function or created by a call to the <see cref="CreateAcceleratorTable" /> function.</param>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that contains message information retrieved from the calling thread's message queue using the <see cref="GetMessage" /> or <see cref="PeekMessage" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.TranslateAcceleratorA">
    <summary>Processes accelerator keys for menu commands. The function translates a <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a> or <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-syskeydown">WM_SYSKEYDOWN</a> message to a <a href="https://docs.microsoft.com//windows/desktop/menurc/wm-command">WM_COMMAND</a> or <a href="https://docs.microsoft.com//windows/desktop/menurc/wm-syscommand">WM_SYSCOMMAND</a> message (if there is an entry for the key in the specified accelerator table) and then sends the <b>WM_COMMAND</b> or <b>WM_SYSCOMMAND</b> message directly to the specified window procedure. <b>TranslateAccelerator</b> does not return until the window procedure has processed the message.</summary>
    <param name="hWnd">A handle to the window whose messages are to be translated.</param>
    <param name="hAccTable">A handle to the accelerator table. The accelerator table must have been loaded by a call to the <see cref="LoadAccelerators" /> function or created by a call to the <see cref="CreateAcceleratorTable" /> function.</param>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that contains message information retrieved from the calling thread's message queue using the <see cref="GetMessage" /> or <see cref="PeekMessage" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.TranslateAcceleratorW">
    <summary>Processes accelerator keys for menu commands. The function translates a <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a> or <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-syskeydown">WM_SYSKEYDOWN</a> message to a <a href="https://docs.microsoft.com//windows/desktop/menurc/wm-command">WM_COMMAND</a> or <a href="https://docs.microsoft.com//windows/desktop/menurc/wm-syscommand">WM_SYSCOMMAND</a> message (if there is an entry for the key in the specified accelerator table) and then sends the <b>WM_COMMAND</b> or <b>WM_SYSCOMMAND</b> message directly to the specified window procedure. <b>TranslateAccelerator</b> does not return until the window procedure has processed the message.</summary>
    <param name="hWnd">A handle to the window whose messages are to be translated.</param>
    <param name="hAccTable">A handle to the accelerator table. The accelerator table must have been loaded by a call to the <see cref="LoadAccelerators" /> function or created by a call to the <see cref="CreateAcceleratorTable" /> function.</param>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that contains message information retrieved from the calling thread's message queue using the <see cref="GetMessage" /> or <see cref="PeekMessage" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.TranslateAccelerator">
    <summary>Processes accelerator keys for menu commands. The function translates a <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a> or <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-syskeydown">WM_SYSKEYDOWN</a> message to a <a href="https://docs.microsoft.com//windows/desktop/menurc/wm-command">WM_COMMAND</a> or <a href="https://docs.microsoft.com//windows/desktop/menurc/wm-syscommand">WM_SYSCOMMAND</a> message (if there is an entry for the key in the specified accelerator table) and then sends the <b>WM_COMMAND</b> or <b>WM_SYSCOMMAND</b> message directly to the specified window procedure. <b>TranslateAccelerator</b> does not return until the window procedure has processed the message.</summary>
    <param name="hWnd">A handle to the window whose messages are to be translated.</param>
    <param name="hAccTable">A handle to the accelerator table. The accelerator table must have been loaded by a call to the <see cref="LoadAccelerators" /> function or created by a call to the <see cref="CreateAcceleratorTable" /> function.</param>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that contains message information retrieved from the calling thread's message queue using the <see cref="GetMessage" /> or <see cref="PeekMessage" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.TranslateAcceleratorA">
    <summary>Processes accelerator keys for menu commands. The function translates a <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a> or <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-syskeydown">WM_SYSKEYDOWN</a> message to a <a href="https://docs.microsoft.com//windows/desktop/menurc/wm-command">WM_COMMAND</a> or <a href="https://docs.microsoft.com//windows/desktop/menurc/wm-syscommand">WM_SYSCOMMAND</a> message (if there is an entry for the key in the specified accelerator table) and then sends the <b>WM_COMMAND</b> or <b>WM_SYSCOMMAND</b> message directly to the specified window procedure. <b>TranslateAccelerator</b> does not return until the window procedure has processed the message.</summary>
    <param name="hWnd">A handle to the window whose messages are to be translated.</param>
    <param name="hAccTable">A handle to the accelerator table. The accelerator table must have been loaded by a call to the <see cref="LoadAccelerators" /> function or created by a call to the <see cref="CreateAcceleratorTable" /> function.</param>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that contains message information retrieved from the calling thread's message queue using the <see cref="GetMessage" /> or <see cref="PeekMessage" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.TranslateAcceleratorW">
    <summary>Processes accelerator keys for menu commands. The function translates a <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a> or <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-syskeydown">WM_SYSKEYDOWN</a> message to a <a href="https://docs.microsoft.com//windows/desktop/menurc/wm-command">WM_COMMAND</a> or <a href="https://docs.microsoft.com//windows/desktop/menurc/wm-syscommand">WM_SYSCOMMAND</a> message (if there is an entry for the key in the specified accelerator table) and then sends the <b>WM_COMMAND</b> or <b>WM_SYSCOMMAND</b> message directly to the specified window procedure. <b>TranslateAccelerator</b> does not return until the window procedure has processed the message.</summary>
    <param name="hWnd">A handle to the window whose messages are to be translated.</param>
    <param name="hAccTable">A handle to the accelerator table. The accelerator table must have been loaded by a call to the <see cref="LoadAccelerators" /> function or created by a call to the <see cref="CreateAcceleratorTable" /> function.</param>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that contains message information retrieved from the calling thread's message queue using the <see cref="GetMessage" /> or <see cref="PeekMessage" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.TranslateMDISysAccel">
    <summary>Processes accelerator keystrokes for window menu commands of the multiple-document interface (MDI) child windows associated with the specified MDI client window. The function translates <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keyup">WM_KEYUP</a> and <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a> messages to <a href="https://docs.microsoft.com//windows/desktop/menurc/wm-syscommand">WM_SYSCOMMAND</a> messages and sends them to the appropriate MDI child windows.</summary>
    <param name="hWndClient">A handle to the MDI client window.</param>
    <param name="lpMsg">A pointer to a message retrieved by using the <see cref="GetMessage" /> or <see cref="PeekMessage" /> function. The message must be an <see cref="MSG" /> structure and contain message information from the application's message queue.</param>
    <returns>
      <para>If the message is translated into a system command, the return value is nonzero.</para>
      <para>If the message is not translated into a system command, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.TranslateMessage">
    <summary>Translates virtual-key messages into character messages. The character messages are posted to the calling thread's message queue, to be read the next time the thread calls the <see cref="GetMessage" /> or <see cref="PeekMessage" /> function.</summary>
    <param name="lpMsg">A pointer to an <see cref="MSG" /> structure that contains message information retrieved from the calling thread's message queue by using the <see cref="GetMessage" /> or <see cref="PeekMessage" /> function.</param>
    <returns>
      <para>If the message is translated (that is, a character message is posted to the thread's message queue), the return value is nonzero.</para>
      <para>If the message is <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a>, <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-keyup">WM_KEYUP</a>, <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-syskeydown">WM_SYSKEYDOWN</a>, or <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-syskeyup">WM_SYSKEYUP</a>, the return value is nonzero, regardless of the translation.</para>
      <para>If the message is not translated (that is, a character message is not posted to the thread's message queue), the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.UnhookWindowsHookEx">
    <summary>Removes a hook procedure installed in a hook chain by the <see cref="SetWindowsHookEx" /> function.</summary>
    <param name="hhk">A handle to the hook to be removed. This parameter is a hook handle obtained by a previous call to <see cref="SetWindowsHookEx" />.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.UnhookWinEvent">
    <summary>Removes an event hook function created by a previous call to <see cref="SetWinEventHook" />.</summary>
    <param name="hWinEventHook">Handle to the event hook returned in the previous call to <see cref="SetWinEventHook" />.</param>
    <returns>
      <para>If successful, returns <b>TRUE</b>; otherwise, returns <b>FALSE</b>.</para>
      <para>Three common errors cause this function to fail:</para>
      <list type="bullet">
        <item>
          <description>The <i>hWinEventHook</i> parameter is <b>NULL</b> or not valid.</description>
        </item>
        <item>
          <description>The event hook specified by <i>hWinEventHook</i> was already removed.</description>
        </item>
        <item>
          <description>
            <b>UnhookWinEvent</b> is called from a thread that is different from the original call to <see cref="SetWinEventHook" />.</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.UnionRect">
    <summary>The <b>UnionRect</b> function creates the union of two rectangles. The union is the smallest rectangle that contains both source rectangles.</summary>
    <param name="lprcDst">A pointer to the <see cref="RECT" /> structure that will receive a rectangle containing the rectangles pointed to by the <i>lprcSrc1</i> and <i>lprcSrc2</i> parameters.</param>
    <param name="lprcSrc1">A pointer to the <see cref="RECT" /> structure that contains the first source rectangle.</param>
    <param name="lprcSrc2">A pointer to the <see cref="RECT" /> structure that contains the second source rectangle.</param>
    <returns>
      <para>If the specified structure contains a nonempty rectangle, the return value is nonzero.</para>
      <para>If the specified structure does not contain a nonempty rectangle, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.UnloadKeyboardLayout">
    <summary>Unloads an input locale identifier (formerly called a keyboard layout).</summary>
    <param name="hkl">The input locale identifier to be unloaded.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. The function can fail for the following reasons:</para>
      <list type="bullet">
        <item>
          <description>An invalid input locale identifier was passed.</description>
        </item>
        <item>
          <description>The input locale identifier was preloaded.</description>
        </item>
        <item>
          <description>The input locale identifier is in use.</description>
        </item>
      </list>To get extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.UnregisterClass">
    <summary>Unregisters a window class, freeing the memory required for the class.</summary>
    <param name="lpClassName">A null-terminated string or a class atom. If <i>lpClassName</i> is a string, it specifies the window class name. This class name must have been registered by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. System classes, such as dialog box controls, cannot be unregistered. If this parameter is an atom, it must be a class atom created by a previous call to the <b>RegisterClass</b> or <b>RegisterClassEx</b> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero.</param>
    <param name="hInstance">A handle to the instance of the module that created the class.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the class could not be found or if a window still exists that was created with the class, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.UnregisterClassA">
    <summary>Unregisters a window class, freeing the memory required for the class.</summary>
    <param name="lpClassName">A null-terminated string or a class atom. If <i>lpClassName</i> is a string, it specifies the window class name. This class name must have been registered by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. System classes, such as dialog box controls, cannot be unregistered. If this parameter is an atom, it must be a class atom created by a previous call to the <b>RegisterClass</b> or <b>RegisterClassEx</b> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero.</param>
    <param name="hInstance">A handle to the instance of the module that created the class.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the class could not be found or if a window still exists that was created with the class, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.UnregisterClassW">
    <summary>Unregisters a window class, freeing the memory required for the class.</summary>
    <param name="lpClassName">A null-terminated string or a class atom. If <i>lpClassName</i> is a string, it specifies the window class name. This class name must have been registered by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. System classes, such as dialog box controls, cannot be unregistered. If this parameter is an atom, it must be a class atom created by a previous call to the <b>RegisterClass</b> or <b>RegisterClassEx</b> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero.</param>
    <param name="hInstance">A handle to the instance of the module that created the class.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the class could not be found or if a window still exists that was created with the class, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.UnregisterClass">
    <summary>Unregisters a window class, freeing the memory required for the class.</summary>
    <param name="lpClassName">A null-terminated string or a class atom. If <i>lpClassName</i> is a string, it specifies the window class name. This class name must have been registered by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. System classes, such as dialog box controls, cannot be unregistered. If this parameter is an atom, it must be a class atom created by a previous call to the <b>RegisterClass</b> or <b>RegisterClassEx</b> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero.</param>
    <param name="hInstance">A handle to the instance of the module that created the class.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the class could not be found or if a window still exists that was created with the class, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.UnregisterClassA">
    <summary>Unregisters a window class, freeing the memory required for the class.</summary>
    <param name="lpClassName">A null-terminated string or a class atom. If <i>lpClassName</i> is a string, it specifies the window class name. This class name must have been registered by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. System classes, such as dialog box controls, cannot be unregistered. If this parameter is an atom, it must be a class atom created by a previous call to the <b>RegisterClass</b> or <b>RegisterClassEx</b> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero.</param>
    <param name="hInstance">A handle to the instance of the module that created the class.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the class could not be found or if a window still exists that was created with the class, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.UnregisterClassW">
    <summary>Unregisters a window class, freeing the memory required for the class.</summary>
    <param name="lpClassName">A null-terminated string or a class atom. If <i>lpClassName</i> is a string, it specifies the window class name. This class name must have been registered by a previous call to the <see cref="RegisterClass" /> or <see cref="RegisterClassEx" /> function. System classes, such as dialog box controls, cannot be unregistered. If this parameter is an atom, it must be a class atom created by a previous call to the <b>RegisterClass</b> or <b>RegisterClassEx</b> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero.</param>
    <param name="hInstance">A handle to the instance of the module that created the class.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the class could not be found or if a window still exists that was created with the class, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.UnregisterDeviceNotification">
    <summary>Closes the specified device notification handle.</summary>
    <param name="Handle">Device notification handle returned by the<see cref="RegisterDeviceNotification" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.UnregisterHotKey">
    <summary>Frees a hot key previously registered by the calling thread.</summary>
    <param name="hWnd">A handle to the window associated with the hot key to be freed. This parameter should be <b>NULL</b> if the hot key is not associated with a window.</param>
    <param name="id">The identifier of the hot key to be freed.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.UnregisterPointerInputTarget">
    <summary>Allows the caller to unregister a target window to which all pointer input of the specified type is redirected.</summary>
    <param name="hwnd">Window to be un-registered as a global redirection target on its desktop.</param>
    <param name="pointerType">Type of pointer input to no longer be redirected to the specified window. This is any valid and supported value from the <see cref="POINTER_INPUT_TYPE" /> enumeration. Note that the generic <b>PT_POINTER</b> type and the<b> PT_MOUSE</b> type are not valid in this parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is non-zero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.UnregisterPowerSettingNotification">
    <summary>Unregisters the power setting notification.</summary>
    <param name="Handle">The handle returned from the <see cref="RegisterPowerSettingNotification" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.UnregisterSuspendResumeNotification">
    <summary>Cancels a registration to receive notification when the system is suspended or resumed. Similar to <see cref="PowerUnregisterSuspendResumeNotification" /> but operates in user mode.</summary>
    <param name="Handle">A handle to a registration obtained by calling the <see cref="RegisterSuspendResumeNotification" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.UnregisterTouchWindow">
    <summary>Registers a window as no longer being touch-capable.</summary>
    <param name="hwnd">The handle of the window. The function fails with <b>ERROR_ACCESS_DENIED</b> if the calling thread does not own the specified window.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, use the <see cref="GetLastError" /> function.</para>
    </returns>
  </member>
  <member name="Windows.UpdateLayeredWindow">
    <summary>Updates the position, size, shape, content, and translucency of a layered window.</summary>
    <param name="hWnd">
      <para>A handle to a layered window. A layered window is created by specifying <b>WS_EX_LAYERED</b> when creating the window with the <see cref="CreateWindowEx" /> function.</para>
      <para>
        <b>Windows 8:  </b>The <b>WS_EX_LAYERED</b> style is supported for top-level windows and child windows. Previous Windows versions support <b>WS_EX_LAYERED</b> only for top-level windows.</para>
    </param>
    <param name="hdcDst">
      <para>A handle to a DC for the screen. This handle is obtained by specifying <b>NULL</b> when calling the <see cref="GetDC" /> function. It is used for palette color matching when the window contents are updated. If <i>hdcDst</i> is <b>NULL</b>, the default palette will be used.</para>
      <para>If <i>hdcSrc</i> is <b>NULL</b>, <i>hdcDst</i> must be <b>NULL</b>.</para>
    </param>
    <param name="pptDst">A pointer to a structure that specifies the new screen position of the layered window. If the current position is not changing, <i>pptDst</i> can be <b>NULL</b>.</param>
    <param name="psize">A pointer to a structure that specifies the new size of the layered window. If the size of the window is not changing, <i>psize</i> can be <b>NULL</b>. If <i>hdcSrc</i> is <b>NULL</b>, <i>psize</i> must be <b>NULL</b>.</param>
    <param name="hdcSrc">A handle to a DC for the surface that defines the layered window. This handle can be obtained by calling the <see cref="CreateCompatibleDC" /> function. If the shape and visual context of the window are not changing, <i>hdcSrc</i> can be <b>NULL</b>.</param>
    <param name="pptSrc">A pointer to a structure that specifies the location of the layer in the device context. If <i>hdcSrc</i> is <b>NULL</b>, <i>pptSrc</i> should be <b>NULL</b>.</param>
    <param name="crKey">A structure that specifies the color key to be used when composing the layered window. To generate a <a href="https://docs.microsoft.com//windows/desktop/gdi/colorref">COLORREF</a>, use the <see cref="RGB" /> macro.</param>
    <param name="pblend">A pointer to a structure that specifies the transparency value to be used when composing the layered window.</param>
    <param name="dwFlags">
      <para>This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ULW_ALPHA</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Use <i>pblend</i> as the blend function. If the display mode is 256 colors or less, the effect of this value is the same as the effect of <b>ULW_OPAQUE</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ULW_COLORKEY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>Use <i>crKey</i> as the transparency color.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ULW_OPAQUE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Draw an opaque layered window.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ULW_EX_NORESIZE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>Force the <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms633557(v=vs.85)">UpdateLayeredWindowIndirect</a> function to fail if the current window size does not match the size specified in the <i>psize</i>.</description>
        </listheader>
      </list> <para>If <i>hdcSrc</i> is <b>NULL</b>, <i>dwFlags</i> should be zero.</para></param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.UpdateWindow">
    <summary>The <b>UpdateWindow</b> function updates the client area of the specified window by sending a <a href="https://docs.microsoft.com//windows/desktop/gdi/wm-paint">WM_PAINT</a> message to the window if the window's update region is not empty. The function sends a <b>WM_PAINT</b> message directly to the window procedure of the specified window, bypassing the application queue. If the update region is empty, no message is sent.</summary>
    <param name="hWnd">Handle to the window to be updated.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.UserHandleGrantAccess">
    <summary>Grants or denies access to a handle to a User object to a job that has a user-interface restriction. When access is granted, all processes associated with the job can subsequently recognize and use the handle. When access is denied, the processes can no longer use the handle. For more information see<a href="https://docs.microsoft.com//windows/desktop/SysInfo/user-objects">User Objects</a>.</summary>
    <param name="hUserHandle">A handle to the User object.</param>
    <param name="hJob">A handle to the job to be granted access to the User handle. The<see cref="CreateJobObject" /> or<see cref="OpenJobObject" /> function returns this handle.</param>
    <param name="bGrant">If this parameter is TRUE, all processes associated with the job can recognize and use the handle. If the parameter is FALSE, the processes cannot use the handle.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ValidateRect">
    <summary>The <b>ValidateRect</b> function validates the client area within a rectangle by removing the rectangle from the update region of the specified window.</summary>
    <param name="hWnd">Handle to the window whose update region is to be modified. If this parameter is <b>NULL</b>, the system invalidates and redraws all windows and sends the <b>WM_ERASEBKGND</b> and <b>WM_NCPAINT</b> messages to the window procedure before the function returns.</param>
    <param name="lpRect">Pointer to a <see cref="RECT" /> structure that contains the client coordinates of the rectangle to be removed from the update region. If this parameter is <b>NULL</b>, the entire client area is removed.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.ValidateRgn">
    <summary>The <b>ValidateRgn</b> function validates the client area within a region by removing the region from the current update region of the specified window.</summary>
    <param name="hWnd">Handle to the window whose update region is to be modified.</param>
    <param name="hRgn">Handle to a region that defines the area to be removed from the update region. If this parameter is <b>NULL</b>, the entire client area is removed.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero.</para>
    </returns>
  </member>
  <member name="Windows.VkKeyScanEx">
    <summary>Translates a character to the corresponding virtual-key code and shift state. The function translates the character using the input language and physical keyboard layout identified by the input locale identifier.</summary>
    <param name="ch">The character to be translated into a virtual-key code.</param>
    <param name="dwhkl">Input locale identifier used to translate the character. This parameter can be any input locale identifier previously returned by the <see cref="LoadKeyboardLayout" /> function.</param>
    <returns>
      <para>If the function succeeds, the low-order byte of the return value contains the virtual-key code and the high-order byte contains the shift state, which can be a combination of the following flag bits.</para>
      <list type="table">
        <listheader>
          <description>Return value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Either SHIFT key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Either CTRL key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Either ALT key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>The Hankaku key is pressed</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>16</term>
              </listheader>
            </list>
          </description>
          <description>Reserved (defined by the keyboard layout driver).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>32</term>
              </listheader>
            </list>
          </description>
          <description>Reserved (defined by the keyboard layout driver).</description>
        </listheader>
      </list> <para>If the function finds no key that translates to the passed character code, both the low-order and high-order bytes contain –1.</para></returns>
  </member>
  <member name="Windows.VkKeyScanExA">
    <summary>Translates a character to the corresponding virtual-key code and shift state. The function translates the character using the input language and physical keyboard layout identified by the input locale identifier.</summary>
    <param name="ch">The character to be translated into a virtual-key code.</param>
    <param name="dwhkl">Input locale identifier used to translate the character. This parameter can be any input locale identifier previously returned by the <see cref="LoadKeyboardLayout" /> function.</param>
    <returns>
      <para>If the function succeeds, the low-order byte of the return value contains the virtual-key code and the high-order byte contains the shift state, which can be a combination of the following flag bits.</para>
      <list type="table">
        <listheader>
          <description>Return value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Either SHIFT key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Either CTRL key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Either ALT key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>The Hankaku key is pressed</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>16</term>
              </listheader>
            </list>
          </description>
          <description>Reserved (defined by the keyboard layout driver).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>32</term>
              </listheader>
            </list>
          </description>
          <description>Reserved (defined by the keyboard layout driver).</description>
        </listheader>
      </list> <para>If the function finds no key that translates to the passed character code, both the low-order and high-order bytes contain –1.</para></returns>
  </member>
  <member name="Windows.VkKeyScanExW">
    <summary>Translates a character to the corresponding virtual-key code and shift state. The function translates the character using the input language and physical keyboard layout identified by the input locale identifier.</summary>
    <param name="ch">The character to be translated into a virtual-key code.</param>
    <param name="dwhkl">Input locale identifier used to translate the character. This parameter can be any input locale identifier previously returned by the <see cref="LoadKeyboardLayout" /> function.</param>
    <returns>
      <para>If the function succeeds, the low-order byte of the return value contains the virtual-key code and the high-order byte contains the shift state, which can be a combination of the following flag bits.</para>
      <list type="table">
        <listheader>
          <description>Return value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Either SHIFT key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Either CTRL key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Either ALT key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>The Hankaku key is pressed</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>16</term>
              </listheader>
            </list>
          </description>
          <description>Reserved (defined by the keyboard layout driver).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>32</term>
              </listheader>
            </list>
          </description>
          <description>Reserved (defined by the keyboard layout driver).</description>
        </listheader>
      </list> <para>If the function finds no key that translates to the passed character code, both the low-order and high-order bytes contain –1.</para></returns>
  </member>
  <member name="Windows.VkKeyScanEx">
    <summary>Translates a character to the corresponding virtual-key code and shift state. The function translates the character using the input language and physical keyboard layout identified by the input locale identifier.</summary>
    <param name="ch">The character to be translated into a virtual-key code.</param>
    <param name="dwhkl">Input locale identifier used to translate the character. This parameter can be any input locale identifier previously returned by the <see cref="LoadKeyboardLayout" /> function.</param>
    <returns>
      <para>If the function succeeds, the low-order byte of the return value contains the virtual-key code and the high-order byte contains the shift state, which can be a combination of the following flag bits.</para>
      <list type="table">
        <listheader>
          <description>Return value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Either SHIFT key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Either CTRL key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Either ALT key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>The Hankaku key is pressed</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>16</term>
              </listheader>
            </list>
          </description>
          <description>Reserved (defined by the keyboard layout driver).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>32</term>
              </listheader>
            </list>
          </description>
          <description>Reserved (defined by the keyboard layout driver).</description>
        </listheader>
      </list> <para>If the function finds no key that translates to the passed character code, both the low-order and high-order bytes contain –1.</para></returns>
  </member>
  <member name="Windows.VkKeyScanExA">
    <summary>Translates a character to the corresponding virtual-key code and shift state. The function translates the character using the input language and physical keyboard layout identified by the input locale identifier.</summary>
    <param name="ch">The character to be translated into a virtual-key code.</param>
    <param name="dwhkl">Input locale identifier used to translate the character. This parameter can be any input locale identifier previously returned by the <see cref="LoadKeyboardLayout" /> function.</param>
    <returns>
      <para>If the function succeeds, the low-order byte of the return value contains the virtual-key code and the high-order byte contains the shift state, which can be a combination of the following flag bits.</para>
      <list type="table">
        <listheader>
          <description>Return value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Either SHIFT key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Either CTRL key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Either ALT key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>The Hankaku key is pressed</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>16</term>
              </listheader>
            </list>
          </description>
          <description>Reserved (defined by the keyboard layout driver).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>32</term>
              </listheader>
            </list>
          </description>
          <description>Reserved (defined by the keyboard layout driver).</description>
        </listheader>
      </list> <para>If the function finds no key that translates to the passed character code, both the low-order and high-order bytes contain –1.</para></returns>
  </member>
  <member name="Windows.VkKeyScanExW">
    <summary>Translates a character to the corresponding virtual-key code and shift state. The function translates the character using the input language and physical keyboard layout identified by the input locale identifier.</summary>
    <param name="ch">The character to be translated into a virtual-key code.</param>
    <param name="dwhkl">Input locale identifier used to translate the character. This parameter can be any input locale identifier previously returned by the <see cref="LoadKeyboardLayout" /> function.</param>
    <returns>
      <para>If the function succeeds, the low-order byte of the return value contains the virtual-key code and the high-order byte contains the shift state, which can be a combination of the following flag bits.</para>
      <list type="table">
        <listheader>
          <description>Return value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Either SHIFT key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Either CTRL key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Either ALT key is pressed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>The Hankaku key is pressed</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>16</term>
              </listheader>
            </list>
          </description>
          <description>Reserved (defined by the keyboard layout driver).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>32</term>
              </listheader>
            </list>
          </description>
          <description>Reserved (defined by the keyboard layout driver).</description>
        </listheader>
      </list> <para>If the function finds no key that translates to the passed character code, both the low-order and high-order bytes contain –1.</para></returns>
  </member>
  <member name="Windows.WaitForInputIdle">
    <summary>Waits until the specified process has finished processing its initial input and is waiting for user input with no input pending, or until the time-out interval has elapsed.</summary>
    <param name="hProcess">A handle to the process. If this process is a console application or does not have a message queue,<b>WaitForInputIdle</b> returns immediately.</param>
    <param name="dwMilliseconds">The time-out interval, in milliseconds. If <i>dwMilliseconds</i> is INFINITE, the function does not return until the process is idle.</param>
    <returns>
      <para>The following table shows the possible return values for this function.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The wait was satisfied successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WAIT_TIMEOUT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The wait was terminated because the time-out interval elapsed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>WAIT_FAILED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An error occurred.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.WaitMessage">
    <summary>Yields control to other threads when a thread has no other messages in its message queue. The <b>WaitMessage</b> function suspends the thread and does not return until a new message is placed in the thread's message queue.</summary>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.WindowFromDC">
    <summary>The <b>WindowFromDC</b> function returns a handle to the window associated with the specified display device context (DC). Output functions that use the specified device context draw into this window.</summary>
    <param name="hDC">Handle to the device context from which a handle to the associated window is to be retrieved.</param>
    <returns>The return value is a handle to the window associated with the specified DC. If no window is associated with the specified DC, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.WindowFromPhysicalPoint">
    <summary>Retrieves a handle to the window that contains the specified physical point.</summary>
    <param name="Point">The physical coordinates of the point.</param>
    <returns>A handle to the window that contains the given physical point. If no window exists at the point, this value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.WindowFromPoint">
    <summary>Retrieves a handle to the window that contains the specified point.</summary>
    <param name="Point">The point to be checked.</param>
    <returns>The return value is a handle to the window that contains the point. If no window exists at the given point, the return value is <b>NULL</b>. If the point is over a static text control, the return value is a handle to the window under the static text control.</returns>
  </member>
  <member name="Windows.WinHelp">
    <summary>Launches Windows Help (Winhelp.exe) and passes additional data that indicates the nature of the help requested by the application.</summary>
    <param name="hWndMain">A handle to the window requesting help. The <b>WinHelp</b> function uses this handle to keep track of which applications have requested help. If the <i>uCommand</i> parameter specifies <b>HELP_CONTEXTMENU</b> or <b>HELP_WM_HELP</b>, <i>hWndMain</i> identifies the control requesting help.</param>
    <param name="lpszHelp">
      <para>The address of a null-terminated string containing the path, if necessary, and the name of the Help file that <b>WinHelp</b> is to display.</para>
      <para>The file name can be followed by an angle bracket (&gt;) and the name of a secondary window if the topic is to be displayed in a secondary window rather than in the primary window. You must define the name of the secondary window in the [WINDOWS] section of the Help project (.hpj) file.</para>
    </param>
    <param name="uCommand">The type of help requested. For a list of possible values and how they affect the value to place in the <i>dwData</i> parameter, see the Remarks section.</param>
    <param name="dwData">Additional data. The value used depends on the value of the <i>uCommand</i> parameter. For a list of possible <i>dwData</i> values, see the Remarks section.</param>
    <returns>Returns nonzero if successful, or zero otherwise. To retrieve extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.WinHelpA">
    <summary>Launches Windows Help (Winhelp.exe) and passes additional data that indicates the nature of the help requested by the application.</summary>
    <param name="hWndMain">A handle to the window requesting help. The <b>WinHelp</b> function uses this handle to keep track of which applications have requested help. If the <i>uCommand</i> parameter specifies <b>HELP_CONTEXTMENU</b> or <b>HELP_WM_HELP</b>, <i>hWndMain</i> identifies the control requesting help.</param>
    <param name="lpszHelp">
      <para>The address of a null-terminated string containing the path, if necessary, and the name of the Help file that <b>WinHelp</b> is to display.</para>
      <para>The file name can be followed by an angle bracket (&gt;) and the name of a secondary window if the topic is to be displayed in a secondary window rather than in the primary window. You must define the name of the secondary window in the [WINDOWS] section of the Help project (.hpj) file.</para>
    </param>
    <param name="uCommand">The type of help requested. For a list of possible values and how they affect the value to place in the <i>dwData</i> parameter, see the Remarks section.</param>
    <param name="dwData">Additional data. The value used depends on the value of the <i>uCommand</i> parameter. For a list of possible <i>dwData</i> values, see the Remarks section.</param>
    <returns>Returns nonzero if successful, or zero otherwise. To retrieve extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.WinHelpW">
    <summary>Launches Windows Help (Winhelp.exe) and passes additional data that indicates the nature of the help requested by the application.</summary>
    <param name="hWndMain">A handle to the window requesting help. The <b>WinHelp</b> function uses this handle to keep track of which applications have requested help. If the <i>uCommand</i> parameter specifies <b>HELP_CONTEXTMENU</b> or <b>HELP_WM_HELP</b>, <i>hWndMain</i> identifies the control requesting help.</param>
    <param name="lpszHelp">
      <para>The address of a null-terminated string containing the path, if necessary, and the name of the Help file that <b>WinHelp</b> is to display.</para>
      <para>The file name can be followed by an angle bracket (&gt;) and the name of a secondary window if the topic is to be displayed in a secondary window rather than in the primary window. You must define the name of the secondary window in the [WINDOWS] section of the Help project (.hpj) file.</para>
    </param>
    <param name="uCommand">The type of help requested. For a list of possible values and how they affect the value to place in the <i>dwData</i> parameter, see the Remarks section.</param>
    <param name="dwData">Additional data. The value used depends on the value of the <i>uCommand</i> parameter. For a list of possible <i>dwData</i> values, see the Remarks section.</param>
    <returns>Returns nonzero if successful, or zero otherwise. To retrieve extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.WinHelp">
    <summary>Launches Windows Help (Winhelp.exe) and passes additional data that indicates the nature of the help requested by the application.</summary>
    <param name="hWndMain">A handle to the window requesting help. The <b>WinHelp</b> function uses this handle to keep track of which applications have requested help. If the <i>uCommand</i> parameter specifies <b>HELP_CONTEXTMENU</b> or <b>HELP_WM_HELP</b>, <i>hWndMain</i> identifies the control requesting help.</param>
    <param name="lpszHelp">
      <para>The address of a null-terminated string containing the path, if necessary, and the name of the Help file that <b>WinHelp</b> is to display.</para>
      <para>The file name can be followed by an angle bracket (&gt;) and the name of a secondary window if the topic is to be displayed in a secondary window rather than in the primary window. You must define the name of the secondary window in the [WINDOWS] section of the Help project (.hpj) file.</para>
    </param>
    <param name="uCommand">The type of help requested. For a list of possible values and how they affect the value to place in the <i>dwData</i> parameter, see the Remarks section.</param>
    <param name="dwData">Additional data. The value used depends on the value of the <i>uCommand</i> parameter. For a list of possible <i>dwData</i> values, see the Remarks section.</param>
    <returns>Returns nonzero if successful, or zero otherwise. To retrieve extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.WinHelpA">
    <summary>Launches Windows Help (Winhelp.exe) and passes additional data that indicates the nature of the help requested by the application.</summary>
    <param name="hWndMain">A handle to the window requesting help. The <b>WinHelp</b> function uses this handle to keep track of which applications have requested help. If the <i>uCommand</i> parameter specifies <b>HELP_CONTEXTMENU</b> or <b>HELP_WM_HELP</b>, <i>hWndMain</i> identifies the control requesting help.</param>
    <param name="lpszHelp">
      <para>The address of a null-terminated string containing the path, if necessary, and the name of the Help file that <b>WinHelp</b> is to display.</para>
      <para>The file name can be followed by an angle bracket (&gt;) and the name of a secondary window if the topic is to be displayed in a secondary window rather than in the primary window. You must define the name of the secondary window in the [WINDOWS] section of the Help project (.hpj) file.</para>
    </param>
    <param name="uCommand">The type of help requested. For a list of possible values and how they affect the value to place in the <i>dwData</i> parameter, see the Remarks section.</param>
    <param name="dwData">Additional data. The value used depends on the value of the <i>uCommand</i> parameter. For a list of possible <i>dwData</i> values, see the Remarks section.</param>
    <returns>Returns nonzero if successful, or zero otherwise. To retrieve extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.WinHelpW">
    <summary>Launches Windows Help (Winhelp.exe) and passes additional data that indicates the nature of the help requested by the application.</summary>
    <param name="hWndMain">A handle to the window requesting help. The <b>WinHelp</b> function uses this handle to keep track of which applications have requested help. If the <i>uCommand</i> parameter specifies <b>HELP_CONTEXTMENU</b> or <b>HELP_WM_HELP</b>, <i>hWndMain</i> identifies the control requesting help.</param>
    <param name="lpszHelp">
      <para>The address of a null-terminated string containing the path, if necessary, and the name of the Help file that <b>WinHelp</b> is to display.</para>
      <para>The file name can be followed by an angle bracket (&gt;) and the name of a secondary window if the topic is to be displayed in a secondary window rather than in the primary window. You must define the name of the secondary window in the [WINDOWS] section of the Help project (.hpj) file.</para>
    </param>
    <param name="uCommand">The type of help requested. For a list of possible values and how they affect the value to place in the <i>dwData</i> parameter, see the Remarks section.</param>
    <param name="dwData">Additional data. The value used depends on the value of the <i>uCommand</i> parameter. For a list of possible <i>dwData</i> values, see the Remarks section.</param>
    <returns>Returns nonzero if successful, or zero otherwise. To retrieve extended error information, call <see cref="GetLastError" />.</returns>
  </member>
  <member name="Windows.wvsprintf">
    <summary>
      <para>Writes formatted data to the specified buffer using a pointer to a list of arguments. The items pointed to by the argument list are converted and copied to an output buffer according to the corresponding format specification in the format-control string. The function appends a terminating null character to the characters it writes, but the return value does not include the terminating null character in its character count.</para>
      <div>
        <b>Warning</b>  Do not use. Consider using one of the following functions instead: <see cref="StringCbVPrintf" />, 				<see cref="StringCbVPrintfEx" />, <see cref="StringCchVPrintf" />, or 				<see cref="StringCchVPrintfEx" />. See Security Considerations.</div>
    </summary>
    <param name="unnamedParam1">The buffer that is to receive the formatted output. The maximum size of the buffer is 1,024 bytes.</param>
    <param name="unnamedParam2">The format-control specifications. In addition to ordinary ASCII characters, a format specification for each argument appears in this string. For more information about the format specification, see the <see cref="wsprintf" /> function.</param>
    <param name="arglist">Each element of this list specifies an argument for the format-control string. The number, type, and interpretation of the arguments depend on the corresponding format-control specifications in the<i>lpFmt</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters stored in the buffer, not counting the terminating null character.</para>
      <para>If the function fails, the return value is less than the length of the expected output. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wvsprintfA">
    <summary>
      <para>Writes formatted data to the specified buffer using a pointer to a list of arguments. The items pointed to by the argument list are converted and copied to an output buffer according to the corresponding format specification in the format-control string. The function appends a terminating null character to the characters it writes, but the return value does not include the terminating null character in its character count.</para>
      <div>
        <b>Warning</b>  Do not use. Consider using one of the following functions instead: <see cref="StringCbVPrintf" />, 				<see cref="StringCbVPrintfEx" />, <see cref="StringCchVPrintf" />, or 				<see cref="StringCchVPrintfEx" />. See Security Considerations.</div>
    </summary>
    <param name="unnamedParam1">The buffer that is to receive the formatted output. The maximum size of the buffer is 1,024 bytes.</param>
    <param name="unnamedParam2">The format-control specifications. In addition to ordinary ASCII characters, a format specification for each argument appears in this string. For more information about the format specification, see the <see cref="wsprintf" /> function.</param>
    <param name="arglist">Each element of this list specifies an argument for the format-control string. The number, type, and interpretation of the arguments depend on the corresponding format-control specifications in the<i>lpFmt</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters stored in the buffer, not counting the terminating null character.</para>
      <para>If the function fails, the return value is less than the length of the expected output. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wvsprintfW">
    <summary>
      <para>Writes formatted data to the specified buffer using a pointer to a list of arguments. The items pointed to by the argument list are converted and copied to an output buffer according to the corresponding format specification in the format-control string. The function appends a terminating null character to the characters it writes, but the return value does not include the terminating null character in its character count.</para>
      <div>
        <b>Warning</b>  Do not use. Consider using one of the following functions instead: <see cref="StringCbVPrintf" />, 				<see cref="StringCbVPrintfEx" />, <see cref="StringCchVPrintf" />, or 				<see cref="StringCchVPrintfEx" />. See Security Considerations.</div>
    </summary>
    <param name="unnamedParam1">The buffer that is to receive the formatted output. The maximum size of the buffer is 1,024 bytes.</param>
    <param name="unnamedParam2">The format-control specifications. In addition to ordinary ASCII characters, a format specification for each argument appears in this string. For more information about the format specification, see the <see cref="wsprintf" /> function.</param>
    <param name="arglist">Each element of this list specifies an argument for the format-control string. The number, type, and interpretation of the arguments depend on the corresponding format-control specifications in the<i>lpFmt</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters stored in the buffer, not counting the terminating null character.</para>
      <para>If the function fails, the return value is less than the length of the expected output. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wvsprintf">
    <summary>
      <para>Writes formatted data to the specified buffer using a pointer to a list of arguments. The items pointed to by the argument list are converted and copied to an output buffer according to the corresponding format specification in the format-control string. The function appends a terminating null character to the characters it writes, but the return value does not include the terminating null character in its character count.</para>
      <div>
        <b>Warning</b>  Do not use. Consider using one of the following functions instead: <see cref="StringCbVPrintf" />, 				<see cref="StringCbVPrintfEx" />, <see cref="StringCchVPrintf" />, or 				<see cref="StringCchVPrintfEx" />. See Security Considerations.</div>
    </summary>
    <param name="unnamedParam1">The buffer that is to receive the formatted output. The maximum size of the buffer is 1,024 bytes.</param>
    <param name="unnamedParam2">The format-control specifications. In addition to ordinary ASCII characters, a format specification for each argument appears in this string. For more information about the format specification, see the <see cref="wsprintf" /> function.</param>
    <param name="arglist">Each element of this list specifies an argument for the format-control string. The number, type, and interpretation of the arguments depend on the corresponding format-control specifications in the<i>lpFmt</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters stored in the buffer, not counting the terminating null character.</para>
      <para>If the function fails, the return value is less than the length of the expected output. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wvsprintfA">
    <summary>
      <para>Writes formatted data to the specified buffer using a pointer to a list of arguments. The items pointed to by the argument list are converted and copied to an output buffer according to the corresponding format specification in the format-control string. The function appends a terminating null character to the characters it writes, but the return value does not include the terminating null character in its character count.</para>
      <div>
        <b>Warning</b>  Do not use. Consider using one of the following functions instead: <see cref="StringCbVPrintf" />, 				<see cref="StringCbVPrintfEx" />, <see cref="StringCchVPrintf" />, or 				<see cref="StringCchVPrintfEx" />. See Security Considerations.</div>
    </summary>
    <param name="unnamedParam1">The buffer that is to receive the formatted output. The maximum size of the buffer is 1,024 bytes.</param>
    <param name="unnamedParam2">The format-control specifications. In addition to ordinary ASCII characters, a format specification for each argument appears in this string. For more information about the format specification, see the <see cref="wsprintf" /> function.</param>
    <param name="arglist">Each element of this list specifies an argument for the format-control string. The number, type, and interpretation of the arguments depend on the corresponding format-control specifications in the<i>lpFmt</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters stored in the buffer, not counting the terminating null character.</para>
      <para>If the function fails, the return value is less than the length of the expected output. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.wvsprintfW">
    <summary>
      <para>Writes formatted data to the specified buffer using a pointer to a list of arguments. The items pointed to by the argument list are converted and copied to an output buffer according to the corresponding format specification in the format-control string. The function appends a terminating null character to the characters it writes, but the return value does not include the terminating null character in its character count.</para>
      <div>
        <b>Warning</b>  Do not use. Consider using one of the following functions instead: <see cref="StringCbVPrintf" />, 				<see cref="StringCbVPrintfEx" />, <see cref="StringCchVPrintf" />, or 				<see cref="StringCchVPrintfEx" />. See Security Considerations.</div>
    </summary>
    <param name="unnamedParam1">The buffer that is to receive the formatted output. The maximum size of the buffer is 1,024 bytes.</param>
    <param name="unnamedParam2">The format-control specifications. In addition to ordinary ASCII characters, a format specification for each argument appears in this string. For more information about the format specification, see the <see cref="wsprintf" /> function.</param>
    <param name="arglist">Each element of this list specifies an argument for the format-control string. The number, type, and interpretation of the arguments depend on the corresponding format-control specifications in the<i>lpFmt</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters stored in the buffer, not counting the terminating null character.</para>
      <para>If the function fails, the return value is less than the length of the expected output. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
</doc>