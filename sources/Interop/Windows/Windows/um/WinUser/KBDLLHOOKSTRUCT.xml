<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="KBDLLHOOKSTRUCT">
    <summary>Contains information about a low-level keyboard input event.</summary>
  </member>
  <member name="KBDLLHOOKSTRUCT.vkCode">
    <summary>A <a href="https://docs.microsoft.com//windows/desktop/inputdev/virtual-key-codes">virtual-key code</a>. The code must be a value in the range 1 to 254.</summary>
  </member>
  <member name="KBDLLHOOKSTRUCT.scanCode">
    <summary>A hardware scan code for the key.</summary>
  </member>
  <member name="KBDLLHOOKSTRUCT.flags">
    <summary>
      <para>The extended-key flag, event-injected flags, context code, and transition-state flag. This member is specified as follows. An application can use the following values to test the keystroke flags. Testing LLKHF_INJECTED (bit 4) will tell you whether the event was injected. If it was, then testing LLKHF_LOWER_IL_INJECTED (bit 1) will tell you whether or not the event was injected from a process running at lower integrity level.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LLKHF_EXTENDED</b>
                </term>
              </listheader>
              <listheader>
                <term>(KF_EXTENDED &gt;&gt; 8)</term>
              </listheader>
            </list>
          </description>
          <description>Test the extended-key flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LLKHF_LOWER_IL_INJECTED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>Test the event-injected (from a process running at lower integrity level) flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LLKHF_INJECTED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Test the event-injected (from any process) flag.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LLKHF_ALTDOWN</b>
                </term>
              </listheader>
              <listheader>
                <term>(KF_ALTDOWN &gt;&gt; 8)</term>
              </listheader>
            </list>
          </description>
          <description>Test the context code.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>LLKHF_UP</b>
                </term>
              </listheader>
              <listheader>
                <term>(KF_UP &gt;&gt; 8)</term>
              </listheader>
            </list>
          </description>
          <description>Test the transition-state flag.</description>
        </listheader>
      </list> <para>The following table describes the layout of this value.</para><list type="table"><listheader><description>Bits</description><description>Description</description></listheader><listheader><description>0</description><description>Specifies whether the key is an extended key, such as a function key or a key on the numeric keypad. The value is 1 if the key is an extended key; otherwise, it is 0.</description></listheader><listheader><description>1</description><description>Specifies whether the event was injected from a process running at lower integrity level. The value is 1 if that is the case; otherwise, it is 0. Note that bit 4 is also set whenever bit 1 is set.</description></listheader><listheader><description>2-3</description><description>Reserved.</description></listheader><listheader><description>4</description><description>Specifies whether the event was injected. The value is 1 if that is the case; otherwise, it is 0. Note that bit 1 is not necessarily set when bit 4 is set.</description></listheader><listheader><description>5</description><description>The context code. The value is 1 if the ALT key is pressed; otherwise, it is 0.</description></listheader><listheader><description>6</description><description>Reserved.</description></listheader><listheader><description>7</description><description>The transition state. The value is 0 if the key is pressed and 1 if it is being released.</description></listheader></list></summary>
  </member>
  <member name="KBDLLHOOKSTRUCT.time">
    <summary>The time stamp for this message, equivalent to what <see cref="GetMessageTime" /> would return for this message.</summary>
  </member>
  <member name="KBDLLHOOKSTRUCT.dwExtraInfo">
    <summary>Additional information associated with the message.</summary>
  </member>
</doc>