<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IMoniker.BindToObject">
    <summary>Binds to the specified object. The binding process involves finding the object, putting it into the running state if necessary, and providing the caller with a pointer to a specified interface on the identified object.</summary>
    <param name="pbc">A pointer to the <see cref="IBindCtx" /> interface on the bind context object, which is used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment.</param>
    <param name="pmkToLeft">If the moniker is part of a composite moniker, pointer to the moniker to the left of this moniker. This parameter is primarily used by moniker implementers to enable cooperation between the various components of a composite moniker. Moniker clients should use <b>NULL</b>.</param>
    <param name="riidResult">The IID of the interface the client wishes to use to communicate with the object that the moniker identifies.</param>
    <param name="ppvResult">The address of pointer variable that receives the interface pointer requested in <i>riid</i>. Upon successful return, *<i>ppvResult</i> contains the requested interface pointer to the object the moniker identifies. When successful, the implementation must call <see cref="AddRef" /> on the moniker. It is the caller's responsibility to call <see cref="Release" />. If an error occurs, *<i>ppvResult</i> should be <b>NULL</b>.</param>
    <returns>
      <para>This method can return the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The binding operation was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_E_NOOBJECT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The object identified by this moniker, or some object identified by the composite moniker of which this moniker is a part, could not be found.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_E_EXCEEDEDDEADLINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The binding operation could not be completed within the time limit specified by the bind context's <see cref="BIND_OPTS" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_E_CONNECTMANUALLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The binding operation requires assistance from the end user. The most common reason for returning this value is that a password is needed or that a floppy needs to be mounted. When this value is returned, retrieve the moniker that caused the error with a call to <see cref="IBindCtx.GetObjectParam" /> with the key "ConnectManually". You can then call <see cref="IMoniker.GetDisplayName" /> to get the display name, display a dialog box that communicates the desired information, such as instructions to mount a floppy or a request for a password, and then retry the binding operation.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_E_INTERMEDIATEINTERFACENOTSUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An intermediate object was found but it did not support an interface required to complete the binding operation. For example, an item moniker returns this value if its container does not support the <see cref="IOleItemContainer" /> interface.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STG_E_ACCESSDENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unable to access the storage object.</description>
        </listheader>
      </list> <para>This method can also return the errors associated with the <see cref="IOleItemContainer.GetObject" /> method.</para></returns>
  </member>
  <member name="IMoniker.BindToStorage">
    <summary>Binds to the storage for the specified object. Unlike the <see cref="IMoniker.BindToObject" /> method, this method does not activate the object identified by the moniker.</summary>
    <param name="pbc">A pointer to the <see cref="IBindCtx" /> interface on the bind context object, which is used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment.</param>
    <param name="pmkToLeft">If the moniker is part of a composite moniker, pointer to the moniker to the left of this moniker. This parameter is primarily used by moniker implementers to enable cooperation between the various components of a composite moniker. Moniker clients should use <b>NULL</b>.</param>
    <param name="riid">A reference to the identifier of the storage interface requested, whose pointer will be returned in <i>ppvObj</i>. Storage interfaces commonly requested include <see cref="IStorage" />, <see cref="IStream" />, and <see cref="ILockBytes" />.</param>
    <param name="ppvObj">The address of pointer variable that receives the interface pointer requested in <i>riid</i>. Upon successful return, *<i>ppvObj</i> contains the requested interface pointer to the storage of the object the moniker identifies. When successful, the implementation must call <see cref="AddRef" /> on the storage. It is the caller's responsibility to call <see cref="Release" />. If an error occurs, *<i>ppvObj</i> should be <b>NULL</b>.</param>
    <returns>
      <para>This method can return the standard return values E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The binding operation was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_E_NOSTORAGE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The object identified by this moniker does not have its own storage.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_E_EXCEEDEDDEADLINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The binding operation could not be completed within the time limit specified by the bind context's <see cref="BIND_OPTS" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_E_CONNECTMANUALLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation was unable to connect to the storage, possibly because a network device could not be connected to. For more information, see <see cref="IMoniker.BindToObject" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_E_INTERMEDIATEINTERFACENOTSUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An intermediate object was found but it did not support an interface required to complete the binding operation. For example, an item moniker returns this value if its container does not support the <see cref="IOleItemContainer" /> interface.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STG_E_ACCESSDENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unable to access the storage object.</description>
        </listheader>
      </list> <para>This method can also return the errors associated with the <see cref="IOleItemContainer.GetObject" /> method.</para></returns>
  </member>
  <member name="IMoniker.CommonPrefixWith">
    <summary>Creates a new moniker based on the prefix that this moniker has in common with the specified moniker.</summary>
    <param name="pmkOther">A pointer to the <see cref="IMoniker" /> interface on another moniker to be compared with this one to determine whether there is a common prefix.</param>
    <param name="ppmkPrefix">The address of an <see cref="IMoniker" />* pointer variable that receives the interface pointer to the moniker that is the common prefix of this moniker and pmkOther. When successful, the implementation must call <see cref="AddRef" /> on the resulting moniker; it is the caller's responsibility to call <see cref="Release" />. If an error occurs or if there is no common prefix, the implementation should set *<i>ppmkPrefix</i> to <b>NULL</b>.</param>
    <returns>
      <para>This method can return the standard return values E_OUTOFMEMORY, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A common prefix exists that is neither this moniker nor <i>pmkOther</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_S_NOPREFIX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No common prefix exists.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_S_HIM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The entire <i>pmkOther</i> is a prefix of this moniker.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_S_US</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The two monikers are identical.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_S_ME</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This moniker is a prefix of the <i>pmkOther</i> moniker.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_S_NOTBINDABLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This method was called on a relative moniker. It is not meaningful to take the common prefix on a relative moniker.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMoniker.ComposeWith">
    <summary>Creates a new composite moniker by combining the current moniker with the specified moniker.</summary>
    <param name="pmkRight">A pointer to the <see cref="IMoniker" /> interface on the moniker to compose onto the end of this moniker.</param>
    <param name="fOnlyIfNotGeneric">If <b>TRUE</b>, the caller requires a nongeneric composition, so the operation should proceed only if <i>pmkRight</i> is a moniker class that this moniker can compose with in some way other than forming a generic composite. If <b>FALSE</b>, the method can create a generic composite if necessary. Most callers should set this parameter to <b>FALSE</b>.</param>
    <param name="ppmkComposite">A pointer to an <see cref="IMoniker" /> pointer variable that receives the composite moniker pointer. When successful, the implementation must call <see cref="AddRef" /> on the resulting moniker; it is the caller's responsibility to call <see cref="Release" />. If an error occurs or if the monikers compose to nothing (for example, composing an anti-moniker with an item moniker or a file moniker), *<i>ppmkComposite</i> should be set to <b>NULL</b>.</param>
    <returns>
      <para>This method can return the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The monikers were successfully combined.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_E_NEEDGENERIC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates that <i>fOnlyIfNotGeneric</i> was <b>TRUE</b>, but the monikers could not be composed together without creating a generic composite moniker.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMoniker.Enum">
    <summary>Retrieves a pointer to an enumerator for the components of a composite moniker.</summary>
    <param name="fForward">If <b>TRUE</b>, enumerates the monikers from left to right. If <b>FALSE</b>, enumerates from right to left.</param>
    <param name="ppenumMoniker">A pointer to an <see cref="IEnumMoniker" /> pointer variable that receives the interface pointer to the enumerator object for the moniker. When successful, the implementation must call <see cref="AddRef" /> on the enumerator object. It is the caller's responsibility to call <see cref="Release" />. If an error occurs or if the moniker has no enumerable components, the implementation sets *<i>ppenumMoniker</i> to <b>NULL</b>.</param>
    <returns>This method can return the standard return values E_OUTOFMEMORY, E_UNEXPECTED, and S_OK.</returns>
  </member>
  <member name="IMoniker.GetDisplayName">
    <summary>Retrieves the display name for the moniker.</summary>
    <param name="pbc">A pointer to the <see cref="IBindCtx" /> interface on the bind context to be used in this operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment.</param>
    <param name="pmkToLeft">If the moniker is part of a composite moniker, pointer to the moniker to the left of this moniker. This parameter is used primarily by moniker implementers to enable cooperation between the various components of a composite moniker. Moniker clients should pass <b>NULL</b>.</param>
    <param name="ppszDisplayName">The address of a pointer variable that receives a pointer to the display name string for the moniker. The implementation must use <see cref="IMalloc.Alloc" /> to allocate the string returned in <i>ppszDisplayName</i>, and the caller is responsible for calling <see cref="IMalloc.Free" /> to free it. Both the caller and the implementation of this method use the COM task allocator returned by <see cref="CoGetMalloc" />. If an error occurs, the implementation must set *<i>ppszDisplayName</i> should be set to <b>NULL</b>.</param>
    <returns>
      <para>This method can return the standard return values E_OUTOFMEMORY, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method completed successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_E_EXCEEDEDDEADLINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The binding operation could not be completed within the time limit specified by the bind context's <see cref="BIND_OPTS" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOTIMPL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is no display name.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMoniker.GetTimeOfLastChange">
    <summary>Retrieves the time at which the object identified by this moniker was last changed.</summary>
    <param name="pbc">A pointer to the bind context to be used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment. For more information, see <see cref="IBindCtx" />.</param>
    <param name="pmkToLeft">If the moniker is part of a composite moniker, pointer to the moniker to the left of this moniker. This parameter is primarily used by moniker implementers to enable cooperation between the various components of a composite moniker. Moniker clients should pass <b>NULL</b>.</param>
    <param name="pFileTime">A pointer to the <see cref="FILETIME" /> structure that receives the time of last change. A value of {0xFFFFFFFF,0x7FFFFFFF} indicates an error (for example, exceeded time limit, information not available).</param>
    <returns>
      <para>This method can return the standard return values E_OUTOFMEMORY, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method completed successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_E_EXCEEDEDDEADLINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The binding operation could not be completed within the time limit specified by the bind context's <see cref="BIND_OPTS" /> structure.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_E_CONNECTMANUALLY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation was unable to connect to the storage for this object, possibly because a network device could not be connected to. For more information, see <see cref="IMoniker.BindToObject" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_E_UNAVAILABLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The time of the change is unavailable and will not be available regardless of the deadline that is used.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMoniker.Hash">
    <summary>Creates a hash value using the internal state of the moniker.</summary>
    <param name="pdwHash">A pointer to a variable that receives the hash value.</param>
    <returns>This method returns S_OK to indicate that the hash value was retrieved successfully.</returns>
  </member>
  <member name="IMoniker.Inverse">
    <summary>Creates a moniker that is the inverse of this moniker. When composed to the right of this moniker or one of similar structure, the moniker will compose to nothing.</summary>
    <param name="ppmk">The address of an <see cref="IMoniker" /> pointer variable that receives the interface pointer to a moniker that is the inverse of this moniker. When successful, the implementation must call <see cref="AddRef" /> on the new inverse moniker. It is the caller's responsibility to call <see cref="Release" />. If an error occurs, the implementation should set *<i>ppmk</i> to <b>NULL</b>.</param>
    <returns>
      <para>This method can return the standard return values E_OUTOFMEMORY, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The inverse moniker has been returned successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_E_NOINVERSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The moniker class does not have an inverse.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMoniker.IsEqual">
    <summary>Determines whether this moniker is identical to the specified moniker.</summary>
    <param name="pmkOtherMoniker">A pointer to the <see cref="IMoniker" /> interface on the moniker to be used for comparison with this one (the one from which this method is called).</param>
    <returns>This method returns S_OK to indicate that the two monikers are identical, and S_FALSE otherwise.</returns>
  </member>
  <member name="IMoniker.IsRunning">
    <summary>Determines whether the object identified by this moniker is currently loaded and running.</summary>
    <param name="pbc">A pointer to the <see cref="IBindCtx" /> interface on the bind context to be used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment.</param>
    <param name="pmkToLeft">A pointer to the <see cref="IMoniker" /> interface on the moniker to the left of this moniker if this moniker is part of a composite. This parameter is used primarily by moniker implementers to enable cooperation between the various components of a composite moniker; moniker clients can usually pass <b>NULL</b>.</param>
    <param name="pmkNewlyRunning">A pointer to the <see cref="IMoniker" /> interface on the moniker most recently added to the running object table (ROT). This can be <b>NULL</b>. If non-<b>NULL</b>, the implementation can return the results of calling <see cref="IMoniker.IsEqual" /> on the <i>pmkNewlyRunning</i> parameter, passing the current moniker. This parameter is intended to enable <b>IsRunning</b> implementations that are more efficient than just searching the ROT, but the implementation can choose to ignore <i>pmkNewlyRunning</i> without causing any harm.</param>
    <returns>
      <para>This method can return the standard return values E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The moniker is running.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The moniker is not running.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMoniker.IsSystemMoniker">
    <summary>Determines whether this moniker is one of the system-provided moniker classes.</summary>
    <param name="pdwMksys">A pointer to a variables that receives one of the values from the <see cref="MKSYS" /> enumeration and refers to one of the COM moniker classes. This parameter cannot be <b>NULL</b>.</param>
    <returns>This method returns S_OK to indicate that the moniker is a system moniker, and S_FALSE otherwise.</returns>
  </member>
  <member name="IMoniker.ParseDisplayName">
    <summary>Converts a display name into a moniker.</summary>
    <param name="pbc">A pointer to the <see cref="IBindCtx" /> interface on the bind context to be used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment.</param>
    <param name="pmkToLeft">A pointer to the <see cref="IMoniker" /> interface on the moniker that has been built out of the display name up to this point.</param>
    <param name="pszDisplayName">The remaining display name to be parsed.</param>
    <param name="pchEaten">A pointer to a variable that receives the number of characters in <i>pszDisplayName</i> that were consumed in this step.</param>
    <param name="ppmkOut">A pointer to an <see cref="IMoniker" /> pointer variable that receives the interface pointer to the moniker that was built from <i>pszDisplayName</i>. When successful, the implementation must call <see cref="AddRef" /> on the new moniker; it is the caller's responsibility to call <see cref="Release" />. If an error occurs, the implementation sets *<i>ppmkOut</i> to <b>NULL</b>.</param>
    <returns>
      <para>This method can return the standard return valuesE_OUTOFMEMORY and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The parsing operation was completed successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_E_SYNTAX</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An error in the syntax of the input components (<i>pmkToLeft</i>, this moniker, and <i>pszDisplayName</i>). For example, a file moniker returns this error if <i>pmkToLeft</i> is non-<b>NULL</b>, and an item moniker returns it if <i>pmkToLeft</i> is <b>NULL</b>.</description>
        </listheader>
      </list> <para>This method can also return the errors associated with the <see cref="IMoniker.BindToObject" /> method.</para></returns>
  </member>
  <member name="IMoniker.Reduce">
    <summary>Reduces a moniker to its simplest form.</summary>
    <param name="pbc">A pointer to the <see cref="IBindCtx" /> interface on the bind context to be used in this binding operation. The bind context caches objects bound during the binding process, contains parameters that apply to all operations using the bind context, and provides the means by which the moniker implementation should retrieve information about its environment.</param>
    <param name="dwReduceHowFar">Specifies how far this moniker should be reduced. This parameter must be one of the values from the <see cref="MKRREDUCE" /> enumeration.</param>
    <param name="ppmkToLeft">
      <para>On entry, a pointer to an <see cref="IMoniker" /> pointer variable that contains the interface pointer to moniker to the left of this moniker. This parameter is used primarily by moniker implementers to enable cooperation between the various components of a composite moniker; moniker clients can usually pass <b>NULL</b>.</para>
      <para>On return, *<i>ppmkToLeft</i> is usually set to <b>NULL</b>, indicating no change in the original moniker to the left. In rare situations, *<i>ppmkToLeft</i> indicates a moniker, indicating that the previous moniker to the left should be disregarded and the moniker returned through *<i>ppmkToLeft</i> is the replacement. In such a situation, the implementation must call <see cref="Release" /> on the old moniker to the left of this moniker and must call <see cref="AddRef" /> on the new returned moniker; the caller must release it later. If an error occurs, the implementation can either leave the interface pointer unchanged or set it to <b>NULL</b>.</para>
    </param>
    <param name="ppmkReduced">A pointer to an <see cref="IMoniker" /> pointer variable that receives the interface pointer to the reduced form of this moniker, which can be <b>NULL</b> if an error occurs or if this moniker is reduced to nothing. If this moniker cannot be reduced, *<i>ppmkReduced</i> is simply set to this moniker and the return value is MK_S_REDUCED_TO_SELF. If *<i>ppmkReduced</i> is non-<b>NULL</b>, the implementation must call <see cref="AddRef" /> on the new moniker; it is the caller's responsibility to call <see cref="Release" />. (This is true even if *<i>ppmkReduced</i> is set to this moniker.)</param>
    <returns>
      <para>This method can return the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method completed successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_S_REDUCED_TO_SELF</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This moniker could not be reduced any further, so <i>ppmkReduced</i> indicates this moniker.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_E_EXCEEDEDDEADLINE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The operation could not be completed within the time limit specified by the bind context's <see cref="BIND_OPTS" /> structure.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMoniker.RelativePathTo">
    <summary>Creates a relative moniker between this moniker and the specified moniker.</summary>
    <param name="pmkOther">A pointer to the <see cref="IMoniker" /> interface on the moniker to which a relative path should be taken.</param>
    <param name="ppmkRelPath">A pointer to an <see cref="IMoniker" /> pointer variable that receives the interface pointer to the relative moniker. When successful, the implementation must call <see cref="AddRef" /> on the new moniker; it is the caller's responsibility to call <see cref="Release" />. If an error occurs, the implementation sets *<i>ppmkRelPath</i> to <b>NULL</b>.</param>
    <returns>
      <para>This method can return the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method completed successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_S_HIM</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>No common prefix is shared by the two monikers and the moniker returned in <i>ppmkRelPath</i> is <i>pmkOther</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>MK_E_NOTBINDABLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This moniker is a relative moniker, such as an item moniker. This moniker must be composed with the moniker of its container before a relative path can be determined.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMoniker">
    <summary>
      <para>Enables you to use a moniker object, which contains information that uniquely identifies a COM object. An object that has a pointer to the moniker object's <b>IMoniker</b> interface can locate, activate, and get access to the identified object without having any other specific information on where the object is actually located in a distributed system.</para>
      <para>Monikers are used as the basis for linking in COM. A linked object contains a moniker that identifies its source. When the user activates the linked object to edit it, the moniker is bound; this loads the link source into memory.</para>
    </summary>
  </member>
</doc>