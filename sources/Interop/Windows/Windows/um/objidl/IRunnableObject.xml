<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IRunnableObject.GetRunningClass">
    <summary>Retrieves the CLSID of a running object.</summary>
    <param name="lpClsid">A pointer to the object's class identifier.</param>
    <returns>This method can return the standard return values E_INVALIDARG, E_UNEXPECTED, and S_OK.</returns>
  </member>
  <member name="IRunnableObject.IsRunning">
    <summary>Determines whether an object is currently in the running state.</summary>
    <returns>If the object is in the running state, the return value is <b>TRUE</b>. Otherwise, it is <b>FALSE</b>.</returns>
  </member>
  <member name="IRunnableObject.LockRunning">
    <summary>Locks an already running object into its running state or unlocks it from its running state.</summary>
    <param name="fLock">
      <b>TRUE</b> locks the object into its running state. <b>FALSE</b> unlocks the object from its running state.</param>
    <param name="fLastUnlockCloses">
      <b>TRUE</b> specifies that if the connection being released is the last external lock on the object, the object should close. <b>FALSE</b> specifies that the object should remain open until closed by the user or another process.</param>
    <returns>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, E_UNEXPECTED, E_FAIL, and S_OK.</returns>
  </member>
  <member name="IRunnableObject.Run">
    <summary>Forces an object to run.</summary>
    <param name="pbc">A pointer to the binding context of the run operation. See <see cref="IBindCtx" />. This parameter can be <b>NULL</b>.</param>
    <returns>This method can return the standard return values E_INVALIDARG, E_UNEXPECTED, and S_OK.</returns>
  </member>
  <member name="IRunnableObject.SetContainedObject">
    <summary>Notifies an object that it is embedded in an OLE container, which ensures that reference counting is done correctly for containers that support links to embedded objects.</summary>
    <param name="fContained">
      <b>TRUE</b> specifies that the object is contained in an OLE container. <b>FALSE</b> indicates that it is not.</param>
    <returns>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, E_UNEXPECTED, and S_OK.</returns>
  </member>
  <member name="IRunnableObject">
    <summary>Enables a container to control the running of its embedded objects. In the case of an object implemented with a local server, calling the <see cref="Run" /> method launches the server's .EXE file. In the case of an object implemented with an in-process server, calling <b>Run</b> causes the object .DLL file to transition into the running state.</summary>
  </member>
</doc>