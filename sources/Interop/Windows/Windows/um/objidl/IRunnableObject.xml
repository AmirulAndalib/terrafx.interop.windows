<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IRunnableObject.GetRunningClass">
    <summary>
      <para>Retrieves the CLSID of a running object.</para>
    </summary>
    <param name="lpClsid">
      <para>A pointer to the object's class identifier.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_INVALIDARG, E_UNEXPECTED, and S_OK.</para>
    </returns>
    <remarks>
      <para>If an embedded document was created by an application that is not available on the user's computer, the document, by a call to <see cref="CoTreatAsClass" />, may be able to display itself for editing by emulating a class that is supported on the user's machine. In this case, the CLSID returned by a call to <b>IRunnableObject.GetRunningClass</b> will be that of the class being emulated, rather than the document's native class.</para>
    </remarks>
    <seealso cref="IRunnableObject" />
  </member>
  <member name="IRunnableObject.IsRunning">
    <summary>
      <para>Determines whether an object is currently in the running state.</para>
    </summary>
    <returns>
      <para>If the object is in the running state, the return value is <b>TRUE</b>. Otherwise, it is <b>FALSE</b>.</para>
    </returns>
    <remarks>
      <para>A container application could call <b>IRunnableObject.IsRunning</b> when it needs to know if the server is immediately available. For example, a container's implementation of the <see cref="IOleItemContainer.GetObject" /> method would return an error if the server is not running and the bindspeed parameter specifies BINDSPEED_IMMEDIATE.</para>
      <para>An object handler could call <b>IRunnableObject.IsRunning</b> when it wants to avoid conflicts with a running server or when the running server might have more up-to-date information. For example, a handler's implementation of <see cref="IOleObject.GetExtent" /> would delegate to the object server if it is running, because the server's information might be more current than that in the handler's cache.</para>
      <para>
        <see cref="OleIsRunning" /> is a helper function that conveniently repackages the functionality offered by <b>IRunnableObject.IsRunning</b>. With the release of OLE 2.01, the implementation of <b>OleIsRunning</b> was changed so that it calls <see cref="QueryInterface" />, asks for <see cref="IRunnableObject" />, and then calls <b>IRunnableObject.IsRunning</b>. In other words, you can use the interface and the helper function interchangeably.</para>
    </remarks>
    <seealso cref="IRunnableObject" />
    <seealso cref="OleIsRunning" />
  </member>
  <member name="IRunnableObject.LockRunning">
    <summary>
      <para>Locks an already running object into its running state or unlocks it from its running state.</para>
    </summary>
    <param name="fLock">
      <para>
        <b>TRUE</b> locks the object into its running state. <b>FALSE</b> unlocks the object from its running state.</para>
    </param>
    <param name="fLastUnlockCloses">
      <para>
        <b>TRUE</b> specifies that if the connection being released is the last external lock on the object, the object should close. <b>FALSE</b> specifies that the object should remain open until closed by the user or another process.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, E_UNEXPECTED, E_FAIL, and S_OK.</para>
    </returns>
    <remarks>
      <para>Most implementations of <b>IRunnableObject.LockRunning</b> call <see cref="CoLockObjectExternal" />.</para>
      <para>
        <see cref="OleLockRunning" /> is a helper function that conveniently repackages the functionality offered by <b>IRunnableObject.LockRunning</b>. With the release of OLE 2.01, the implementation of <b>OleLockRunning</b> was changed to call <see cref="QueryInterface" />, ask for <see cref="IRunnableObject" />, and then call <b>IRunnableObject.LockRunning</b>. In other words, you can use the interface and the helper function interchangeably.</para>
    </remarks>
    <seealso cref="CoLockObjectExternal" />
    <seealso cref="IRunnableObject" />
    <seealso cref="OleLockRunning" />
  </member>
  <member name="IRunnableObject.Run">
    <summary>
      <para>Forces an object to run.</para>
    </summary>
    <param name="pbc">
      <para>A pointer to the binding context of the run operation. See <see cref="IBindCtx" />. This parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_INVALIDARG, E_UNEXPECTED, and S_OK.</para>
    </returns>
    <remarks>
      <para>Containers call <b>IRunnableObject.Run</b> to force their objects to enter the running state. If the object is not already running, calling <b>Run</b> can be an expensive operation, on the order of many seconds. If the object is already running, then this method has no effect on the object.</para>
      <h3>Notes to Callers</h3>
      <para>When called on a linked object that has been converted to a new class since the link was last activated, <b>IRunnableObject.Run</b> may return OLE_E_CLASSDIFF. In this case, the client should call <see cref="IOleLink.BindToSource" />.</para>
      <para>
        <see cref="OleRun" /> is a helper function that conveniently repackages the functionality offered by <b>IRunnableObject.Run</b>. With the release of OLE 2.01, the implementation of <b>OleRun</b> was changed so that it calls <see cref="QueryInterface" />, asks for <see cref="IRunnableObject" />, and then calls <b>IRunnableObject.Run</b>. In other words, you can use the interface and the helper function interchangeably.</para>
      <h3>Notes to Implementers</h3>
      <para>The object should register in the running object table if it has a moniker assigned. The object should not hold any strong locks on itself; instead, it should remain in the unstable, unlocked state. The object should be locked when the first external connection is made to the object.</para>
      <para>An embedded object must hold a lock on its embedding container while it is in the running state. The default handler provided by OLE 2 takes care of locking the embedding container on behalf of objects implemented by an EXE object application. Objects implemented by a DLL object application must explicitly put a lock on their embedding containers, which they do by first calling <see cref="IOleClientSite.GetContainer" /> to get a pointer to the container, then calling <see cref="IOleContainer.LockContainer" /> to actually place the lock. This lock must be released when <see cref="IOleObject.Close" /> is called.</para>
    </remarks>
    <seealso cref="IRunnableObject" />
    <seealso cref="OleRun" />
  </member>
  <member name="IRunnableObject.SetContainedObject">
    <summary>
      <para>Notifies an object that it is embedded in an OLE container, which ensures that reference counting is done correctly for containers that support links to embedded objects.</para>
    </summary>
    <param name="fContained">
      <para>
        <b>TRUE</b> specifies that the object is contained in an OLE container. <b>FALSE</b> indicates that it is not.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, E_UNEXPECTED, and S_OK.</para>
    </returns>
    <remarks>
      <para>The <b>SetContainedObject</b> method enables a container to inform an object handler that it is embedded in the container, rather than acting as a link. This call changes the container's reference on the object from strong, the default for external connections, to weak. When the object is running visibly, this method is of little significance because the end user has a lock on the object. During a silent update of an embedded link source, however, the container should not be able to hold an object in the running state after the link has been broken. For this reason, the container's reference to the object must be weak.</para>
      <h3>Notes to Callers</h3>
      <para>A container application must call <b>SetContainedObject</b> if it supports linking to embedded objects. It normally makes the call immediately after calling <see cref="OleLoad" /> or <see cref="OleCreate" /> and never calls the method again, even before it closes. Moreover, a container almost always calls this method with <i>fContained</i> set to <b>TRUE</b>. The use of this method with <i>fContained</i> set to <b>FALSE</b> is rare.</para>
      <para>Calling <b>SetContainedObject</b> is optional only when you know that the embedded object will not be referenced by any client other than the container. If your container application does not support linking to embedded objects; it is preferable, but not necessary, to call <b>SetContainedObject</b>.</para>
      <para>
        <see cref="OleSetContainedObject" /> is a helper function that conveniently repackages the functionality offered by <b>SetContainedObject</b>. With the release of OLE 2.01, the implementation of <b>OleSetContainedObject</b> was changed to call <see cref="QueryInterface" />, ask for <see cref="IRunnableObject" />, and then call <b>IRunnableObject.SetContainedObject</b>. In other words, you can use the interface and the helper function interchangeably.</para>
    </remarks>
    <seealso cref="IRunnableObject" />
    <seealso cref="OleSetContainedObject" />
  </member>
  <member name="IRunnableObject">
    <summary>
      <para>Enables a container to control the running of its embedded objects. In the case of an object implemented with a local server, calling the <see cref="Run" /> method launches the server's .EXE file. In the case of an object implemented with an in-process server, calling <b>Run</b> causes the object .DLL file to transition into the running state.</para>
    </summary>
  </member>
</doc>