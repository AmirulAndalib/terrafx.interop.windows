<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ILockBytes.Flush">
    <summary>The<b>Flush</b> method ensures that any internal buffers maintained by the<see cref="ILockBytes" /> implementation are written out to the underlying physical storage.</summary>
    <returns>
      <para>This method can return one of these values.</para>
      <para>| Return code | Description | |----------------|---------------| |S_OK | The flush operation was successful.| |STG_E_ACCESSDENIED | The caller does not have permission to access the byte array.| |STG_E_MEDIUMFULL | The flush operation is not completed because there is no space left on the storage device.| |E_FAIL | General failure writing data.| |STG_E_TOOMANYFILESOPEN | Under certain circumstances, the <b>Flush</b> method executes a download-and-closeto flush, which can lead to a return value of STG_E_TOOMANYFILESOPEN if no file handles are available.| |STG_E_INVALIDHANDLE | An underlying file has been prematurely closed, or the correct floppy disk has been replaced by an invalid one.|</para>
    </returns>
  </member>
  <member name="ILockBytes.LockRegion">
    <summary>The<b>LockRegion</b> method restricts access to a specified range of bytes in the byte array.</summary>
    <param name="libOffset">Specifies the byte offset for the beginning of the range.</param>
    <param name="cb">Specifies, in bytes, the length of the range to be restricted.</param>
    <param name="dwLockType">Specifies the type of restrictions being requested on accessing the range. This parameter uses one of the values from the<see cref="LOCKTYPE" /> enumeration.</param>
    <returns>
      <para>This method can return one of these values.</para>
      <para>| Return code | Description | |----------------|---------------| |S_OK | The specified range of bytes was locked.| |STG_E_INVALIDFUNCTION | Locking is not supported at all or the specific type of lock requested is not supported.| |STG_E_ACCESSDENIED | Access denied because the caller has insufficient permission, or another caller has the file open and locked.| |STG_E_LOCKVIOLATION | Access denied because another caller has the file open and locked.| |STG_E_INVALIDHANDLE | An underlying file has been prematurely closed, or the correct floppy disk has been replaced by an invalid one.|</para>
    </returns>
  </member>
  <member name="ILockBytes.ReadAt">
    <summary>The <b>ReadAt</b> method reads a specified number of bytes starting at a specified offset from the beginning of the byte array object.</summary>
    <param name="ulOffset">Specifies the starting point from the beginning of the byte array for reading data.</param>
    <param name="pv">Pointer to the buffer into which the byte array is read. The size of this buffer is contained in <i>cb</i>.</param>
    <param name="cb">Specifies the number of bytes of data to attempt to read from the byte array.</param>
    <param name="pcbRead">Pointer to a <b>ULONG</b> where this method writes the actual number of bytes read from the byte array. You can set this pointer to <b>NULL</b> to indicate that you are not interested in this value. In this case, this method does not provide the actual number of bytes that were read.</param>
    <returns>
      <para>This method can return one of these values.</para>
      <para>| Return code | Description | |----------------|---------------| |S_OK | Indicates that the specified number of bytes were read, or the maximum number of bytes were read to the end of the byte array.| |E_FAIL | Data could not be read from the byte array.| |E_PENDING | Asynchronous Storage only: Part or all of the data to be read is currently unavailable. | |STG_E_ACCESSDENIED | The caller does not have permission to access the byte array.| |STG_E_READFAULT | The number of bytes to be read does not equal the number of bytes that were actually read.|</para>
    </returns>
  </member>
  <member name="ILockBytes.SetSize">
    <summary>The <b>SetSize</b> method changes the size of the byte array.</summary>
    <param name="cb">Specifies the new size of the byte array as a number of bytes.</param>
    <returns>
      <para>This method can return one of these values.</para>
      <para>| Return code | Description | |----------------|---------------| |S_OK | The size of the byte array was successfully changed.| |STG_E_ACCESSDENIED | The caller does not have permission to access the byte array.| |STG_E_MEDIUMFULL | The byte array size is not changed because there is no space left on the storage device.|</para>
    </returns>
  </member>
  <member name="ILockBytes.Stat">
    <summary>The <b>Stat</b> method retrieves a<see cref="STATSTG" /> structure containing information for this byte array object.</summary>
    <param name="pstatstg">Pointer to a<see cref="STATSTG" /> structure in which this method places information about this byte array object. The pointer is <b>NULL</b> if an error occurs.</param>
    <param name="grfStatFlag">Specifies whether this method should supply the <b>pwcsName</b> member of the<see cref="STATSTG" /> structure through values taken from the<see cref="STATFLAG" /> enumeration. If the STATFLAG_NONAME is specified, the <b>pwcsName</b> member of<b>STATSTG</b> is not supplied, thus saving a memory-allocation operation. The other possible value, STATFLAG_DEFAULT, indicates that all members of the<b>STATSTG</b> structure be supplied.</param>
    <returns>
      <para>This method can return one of these values.</para>
      <para>| Return code | Description | |----------------|---------------| |S_OK | The STATSTG structure was successfully returned at the specified location.| |E_OUTOFMEMORY| The STATSTG structure was not returned due to a lack of memory for the name member in the structure.| |STG_E_ACCESSDENIED | The STATSTG structure was not returned because the caller did not have access to the byte array.| |STG_E_INSUFFICIENTMEMORY | The STATSTG structure was not returned, due to insufficient memory.| |STG_E_INVALIDFLAG | The value for the grfStateFlag parameter is not valid.| |STG_E_INVALIDPOINTER | The value for the pStatStg parameter is not valid.|</para>
    </returns>
  </member>
  <member name="ILockBytes.UnlockRegion">
    <summary>The <b>UnlockRegion</b> method removes the access restriction on a previously locked range of bytes.</summary>
    <param name="libOffset">Specifies the byte offset for the beginning of the range.</param>
    <param name="cb">Specifies, in bytes, the length of the range that is restricted.</param>
    <param name="dwLockType">Specifies the type of access restrictions previously placed on the range. This parameter uses a value from the<see cref="LOCKTYPE" /> enumeration.</param>
    <returns>
      <para>This method can return one of these values.</para>
      <para>| Return code | Description | |----------------|---------------| |S_OK | The byte range was unlocked.| |STG_E_INVALIDFUNCTION | Locking is not supported at all or the specific type of lock requested is not supported.| |STG_E_LOCKVIOLATION | The requested unlock cannot be granted.|</para>
    </returns>
  </member>
  <member name="ILockBytes.WriteAt">
    <summary>The <b>WriteAt</b> method writes the specified number of bytes starting at a specified offset from the beginning of the byte array.</summary>
    <param name="ulOffset">Specifies the starting point from the beginning of the byte array for the data to be written.</param>
    <param name="pv">Pointer to the buffer containing the data to be written.</param>
    <param name="cb">Specifies the number of bytes of data to attempt to write into the byte array.</param>
    <param name="pcbWritten">Pointer to a location where this method specifies the actual number of bytes written to the byte array. You can set this pointer to <b>NULL</b> to indicate that you are not interested in this value. In this case, this method does not provide the actual number of bytes written.</param>
    <returns>
      <para>This method can return one of these values.</para>
      <para>| Return code | Description | |----------------|---------------| |S_OK | Indicates that the specified number of bytes were written.| |E_FAIL | A general failure occurred during the write operation.| |E_PENDING | Asynchronous Storage only: Part or all of the data to be written is currently unavailable.| |STG_E_ACCESSDENIED | The caller does not have enough permissions for writing this byte array.| |STG_E_WRITEFAULT | The number of bytes to be written does not equal the number of bytes that were actually written.| |STG_E_MEDIUMFULL | The write operation was not completed because there is no space left on the storage device. The actual number of bytes written is still returned in <i>pcbWritten</i>.|</para>
    </returns>
  </member>
  <member name="ILockBytes">
    <summary>The<b>ILockBytes</b> interface is implemented on a byte array object that is backed by some physical storage, such as a disk file, global memory, or a database. It is used by a COM compound file storage object to give its root storage access to the physical device, while isolating the root storage from the details of accessing the physical storage.</summary>
  </member>
</doc>