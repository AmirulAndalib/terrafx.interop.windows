<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IMallocSpy.PostAlloc">
    <summary>Performs operations required after calling <see cref="IMalloc.Alloc" />.</summary>
    <param name="pActual">The pointer returned from <see cref="Alloc" />.</param>
    <returns>This method returns a pointer to the beginning of the block of memory actually allocated. This pointer is also returned to the caller of <see cref="Alloc" />. If debug information is written at the front of the caller's allocation, this should be a forward offset from <i>pActual</i>. The value is the same as <i>pActual</i> if debug information is appended or if no debug information is attached.</returns>
  </member>
  <member name="IMallocSpy.PostDidAlloc">
    <summary>Performs operations required after calling <see cref="IMalloc.DidAlloc" />.</summary>
    <param name="pRequest">The pointer specified in the call to <see cref="DidAlloc" />.</param>
    <param name="fSpyed">Indicates whether the allocation was done while this spy was active.</param>
    <param name="fActual">The value returned by <see cref="DidAlloc" />.</param>
    <returns>The value returned to the caller of <see cref="DidAlloc" />.</returns>
  </member>
  <member name="IMallocSpy.PostFree">
    <summary>Performs operations required after calling <see cref="IMalloc.Free" />.</summary>
    <param name="fSpyed">Indicates whether the block of memory to be freed was allocated while the current spy was active.</param>
  </member>
  <member name="IMallocSpy.PostGetSize">
    <summary>Performs operations required after calling <see cref="IMalloc.GetSize" />.</summary>
    <param name="cbActual">The number of bytes in the allocation, as returned by <see cref="GetSize" />.</param>
    <param name="fSpyed">Indicates whether the block of memory was allocated while the current spy was active.</param>
    <returns>The value returned by <see cref="IMalloc.GetSize" />, which is the size of the allocated block of memory, in bytes.</returns>
  </member>
  <member name="IMallocSpy.PostHeapMinimize">
    <summary>Performs operations required after calling <see cref="IMalloc.HeapMinimize" />.</summary>
  </member>
  <member name="IMallocSpy.PostRealloc">
    <summary>Performs operations required after calling <see cref="IMalloc.Realloc" />.</summary>
    <param name="pActual">The pointer specified in the call to <see cref="Realloc" />.</param>
    <param name="fSpyed">Indicates whether the block of memory was allocated while the current spy was active.</param>
    <returns>The method returns a pointer to the beginning of the block actually allocated. This pointer is also returned to the caller of <see cref="IMalloc.Realloc" />. If debug information is written at the front of the caller's allocation, it should be a forward offset from <i>pActual</i>. The value should be the same as <i>pActual</i> if debug information is appended or if no debug information is attached.</returns>
  </member>
  <member name="IMallocSpy.PreAlloc">
    <summary>Performs operations required before calling <see cref="IMalloc.Alloc" />.</summary>
    <param name="cbRequest">The number of bytes specified in the allocation request the caller is passing to <see cref="Alloc" />.</param>
    <returns>The number of bytes specified in the call to <see cref="Alloc" />, which can be greater than or equal to the value of <i>cbRequest</i>.</returns>
  </member>
  <member name="IMallocSpy.PreDidAlloc">
    <summary>Performs operations required before calling <see cref="IMalloc.DidAlloc" />.</summary>
    <param name="pRequest">The pointer specified in the call to <see cref="DidAlloc" />.</param>
    <param name="fSpyed">Indicates whether the allocation was done while this spy was active.</param>
    <returns>The value passed to <see cref="DidAlloc" /> as the <i>fActual</i> parameter.</returns>
  </member>
  <member name="IMallocSpy.PreFree">
    <summary>Performs operations required before calling <see cref="IMalloc.Free" />. This method ensures that the pointer passed to <b>Free</b> points to the beginning of the actual allocation.</summary>
    <param name="pRequest">A pointer to the block of memory that the caller is passing to <see cref="Free" />.</param>
    <param name="fSpyed">Indicates whether the block of memory to be freed was allocated while the current spy was active.</param>
    <returns>The value to be passed to <see cref="IMalloc.Free" />.</returns>
  </member>
  <member name="IMallocSpy.PreGetSize">
    <summary>Performs operations required before calling <see cref="IMalloc.GetSize" />.</summary>
    <param name="pRequest">The pointer that the caller is passing to <see cref="GetSize" />.</param>
    <param name="fSpyed">Indicates whether the block of memory was allocated while the current spy was active.</param>
    <returns>A pointer to the actual allocation for which the size is to be determined.</returns>
  </member>
  <member name="IMallocSpy.PreHeapMinimize">
    <summary>Performs operations required before calling <see cref="IMalloc.HeapMinimize" />.</summary>
  </member>
  <member name="IMallocSpy.PreRealloc">
    <summary>Performs operations required before calling <see cref="IMalloc.Realloc" />.</summary>
    <param name="pRequest">The pointer to the block of memory specified in the call to <see cref="IMalloc.Realloc" />.</param>
    <param name="cbRequest">The byte count of the block of memory as specified in the original call to <see cref="IMalloc.Realloc" />.</param>
    <param name="ppNewRequest">Address of pointer variable that receives a pointer to the memory block to be reallocated. This may be different from the pointer in <i>pRequest</i> if the implementation of <b>PreRealloc</b> extends or modifies the reallocation. This is pointer should always be stored by <b>PreRealloc</b>.</param>
    <param name="fSpyed">Indicates whether the block of memory was allocated while this spy was active.</param>
    <returns>The byte count to be passed to <see cref="IMalloc.Realloc" />.</returns>
  </member>
  <member name="IMallocSpy">
    <summary>Enables application developers to monitor (spy on) memory allocation, detect memory leaks, and simulate memory failure in calls to <see cref="IMalloc" /> methods.</summary>
  </member>
</doc>