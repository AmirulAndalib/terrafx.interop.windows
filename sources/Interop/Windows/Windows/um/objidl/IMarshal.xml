<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IMarshal.DisconnectObject">
    <summary>Releases all connections to an object. The object's server calls the object's implementation of this method prior to shutting down.</summary>
    <param name="dwReserved">This parameter is reserved and must be 0.</param>
    <returns>If the method succeeds, the return value is S_OK. Otherwise, it is E_FAIL.</returns>
  </member>
  <member name="IMarshal.GetMarshalSizeMax">
    <summary>Retrieves the maximum size of the buffer that will be needed during marshaling.</summary>
    <param name="riid">A reference to the identifier of the interface to be marshaled.</param>
    <param name="pv">The interface pointer to be marshaled. This parameter can be <b>NULL</b>.</param>
    <param name="dwDestContext">The destination context where the specified interface is to be unmarshaled. Possible values come from the enumeration <see cref="MSHCTX" />. Unmarshaling can occur either in another apartment of the current process (MSHCTX_INPROC) or in another process on the same computer as the current process (MSHCTX_LOCAL).</param>
    <param name="pvDestContext">This parameter is reserved and must be <b>NULL</b>.</param>
    <param name="mshlflags">Indicates whether the data to be marshaled is to be transmitted back to the client process (the typical case) or written to a global table, where it can be retrieved by multiple clients. Possible values come from the <see cref="MSHLFLAGS" /> enumeration.</param>
    <param name="pSize">A pointer to a variable that receives the maximum size of the buffer.</param>
    <returns>
      <para>This method can return the standard return values E_FAIL and S_OK, as well as the following value.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOINTERFACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified interface is not supported.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMarshal.GetUnmarshalClass">
    <summary>Retrieves the CLSID of the unmarshaling code.</summary>
    <param name="riid">A reference to the identifier of the interface to be marshaled.</param>
    <param name="pv">A pointer to the interface to be marshaled; can be <b>NULL</b> if the caller does not have a pointer to the desired interface.</param>
    <param name="dwDestContext">The destination context where the specified interface is to be unmarshaled. Possible values come from the enumeration <see cref="MSHCTX" />. Unmarshaling can occur either in another apartment of the current process (MSHCTX_INPROC) or in another process on the same computer as the current process (MSHCTX_LOCAL).</param>
    <param name="pvDestContext">This parameter is reserved and must be <b>NULL</b>.</param>
    <param name="mshlflags">Indicates whether the data to be marshaled is to be transmitted back to the client process (the typical case) or written to a global table, where it can be retrieved by multiple clients. Possible values come from the <see cref="MSHLFLAGS" /> enumeration.</param>
    <param name="pCid">A pointer that receives the CLSID to be used to create a proxy in the client process.</param>
    <returns>If the method succeeds, the return value is S_OK. Otherwise, it is S_FALSE.</returns>
  </member>
  <member name="IMarshal.MarshalInterface">
    <summary>Marshals an interface pointer.</summary>
    <param name="pStm">A pointer to the stream to be used during marshaling.</param>
    <param name="riid">A reference to the identifier of the interface to be marshaled. This interface must be derived from the <see cref="IUnknown" /> interface.</param>
    <param name="pv">A pointer to the interface pointer to be marshaled. This parameter can be <b>NULL</b> if the caller does not have a pointer to the desired interface.</param>
    <param name="dwDestContext">The destination context where the specified interface is to be unmarshaled. Possible values for <i>dwDestContext</i> come from the enumeration <see cref="MSHCTX" />. Currently, unmarshaling can occur either in another apartment of the current process (MSHCTX_INPROC) or in another process on the same computer as the current process (MSHCTX_LOCAL).</param>
    <param name="pvDestContext">This parameter is reserved and must be 0.</param>
    <param name="mshlflags">Indicates whether the data to be marshaled is to be transmitted back to the client process—the typical case—or written to a global table, where it can be retrieved by multiple clients. Possible values come from the <see cref="MSHLFLAGS" /> enumeration.</param>
    <returns>
      <para>This method can return the standard return value E_FAIL, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The interface pointer was marshaled successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOINTERFACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified interface is not supported.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STG_E_MEDIUMFULL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The stream is full.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMarshal.ReleaseMarshalData">
    <summary>Destroys a marshaled data packet.</summary>
    <param name="pStm">A pointer to a stream that contains the data packet to be destroyed.</param>
    <returns>This method can return the standard return values S_OK and E_FAIL, as well as any of the stream-access errors for the <see cref="IStream" /> interface.</returns>
  </member>
  <member name="IMarshal.UnmarshalInterface">
    <summary>Unmarshals an interface pointer.</summary>
    <param name="pStm">A pointer to the stream from which the interface pointer is to be unmarshaled.</param>
    <param name="riid">A reference to the identifier of the interface to be unmarshaled.</param>
    <param name="ppv">The address of pointer variable that receives the interface pointer. Upon successful return, *<i>ppv</i> contains the requested interface pointer of the interface to be unmarshaled.</param>
    <returns>
      <para>This method can return the standard return value E_FAIL, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The interface pointer was unmarshaled successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOINTERFACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified interface is not supported.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMarshal">
    <summary>Enables a COM object to define and manage the marshaling of its interface pointers.</summary>
  </member>
</doc>