<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IPersistStorage.HandsOffStorage">
    <summary>
      <para>Instructs the object to release all storage objects that have been passed to it by its container and to enter HandsOff mode.</para>
    </summary>
    <returns>
      <para>This method returns S_OK to indicate that the object has entered HandsOff mode successfully.</para>
    </returns>
    <remarks>
      <para>This method causes an object to release any storage objects that it is holding and to enter the HandsOff mode until a subsequent <see cref="IPersistStorage.SaveCompleted" /> call. In HandsOff mode, the object cannot do anything and the only operation that works is a close operation.</para>
      <para>A container application typically calls this method during a full save or low-memory full save operation to force the object to release all pointers to its current storage. In these scenarios, the <b>HandsOffStorage</b> call comes after a call to either <see cref="OleSave" /> or <see cref="IPersistStorage.Save" />, putting the object in HandsOffAfterSave mode. Calling this method is necessary so the container application can delete the current file as part of a full save, or so it can call the <see cref="IRootStorage.SwitchToFile" /> method as part of a low-memory save.</para>
      <para>A container application also calls this method when an object is in Normal mode to put the object in HandsOffFromNormal mode.</para>
      <para>While the component object is in either HandsOffAfterSave or HandsOffFromNormal mode, most operations on the object will fail. Thus, the container should restore the object to Normal mode as soon as possible. The container application does this by calling the <see cref="IPersistStorage.SaveCompleted" /> method, which passes a storage pointer back to the component object for the new storage object.</para>
      <h3>Notes to Implementers</h3>
      <para>This method must release all pointers to the current storage object, including pointers to any nested streams and storages. If the object contains nested objects, the container application must recursively call this method for any nested objects that are loaded or running.</para>
    </remarks>
    <seealso cref="IPersistStorage" />
    <seealso cref="OleSave" />
  </member>
  <member name="IPersistStorage.InitNew">
    <summary>
      <para>Initializes a new storage object.</para>
    </summary>
    <param name="pStg">
      <para>An <see cref="IStorage" /> pointer to the new storage object to be initialized. The container creates a nested storage object in its storage object (see <see cref="IStorage.CreateStorage" />). Then, the container calls the <see cref="WriteClassStg" /> function to initialize the new storage object with the object class identifier (CLSID).</para>
    </param>
    <returns>
      <para>This method can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CO_E_ALREADYINITIALIZED</b>
            </para>
          </description>
          <description>
            <para>The object has already been initialized by a previous call to either the <see cref="IPersistStorage.Load" /> method or the <see cref="IPersistStorage.InitNew" /> method.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>The storage object was not initialized due to a lack of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The storage object was not initialized for some reason other than a lack of memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>A container application can call this method when it needs to initialize a new object, for example, with an InsertObject command.</para>
      <para>An object that supports the <see cref="IPersistStorage" /> interface must have access to a valid storage object at all times while it is running. This includes the time just after the object has been created but before it has been made persistent. The object's container must provide the object with a valid <see cref="IStorage" /> pointer to the storage during this time through the call to <b>IPersistStorage.InitNew</b>. Depending on the container's state, a temporary file might have to be created for this purpose.</para>
      <para>If the object wants to retain the <see cref="IStorage" /> instance, it must call <see cref="AddRef" /> to increment its reference count.</para>
      <para>After the call to <b>IPersistStorage.InitNew</b>, the object is in either the loaded or running state. For example, if the object class has an in-process server, the object will be in the running state. However, if the object uses the default handler, the container's call to <b>InitNew</b> only invokes the handler's implementation which does not run the object. Later if the container runs the object, the handler calls the <b>InitNew</b> method for the object.</para>
      <h3>Notes to Callers</h3>
      <para>Rather than calling <b>IPersistStorage.InitNew</b> directly, you typically call the <see cref="OleCreate" /> helper function which does the following:</para>
      <list type="number">
        <item>
          <description>Calls the <see cref="CoCreateInstance" /> function to create an instance of the object class.</description>
        </item>
        <item>
          <description>Queries the new instance for the <see cref="IPersistStorage" /> interface.</description>
        </item>
        <item>
          <description>Calls the <b>InitNew</b> method to initialize the object.</description>
        </item>
      </list>
      <para>The container application should cache the <see cref="IPersistStorage" /> pointer to the object for use in later operations on the object.</para>
      <h3>Notes to Implementers</h3>
      <para>An implementation of <b>IPersistStorage.InitNew</b> should initialize the object to its default state, taking the following steps:</para>
      <list type="number">
        <item>
          <description>Pre-open and cache the pointers to any streams or storages that the object will need to save itself to this storage.</description>
        </item>
        <item>
          <description>Call <see cref="AddRef" /> and cache the storage pointer that is passed in.</description>
        </item>
        <item>
          <description>Call the <see cref="WriteFmtUserTypeStg" /> function to write the native clipboard format and user type string for the object to the storage object.</description>
        </item>
        <item>
          <description>Set the dirty flag for the object.</description>
        </item>
      </list>
      <para>The first two steps are particularly important for ensuring that the object can save itself in low memory situations. Pre-opening and holding onto pointers to the stream and storage interfaces guarantee that a save operation to this storage will not fail due to insufficient memory.</para>
      <para>Your implementation of this method should return the CO_E_ALREADYINITIALIZED error code if it receives a call to either the <b>IPersistStorage.InitNew</b> method or the <see cref="IPersistStorage.Load" /> method after it is already initialized.</para>
    </remarks>
    <seealso cref="IPersistStorage" />
  </member>
  <member name="IPersistStorage.IsDirty">
    <summary>
      <para>Determines whether an object has changed since it was last saved to its current storage.</para>
    </summary>
    <returns>
      <para>This method returns S_OK to indicate that the object has changed. Otherwise, it returns S_FALSE.</para>
    </returns>
    <remarks>
      <para>Use this method to determine whether an object should be saved before closing it. The dirty flag for an object is conditionally cleared in the <see cref="IPersistStorage.Save" /> method.</para>
      <para>For example, you could optimize a <b>File Save</b> operation by calling the <b>IPersistStorage.IsDirty</b> method for each object and then calling the <see cref="IPersistStorage.Save" /> method only for those objects that are dirty.</para>
      <h3>Notes to Callers</h3>
      <para>You should treat any error return codes as an indication that the object has changed. Unless this method explicitly returns S_FALSE, assume that the object must be saved.</para>
      <h3>Notes to Implementers</h3>
      <para>An object with no contained objects simply checks its dirty flag to return the appropriate result.</para>
      <para>A container with one or more contained objects must maintain an internal dirty flag that is set when any of its contained objects has changed since it was last saved.</para>
    </remarks>
    <seealso cref="IPersistStorage" />
  </member>
  <member name="IPersistStorage.Load">
    <summary>
      <para>Loads an object from its existing storage.</para>
    </summary>
    <param name="pStg">
      <para>An <see cref="IStorage" /> pointer to the existing storage from which the object is to be loaded.</para>
    </param>
    <returns>
      <para>This method can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CO_E_ALREADYINITIALIZED</b>
            </para>
          </description>
          <description>
            <para>The object has already been initialized by a previous call to the <see cref="IPersistStorage.Load" /> method or the <see cref="IPersistStorage.InitNew" /> method.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>The object was not loaded due to lack of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The object was not loaded due to some reason other than a lack of memory.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method initializes an object from an existing storage. The object is placed in the loaded state if this method is called by the container application. If called by the default handler, this method places the object in the running state.</para>
      <para>Either the default handler or the object itself can hold onto the <see cref="IStorage" /> pointer while the object is loaded or running.</para>
      <h3>Notes to Callers</h3>
      <para>Rather than calling <b>IPersistStorage.Load</b> directly, you typically call the <see cref="OleLoad" /> helper function which does the following:</para>
      <list type="number">
        <item>
          <description>Create an uninitialized instance of the object class.</description>
        </item>
        <item>
          <description>Query the new instance for the <see cref="IPersistStorage" /> interface.</description>
        </item>
        <item>
          <description>Call <b>Load</b> to initialize the object from the existing storage.</description>
        </item>
      </list>
      <para>You also call this method indirectly when you call the <see cref="OleCreateFromData" /> function or the <see cref="OleCreateFromFile" /> function to insert an object into a compound file (as in a drag-and-drop or clipboard paste operation).</para>
      <para>The container should cache the <see cref="IPersistStorage" /> pointer for use in later operations on the object.</para>
      <h3>Notes to Implementers</h3>
      <para>Your implementation should perform the following steps to load an object:</para>
      <list type="number">
        <item>
          <description>Open the object's streams in the storage object, and read the necessary data into the object's internal data structures.</description>
        </item>
        <item>
          <description>Clear the object's dirty flag.</description>
        </item>
        <item>
          <description>Call the <see cref="AddRef" /> method and cache the passed in storage pointer.</description>
        </item>
        <item>
          <description>Keep open and cache the pointers to any streams or storages that the object will need to save itself to this storage.</description>
        </item>
        <item>
          <description>Perform any other default initialization required for the object.</description>
        </item>
      </list>
      <para>Steps 3 and 4 are particularly important for ensuring that the object can save itself in low memory situations. Holding onto pointers to the storage and stream interfaces guarantees that a save operation to this storage will not fail due to insufficient memory.</para>
      <para>Your implementation of this method should return the CO_E_ALREADYINITIALIZED error code if it receives a call to either the <see cref="IPersistStorage.InitNew" /> method or the <b>IPersistStorage.Load</b> method after it is already initialized.</para>
    </remarks>
    <seealso cref="IPersistStorage" />
    <seealso cref="OleLoad" />
  </member>
  <member name="IPersistStorage.Save">
    <summary>
      <para>Saves an object, and any nested objects that it contains, into the specified storage object. The object enters NoScribble mode.</para>
    </summary>
    <param name="pStgSave">
      <para>An <see cref="IStorage" /> pointer to the storage into which the object is to be saved.</para>
    </param>
    <param name="fSameAsLoad">
      <para>Indicates whether the specified storage is the current one, which was passed to the object by one of the following calls: <see cref="IPersistStorage.InitNew" />, <see cref="IPersistStorage.Load" />, or <see cref="IPersistStorage.SaveCompleted" />.</para>
      <para>This parameter is set to <b>FALSE</b> when performing a <b>Save As</b> or <b>Save A Copy To</b> operation or when performing a full save. In the latter case, this method saves to a temporary file, deletes the original file, and renames the temporary file.</para>
      <para>This parameter is set to <b>TRUE</b> to perform a full save in a low-memory situation or to perform a fast incremental save in which only the dirty components are saved.</para>
    </param>
    <returns>
      <para>This method can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>STG_E_MEDIUMFULL</b>
            </para>
          </description>
          <description>
            <para>The object was not saved because of a lack of space on the disk.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The object could not be saved due to errors other than a lack of disk space.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method saves an object, and any nested objects it contains, into the specified storage. It also places the object into NoScribble mode. Thus, the object cannot write to its storage until a subsequent call to the <see cref="IPersistStorage.SaveCompleted" /> method returns the object to Normal mode.</para>
      <para>If the storage object is the same as the one it was loaded or created from, the save operation may be able to write incremental changes to the storage object. Otherwise, a full save must be done.</para>
      <para>This method recursively calls the <b>IPersistStorage.Save</b> method, the <see cref="OleSave" /> function, or the <see cref="IStorage.CopyTo" /> method to save its nested objects.</para>
      <para>This method does not call the <see cref="IStorage.Commit" /> method. Nor does it write the CLSID to the storage object. Both of these tasks are the responsibilities of the caller.</para>
      <h3>Notes to Callers</h3>
      <para>Rather than calling <b>IPersistStorage.Save</b> directly, you typically call the <see cref="OleSave" /> helper function which performs the following steps:</para>
      <list type="number">
        <item>
          <description>Call the <see cref="WriteClassStg" /> function to write the class identifier for the object to the storage.</description>
        </item>
        <item>
          <description>Call the <b>IPersistStorage.Save</b> method.</description>
        </item>
        <item>
          <description>If needed, call the <see cref="IStorage.Commit" /> method on the storage object.</description>
        </item>
      </list>
      <para>Then, a container application performs any other operations necessary to complete the save and calls the <see cref="SaveCompleted" /> method for each object.</para>
      <para>If an embedded object passes the <b>IPersistStorage.Save</b> method to its nested objects, it must receive a call to its <see cref="IPersistStorage.SaveCompleted" /> method before calling this method for its nested objects.</para>
    </remarks>
    <seealso cref="IPersistStorage" />
    <seealso cref="OleSave" />
  </member>
  <member name="IPersistStorage.SaveCompleted">
    <summary>
      <para>Notifies the object that it can write to its storage object. It does this by notifying the object that it can revert from NoScribble mode (in which it must not write to its storage object), to Normal mode (in which it can). The object enters NoScribble mode when it receives an <see cref="IPersistStorage.Save" /> call.</para>
    </summary>
    <param name="pStgNew">
      <para>An <see cref="IStorage" /> pointer to the new storage object, if different from the storage object prior to saving. This pointer can be <b>NULL</b> if the current storage object does not change during the save operation. If the object is in HandsOff mode, this parameter must be non-<b>NULL</b>.</para>
    </param>
    <returns>
      <para>This method can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>The object remained in HandsOff mode or NoScribble mode due to a lack of memory. Typically, this error occurs when the object is not able to open the necessary streams and storage objects in <i>pStgNew</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The <i>pStgNew</i> parameter is not valid. Typically, this error occurs if <i>pStgNew</i> is <b>NULL</b> when the object is in HandsOff mode.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_UNEXPECTED</b>
            </para>
          </description>
          <description>
            <para>The object is in Normal mode, and there was no previous call to <see cref="IPersistStorage.Save" /> or <see cref="IPersistStorage.HandsOffStorage" />.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method notifies an object that it can revert to Normal mode and can once again write to its storage object. The object exits NoScribble mode or HandsOff mode.</para>
      <para>If the object is reverting from HandsOff mode, the pStgNew parameter must be non-<b>NULL</b>. In HandsOffFromNormal mode, this parameter is the new storage object that replaces the one that was revoked by the <see cref="IPersistStorage.HandsOffStorage" /> method. The data in the storage object is a copy of the data from the revoked storage object. In HandsOffAfterSave mode, the data is the same as the data that was most recently saved. It is not the same as the data in the revoked storage object.</para>
      <para>If the object is reverting from NoScribble mode, the <i>pStgNew</i> parameter can be <b>NULL</b> or non-<b>NULL</b>. If <b>NULL</b>, the object once again has access to its storage object. If it is not <b>NULL</b>, the component object should simulate receiving a call to its <see cref="HandsOffStorage" /> method. If the component object cannot simulate this call, its container must be prepared to actually call the <b>HandsOffStorage</b> method.</para>
      <para>This method must recursively call any nested objects that are loaded or running.</para>
      <para>If this method returns an error code, the object is not returned to Normal mode. Thus, the container object can attempt different save strategies.</para>
    </remarks>
    <seealso cref="IPersistStorage" />
  </member>
  <member name="IPersistStorage">
    <summary>
      <para>Enables a container application to pass a storage object to one of its contained objects and to load and save the storage object. This interface supports the structured storage model, in which each contained object has its own storage that is nested within the container's storage.</para>
    </summary>
    <seealso cref="OleCreate" />
    <seealso cref="OleLoad" />
    <seealso cref="OleSave" />
  </member>
</doc>