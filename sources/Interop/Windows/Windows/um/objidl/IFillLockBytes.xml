<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IFillLockBytes.FillAppend">
    <summary>
      <para>The <b>FillAppend</b> method writes a new block of bytes to the end of a byte array.</para>
    </summary>
    <param name="pv">
      <para>Pointer to the data to be appended to the end of an existing byte array. This operation does not create a danger of a memory leak or a buffer overrun.</para>
    </param>
    <param name="cb">
      <para>Size of <i>pv</i> in bytes.</para>
    </param>
    <param name="pcbWritten">
      <para>Number of bytes that were successfully written.</para>
    </param>
    <returns>
      <para>This function supports the standard return values E_OUTOFMEMORY, E_UNEXPECTED, E_INVALIDARG, and E_FAIL.</para>
    </returns>
    <remarks>
      <para>The
<b>FillAppend</b> method is used for sequential downloading, where bytes are written to the end of the byte array in the order in which they are received. This method obtains the current size of the byte array (for example, lockbytes object) and writes a new block of data to the end of the array. As each block of data becomes available, the downloader calls this method to write it to the byte array. Subsequent calls by the compound file implementation to
<see cref="ILockBytes.ReadAt" /> return any available data or return E_PENDING if data is currently unavailable.</para>
    </remarks>
    <seealso cref="ILockBytes" />
  </member>
  <member name="IFillLockBytes.FillAt">
    <summary>
      <para>The
<b>FillAt</b> method writes a new block of data to a specified location in the byte array.</para>
    </summary>
    <param name="ulOffset">
      <para>The offset, expressed in number of bytes, from the first element of the byte array.</para>
    </param>
    <param name="pv">
      <para>Pointer to the data to be written at the location specified by <i>uIOffset</i>.</para>
    </param>
    <param name="cb">
      <para>Size of <i>pv</i> in bytes.</para>
    </param>
    <param name="pcbWritten">
      <para>Number of bytes that were successfully written.</para>
    </param>
    <returns>
      <para>This function supports the standard return values E_OUTOFMEMORY, E_UNEXPECTED, E_INVALIDARG, and E_FAIL in addition to the following:</para>
      <para>| Return code | Description |
|----------------|---------------|
| E_NOTIMPL | The byte array does not support the <b>FillAt</b> method. |</para>
    </returns>
    <remarks>
      <para>The
<b>FillAt</b> method is used for nonsequential downloading (for example, HTTP byte range requests). In nonsequential downloading the caller specifies ranges in the byte array where various blocks of data are to be written. Subsequent calls by the compound file implementation to <see cref="ILockBytes.ReadAt" /> are passed by the byte array wrapper object's own implementation of
<see cref="ILockBytes" /> to the underlying byte array. This method is not currently implemented and will return E_NOTIMPL.</para>
      <para>
        <b>Note</b>  The system-supplied
<a href="https://docs.microsoft.com//windows/desktop/Stg/ifilllockbytes-implementation">IFillLockBytes</a> implementation does not support
<b>FillAt</b> and returns E_NOTIMPL.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Stg/ifilllockbytes-implementation">IFillLockBytes - Implementation</seealso>
    <seealso cref="IFillLockBytes.FillAppend" />
    <seealso cref="ILockBytes.ReadAt" />
  </member>
  <member name="IFillLockBytes.SetFillSize">
    <summary>
      <para>The
<b>SetFillSize</b> method sets the expected size of the byte array.</para>
    </summary>
    <param name="ulSize">
      <para>Size in bytes of the byte array object that is to be filled in subsequent calls to
<see cref="IFillLockBytes.FillAppend" />.</para>
    </param>
    <returns>
      <para>This function supports the standard return values E_OUTOFMEMORY, E_UNEXPECTED, E_INVALIDARG, and E_FAIL.</para>
    </returns>
    <remarks>
      <para>If
<b>SetFillSize</b> has not been called, any call to
<see cref="ILockBytes.ReadAt" /> that attempts to access data that has not yet been written using
<see cref="IFillLockBytes.FillAppend" /> or
<see cref="IFillLockBytes.FillAt" /> will return a new error message, E_PENDING. After
<b>SetFillSize</b> has been called, any call to
<b>ReadAt</b> that attempts to access data beyond the current size, as set by
<b>SetFillSize</b>, returns E_FAIL instead of E_PENDING.</para>
    </remarks>
    <seealso cref="IFillLockBytes.FillAppend" />
    <seealso cref="IFillLockBytes.FillAt" />
    <seealso cref="ILockBytes.ReadAt" />
  </member>
  <member name="IFillLockBytes.Terminate">
    <summary>
      <para>The <b>Terminate</b> method informs the byte array that the download has been terminated, either successfully or unsuccessfully.</para>
    </summary>
    <param name="bCanceled">
      <para>Download is complete. If <b>TRUE</b>, the download was terminated unsuccessfully. If <b>FALSE</b>, the download terminated successfully.</para>
    </param>
    <returns>
      <para>This function supports the standard return values E_OUTOFMEMORY, E_UNEXPECTED, E_INVALIDARG, and E_FAIL.</para>
    </returns>
    <remarks>
      <para>After this method has been called, the byte array will no longer return E_PENDING.</para>
    </remarks>
  </member>
  <member name="IFillLockBytes">
    <summary>
      <para>The
<b>IFillLockBytes</b> interface enables downloading code to write data asynchronously to a structured storage byte array. When the downloading code has new data available, it calls
<see cref="IFillLockBytes.FillAppend" /> or <see cref="IFillLockBytes.FillAt" /> to write the data to the byte array. An application attempting to access this data, through calls to the
<see cref="ILockBytes" /> interface, can do so even as the downloader continues to make calls to
<b>IFillLockBytes</b>. If the application attempts to access data that has not already been downloaded through a call to
<b>IFillLockBytes</b>, then
<b>ILockBytes</b> returns a new error, E_PENDING.</para>
    </summary>
    <seealso href="https://docs.microsoft.com//previous-versions/windows/internet-explorer/ie-developer/platform-apis/ms774966(v=vs.85)">BINDINFO</seealso>
    <seealso cref="IConnectionPoint" />
    <seealso cref="IConnectionPointContainer" />
    <seealso cref="ILockBytes" />
    <seealso cref="IProgressNotify" />
    <seealso cref="IStorage" />
    <seealso cref="IStream" />
  </member>
</doc>