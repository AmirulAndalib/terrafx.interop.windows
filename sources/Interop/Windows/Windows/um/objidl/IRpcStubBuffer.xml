<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IRpcStubBuffer.Connect">
    <summary>Initializes a server stub, binding it to the specified interface.</summary>
    <param name="pUnkServer">A pointer to the interface.</param>
    <returns>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, E_UNEXPECTED, E_FAIL, and S_OK.</returns>
  </member>
  <member name="IRpcStubBuffer.CountRefs">
    <summary>Retrieves the total number of references that a stub has on the server object to which it is connected.</summary>
    <returns>This method returns the total number of references that a stub has on the server object to which it is connected.</returns>
  </member>
  <member name="IRpcStubBuffer.DebugServerQueryInterface">
    <summary>Retrieves a pointer to the interface that a stub represents.</summary>
    <param name="ppv">A pointer to the interface that the stub represents.</param>
    <returns>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, E_UNEXPECTED, E_FAIL, and S_OK.</returns>
  </member>
  <member name="IRpcStubBuffer.DebugServerRelease">
    <summary>Releases an interface pointer that was previously returned by <see cref="DebugServerQueryInterface" />.</summary>
    <param name="pv">A pointer to the interface that the caller no longer needs.</param>
  </member>
  <member name="IRpcStubBuffer.Disconnect">
    <summary>Disconnects a server stub from any interface to which it is connected.</summary>
  </member>
  <member name="IRpcStubBuffer.Invoke">
    <summary>Invokes the interface that a stub represents.</summary>
    <param name="_prpcmsg">A pointer to an <see cref="RPCOLEMESSAGE" /> data structure containing the marshaled invocation arguments.</param>
    <param name="_pRpcChannelBuffer">A pointer to an <see cref="IRpcChannelBuffer" /> interface that controls an RPC marshaling channel.</param>
    <returns>This method can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, E_UNEXPECTED, E_FAIL, and S_OK.</returns>
  </member>
  <member name="IRpcStubBuffer.IsIIDSupported">
    <summary>Determines whether a stub is designed to handle the unmarshaling of a particular interface.</summary>
    <param name="riid">The IID of the interface. This parameter cannot be IID_IUnknown.</param>
    <returns>If the stub can handle the indicated interface, then this method returns an <see cref="IRpcStubBuffer" /> pointer for that interface; otherwise, it returns <b>NULL</b>.</returns>
  </member>
  <member name="IRpcStubBuffer">
    <summary>Controls the RPC stub used to marshal data between COM components.</summary>
  </member>
</doc>