<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IRunningObjectTable.EnumRunning">
    <summary>
      <para>Creates and returns a pointer to an enumerator that can list the monikers of all the objects currently registered in the running object table (ROT).</para>
    </summary>
    <param name="ppenumMoniker">
      <para>A pointer to an <see cref="IEnumMoniker" /> pointer variable that receives the interface pointer to the new enumerator for the ROT. When successful, the implementation calls <see cref="AddRef" /> on the enumerator; it is the caller's responsibility to call <see cref="Release" />. If an error occurs; the implementation sets *<i>ppenumMoniker</i> to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_OUTOFMEMORY and S_OK.</para>
    </returns>
    <remarks>
      <para>
        <b>IRunningObjectTable.EnumRunning</b> must create and return a pointer to an <see cref="IEnumMoniker" /> interface on an enumerator object. The standard enumerator methods can then be called to enumerate the monikers currently registered in the registry. The enumerator cannot be used to enumerate monikers that are registered in the ROT after the enumerator has been created.</para>
      <para>The <b>EnumRunning</b> method is intended primarily for the use by the system in implementing the alert object table. Note that OLE 2 does not include an implementation of the alert object table.</para>
    </remarks>
    <seealso cref="IEnumMoniker" />
    <seealso cref="IRunningObjectTable" />
  </member>
  <member name="IRunningObjectTable.GetObject">
    <summary>
      <para>Determines whether the object identified by the specified moniker is running, and if it is, retrieves a pointer to that object.</para>
    </summary>
    <param name="pmkObjectName">
      <para>A pointer to the <see cref="IMoniker" /> interface on the moniker.</para>
    </param>
    <param name="ppunkObject">
      <para>A pointer to an <see cref="IUnknown" /> pointer variable that receives the interface pointer to the running object. When successful, the implementation calls <see cref="AddRef" /> on the object; it is the caller's responsibility to call <see cref="Release" />. If the object is not running or if an error occurs, the implementation sets *<i>ppunkObject</i> to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>This method can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>Indicates that <i>pmkObjectName</i> was found in the ROT and a pointer was retrieved.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>S_FALSE</b>
            </para>
          </description>
          <description>
            <para>There is no entry for <i>pmkObjectName</i> in the ROT, or that the object it identifies is no longer running (in which case, the entry is revoked).</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method checks the ROT for the moniker specified by <i>pmkObjectName</i>. If that moniker had previously been registered with a call to <see cref="IRunningObjectTable.Register" />, this method returns the pointer that was registered at that time.</para>
      <h3>Notes to Callers</h3>
      <para>Generally, you call the <b>IRunningObjectTable.GetObject</b> method only if you are writing your own moniker class (that is, implementing the <see cref="IMoniker" /> interface). You typically call this method from your implementation of <see cref="IMoniker.BindToObject" />.</para>
      <para>However, note that not all implementations of <see cref="IMoniker.BindToObject" /> need to call this method. If you expect your moniker to have a prefix (indicated by a non-<b>NULL</b><i>pmkToLeft</i> parameter to <b>IMoniker.BindToObject</b>), you should not check the ROT. The reason for this is that only complete monikers are registered with the ROT, and if your moniker has a prefix, your moniker is part of a composite and thus not complete. Instead, your moniker should request services from the object identified by the prefix (for example, the container of the object identified by your moniker).</para>
    </remarks>
    <seealso cref="IMoniker.BindToObject" />
    <seealso cref="IRunningObjectTable" />
  </member>
  <member name="IRunningObjectTable.GetTimeOfLastChange">
    <summary>
      <para>Retrieves the time that an object was last modified.</para>
    </summary>
    <param name="pmkObjectName">
      <para>A pointer to the <see cref="IMoniker" /> interface on the moniker.</para>
    </param>
    <param name="pfiletime">
      <para>A pointer to a <see cref="FILETIME" /> structure that receives the object's last change time.</para>
    </param>
    <returns>
      <para>This method can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>S_FALSE</b>
            </para>
          </description>
          <description>
            <para>There is no entry for <i>pmkObjectName</i> in the ROT, or that the object it identifies is no longer running (in which case, the entry is revoked).</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method returns the change time that was last reported for this object by a call to <see cref="IRunningObjectTable.NoteChangeTime" />. If <b>NoteChangeTime</b> has not been called previously, the method returns the time that was recorded when the object was registered.</para>
      <para>This method is provided to enable checking whether a connection between two objects (represented by one object holding a moniker that identifies the other) is up-to-date. For example, if one object is holding cached information about the other object, this method can be used to check whether the object has been modified since the cache was last updated. See <see cref="IMoniker.GetTimeOfLastChange" />.</para>
      <h3>Notes to Callers</h3>
      <para>Generally, you call <b>GetTimeOfLastChange</b> only if you are writing your own moniker class (that is, implementing the <see cref="IMoniker" /> interface). You typically call this method from your implementation of <see cref="IMoniker.GetTimeOfLastChange" />. However, you should do so only if the <i>pmkToLeft</i> parameter of <b>IMoniker.GetTimeOfLastChange</b> is <b>NULL</b>. Otherwise, you should call <b>IMoniker.GetTimeOfLastChange</b> on your <i>pmkToLeft</i> parameter instead.</para>
    </remarks>
    <seealso cref="IMoniker.GetTimeOfLastChange" />
    <seealso cref="IRunningObjectTable" />
  </member>
  <member name="IRunningObjectTable.IsRunning">
    <summary>
      <para>Determines whether the object identified by the specified moniker is currently running.</para>
    </summary>
    <param name="pmkObjectName">
      <para>A pointer to the <see cref="IMoniker" /> interface on the moniker.</para>
    </param>
    <returns>
      <para>If the object is in the running state, the return value is <b>TRUE</b>. Otherwise, it is <b>FALSE</b>.</para>
    </returns>
    <remarks>
      <para>This method simply indicates whether a object is running. To retrieve a pointer to a running object, use the <see cref="IRunningObjectTable.GetObject" /> method.</para>
      <h3>Notes to Callers</h3>
      <para>Generally, you call the <b>IsRunning</b> method only if you are writing your own moniker class (that is, implementing the <see cref="IMoniker" /> interface). You typically call this method from your implementation of <see cref="IMoniker.IsRunning" />. However, you should do so only if the <i>pmkToLeft</i> parameter of <b>IMoniker.IsRunning</b> is <b>NULL</b>. Otherwise, you should call <b>IMoniker.IsRunning</b> on your <i>pmkToLeft</i> parameter instead.</para>
    </remarks>
    <seealso cref="IMoniker.IsRunning" />
    <seealso cref="IRunningObjectTable" />
  </member>
  <member name="IRunningObjectTable.NoteChangeTime">
    <summary>
      <para>Records the time that a running object was last modified. The object must have previously been registered with the running object table (ROT). This method stores the time of last change in the ROT.</para>
    </summary>
    <param name="dwRegister">
      <para>The identifier of the ROT entry of the changed object. This value was previously returned by <see cref="IRunningObjectTable.Register" />.</para>
    </param>
    <param name="pfiletime">
      <para>A pointer to a <see cref="FILETIME" /> structure containing the object's last change time.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_INVALIDARG and S_OK.</para>
    </returns>
    <remarks>
      <para>The time recorded by this method can be retrieved by calling <see cref="IRunningObjectTable.GetTimeOfLastChange" />.</para>
      <h3>Notes to Callers</h3>
      <para>A moniker provider (hands out monikers identifying its objects to make them accessible to others) must call the <b>NoteChangeTime</b> method whenever its objects are modified. It must have previously called <see cref="IRunningObjectTable.Register" /> and stored the identifier returned by that method; it uses that identifier when calling <b>NoteChangeTime</b>.</para>
      <para>The most common type of moniker provider is a compound-document link source. This includes server applications that support linking to their documents (or portions of a document) and container applications that support linking to embeddings within their documents. Server applications that do not support linking can also use the ROT to cooperate with container applications that support linking to embeddings.</para>
      <para>When an object is first registered in the ROT, the ROT records its last change time as the value returned by calling <see cref="IMoniker.GetTimeOfLastChange" /> on the moniker being registered.</para>
    </remarks>
    <seealso cref="IMoniker.GetTimeOfLastChange" />
    <seealso cref="IRunningObjectTable" />
  </member>
  <member name="IRunningObjectTable.Register">
    <summary>
      <para>Registers an object and its identifying moniker in the running object table (ROT).</para>
    </summary>
    <param name="grfFlags">
      <para>Specifies whether the ROT's reference to punkObject is weak or strong and controls access to the object through its entry in the ROT. For details, see the Remarks section.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>ROTFLAGS_REGISTRATIONKEEPSALIVE</b>
          </description>
          <description>
            <para>When set, indicates a strong registration for the object.</para>
          </description>
        </item>
        <item>
          <description>
            <b>ROTFLAGS_ALLOWANYCLIENT</b>
          </description>
          <description>
            <para>When set, any client can connect to the running object through its entry in the ROT. When not set, only clients in the window station that registered the object can connect to it.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="punkObject">
      <para>A pointer to the object that is being registered as running.</para>
    </param>
    <param name="pmkObjectName">
      <para>A pointer to the moniker that identifies <i>punkObject</i>.</para>
    </param>
    <param name="pdwRegister">
      <para>An identifier for this ROT entry that can be used in subsequent calls to <see cref="IRunningObjectTable.Revoke" /> or <see cref="IRunningObjectTable.NoteChangeTime" />. The caller cannot specify <b>NULL</b> for this parameter. If an error occurs, *<i>pdwRegister</i> is set to zero.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MK_S_MONIKERALREADYREGISTERED</b>
            </para>
          </description>
          <description>
            <para>The moniker/object pair was successfully registered, but that another object (possibly the same object) has already been registered with the same moniker.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method registers a pointer to an object under a moniker that identifies the object. The moniker is used as the key when the table is searched with <see cref="IRunningObjectTable.GetObject" />.</para>
      <para>When an object is registered, the ROT always calls <see cref="AddRef" /> on the object. For a weak registration (ROTFLAGS_REGISTRATIONKEEPSALIVE not set), the ROT will release the object whenever the last strong reference to the object is released. For a strong registration (ROTFLAGS_REGISTRATIONKEEPSALIVE set), the ROT prevents the object from being destroyed until the object's registration is explicitly revoked.</para>
      <para>A server registered as either LocalService or RunAs can set the ROTFLAGS_ALLOWANYCLIENT flag in its call to <b>Register</b> to allow any client to connect to it. A server setting this bit must have its executable name in the AppID section of the registry that refers to the AppID for the executable. An "activate as activator" server (not registered as LocalService or RunAs) must not set this flag in its call to <b>Register</b>. For details on installing services, see <a href="https://docs.microsoft.com//windows/desktop/com/installing-as-a-service-application">Installing as a Service Application</a>.</para>
      <para>Registering a second object with the same moniker, or re-registering the same object with the same moniker, creates a second entry in the ROT. In this case, <b>Register</b> returns MK_S_MONIKERALREADYREGISTERED. Each call to <b>Register</b> must be matched by a call to <see cref="IRunningObjectTable.Revoke" /> because even duplicate entries have different <i>pdwRegister</i> identifiers. A problem with duplicate registrations is that there is no way to determine which object will be returned if the moniker is specified in a subsequent call to <see cref="IRunningObjectTable.IsRunning" />.</para>
      <h3>Notes to Callers</h3>
      <para>If you are a moniker provider (that is, you hand out monikers identifying your objects to make them accessible to others), you must call the <b>Register</b> method to register your objects when they begin running. You must also call this method if you rename your objects while they are loaded.</para>
      <para>The most common type of moniker provider is a compound-document link source. This includes server applications that support linking to their documents (or portions of a document) and container applications that support linking to embeddings within their documents. Server applications that do not support linking can also use the ROT to cooperate with container applications that support linking to embeddings.</para>
      <para>If you are writing a server application, you should register an object with the ROT when it begins running, typically in your implementation of <see cref="IOleObject.DoVerb" />. The object must be registered under its full moniker, which requires getting the moniker of its container document using <see cref="IOleClientSite.GetMoniker" />. You should also revoke and re-register the object in your implementation of <see cref="IOleObject.SetMoniker" />, which is called if the container document is renamed.</para>
      <para>If you are writing a container application that supports linking to embeddings, you should register your document with the ROT when it is loaded. If your document is renamed, you should revoke and re-register it with the ROT and call <see cref="IOleObject.SetMoniker" /> for any embedded objects in the document to give them an opportunity to re-register themselves.</para>
      <para>Objects registered in the ROT must be explicitly revoked when the object is no longer running or when its moniker changes. This revocation is important because there is no way for the system to automatically remove entries from the ROT. You must cache the identifier that is written through pdwRegister and use it in a call to <see cref="IRunningObjectTable.Revoke" /> to revoke the registration. For a strong registration, a strong reference is released when the objects registration is revoked.</para>
      <para>As of Windows Server 2003, if there are stale entries that remain in the ROT due to unexpected server problems, COM will automatically remove these stale entries from the ROT.</para>
      <para>The system's implementation of <b>Register</b> calls <see cref="IMoniker.Reduce" /> on the <i>pmkObjectName</i> parameter to ensure that the moniker is fully reduced before registration. If an object is known by more than one fully reduced moniker, it should be registered under all such monikers.</para>
    </remarks>
    <seealso cref="IRunningObjectTable" />
  </member>
  <member name="IRunningObjectTable.Revoke">
    <summary>
      <para>Removes an entry from the running object table (ROT) that was previously registered by a call to <see cref="IRunningObjectTable.Register" />.</para>
    </summary>
    <param name="dwRegister">
      <para>The identifier of the ROT entry to be revoked.</para>
    </param>
    <returns>
      <para>This method can return the standard return values E_INVALIDARG and S_OK.</para>
    </returns>
    <remarks>
      <para>This method undoes the effect of a call to <see cref="IRunningObjectTable.Register" />, removing both the moniker and the pointer to the object identified by that moniker.</para>
      <h3>Notes to Callers</h3>
      <para>A moniker provider (hands out monikers identifying its objects to make them accessible to others) must call the <b>Revoke</b> method to revoke the registration of its objects when it stops running. It must have previously called <see cref="IRunningObjectTable.Register" /> and stored the identifier returned by that method; it uses that identifier when calling <b>Revoke</b>.</para>
      <para>The most common type of moniker provider is a compound-document link source. This includes server applications that support linking to their documents (or portions of a document) and container applications that support linking to embeddings within their documents. Server applications that do not support linking can also use the ROT to cooperate with container applications that support linking to embeddings.</para>
      <para>If you are writing a container application, you must revoke a document's registration when the document is closed. You must also revoke a document's registration before re-registering it when it is renamed.</para>
      <para>If you are writing a server application, you must revoke an object's registration when the object is closed. You must also revoke an object's registration before re-registering it when its container document is renamed (see <see cref="IOleObject.SetMoniker" />).</para>
    </remarks>
    <seealso cref="IRunningObjectTable" />
  </member>
  <member name="IRunningObjectTable">
    <summary>
      <para>Manages access to the running object table (ROT), a globally accessible look-up table on each workstation. A workstation's ROT keeps track of those objects that can be identified by a moniker and that are currently running on the workstation. When a client tries to bind a moniker to an object, the moniker checks the ROT to see if the object is already running; this allows the moniker to bind to the current instance instead of loading a new one.</para>
    </summary>
    <remarks>
      <para>The ROT contains entries of the following form: (<i>pmkObjectName</i>, <i>pUnkObject</i>).</para>
      <para>The <i>pmkObjectName</i> element is a pointer to the moniker that identifies the running object. The <i>pUnkObject</i> element is a pointer to the running object itself. During the binding process, monikers consult the <i>pmkObjectName</i> entries in the ROT to see whether an object is already running.</para>
      <para>Objects that can be named by monikers must be registered with the ROT when they are loaded and their registration must be revoked when they are no longer running.</para>
    </remarks>
    <seealso cref="GetRunningObjectTable" />
    <seealso cref="IBindCtx.GetRunningObjectTable" />
    <seealso cref="IROTData" />
  </member>
</doc>