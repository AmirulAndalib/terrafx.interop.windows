<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ISequentialStream.Read">
    <summary>The <b>Read</b> method reads a specified number of bytes from the stream object into memory, starting at the current seek pointer.</summary>
    <param name="pv">A pointer to the buffer which the stream data is read into.</param>
    <param name="cb">The number of bytes of data to read from the stream object.</param>
    <param name="pcbRead">
      <para>A pointer to a <b>ULONG</b> variable that receives the actual number of bytes read from the stream object.</para>
      <div>
        <b>Note</b>  The number of bytes read may be zero.</div>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <para>| Return code | Description | |----------------|---------------| |S_OK | All of the requested data was successfully read from the stream object; the number of bytes requested in <i>cb</i> is the same as the number of bytes returned in <i>pcbRead</i>.| |S_FALSE | The value returned in <i>pcbRead</i> is less than the number of bytes requested in <i>cb</i>. This indicates the end of the stream has been reached. The number of bytes read indicates how much of the <i>pv</i> buffer has been filled.| |E_PENDING | Asynchronous storage only: Part or all of the data to be read is currently unavailable. | |STG_E_ACCESSDENIED | The caller does not have permissions required to read this stream object.| |STG_E_INVALIDPOINTER | One of the pointer values is invalid.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.|</para>
    </returns>
  </member>
  <member name="ISequentialStream.Write">
    <summary>The <b>Write</b> method writes a specified number of bytes into the stream object starting at the current seek pointer.</summary>
    <param name="pv">A pointer to the buffer that contains the data that is to be written to the stream. A valid pointer must be provided for this parameter even when <i>cb</i> is zero.</param>
    <param name="cb">The number of bytes of data to attempt to write into the stream. This value can be zero.</param>
    <param name="pcbWritten">A pointer to a <b>ULONG</b> variable where this method writes the actual number of bytes written to the stream object. The caller can set this pointer to <b>NULL</b>, in which case this method does not provide the actual number of bytes written.</param>
    <returns>
      <para>This method can return one of these values.</para>
      <para>| Return code | Description | |----------------|---------------| |S_OK | The data was successfully written to the stream object.| |E_PENDING | Asynchronous Storage only: Part or all of the data to be written is currently unavailable.| |STG_E_MEDIUMFULL | The write operation failed because there is no space left on the storage device.| |STG_E_ACCESSDENIED | The caller does not have the required permissions for writing to this stream object.| |STG_E_CANTSAVE | Data cannot be written for reasons other than improper access or insufficient space.| |STG_E_INVALIDPOINTER | One of the pointer values is not valid. The <i>pv</i> parameter must contain a valid pointer even if <i>cb</i> is zero.| |STG_E_REVERTED | The object has been invalidated by a revert operation above it in the transaction tree.| |STG_E_WRITEFAULT | The write operation failed due to a disk error. This value is also returned when this method attempts to write to a stream that was opened in simple mode (using the STGM_SIMPLE flag).|</para>
    </returns>
  </member>
  <member name="ISequentialStream">
    <summary>The<b>ISequentialStream</b> interface supports simplified sequential access to stream objects. The<see cref="IStream" /> interface inherits its<see cref="Read" /> and<see cref="Write" /> methods from<b>ISequentialStream</b>.</summary>
  </member>
</doc>