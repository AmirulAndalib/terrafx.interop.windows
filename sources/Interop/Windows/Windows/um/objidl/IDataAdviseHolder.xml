<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IDataAdviseHolder.Advise">
    <summary>Creates a connection between an advise sink and a data object for receiving notifications.</summary>
    <param name="pDataObject">A pointer to the <see cref="IDataObject" /> interface on the data object for which notifications are requested. If data in this object changes, a notification is sent to the advise sinks that have requested notification.</param>
    <param name="pFetc">A pointer to a <see cref="FORMATETC" /> structure that contains the specified format, medium, and target device that is of interest to the advise sink requesting notification. For example, one sink may want to know only when the bitmap representation of the data in the data object changes. Another sink may be interested in only the metafile format of the same object. Each advise sink is notified when the data of interest changes. This data is passed back to the advise sink when notification occurs.</param>
    <param name="advf">
      <para>A group of flags that control the advisory connection. Possible values are from the <see cref="ADVF" /> enumeration. However, only some of the possible <b>ADVF</b> values are relevant for this method. The following table briefly describes the relevant values; a more detailed description can be found in the description of the <b>ADVF</b> enumeration.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ADVF_NODATA</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Asks that no data be sent along with the notification.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ADVF_ONLYONCE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Causes the advisory connection to be destroyed after the first notification is sent. An implicit call to <see cref="IDataAdviseHolder.Unadvise" /> is made on behalf of the caller to remove the connection.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ADVF_PRIMEFIRST</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Causes an initial notification to be sent regardless of whether data has changed from its current state.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ADVF_DATAONSTOP</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>When specified with ADVF_NODATA, this flag causes a last notification with the data included to be sent before the data object is destroyed. When ADVF_NODATA is not specified, this flag has no effect.</description>
        </listheader>
      </list>
    </param>
    <param name="pAdvise">A pointer to the <see cref="IAdviseSink" /> interface on the advisory sink that receives the change notification.</param>
    <param name="pdwConnection">A pointer to a variable that receives a token that identifies this connection. The calling object can later delete the advisory connection by passing this token to <see cref="IDataAdviseHolder.Unadvise" />. If this value is zero, the connection was not established.</param>
    <returns>This method returns S_OK on success.</returns>
  </member>
  <member name="IDataAdviseHolder.EnumAdvise">
    <summary>Returns an object that can be used to enumerate the current advisory connections.</summary>
    <param name="ppenumAdvise">A pointer to an <see cref="IEnumSTATDATA" /> pointer variable that receives the interface pointer to the new enumerator object. If the implementation returns <b>NULL</b> in *<i>ppenumAdvise</i>, there are no connections to advise sinks at this time.</param>
    <returns>This method returns S_OK if the enumerator object is successfully instantiated or there are no connections.</returns>
  </member>
  <member name="IDataAdviseHolder.SendOnDataChange">
    <summary>Sends notifications to each advise sink for which there is a connection established by calling the <see cref="IAdviseSink.OnDataChange" /> method for each advise sink currently being handled by this instance of the advise holder object.</summary>
    <param name="pDataObject">A pointer to the <see cref="IDataObject" /> interface on the data object in which the data has just changed. This pointer is used in subsequent calls to <see cref="IAdviseSink.OnDataChange" />.</param>
    <param name="dwReserved">This parameter is reserved and must be 0.</param>
    <param name="advf">Container for advise flags that specify how the call to <see cref="IAdviseSink.OnDataChange" /> is made. These flag values are from the enumeration <see cref="ADVF" />. Typically, the value for <i>advf</i> is <b>NULL</b>. The only exception occurs when the data object is shutting down and must send a final notification that includes the actual data to sinks that have specified ADVF_DATAONSTOP and ADVF_NODATA in their call to <see cref="IDataObject.DAdvise" />. In this case, <i>advf</i> contains ADVF_DATAONSTOP.</param>
    <returns>This method returns S_OK on success.</returns>
  </member>
  <member name="IDataAdviseHolder.Unadvise">
    <summary>Removes a connection between a data object and an advisory sink that was set up through a previous call to <see cref="IDataAdviseHolder.Advise" />. This method is typically called in the implementation of <see cref="IDataObject.DUnadvise" />.</summary>
    <param name="dwConnection">A token that specifies the connection to be removed. This value was returned by <see cref="IDataAdviseHolder.Advise" /> when the connection was originally established.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>OLE_E_NOCONNECTION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>dwConnection</i> parameter does not specify a valid connection.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IDataAdviseHolder">
    <summary>
      <para>Creates and manages advisory connections between a data object and one or more advise sinks. Its methods are intended to be used to implement the advisory methods of <see cref="IDataObject" />. <b>IDataAdviseHolder</b> is implemented on an advise holder object. Its methods establish and delete data advisory connections and send notification of change in data from a data object to an object that requires this notification, such as an OLE container, which must contain an advise sink.</para>
      <para>Advise sinks are objects that require notification of change in the data the object contains and implement the <see cref="IAdviseSink" /> interface. Advise sinks are also usually associated with OLE compound document containers.</para>
    </summary>
  </member>
</doc>