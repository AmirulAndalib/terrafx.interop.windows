<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IEnumSTATDATA.Clone">
    <summary>
      <para>Creates a new enumerator that contains the same enumeration state as the current one.</para>
      <para>This method makes it possible to record a particular point in the enumeration sequence and then return to that point at a later time. The caller must release this new enumerator separately from the first enumerator.</para>
    </summary>
    <param name="ppenum">A pointer to an <see cref="IEnumSTATDATA" /> pointer variable that receives the interface pointer to the enumeration object. If the method is unsuccessful, the value of this output variable is undefined.</param>
    <returns>
      <para>This method returns S_OK on success. Other possible values include the following.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_UNEXPECTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An unexpected error has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified enumerator is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Insufficient memory available for this operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IEnumSTATDATA.Next">
    <summary>Retrieves the specified number of items in the enumeration sequence.</summary>
    <param name="celt">The number of items to be retrieved. If there are fewer than the requested number of items left in the sequence, this method retrieves the remaining elements.</param>
    <param name="rgelt">
      <para>An array of enumerated items.</para>
      <para>The enumerator is responsible for allocating any memory, and the caller is responsible for freeing it. If <i>celt</i> is greater than 1, the caller must also pass a non-<b>NULL</b> pointer passed to <i>pceltFetched</i> to know how many pointers to release.</para>
    </param>
    <param name="pceltFetched">The number of items that were retrieved. This parameter is always less than or equal to the number of items requested. This parameter can be <b>NULL</b> if <i>celt</i> is 1.</param>
    <returns>If the method retrieves the number of items requested, the return value is S_OK. Otherwise, it is S_FALSE.</returns>
  </member>
  <member name="IEnumSTATDATA.Reset">
    <summary>Resets the enumeration sequence to the beginning.</summary>
    <returns>This method returns S_OK on success.</returns>
  </member>
  <member name="IEnumSTATDATA.Skip">
    <summary>Skips over the specified number of items in the enumeration sequence.</summary>
    <param name="celt">The number of items to be skipped.</param>
    <returns>If the method skips the number of items requested, the return value is S_OK. Otherwise, it is S_FALSE.</returns>
  </member>
  <member name="IEnumSTATDATA">
    <summary>Enumerates the advisory connection information for a data object.</summary>
  </member>
</doc>