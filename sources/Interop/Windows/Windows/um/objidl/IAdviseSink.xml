<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IAdviseSink.OnClose">
    <summary>Called by the server to notify all registered advisory sinks that the object has changed from the running to the loaded state.</summary>
  </member>
  <member name="IAdviseSink.OnDataChange">
    <summary>Called by the server to notify a data object's currently registered advise sinks that data in the object has changed.</summary>
    <param name="pFormatetc">A pointer to a <see cref="FORMATETC" /> structure, which describes the format, target device, rendering, and storage information of the calling data object.</param>
    <param name="pStgmed">A pointer to a <see cref="STGMEDIUM" /> structure, which defines the storage medium (global memory, disk file, storage object, stream object, GDI object, or undefined) and ownership of that medium for the calling data object.</param>
  </member>
  <member name="IAdviseSink.OnRename">
    <summary>Called by the server to notify all registered advisory sinks that the object has been renamed.</summary>
    <param name="pmk">A pointer to the <see cref="IMoniker" /> interface on the new full moniker of the object.</param>
  </member>
  <member name="IAdviseSink.OnSave">
    <summary>Called by the server to notify all registered advisory sinks that the object has been saved.</summary>
  </member>
  <member name="IAdviseSink.OnViewChange">
    <summary>Notifies an object's registered advise sinks that its view has changed.</summary>
    <param name="dwAspect">The aspect, or view, of the object. Contains a value taken from the <see cref="DVASPECT" /> enumeration.</param>
    <param name="lindex">The portion of the view that has changed. Currently only -1 is valid.</param>
  </member>
  <member name="IAdviseSink">
    <summary>
      <para>Enables containers and other objects to receive notifications of data changes, view changes, and compound-document changes occurring in objects of interest. Container applications, for example, require such notifications to keep cached presentations of their linked and embedded objects up-to-date. Calls to <b>IAdviseSink</b> methods are asynchronous, so the call is sent and then the next instruction is executed without waiting for the call's return.</para>
      <para>For an advisory connection to exist, the object that is to receive notifications must implement <b>IAdviseSink</b>, and the objects in which it is interested must implement <see cref="IOleObject.Advise" /> and <see cref="IDataObject.DAdvise" />. In-process objects and handlers may also implement <see cref="IViewObject.SetAdvise" />. Objects implementing <see cref="IOleObject" /> must support all reasonable advisory methods. To simplify advisory notifications, OLE supplies implementations of the <see cref="IDataAdviseHolder" /> and <see cref="IOleAdviseHolder" />, which keep track of advisory connections and send notifications to the proper sinks through pointers to their <b>IAdviseSink</b> interfaces. <see cref="IViewObject" /> (and its advisory methods) is implemented in the default handler.</para>
      <para>As shown in the following table, an object that has implemented an advise sink registers its interest in receiving certain types of notifications by calling the appropriate method.</para>
      <list type="table">
        <listheader>
          <description>Call This Method</description>
          <description> To Register for These Notifications</description>
        </listheader>
        <listheader>
          <description>
            <see cref="IOleObject.Advise" />
          </description>
          <description>When a document is saved, closed, or renamed.</description>
        </listheader>
        <listheader>
          <description>
            <see cref="IDataObject.DAdvise" />
          </description>
          <description>When a document's data changes.</description>
        </listheader>
        <listheader>
          <description>
            <see cref="IViewObject.SetAdvise" />
          </description>
          <description>When a document's presentation changes.</description>
        </listheader>
      </list> <para>When an event occurs that applies to a registered notification type, the object application calls the appropriate <b>IAdviseSink</b> method. For example, when an embedded object closes, it calls the <see cref="IAdviseSink.OnClose" /> method to notify its container. These notifications are asynchronous, occurring after the events that trigger them.</para></summary>
  </member>
</doc>