<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IMessageFilter.HandleInComingCall">
    <summary>
      <para>Provides a single entry point for incoming calls.</para>
      <para>This method is called prior to each method invocation originating outside the current process and provides the ability to filter or reject incoming calls (or callbacks) to an object or a process.</para>
    </summary>
    <param name="dwCallType">The type of incoming call that has been received. Possible values are from the enumeration <see cref="CALLTYPE" />.</param>
    <param name="htaskCaller">The thread id of the caller.</param>
    <param name="dwTickCount">The elapsed tick count since the outgoing call was made, if <i>dwCallType</i> is not CALLTYPE_TOPLEVEL. If <i>dwCallType</i> is CALLTYPE_TOPLEVEL, <i>dwTickCount</i> should be ignored.</param>
    <param name="lpInterfaceInfo">A pointer to an <see cref="INTERFACEINFO" /> structure that identifies the object, interface, and method being called. In the case of DDE calls, <i>lpInterfaceInfo</i> can be <b>NULL</b> because the DDE layer does not return interface information.</param>
    <returns>
      <para>This method can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SERVERCALL_ISHANDLED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The application might be able to process the call.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SERVERCALL_REJECTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The application cannot handle the call due to an unforeseen problem, such as network unavailability, or if it is in the process of terminating.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SERVERCALL_RETRYLATER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The application cannot handle the call at this time. An application might return this value when it is in a user-controlled modal state.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMessageFilter.MessagePending">
    <summary>
      <para>Indicates that a message has arrived while COM is waiting to respond to a remote call.</para>
      <para>Handling input while waiting for an outgoing call to finish can introduce complications. The application should determine whether to process the message without interrupting the call, to continue waiting, or to cancel the operation.</para>
    </summary>
    <param name="htaskCallee">The thread id of the called application.</param>
    <param name="dwTickCount">The number of ticks since the call was made. It is calculated from the <see cref="GetTickCount" /> function.</param>
    <param name="dwPendingType">The type of call made during which a message or event was received. Possible values are from the enumeration <see cref="PENDINGTYPE" />, where PENDINGTYPE_TOPLEVEL means the outgoing call was not nested within a call from another application and PENDINTGYPE_NESTED means the outgoing call was nested within a call from another application.</param>
    <returns>
      <para>This method can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PENDINGMSG_CANCELCALL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Cancel the outgoing call. This should be returned only under extreme conditions. Canceling a call that has not replied or been rejected can create orphan transactions and lose resources. COM fails the original call and returns RPC_E_CALL_CANCELLED.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PENDINGMSG_WAITNOPROCESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Unused.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PENDINGMSG_WAITDEFPROCESS</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Keyboard and mouse messages are no longer dispatched. However there are some cases where mouse and keyboard messages could cause the system to deadlock, and in these cases, mouse and keyboard messages are discarded. WM_PAINT messages are dispatched. Task-switching and activation messages are handled as before.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMessageFilter.RetryRejectedCall">
    <summary>Provides applications with an opportunity to display a dialog box offering retry, cancel, or task-switching options.</summary>
    <param name="htaskCallee">The thread id of the called application.</param>
    <param name="dwTickCount">The number of elapsed ticks since the call was made.</param>
    <param name="dwRejectType">Specifies either SERVERCALL_REJECTED or SERVERCALL_RETRYLATER, as returned by the object application.</param>
    <returns>
      <para>This method can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>-1</term>
              </listheader>
            </list>
          </description>
          <description>The call should be canceled. COM then returns RPC_E_CALL_REJECTED from the original method call.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>0 ≤ <i>value</i> &lt; 100</term>
              </listheader>
            </list>
          </description>
          <description>The call is to be retried immediately.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>100 ≤ <i>value</i></term>
              </listheader>
            </list>
          </description>
          <description>COM will wait for this many milliseconds and then retry the call.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IMessageFilter">
    <summary>Provides COM servers and applications with the ability to selectively handle incoming and outgoing COM messages while waiting for responses from synchronous calls. Filtering messages helps to ensure that calls are handled in a manner that improves performance and avoids deadlocks. COM messages can be synchronous, asynchronous, or input-synchronized; the majority of interface calls are synchronous.</summary>
  </member>
</doc>