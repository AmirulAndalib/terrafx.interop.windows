<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.DwmAttachMilContent">
    <summary>This function is deprecated and only returns DWM_E_COMPOSITIONDISABLED in Windows 7 and later. It may be removed in future versions of Windows.</summary>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.DwmDefWindowProc">
    <summary>
      <para>Default window procedure for Desktop Window Manager (DWM) hit testing within the non-client area.</para>
      <para>You also need to ensure that <b>DwmDefWindowProc</b> is called for the <a href="https://docs.microsoft.com//windows/desktop/inputdev/wm-ncmouseleave">WM_NCMOUSELEAVE</a> message. If <b>DwmDefWindowProc</b> is not called for the <b>WM_NCMOUSELEAVE</b> message, DWM does not remove the highlighting from the <b>Maximize</b>, <b>Minimize</b>, and <b>Close</b> buttons when the cursor leaves the window.</para>
    </summary>
    <param name="hWnd">A handle to the window procedure that received the message.</param>
    <param name="msg">The message.</param>
    <param name="wParam">Specifies additional message information. The content of this parameter depends on the value of the <i>msg</i> parameter.</param>
    <param name="lParam">Specifies additional message information. The content of this parameter depends on the value of the <i>msg</i> parameter.</param>
    <param name="plResult">A pointer to an <b>LRESULT</b> value that, when this method returns successfully,receives the result of the hit test.</param>
    <returns>
      <b>TRUE</b> if <b>DwmDefWindowProc</b> handled the message; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.DwmDetachMilContent">
    <summary>This function is deprecated and only returns DWM_E_COMPOSITIONDISABLED in Windows 7 and later. It may be removed in future versions of Windows.</summary>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.DwmEnableBlurBehindWindow">
    <summary>Enables the blur effect on a specified window.</summary>
    <param name="hWnd">The handle to the window on which the blur-behind data is applied.</param>
    <param name="pBlurBehind">
      <para>
        <code>[in]</code>
      </para>
      <para>A pointer to a <see cref="DWM_BLURBEHIND" /> structure that provides blur-behind data.</para>
    </param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.DwmEnableComposition">
    <summary>
      <para>Enables or disables Desktop Window Manager (DWM) composition.</para>
      <div>
        <b>Note</b>  This function is deprecated as of Windows 8. DWM can no longer be programmatically disabled.</div>
    </summary>
    <param name="uCompositionAction">
      <para>
        <b>DWM_EC_ENABLECOMPOSITION</b> to enable DWM composition; <b>DWM_EC_DISABLECOMPOSITION</b> to disable composition.</para>
      <div>
        <b>Note</b>  As of Windows 8, calling this function with <b>DWM_EC_DISABLECOMPOSITION</b> has no effect. However, the function will still return a success code.</div>
    </param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.DwmEnableMMCSS">
    <summary>Notifies the Desktop Window Manager (DWM) to opt in to or out of Multimedia Class Schedule Service (MMCSS) scheduling while the calling process is alive.</summary>
    <param name="fEnableMMCSS">
      <b>TRUE</b> to instruct DWM to participate in MMCSS scheduling; <b>FALSE</b> to opt out or end participation in MMCSS scheduling.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.DwmExtendFrameIntoClientArea">
    <summary>Extends the window frame into the client area.</summary>
    <param name="hWnd">The handle to the window in which the frame will be extended into the client area.</param>
    <param name="pMarInset">A pointer to a <see cref="MARGINS" /> structure that describes the margins to use when extending the frame into the client area.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.DwmFlush">
    <summary>Issues a flush call that blocks the caller until the next call to a Present method, when all of the Microsoft DirectX surface updates that are currently outstanding have been made. This compensates for very complex scenes or calling processes with very low priority.</summary>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.DwmGetColorizationColor">
    <summary>Retrieves the current color used for Desktop Window Manager (DWM) glass composition. This value is based on the current color scheme and can be modified by the user. Applications can listen for color changes by handling the <a href="https://docs.microsoft.com//windows/desktop/dwm/wm-dwmcolorizationcolorchanged">WM_DWMCOLORIZATIONCOLORCHANGED</a> notification.</summary>
    <param name="pcrColorization">A pointer to a value that, when this function returns successfully, receives the current color used for glass composition. The color format of the value is 0xAARRGGBB.</param>
    <param name="pfOpaqueBlend">A pointer to a value that, when this function returns successfully, indicates whether the color is an opaque blend. <b>TRUE</b> if the color is an opaque blend; otherwise, <b>FALSE</b>.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.DwmGetCompositionTimingInfo">
    <summary>Retrieves the current composition timing information for a specified window.</summary>
    <param name="hwnd">
      <para>The handle to the window for which the composition timing information should be retrieved.</para>
      <para>Starting with Windows 8.1, this parameter must be set to <b>NULL</b>. If this parameter is not set to <b>NULL</b>, <b>DwmGetCompositionTimingInfo</b> returns E_INVALIDARG.</para>
    </param>
    <param name="pTimingInfo">A pointer to a <see cref="DWM_TIMING_INFO" /> structure that, when this function returns successfully, receives the current composition timing information for the window. The <b>cbSize</b> member of this structure must be set before this function is called.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.DwmGetGraphicsStreamClient">
    <summary>This function is deprecated and only returns DWM_E_COMPOSITIONDISABLED in Windows 7 and later. It may be removed in future versions of Windows.</summary>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.DwmGetGraphicsStreamTransformHint">
    <summary>This function is deprecated and only returns DWM_E_COMPOSITIONDISABLED in Windows 7 and later. It may be removed in future versions of Windows.</summary>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.DwmGetTransportAttributes">
    <summary>Retrieves transport attributes.</summary>
    <param name="pfIsRemoting">A pointer to a <b>BOOL</b> value that indicates whether the transport supports remoting. <b>TRUE</b> if the transport supports remoting; otherwise, <b>FALSE</b>.</param>
    <param name="pfIsConnected">A pointer to a <b>BOOL</b> value that indicates whether the transport is connected. <b>TRUE</b> if the transport is connected; otherwise, <b>FALSE</b>.</param>
    <param name="pDwGeneration">A pointer to a <b>DWORD</b> that receives a generation value for the transport.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.DwmGetUnmetTabRequirements">
    <summary>This function was part of an experimental feature that was never implemented in Windows. It has no effect and should not be used.</summary>
    <param name="appWindow">This parameter is not used.</param>
    <param name="unnamedParam2">This parameter is not used.</param>
  </member>
  <member name="Windows.DwmGetWindowAttribute">
    <summary>Retrieves the current value of a specified Desktop Window Manager (DWM) attribute applied to a window. For programming guidance, and code examples, see <a href="https://docs.microsoft.com//windows/desktop/dwm/composition-ovw#controlling-non-client-region-rendering">Controlling non-client region rendering</a>.</summary>
    <param name="hwnd">The handle to the window from which the attribute value is to be retrieved.</param>
    <param name="dwAttribute">A flag describing which value to retrieve, specified as a value of the <see cref="DWMWINDOWATTRIBUTE" /> enumeration. This parameter specifies which attribute to retrieve, and the <i>pvAttribute</i> parameter points to an object into which the attribute value is retrieved.</param>
    <param name="pvAttribute">A pointer to a value which, when this function returns successfully, receives the current value of the attribute. The type of the retrieved value depends on the value of the <i>dwAttribute</i> parameter. The <see cref="DWMWINDOWATTRIBUTE" /> enumeration topic indicates, in the row for each flag, what type of value you should pass a pointer to in the <i>pvAttribute</i> parameter.</param>
    <param name="cbAttribute">The size, in bytes, of the attribute value being received via the <i>pvAttribute</i> parameter. The type of the retrieved value, and therefore its size in bytes, depends on the value of the <i>dwAttribute</i> parameter.</param>
    <returns>If the function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a><a href="https://docs.microsoft.com//windows/desktop/com/com-error-codes-10">error code</a>.</returns>
  </member>
  <member name="Windows.DwmInvalidateIconicBitmaps">
    <summary>Called by an application to indicate that all previously provided iconic bitmaps from a window, both thumbnails and peek representations, should be refreshed.</summary>
    <param name="hwnd">A handle to the window or tab whose bitmaps are being invalidated through this call. This window must belong to the calling process.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.DwmIsCompositionEnabled">
    <summary>Obtains a value that indicates whether Desktop Window Manager (DWM) composition is enabled. Applications on machines running Windows 7 or earlier can listen for composition state changes by handling the <a href="https://docs.microsoft.com//windows/desktop/dwm/wm-dwmcompositionchanged">WM_DWMCOMPOSITIONCHANGED</a> notification.</summary>
    <param name="pfEnabled">
      <para>A pointer to a value that, when this function returns successfully, receives <b>TRUE</b> if DWM composition is enabled; otherwise, <b>FALSE</b>.</para>
      <div>
        <b>Note</b>  As of Windows 8, DWM composition is always enabled. If an app declares Windows 8 compatibility in their manifest, this function will receive a value of <b>TRUE</b> through <i>pfEnabled</i>. If no such manifest entry is found, Windows 8 compatibility is not assumed and this function receives a value of <b>FALSE</b> through <i>pfEnabled</i>. This is done so that older programs that interpret a value of <b>TRUE</b> to imply that high contrast mode is off can continue to make the correct decisions about rendering their images. (Note that this is a bad practice—you should use the <see cref="SystemParametersInfo" /> function with the <b>SPI_GETHIGHCONTRAST</b> flag to determine the state of high contrast mode.)</div>For more information, see <a href="https://docs.microsoft.com//windows/win32/controls/supporting-high-contrast-themes">Supporting High Contrast Themes</a>.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.DwmModifyPreviousDxFrameDuration">
    <summary>
      <para>Changes the number of monitor refreshes through which the previous frame will be displayed.</para>
      <para>
        <b>DwmModifyPreviousDxFrameDuration</b> is no longer supported. Starting with Windows 8.1, calls to <b>DwmModifyPreviousDxFrameDuration</b> always return E_NOTIMPL.</para>
    </summary>
    <param name="hwnd">The handle to the window for which the new duration is applied to the previous frame.</param>
    <param name="cRefreshes">The number of refreshes to apply to the previous frame.</param>
    <param name="fRelative">
      <b>TRUE</b> if the value given in <i>cRefreshes</i> is relative to the current value (added to or subtracted from it); <b>FALSE</b> if the value replaces the current value.</param>
    <returns>This function always returns S_OK, even when DWM is not running.</returns>
  </member>
  <member name="Windows.DwmQueryThumbnailSourceSize">
    <summary>Retrieves the source size of the Desktop Window Manager (DWM) thumbnail.</summary>
    <param name="hThumbnail">A handle to the thumbnail to retrieve the source window size from.</param>
    <param name="pSize">A pointer to a <see cref="SIZE" /> structure that, when this function returns successfully, receives the size of the source thumbnail.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.DwmRegisterThumbnail">
    <summary>Creates a Desktop Window Manager (DWM) thumbnail relationship between the destination and source windows.</summary>
    <param name="hwndDestination">The handle to the window that will use the DWM thumbnail. Setting the destination window handle to anything other than a top-level window type will result in a return value of E_INVALIDARG.</param>
    <param name="hwndSource">The handle to the window to use as the thumbnail source. Setting the source window handle to anything other than a top-level window type will result in a return value of E_INVALIDARG.</param>
    <param name="phThumbnailId">A pointer to a handle that, when this function returns successfully, represents the registration of the DWM thumbnail.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.DwmRenderGesture">
    <summary>Notifies Desktop Window Manager (DWM) that a touch contact has been recognized as a gesture, and that DWM should draw feedback for that gesture.</summary>
    <param name="unnamedParam1">The type of gesture, specified as one of the <see cref="GESTURE_TYPE" /> values.</param>
    <param name="cContacts">The number of contact points.</param>
    <param name="pdwPointerID">The pointer ID.</param>
    <param name="pPoints">The points.</param>
  </member>
  <member name="Windows.DwmSetDxFrameDuration">
    <summary>
      <para>Sets the number of monitor refreshes through which to display the presented frame.</para>
      <para>
        <b>DwmSetDxFrameDuration</b> is no longer supported. Starting with Windows 8.1, calls to <b>DwmSetDxFrameDuration</b> always return E_NOTIMPL.</para>
    </summary>
    <param name="hwnd">The handle to the window that displays the presented frame.</param>
    <param name="cRefreshes">The number of refreshes through which to display the presented frame.</param>
    <returns>This function always returns S_OK, even when the frame duration is not changed or DWM is not running.</returns>
  </member>
  <member name="Windows.DwmSetIconicLivePreviewBitmap">
    <summary>Sets a static, iconic bitmap to display a <i>live preview</i> (also known as a <i>Peek preview</i>) of a window or tab. The taskbar can use this bitmap to show a full-sized preview of a window or tab.</summary>
    <param name="hwnd">A handle to the window. This window must belong to the calling process.</param>
    <param name="hbmp">A handle to the bitmap to represent the window that <i>hwnd</i> specifies.</param>
    <param name="pptClient">The offset of a tab window's <i>client region</i> (the content area inside the client window frame) from the host window's frame. This offset enables the tab window's contents to be drawn correctly in a live preview when it is drawn without its frame.</param>
    <param name="dwSITFlags">
      <para>The display options for the live preview. This parameter can be 0 or the following value.</para>
      <h4>DWM_SIT_DISPLAYFRAME (0x00000001)</h4>
      <para>0x00000001. Displays a frame around the provided bitmap.</para>
    </param>
    <returns>Returns <b>S_OK</b> if the function succeeds, or an error value otherwise. Note that because this bitmap is not cached, if the window is not being previewed when an application calls this function, the function returns a success code but the bitmap is discarded and not used.</returns>
  </member>
  <member name="Windows.DwmSetIconicThumbnail">
    <summary>Sets a static, iconic bitmap on a window or tab to use as a thumbnail representation. The taskbar can use this bitmap as a thumbnail switch target for the window or tab.</summary>
    <param name="hwnd">A handle to the window or tab. This window must belong to the calling process.</param>
    <param name="hbmp">A handle to the bitmap to represent the window that <i>hwnd</i> specifies.</param>
    <param name="dwSITFlags">
      <para>The display options for the thumbnail. One of the following values:</para>
      <h4>0 (0x00000000)</h4>
      <para>No frame is displayed around the provided thumbnail.</para>
      <h4>DWM_SIT_DISPLAYFRAME (0x00000001)</h4>
      <para>Displays a frame around the provided thumbnail.</para>
    </param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.DwmSetPresentParameters">
    <summary>
      <para>Sets the present parameters for frame composition.</para>
      <para>
        <b>DwmSetPresentParameters</b> is no longer supported. Starting with Windows 8.1, calls to <b>DwmSetPresentParameters</b> always return E_NOTIMPL.</para>
    </summary>
    <param name="hwnd">The handle to the window where the present parameters are applied.</param>
    <param name="pPresentParams">A pointer to a <see cref="DWM_PRESENT_PARAMETERS" /> structure that contains DWM video frame parameters for frame composition.</param>
    <returns>This function always returns S_OK.</returns>
  </member>
  <member name="Windows.DwmSetWindowAttribute">
    <summary>Sets the value of Desktop Window Manager (DWM) non-client rendering attributes for a window. For programming guidance, and code examples, see <a href="https://docs.microsoft.com//windows/desktop/dwm/composition-ovw#controlling-non-client-region-rendering">Controlling non-client region rendering</a>.</summary>
    <param name="hwnd">The handle to the window for which the attribute value is to be set.</param>
    <param name="dwAttribute">A flag describing which value to set, specified as a value of the <see cref="DWMWINDOWATTRIBUTE" /> enumeration. This parameter specifies which attribute to set, and the <i>pvAttribute</i> parameter points to an object containing the attribute value.</param>
    <param name="pvAttribute">A pointer to an object containing the attribute value to set. The type of the value set depends on the value of the <i>dwAttribute</i> parameter. The <see cref="DWMWINDOWATTRIBUTE" /> enumeration topic indicates, in the row for each flag, what type of value you should pass a pointer to in the <i>pvAttribute</i> parameter.</param>
    <param name="cbAttribute">The size, in bytes, of the attribute value being set via the <i>pvAttribute</i> parameter. The type of the value set, and therefore its size in bytes, depends on the value of the <i>dwAttribute</i> parameter.</param>
    <returns>
      <para>If the function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <a href="https://docs.microsoft.com//windows/desktop/com/structure-of-com-error-codes">HRESULT</a><a href="https://docs.microsoft.com//windows/desktop/com/com-error-codes-10">error code</a>.</para>
      <para>If Desktop Composition has been disabled (Windows 7 and earlier), then this function returns <b>DWM_E_COMPOSITIONDISABLED</b>.</para>
    </returns>
  </member>
  <member name="Windows.DwmShowContact">
    <summary>Called by an app or framework to specify the visual feedback type to draw in response to a particular touch or pen contact.</summary>
    <param name="dwPointerID">The pointer ID of the contact. Each touch or pen contact is given a unique ID when it is detected.</param>
    <param name="unnamedParam2">
      <para>One or more of the following DWM_SHOWCONTACT visualizations that DWM should show for this contact.</para>
      <h4>DWMSC_NONE (0x00000000)</h4>
      <para>No visual feedback should be shown in response to the contact.</para>
      <h4>DWMSC_DOWN (0x00000001)</h4>
      <para>Show the "contact down" animation, such as would be used in a button press.</para>
      <h4>DWMSC_UP (0x00000002)</h4>
      <para>Show the "contact up" animation, such as would be used in a button release.</para>
      <h4>DWMSC_DRAG (0x00000004)</h4>
      <para>Show the "contact drag" animation when the UI element that was selected by the touch or pen is dragged.</para>
      <h4>DWMSC_HOLD (0x00000008)</h4>
      <para>Show a visual while the contact is held down, such as holding down a button.</para>
      <h4>DWMSC_PENBARREL (0x00000010)</h4>
      <para>Show the pen barrel visual when the pen barrel button is pressed.</para>
      <h4>DWMSC_ALL (0xFFFFFFFF)</h4>
      <para>Show any of the animations if called for.</para>
    </param>
    <returns>If <i>dwPointerID</i> does not match that of a contact currently present on the screen, this function returns E_INVALIDARG; otherwise, it returns S_OK.</returns>
  </member>
  <member name="Windows.DwmTetherContact">
    <summary>Enables the graphical feedback of touch and drag interactions to the user.</summary>
    <param name="dwPointerID">The pointer ID.</param>
    <param name="fEnable">Indicates whether the contact is enabled.</param>
    <param name="ptTether">The tether.</param>
  </member>
  <member name="Windows.DwmTransitionOwnedWindow">
    <summary>Coordinates the animations of tool windows with the Desktop Window Manager (DWM).</summary>
    <param name="hwnd">Handle to the window.</param>
    <param name="unnamedParam2">The target.</param>
  </member>
  <member name="Windows.DwmUnregisterThumbnail">
    <summary>Removes a Desktop Window Manager (DWM) thumbnail relationship created by the <see cref="DwmRegisterThumbnail" /> function.</summary>
    <param name="hThumbnailId">The handle to the thumbnail relationship to be removed. Null or non-existent handles will result in a return value of E_INVALIDARG.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.DwmUpdateThumbnailProperties">
    <summary>Updates the properties for a Desktop Window Manager (DWM) thumbnail.</summary>
    <param name="hThumbnailId">The handle to the DWM thumbnail to be updated. Null or invalid thumbnails, as well as thumbnails owned by other processes will result in a return value of E_INVALIDARG.</param>
    <param name="ptnProperties">A pointer to a <see cref="DWM_THUMBNAIL_PROPERTIES" /> structure that contains the new thumbnail properties.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
</doc>