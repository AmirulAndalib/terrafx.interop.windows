<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ASSEMBLY_FILE_DETAILED_INFORMATION">
    <summary>
      <para>The
<b>ASSEMBLY_FILE_DETAILED_INFORMATION</b> structure is used by the
<see cref="QueryActCtxW" /> function.</para>
    </summary>
    <remarks>
      <para>If
<see cref="QueryActCtxW" /> is called with the FileInformationInAssemblyOfAssemblyInActivationContext option, and the function succeeds, the information in the returned buffer is in form of the
<b>ASSEMBLY_FILE_DETAILED_INFORMATION</b> structure. The following is an example of a structure used to hold detailed information about the activation context and a call from
<b>QueryActCtxW</b>.</para>
      <code>PASSEMBLY_FILE_DETAILED_INFORMATION pAssemblyInfo = NULL;
ACTIVATION_CONTEXT_QUERY_INDEX QueryIndex;
BOOL fSuccess = FALSE;
SIZE_T cbRequired;
HANDLE hActCtx = INVALID_HANDLE_VALUE;
BYTE bTemporaryBuffer[512];
PVOID pvDataBuffer = (PVOID)bTemporaryBuffer;
SIZE_T cbAvailable = sizeof(bTemporaryBuffer);

// Request the first file in the root assembly
QueryIndex.ulAssemblyIndex = 1;
QueryIndex.ulFileIndexInAssembly = 0;

if (GetCurrentActCtx(&amp;amp;amp;amp;amp;amp;hActCtx)) {

    // Attempt to use our stack-based buffer first - if that's not large
    // enough, allocate from the heap and try again.
    fSuccess = QueryActCtxW(
        0,
        hActCtx,
        (PVOID)&amp;amp;amp;amp;amp;amp;QueryIndex,
        FileInformationInAssemblyOfAssemblyInActivationContext,
        pvDataBuffer,
        cbAvailable,
        &amp;amp;amp;amp;amp;amp;cbRequired);

    // Failed, because the buffer was too small.
    if (!fSuccess &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; (GetLastError() == ERROR_INSUFFICIENT_BUFFER)) {

        // Allocate what we need from the heap - fail if there isn't enough
        // memory to do so.
        pvDataBuffer = HeapAlloc(GetProcessHeap(), 0, cbRequired);
        if (pvDataBuffer == NULL) {
            fSuccess = FALSE;
            goto DoneQuerying;
        }
        cbAvailable = cbRequired;

        // If this fails again, exit out.
        fSuccess = QueryActCtxW(
            0,
            hActCtx,
            (PVOID)&amp;amp;amp;amp;amp;amp;QueryIndex,
            FileInformationInAssemblyOfAssemblyInActivationContext,
            pvDataBuffer,
            cbAvailable,
            &amp;amp;amp;amp;amp;amp;cbRequired);

    }

    if (fSuccess) {
        // Now that we've found the assembly info, cast our target buffer back to
        // the assembly info pointer.  Use pAssemblyInfo-&gt;lpFileName
        pAssemblyInfo = (PASSEMBLY_FILE_DETAILED_INFORMATION)pvDataBuffer;
    }
}

DoneQuerying:
    if (hActCtx != INVALID_HANDLE_VALUE)
        ReleaseActCtx(hActCtx);

    if (pvDataBuffer &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; (pvDataBuffer != bTemporaryBuffer)) {
        HeapFree(GetProcessHeap(), 0, pvDataBuffer);
        pvDataBuffer = 0;
    }

</code>
    </remarks>
  </member>
  <member name="ASSEMBLY_FILE_DETAILED_INFORMATION.ulFlags">
    <summary>
      <para>This value is always 0.</para>
    </summary>
  </member>
  <member name="ASSEMBLY_FILE_DETAILED_INFORMATION.ulFilenameLength">
    <summary>
      <para>Length in bytes of the file name pointed to by <b>lpFileName</b>. The count does not include the terminating null character.</para>
    </summary>
  </member>
  <member name="ASSEMBLY_FILE_DETAILED_INFORMATION.ulPathLength">
    <summary>
      <para>Length in bytes of the path string pointed to by <b>lpFilePath</b> The count does not include the terminating null character.</para>
    </summary>
  </member>
  <member name="ASSEMBLY_FILE_DETAILED_INFORMATION.lpFileName">
    <summary>
      <para>Null-terminated string that specifies the name of the file.</para>
    </summary>
  </member>
  <member name="ASSEMBLY_FILE_DETAILED_INFORMATION.lpFilePath">
    <summary>
      <para>Null-terminated string that specifies the path to the file named in <b>lpFileName</b>.</para>
    </summary>
  </member>
</doc>