<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.C_ASSERT">
    <summary>Checks assertions at compile time.</summary>
    <param name="e">An expression that can be determined at compile time.</param>
  </member>
  <member name="Windows.FIELD_OFFSET">
    <summary>The <b>FIELD_OFFSET</b> macro returns the byte offset of a named field in a known structure type.</summary>
    <param name="type">Specifies the name of a known structure type containing <i>Field</i>.</param>
    <param name="field">Specifies the name of a field in a structure of type <i>Type</i>.</param>
  </member>
  <member name="Windows.GetCurrentFiber">
    <summary>Retrieves the address of the current fiber.</summary>
    <returns>The macro returns the address of the currently running fiber.</returns>
  </member>
  <member name="Windows.GetFiberData">
    <summary>Retrieves the fiber data associated with the current fiber.</summary>
    <returns>The macro returns the fiber data for the currently running fiber.</returns>
  </member>
  <member name="Windows.Int32x32To64">
    <summary>Multiplies two signed 32-bit integers, returning a signed 64-bit integer result. The function performs optimally on 32-bit Windows.</summary>
    <param name="a">The first signed 32-bit integer for the multiplication operation.</param>
    <param name="b">The second signed 32-bit integer for the multiplication operation.</param>
  </member>
  <member name="Windows.Int64ShllMod32">
    <summary>Performs a left logical shift operation on an unsigned 64-bit integer value. The function provides improved shifting code for left logical shifts where the shift count is in the range 0-31.</summary>
    <param name="a">The unsigned 64-bit integer to be shifted.</param>
    <param name="b">The shift count in the range 0-31.</param>
  </member>
  <member name="Windows.Int64ShraMod32">
    <summary>Performs a right arithmetic shift operation on a signed 64-bit integer value. The function provides improved shifting code for right arithmetic shifts where the shift count is in the range 0-31.</summary>
    <param name="a">The signed 64-bit integer to be shifted.</param>
    <param name="b">The shift count in the range 0-31.</param>
  </member>
  <member name="Windows.Int64ShrlMod32">
    <summary>Performs a right logical shift operation on an unsigned 64-bit integer value. The function provides improved shifting code for right logical shifts where the shift count is in the range 0-31.</summary>
    <param name="a">The unsigned 64-bit integer to be shifted.</param>
    <param name="b">The shift count in the range 0-31.</param>
  </member>
  <member name="Windows.InterlockedAdd">
    <summary>Performs an atomic addition operation on the specified <b>LONG</b> values.</summary>
    <param name="Addend">A pointer to the first operand. This value will be replaced with the result of the operation.</param>
    <param name="Value">The second operand.</param>
    <returns>The function returns the result of the operation.</returns>
  </member>
  <member name="Windows.InterlockedAnd">
    <summary>Performs an atomic AND operation on the specified <b>LONG</b> values.</summary>
    <param name="Destination">A pointer to the first operand. This value will be replaced with the result of the operation.</param>
    <param name="Value">The second operand.</param>
    <returns>The function returns the original value of the <i>Destination</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedAnd16">
    <summary>Performs an atomic AND operation on the specified <b>SHORT</b> values.</summary>
    <param name="Destination">A pointer to the first operand. This value will be replaced with the result of the operation.</param>
    <param name="Value">The second operand.</param>
    <returns>The function returns the original value of the <i>Destination</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedAnd64">
    <summary>Performs an atomic AND operation on the specified <b>LONGLONG</b> values.</summary>
    <param name="Destination">A pointer to the first operand. This value will be replaced with the result of the operation.</param>
    <param name="Value">The second operand.</param>
    <returns>The function returns the original value of the <i>Destination</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedAnd8">
    <summary>Performs an atomic AND operation on the specified <b>char</b> values.</summary>
    <param name="Destination">A pointer to the first operand. This value will be replaced with the result of the operation.</param>
    <param name="Value">The second operand.</param>
    <returns>The function returns the original value of the <i>Destination</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedCompareExchange">
    <summary>
      <para>Performs an atomic compare-and-exchange operation on the specified values. The function compares two specified 32-bit values and exchanges with another 32-bit value based on the outcome of the comparison.</para>
      <para>If you are exchanging pointer values, this function has been superseded by the<see cref="InterlockedCompareExchangePointer" /> function.</para>
      <para>To operate on 64-bit values, use the <see cref="InterlockedCompareExchange64" /> function.</para>
    </summary>
    <param name="Destination">A pointer to the destination value.</param>
    <param name="ExChange">The exchange value.</param>
    <param name="Comperand">The value to compare to <i>Destination</i>.</param>
    <returns>The function returns the initial value of the <i>Destination</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedCompareExchange128">
    <summary>
      <para>Performs an atomic compare-and-exchange operation on the specified values. The function compares two specified 128-bit values and exchanges with another 128-bit value based on the outcome of the comparison.</para>
      <para>To operate on 16-bit values, use the <see cref="InterlockedCompareExchange16" /> function.</para>
      <para>To operate on 32-bit values, use the <see cref="InterlockedCompareExchange" /> function.</para>
      <para>To operate on 64-bit values, use the <see cref="InterlockedCompareExchange64" /> function.</para>
    </summary>
    <param name="Destination">A pointer to the destination value. This parameter is an array of two 64-bit integers considered as a 128-bit field.</param>
    <param name="ExchangeHigh">The high part of the exchange value.</param>
    <param name="ExchangeLow">The low part of the exchange value.</param>
    <param name="ComparandResult">The value to compare to. This parameter is an array of two 64-bit integers considered as a 128-bit field. On output, this is overwritten with the original value of the destination.</param>
    <returns>The function returns 1 if <i>ComparandResult</i> equals the original value of the <i>Destination</i> parameter, or 0 if <i>ComparandResult</i> does not equal the original value of the <i>Destination</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedCompareExchange16">
    <summary>
      <para>Performs an atomic compare-and-exchange operation on the specified values. The function compares two specified 16-bit values and exchanges with another 16-bit value based on the outcome of the comparison.</para>
      <para>To operate on 32-bit values, use the <see cref="InterlockedCompareExchange" /> function.</para>
      <para>To operate on 64-bit values, use the <see cref="InterlockedCompareExchange64" /> function.</para>
      <para>To operate on 128-bit values, use the <see cref="InterlockedCompareExchange128" /> function.</para>
    </summary>
    <param name="Destination">A pointer to the destination value.</param>
    <param name="ExChange">The exchange value.</param>
    <param name="Comperand">The value to compare to <i>Destination</i>.</param>
    <returns>The function returns the initial value of the <i>Destination</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedCompareExchange64">
    <summary>Performs an atomic compare-and-exchange operation on the specified values. The function compares two specified 64-bit values and exchanges with another 64-bit value based on the outcome of the comparison.</summary>
    <param name="Destination">A pointer to the destination value.</param>
    <param name="ExChange">The exchange value.</param>
    <param name="Comperand">The value to compare to <i>Destination</i>.</param>
    <returns>The function returns the initial value of the <i>Destination</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedCompareExchangePointer">
    <summary>
      <para>Performs an atomic compare-and-exchange operation on the specified values. The function compares two specified pointer values and exchanges with another pointer value based on the outcome of the comparison.</para>
      <para>To operate on non-pointer values, use the <see cref="InterlockedCompareExchange" /> function.</para>
    </summary>
    <param name="Destination">A pointer to a pointer to the destination value.</param>
    <param name="Exchange">The exchange value.</param>
    <param name="Comperand">The value to compare to <i>Destination</i>.</param>
    <returns>The function returns the initial value of the <i>Destination</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedDecrement">
    <summary>
      <para>Decrements (decreases by one) the value of the specified 32-bit variable as an atomic operation.</para>
      <para>To operate on 64-bit values, use the <see cref="InterlockedDecrement64" /> function.</para>
    </summary>
    <param name="Addend">A pointer to the variable to be decremented.</param>
    <returns>The function returns the resulting decremented value.</returns>
  </member>
  <member name="Windows.InterlockedDecrement16">
    <summary>
      <para>Decrements (decreases by one) the value of the specified 16-bit variable as an atomic operation.</para>
      <para>To operate on 32-bit values, use the <see cref="InterlockedDecrement" /> function.</para>
      <para>To operate on 64-bit values, use the <see cref="InterlockedDecrement64" /> function.</para>
    </summary>
    <param name="Addend">A pointer to the variable to be decremented.</param>
    <returns>The function returns the resulting decremented value.</returns>
  </member>
  <member name="Windows.InterlockedDecrement64">
    <summary>
      <para>Decrements (decreases by one) the value of the specified 64-bit variable as an atomic operation.</para>
      <para>To operate on 32-bit values, use the <see cref="InterlockedDecrement" /> function.</para>
    </summary>
    <param name="Addend">A pointer to the variable to be decremented.</param>
    <returns>The function returns the resulting decremented value.</returns>
  </member>
  <member name="Windows.InterlockedExchange">
    <summary>
      <para>Sets a 32-bit variable to the specified value as an atomic operation.</para>
      <para>To operate on a pointer variable, use the<see cref="InterlockedExchangePointer" /> function.</para>
      <para>To operate on a 16-bit variable, use the <see cref="InterlockedExchange16" /> function.</para>
      <para>To operate on a 64-bit variable, use the <see cref="InterlockedExchange64" /> function.</para>
    </summary>
    <param name="Target">A pointer to the value to be exchanged. The function sets this variable to <i>Value</i>, and returns its prior value.</param>
    <param name="Value">The value to be exchanged with the value pointed to by <i>Target</i>.</param>
    <returns>The function returns the initial value of the <i>Target</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedExchange16">
    <summary>
      <para>Sets a 16-bit variable to the specified value as an atomic operation.</para>
      <para>To operate on a 32-bit variable, use the <see cref="InterlockedExchange" /> function.</para>
      <para>To operate on a 64-bit variable, use the <see cref="InterlockedExchange64" /> function.</para>
    </summary>
    <param name="Destination">A pointer to the value to be exchanged. The function sets this variable to <i>ExChange</i>, and returns its prior value.</param>
    <param name="ExChange">The value to be exchanged with the value pointed to by <i>Destination</i>.</param>
    <returns>The function returns the initial value of the <i>Destination</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedExchange64">
    <summary>
      <para>Sets a 64-bit variable to the specified value as an atomic operation.</para>
      <para>To operate on a 16-bit variable, use the <see cref="InterlockedExchange16" /> function.</para>
      <para>To operate on a 32-bit variable, use the <see cref="InterlockedExchange" /> function.</para>
    </summary>
    <param name="Target">A pointer to the value to be exchanged. The function sets this variable to <i>Value</i>, and returns its prior value.</param>
    <param name="Value">The value to be exchanged with the value pointed to by <i>Target</i>.</param>
    <returns>The function returns the initial value of the <i>Target</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedExchange8">
    <summary>
      <para>Sets an 8-bit variable to the specified value as an atomic operation.</para>
      <para>To operate on a pointer variable, use the<see cref="InterlockedExchangePointer" /> function.</para>
      <para>To operate on a 16-bit variable, use the <see cref="InterlockedExchange16" /> function.</para>
      <para>To operate on a 32-bit variable, use the <see cref="InterlockedExchange" /> function.</para>
      <para>To operate on a 64-bit variable, use the <see cref="InterlockedExchange64" /> function.</para>
    </summary>
    <param name="Target">A pointer to the value to be exchanged. The function sets this variable to <i>Value</i>, and returns its prior value.</param>
    <param name="Value">The value to be exchanged with the value pointed to by <i>Target</i>.</param>
    <returns>The function returns the initial value of the <i>Target</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedExchangeAdd">
    <summary>
      <para>Performs an atomic addition of two 32-bit values.</para>
      <para>To operate on 64-bit values, use the <see cref="InterlockedExchangeAdd64" /> function.</para>
    </summary>
    <param name="Addend">A pointer to a variable. The value of this variable will be replaced with the result of the operation.</param>
    <param name="Value">The value to be added to the variable pointed to by the <i>Addend</i> parameter.</param>
    <returns>The function returns the initial value of the <i>Addend</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedExchangeAdd64">
    <summary>
      <para>Performs an atomic addition of two 64-bit values.</para>
      <para>To operate on 32-bit values, use the <see cref="InterlockedExchangeAdd" /> function.</para>
    </summary>
    <param name="Addend">A pointer to a variable. The value of this variable will be replaced with the result of the operation.</param>
    <param name="Value">The value to be added to the variable pointed to by the <i>Addend</i> parameter.</param>
    <returns>The function returns the initial value of the <i>Addend</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedExchangePointer">
    <summary>Atomically exchanges a pair of addresses.</summary>
    <param name="Target">A pointer to the address to exchange. The function sets the address pointed to by the <i>Target</i> parameter (<code>*Target</code>) to the address that is the value of the <i>Value</i> parameter, and returns the prior value of the <i>Target</i> parameter.</param>
    <param name="Value">The address to be exchanged with the address pointed to by the <i>Target</i> parameter (<code>*Target</code>).</param>
    <returns>The function returns the initial address pointed to by the <i>Target</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedIncrement">
    <summary>
      <para>Increments (increases by one) the value of the specified 32-bit variable as an atomic operation.</para>
      <para>To operate on 64-bit values, use the <see cref="InterlockedIncrement64" /> function.</para>
    </summary>
    <param name="Addend">A pointer to the variable to be incremented.</param>
    <returns>The function returns the resulting incremented value.</returns>
  </member>
  <member name="Windows.InterlockedIncrement16">
    <summary>
      <para>Increments (increases by one) the value of the specified 16-bit variable as an atomic operation.</para>
      <para>To operate on 32-bit values, use the <see cref="InterlockedIncrement" /> function.</para>
      <para>To operate on 64-bit values, use the <see cref="InterlockedIncrement64" /> function.</para>
    </summary>
    <param name="Addend">A pointer to the variable to be incremented.</param>
    <returns>The function returns the resulting incremented value.</returns>
  </member>
  <member name="Windows.InterlockedIncrement64">
    <summary>
      <para>Increments (increases by one) the value of the specified 64-bit variable as an atomic operation.</para>
      <para>To operate on 32-bit values, use the <see cref="InterlockedIncrement" /> function.</para>
    </summary>
    <param name="Addend">A pointer to the variable to be incremented.</param>
    <returns>The function returns the resulting incremented value.</returns>
  </member>
  <member name="Windows.InterlockedOr">
    <summary>Performs an atomic OR operation on the specified <b>LONG</b> values. The function prevents more than one thread from using the same variable simultaneously.</summary>
    <param name="Destination">A pointer to the first operand. This value will be replaced with the result of the operation.</param>
    <param name="Value">The second operand.</param>
    <returns>The function returns the original value of the <i>Destination</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedOr16">
    <summary>Performs an atomic OR operation on the specified <b>SHORT</b> values. The function prevents more than one thread from using the same variable simultaneously.</summary>
    <param name="Destination">A pointer to the first operand. This value will be replaced with the result of the operation.</param>
    <param name="Value">The second operand.</param>
    <returns>The function returns the original value of the <i>Destination</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedOr64">
    <summary>Performs an atomic OR operation on the specified <b>LONGLONG</b> values. The function prevents more than one thread from using the same variable simultaneously.</summary>
    <param name="Destination">A pointer to the first operand. This value will be replaced with the result of the operation.</param>
    <param name="Value">The second operand.</param>
    <returns>The function returns the original value of the <i>Destination</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedOr8">
    <summary>Performs an atomic OR operation on the specified <b>char</b> values. The function prevents more than one thread from using the same variable simultaneously.</summary>
    <param name="Destination">A pointer to the first operand. This value will be replaced with the result of the operation.</param>
    <param name="Value">The second operand.</param>
    <returns>The function returns the original value of the <i>Destination</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedXor">
    <summary>Performs an atomic XOR operation on the specified <b>LONG</b> values. The function prevents more than one thread from using the same variable simultaneously.</summary>
    <param name="Destination">A pointer to the first operand. This value will be replaced with the result of the operation.</param>
    <param name="Value">The second operand.</param>
    <returns>The function returns the original value of the <i>Destination</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedXor16">
    <summary>Performs an atomic XOR operation on the specified <b>SHORT</b> values. The function prevents more than one thread from using the same variable simultaneously.</summary>
    <param name="Destination">A pointer to the first operand. This value will be replaced with the result of the operation.</param>
    <param name="Value">The second operand.</param>
    <returns>The function returns the original value of the <i>Destination</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedXor64">
    <summary>Performs an atomic XOR operation on the specified <b>LONGLONG</b> values. The function prevents more than one thread from using the same variable simultaneously.</summary>
    <param name="Destination">A pointer to the first operand. This value will be replaced with the result of the operation.</param>
    <param name="Value">The second operand.</param>
    <returns>The function returns the original value of the <i>Destination</i> parameter.</returns>
  </member>
  <member name="Windows.InterlockedXor8">
    <summary>Performs an atomic XOR operation on the specified <b>char</b> values. The function prevents more than one thread from using the same variable simultaneously.</summary>
    <param name="Destination">A pointer to the first operand. This value will be replaced with the result of the operation.</param>
    <param name="Value">The second operand.</param>
    <returns>The function returns the original value of the <i>Destination</i> parameter.</returns>
  </member>
  <member name="Windows.IsReparseTagMicrosoft">
    <summary>Determines whether a reparse point tag indicates a Microsoft reparse point.</summary>
    <param name="_tag">The reparse point tag to be tested.</param>
  </member>
  <member name="Windows.IsReparseTagNameSurrogate">
    <summary>Determines whether a tag's associated reparse point is a surrogate for another named entity (for example, a mounted folder).</summary>
    <param name="_tag">The reparse point tag to be tested for surrogacy.</param>
  </member>
  <member name="Windows.LANGIDFROMLCID">
    <summary>Retrieves a <a href="https://docs.microsoft.com//windows/desktop/Intl/language-identifiers">language identifier</a> from a <a href="https://docs.microsoft.com//windows/desktop/Intl/locale-identifiers">locale identifier</a>.</summary>
    <param name="lcid">
      <para>Locale identifier. You can use the <see cref="MAKELCID" /> macro to create a locale identifier or use one of the following predefined values.</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Intl/locale-invariant">LOCALE_INVARIANT</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Intl/locale-system-default">LOCALE_SYSTEM_DEFAULT</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Intl/locale-user-default">LOCALE_USER_DEFAULT</a>
          </description>
        </item>
      </list>
      <b>Windows Vista:</b> The following custom locale identifiers are also supported.<list type="bullet"><item><description><a href="https://docs.microsoft.com//windows/desktop/Intl/locale-custom-constants">LOCALE_CUSTOM_DEFAULT</a></description></item><item><description><a href="https://docs.microsoft.com//windows/desktop/Intl/locale-custom-constants">LOCALE_CUSTOM_UI_DEFAULT</a></description></item><item><description><a href="https://docs.microsoft.com//windows/desktop/Intl/locale-custom-constants">LOCALE_CUSTOM_UNSPECIFIED</a></description></item></list></param>
  </member>
  <member name="Windows.MAKELANGID">
    <summary>Creates a <a href="https://docs.microsoft.com//windows/desktop/Intl/language-identifiers">language identifier</a> from a primary language identifier and a sublanguage identifier.</summary>
    <param name="p">Primary language identifier. This identifier can be a predefined value or a value for a user-defined primary language. For a user-defined language, the identifier is a value in the range 0x0200 to 0x03FF. All other values are reserved for operating system use. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Intl/language-identifier-constants-and-strings">Language Identifier Constants and Strings</a>.</param>
    <param name="s">Sublanguage identifier. This parameter can be a predefined sublanguage identifier or a user-defined sublanguage. For a user-defined sublanguage, the identifier is a value in the range 0x20 to 0x3F. All other values are reserved for operating system use. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Intl/language-identifier-constants-and-strings">Language Identifier Constants and Strings</a>.</param>
  </member>
  <member name="Windows.MAKELCID">
    <summary>Creates a <a href="https://docs.microsoft.com//windows/desktop/Intl/locale-identifiers">locale identifier</a> from a <a href="https://docs.microsoft.com//windows/desktop/Intl/language-identifiers">language identifier</a> and a <a href="https://docs.microsoft.com//windows/desktop/Intl/sort-order-identifiers">sort order identifier</a>.</summary>
    <param name="lgid">
      <a href="https://docs.microsoft.com//windows/win32/intl/language-identifiers">Language identifier</a>. This identifier is a combination of a primary language identifier and a sublanguage identifier and is usually created by using the <see cref="MAKELANGID" /> macro.</param>
    <param name="srtid">
      <a href="https://docs.microsoft.com//windows/win32/intl/sort-order-identifiers">Sort order identifier</a>.</param>
  </member>
  <member name="Windows.MAKESORTLCID">
    <summary>Constructs a <a href="https://docs.microsoft.com//windows/desktop/Intl/locale-identifiers">locale identifier</a> (LCID) from a <a href="https://docs.microsoft.com//windows/desktop/Intl/language-identifiers">language identifier</a>, a <a href="https://docs.microsoft.com//windows/desktop/Intl/sort-order-identifiers">sort order identifier</a>, and the sort version.</summary>
    <param name="lgid">Language identifier. This parameter is a combination of a primary language identifier and a sublanguage identifier and is usually created by using the <see cref="MAKELANGID" /> macro.</param>
    <param name="srtid">Sort order identifier.</param>
    <param name="ver">Reserved; must be 0.</param>
  </member>
  <member name="Windows.MemoryBarrier">
    <summary>Creates a hardware memory barrier (fence) that prevents the CPU from re-ordering read and write operations. It may also prevent the compiler from re-ordering read and write operations.</summary>
  </member>
  <member name="Windows.Multiply128">
    <summary>Multiplies two 64-bit integers to produce a 128-bit integer.</summary>
    <param name="Multiplier">The first integer.</param>
    <param name="Multiplicand">The second integer.</param>
    <param name="HighProduct">The high 64 bits of the product.</param>
    <returns>The low 64 bits of the product.</returns>
  </member>
  <member name="Windows.MultiplyExtract128">
    <summary>Multiplies two 64-bit integers to produce a 128-bit integer, shifts the product to the right by the specified number of bits, and returns the low 64 bits of the result.</summary>
    <param name="Multiplier">The first integer.</param>
    <param name="Multiplicand">The second integer.</param>
    <param name="Shift">The number of bits to shift.</param>
    <returns>The low 64 bits of the result.</returns>
  </member>
  <member name="Windows.MultiplyHigh">
    <summary>Multiplies two 64-bit integers to produce a 128-bit integer and gets the high 64 bits.</summary>
    <param name="Multiplier">The first integer.</param>
    <param name="Multiplicand">The second integer.</param>
    <returns>The high 64 bits of the product.</returns>
  </member>
  <member name="Windows.NtCurrentTeb">
    <summary>The <b>NtCurrentTeb</b> routine returns a pointer to the Thread Environment Block (<see cref="TEB" />) of the current thread.</summary>
    <returns>A pointer to the thread environment block of the current thread.</returns>
  </member>
  <member name="Windows.PopulationCount64">
    <summary>Counts the number of one bits (population count) in a 64-bit unsigned integer.</summary>
    <param name="operand">The operand.</param>
    <returns>The count of one bits.</returns>
  </member>
  <member name="Windows.PreFetchCacheLine">
    <summary>Indicates to the processor that a cache line will be needed in the near future.</summary>
    <param name="l">
      <para>How often the cache line will be needed. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PF_TEMPORAL_LEVEL_1</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The cache line should be loaded into all caches and is likely to be accessed multiple times.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>PF_NON_TEMPORAL_LEVEL_ALL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The cache line is not likely to be needed again after the first reference.</description>
        </listheader>
      </list>
    </param>
    <param name="a">The address of the cache line to be loaded. This address is not required to be on a cache line boundary.</param>
  </member>
  <member name="Windows.PRIMARYLANGID">
    <summary>Extracts a primary language identifier from a <a href="https://docs.microsoft.com//windows/desktop/Intl/language-identifiers">language identifier</a>.</summary>
    <param name="lgid">Language identifier. This value is a combination of a primary language identifier and a sublanguage identifier and is usually created by using the <see cref="MAKELANGID" /> macro.</param>
  </member>
  <member name="Windows.RtlAddFunctionTable">
    <summary>Adds a dynamic function table to the dynamic function table list.</summary>
    <param name="FunctionTable">A pointer to an array of function entries. For a definition of the<b>PRUNTIME_FUNCTION</b> type, see WinNT.h. For more information on runtime function entries, see the calling convention documentation for the processor.</param>
    <param name="EntryCount">The number of entries in the <i>FunctionTable</i> array.</param>
    <param name="BaseAddress">
      <para>The base address to use when computing full virtual addresses from relative virtual addresses of function table entries.</para>
      <h4>- TargetGp [in]</h4>
      <para>The target global pointer. This is part of the Intel IPF calling convention. It is a pointer to a data area in an image.</para>
      <para>This parameter does not exist on x64.</para>
    </param>
    <returns>If the function succeeds, the return value is <b>TRUE</b>. Otherwise, the return value is <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.RtlAddGrowableFunctionTable">
    <summary>Informs the system of a dynamic function table representing a region of memory containing code.</summary>
    <param name="DynamicTable">A pointer to a variable that receives an opaque reference to the newly-added table on success.</param>
    <param name="FunctionTable">A pointer to a partially-filled array of<see cref="RUNTIME_FUNCTION" /> entries which provides unwind information for the region of code. The entries in this array must remain sorted in ascending order of the <b>BeginAddress</b> members.</param>
    <param name="EntryCount">The number of entries currently populated in the function table. This value may be zero.</param>
    <param name="MaximumEntryCount">The capacity of the function table.</param>
    <param name="RangeBase">The beginning of the memory range described by the function table.</param>
    <param name="RangeEnd">The end of the memory range described by the function table.</param>
    <returns>
      <para>This function returns zero on success. (More detail).</para>
      <para>See<a href="https://docs.microsoft.com//openspecs/windows_protocols/ms-erref/596a1078-e883-4972-9bbc-49e60bebca55">http://msdn.microsoft.com/en-us/library/cc704588(PROT.10).aspx</a>for a list of <b>NTSTATUS</b> values.</para>
    </returns>
  </member>
  <member name="Windows.RtlCaptureContext">
    <summary>Retrieves a context record in the context of the caller.</summary>
    <param name="ContextRecord">A pointer to a <see cref="CONTEXT" /> structure.</param>
    <returns>This function does not return a value.</returns>
  </member>
  <member name="Windows.CaptureStackBackTrace">
    <summary>The <b>RtlCaptureStackBackTrace</b> routine captures a stack back trace by walking up the stack and recording the information for each frame.</summary>
    <param name="FramesToSkip">The number of frames to skip from the start of the back trace.</param>
    <param name="FramesToCapture">The number of frames to be captured.</param>
    <param name="BackTrace">An array of pointers captured from the current stack trace.</param>
    <param name="BackTraceHash">
      <para>An optional value that can be used to organize hash tables. If this parameter is <b>NULL</b>, no hash value is computed.</para>
      <para>This value is calculated based on the values of the pointers returned in the <i>BackTrace</i> array. Two identical stack traces will generate identical hash values.</para>
    </param>
    <returns>The number of captured frames.</returns>
  </member>
  <member name="Windows.RtlCaptureStackBackTrace">
    <summary>The <b>RtlCaptureStackBackTrace</b> routine captures a stack back trace by walking up the stack and recording the information for each frame.</summary>
    <param name="FramesToSkip">The number of frames to skip from the start of the back trace.</param>
    <param name="FramesToCapture">The number of frames to be captured.</param>
    <param name="BackTrace">An array of pointers captured from the current stack trace.</param>
    <param name="BackTraceHash">
      <para>An optional value that can be used to organize hash tables. If this parameter is <b>NULL</b>, no hash value is computed.</para>
      <para>This value is calculated based on the values of the pointers returned in the <i>BackTrace</i> array. Two identical stack traces will generate identical hash values.</para>
    </param>
    <returns>The number of captured frames.</returns>
  </member>
  <member name="Windows.RtlConvertDeviceFamilyInfoToString">
    <summary>Retrieves string representations of device family info.</summary>
    <param name="pulDeviceFamilyBufferSize">The size of the buffer for the device family.</param>
    <param name="pulDeviceFormBufferSize">The size of the buffer for the device form.</param>
    <param name="DeviceFamily">The retrieved device family.</param>
    <param name="DeviceForm">The retrieved device form.</param>
    <returns>A success or failure status.</returns>
  </member>
  <member name="Windows.RtlDeleteFunctionTable">
    <summary>Removes a dynamic function table from the dynamic function table list.</summary>
    <param name="FunctionTable">A pointer to an array of function entries that were previously passed to<see cref="RtlAddFunctionTable" /> or an identifier previously passed to<see cref="RtlInstallFunctionTableCallback" />. For a definition of the <b>PRUNTIME_FUNCTION</b> type, see WinNT.h.</param>
    <returns>If the function succeeds, the return value is <b>TRUE</b>. Otherwise, the return value is <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.RtlDeleteGrowableFunctionTable">
    <summary>Informs the system that a previously reported dynamic function table is no longer in use.</summary>
    <param name="DynamicTable">An opaque reference returned by <see cref="RtlAddGrowableFunctionTable." /></param>
    <returns>This function does not return a value.</returns>
  </member>
  <member name="Windows.RtlFirstEntrySList">
    <summary>Retrieves the first entry in a singly linked list. Access to the list is synchronized on a multiprocessor system.</summary>
    <param name="ListHead">
      <para>A pointer to an <b>SLIST_HEADER</b> structure that represents the head of a singly linked list. This structure is for system use only.</para>
      <para>The list must be previously initialized with the <see cref="InitializeSListHead" /> function.</para>
    </param>
    <returns>The return value is a pointer to the first entry in the list. If the list is empty, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.RtlGrowFunctionTable">
    <summary>Reports that a dynamic function table has increased in size.</summary>
    <param name="DynamicTable">An opaque reference returned by <see cref="RtlAddGrowableFunctionTable." />.</param>
    <param name="NewEntryCount">The new number of entries in the <see cref="RUNTIME_FUNCTION" /> array. This must be greater than the previously reported size of the array.</param>
    <returns>This function does not return a value.</returns>
  </member>
  <member name="Windows.RtlInitializeSListHead">
    <summary>Initializes the head of a singly linked list.</summary>
    <param name="ListHead">A pointer to an <b>SLIST_HEADER</b> structure that represents the head of a singly linked list. This structure is for system use only.</param>
    <returns>This function does not return a value.</returns>
  </member>
  <member name="Windows.RtlInstallFunctionTableCallback">
    <summary>Adds a dynamic function table to the dynamic function table list.</summary>
    <param name="TableIdentifier">The identifier for the dynamic function table callback. The two low-order bits must be set. For example,<i>BaseAddress</i>|0x3.</param>
    <param name="BaseAddress">The base address of the region of memory managed by the callback function.</param>
    <param name="Length">The size of the region of memory managed by the callback function, in bytes.</param>
    <param name="Callback">A pointer to the callback function that is called to retrieve the function table entries for the functions in the specified region of memory. For a definition of the<b>PGET_RUNTIME_FUNCTION_CALLBACK</b> type, see WinNT.h.</param>
    <param name="Context">A pointer to the user-defined data to be passed to the callback function.</param>
    <param name="OutOfProcessCallbackDll">
      <para>An optional pointer to a string that specifies the path of a DLL that provides function table entries that are outside the process.</para>
      <para>When a debugger unwinds to a function in the range of addresses managed by the callback function, it loads this DLL and calls the <b>OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME</b>function, whose type is <b>POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK</b>. For more information, see the definitions of these items in WinNT.h.</para>
    </param>
    <returns>If the function succeeds, the return value is <b>TRUE</b>. If the function fails, the return value is <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.RtlInterlockedFlushSList">
    <summary>Removes all items from a singly linked list. Access to the list is synchronized on a multiprocessor system.</summary>
    <param name="ListHead">A pointer to an <b>SLIST_HEADER</b> structure that represents the head of the singly linked list. This structure is for system use only.</param>
    <returns>The return value is a pointer to the items removed from the list. If the list is empty, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.RtlInterlockedPopEntrySList">
    <summary>Removes an item from the front of a singly linked list. Access to the list is synchronized on a multiprocessor system.</summary>
    <param name="ListHead">A pointer to an <b>SLIST_HEADER</b> structure that represents the head of a singly linked list.</param>
    <returns>The return value is a pointer to the item removed from the list. If the list is empty, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.RtlInterlockedPushEntrySList">
    <summary>Inserts an item at the front of a singly linked list. Access to the list is synchronized on a multiprocessor system.</summary>
    <param name="ListHead">A pointer to an <b>SLIST_HEADER</b> structure that represents the head of a singly linked list.</param>
    <param name="ListEntry">A pointer to an<see cref="SLIST_ENTRY" /> structure that represents an item in a singly linked list.</param>
    <returns>The return value is the previous first item in the list. If the list was previously empty, the return value is <b>NULL</b>.</returns>
  </member>
  <member name="Windows.RtlIsEcCode">
    <summary>Returns a value indicating if the code pointed to by the supplied pointer is ARM emulation-compatible (ARM64EC).</summary>
    <param name="CodePointer">A ULONG64 representing a pointer to the code being to be queried.</param>
    <returns>
      <b>TRUE</b> if the code is ARM emulation compatible; otherwise, <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.RtlLookupFunctionEntry">
    <summary>Searches the active function tables for an entry that corresponds to the specified PC value.</summary>
    <param name="ControlPc">The virtual address of an instruction bundle within the function.</param>
    <param name="ImageBase">The base address of module to which the function belongs.</param>
    <param name="HistoryTable">
      <para>The global pointer value of the module.</para>
      <para>This parameter has a different declaration on x64 and ARM systems. For more information, see x64 Definition and ARM Definition.</para>
    </param>
    <returns>If there is no entry in the function table for the specified PC, the function returns<b>NULL</b>. Otherwise, the function returns the address of the function table entry that corresponds to the specified PC.</returns>
  </member>
  <member name="Windows.RtlPcToFileHeader">
    <summary>Retrieves the base address of the image that contains the specified PC value.</summary>
    <param name="PcValue">The PC value. The function searches all modules mapped into the address space of the calling process for a module that contains this value.</param>
    <param name="BaseOfImage">The base address of the image containing the PC value. This value must be added to any relative addresses in the headers to locate the image.</param>
    <returns>
      <para>If the PC value is found, the function returns the base address of the image that contains the PC value.</para>
      <para>If no image contains the PC value, the function returns <b>NULL</b>.</para>
    </returns>
  </member>
  <member name="Windows.RtlQueryDepthSList">
    <summary>Retrieves the number of entries in the specified singly linked list.</summary>
    <param name="ListHead">
      <para>A pointer to an <b>SLIST_HEADER</b> structure that represents the head of a singly linked list. This structure is for system use only.</para>
      <para>The list must be previously initialized with the <see cref="InitializeSListHead" /> function.</para>
    </param>
    <returns>The function returns the number of entries in the list.</returns>
  </member>
  <member name="Windows.RtlRestoreContext">
    <summary>Restores the context of the caller to the specified context record.</summary>
    <param name="ContextRecord">A pointer to a <see cref="CONTEXT" /> structure.</param>
    <param name="ExceptionRecord">
      <para>A pointer to an <see cref="EXCEPTION_RECORD" /> structure. This parameter is optional and should typically be <b>NULL</b>.</para>
      <para>An exception record is used primarily with long jump and C++ catch-throw support. If the <b>ExceptionCode</b> member is STATUS_LONGJUMP, the <b>ExceptionInformation</b> member contains a pointer to a jump buffer. <b>RtlRestoreContext</b> will copy the non-volatile state from the jump buffer in to the context record before the context record is restored.</para>
      <para>If the <b>ExceptionCode</b> member is STATUS_UNWIND_CONSOLIDATE, the <b>ExceptionInformation</b> member contains a pointer to a callback function, such as a catch handler. <b>RtlRestoreContext</b> consolidates the call frames between its frame and the frame specified in the context record before calling the callback function. This hides frames from any exception handling that might occur in the callback function. The difference between this and a typical unwind is that the data on the stack is still present, so frame data such as a throw object is still available. The callback function returns a new program counter to update in the context record, which is then used in a normal restore context.</para>
    </param>
    <returns>This function does not return a value.</returns>
  </member>
  <member name="Windows.RtlUnwind">
    <summary>Initiates an unwind of procedure call frames.</summary>
    <param name="TargetFrame">A pointer to the call frame that is the target of the unwind. If this parameter is<b>NULL</b>, the function performs an exit unwind.</param>
    <param name="TargetIp">The continuation address of the unwind. This parameter is ignored if <i>TargetFrame</i>is <b>NULL</b>.</param>
    <param name="ExceptionRecord">A pointer to an <see cref="EXCEPTION_RECORD" />structure.</param>
    <param name="ReturnValue">A value to be placed in the integer function return register before continuing execution.</param>
    <returns>This function does not return a value.</returns>
  </member>
  <member name="Windows.RtlUnwind2">
    <summary>Initiates an unwind of procedure call frames.</summary>
    <param name="TargetFrame">A pointer to the call frame that is the target of the unwind. If this parameter is<b>NULL</b>, the function performs an exit unwind.</param>
    <param name="TargetIp">The continuation address of the unwind. This parameter is ignored if <i>TargetFrame</i>is <b>NULL</b>.</param>
    <param name="ExceptionRecord">A pointer to an <see cref="EXCEPTION_RECORD" />structure.</param>
    <param name="ReturnValue">A value to be placed in the integer function return register before continuing execution.</param>
    <param name="ContextRecord">A pointer to a <see cref="CONTEXT" /> structure that stores context during the unwind operation.</param>
    <returns>This function does not return a value.</returns>
  </member>
  <member name="Windows.RtlUnwindEx">
    <summary>Initiates an unwind of procedure call frames.</summary>
    <param name="TargetFrame">A pointer to the call frame that is the target of the unwind. If this parameter is <b>NULL</b>, the function performs an exit unwind.</param>
    <param name="TargetIp">The continuation address of the unwind. This parameter is ignored if <i>TargetFrame</i> is<b>NULL</b>.</param>
    <param name="ExceptionRecord">A pointer to an <see cref="EXCEPTION_RECORD" /> structure.</param>
    <param name="ReturnValue">A value to be placed in the integer function return register before continuing execution.</param>
    <param name="ContextRecord">A pointer to a <see cref="CONTEXT" /> structure that stores context during the unwind operation.</param>
    <param name="HistoryTable">A pointer to the unwind history table. This structure is processor specific. For definitions of this structure, see Winternl.h.</param>
    <returns>This function does not return a value.</returns>
  </member>
  <member name="Windows.RtlVirtualUnwind">
    <summary>
      <para>Retrieves the invocation context of the function that precedes the specified function context.</para>
      <div>
        <b>Note</b>  This function is not implemented on all processor platforms and the implementation is different on each platform that supports it. The following prototype lists all the potential parameters and their application. Read further for processor-specific function prototypes.</div>
    </summary>
    <param name="HandlerType">
      <para>The handler type. This parameter can be one of the following values.</para>
      <para>This parameter is only present on x64.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNW_FLAG_NHANDLER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0</term>
              </listheader>
            </list>
          </description>
          <description>The function has no handler.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNW_FLAG_EHANDLER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x1</term>
              </listheader>
            </list>
          </description>
          <description>The function has an exception handler that should be called.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNW_FLAG_UHANDLER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2</term>
              </listheader>
            </list>
          </description>
          <description>The function has a termination handler that should be called when unwinding an exception.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNW_FLAG_CHAININFO</b>
                </term>
              </listheader>
              <listheader>
                <term>0x4</term>
              </listheader>
            </list>
          </description>
          <description>The <b>FunctionEntry</b> member is the contents of a previous function table entry.</description>
        </listheader>
      </list>
    </param>
    <param name="ImageBase">The base address of the module to which the function belongs.</param>
    <param name="ControlPc">The virtual address where control left the specified function.</param>
    <param name="FunctionEntry">The address of the function table entry for the specified function. To obtain the function table entry, call the <see cref="RtlLookupFunctionEntry" /> function.</param>
    <param name="ContextRecord">A pointer to a <see cref="CONTEXT" /> structure that represents the context of the previous frame.</param>
    <param name="HandlerData">
      <para>The location of the PC. If this parameter is 0, the PC is in the prologue, epilogue, or a null frame region of the function. If this parameter is 1, the PC is in the body of the function.</para>
      <para>This parameter is not present on x64.</para>
    </param>
    <param name="EstablisherFrame">
      <para>A pointer to a <b>FRAME_POINTERS</b> structure that receives the establisher frame pointer value. The real frame pointer is defined only if <i>InFunction</i> is 1.</para>
      <para>This parameter is of type <b>PULONG64</b> on x64.</para>
    </param>
    <param name="ContextPointers">An optional pointer to a context pointers structure.</param>
    <returns>This function returns a pointer to an <i>EXCEPTION_ROUTINE</i> callback function.</returns>
  </member>
  <member name="Windows.ShiftLeft128">
    <summary>Shifts 128-bit left.</summary>
    <param name="LowPart">The low 64 bits.</param>
    <param name="HighPart">The high 64 bits.</param>
    <param name="Shift">Bytes to shift.</param>
    <returns>The shifted bits.</returns>
  </member>
  <member name="Windows.ShiftRight128">
    <summary>Shifts 128-bit right.</summary>
    <param name="LowPart">The low 64 bits.</param>
    <param name="HighPart">The high 64 bits.</param>
    <param name="Shift">Bytes to shift.</param>
    <returns>The shifted bits.</returns>
  </member>
  <member name="Windows.SORTIDFROMLCID">
    <summary>Retrieves a <a href="https://docs.microsoft.com//windows/desktop/Intl/sort-order-identifiers">sort order identifier</a> from a <a href="https://docs.microsoft.com//windows/desktop/Intl/locale-identifiers">locale identifier</a>.</summary>
    <param name="lcid">
      <para>Locale identifier. You can use the <see cref="MAKELCID" /> macro to create a locale identifier or use one of the following predefined values.</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Intl/locale-invariant">LOCALE_INVARIANT</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Intl/locale-system-default">LOCALE_SYSTEM_DEFAULT</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Intl/locale-user-default">LOCALE_USER_DEFAULT</a>
          </description>
        </item>
      </list>
      <b>Windows Vista and later:</b> The following custom locale identifiers are also supported.<list type="bullet"><item><description><a href="https://docs.microsoft.com//windows/desktop/Intl/locale-custom-constants">LOCALE_CUSTOM_DEFAULT</a></description></item><item><description><a href="https://docs.microsoft.com//windows/desktop/Intl/locale-custom-constants">LOCALE_CUSTOM_UI_DEFAULT</a></description></item><item><description><a href="https://docs.microsoft.com//windows/desktop/Intl/locale-custom-constants">LOCALE_CUSTOM_UNSPECIFIED</a></description></item></list></param>
  </member>
  <member name="Windows.SORTVERSIONFROMLCID">
    <summary>Retrieves the sort version from a <a href="https://docs.microsoft.com//windows/desktop/Intl/locale-identifiers">locale identifier</a>.</summary>
    <param name="lcid">
      <para>Locale identifier. You can use the <see cref="MAKELCID" /> macro to create a locale identifier or use one of the following predefined values.</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Intl/locale-invariant">LOCALE_INVARIANT</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Intl/locale-system-default">LOCALE_SYSTEM_DEFAULT</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Intl/locale-user-default">LOCALE_USER_DEFAULT</a>
          </description>
        </item>
      </list>
      <b>Windows Vista and later:</b> The following custom locale identifiers are also supported.<list type="bullet"><item><description><a href="https://docs.microsoft.com//windows/desktop/Intl/locale-custom-constants">LOCALE_CUSTOM_DEFAULT</a></description></item><item><description><a href="https://docs.microsoft.com//windows/desktop/Intl/locale-custom-constants">LOCALE_CUSTOM_UI_DEFAULT</a></description></item><item><description><a href="https://docs.microsoft.com//windows/desktop/Intl/locale-custom-constants">LOCALE_CUSTOM_UNSPECIFIED</a></description></item></list></param>
  </member>
  <member name="Windows.SUBLANGID">
    <summary>Extracts a sublanguage identifier from a <a href="https://docs.microsoft.com//windows/desktop/Intl/language-identifiers">language identifier</a>.</summary>
    <param name="lgid">Language identifier. You can supply predefined values for this parameter, or create an identifier using the <see cref="MAKELANGID" /> macro.</param>
  </member>
  <member name="Windows.TEXT">
    <summary>Identifies a string as Unicode when UNICODE is defined by a preprocessor directive during compilation. Otherwise, the macro identifies a string as an ANSI string.</summary>
    <param name="quote">Pointer to the string to interpret as UTF-16 or ANSI.</param>
  </member>
  <member name="Windows.TpDestroyCallbackEnviron">
    <summary>Deletes the specified callback environment. Call this function when the callback environment is no longer needed for creating new thread pool objects.</summary>
    <param name="CallbackEnviron">A <b>TP_CALLBACK_ENVIRON</b> structure that defines the callback environment. The <see cref="TpInitializeCallbackEnviron" /> function returns this structure.</param>
  </member>
  <member name="Windows.TpInitializeCallbackEnviron">
    <summary>Initializes a callback environment for the thread pool.</summary>
    <param name="CallbackEnviron">A <b>TP_CALLBACK_ENVIRON</b> structure that defines the callback environment. Allocate space for this structure and initialize it using this function.</param>
  </member>
  <member name="Windows.TpSetCallbackActivationContext">
    <summary>Assigns an activation context to the callback environment.</summary>
    <param name="CallbackEnviron">A <b>TP_CALLBACK_ENVIRON</b> structure that defines the callback environment. The <see cref="TpInitializeCallbackEnviron" /> function returns this structure.</param>
    <param name="ActivationContext">Pointer to an <b>_ACTIVATION_CONTEXT</b> structure.</param>
  </member>
  <member name="Windows.TpSetCallbackCleanupGroup">
    <summary>Associates the specified cleanup group with the specified callback environment.</summary>
    <param name="CallbackEnviron">A <b>TP_CALLBACK_ENVIRON</b> structure that defines the callback environment. The <see cref="TpInitializeCallbackEnviron" /> function returns this structure.</param>
    <param name="CleanupGroup">A <b>TP_CLEANUP_GROUP</b> structure that defines the cleanup group. The <see cref="CreateThreadpoolCleanupGroup" /> function returns this structure.</param>
    <param name="CleanupGroupCancelCallback">The cleanup callback to be called if the cleanup group is canceled before the associated object is released. The function is called when you call <see cref="CloseThreadpoolCleanupGroupMembers" />.</param>
  </member>
  <member name="Windows.TpSetCallbackFinalizationCallback">
    <summary>Indicates a function to call when the callback environment is finalized.</summary>
    <param name="CallbackEnviron">A <b>TP_CALLBACK_ENVIRON</b> structure that defines the callback environment. The <see cref="TpInitializeCallbackEnviron" /> function returns this structure.</param>
    <param name="FinalizationCallback">Pointer to a <b>TP_SIMPLE_CALLBACK</b> structure indicating a function to call when the callback environment is finalized.</param>
  </member>
  <member name="Windows.TpSetCallbackLongFunction">
    <summary>Indicates that callbacks associated with this callback environment may not return quickly.</summary>
    <param name="CallbackEnviron">A <b>TP_CALLBACK_ENVIRON</b> structure that defines the callback environment. The <see cref="TpInitializeCallbackEnviron" /> function returns this structure.</param>
  </member>
  <member name="Windows.TpSetCallbackNoActivationContext">
    <summary>Indicates that the callback environment has no activation context.</summary>
    <param name="CallbackEnviron">A <b>TP_CALLBACK_ENVIRON</b> structure that defines the callback environment. The <see cref="TpInitializeCallbackEnviron" /> function returns this structure.</param>
  </member>
  <member name="Windows.TpSetCallbackPersistent">
    <summary>Specifies that the callback should run on a persistent thread.</summary>
    <param name="CallbackEnviron">A <b>TP_CALLBACK_ENVIRON</b> structure that defines the callback environment. The <see cref="TpInitializeCallbackEnviron" /> function returns this structure.</param>
  </member>
  <member name="Windows.TpSetCallbackPriority">
    <summary>Specifies the priority of a callback function relative to other work items in the same thread pool.</summary>
    <param name="CallbackEnviron">A <b>TP_CALLBACK_ENVIRON</b> structure that defines the callback environment. The <see cref="TpInitializeCallbackEnviron" /> function returns this structure.</param>
    <param name="Priority">
      <para>The priority for the callback relative to other callbacks in the same thread pool. This parameter can be one of the following <b>TP_CALLBACK_PRIORITY</b> enumeration values:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TP_CALLBACK_PRIORITY_HIGH</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The callback should run at high priority.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TP_CALLBACK_PRIORITY_LOW</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The callback should run at low priority.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>TP_CALLBACK_PRIORITY_NORMAL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The callback should run at normal priority.</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.TpSetCallbackRaceWithDll">
    <summary>Ensures that the specified DLL remains loaded as long as there are outstanding callbacks.</summary>
    <param name="CallbackEnviron">A <b>TP_CALLBACK_ENVIRON</b> structure that defines the callback environment. The <see cref="InitializeThreadpoolEnvironment" /> function returns this structure.</param>
    <param name="DllHandle">A handle to the DLL.</param>
  </member>
  <member name="Windows.TpSetCallbackThreadpool">
    <summary>Assigns a thread pool to a callback environment.</summary>
    <param name="CallbackEnviron">A <b>TP_CALLBACK_ENVIRON</b> structure that defines the callback environment. The <see cref="TpInitializeCallbackEnviron" /> function returns this structure.</param>
    <param name="Pool">A <b>TP_POOL</b> structure that defines a thread pool. The <see cref="CreateThreadpool" /> function returns this structure.</param>
  </member>
  <member name="Windows.UInt32x32To64">
    <summary>Multiplies two unsigned 32-bit integers, returning an unsigned 64-bit integer result. The function performs optimally on 32-bit Windows.</summary>
    <param name="a">The first unsigned 32-bit integer for the multiplication operation.</param>
    <param name="b">The second unsigned 32-bit integer for the multiplication operation.</param>
  </member>
  <member name="Windows.UnsignedMultiply128">
    <summary>Multiplies two unsigned 64-bit integers to produce an unsigned 128-bit integer.</summary>
    <param name="Multiplier">The first integer.</param>
    <param name="Multiplicand">The second integer.</param>
    <param name="HighProduct">The high 64 bits of the product.</param>
    <returns>The low 64 bits of the product.</returns>
  </member>
  <member name="Windows.UnsignedMultiplyExtract128">
    <summary>Multiplies two unsigned 64-bit integers to produce an unsigned 128-bit integer, shifts the product to the right by the specified number of bits, and returns the low 64 bits of the result.</summary>
    <param name="Multiplier">The first integer.</param>
    <param name="Multiplicand">The second integer.</param>
    <param name="Shift">The number of bits to shift.</param>
    <returns>The low 64 bits of the result.</returns>
  </member>
  <member name="Windows.UnsignedMultiplyHigh">
    <summary>Multiplies two 64-bit integers to produce a 128-bit integer and gets the high unsigned 64 bits.</summary>
    <param name="Multiplier">The first integer.</param>
    <param name="Multiplicand">The second integer.</param>
    <returns>The high 64 bits of the product.</returns>
  </member>
  <member name="Windows.VerSetConditionMask">
    <summary>Sets the bits of a 64-bit value to indicate the comparison operator to use for a specified operating system version attribute. This function is used to build the <i>dwlConditionMask</i> parameter of the<see cref="VerifyVersionInfo" /> function.</summary>
    <param name="ConditionMask">
      <para>A value to be passed as the <i>dwlConditionMask</i> parameter of the<see cref="VerifyVersionInfo" /> function. The function stores the comparison information in the bits of this variable.</para>
      <para>Before the first call to <b>VerSetCondition</b>, initialize this variable to zero. For subsequent calls, pass in the variable used in the previous call.</para>
    </param>
    <param name="TypeMask">
      <para>A mask that indicates the member of the<see cref="OSVERSIONINFOEX" /> structure whose comparison operator is being set. This value corresponds to one of the bits specified in the <i>dwTypeMask</i> parameter for the<see cref="VerifyVersionInfo" /> function. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_BUILDNUMBER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000004</term>
              </listheader>
            </list>
          </description>
          <description>dwBuildNumber</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_MAJORVERSION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000002</term>
              </listheader>
            </list>
          </description>
          <description>dwMajorVersion</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_MINORVERSION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000001</term>
              </listheader>
            </list>
          </description>
          <description>dwMinorVersion</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_PLATFORMID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000008</term>
              </listheader>
            </list>
          </description>
          <description>dwPlatformId</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_PRODUCT_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000080</term>
              </listheader>
            </list>
          </description>
          <description>wProductType</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_SERVICEPACKMAJOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000020</term>
              </listheader>
            </list>
          </description>
          <description>wServicePackMajor</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_SERVICEPACKMINOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000010</term>
              </listheader>
            </list>
          </description>
          <description>wServicePackMinor</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_SUITENAME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000040</term>
              </listheader>
            </list>
          </description>
          <description>wSuiteMask</description>
        </listheader>
      </list>
    </param>
    <param name="Condition">
      <para>The operator to be used for the comparison. The<see cref="VerifyVersionInfo" /> function uses this operator to compare a specified attribute value to the corresponding value for the currently running system.</para>
      <para>For all values of <i>dwTypeBitMask</i> other than VER_SUITENAME, this parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_EQUAL</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The current value must be equal to the specified value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_GREATER</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The current value must be greater than the specified value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_GREATER_EQUAL</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The current value must be greater than or equal to the specified value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_LESS</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The current value must be less than the specified value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_LESS_EQUAL</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The current value must be less than or equal to the specified value.</description>
        </listheader>
      </list> <para>If <i>dwTypeBitMask</i> is VER_SUITENAME, this parameter can be one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>VER_AND</b></term></listheader><listheader><term>6</term></listheader></list></description><description>All product suites specified in the <b>wSuiteMask</b> member must be present in the current system.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>VER_OR</b></term></listheader><listheader><term>7</term></listheader></list></description><description>At least one of the specified product suites must be present in the current system.</description></listheader></list></param>
    <returns>The function returns the condition mask value.</returns>
  </member>
  <member name="Windows.VER_SET_CONDITION">
    <summary>Sets the bits of a 64-bit value to indicate the comparison operator to use for a specified operating system version attribute. This macro is used to build the <i>dwlConditionMask</i> parameter of the<see cref="VerifyVersionInfo" /> function.</summary>
    <param name="m">
      <para>A variable to be passed as the <i>dwlConditionMask</i> parameter of the<see cref="VerifyVersionInfo" /> function. The macro stores the comparison information in the bits of this variable.</para>
      <para>Before the first call to<b>VER_SET_CONDITION</b>, initialize this variable to zero. For subsequent calls to<b>VER_SET_CONDITION</b>, pass in the variable used in the previous call.</para>
    </param>
    <param name="t">
      <para>A mask that indicates the member of the<see cref="OSVERSIONINFOEX" /> structure whose comparison type is being set. This value corresponds to one of the bits specified in the <i>dwTypeMask</i> parameter for the<see cref="VerifyVersionInfo" /> function. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_BUILDNUMBER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000004</term>
              </listheader>
            </list>
          </description>
          <description>dwBuildNumber</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_MAJORVERSION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000002</term>
              </listheader>
            </list>
          </description>
          <description>dwMajorVersion</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_MINORVERSION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000001</term>
              </listheader>
            </list>
          </description>
          <description>dwMinorVersion</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_PLATFORMID</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000008</term>
              </listheader>
            </list>
          </description>
          <description>dwPlatformId</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_PRODUCT_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000080</term>
              </listheader>
            </list>
          </description>
          <description>wProductType</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_SERVICEPACKMAJOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000020</term>
              </listheader>
            </list>
          </description>
          <description>wServicePackMajor</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_SERVICEPACKMINOR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000010</term>
              </listheader>
            </list>
          </description>
          <description>wServicePackMinor</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_SUITENAME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000040</term>
              </listheader>
            </list>
          </description>
          <description>wSuiteMask</description>
        </listheader>
      </list>
    </param>
    <param name="c">
      <para>The operator to use for the comparison. The<see cref="VerifyVersionInfo" /> function uses this operator to compare a specified attribute value to the corresponding value for the currently running system.</para>
      <para>For all values of <i>dwTypeBitMask</i> other than VER_SUITENAME, this parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_EQUAL</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The current value must be equal to the specified value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_GREATER</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The current value must be greater than the specified value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_GREATER_EQUAL</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The current value must be greater than or equal to the specified value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_LESS</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The current value must be less than the specified value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>VER_LESS_EQUAL</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The current value must be less than or equal to the specified value.</description>
        </listheader>
      </list> <para>If <i>dwTypeBitMask</i> is VER_SUITENAME, this parameter can be one of the following values.</para><list type="table"><listheader><description>Value</description><description>Meaning</description></listheader><listheader><description><list type="bullet"><listheader><term><b>VER_AND</b></term></listheader><listheader><term>6</term></listheader></list></description><description>All product suites specified in the <b>wSuiteMask</b> member must be present in the current system.</description></listheader><listheader><description><list type="bullet"><listheader><term><b>VER_OR</b></term></listheader><listheader><term>7</term></listheader></list></description><description>At least one of the specified product suites must be present in the current system.</description></listheader></list></param>
  </member>
  <member name="Windows.YieldProcessor">
    <summary>Signals to the processor to give resources to threads that are waiting for them. This macro is only effective on processors that support technology allowing multiple threads running on a single processor, such as Intel's Hyperthreading technology.</summary>
  </member>
  <member name="Windows.InterlockedAddAcquire">
    <summary>Performs an atomic addition operation on the specified <b>LONG</b> values. The operation is performed with acquire memory ordering semantics.</summary>
    <param name="Addend">A pointer to the first operand. This value will be replaced with the result of the operation.</param>
    <param name="Value">The second operand.</param>
    <returns>The function returns the result of the operation.</returns>
  </member>
  <member name="Windows.InterlockedAdd64">
    <summary>Performs an atomic addition operation on the specified <b>LONG64</b> values.</summary>
    <param name="Addend">A pointer to the first operand. This value will be replaced with the result of the operation.</param>
    <param name="Value">The second operand.</param>
    <returns>The function returns the result of the operation.</returns>
  </member>
  <member name="Windows.InterlockedBitTestAndReset">
    <summary>Tests the specified bit of the specified <b>LONG</b> value and sets it to 0. The operation is atomic.</summary>
    <param name="Base">A pointer to a variable.</param>
    <param name="Offset">The bit position to be tested.</param>
    <returns>The value of the specified bit.</returns>
  </member>
  <member name="Windows.InterlockedBitTestAndReset64">
    <summary>Tests the specified bit of the specified <b>LONG64</b> value and sets it to 0. The operation is atomic.</summary>
    <param name="Base">A pointer to a variable.</param>
    <param name="Offset">The bit position to be tested.</param>
    <returns>The value of the specified bit.</returns>
  </member>
  <member name="Windows.InterlockedBitTestAndSet">
    <summary>Tests the specified bit of the specified <b>LONG</b> value and sets it to 1. The operation is atomic.</summary>
    <param name="Base">A pointer to a variable.</param>
    <param name="Offset">The bit position to be tested.</param>
    <returns>The value of the specified bit.</returns>
  </member>
  <member name="Windows.InterlockedBitTestAndSet64">
    <summary>Tests the specified bit of the specified <b>LONG64</b> value and sets it to 1. The operation is atomic.</summary>
    <param name="Base">A pointer to a variable.</param>
    <param name="Offset">The bit position to be tested.</param>
    <returns>The value of the specified bit before it is set.</returns>
  </member>
</doc>