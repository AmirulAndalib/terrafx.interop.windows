<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ITfCandidateList.EnumCandidates">
    <summary>
      <para>Obtains an enumerator that contains all the candidate string objects in the candidate list.</para>
    </summary>
    <param name="ppEnum">
      <para>Pointer to an <see cref="IEnumTfCandidates" /> interface pointer that receives the enumerator object. The caller must release this interface when it is no longer required.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>ppEnum</i> is invalid.
</description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>A memory allocation failure occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="IEnumTfCandidates " />
    <seealso cref="ITfCandidateList" />
  </member>
  <member name="ITfCandidateList.GetCandidate">
    <summary>
      <para>Obtains a specific candidate string object.</para>
    </summary>
    <param name="nIndex">
      <para>Specifies the zero-based index of the candidate string to obtain.</para>
    </param>
    <param name="ppCand">
      <para>Pointer to an <see cref="ITfCandidateString" /> interface pointer that receives the candidate string object. The caller must release this interface when it is no longer required.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <i>nIndex</i> is invalid.
</description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>ppCand</i> is invalid.
</description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>A memory allocation failure occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="ITfCandidateList" />
    <seealso cref="ITfCandidateString " />
  </member>
  <member name="ITfCandidateList.GetCandidateNum">
    <summary>
      <para>Obtains the number of candidate string objects in the candidate list.</para>
    </summary>
    <param name="pnCnt">
      <para>Pointer to a <b>ULONG</b> value that receives the number of candidate string objects in the candidate list.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>pnCnt</i> is invalid.
</description>
        </item>
      </list>
    </returns>
  </member>
  <member name="ITfCandidateList.SetResult">
    <summary>
      <para>Specifies the result of a reconversion operation for s specific candidate string.</para>
    </summary>
    <param name="nIndex">
      <para>Specifies the zero-based index of the candidate string to set the result for. This parameter is ignored if <i>imcr</i> contains CAND_CANCELED.</para>
    </param>
    <param name="imcr">
      <para>Contains one of the <see cref="TfCandidateResult" /> values that specifies the result of the reconversion operation.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>A typical reconversion operation would include the following operations.</para>
      <list type="number">
        <item>
          <description>A list of candidates is obtained and displayed to the user in a dialog box.</description>
        </item>
        <item>
          <description>When the user selects a candidate, but before the dialog box is dismissed, <b>ITfCandidateList.SetResult</b> is called with the index of the newly selected candidate and CAND_SELECTED.</description>
        </item>
        <item>
          <description>If a different candidate is selected, <b>ITfCandidateList.SetResult</b> is called agian with the index of the newly selected candidate and CAND_SELECTED.</description>
        </item>
        <item>
          <description>If the user chooses to accept the new candidate, <b>ITfCandidateList.SetResult</b> is called with the index of the currently selected candidate and CAND_FINALIZED.</description>
        </item>
        <item>
          <description>If the user cancels the dialog, <b>ITfCandidateList.SetResult</b> is called with an index of zero and CAND_CANCELED.</description>
        </item>
      </list>
    </remarks>
    <seealso cref="ITfCandidateList" />
    <seealso cref="TfCandidateResult " />
  </member>
  <member name="ITfCandidateList">
    <summary>
      <para>The <b>ITfCandidateList</b> interface is implemented by a text service and is used by the TSF manager or a client (application or other text service) to obtain and manipulate candidate string objects.</para>
      <para>The TSF manager implements this interface to provide access to this interface to other clients. This enables the TSF manager to function as a mediator between the client and the text service.</para>
      <para>To obtain an instance of this interface the TSF manager or client can call <see cref="ITfFnReconversion.GetReconversion" />.</para>
    </summary>
    <remarks>
      <para>When a text service must interpret text before it is inserted into a context, there might be more than one possible interpretation of the text. Speech input is an example of this. If the spoken word is "there", other possible interpretations might be "their" or "they're". The text service will insert the most appropriate text, but there is still some chance of error involved. Text reconversion is the process of allowing the user to select alternate text for the inserted text. The alternate text objects are known as candidates.</para>
    </remarks>
    <seealso cref="ITfFnReconversion.GetReconversion " />
    <seealso cref="IUnknown" />
  </member>
</doc>