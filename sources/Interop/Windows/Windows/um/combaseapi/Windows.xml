<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.CLSIDFromProgID">
    <summary>Looks up a CLSID in the registry, given a ProgID.</summary>
    <param name="lpszProgID">A pointer to the ProgID whose CLSID is requested.</param>
    <param name="lpclsid">Receives a pointer to the retrieved CLSID on return.</param>
    <returns>
      <para>This function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CLSID was retrieved successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CO_E_CLASSSTRING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The registered CLSID for the ProgID is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REGDB_E_WRITEREGDB</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An error occurred writing the CLSID to the registry. See Remarks below.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CLSIDFromProgIDEx">
    <summary>
      <para>Triggers automatic installation if the COMClassStore policy is enabled.</para>
      <para>This is analogous to the behavior of <see cref="CoCreateInstance" /> when neither CLSCTX_ENABLE_CODE_DOWNLOAD nor CLSCTX_NO_CODE_DOWNLOAD are specified.</para>
    </summary>
    <param name="lpszProgID">A pointer to the ProgID whose CLSID is requested.</param>
    <param name="lpclsid">Receives a pointer to the retrieved CLSID on return.</param>
    <returns>
      <para>This function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CLSID was retrieved successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CO_E_CLASSSTRING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The registered CLSID for the ProgID is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REGDB_E_WRITEREGDB</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An error occurred writing the CLSID to the registry. See Remarks below.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CLSIDFromString">
    <summary>Converts a string generated by the <see cref="StringFromCLSID" /> function back into the original CLSID.</summary>
    <param name="lpsz">The zero terminated string representation of the CLSID or the <a href="https://docs.microsoft.com//windows/win32/com/progid">ProgID</a> or <b>NULL</b>.</param>
    <param name="pclsid">A pointer to the CLSID.</param>
    <returns>
      <para>This function can return the standard return value E_INVALIDARG, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>NOERROR</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CLSID was obtained successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CO_E_CLASSSTRING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The class string was improperly formatted.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoAddRefServerProcess">
    <summary>Increments a global per-process reference count.</summary>
    <returns>The current reference count.</returns>
  </member>
  <member name="Windows.CoAllowUnmarshalerCLSID">
    <summary>Adds an unmarshaler CLSID to the allowed list for the calling process only.</summary>
    <param name="clsid">The CLSID of the unmarshaler to be added to the per-process allowed list.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.CoCancelCall">
    <summary>Requests cancellation of an outbound DCOM method call pending on a specified thread.</summary>
    <param name="dwThreadId">The identifier of the thread on which the pending DCOM call is to be canceled. If this parameter is 0, the call is on the current thread.</param>
    <param name="ulTimeout">The number of seconds <b>CoCancelCall</b> waits for the server to complete the outbound call after the client requests cancellation.</param>
    <returns>
      <para>This function can return the standard return values E_FAIL, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The cancellation request was made.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOINTERFACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is no cancel object corresponding to the specified thread.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CO_E_CANCEL_DISABLED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Call cancellation is not enabled on the specified thread.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RPC_E_CALL_COMPLETE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The call was completed during the timeout interval.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RPC_E_CALL_CANCELED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The call was already canceled.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoCopyProxy">
    <summary>Makes a private copy of the specified proxy.</summary>
    <param name="pProxy">A pointer to the <see cref="IUnknown" /> interface on the proxy to be copied. This parameter cannot be <b>NULL</b>.</param>
    <param name="ppCopy">Address of the pointer variable that receives the interface pointer to the copy of the proxy. This parameter cannot be <b>NULL</b>.</param>
    <returns>
      <para>This function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates success.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more arguments are invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoCreateFreeThreadedMarshaler">
    <summary>Creates an aggregatable object capable of context-dependent marshaling.</summary>
    <param name="punkOuter">A pointer to the aggregating object's controlling <see cref="IUnknown" />.</param>
    <param name="ppunkMarshal">Address of the pointer variable that receives the interface pointer to the aggregatable marshaler.</param>
    <returns>
      <para>This function can return the standard return value E_OUTOFMEMORY, as well as the following value.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The marshaler was created.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoCreateGuid">
    <summary>Creates a GUID, a unique 128-bit integer used for CLSIDs and interface identifiers.</summary>
    <param name="pguid">A pointer to the requested GUID.</param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The GUID was successfully created.</description>
        </listheader>
      </list> <para>Errors returned by <see cref="UuidCreate" /> are wrapped as an <b>HRESULT</b>.</para></returns>
  </member>
  <member name="Windows.CoCreateInstance">
    <summary>
      <para>Creates and default-initializes a single object of the class associated with a specified CLSID.</para>
      <para>Call <b>CoCreateInstance</b> when you want to create only one object on the local system. To create a single object on a remote system, call the <see cref="CoCreateInstanceEx" /> function. To create multiple objects based on a single CLSID, call the <see cref="CoGetClassObject" /> function.</para>
    </summary>
    <param name="rclsid">The CLSID associated with the data and code that will be used to create the object.</param>
    <param name="pUnkOuter">If <b>NULL</b>, indicates that the object is not being created as part of an aggregate. If non-<b>NULL</b>, pointer to the aggregate object's <see cref="IUnknown" /> interface (the controlling <b>IUnknown</b>).</param>
    <param name="dwClsContext">Context in which the code that manages the newly created object will run. The values are taken from the enumeration <see cref="CLSCTX" />.</param>
    <param name="riid">A reference to the identifier of the interface to be used to communicate with the object.</param>
    <param name="ppv">Address of pointer variable that receives the interface pointer requested in <i>riid</i>. Upon successful return, *<i>ppv</i> contains the requested interface pointer. Upon failure, *<i>ppv</i> contains <b>NULL</b>.</param>
    <returns>
      <para>This function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An instance of the specified object class was successfully created.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REGDB_E_CLASSNOTREG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A specified class is not registered in the registration database. Also can indicate that the type of server you requested in the <see cref="CLSCTX" /> enumeration is not registered or the values for the server types in the registry are corrupt.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLASS_E_NOAGGREGATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This class cannot be created as part of an aggregate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOINTERFACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The specified class does not implement the requested interface, or the controlling <see cref="IUnknown" /> does not expose the requested interface.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>ppv</i> parameter is <b>NULL</b>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoCreateInstanceEx">
    <summary>Creates an instance of a specific class on a specific computer.</summary>
    <param name="Clsid">The CLSID of the object to be created.</param>
    <param name="punkOuter">If this parameter non-<b>NULL</b>, indicates the instance is being created as part of an aggregate, and <i>punkOuter</i> is to be used as the new instance's controlling <see cref="IUnknown" />. Aggregation is currently not supported cross-process or cross-computer. When instantiating an object out of process, CLASS_E_NOAGGREGATION will be returned if <i>punkOuter</i> is non-<b>NULL</b>.</param>
    <param name="dwClsCtx">A value from the <see cref="CLSCTX" /> enumeration.</param>
    <param name="pServerInfo">Information about the computer on which to instantiate the object. See <see cref="COSERVERINFO" />. This parameter can be <b>NULL</b>, in which case the object is instantiated on the local computer or at the computer specified in the registry under the class's <a href="https://docs.microsoft.com//windows/desktop/com/remoteservername">RemoteServerName</a> value, according to the interpretation of the <i>dwClsCtx</i> parameter.</param>
    <param name="dwCount">The number of structures in <i>pResults</i>. This value must be greater than 0.</param>
    <param name="pResults">An array of <see cref="MULTI_QI" /> structures. Each structure has three members: the identifier for a requested interface (<b>pIID</b>), the location to return the interface pointer (<b>pItf</b>) and the return value of the call to <see cref="QueryInterface" /> (<b>hr</b>).</param>
    <returns>
      <para>This function can return the standard return value E_INVALIDARG, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates success.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REGDB_E_CLASSNOTREG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A specified class is not registered in the registration database. Also can indicate that the type of server you requested in the <see cref="CLSCTX" /> enumeration is not registered or the values for the server types in the registry are corrupt.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLASS_E_NOAGGREGATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This class cannot be created as part of an aggregate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CO_S_NOTALLINTERFACES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>At least one, but not all of the interfaces requested in the <i>pResults</i> array were successfully retrieved. The <b>hr</b> member of each of the <see cref="MULTI_QI" /> structures in <i>pResults</i> indicates with S_OK or E_NOINTERFACE whether the specific interface was returned.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOINTERFACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>None of the interfaces requested in the <i>pResults</i> array were successfully retrieved.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoCreateInstanceFromApp">
    <summary>Creates an instance of a specific class on a specific computer from within an app container.</summary>
    <param name="Clsid">The CLSID of the object to be created.</param>
    <param name="punkOuter">If this parameter non-<b>NULL</b>, indicates the instance is being created as part of an aggregate, and <i>punkOuter</i> is to be used as the new instance's controlling <see cref="IUnknown" />. Aggregation is currently not supported cross-process or cross-computer. When instantiating an object out of process, CLASS_E_NOAGGREGATION will be returned if <i>punkOuter</i> is non-<b>NULL</b>.</param>
    <param name="dwClsCtx">A value from the <see cref="CLSCTX" /> enumeration.</param>
    <param name="reserved">Reserved for future use.</param>
    <param name="dwCount">The number of structures in <i>pResults</i>. This value must be greater than 0.</param>
    <param name="pResults">An array of <see cref="MULTI_QI" /> structures. Each structure has three members: the identifier for a requested interface (<b>pIID</b>), the location to return the interface pointer (<b>pItf</b>) and the return value of the call to <see cref="QueryInterface" /> (<b>hr</b>).</param>
    <returns>
      <para>This function can return the standard return value E_INVALIDARG, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates success.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REGDB_E_CLASSNOTREG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A specified class is not registered in the registration database, or the class is not supported in the app container. Also can indicate that the type of server you requested in the <see cref="CLSCTX" /> enumeration is not registered or the values for the server types in the registry are corrupt.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLASS_E_NOAGGREGATION</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>This class cannot be created as part of an aggregate.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CO_S_NOTALLINTERFACES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>At least one, but not all of the interfaces requested in the <i>pResults</i> array were successfully retrieved. The <b>hr</b> member of each of the <see cref="MULTI_QI" /> structures in <i>pResults</i> indicates with S_OK or E_NOINTERFACE whether the specific interface was returned.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOINTERFACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>None of the interfaces requested in the <i>pResults</i> array were successfully retrieved.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoDecodeProxy">
    <summary>Locates the implementation of a Component Object Model (COM) interface in a server process given an interface to a proxied object.</summary>
    <param name="dwClientPid">The process ID of the process that contains the proxy.</param>
    <param name="ui64ProxyAddress">The address of an interface on a proxy to the object. <i>ui64ProxyAddress</i> is considered a 64-bit value type, rather than a pointer to a 64-bit value, and isn't a pointer to an object in the debugger process. Instead, this address is passed to the <see cref="ReadProcessMemory" /> function.</param>
    <param name="pServerInformation">A structure that contains the process ID, the thread ID, and the address of the server.</param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The server information was successfully retrieved.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_ACCESSDENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller is an app container, or the developer license is not installed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RPC_E_INVALID_IPID</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>ui64ProxyAddress</i> does not point to a proxy.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoDecrementMTAUsage">
    <summary>Releases the increment made by a previous call to the <see cref="CoIncrementMTAUsage" /> function.</summary>
    <param name="Cookie">A <b>PVOID</b> variable that was set by a previous call to the <see cref="CoIncrementMTAUsage" /> function.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.CoDisableCallCancellation">
    <summary>Undoes the action of a call to <see cref="CoEnableCallCancellation" />. Disables cancellation of synchronous calls on the calling thread when all calls to <b>CoEnableCallCancellation</b> are balanced by calls to <b>CoDisableCallCancellation</b>.</summary>
    <param name="pReserved">This parameter is reserved and must be <b>NULL</b>.</param>
    <returns>
      <para>This function can return the standard return values E_FAIL, E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Call cancellation was successfully disabled on the thread.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CO_E_CANCEL_DISABLED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There have been more successful calls to <see cref="CoEnableCallCancellation" /> on the thread than there have been calls to <see cref="CoDisableCallCancellation" />. Cancellation is still enabled on the thread.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoDisconnectContext">
    <summary>
      <para>Disconnects all proxy connections that are being maintained on behalf of all interface pointers that point to objects in the current context.</para>
      <para>This function blocks connections until all objects are successfully disconnected or the time-out expires. Only the context that actually manages the objects should call <b>CoDisconnectContext</b>.</para>
    </summary>
    <param name="dwTimeout">The time in milliseconds after which <b>CoDisconnectContext</b> returns even if the proxy connections for all objects have not been disconnected. INFINITE is an acceptable value for this parameter.</param>
    <returns>
      <para>This function can return the standard return values E_FAIL, E_INVALIDARG, and E_OUTOFMEMORY, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The proxy connections for all objects were successfully disconnected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RPC_E_TIMEOUT</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Not all proxy connections were successfully deleted in the time specified in <i>dwTimeout</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CO_E_NOTSUPPORTED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The current context cannot be disconnected.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CONTEXT_E_WOULD_DEADLOCK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An object tried to call <see cref="CoDisconnectContext" /> on the context it is residing in. This would cause the function to time-out and deadlock if <i>dwTimeout</i> were set to INFINITE.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoDisconnectObject">
    <summary>
      <para>Disconnects all remote process connections being maintained on behalf of all the interface pointers that point to a specified object.</para>
      <para>Only the process that actually manages the object should call <b>CoDisconnectObject</b>.</para>
    </summary>
    <param name="pUnk">A pointer to any interface derived from <see cref="IUnknown" /> on the object to be disconnected.</param>
    <param name="dwReserved">This parameter is reserved and must be 0.</param>
    <returns>This function returns S_OK to indicate that all connections to remote processes were successfully deleted.</returns>
  </member>
  <member name="Windows.CoEnableCallCancellation">
    <summary>Enables cancellation of synchronous calls on the calling thread.</summary>
    <param name="pReserved">This parameter is reserved and must be <b>NULL</b>.</param>
    <returns>This function can return the standard return values S_OK, E_FAIL, E_INVALIDARG, and E_OUTOFMEMORY.</returns>
  </member>
  <member name="Windows.CoFileTimeNow">
    <summary>
      <para>Returns the current time as a <see cref="FILETIME" /> structure.</para>
      <div>
        <b>Note</b>  This function is provided for compatibility with 16-bit Windows.</div>
    </summary>
    <param name="lpFileTime">A pointer to the <see cref="FILETIME" /> structure that receives the current time.</param>
    <returns>This function returns S_OK to indicate success.</returns>
  </member>
  <member name="Windows.CoFreeUnusedLibraries">
    <summary>
      <para>Unloads any DLLs that are no longer in use, probably because the DLL no longer has any instantiated COM objects outstanding.</para>
      <div>
        <b>Note</b>  This function is provided for compatibility with 16-bit Windows.</div>
    </summary>
  </member>
  <member name="Windows.CoFreeUnusedLibrariesEx">
    <summary>Unloads any DLLs that are no longer in use and whose unload delay has expired.</summary>
    <param name="dwUnloadDelay">The delay in milliseconds between the time that the DLL has stated it can be unloaded until it becomes a candidate to unload. Setting this parameter to INFINITE uses the system default delay (10 minutes). Setting this parameter to 0 forces the unloading of any DLLs without any delay.</param>
    <param name="dwReserved">This parameter is reserved and must be 0.</param>
  </member>
  <member name="Windows.CoGetCallContext">
    <summary>Retrieves the context of the current call on the current thread.</summary>
    <param name="riid">Interface identifier (IID) of the call context that is being requested. If you are using the default call context supported by standard marshaling, IID_IServerSecurity is available. For COM+ applications using role-based security, IID_ISecurityCallContext is available.</param>
    <param name="ppInterface">Address of pointer variable that receives the interface pointer requested in riid. Upon successful return, *<i>ppInterface</i> contains the requested interface pointer.</param>
    <returns>
      <para>This function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The context was retrieved successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOINTERFACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The call context does not support the interface specified by <i>riid</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoGetCallerTID">
    <summary>Returns a pointer to a <b>DWORD</b> that contains the apartment ID of the caller's thread.</summary>
    <param name="lpdwTID">Receives the apartment ID of the caller's thread. For a single threaded apartment (STA), this is the current thread ID. For a multithreaded apartment (MTA), the value is 0. For a neutral apartment (NA), the value is -1.</param>
    <returns>
      <para>This function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_TRUE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller's thread ID is set and the caller is in the same process.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller's thread ID is set and the caller is in a different process.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller's thread ID was not set.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoGetCancelObject">
    <summary>Obtains a pointer to a call control interface, normally <see cref="ICancelMethodCalls" />, on the cancel object corresponding to an outbound COM method call pending on the same or another client thread.</summary>
    <param name="dwThreadId">The identifier of the thread on which the pending COM call is to be canceled. If this parameter is 0, the call is on the current thread.</param>
    <param name="iid">The globally unique identifier of an interface on the cancel object for the call to be canceled. This argument is usually IID_ICancelMethodCalls.</param>
    <param name="ppUnk">Receives the address of a pointer to the interface specified by <i>riid</i>.</param>
    <returns>
      <para>This function can return the standard return values E_FAIL, E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The call control object was retrieved successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOINTERFACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The object on which the call is executing does not support the interface specified by <i>riid</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoGetClassObject">
    <summary>
      <para>Provides a pointer to an interface on a class object associated with a specified CLSID. <b>CoGetClassObject</b> locates, and if necessary, dynamically loads the executable code required to do this.</para>
      <para>Call <b>CoGetClassObject</b> directly to create multiple objects through a class object for which there is a CLSID in the system registry. You can also retrieve a class object from a specific remote computer. Most class objects implement the <see cref="IClassFactory" /> interface. You would then call <see cref="CreateInstance" /> to create an uninitialized object. It is not always necessary to go through this process however. To create a single object, call the <see cref="CoCreateInstanceEx" /> function, which allows you to create an instance on a remote machine. This replaces the <see cref="CoCreateInstance" /> function, which can still be used to create an instance on a local computer. Both functions encapsulate connecting to the class object, creating the instance, and releasing the class object. Two other functions, <see cref="CoGetInstanceFromFile" /> and <see cref="CoGetInstanceFromIStorage" />, provide both instance creation on a remote system and object activation. There are numerous functions and interface methods whose purpose is to create objects of a single type and provide a pointer to an interface on that object.</para>
    </summary>
    <param name="rclsid">The CLSID associated with the data and code that you will use to create the objects.</param>
    <param name="dwClsContext">The context in which the executable code is to be run. To enable a remote activation, include CLSCTX_REMOTE_SERVER. For more information on the context values and their use, see the <see cref="CLSCTX" /> enumeration.</param>
    <param name="pvReserved">A pointer to computer on which to instantiate the class object. If this parameter is <b>NULL</b>, the class object is instantiated on the current computer or at the computer specified under the class's <a href="https://docs.microsoft.com//windows/desktop/com/remoteservername">RemoteServerName</a> key, according to the interpretation of the <i>dwClsCtx</i> parameter. See <see cref="COSERVERINFO" />.</param>
    <param name="riid">Reference to the identifier of the interface, which will be supplied in <i>ppv</i> on successful return. This interface will be used to communicate with the class object. Typically this value is IID_IClassFactory, although other values such as IID_IClassFactory2 which supports a form of licensing are allowed. All OLE-defined interface IIDs are defined in the OLE header files as IID_interfacename, where interfacename is the name of the interface.</param>
    <param name="ppv">The address of pointer variable that receives the interface pointer requested in <i>riid</i>. Upon successful return, *<i>ppv</i> contains the requested interface pointer.</param>
    <returns>
      <para>This function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Location and connection to the specified class object was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REGDB_E_CLASSNOTREG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The CLSID is not properly registered. This error can also indicate that the value you specified in <i>dwClsContext</i> is not in the registry.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOINTERFACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either the object pointed to by <i>ppv</i> does not support the interface identified by <i>riid</i>, or the <see cref="QueryInterface" /> operation on the class object returned E_NOINTERFACE.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REGDB_E_READREGDB</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was an error reading the registration database.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CO_E_DLLNOTFOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either the in-process DLL or handler DLL was not found (depending on the context).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CO_E_APPNOTFOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The executable (.exe) was not found (CLSCTX_LOCAL_SERVER only).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_ACCESSDENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was a general access failure on load.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CO_E_ERRORINDLL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is an error in the executable image.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CO_E_APPDIDNTREG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The executable was launched, but it did not register the class object (and it may have shut down).</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoGetContextToken">
    <summary>Returns a pointer to an implementation of <see cref="IObjContext" /> for the current context.</summary>
    <param name="pToken">A pointer to an implementation of <see cref="IObjContext" /> for the current context.</param>
    <returns>
      <para>This function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The token was retrieved successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_POINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller did not pass a valid token pointer variable.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CO_E_NOTINITIALIZED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller is not in an initialized apartment.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoGetCurrentLogicalThreadId">
    <summary>Returns the logical thread identifier of the current physical thread.</summary>
    <param name="pguid">A pointer to a GUID that contains the logical thread ID on return.</param>
    <returns>
      <para>This function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The logical thread ID was retrieved successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>An invalid pointer was passed in for the <i>pguid</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A memory allocation failed during the operation of the function.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoGetCurrentProcess">
    <summary>Returns a value that is unique to the current thread. <b>CoGetCurrentProcess</b> can be used to avoid thread ID reuse problems.</summary>
    <returns>The function returns the unique identifier of the current thread.</returns>
  </member>
  <member name="Windows.CoGetDefaultContext">
    <summary>Retrieves a reference to the default context of the specified apartment.</summary>
    <param name="aptType">
      <para>The apartment type of the default context that is being requested. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>APTTYPE_CURRENT</b>
                </term>
              </listheader>
              <listheader>
                <term>-1</term>
              </listheader>
            </list>
          </description>
          <description>The caller's apartment.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>APTTYPE_MTA</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The multithreaded apartment for the current process.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>APTTYPE_NA</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The neutral apartment for the current process.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>APTTYPE_MAINSTA</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The main single-threaded apartment for the current process.</description>
        </listheader>
      </list> <para>The <see cref="APTTYPE" /> value APTTYPE_STA (0) is not supported. A process can contain multiple single-threaded apartments, each with its own context, so <b>CoGetDefaultContext</b> could not determine which STA is of interest. Therefore, this function returns E_INVALIDARG if APTTYPE_STA is specified.</para></param>
    <param name="riid">The interface identifier (IID) of the interface that is being requested on the default context. Typically, the caller requests IID_IObjectContext. The default context does not support all of the normal object context interfaces.</param>
    <param name="ppv">A reference to the interface specified by riid on the default context. If the object's component is non-configured, (that is, the object's component has not been imported into a COM+ application), or if the <b>CoGetDefaultContext</b> function is called from a constructor or an <see cref="IUnknown" /> method, this parameter is set to a <b>NULL</b> pointer.</param>
    <returns>
      <para>This method can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The method completed successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CO_E_NOTINITIALIZED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The caller is not in an initialized apartment.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOINTERFACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The object context does not support the interface specified by <i>riid</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoGetMalloc">
    <summary>Retrieves a pointer to the default OLE task memory allocator (which supports the system implementation of the <see cref="IMalloc" /> interface) so applications can call its methods to manage memory.</summary>
    <param name="dwMemContext">This parameter must be 1.</param>
    <param name="ppMalloc">The address of an <b>IMalloc*</b> pointer variable that receives the interface pointer to the memory allocator.</param>
    <returns>This function can return the standard return values S_OK, E_INVALIDARG, and E_OUTOFMEMORY.</returns>
  </member>
  <member name="Windows.CoGetMarshalSizeMax">
    <summary>Returns an upper bound on the number of bytes needed to marshal the specified interface pointer to the specified object.</summary>
    <param name="pulSize">A pointer to the upper-bound value on the size, in bytes, of the data packet to be written to the marshaling stream. If this parameter is 0, the size of the packet is unknown.</param>
    <param name="riid">A reference to the identifier of the interface whose pointer is to be marshaled. This interface must be derived from the <see cref="IUnknown" /> interface.</param>
    <param name="pUnk">A pointer to the interface to be marshaled. This interface must be derived from the <see cref="IUnknown" /> interface.</param>
    <param name="dwDestContext">The destination context where the specified interface is to be unmarshaled. Values for <i>dwDestContext</i> come from the enumeration <see cref="MSHCTX" />.</param>
    <param name="pvDestContext">This parameter is reserved and must be <b>NULL</b>.</param>
    <param name="mshlflags">Indicates whether the data to be marshaled is to be transmitted back to the client process the normal case or written to a global table, where it can be retrieved by multiple clients. Values come from the enumeration <see cref="MSHLFLAGS" />.</param>
    <returns>
      <para>This function can return the standard return value E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The upper bound was returned successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CO_E_NOTINITIALIZED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Before this function can be called, either the <see cref="CoInitialize" /> or <see cref="OleInitialize" /> function must be called.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoGetObjectContext">
    <summary>Returns the context for the current object.</summary>
    <param name="riid">
      <para>A reference to the ID of an interface that is implemented on the context object.</para>
      <para>For objects running within COM applications, IID_IComThreadingInfo, IID_IContext, and IID_IContextCallback are available.</para>
      <para>For objects running within COM+ applications, IID_IObjectContext, IID_IObjectContextActivity IID_IObjectContextInfo, and IID_IContextState are available.</para>
    </param>
    <param name="ppv">The address of a pointer to the interface specified by <i>riid</i> on the context object.</param>
    <returns>
      <para>This function can return the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The object context was successfully retrieved.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_NOINTERFACE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The requested interface was not available.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CO_E_NOTINITIALIZED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Before this function can be called, the <see cref="CoInitializeEx" /> function must be called on the current thread.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoGetPSClsid">
    <summary>Returns the CLSID of the DLL that implements the proxy and stub for the specified interface.</summary>
    <param name="riid">The interface whose proxy/stub CLSID is to be returned.</param>
    <param name="pClsid">Specifies where to store the proxy/stub CLSID for the interface specified by <i>riid</i>.</param>
    <returns>
      <para>This function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The proxy/stub CLSID was successfully returned.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One of the parameters is invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is insufficient memory to complete this operation.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoGetStandardMarshal">
    <summary>Creates a default, or standard, marshaling object in either the client process or the server process, depending on the caller, and returns a pointer to that object's <see cref="IMarshal" /> implementation.</summary>
    <param name="riid">A reference to the identifier of the interface whose pointer is to be marshaled. This interface must be derived from the <see cref="IUnknown" /> interface.</param>
    <param name="pUnk">A pointer to the interface to be marshaled.</param>
    <param name="dwDestContext">The destination context where the specified interface is to be unmarshaled. Values come from the enumeration <see cref="MSHCTX" />. Unmarshaling can occur either in another apartment of the current process (MSHCTX_INPROC) or in another process on the same computer as the current process (MSHCTX_LOCAL).</param>
    <param name="pvDestContext">This parameter is reserved and must be <b>NULL</b>.</param>
    <param name="mshlflags">Indicates whether the data to be marshaled is to be transmitted back to the client process (the normal case) or written to a global table where it can be retrieved by multiple clients. Values come from the <see cref="MSHLFLAGS" /> enumeration.</param>
    <param name="ppMarshal">The address of <b>IMarshal*</b> pointer variable that receives the interface pointer to the standard marshaler.</param>
    <returns>
      <para>This function can return the standard return values E_FAIL, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="IMarshal" /> instance was returned successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CO_E_NOTINITIALIZED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Before this function can be called, the <see cref="CoInitialize" /> or <see cref="OleInitialize" /> function must be called on the current thread.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoGetStdMarshalEx">
    <summary>Creates an aggregated standard marshaler for use with lightweight client-side handlers.</summary>
    <param name="pUnkOuter">A pointer to the controlling <see cref="IUnknown" />.</param>
    <param name="smexflags">
      <para>One of two values indicating whether the aggregated standard marshaler is on the client side or the server side. These flags are defined in the <b>STDMSHLFLAGS</b> enumeration.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMEXF_SERVER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01</term>
              </listheader>
            </list>
          </description>
          <description>Indicates a server-side aggregated standard marshaler.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SMEXF_HANDLER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0</term>
              </listheader>
            </list>
          </description>
          <description>Indicates a client-side (handler) aggregated standard marshaler.</description>
        </listheader>
      </list>
    </param>
    <param name="ppUnkInner">On successful return, address of pointer to the <a href="https://docs.microsoft.com//windows/desktop/com/iunknown-and-interface-inheritance">IUnknown</a> interface on the newly-created aggregated standard marshaler. If an error occurs, this value is <b>NULL</b>.</param>
    <returns>This function returns S_OK.</returns>
  </member>
  <member name="Windows.CoGetTreatAsClass">
    <summary>Returns the CLSID of an object that can emulate the specified object.</summary>
    <param name="clsidOld">The CLSID of the object that can be emulated (treated as) an object with a different CLSID.</param>
    <param name="pClsidNew">A pointer to where the CLSID that can emulate <i>clsidOld</i> objects is retrieved. This parameter cannot be <b>NULL</b>. If there is no emulation information for <i>clsidOld</i> objects, the <i>clsidOld</i> parameter is supplied.</param>
    <returns>
      <para>This function can return the following values, as well as any error values returned by the <see cref="CLSIDFromString" /> function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A new CLSID was successfully returned.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is no emulation information for the <i>clsidOld</i> parameter, so the <i>pClsidNew</i> parameter is set to <i>clsidOld</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REGDB_E_READREGDB</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was an error reading the registry.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoImpersonateClient">
    <summary>Enables the server to impersonate the client of the current call for the duration of the call.</summary>
    <returns>This function supports the standard return values, including S_OK.</returns>
  </member>
  <member name="Windows.CoIncrementMTAUsage">
    <summary>Keeps MTA support active when no MTA threads are running.</summary>
    <param name="pCookie">Address of a <b>PVOID</b> variable that receives the cookie for the <see cref="CoDecrementMTAUsage" /> function, or <b>NULL</b> if the call fails.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.CoInitializeEx">
    <summary>
      <para>Initializes the COM library for use by the calling thread, sets the thread's concurrency model, and creates a new apartment for the thread if one is required.</para>
      <para>You should call Windows.Foundation.Initialize to initialize the thread instead of <b>CoInitializeEx</b> if you want to use the Windows Runtime APIs or if you want to use both COM and Windows Runtime components. Windows.Foundation.Initialize is sufficient to use for COM components.</para>
    </summary>
    <param name="pvReserved">This parameter is reserved and must be <b>NULL</b>.</param>
    <param name="dwCoInit">The concurrency model and initialization options for the thread. Values for this parameter are taken from the <see cref="COINIT" /> enumeration. Any combination of values from <b>COINIT</b> can be used, except that the COINIT_APARTMENTTHREADED and COINIT_MULTITHREADED flags cannot both be set. The default is COINIT_MULTITHREADED.</param>
    <returns>
      <para>This function can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The COM library was initialized successfully on this thread.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The COM library is already initialized on this thread.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RPC_E_CHANGED_MODE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A previous call to <see cref="CoInitializeEx" /> specified the concurrency model for this thread as multithread apartment (MTA). This could also indicate that a change from neutral-threaded apartment to single-threaded apartment has occurred.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoInitializeSecurity">
    <summary>Registers security and sets the default security values for the process.</summary>
    <param name="pSecDesc">The access permissions that a server will use to receive calls. This parameter is used by COM only when a server calls <b>CoInitializeSecurity</b>. Its value is a pointer to one of three types: an AppID, an <see cref="IAccessControl" /> object, or a <see cref="SECURITY_DESCRIPTOR" />, in absolute format. See the Remarks section for more information.</param>
    <param name="cAuthSvc">The count of entries in the <i>asAuthSvc</i> parameter. This parameter is used by COM only when a server calls <b>CoInitializeSecurity</b>. If this parameter is 0, no authentication services will be registered and the server cannot receive secure calls. A value of -1 tells COM to choose which authentication services to register, and if this is the case, the <i>asAuthSvc</i> parameter must be <b>NULL</b>. However, Schannel will never be chosen as an authentication service by the server if this parameter is -1.</param>
    <param name="asAuthSvc">An array of authentication services that a server is willing to use to receive a call. This parameter is used by COM only when a server calls <b>CoInitializeSecurity</b>. For more information, see <see cref="SOLE_AUTHENTICATION_SERVICE" />.</param>
    <param name="pReserved1">This parameter is reserved and must be <b>NULL</b>.</param>
    <param name="dwAuthnLevel">The default authentication level for the process. Both servers and clients use this parameter when they call <b>CoInitializeSecurity</b>. COM will fail calls that arrive with a lower authentication level. By default, all proxies will use at least this authentication level. This value should contain one of the <a href="https://docs.microsoft.com//windows/desktop/com/com-authentication-level-constants">authentication level constants</a>. By default, all calls to <see cref="IUnknown" /> are made at this level.</param>
    <param name="dwImpLevel">
      <para>The default impersonation level for proxies. The value of this parameter is used only when the process is a client. It should be a value from the <a href="https://docs.microsoft.com//windows/desktop/com/com-impersonation-level-constants">impersonation level constants</a>, except for RPC_C_IMP_LEVEL_DEFAULT, which is not for use with <b>CoInitializeSecurity</b>.</para>
      <para>Outgoing calls from the client always use the impersonation level as specified. (It is not negotiated.) Incoming calls to the client can be at any impersonation level. By default, all <see cref="IUnknown" /> calls are made with this impersonation level, so even security-aware applications should set this level carefully. To determine which impersonation levels each authentication service supports, see the description of the authentication services in <a href="https://docs.microsoft.com//windows/desktop/com/com-and-security-packages">COM and Security Packages</a>. For more information about impersonation levels, see <a href="https://docs.microsoft.com//windows/desktop/com/impersonation">Impersonation</a>.</para>
    </param>
    <param name="pAuthList">A pointer to <see cref="SOLE_AUTHENTICATION_LIST" />, which is an array of <see cref="SOLE_AUTHENTICATION_INFO" /> structures. This list indicates the information for each authentication service that a client can use to call a server. This parameter is used by COM only when a client calls <b>CoInitializeSecurity</b>.</param>
    <param name="dwCapabilities">Additional capabilities of the client or server, specified by setting one or more <see cref="EOLE_AUTHENTICATION_CAPABILITIES" /> values. Some of these value cannot be used simultaneously, and some cannot be set when particular authentication services are being used. For more information about these flags, see the Remarks section.</param>
    <param name="pReserved3">This parameter is reserved and must be <b>NULL</b>.</param>
    <returns>
      <para>This function can return the standard return value E_INVALIDARG, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates success.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RPC_E_TOO_LATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="CoInitializeSecurity" /> has already been called.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RPC_E_NO_GOOD_SECURITY_PACKAGES</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>asAuthSvc</i> parameter was not <b>NULL</b>, and none of the authentication services in the list could be registered. Check the results saved in <i>asAuthSvc</i> for authentication service–specific error codes.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUT_OF_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Out of memory.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoInvalidateRemoteMachineBindings">
    <summary>
      <para>Tells the <a href="https://docs.microsoft.com//windows/desktop/Services/service-control-manager">service control manager</a> to flush any cached RPC binding handles for the specified computer.</para>
      <para>Only administrators may call this function.</para>
    </summary>
    <param name="pszMachineName">The computer name for which binding handles should be flushed, or an empty string to signify that all handles in the cache should be flushed.</param>
    <returns>
      <para>This function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates success.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CO_S_MACHINENAMENOTFOUND</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates that the specified computer name was not found or that the binding handle cache was empty, indicating that an empty string was passed instead of a specific computer name.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_ACCESSDENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates the caller was not an administrator for this computer.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates that a <b>NULL</b> value was passed for <i>pszMachineName</i>.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoIsHandlerConnected">
    <summary>Determines whether a remote object is connected to the corresponding in-process object.</summary>
    <param name="pUnk">A pointer to the controlling <see cref="IUnknown" /> interface on the remote object.</param>
    <returns>If the object is not remote or if it is remote and still connected, the return value is <b>TRUE</b>; otherwise, it is <b>FALSE</b>.</returns>
  </member>
  <member name="Windows.CoLockObjectExternal">
    <summary>Called either to lock an object to ensure that it stays in memory, or to release such a lock.</summary>
    <param name="pUnk">A pointer to the <see cref="IUnknown" /> interface on the object to be locked or unlocked.</param>
    <param name="fLock">Indicates whether the object is to be locked or released. If this parameter is <b>TRUE</b>, the object is kept in memory, independent of <b>AddRef</b>/<b>Release</b> operations, registrations, or revocations. If this parameter is <b>FALSE</b>, the lock previously set with a call to this function is released.</param>
    <param name="fLastUnlockReleases">
      <para>If the lock is the last reference that is supposed to keep an object alive, specify <b>TRUE</b> to release all pointers to the object (there may be other references that are not supposed to keep it alive). Otherwise, specify <b>FALSE</b>.</para>
      <para>If <i>fLock</i> is <b>TRUE</b>, this parameter is ignored.</para>
    </param>
    <returns>This function can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, E_UNEXPECTED, and S_OK.</returns>
  </member>
  <member name="Windows.CoMarshalHresult">
    <summary>Marshals an <b>HRESULT</b> to the specified stream, from which it can be unmarshaled using the <see cref="CoUnmarshalHresult" /> function.</summary>
    <param name="pstm">A pointer to the marshaling stream. See <see cref="IStream" />.</param>
    <param name="hresult">The <b>HRESULT</b> in the originating process.</param>
    <returns>
      <para>This function can return the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <b>HRESULT</b> was marshaled successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STG_E_INVALIDPOINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>A bad pointer was specified for <i>pstm</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STG_E_MEDIUMFULL</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The medium is full.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoMarshalInterface">
    <summary>Writes into a stream the data required to initialize a proxy object in some client process.</summary>
    <param name="pStm">A pointer to the stream to be used during marshaling. See <see cref="IStream" />.</param>
    <param name="riid">A reference to the identifier of the interface to be marshaled. This interface must be derived from the <see cref="IUnknown" /> interface.</param>
    <param name="pUnk">A pointer to the interface to be marshaled. This interface must be derived from the <see cref="IUnknown" /> interface.</param>
    <param name="dwDestContext">The destination context where the specified interface is to be unmarshaled. The possible values come from the enumeration <see cref="MSHCTX" />. Currently, unmarshaling can occur in another apartment of the current process (MSHCTX_INPROC), in another process on the same computer as the current process (MSHCTX_LOCAL), or in a process on a different computer (MSHCTX_DIFFERENTMACHINE).</param>
    <param name="pvDestContext">This parameter is reserved and must be <b>NULL</b>.</param>
    <param name="mshlflags">The flags that specify whether the data to be marshaled is to be transmitted back to the client process (the typical case) or written to a global table, where it can be retrieved by multiple clients. The possible values come from the <see cref="MSHLFLAGS" /> enumeration.</param>
    <returns>
      <para>This function can return the standard return values E_FAIL, E_OUTOFMEMORY, and E_UNEXPECTED, the stream-access error values returned by <see cref="IStream" />, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <b>HRESULT</b> was marshaled successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CO_E_NOTINITIALIZED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="CoInitialize" /> or <see cref="OleInitialize" /> function was not called on the current thread before this function was called.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoMarshalInterThreadInterfaceInStream">
    <summary>Marshals an interface pointer from one thread to another thread in the same process.</summary>
    <param name="riid">A reference to the identifier of the interface to be marshaled.</param>
    <param name="pUnk">A pointer to the interface to be marshaled, which must be derived from <see cref="IUnknown" />. This parameter can be <b>NULL</b>.</param>
    <param name="ppStm">The address of the <see cref="IStream" />* pointer variable that receives the interface pointer to the stream that contains the marshaled interface.</param>
    <returns>This function can return the standard return values E_OUTOFMEMORY and S_OK.</returns>
  </member>
  <member name="Windows.CoQueryAuthenticationServices">
    <summary>Retrieves a list of the authentication services registered when the process called <see cref="CoInitializeSecurity" />.</summary>
    <param name="pcAuthSvc">A pointer to a variable that receives the number of entries returned in the <i>asAuthSvc</i> array.</param>
    <param name="asAuthSvc">A pointer to an array of <see cref="SOLE_AUTHENTICATION_SERVICE" /> structures. The list is allocated through a call to the <see cref="CoTaskMemAlloc" /> function. The caller must free the list when finished with it by calling the <see cref="CoTaskMemFree" /> function.</param>
    <returns>This function can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, and S_OK.</returns>
  </member>
  <member name="Windows.CoQueryClientBlanket">
    <summary>Called by the server to find out about the client that invoked the method executing on the current thread. This is a helper function for <see cref="IServerSecurity.QueryBlanket" />.</summary>
    <param name="pAuthnSvc">A pointer to a variable that receives the current authentication service. This will be a single value taken from the <a href="https://docs.microsoft.com//windows/desktop/com/com-authentication-service-constants">authentication service constants</a>. If the caller specifies <b>NULL</b>, the current authentication service is not retrieved.</param>
    <param name="pAuthzSvc">A pointer to a variable that receives the current authorization service. This will be a single value taken from the <a href="https://docs.microsoft.com//windows/desktop/com/com-authorization-constants">authorization constants</a>. If the caller specifies <b>NULL</b>, the current authorization service is not retrieved.</param>
    <param name="pServerPrincName">The current principal name. The string will be allocated by the callee using <see cref="CoTaskMemAlloc" />, and must be freed by the caller using <see cref="CoTaskMemFree" />. By default, Schannel principal names will be in the msstd form. The fullsic form will be returned if EOAC_MAKE_FULLSIC is specified in the <i>pCapabilities</i> parameter. For more information about the msstd and fullsic forms, see <a href="https://docs.microsoft.com//windows/desktop/Rpc/principal-names">Principal Names</a>. If the caller specifies <b>NULL</b>, the current principal name is not retrieved.</param>
    <param name="pAuthnLevel">A pointer to a variable that receives the current authentication level. This will be a single value taken from the <a href="https://docs.microsoft.com//windows/desktop/com/com-authentication-level-constants">authentication level constants</a>. If the caller specifies <b>NULL</b>, the current authentication level is not retrieved.</param>
    <param name="pImpLevel">This parameter must be <b>NULL</b>.</param>
    <param name="pPrivs">A pointer to a handle that receives the privilege information for the client application. The format of the structure that the handle refers to depends on the authentication service. The application should not write or free the memory. The information is valid only for the duration of the current call. For NTLMSSP and Kerberos, this is a string identifying the client principal. For Schannel, this is a <see cref="CERT_CONTEXT" /> structure that represents the client's certificate. If the client has no certificate, <b>NULL</b> is returned. If the caller specifies <b>NULL</b>, the current privilege information is not retrieved. See <a href="https://docs.microsoft.com//windows/desktop/Rpc/rpc-authz-handle">RPC_AUTHZ_HANDLE</a>.</param>
    <param name="pCapabilities">A pointer to return flags indicating capabilities of the call. To request that the principal name be returned in fullsic form if Schannel is the authentication service, the caller can set the EOAC_MAKE_FULLSIC flag in this parameter. If the caller specifies <b>NULL</b>, the current capabilities are not retrieved.</param>
    <returns>This function can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, and S_OK.</returns>
  </member>
  <member name="Windows.CoQueryProxyBlanket">
    <summary>Retrieves the authentication information the client uses to make calls on the specified proxy. This is a helper function for <see cref="IClientSecurity.QueryBlanket" />.</summary>
    <param name="pProxy">A pointer indicating the proxy to query. This parameter cannot be <b>NULL</b>. For more information, see the Remarks section.</param>
    <param name="pwAuthnSvc">A pointer to a variable that receives the current authentication service. This will be a single value taken from the <a href="https://docs.microsoft.com//windows/desktop/com/com-authentication-service-constants">authentication service constants</a>. This parameter cannot be <b>NULL</b>.</param>
    <param name="pAuthzSvc">A pointer to a variable that receives the current authorization service. This will be a single value taken from the <a href="https://docs.microsoft.com//windows/desktop/com/com-authorization-constants">authorization constants</a>. If the caller specifies <b>NULL</b>, the current authorization service is not retrieved.</param>
    <param name="pServerPrincName">The current principal name. The string will be allocated by the callee using <see cref="CoTaskMemAlloc" />, and must be freed by the caller using <see cref="CoTaskMemFree" />. The EOAC_MAKE_FULLSIC flag is not accepted in the <i>pCapabilities</i> parameter. For more information about the msstd and fullsic forms, see <a href="https://docs.microsoft.com//windows/desktop/Rpc/principal-names">Principal Names</a>. If the caller specifies <b>NULL</b>, the current principal name is not retrieved.</param>
    <param name="pAuthnLevel">A pointer to a variable that receives the current authentication level. This will be a single value taken from the <a href="https://docs.microsoft.com//windows/desktop/com/com-authentication-level-constants">authentication level constants</a>. If the caller specifies <b>NULL</b>, the current authentication level is not retrieved.</param>
    <param name="pImpLevel">A pointer to a variable that receives the current impersonation level. This will be a single value taken from the <a href="https://docs.microsoft.com//windows/desktop/com/com-impersonation-level-constants">impersonation level constants</a>. If the caller specifies <b>NULL</b>, the current impersonation level is not retrieved.</param>
    <param name="pAuthInfo">A pointer to a handle that receives the identity of the client that was passed to the last <see cref="IClientSecurity.SetBlanket" /> call (or the default value). Default values are only valid until the proxy is released. If the caller specifies <b>NULL</b>, the client identity is not retrieved. The format of the structure that the handle refers to depends on the authentication service. The application should not write or free the memory. For NTLMSSP and Kerberos, if the client specified a structure in the <i>pAuthInfo</i> parameter to <see cref="CoInitializeSecurity" />, that value is returned. For Schannel, if a certificate for the client could be retrieved from the certificate manager, that value is returned here. Otherwise, <b>NULL</b> is returned. See <a href="https://docs.microsoft.com//windows/desktop/Rpc/rpc-auth-identity-handle">RPC_AUTH_IDENTITY_HANDLE</a>.</param>
    <param name="pCapabilites">A pointer to a variable that receives the capabilities of the proxy. If the caller specifies <b>NULL</b>, the current capability flags are not retrieved.</param>
    <returns>This function can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, and S_OK.</returns>
  </member>
  <member name="Windows.CoRegisterActivationFilter">
    <summary>Registers a process-wide filter to process activation requests.</summary>
    <param name="pActivationFilter">Pointer to the filter to register.</param>
    <returns>If this function succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="Windows.CoRegisterClassObject">
    <summary>Registers an EXE class object with OLE so other applications can connect to it.</summary>
    <param name="rclsid">The CLSID to be registered.</param>
    <param name="pUnk">A pointer to the <see cref="IUnknown" /> interface on the class object whose availability is being published.</param>
    <param name="dwClsContext">The context in which the executable code is to be run. For information on these context values, see the <see cref="CLSCTX" /> enumeration.</param>
    <param name="flags">Indicates how connections are made to the class object. For information on these flags, see the <see cref="REGCLS" /> enumeration.</param>
    <param name="lpdwRegister">A pointer to a value that identifies the class object registered; later used by the <see cref="CoRevokeClassObject" /> function to revoke the registration.</param>
    <returns>
      <para>This function can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The class object was registered successfully.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoRegisterDeviceCatalog">
    <summary>Enables a downloaded DLL to register its Media Foundation Transform (MFT) device catalog interfaces within its running process so that the marshaling code will be able to marshal those interfaces.</summary>
    <param name="deviceInstanceId">A null-terminated string containing the instance identifier of the device to register.</param>
    <param name="cookie">Returns an instance of <b>CO_DEVICE_CATALOG_COOKIE</b>. You can use this value to revoke the device catalog using <see cref="CoRevokeDeviceCatalog" />.</param>
    <returns>This function can return the standard return values <b>E_INVALIDARG</b>, <b>E_OUTOFMEMORY</b>, and <b>S_OK</b>.</returns>
  </member>
  <member name="Windows.CoRegisterPSClsid">
    <summary>Enables a downloaded DLL to register its custom interfaces within its running process so that the marshaling code will be able to marshal those interfaces.</summary>
    <param name="riid">A pointer to the IID of the interface to be registered.</param>
    <param name="rclsid">A pointer to the CLSID of the DLL that contains the proxy/stub code for the custom interface specified by <i>riid</i>.</param>
    <returns>This function can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, and S_OK.</returns>
  </member>
  <member name="Windows.CoRegisterSurrogate">
    <summary>Registers the surrogate process through its <see cref="ISurrogate" /> interface pointer.</summary>
    <param name="pSurrogate">A pointer to the <see cref="ISurrogate" /> interface on the surrogate process to be registered.</param>
    <returns>This function returns S_OK to indicate that the surrogate process was registered successfully.</returns>
  </member>
  <member name="Windows.CoReleaseServerProcess">
    <summary>Decrements the global per-process reference count.</summary>
    <returns>If the server application should initiate its cleanup, the function returns 0; otherwise, the function returns a nonzero value.</returns>
  </member>
  <member name="Windows.CoResumeClassObjects">
    <summary>Called by a server that can register multiple class objects to inform the SCM about all registered classes, and permits activation requests for those class objects.</summary>
    <returns>This function returns S_OK to indicate that the CLSID was retrieved successfully.</returns>
  </member>
  <member name="Windows.CoRevertToSelf">
    <summary>Restores the authentication information on a thread of execution.</summary>
    <returns>This function supports the standard return values, including S_OK to indicate success.</returns>
  </member>
  <member name="Windows.CoRevokeClassObject">
    <summary>Informs OLE that a class object, previously registered with the <see cref="CoRegisterClassObject" /> function, is no longer available for use.</summary>
    <param name="dwRegister">A token previously returned from the <see cref="CoRegisterClassObject" /> function.</param>
    <returns>
      <para>This function can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The class object was revoked successfully.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoRevokeDeviceCatalog">
    <summary>Revokes the registration of a device catalog performed by a previous call to <see cref="CoRegisterDeviceCatalog" />.</summary>
    <param name="cookie">The <b>CO_DEVICE_CATALOG_COOKIE</b> that was returned by <b>CoRegisterDeviceCatalog</b>.</param>
    <returns>This function can return the standard return values <b>E_INVALIDARG</b>, <b>E_OUTOFMEMORY</b>, and <b>S_OK</b>.</returns>
  </member>
  <member name="Windows.CoSetCancelObject">
    <summary>Sets (registers) or resets (unregisters) a cancel object for use during subsequent cancel operations on the current thread.</summary>
    <param name="pUnk">Pointer to the <see cref="IUnknown" /> interface on the cancel object to be set or reset on the current thread. If this parameter is <b>NULL</b>, the topmost cancel object is reset.</param>
    <returns>
      <para>This function can return the standard return values E_FAIL, E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The cancel object was successfully set or reset.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_ACCESSDENIED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The cancel object cannot be set or reset at this time because of a block on cancel operations.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoSetProxyBlanket">
    <summary>Sets the authentication information that will be used to make calls on the specified proxy. This is a helper function for <see cref="IClientSecurity.SetBlanket" />.</summary>
    <param name="pProxy">The proxy to be set.</param>
    <param name="dwAuthnSvc">The authentication service to be used. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/com/com-authentication-service-constants">Authentication Service Constants</a>. Use RPC_C_AUTHN_NONE if no authentication is required. If RPC_C_AUTHN_DEFAULT is specified, DCOM will pick an authentication service following its normal security blanket negotiation algorithm.</param>
    <param name="dwAuthzSvc">The authorization service to be used. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/com/com-authorization-constants">Authorization Constants</a>. If RPC_C_AUTHZ_DEFAULT is specified, DCOM will pick an authorization service following its normal security blanket negotiation algorithm. RPC_C_AUTHZ_NONE should be used as the authorization service if NTLMSSP, Kerberos, or Schannel is used as the authentication service.</param>
    <param name="pServerPrincName">
      <para>The server principal name to be used with the authentication service. If COLE_DEFAULT_PRINCIPAL is specified, DCOM will pick a principal name using its security blanket negotiation algorithm. If Kerberos is used as the authentication service, this value must not be <b>NULL</b>. It must be the correct principal name of the server or the call will fail.</para>
      <para>If Schannel is used as the authentication service, this value must be one of the msstd or fullsic forms described in <a href="https://docs.microsoft.com//windows/desktop/Rpc/principal-names">Principal Names</a>, or <b>NULL</b> if you do not want mutual authentication.</para>
      <para>Generally, specifying <b>NULL</b> will not reset the server principal name on the proxy; rather, the previous setting will be retained. You must be careful when using <b>NULL</b> as <i>pServerPrincName</i> when selecting a different authentication service for the proxy, because there is no guarantee that the previously set principal name would be valid for the newly selected authentication service.</para>
    </param>
    <param name="dwAuthnLevel">The authentication level to be used. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/com/com-authentication-level-constants">Authentication Level Constants</a>. If RPC_C_AUTHN_LEVEL_DEFAULT is specified, DCOM will pick an authentication level following its normal security blanket negotiation algorithm. If this value is none, the authentication service must also be none.</param>
    <param name="dwImpLevel">The impersonation level to be used. For a list of possible values, see <a href="https://docs.microsoft.com//windows/desktop/com/com-impersonation-level-constants">Impersonation Level Constants</a>. If RPC_C_IMP_LEVEL_DEFAULT is specified, DCOM will pick an impersonation level following its normal security blanket negotiation algorithm. If NTLMSSP is the authentication service, this value must be RPC_C_IMP_LEVEL_IMPERSONATE or RPC_C_IMP_LEVEL_IDENTIFY. NTLMSSP also supports delegate-level impersonation (RPC_C_IMP_LEVEL_DELEGATE) on the same computer. If Schannel is the authentication service, this parameter must be RPC_C_IMP_LEVEL_IMPERSONATE.</param>
    <param name="pAuthInfo">
      <para>A pointer to an <b>RPC_AUTH_IDENTITY_HANDLE</b> value that establishes the identity of the client. The format of the structure referred to by the handle depends on the provider of the authentication service.</para>
      <para>For calls on the same computer, RPC logs on the user with the supplied credentials and uses the resulting token for the method call.</para>
      <para>For NTLMSSP or Kerberos, the structure is a <see cref="SEC_WINNT_AUTH_IDENTITY" /> or <see cref="SEC_WINNT_AUTH_IDENTITY_EX" /> structure. The client can discard <i>pAuthInfo</i> after calling the API. RPC does not keep a copy of the <i>pAuthInfo</i> pointer, and the client cannot retrieve it later in the <see cref="CoQueryProxyBlanket" /> method.</para>
      <para>If this parameter is <b>NULL</b>, DCOM uses the current proxy identity (which is either the process token or the impersonation token). If the handle refers to a structure, that identity is used.</para>
      <para>For Schannel, this parameter must be either a pointer to a <see cref="CERT_CONTEXT" /> structure that contains the client's X.509 certificate or is <b>NULL</b> if the client wishes to make an anonymous connection to the server. If a certificate is specified, the caller must not free it as long as any proxy to the object exists in the current apartment.</para>
      <para>For Snego, this member is either <b>NULL</b>, points to a <see cref="SEC_WINNT_AUTH_IDENTITY" /> structure, or points to a <see cref="SEC_WINNT_AUTH_IDENTITY_EX" /> structure. If it is <b>NULL</b>, Snego will pick a list of authentication services based on those available on the client computer. If it points to a <b>SEC_WINNT_AUTH_IDENTITY_EX</b> structure, the structure's <b>PackageList</b> member must point to a string containing a comma-separated list of authentication service names and the <b>PackageListLength</b> member must give the number of bytes in the <b>PackageList</b> string. If <b>PackageList</b> is <b>NULL</b>, all calls using Snego will fail.</para>
      <para>If COLE_DEFAULT_AUTHINFO is specified for this parameter, DCOM will pick the authentication information following its normal security blanket negotiation algorithm.</para>
      <para>
        <b>CoSetProxyBlanket</b> will fail if <i>pAuthInfo</i> is set and one of the cloaking flags is set in the <i>dwCapabilities</i> parameter.</para>
    </param>
    <param name="dwCapabilities">The capabilities of this proxy. For a list of possible values, see the <see cref="EOLE_AUTHENTICATION_CAPABILITIES" /> enumeration. The only flags that can be set through this function are EOAC_MUTUAL_AUTH, EOAC_STATIC_CLOAKING, EOAC_DYNAMIC_CLOAKING, EOAC_ANY_AUTHORITY (this flag is deprecated), EOAC_MAKE_FULLSIC, and EOAC_DEFAULT. Either EOAC_STATIC_CLOAKING or EOAC_DYNAMIC_CLOAKING can be set if <i>pAuthInfo</i> is not set and Schannel is not the authentication service. (See <a href="https://docs.microsoft.com//windows/desktop/com/cloaking">Cloaking</a> for more information.) If any capability flags other than those mentioned here are set, <b>CoSetProxyBlanket</b> will fail.</param>
    <returns>
      <para>This function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>One or more arguments is invalid.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoSuspendClassObjects">
    <summary>Prevents any new activation requests from the SCM on all class objects registered within the process.</summary>
    <returns>This function returns S_OK to indicate that the activation of class objects was successfully suspended.</returns>
  </member>
  <member name="Windows.CoSwitchCallContext">
    <summary>Switches the call context object used by <see cref="CoGetCallContext" />.</summary>
    <param name="pNewObject">A pointer to an interface on the new call context object. COM stores this pointer without adding a reference to the pointer until <b>CoSwitchCallContext</b> is called with another object. This parameter may be <b>NULL</b> if you are calling <b>CoSwitchCallContext</b> to switch back to the original call context but there was no original call context.</param>
    <param name="ppOldObject">The address of pointer variable that receives a pointer to the call context object of the call currently in progress. This value is returned so that the original call context can be restored by the custom marshaller. The returned pointer will be <b>NULL</b> if there was no call in progress.</param>
    <returns>
      <para>This function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function was successful.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUT_OF_MEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Out of memory.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoTaskMemAlloc">
    <summary>Allocates a block of task memory in the same way that <see cref="IMalloc.Alloc" /> does.</summary>
    <param name="cb">The size of the memory block to be allocated, in bytes.</param>
    <returns>If the function succeeds, it returns the allocated memory block. Otherwise, it returns <b>NULL</b>.</returns>
  </member>
  <member name="Windows.CoTaskMemFree">
    <summary>Frees a block of task memory previously allocated through a call to the <see cref="CoTaskMemAlloc" /> or <see cref="CoTaskMemRealloc" /> function.</summary>
    <param name="pv">A pointer to the memory block to be freed. If this parameter is <b>NULL</b>, the function has no effect.</param>
  </member>
  <member name="Windows.CoTaskMemRealloc">
    <summary>Changes the size of a previously allocated block of task memory.</summary>
    <param name="pv">A pointer to the memory block to be reallocated. This parameter can be <b>NULL</b>, as discussed in Remarks.</param>
    <param name="cb">The size of the memory block to be reallocated, in bytes. This parameter can be 0, as discussed in Remarks.</param>
    <returns>If the function succeeds, it returns the reallocated memory block. Otherwise, it returns <b>NULL</b>.</returns>
  </member>
  <member name="Windows.CoTestCancel">
    <summary>Determines whether the call being executed on the server has been canceled by the client.</summary>
    <returns>
      <para>This function can return the standard return values E_FAIL, E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RPC_S_CALLPENDING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The call is still pending and has not yet been canceled by the client.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RPC_E_CALL_CANCELED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The call has been canceled by the client.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoUninitialize">
    <summary>Closes the COM library on the current thread, unloads all DLLs loaded by the thread, frees any other resources that the thread maintains, and forces all RPC connections on the thread to close.</summary>
  </member>
  <member name="Windows.CoUnmarshalHresult">
    <summary>Unmarshals an <b>HRESULT</b> type from the specified stream.</summary>
    <param name="pstm">A pointer to the stream from which the <b>HRESULT</b> is to be unmarshaled.</param>
    <param name="phresult">A pointer to the unmarshaled <b>HRESULT</b>.</param>
    <returns>
      <para>This function can return the standard return values E_OUTOFMEMORY and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <b>HRESULT</b> was unmarshaled successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STG_E_INVALIDPOINTER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pStm</i> is an invalid pointer.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoWaitForMultipleHandles">
    <summary>Waits for specified handles to be signaled or for a specified timeout period to elapse.</summary>
    <param name="dwFlags">The wait options. Possible values are taken from the <see cref="COWAIT_FLAGS" /> enumeration.</param>
    <param name="dwTimeout">The timeout period, in milliseconds.</param>
    <param name="cHandles">The number of elements in the <i>pHandles</i> array.</param>
    <param name="pHandles">An array of handles.</param>
    <param name="lpdwindex">
      <para>A pointer to a variable that, when the returned status is S_OK, receives a value indicating the event that caused the function to return. This value is usually the index into <i>pHandles</i> for the handle that was signaled.</para>
      <para>If <i>pHandles</i> includes one or more handles to mutex objects, a value between WAIT_ABANDONED_0 and (WAIT_ABANDONED_0 + nCount - 1) indicates the index into <i>pHandles</i> for the mutex that was abandoned.</para>
      <para>If the <see cref="COWAIT_ALERTABLE" /> flag is set in <i>dwFlags</i>, a value of WAIT_IO_COMPLETION indicates the wait was ended by one or more user-mode asynchronous procedure calls (APC) queued to the thread.</para>
      <para>See <see cref="WaitForMultipleObjectsEx" /> for more information.</para>
    </param>
    <returns>
      <para>This function can return the following values.</para>
      <div>
        <b>Note</b>  The return value of <b>CoWaitForMultipleHandles</b> can be nondeterministic if the <see cref="COWAIT_ALERTABLE" /> flag is set in <i>dwFlags</i>, or if <i>pHandles</i> includes one or more handles to mutex objects. The recommended workaround is to call <see cref="SetLastError(ERROR_SUCCESS)" /> before <b>CoWaitForMultipleHandles</b>.</div>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The required handle or handles were signaled.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <i>pHandles</i> was <b>NULL</b>, <i>lpdwindex</i> was <b>NULL</b>, or <i>dwFlags</i> was not a value from the <see cref="COWAIT_FLAGS" /> enumeration.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RPC_E_NO_SYNC</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value of <i>pHandles</i> was 0.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>RPC_S_CALLPENDING</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The timeout period elapsed before the required handle or handles were signaled.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.CoWaitForMultipleObjects">
    <summary>A replacement for <see cref="CoWaitForMultipleHandles" />. This replacement API hides the options for <b>CoWaitForMultipleHandles</b> that are not supported in ASTA.</summary>
    <param name="dwFlags">
      <see cref="CWMO_FLAGS" /> flag controlling whether call/window message reentrancy is enabled from this wait. By default, neither COM calls nor window messages are dispatched from <b>CoWaitForMultipleObjects</b> in ASTA.</param>
    <param name="dwTimeout">The timeout in milliseconds of the wait.</param>
    <param name="cHandles">The length of the <i>pHandles</i> array. Must be &lt;= 56.</param>
    <param name="pHandles">An array of handles to waitable kernel objects.</param>
    <param name="lpdwindex">Receives the index of the handle that satisfied the wait.</param>
    <returns>Same return values as <see cref="CoWaitForMultipleHandles" />, except the ASTA-specific CO_E_NOTSUPPORTED cases instead return E_INVALIDARG from all apartment types.</returns>
  </member>
  <member name="Windows.CreateStreamOnHGlobal">
    <summary>
      <para>The <b>CreateStreamOnHGlobal</b> function creates a stream object that uses an HGLOBAL memory handle to store the stream contents. This object is the OLE-provided implementation of the <see cref="IStream" /> interface.</para>
      <para>The returned stream object supports both reading and writing, is not transacted, and does not support region locking. The object calls the <see cref="GlobalReAlloc" /> function to grow the memory block as required.</para>
      <div>
        <b>Tip</b>  Consider using the <see cref="SHCreateMemStream" /> function, which produces better performance, or for Windows Store apps, consider using <a href="https://docs.microsoft.com//uwp/api/windows.storage.streams.inmemoryrandomaccessstream">InMemoryRandomAccessStream</a>.</div>
    </summary>
    <param name="hGlobal">A memory handle allocated by the <see cref="GlobalAlloc" /> function, or if <b>NULL</b> a new handle is to be allocated instead. The handle must be allocated as moveable and nondiscardable.</param>
    <param name="fDeleteOnRelease">A value that indicates whether the underlying handle for this stream object should be automatically freed when the stream object is released. If set to <b>FALSE</b>, the caller must free the <i>hGlobal</i> after the final release. If set to <b>TRUE</b>, the final release will automatically free the underlying handle. See the Remarks for further discussion of the case where <i>fDeleteOnRelease</i> is <b>FALSE</b>.</param>
    <param name="ppstm">The address of<see cref="IStream" />* pointer variable that receives the interface pointer to the new stream object. Its value cannot be <b>NULL</b>.</param>
    <returns>This function supports the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following.</returns>
  </member>
  <member name="Windows.DllCanUnloadNow">
    <summary>
      <para>Determines whether the DLL that implements this function is in use. If not, the caller can unload the DLL from memory.</para>
      <para>OLE does not provide this function. DLLs that support the OLE Component Object Model (COM) should implement and export <b>DllCanUnloadNow</b>.</para>
    </summary>
    <returns>If the function succeeds, the return value is S_OK. Otherwise, it is S_FALSE.</returns>
  </member>
  <member name="Windows.DllGetClassObject">
    <summary>
      <para>Retrieves the class object from a DLL object handler or object application.</para>
      <para>OLE does not provide this function. DLLs that support the OLE Component Object Model (COM) must implement <b>DllGetClassObject</b> in OLE object handlers or DLL applications.</para>
    </summary>
    <param name="rclsid">The CLSID that will associate the correct data and code.</param>
    <param name="riid">A reference to the identifier of the interface that the caller is to use to communicate with the class object. Usually, this is IID_IClassFactory (defined in the OLE headers as the interface identifier for <see cref="IClassFactory" />).</param>
    <param name="ppv">The address of a pointer variable that receives the interface pointer requested in riid. Upon successful return, *<i>ppv</i> contains the requested interface pointer. If an error occurs, the interface pointer is <b>NULL</b>.</param>
    <returns>
      <para>This function can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, and E_UNEXPECTED, as well as the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The object was retrieved successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>CLASS_E_CLASSNOTAVAILABLE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The DLL does not support the class (object definition).</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.FreePropVariantArray">
    <summary>The <b>FreePropVariantArray</b> function calls<see cref="PropVariantClear" /> on each of the<see cref="PROPVARIANT" /> structures in the <i>rgvars</i> array to make the value zero for each of the members of the array.</summary>
    <param name="cVariants">Count of elements in the<see cref="PROPVARIANT" /> array (<i>rgvars</i>).</param>
    <param name="rgvars">Pointer to an initialized array of<see cref="PROPVARIANT" /> structures for which any deallocatable elements are to be freed. On exit, all zeroes are written to the<b>PROPVARIANT</b> structure (thus tagging them as VT_EMPTY).</param>
    <returns>This function returns HRESULT.</returns>
  </member>
  <member name="Windows.GetHGlobalFromStream">
    <summary>The <b>GetHGlobalFromStream</b> function retrieves the global memory handle to a stream that was created through a call to the<see cref="CreateStreamOnHGlobal" /> function.</summary>
    <param name="pstm">
      <see cref="IStream" /> pointer to the stream object previously created by a call to the<see cref="CreateStreamOnHGlobal" /> function.</param>
    <param name="phglobal">Pointer to the current memory handle used by the specified stream object.</param>
    <returns>This function returns HRESULT.</returns>
  </member>
  <member name="Windows.IIDFromString">
    <summary>Converts a string generated by the <see cref="StringFromIID" /> function back into the original interface identifier (IID).</summary>
    <param name="lpsz">A pointer to the string representation of the IID or <b>NULL</b>.</param>
    <param name="lpiid">A pointer to the requested IID on return.</param>
    <returns>This function can return the standard return values E_INVALIDARG, E_OUTOFMEMORY, and S_OK.</returns>
  </member>
  <member name="Windows.IID_PPV_ARGS">
    <summary>Used to retrieve an interface pointer, supplying the IID value of the requested interface automatically based on the type of the interface pointer used. This avoids a common coding error by checking the type of the value passed at compile time.</summary>
    <param name="ppType">An address of an interface pointer whose type <b>T</b> is used to determine the type of object being requested. The macro returns the interface pointer through this parameter.</param>
  </member>
  <member name="Windows.ProgIDFromCLSID">
    <summary>Retrieves the ProgID for a given CLSID.</summary>
    <param name="clsid">The CLSID for which the ProgID is to be requested.</param>
    <param name="lplpszProgID">The address of a pointer variable that receives the ProgID string. The string that represents <i>clsid</i> includes enclosing braces.</param>
    <returns>
      <para>This function can return the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The ProgID was returned successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REGDB_E_CLASSNOTREG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Class not registered in the registry.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>REGDB_E_READREGDB</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was an error reading from the registry.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.PropVariantClear">
    <summary>The <b>PropVariantClear</b> function frees all elements that can be freed in a given<see cref="PROPVARIANT" /> structure. For complex elements with known element pointers, the underlying elements are freed prior to freeing the containing element.</summary>
    <param name="pvar">A pointer to an initialized<see cref="PROPVARIANT" /> structure for which any deallocatable elements are to be freed. On return, all zeroes are written to the<b>PROPVARIANT</b> structure.</param>
    <returns>This function returns HRESULT.</returns>
  </member>
  <member name="Windows.PropVariantCopy">
    <summary>The<b>PropVariantCopy</b> function copies the contents of one<see cref="PROPVARIANT" /> structure to another.</summary>
    <param name="pvarDest">Pointer to an uninitialized<see cref="PROPVARIANT" /> structure that receives the copy.</param>
    <param name="pvarSrc">Pointer to the<see cref="PROPVARIANT" /> structure to be copied.</param>
    <returns>This function returns HRESULT.</returns>
  </member>
  <member name="Windows.RoGetAgileReference">
    <summary>Creates an agile reference for an object specified by the given interface.</summary>
    <param name="options">The registration options.</param>
    <param name="riid">The interface ID of the object for which an agile reference is being obtained.</param>
    <param name="pUnk">Pointer to the interface to be encapsulated in an agile reference. It must be the same type as <i>riid</i>. It may be a pointer to an in-process object or a pointer to a proxy of an object.</param>
    <param name="ppAgileReference">The agile reference for the object. Call the <a href="https://docs.microsoft.com//windows/desktop/WinRT/iagilereference-resolve">Resolve</a> method to localize the object into the apartment in which <b>Resolve</b> is called.</param>
    <returns>
      <para>This function can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Return value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>S_OK</term>
              </listheader>
            </list>
          </description>
          <description>The function completed successfully.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>E_INVALIDARG</term>
              </listheader>
            </list>
          </description>
          <description>The <i>options</i> parameter in invalid.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>E_OUTOFMEMORY</term>
              </listheader>
            </list>
          </description>
          <description>The agile reference couldn't be constructed due to an out-of-memory condition.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>E_NOINTERFACE</term>
              </listheader>
            </list>
          </description>
          <description>The <i>pUnk</i> parameter doesn't support the interface ID specified by the <i>riid</i> parameter.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>CO_E_NOT_SUPPORTED</term>
              </listheader>
            </list>
          </description>
          <description>The object implements the <see cref="INoMarshal" /> interface.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringFromCLSID">
    <summary>Converts a CLSID into a string of printable characters. Different CLSIDs always convert to different strings.</summary>
    <param name="rclsid">The CLSID to be converted.</param>
    <param name="lplpsz">The address of a pointer variable that receives a pointer to the resulting string. The string that represents <i>rclsid</i> includes enclosing braces.</param>
    <returns>This function can return the standard return values E_OUTOFMEMORY and S_OK.</returns>
  </member>
  <member name="Windows.StringFromGUID2">
    <summary>Converts a globally unique identifier (GUID) into a string of printable characters.</summary>
    <param name="rguid">The GUID to be converted.</param>
    <param name="lpsz">A pointer to a caller-allocated string variable to receive the resulting string. The string that represents <i>rguid</i> includes enclosing braces.</param>
    <param name="cchMax">The number of characters available in the <i>lpsz</i> buffer.</param>
    <returns>If the function succeeds, the return value is the number of characters in the returned string, including the null terminator. If the buffer is too small to contain the string, the return value is 0.</returns>
  </member>
  <member name="Windows.StringFromIID">
    <summary>Converts an interface identifier into a string of printable characters.</summary>
    <param name="rclsid">The interface identifier to be converted.</param>
    <param name="lplpsz">The address of a pointer variable that receives a pointer to the resulting string. The string that represents <i>rclsid</i> includes enclosing braces.</param>
    <returns>This function can return the standard return values E_OUTOFMEMORY and S_OK.</returns>
  </member>
</doc>