<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.MsiCreateRecord">
    <summary>
      <para>The
<b>MsiCreateRecord</b> function creates a new record object with the specified number of fields. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="cParams">
      <para>Specifies the number of fields the record will have. The maximum number of fields in a record is limited to 65535.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is handle to a new record object.</para>
      <para>If the function fails, the return value is null.</para>
    </returns>
    <remarks>
      <para>Field 0 of the record object created by the
<b>MsiCreateRecord</b> function is used for format strings and operation codes and is not included in the count specified by <i>cParams</i>. All fields are initialized to null.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiCreateTransformSummaryInfo">
    <summary>
      <para>The
<b>MsiCreateTransformSummaryInfo</b> function creates summary information of an existing transform to include validation and error conditions. Execution of this function sets the error record, which is accessible by using
<see cref="MsiGetLastErrorRecord" />.</para>
    </summary>
    <param name="hDatabase">
      <para>The handle to the database that contains the new database summary information.</para>
    </param>
    <param name="hDatabaseReference">
      <para>The handle to the database that contains the original summary information.</para>
    </param>
    <param name="szTransformFile">
      <para>The name of the transform to which the summary information is added.</para>
    </param>
    <param name="iErrorConditions">
      <para>The error conditions that should be suppressed when the transform is applied. Use one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Error condition</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>none</b>
                </description>
              </item>
              <item>
                <description>0x00000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>None of the following conditions.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGROW</b>
                </description>
              </item>
              <item>
                <description>0x00000001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a row that  exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x00000002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x00000004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a table that  exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x00000008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a table that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_UPDATEMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x00000010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Updating a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_CHANGECODEPAGE</b>
                </description>
              </item>
              <item>
                <description>0x00000020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Transform and database code pages do not match, and their code pages are neutral.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="iValidation">
      <para>Specifies the properties to be validated to verify that the transform can be applied to the database. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>none</b>
                </description>
              </item>
              <item>
                <description>0x00000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not validate properties.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_LANGUAGE</b>
                </description>
              </item>
              <item>
                <description>0x00000001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Default language must match base database.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_PRODUCT</b>
                </description>
              </item>
              <item>
                <description>0x00000002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Product must match base database.</para>
          </description>
        </item>
      </list>
      <para>Validate product version flags.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_MAJORVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Check major version only.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_MINORVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Check major and minor versions only.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_UPDATEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Check major, minor, and update versions.</para>
          </description>
        </item>
      </list>
      <para>Product version relationship flags. In the following table the installed version is the version of the package that is being transformed, and the base version is the version of the package that is used to create the transform.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWLESSBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000040</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &lt; base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWLESSEQUALBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000080</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &lt;= base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWEQUALBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version = base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWGREATEREQUALBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &gt;= base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWGREATERBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000400</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &gt; base version.</para>
          </description>
        </item>
      </list>
      <para>Upgrade code validation flags.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_UPGRADECODE</b>
                </description>
              </item>
              <item>
                <description>0x00000800</description>
              </item>
            </list>
          </description>
          <description>
            <para>UpgradeCode must match base database.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> Property and
<a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> Property  must be defined in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/property-table">Property Table</a> of both the base and reference databases. If MSITRANSFORM_VALIDATE_UPGRADECODE is used, the
<a href="https://docs.microsoft.com//windows/desktop/Msi/upgradecode">UpgradeCode</a> Property must also be defined in both databases. If these conditions are not met,
<b>MsiCreateTransformSummaryInfo</b> returns ERROR_INSTALL_PACKAGE_INVALID.</para>
      <list type="bullet">
        <item>
          <description>Do not use the semicolon for filenames or paths, because it is used as a list delimiter for transforms, sources, and patches.</description>
        </item>
        <item>
          <description>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiCreateTransformSummaryInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-transforms">Database Transforms</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
  </member>
  <member name="Windows.MsiCreateTransformSummaryInfoA">
    <summary>
      <para>The
<b>MsiCreateTransformSummaryInfo</b> function creates summary information of an existing transform to include validation and error conditions. Execution of this function sets the error record, which is accessible by using
<see cref="MsiGetLastErrorRecord" />.</para>
    </summary>
    <param name="hDatabase">
      <para>The handle to the database that contains the new database summary information.</para>
    </param>
    <param name="hDatabaseReference">
      <para>The handle to the database that contains the original summary information.</para>
    </param>
    <param name="szTransformFile">
      <para>The name of the transform to which the summary information is added.</para>
    </param>
    <param name="iErrorConditions">
      <para>The error conditions that should be suppressed when the transform is applied. Use one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Error condition</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>none</b>
                </description>
              </item>
              <item>
                <description>0x00000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>None of the following conditions.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGROW</b>
                </description>
              </item>
              <item>
                <description>0x00000001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a row that  exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x00000002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x00000004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a table that  exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x00000008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a table that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_UPDATEMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x00000010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Updating a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_CHANGECODEPAGE</b>
                </description>
              </item>
              <item>
                <description>0x00000020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Transform and database code pages do not match, and their code pages are neutral.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="iValidation">
      <para>Specifies the properties to be validated to verify that the transform can be applied to the database. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>none</b>
                </description>
              </item>
              <item>
                <description>0x00000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not validate properties.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_LANGUAGE</b>
                </description>
              </item>
              <item>
                <description>0x00000001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Default language must match base database.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_PRODUCT</b>
                </description>
              </item>
              <item>
                <description>0x00000002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Product must match base database.</para>
          </description>
        </item>
      </list>
      <para>Validate product version flags.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_MAJORVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Check major version only.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_MINORVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Check major and minor versions only.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_UPDATEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Check major, minor, and update versions.</para>
          </description>
        </item>
      </list>
      <para>Product version relationship flags. In the following table the installed version is the version of the package that is being transformed, and the base version is the version of the package that is used to create the transform.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWLESSBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000040</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &lt; base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWLESSEQUALBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000080</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &lt;= base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWEQUALBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version = base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWGREATEREQUALBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &gt;= base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWGREATERBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000400</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &gt; base version.</para>
          </description>
        </item>
      </list>
      <para>Upgrade code validation flags.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_UPGRADECODE</b>
                </description>
              </item>
              <item>
                <description>0x00000800</description>
              </item>
            </list>
          </description>
          <description>
            <para>UpgradeCode must match base database.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> Property and
<a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> Property  must be defined in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/property-table">Property Table</a> of both the base and reference databases. If MSITRANSFORM_VALIDATE_UPGRADECODE is used, the
<a href="https://docs.microsoft.com//windows/desktop/Msi/upgradecode">UpgradeCode</a> Property must also be defined in both databases. If these conditions are not met,
<b>MsiCreateTransformSummaryInfo</b> returns ERROR_INSTALL_PACKAGE_INVALID.</para>
      <list type="bullet">
        <item>
          <description>Do not use the semicolon for filenames or paths, because it is used as a list delimiter for transforms, sources, and patches.</description>
        </item>
        <item>
          <description>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiCreateTransformSummaryInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-transforms">Database Transforms</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
  </member>
  <member name="Windows.MsiCreateTransformSummaryInfoW">
    <summary>
      <para>The
<b>MsiCreateTransformSummaryInfo</b> function creates summary information of an existing transform to include validation and error conditions. Execution of this function sets the error record, which is accessible by using
<see cref="MsiGetLastErrorRecord" />.</para>
    </summary>
    <param name="hDatabase">
      <para>The handle to the database that contains the new database summary information.</para>
    </param>
    <param name="hDatabaseReference">
      <para>The handle to the database that contains the original summary information.</para>
    </param>
    <param name="szTransformFile">
      <para>The name of the transform to which the summary information is added.</para>
    </param>
    <param name="iErrorConditions">
      <para>The error conditions that should be suppressed when the transform is applied. Use one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Error condition</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>none</b>
                </description>
              </item>
              <item>
                <description>0x00000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>None of the following conditions.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGROW</b>
                </description>
              </item>
              <item>
                <description>0x00000001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a row that  exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x00000002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x00000004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a table that  exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x00000008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a table that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_UPDATEMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x00000010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Updating a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_CHANGECODEPAGE</b>
                </description>
              </item>
              <item>
                <description>0x00000020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Transform and database code pages do not match, and their code pages are neutral.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="iValidation">
      <para>Specifies the properties to be validated to verify that the transform can be applied to the database. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>none</b>
                </description>
              </item>
              <item>
                <description>0x00000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not validate properties.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_LANGUAGE</b>
                </description>
              </item>
              <item>
                <description>0x00000001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Default language must match base database.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_PRODUCT</b>
                </description>
              </item>
              <item>
                <description>0x00000002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Product must match base database.</para>
          </description>
        </item>
      </list>
      <para>Validate product version flags.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_MAJORVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Check major version only.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_MINORVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Check major and minor versions only.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_UPDATEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Check major, minor, and update versions.</para>
          </description>
        </item>
      </list>
      <para>Product version relationship flags. In the following table the installed version is the version of the package that is being transformed, and the base version is the version of the package that is used to create the transform.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWLESSBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000040</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &lt; base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWLESSEQUALBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000080</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &lt;= base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWEQUALBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version = base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWGREATEREQUALBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &gt;= base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWGREATERBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000400</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &gt; base version.</para>
          </description>
        </item>
      </list>
      <para>Upgrade code validation flags.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_UPGRADECODE</b>
                </description>
              </item>
              <item>
                <description>0x00000800</description>
              </item>
            </list>
          </description>
          <description>
            <para>UpgradeCode must match base database.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> Property and
<a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> Property  must be defined in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/property-table">Property Table</a> of both the base and reference databases. If MSITRANSFORM_VALIDATE_UPGRADECODE is used, the
<a href="https://docs.microsoft.com//windows/desktop/Msi/upgradecode">UpgradeCode</a> Property must also be defined in both databases. If these conditions are not met,
<b>MsiCreateTransformSummaryInfo</b> returns ERROR_INSTALL_PACKAGE_INVALID.</para>
      <list type="bullet">
        <item>
          <description>Do not use the semicolon for filenames or paths, because it is used as a list delimiter for transforms, sources, and patches.</description>
        </item>
        <item>
          <description>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiCreateTransformSummaryInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-transforms">Database Transforms</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
  </member>
  <member name="Windows.MsiCreateTransformSummaryInfo">
    <summary>
      <para>The
<b>MsiCreateTransformSummaryInfo</b> function creates summary information of an existing transform to include validation and error conditions. Execution of this function sets the error record, which is accessible by using
<see cref="MsiGetLastErrorRecord" />.</para>
    </summary>
    <param name="hDatabase">
      <para>The handle to the database that contains the new database summary information.</para>
    </param>
    <param name="hDatabaseReference">
      <para>The handle to the database that contains the original summary information.</para>
    </param>
    <param name="szTransformFile">
      <para>The name of the transform to which the summary information is added.</para>
    </param>
    <param name="iErrorConditions">
      <para>The error conditions that should be suppressed when the transform is applied. Use one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Error condition</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>none</b>
                </description>
              </item>
              <item>
                <description>0x00000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>None of the following conditions.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGROW</b>
                </description>
              </item>
              <item>
                <description>0x00000001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a row that  exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x00000002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x00000004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a table that  exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x00000008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a table that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_UPDATEMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x00000010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Updating a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_CHANGECODEPAGE</b>
                </description>
              </item>
              <item>
                <description>0x00000020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Transform and database code pages do not match, and their code pages are neutral.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="iValidation">
      <para>Specifies the properties to be validated to verify that the transform can be applied to the database. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>none</b>
                </description>
              </item>
              <item>
                <description>0x00000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not validate properties.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_LANGUAGE</b>
                </description>
              </item>
              <item>
                <description>0x00000001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Default language must match base database.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_PRODUCT</b>
                </description>
              </item>
              <item>
                <description>0x00000002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Product must match base database.</para>
          </description>
        </item>
      </list>
      <para>Validate product version flags.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_MAJORVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Check major version only.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_MINORVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Check major and minor versions only.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_UPDATEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Check major, minor, and update versions.</para>
          </description>
        </item>
      </list>
      <para>Product version relationship flags. In the following table the installed version is the version of the package that is being transformed, and the base version is the version of the package that is used to create the transform.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWLESSBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000040</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &lt; base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWLESSEQUALBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000080</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &lt;= base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWEQUALBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version = base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWGREATEREQUALBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &gt;= base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWGREATERBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000400</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &gt; base version.</para>
          </description>
        </item>
      </list>
      <para>Upgrade code validation flags.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_UPGRADECODE</b>
                </description>
              </item>
              <item>
                <description>0x00000800</description>
              </item>
            </list>
          </description>
          <description>
            <para>UpgradeCode must match base database.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> Property and
<a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> Property  must be defined in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/property-table">Property Table</a> of both the base and reference databases. If MSITRANSFORM_VALIDATE_UPGRADECODE is used, the
<a href="https://docs.microsoft.com//windows/desktop/Msi/upgradecode">UpgradeCode</a> Property must also be defined in both databases. If these conditions are not met,
<b>MsiCreateTransformSummaryInfo</b> returns ERROR_INSTALL_PACKAGE_INVALID.</para>
      <list type="bullet">
        <item>
          <description>Do not use the semicolon for filenames or paths, because it is used as a list delimiter for transforms, sources, and patches.</description>
        </item>
        <item>
          <description>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiCreateTransformSummaryInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-transforms">Database Transforms</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
  </member>
  <member name="Windows.MsiCreateTransformSummaryInfoA">
    <summary>
      <para>The
<b>MsiCreateTransformSummaryInfo</b> function creates summary information of an existing transform to include validation and error conditions. Execution of this function sets the error record, which is accessible by using
<see cref="MsiGetLastErrorRecord" />.</para>
    </summary>
    <param name="hDatabase">
      <para>The handle to the database that contains the new database summary information.</para>
    </param>
    <param name="hDatabaseReference">
      <para>The handle to the database that contains the original summary information.</para>
    </param>
    <param name="szTransformFile">
      <para>The name of the transform to which the summary information is added.</para>
    </param>
    <param name="iErrorConditions">
      <para>The error conditions that should be suppressed when the transform is applied. Use one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Error condition</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>none</b>
                </description>
              </item>
              <item>
                <description>0x00000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>None of the following conditions.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGROW</b>
                </description>
              </item>
              <item>
                <description>0x00000001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a row that  exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x00000002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x00000004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a table that  exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x00000008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a table that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_UPDATEMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x00000010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Updating a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_CHANGECODEPAGE</b>
                </description>
              </item>
              <item>
                <description>0x00000020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Transform and database code pages do not match, and their code pages are neutral.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="iValidation">
      <para>Specifies the properties to be validated to verify that the transform can be applied to the database. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>none</b>
                </description>
              </item>
              <item>
                <description>0x00000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not validate properties.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_LANGUAGE</b>
                </description>
              </item>
              <item>
                <description>0x00000001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Default language must match base database.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_PRODUCT</b>
                </description>
              </item>
              <item>
                <description>0x00000002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Product must match base database.</para>
          </description>
        </item>
      </list>
      <para>Validate product version flags.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_MAJORVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Check major version only.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_MINORVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Check major and minor versions only.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_UPDATEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Check major, minor, and update versions.</para>
          </description>
        </item>
      </list>
      <para>Product version relationship flags. In the following table the installed version is the version of the package that is being transformed, and the base version is the version of the package that is used to create the transform.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWLESSBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000040</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &lt; base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWLESSEQUALBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000080</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &lt;= base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWEQUALBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version = base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWGREATEREQUALBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &gt;= base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWGREATERBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000400</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &gt; base version.</para>
          </description>
        </item>
      </list>
      <para>Upgrade code validation flags.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_UPGRADECODE</b>
                </description>
              </item>
              <item>
                <description>0x00000800</description>
              </item>
            </list>
          </description>
          <description>
            <para>UpgradeCode must match base database.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> Property and
<a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> Property  must be defined in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/property-table">Property Table</a> of both the base and reference databases. If MSITRANSFORM_VALIDATE_UPGRADECODE is used, the
<a href="https://docs.microsoft.com//windows/desktop/Msi/upgradecode">UpgradeCode</a> Property must also be defined in both databases. If these conditions are not met,
<b>MsiCreateTransformSummaryInfo</b> returns ERROR_INSTALL_PACKAGE_INVALID.</para>
      <list type="bullet">
        <item>
          <description>Do not use the semicolon for filenames or paths, because it is used as a list delimiter for transforms, sources, and patches.</description>
        </item>
        <item>
          <description>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiCreateTransformSummaryInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-transforms">Database Transforms</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
  </member>
  <member name="Windows.MsiCreateTransformSummaryInfoW">
    <summary>
      <para>The
<b>MsiCreateTransformSummaryInfo</b> function creates summary information of an existing transform to include validation and error conditions. Execution of this function sets the error record, which is accessible by using
<see cref="MsiGetLastErrorRecord" />.</para>
    </summary>
    <param name="hDatabase">
      <para>The handle to the database that contains the new database summary information.</para>
    </param>
    <param name="hDatabaseReference">
      <para>The handle to the database that contains the original summary information.</para>
    </param>
    <param name="szTransformFile">
      <para>The name of the transform to which the summary information is added.</para>
    </param>
    <param name="iErrorConditions">
      <para>The error conditions that should be suppressed when the transform is applied. Use one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Error condition</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>none</b>
                </description>
              </item>
              <item>
                <description>0x00000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>None of the following conditions.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGROW</b>
                </description>
              </item>
              <item>
                <description>0x00000001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a row that  exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x00000002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x00000004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a table that  exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x00000008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a table that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_UPDATEMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x00000010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Updating a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_CHANGECODEPAGE</b>
                </description>
              </item>
              <item>
                <description>0x00000020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Transform and database code pages do not match, and their code pages are neutral.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="iValidation">
      <para>Specifies the properties to be validated to verify that the transform can be applied to the database. This parameter can be one or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>none</b>
                </description>
              </item>
              <item>
                <description>0x00000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not validate properties.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_LANGUAGE</b>
                </description>
              </item>
              <item>
                <description>0x00000001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Default language must match base database.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_PRODUCT</b>
                </description>
              </item>
              <item>
                <description>0x00000002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Product must match base database.</para>
          </description>
        </item>
      </list>
      <para>Validate product version flags.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_MAJORVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Check major version only.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_MINORVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Check major and minor versions only.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_UPDATEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Check major, minor, and update versions.</para>
          </description>
        </item>
      </list>
      <para>Product version relationship flags. In the following table the installed version is the version of the package that is being transformed, and the base version is the version of the package that is used to create the transform.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWLESSBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000040</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &lt; base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWLESSEQUALBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000080</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &lt;= base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWEQUALBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version = base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWGREATEREQUALBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &gt;= base version.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_NEWGREATERBASEVERSION</b>
                </description>
              </item>
              <item>
                <description>0x00000400</description>
              </item>
            </list>
          </description>
          <description>
            <para>Installed version &gt; base version.</para>
          </description>
        </item>
      </list>
      <para>Upgrade code validation flags.</para>
      <list type="table">
        <listheader>
          <description>Validation flag</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_VALIDATE_UPGRADECODE</b>
                </description>
              </item>
              <item>
                <description>0x00000800</description>
              </item>
            </list>
          </description>
          <description>
            <para>UpgradeCode must match base database.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/Msi/productcode">ProductCode</a> Property and
<a href="https://docs.microsoft.com//windows/desktop/Msi/productversion">ProductVersion</a> Property  must be defined in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/property-table">Property Table</a> of both the base and reference databases. If MSITRANSFORM_VALIDATE_UPGRADECODE is used, the
<a href="https://docs.microsoft.com//windows/desktop/Msi/upgradecode">UpgradeCode</a> Property must also be defined in both databases. If these conditions are not met,
<b>MsiCreateTransformSummaryInfo</b> returns ERROR_INSTALL_PACKAGE_INVALID.</para>
      <list type="bullet">
        <item>
          <description>Do not use the semicolon for filenames or paths, because it is used as a list delimiter for transforms, sources, and patches.</description>
        </item>
        <item>
          <description>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiCreateTransformSummaryInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-transforms">Database Transforms</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
  </member>
  <member name="Windows.MsiDatabaseApplyTransform">
    <summary>
      <para>The
<b>MsiDatabaseApplyTransform</b> function applies a transform to a database.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" /> to the transform.</para>
    </param>
    <param name="szTransformFile">
      <para>Specifies the name of the transform file to apply.</para>
    </param>
    <param name="iErrorConditions">
      <para>Error conditions that should be suppressed. This parameter is a bit field that can contain the following bits.</para>
      <list type="table">
        <listheader>
          <description>Error condition</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGROW</b>
                </description>
              </item>
              <item>
                <description>0x0001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a row that already exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x0002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x0004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a table that already exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x0008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a table that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_UPDATEMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x0010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Updating a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_CHANGECODEPAGE</b>
                </description>
              </item>
              <item>
                <description>0x0020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Transform and database code pages do not match and neither has a neutral code page.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_VIEWTRANSFORM</b>
                </description>
              </item>
              <item>
                <description>0x0100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Create the temporary
<a href="https://docs.microsoft.com//windows/desktop/Msi/-transformview-table">_TransformView table</a>.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseApplyTransform</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiDatabaseApplyTransform</b> function delays transforming tables until it is necessary. Any tables to be added or dropped are processed immediately. However, changes to the existing table are delayed until the table is loaded or the database is committed.</para>
      <para>An error occurs if
<b>MsiDatabaseApplyTransform</b> is called when tables have already been loaded and saved to storage.</para>
      <para>Because the list delimiter for transforms, sources and patches is a semicolon, this character should not be used for filenames or paths.</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseApplyTransform as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-transforms">Database Transforms</seealso>
  </member>
  <member name="Windows.MsiDatabaseApplyTransformA">
    <summary>
      <para>The
<b>MsiDatabaseApplyTransform</b> function applies a transform to a database.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" /> to the transform.</para>
    </param>
    <param name="szTransformFile">
      <para>Specifies the name of the transform file to apply.</para>
    </param>
    <param name="iErrorConditions">
      <para>Error conditions that should be suppressed. This parameter is a bit field that can contain the following bits.</para>
      <list type="table">
        <listheader>
          <description>Error condition</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGROW</b>
                </description>
              </item>
              <item>
                <description>0x0001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a row that already exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x0002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x0004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a table that already exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x0008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a table that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_UPDATEMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x0010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Updating a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_CHANGECODEPAGE</b>
                </description>
              </item>
              <item>
                <description>0x0020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Transform and database code pages do not match and neither has a neutral code page.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_VIEWTRANSFORM</b>
                </description>
              </item>
              <item>
                <description>0x0100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Create the temporary
<a href="https://docs.microsoft.com//windows/desktop/Msi/-transformview-table">_TransformView table</a>.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseApplyTransform</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiDatabaseApplyTransform</b> function delays transforming tables until it is necessary. Any tables to be added or dropped are processed immediately. However, changes to the existing table are delayed until the table is loaded or the database is committed.</para>
      <para>An error occurs if
<b>MsiDatabaseApplyTransform</b> is called when tables have already been loaded and saved to storage.</para>
      <para>Because the list delimiter for transforms, sources and patches is a semicolon, this character should not be used for filenames or paths.</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseApplyTransform as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-transforms">Database Transforms</seealso>
  </member>
  <member name="Windows.MsiDatabaseApplyTransformW">
    <summary>
      <para>The
<b>MsiDatabaseApplyTransform</b> function applies a transform to a database.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" /> to the transform.</para>
    </param>
    <param name="szTransformFile">
      <para>Specifies the name of the transform file to apply.</para>
    </param>
    <param name="iErrorConditions">
      <para>Error conditions that should be suppressed. This parameter is a bit field that can contain the following bits.</para>
      <list type="table">
        <listheader>
          <description>Error condition</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGROW</b>
                </description>
              </item>
              <item>
                <description>0x0001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a row that already exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x0002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x0004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a table that already exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x0008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a table that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_UPDATEMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x0010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Updating a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_CHANGECODEPAGE</b>
                </description>
              </item>
              <item>
                <description>0x0020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Transform and database code pages do not match and neither has a neutral code page.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_VIEWTRANSFORM</b>
                </description>
              </item>
              <item>
                <description>0x0100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Create the temporary
<a href="https://docs.microsoft.com//windows/desktop/Msi/-transformview-table">_TransformView table</a>.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseApplyTransform</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiDatabaseApplyTransform</b> function delays transforming tables until it is necessary. Any tables to be added or dropped are processed immediately. However, changes to the existing table are delayed until the table is loaded or the database is committed.</para>
      <para>An error occurs if
<b>MsiDatabaseApplyTransform</b> is called when tables have already been loaded and saved to storage.</para>
      <para>Because the list delimiter for transforms, sources and patches is a semicolon, this character should not be used for filenames or paths.</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseApplyTransform as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-transforms">Database Transforms</seealso>
  </member>
  <member name="Windows.MsiDatabaseApplyTransform">
    <summary>
      <para>The
<b>MsiDatabaseApplyTransform</b> function applies a transform to a database.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" /> to the transform.</para>
    </param>
    <param name="szTransformFile">
      <para>Specifies the name of the transform file to apply.</para>
    </param>
    <param name="iErrorConditions">
      <para>Error conditions that should be suppressed. This parameter is a bit field that can contain the following bits.</para>
      <list type="table">
        <listheader>
          <description>Error condition</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGROW</b>
                </description>
              </item>
              <item>
                <description>0x0001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a row that already exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x0002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x0004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a table that already exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x0008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a table that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_UPDATEMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x0010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Updating a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_CHANGECODEPAGE</b>
                </description>
              </item>
              <item>
                <description>0x0020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Transform and database code pages do not match and neither has a neutral code page.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_VIEWTRANSFORM</b>
                </description>
              </item>
              <item>
                <description>0x0100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Create the temporary
<a href="https://docs.microsoft.com//windows/desktop/Msi/-transformview-table">_TransformView table</a>.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseApplyTransform</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiDatabaseApplyTransform</b> function delays transforming tables until it is necessary. Any tables to be added or dropped are processed immediately. However, changes to the existing table are delayed until the table is loaded or the database is committed.</para>
      <para>An error occurs if
<b>MsiDatabaseApplyTransform</b> is called when tables have already been loaded and saved to storage.</para>
      <para>Because the list delimiter for transforms, sources and patches is a semicolon, this character should not be used for filenames or paths.</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseApplyTransform as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-transforms">Database Transforms</seealso>
  </member>
  <member name="Windows.MsiDatabaseApplyTransformA">
    <summary>
      <para>The
<b>MsiDatabaseApplyTransform</b> function applies a transform to a database.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" /> to the transform.</para>
    </param>
    <param name="szTransformFile">
      <para>Specifies the name of the transform file to apply.</para>
    </param>
    <param name="iErrorConditions">
      <para>Error conditions that should be suppressed. This parameter is a bit field that can contain the following bits.</para>
      <list type="table">
        <listheader>
          <description>Error condition</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGROW</b>
                </description>
              </item>
              <item>
                <description>0x0001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a row that already exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x0002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x0004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a table that already exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x0008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a table that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_UPDATEMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x0010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Updating a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_CHANGECODEPAGE</b>
                </description>
              </item>
              <item>
                <description>0x0020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Transform and database code pages do not match and neither has a neutral code page.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_VIEWTRANSFORM</b>
                </description>
              </item>
              <item>
                <description>0x0100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Create the temporary
<a href="https://docs.microsoft.com//windows/desktop/Msi/-transformview-table">_TransformView table</a>.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseApplyTransform</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiDatabaseApplyTransform</b> function delays transforming tables until it is necessary. Any tables to be added or dropped are processed immediately. However, changes to the existing table are delayed until the table is loaded or the database is committed.</para>
      <para>An error occurs if
<b>MsiDatabaseApplyTransform</b> is called when tables have already been loaded and saved to storage.</para>
      <para>Because the list delimiter for transforms, sources and patches is a semicolon, this character should not be used for filenames or paths.</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseApplyTransform as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-transforms">Database Transforms</seealso>
  </member>
  <member name="Windows.MsiDatabaseApplyTransformW">
    <summary>
      <para>The
<b>MsiDatabaseApplyTransform</b> function applies a transform to a database.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" /> to the transform.</para>
    </param>
    <param name="szTransformFile">
      <para>Specifies the name of the transform file to apply.</para>
    </param>
    <param name="iErrorConditions">
      <para>Error conditions that should be suppressed. This parameter is a bit field that can contain the following bits.</para>
      <list type="table">
        <listheader>
          <description>Error condition</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGROW</b>
                </description>
              </item>
              <item>
                <description>0x0001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a row that already exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x0002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_ADDEXISTINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x0004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Adding a table that already exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_DELMISSINGTABLE</b>
                </description>
              </item>
              <item>
                <description>0x0008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Deleting a table that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_UPDATEMISSINGROW</b>
                </description>
              </item>
              <item>
                <description>0x0010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Updating a row that does not exist.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_CHANGECODEPAGE</b>
                </description>
              </item>
              <item>
                <description>0x0020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Transform and database code pages do not match and neither has a neutral code page.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSITRANSFORM_ERROR_VIEWTRANSFORM</b>
                </description>
              </item>
              <item>
                <description>0x0100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Create the temporary
<a href="https://docs.microsoft.com//windows/desktop/Msi/-transformview-table">_TransformView table</a>.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseApplyTransform</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiDatabaseApplyTransform</b> function delays transforming tables until it is necessary. Any tables to be added or dropped are processed immediately. However, changes to the existing table are delayed until the table is loaded or the database is committed.</para>
      <para>An error occurs if
<b>MsiDatabaseApplyTransform</b> is called when tables have already been loaded and saved to storage.</para>
      <para>Because the list delimiter for transforms, sources and patches is a semicolon, this character should not be used for filenames or paths.</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseApplyTransform as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-transforms">Database Transforms</seealso>
  </member>
  <member name="Windows.MsiDatabaseCommit">
    <summary>
      <para>The
<b>MsiDatabaseCommit</b> function commits changes to a database.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" />.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseCommit</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiDatabaseCommit</b> function finalizes the persistent form of the database. All persistent data is then written to the writable database. No temporary columns or rows are written. The
<b>MsiDatabaseCommit</b> function has no effect on a database that is opened as read-only. You can call this function multiple times to save the current state of tables loaded into memory. When the database is finally closed, any changes made after the database is committed are rolled back. This function is normally called prior to shutdown when all database changes have been finalized.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseExport">
    <summary>
      <para>The
<b>MsiDatabaseExport</b> function exports a Microsoft Installer table from an open database to a <a href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">Text Archive File</a>.</para>
    </summary>
    <param name="hDatabase">
      <para>The handle to a database  from <see cref="MsiOpenDatabase" />.</para>
    </param>
    <param name="szTableName">
      <para>The name of the table to export.</para>
    </param>
    <param name="szFolderPath">
      <para>The name of the folder that contains archive files.</para>
    </param>
    <param name="szFileName">
      <para>The name of the exported table archive file.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseExport</b> function returns one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_PATHNAME</b>
            </para>
          </description>
          <description>
            <para>An invalid path is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function fails.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>An invalid or inactive handle is supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeds.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If a table contains streams,
<b>MsiDatabaseExport</b> exports each stream to a separate file.</para>
      <para>For more information, see
<see cref="MsiDatabaseImport" />.</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can get extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseExport as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">Text Archive Files</seealso>
  </member>
  <member name="Windows.MsiDatabaseExportA">
    <summary>
      <para>The
<b>MsiDatabaseExport</b> function exports a Microsoft Installer table from an open database to a <a href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">Text Archive File</a>.</para>
    </summary>
    <param name="hDatabase">
      <para>The handle to a database  from <see cref="MsiOpenDatabase" />.</para>
    </param>
    <param name="szTableName">
      <para>The name of the table to export.</para>
    </param>
    <param name="szFolderPath">
      <para>The name of the folder that contains archive files.</para>
    </param>
    <param name="szFileName">
      <para>The name of the exported table archive file.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseExport</b> function returns one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_PATHNAME</b>
            </para>
          </description>
          <description>
            <para>An invalid path is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function fails.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>An invalid or inactive handle is supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeds.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If a table contains streams,
<b>MsiDatabaseExport</b> exports each stream to a separate file.</para>
      <para>For more information, see
<see cref="MsiDatabaseImport" />.</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can get extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseExport as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">Text Archive Files</seealso>
  </member>
  <member name="Windows.MsiDatabaseExportW">
    <summary>
      <para>The
<b>MsiDatabaseExport</b> function exports a Microsoft Installer table from an open database to a <a href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">Text Archive File</a>.</para>
    </summary>
    <param name="hDatabase">
      <para>The handle to a database  from <see cref="MsiOpenDatabase" />.</para>
    </param>
    <param name="szTableName">
      <para>The name of the table to export.</para>
    </param>
    <param name="szFolderPath">
      <para>The name of the folder that contains archive files.</para>
    </param>
    <param name="szFileName">
      <para>The name of the exported table archive file.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseExport</b> function returns one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_PATHNAME</b>
            </para>
          </description>
          <description>
            <para>An invalid path is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function fails.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>An invalid or inactive handle is supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeds.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If a table contains streams,
<b>MsiDatabaseExport</b> exports each stream to a separate file.</para>
      <para>For more information, see
<see cref="MsiDatabaseImport" />.</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can get extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseExport as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">Text Archive Files</seealso>
  </member>
  <member name="Windows.MsiDatabaseExport">
    <summary>
      <para>The
<b>MsiDatabaseExport</b> function exports a Microsoft Installer table from an open database to a <a href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">Text Archive File</a>.</para>
    </summary>
    <param name="hDatabase">
      <para>The handle to a database  from <see cref="MsiOpenDatabase" />.</para>
    </param>
    <param name="szTableName">
      <para>The name of the table to export.</para>
    </param>
    <param name="szFolderPath">
      <para>The name of the folder that contains archive files.</para>
    </param>
    <param name="szFileName">
      <para>The name of the exported table archive file.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseExport</b> function returns one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_PATHNAME</b>
            </para>
          </description>
          <description>
            <para>An invalid path is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function fails.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>An invalid or inactive handle is supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeds.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If a table contains streams,
<b>MsiDatabaseExport</b> exports each stream to a separate file.</para>
      <para>For more information, see
<see cref="MsiDatabaseImport" />.</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can get extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseExport as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">Text Archive Files</seealso>
  </member>
  <member name="Windows.MsiDatabaseExportA">
    <summary>
      <para>The
<b>MsiDatabaseExport</b> function exports a Microsoft Installer table from an open database to a <a href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">Text Archive File</a>.</para>
    </summary>
    <param name="hDatabase">
      <para>The handle to a database  from <see cref="MsiOpenDatabase" />.</para>
    </param>
    <param name="szTableName">
      <para>The name of the table to export.</para>
    </param>
    <param name="szFolderPath">
      <para>The name of the folder that contains archive files.</para>
    </param>
    <param name="szFileName">
      <para>The name of the exported table archive file.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseExport</b> function returns one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_PATHNAME</b>
            </para>
          </description>
          <description>
            <para>An invalid path is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function fails.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>An invalid or inactive handle is supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeds.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If a table contains streams,
<b>MsiDatabaseExport</b> exports each stream to a separate file.</para>
      <para>For more information, see
<see cref="MsiDatabaseImport" />.</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can get extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseExport as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">Text Archive Files</seealso>
  </member>
  <member name="Windows.MsiDatabaseExportW">
    <summary>
      <para>The
<b>MsiDatabaseExport</b> function exports a Microsoft Installer table from an open database to a <a href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">Text Archive File</a>.</para>
    </summary>
    <param name="hDatabase">
      <para>The handle to a database  from <see cref="MsiOpenDatabase" />.</para>
    </param>
    <param name="szTableName">
      <para>The name of the table to export.</para>
    </param>
    <param name="szFolderPath">
      <para>The name of the folder that contains archive files.</para>
    </param>
    <param name="szFileName">
      <para>The name of the exported table archive file.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseExport</b> function returns one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_BAD_PATHNAME</b>
            </para>
          </description>
          <description>
            <para>An invalid path is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>The function fails.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>An invalid or inactive handle is supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter is passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeds.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If a table contains streams,
<b>MsiDatabaseExport</b> exports each stream to a separate file.</para>
      <para>For more information, see
<see cref="MsiDatabaseImport" />.</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can get extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseExport as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">Text Archive Files</seealso>
  </member>
  <member name="Windows.MsiDatabaseGenerateTransform">
    <summary>
      <para>The
<b>MsiDatabaseGenerateTransform</b> function generates a transform file of differences between two databases. A transform is a way of recording changes to a database without altering the original database. You can also use
<b>MsiDatabaseGenerateTransform</b> to test whether two databases are identical without creating a transform.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" /> that includes the changes.</para>
    </param>
    <param name="hDatabaseReference">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" /> that does not include the changes.</para>
    </param>
    <param name="szTransformFile">
      <para>A null-terminated string that specifies the name of the transform file being generated. This parameter can be null. If <i>szTransformFile</i> is null, you can use
<b>MsiDatabaseGenerateTransform</b> to test whether two databases are identical without creating a transform. If the databases are identical, the function returns ERROR_NO_DATA. If the databases are different the function returns NOERROR.</para>
    </param>
    <param name="iReserved1">
      <para>This is a reserved argument and must be set to 0.</para>
    </param>
    <param name="iReserved2">
      <para>This is a reserved argument and must be set to 0.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseGenerateTransform</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>To generate a difference file between two databases, use the
<b>MsiDatabaseGenerateTransform</b> function. A transform contains information regarding insertion and deletion of columns and rows. The validation flags are stored in the summary information stream of the transform file.</para>
      <para>For tables that exist in both databases, the only difference between the two schemas that is allowed is the addition of columns to the end of the reference table. You cannot add primary key columns to a table or change the order or names or column definitions of the existing columns as defined in the base table. In other words, if neither table contains data and columns are removed from the reference table, the resulting table is identical to the base table.</para>
      <para>Because the list delimiter for transforms, sources and patches is a semicolon, this character should not be used for filenames or paths.</para>
      <para>This function does not generate a Summary Information stream. Use
<see cref="MsiCreateTransformSummaryInfo" /> to create the stream for an existing transform.</para>
      <para>If <i>szTransformFile</i> is null, you can test whether two databases are identical without creating a transform. If the databases are identical, ERROR_NO_DATA is returned, NOERROR is returned if differences are found.</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseGenerateTransform as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-transforms">Database Transforms</seealso>
  </member>
  <member name="Windows.MsiDatabaseGenerateTransformA">
    <summary>
      <para>The
<b>MsiDatabaseGenerateTransform</b> function generates a transform file of differences between two databases. A transform is a way of recording changes to a database without altering the original database. You can also use
<b>MsiDatabaseGenerateTransform</b> to test whether two databases are identical without creating a transform.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" /> that includes the changes.</para>
    </param>
    <param name="hDatabaseReference">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" /> that does not include the changes.</para>
    </param>
    <param name="szTransformFile">
      <para>A null-terminated string that specifies the name of the transform file being generated. This parameter can be null. If <i>szTransformFile</i> is null, you can use
<b>MsiDatabaseGenerateTransform</b> to test whether two databases are identical without creating a transform. If the databases are identical, the function returns ERROR_NO_DATA. If the databases are different the function returns NOERROR.</para>
    </param>
    <param name="iReserved1">
      <para>This is a reserved argument and must be set to 0.</para>
    </param>
    <param name="iReserved2">
      <para>This is a reserved argument and must be set to 0.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseGenerateTransform</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>To generate a difference file between two databases, use the
<b>MsiDatabaseGenerateTransform</b> function. A transform contains information regarding insertion and deletion of columns and rows. The validation flags are stored in the summary information stream of the transform file.</para>
      <para>For tables that exist in both databases, the only difference between the two schemas that is allowed is the addition of columns to the end of the reference table. You cannot add primary key columns to a table or change the order or names or column definitions of the existing columns as defined in the base table. In other words, if neither table contains data and columns are removed from the reference table, the resulting table is identical to the base table.</para>
      <para>Because the list delimiter for transforms, sources and patches is a semicolon, this character should not be used for filenames or paths.</para>
      <para>This function does not generate a Summary Information stream. Use
<see cref="MsiCreateTransformSummaryInfo" /> to create the stream for an existing transform.</para>
      <para>If <i>szTransformFile</i> is null, you can test whether two databases are identical without creating a transform. If the databases are identical, ERROR_NO_DATA is returned, NOERROR is returned if differences are found.</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseGenerateTransform as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-transforms">Database Transforms</seealso>
  </member>
  <member name="Windows.MsiDatabaseGenerateTransformW">
    <summary>
      <para>The
<b>MsiDatabaseGenerateTransform</b> function generates a transform file of differences between two databases. A transform is a way of recording changes to a database without altering the original database. You can also use
<b>MsiDatabaseGenerateTransform</b> to test whether two databases are identical without creating a transform.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" /> that includes the changes.</para>
    </param>
    <param name="hDatabaseReference">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" /> that does not include the changes.</para>
    </param>
    <param name="szTransformFile">
      <para>A null-terminated string that specifies the name of the transform file being generated. This parameter can be null. If <i>szTransformFile</i> is null, you can use
<b>MsiDatabaseGenerateTransform</b> to test whether two databases are identical without creating a transform. If the databases are identical, the function returns ERROR_NO_DATA. If the databases are different the function returns NOERROR.</para>
    </param>
    <param name="iReserved1">
      <para>This is a reserved argument and must be set to 0.</para>
    </param>
    <param name="iReserved2">
      <para>This is a reserved argument and must be set to 0.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseGenerateTransform</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>To generate a difference file between two databases, use the
<b>MsiDatabaseGenerateTransform</b> function. A transform contains information regarding insertion and deletion of columns and rows. The validation flags are stored in the summary information stream of the transform file.</para>
      <para>For tables that exist in both databases, the only difference between the two schemas that is allowed is the addition of columns to the end of the reference table. You cannot add primary key columns to a table or change the order or names or column definitions of the existing columns as defined in the base table. In other words, if neither table contains data and columns are removed from the reference table, the resulting table is identical to the base table.</para>
      <para>Because the list delimiter for transforms, sources and patches is a semicolon, this character should not be used for filenames or paths.</para>
      <para>This function does not generate a Summary Information stream. Use
<see cref="MsiCreateTransformSummaryInfo" /> to create the stream for an existing transform.</para>
      <para>If <i>szTransformFile</i> is null, you can test whether two databases are identical without creating a transform. If the databases are identical, ERROR_NO_DATA is returned, NOERROR is returned if differences are found.</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseGenerateTransform as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-transforms">Database Transforms</seealso>
  </member>
  <member name="Windows.MsiDatabaseGenerateTransform">
    <summary>
      <para>The
<b>MsiDatabaseGenerateTransform</b> function generates a transform file of differences between two databases. A transform is a way of recording changes to a database without altering the original database. You can also use
<b>MsiDatabaseGenerateTransform</b> to test whether two databases are identical without creating a transform.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" /> that includes the changes.</para>
    </param>
    <param name="hDatabaseReference">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" /> that does not include the changes.</para>
    </param>
    <param name="szTransformFile">
      <para>A null-terminated string that specifies the name of the transform file being generated. This parameter can be null. If <i>szTransformFile</i> is null, you can use
<b>MsiDatabaseGenerateTransform</b> to test whether two databases are identical without creating a transform. If the databases are identical, the function returns ERROR_NO_DATA. If the databases are different the function returns NOERROR.</para>
    </param>
    <param name="iReserved1">
      <para>This is a reserved argument and must be set to 0.</para>
    </param>
    <param name="iReserved2">
      <para>This is a reserved argument and must be set to 0.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseGenerateTransform</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>To generate a difference file between two databases, use the
<b>MsiDatabaseGenerateTransform</b> function. A transform contains information regarding insertion and deletion of columns and rows. The validation flags are stored in the summary information stream of the transform file.</para>
      <para>For tables that exist in both databases, the only difference between the two schemas that is allowed is the addition of columns to the end of the reference table. You cannot add primary key columns to a table or change the order or names or column definitions of the existing columns as defined in the base table. In other words, if neither table contains data and columns are removed from the reference table, the resulting table is identical to the base table.</para>
      <para>Because the list delimiter for transforms, sources and patches is a semicolon, this character should not be used for filenames or paths.</para>
      <para>This function does not generate a Summary Information stream. Use
<see cref="MsiCreateTransformSummaryInfo" /> to create the stream for an existing transform.</para>
      <para>If <i>szTransformFile</i> is null, you can test whether two databases are identical without creating a transform. If the databases are identical, ERROR_NO_DATA is returned, NOERROR is returned if differences are found.</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseGenerateTransform as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-transforms">Database Transforms</seealso>
  </member>
  <member name="Windows.MsiDatabaseGenerateTransformA">
    <summary>
      <para>The
<b>MsiDatabaseGenerateTransform</b> function generates a transform file of differences between two databases. A transform is a way of recording changes to a database without altering the original database. You can also use
<b>MsiDatabaseGenerateTransform</b> to test whether two databases are identical without creating a transform.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" /> that includes the changes.</para>
    </param>
    <param name="hDatabaseReference">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" /> that does not include the changes.</para>
    </param>
    <param name="szTransformFile">
      <para>A null-terminated string that specifies the name of the transform file being generated. This parameter can be null. If <i>szTransformFile</i> is null, you can use
<b>MsiDatabaseGenerateTransform</b> to test whether two databases are identical without creating a transform. If the databases are identical, the function returns ERROR_NO_DATA. If the databases are different the function returns NOERROR.</para>
    </param>
    <param name="iReserved1">
      <para>This is a reserved argument and must be set to 0.</para>
    </param>
    <param name="iReserved2">
      <para>This is a reserved argument and must be set to 0.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseGenerateTransform</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>To generate a difference file between two databases, use the
<b>MsiDatabaseGenerateTransform</b> function. A transform contains information regarding insertion and deletion of columns and rows. The validation flags are stored in the summary information stream of the transform file.</para>
      <para>For tables that exist in both databases, the only difference between the two schemas that is allowed is the addition of columns to the end of the reference table. You cannot add primary key columns to a table or change the order or names or column definitions of the existing columns as defined in the base table. In other words, if neither table contains data and columns are removed from the reference table, the resulting table is identical to the base table.</para>
      <para>Because the list delimiter for transforms, sources and patches is a semicolon, this character should not be used for filenames or paths.</para>
      <para>This function does not generate a Summary Information stream. Use
<see cref="MsiCreateTransformSummaryInfo" /> to create the stream for an existing transform.</para>
      <para>If <i>szTransformFile</i> is null, you can test whether two databases are identical without creating a transform. If the databases are identical, ERROR_NO_DATA is returned, NOERROR is returned if differences are found.</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseGenerateTransform as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-transforms">Database Transforms</seealso>
  </member>
  <member name="Windows.MsiDatabaseGenerateTransformW">
    <summary>
      <para>The
<b>MsiDatabaseGenerateTransform</b> function generates a transform file of differences between two databases. A transform is a way of recording changes to a database without altering the original database. You can also use
<b>MsiDatabaseGenerateTransform</b> to test whether two databases are identical without creating a transform.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" /> that includes the changes.</para>
    </param>
    <param name="hDatabaseReference">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" /> that does not include the changes.</para>
    </param>
    <param name="szTransformFile">
      <para>A null-terminated string that specifies the name of the transform file being generated. This parameter can be null. If <i>szTransformFile</i> is null, you can use
<b>MsiDatabaseGenerateTransform</b> to test whether two databases are identical without creating a transform. If the databases are identical, the function returns ERROR_NO_DATA. If the databases are different the function returns NOERROR.</para>
    </param>
    <param name="iReserved1">
      <para>This is a reserved argument and must be set to 0.</para>
    </param>
    <param name="iReserved2">
      <para>This is a reserved argument and must be set to 0.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseGenerateTransform</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>To generate a difference file between two databases, use the
<b>MsiDatabaseGenerateTransform</b> function. A transform contains information regarding insertion and deletion of columns and rows. The validation flags are stored in the summary information stream of the transform file.</para>
      <para>For tables that exist in both databases, the only difference between the two schemas that is allowed is the addition of columns to the end of the reference table. You cannot add primary key columns to a table or change the order or names or column definitions of the existing columns as defined in the base table. In other words, if neither table contains data and columns are removed from the reference table, the resulting table is identical to the base table.</para>
      <para>Because the list delimiter for transforms, sources and patches is a semicolon, this character should not be used for filenames or paths.</para>
      <para>This function does not generate a Summary Information stream. Use
<see cref="MsiCreateTransformSummaryInfo" /> to create the stream for an existing transform.</para>
      <para>If <i>szTransformFile</i> is null, you can test whether two databases are identical without creating a transform. If the databases are identical, ERROR_NO_DATA is returned, NOERROR is returned if differences are found.</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseGenerateTransform as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-transforms">Database Transforms</seealso>
  </member>
  <member name="Windows.MsiDatabaseGetPrimaryKeys">
    <summary>
      <para>The
<b>MsiDatabaseGetPrimaryKeys</b> function returns a record containing the names of all the primary key columns for a specified table. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database. See
<a href="https://docs.microsoft.com//windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.</para>
    </param>
    <param name="szTableName">
      <para>Specifies the name of the table from which to obtain primary key names.</para>
    </param>
    <param name="phRecord">
      <para>Pointer to the handle of the record that holds the primary key names.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The field count of the returned record is the count of primary key columns returned by the
<b>MsiDatabaseGetPrimaryKeys</b> function. The returned record contains the table name in Field (0) and the column names that make up the primary key names in succeeding fields. These primary key names correspond to the column numbers for the fields.</para>
      <para>This function cannot be used with the
<a href="https://docs.microsoft.com//windows/desktop/Msi/-tables-table">_Tables table</a> or the
<a href="https://docs.microsoft.com//windows/desktop/Msi/-columns-table">_Columns table</a>.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseGetPrimaryKeys as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseGetPrimaryKeysA">
    <summary>
      <para>The
<b>MsiDatabaseGetPrimaryKeys</b> function returns a record containing the names of all the primary key columns for a specified table. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database. See
<a href="https://docs.microsoft.com//windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.</para>
    </param>
    <param name="szTableName">
      <para>Specifies the name of the table from which to obtain primary key names.</para>
    </param>
    <param name="phRecord">
      <para>Pointer to the handle of the record that holds the primary key names.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The field count of the returned record is the count of primary key columns returned by the
<b>MsiDatabaseGetPrimaryKeys</b> function. The returned record contains the table name in Field (0) and the column names that make up the primary key names in succeeding fields. These primary key names correspond to the column numbers for the fields.</para>
      <para>This function cannot be used with the
<a href="https://docs.microsoft.com//windows/desktop/Msi/-tables-table">_Tables table</a> or the
<a href="https://docs.microsoft.com//windows/desktop/Msi/-columns-table">_Columns table</a>.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseGetPrimaryKeys as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseGetPrimaryKeysW">
    <summary>
      <para>The
<b>MsiDatabaseGetPrimaryKeys</b> function returns a record containing the names of all the primary key columns for a specified table. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database. See
<a href="https://docs.microsoft.com//windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.</para>
    </param>
    <param name="szTableName">
      <para>Specifies the name of the table from which to obtain primary key names.</para>
    </param>
    <param name="phRecord">
      <para>Pointer to the handle of the record that holds the primary key names.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The field count of the returned record is the count of primary key columns returned by the
<b>MsiDatabaseGetPrimaryKeys</b> function. The returned record contains the table name in Field (0) and the column names that make up the primary key names in succeeding fields. These primary key names correspond to the column numbers for the fields.</para>
      <para>This function cannot be used with the
<a href="https://docs.microsoft.com//windows/desktop/Msi/-tables-table">_Tables table</a> or the
<a href="https://docs.microsoft.com//windows/desktop/Msi/-columns-table">_Columns table</a>.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseGetPrimaryKeys as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseGetPrimaryKeys">
    <summary>
      <para>The
<b>MsiDatabaseGetPrimaryKeys</b> function returns a record containing the names of all the primary key columns for a specified table. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database. See
<a href="https://docs.microsoft.com//windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.</para>
    </param>
    <param name="szTableName">
      <para>Specifies the name of the table from which to obtain primary key names.</para>
    </param>
    <param name="phRecord">
      <para>Pointer to the handle of the record that holds the primary key names.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The field count of the returned record is the count of primary key columns returned by the
<b>MsiDatabaseGetPrimaryKeys</b> function. The returned record contains the table name in Field (0) and the column names that make up the primary key names in succeeding fields. These primary key names correspond to the column numbers for the fields.</para>
      <para>This function cannot be used with the
<a href="https://docs.microsoft.com//windows/desktop/Msi/-tables-table">_Tables table</a> or the
<a href="https://docs.microsoft.com//windows/desktop/Msi/-columns-table">_Columns table</a>.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseGetPrimaryKeys as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseGetPrimaryKeysA">
    <summary>
      <para>The
<b>MsiDatabaseGetPrimaryKeys</b> function returns a record containing the names of all the primary key columns for a specified table. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database. See
<a href="https://docs.microsoft.com//windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.</para>
    </param>
    <param name="szTableName">
      <para>Specifies the name of the table from which to obtain primary key names.</para>
    </param>
    <param name="phRecord">
      <para>Pointer to the handle of the record that holds the primary key names.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The field count of the returned record is the count of primary key columns returned by the
<b>MsiDatabaseGetPrimaryKeys</b> function. The returned record contains the table name in Field (0) and the column names that make up the primary key names in succeeding fields. These primary key names correspond to the column numbers for the fields.</para>
      <para>This function cannot be used with the
<a href="https://docs.microsoft.com//windows/desktop/Msi/-tables-table">_Tables table</a> or the
<a href="https://docs.microsoft.com//windows/desktop/Msi/-columns-table">_Columns table</a>.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseGetPrimaryKeys as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseGetPrimaryKeysW">
    <summary>
      <para>The
<b>MsiDatabaseGetPrimaryKeys</b> function returns a record containing the names of all the primary key columns for a specified table. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database. See
<a href="https://docs.microsoft.com//windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.</para>
    </param>
    <param name="szTableName">
      <para>Specifies the name of the table from which to obtain primary key names.</para>
    </param>
    <param name="phRecord">
      <para>Pointer to the handle of the record that holds the primary key names.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The field count of the returned record is the count of primary key columns returned by the
<b>MsiDatabaseGetPrimaryKeys</b> function. The returned record contains the table name in Field (0) and the column names that make up the primary key names in succeeding fields. These primary key names correspond to the column numbers for the fields.</para>
      <para>This function cannot be used with the
<a href="https://docs.microsoft.com//windows/desktop/Msi/-tables-table">_Tables table</a> or the
<a href="https://docs.microsoft.com//windows/desktop/Msi/-columns-table">_Columns table</a>.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseGetPrimaryKeys as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseImport">
    <summary>
      <para>The
<b>MsiDatabaseImport</b> function imports an installer <a href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">text archive file</a>  into an open database table.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" />.</para>
    </param>
    <param name="szFolderPath">
      <para>Specifies the path to the folder that contains archive files.</para>
    </param>
    <param name="szFileName">
      <para>Specifies the name of the file to import.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseImport</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>When you use the
<b>MsiDatabaseImport</b> function to import a text archive table named _SummaryInformation into an installer database, you write the "05SummaryInformation" stream. This stream contains standard properties that can be viewed using Windows Explorer and are defined by COM. The rows of the table are written to the property stream as pairs of property ID numbers and corresponding data values. See
<a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>. Date and time in _SummaryInformation are in the format: YYYY/MM/DD hh.mm.ss. For example, 1999/03/22 15:25:45. If the table contains binary streams, the name of the stream is in the data field, and the actual stream is retrieved from a file of that name in a subfolder with the same name as the table.</para>
      <para>Text archive files that are exported from a database by
<see cref="MsiDatabaseExport" /> are intended for use with version control systems, and are not intended to be used as a means of editing data. Use the database API functions and tools designed for that purpose. Note that control characters in text archive files are translated to avoid conflicts with file delimiters. If a text archive file contains non-ASCII data, it is stamped with the code page of the data, and can only be imported into a database of that exact code page, or into a neutral database. Neutral databases are set to the code page of the imported file. A database can be unconditionally set to a particular code page by importing a pseudo table named: _ForceCodepage. The format of such a file is: Two blank lines, followed by a line that contains the numeric code page, a tab delimiter and the exact string: _ForceCodepage</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseImport as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">Text Archive Files </seealso>
  </member>
  <member name="Windows.MsiDatabaseImportA">
    <summary>
      <para>The
<b>MsiDatabaseImport</b> function imports an installer <a href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">text archive file</a>  into an open database table.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" />.</para>
    </param>
    <param name="szFolderPath">
      <para>Specifies the path to the folder that contains archive files.</para>
    </param>
    <param name="szFileName">
      <para>Specifies the name of the file to import.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseImport</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>When you use the
<b>MsiDatabaseImport</b> function to import a text archive table named _SummaryInformation into an installer database, you write the "05SummaryInformation" stream. This stream contains standard properties that can be viewed using Windows Explorer and are defined by COM. The rows of the table are written to the property stream as pairs of property ID numbers and corresponding data values. See
<a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>. Date and time in _SummaryInformation are in the format: YYYY/MM/DD hh.mm.ss. For example, 1999/03/22 15:25:45. If the table contains binary streams, the name of the stream is in the data field, and the actual stream is retrieved from a file of that name in a subfolder with the same name as the table.</para>
      <para>Text archive files that are exported from a database by
<see cref="MsiDatabaseExport" /> are intended for use with version control systems, and are not intended to be used as a means of editing data. Use the database API functions and tools designed for that purpose. Note that control characters in text archive files are translated to avoid conflicts with file delimiters. If a text archive file contains non-ASCII data, it is stamped with the code page of the data, and can only be imported into a database of that exact code page, or into a neutral database. Neutral databases are set to the code page of the imported file. A database can be unconditionally set to a particular code page by importing a pseudo table named: _ForceCodepage. The format of such a file is: Two blank lines, followed by a line that contains the numeric code page, a tab delimiter and the exact string: _ForceCodepage</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseImport as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">Text Archive Files </seealso>
  </member>
  <member name="Windows.MsiDatabaseImportW">
    <summary>
      <para>The
<b>MsiDatabaseImport</b> function imports an installer <a href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">text archive file</a>  into an open database table.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" />.</para>
    </param>
    <param name="szFolderPath">
      <para>Specifies the path to the folder that contains archive files.</para>
    </param>
    <param name="szFileName">
      <para>Specifies the name of the file to import.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseImport</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>When you use the
<b>MsiDatabaseImport</b> function to import a text archive table named _SummaryInformation into an installer database, you write the "05SummaryInformation" stream. This stream contains standard properties that can be viewed using Windows Explorer and are defined by COM. The rows of the table are written to the property stream as pairs of property ID numbers and corresponding data values. See
<a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>. Date and time in _SummaryInformation are in the format: YYYY/MM/DD hh.mm.ss. For example, 1999/03/22 15:25:45. If the table contains binary streams, the name of the stream is in the data field, and the actual stream is retrieved from a file of that name in a subfolder with the same name as the table.</para>
      <para>Text archive files that are exported from a database by
<see cref="MsiDatabaseExport" /> are intended for use with version control systems, and are not intended to be used as a means of editing data. Use the database API functions and tools designed for that purpose. Note that control characters in text archive files are translated to avoid conflicts with file delimiters. If a text archive file contains non-ASCII data, it is stamped with the code page of the data, and can only be imported into a database of that exact code page, or into a neutral database. Neutral databases are set to the code page of the imported file. A database can be unconditionally set to a particular code page by importing a pseudo table named: _ForceCodepage. The format of such a file is: Two blank lines, followed by a line that contains the numeric code page, a tab delimiter and the exact string: _ForceCodepage</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseImport as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">Text Archive Files </seealso>
  </member>
  <member name="Windows.MsiDatabaseImport">
    <summary>
      <para>The
<b>MsiDatabaseImport</b> function imports an installer <a href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">text archive file</a>  into an open database table.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" />.</para>
    </param>
    <param name="szFolderPath">
      <para>Specifies the path to the folder that contains archive files.</para>
    </param>
    <param name="szFileName">
      <para>Specifies the name of the file to import.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseImport</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>When you use the
<b>MsiDatabaseImport</b> function to import a text archive table named _SummaryInformation into an installer database, you write the "05SummaryInformation" stream. This stream contains standard properties that can be viewed using Windows Explorer and are defined by COM. The rows of the table are written to the property stream as pairs of property ID numbers and corresponding data values. See
<a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>. Date and time in _SummaryInformation are in the format: YYYY/MM/DD hh.mm.ss. For example, 1999/03/22 15:25:45. If the table contains binary streams, the name of the stream is in the data field, and the actual stream is retrieved from a file of that name in a subfolder with the same name as the table.</para>
      <para>Text archive files that are exported from a database by
<see cref="MsiDatabaseExport" /> are intended for use with version control systems, and are not intended to be used as a means of editing data. Use the database API functions and tools designed for that purpose. Note that control characters in text archive files are translated to avoid conflicts with file delimiters. If a text archive file contains non-ASCII data, it is stamped with the code page of the data, and can only be imported into a database of that exact code page, or into a neutral database. Neutral databases are set to the code page of the imported file. A database can be unconditionally set to a particular code page by importing a pseudo table named: _ForceCodepage. The format of such a file is: Two blank lines, followed by a line that contains the numeric code page, a tab delimiter and the exact string: _ForceCodepage</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseImport as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">Text Archive Files </seealso>
  </member>
  <member name="Windows.MsiDatabaseImportA">
    <summary>
      <para>The
<b>MsiDatabaseImport</b> function imports an installer <a href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">text archive file</a>  into an open database table.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" />.</para>
    </param>
    <param name="szFolderPath">
      <para>Specifies the path to the folder that contains archive files.</para>
    </param>
    <param name="szFileName">
      <para>Specifies the name of the file to import.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseImport</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>When you use the
<b>MsiDatabaseImport</b> function to import a text archive table named _SummaryInformation into an installer database, you write the "05SummaryInformation" stream. This stream contains standard properties that can be viewed using Windows Explorer and are defined by COM. The rows of the table are written to the property stream as pairs of property ID numbers and corresponding data values. See
<a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>. Date and time in _SummaryInformation are in the format: YYYY/MM/DD hh.mm.ss. For example, 1999/03/22 15:25:45. If the table contains binary streams, the name of the stream is in the data field, and the actual stream is retrieved from a file of that name in a subfolder with the same name as the table.</para>
      <para>Text archive files that are exported from a database by
<see cref="MsiDatabaseExport" /> are intended for use with version control systems, and are not intended to be used as a means of editing data. Use the database API functions and tools designed for that purpose. Note that control characters in text archive files are translated to avoid conflicts with file delimiters. If a text archive file contains non-ASCII data, it is stamped with the code page of the data, and can only be imported into a database of that exact code page, or into a neutral database. Neutral databases are set to the code page of the imported file. A database can be unconditionally set to a particular code page by importing a pseudo table named: _ForceCodepage. The format of such a file is: Two blank lines, followed by a line that contains the numeric code page, a tab delimiter and the exact string: _ForceCodepage</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseImport as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">Text Archive Files </seealso>
  </member>
  <member name="Windows.MsiDatabaseImportW">
    <summary>
      <para>The
<b>MsiDatabaseImport</b> function imports an installer <a href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">text archive file</a>  into an open database table.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" />.</para>
    </param>
    <param name="szFolderPath">
      <para>Specifies the path to the folder that contains archive files.</para>
    </param>
    <param name="szFileName">
      <para>Specifies the name of the file to import.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseImport</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>When you use the
<b>MsiDatabaseImport</b> function to import a text archive table named _SummaryInformation into an installer database, you write the "05SummaryInformation" stream. This stream contains standard properties that can be viewed using Windows Explorer and are defined by COM. The rows of the table are written to the property stream as pairs of property ID numbers and corresponding data values. See
<a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>. Date and time in _SummaryInformation are in the format: YYYY/MM/DD hh.mm.ss. For example, 1999/03/22 15:25:45. If the table contains binary streams, the name of the stream is in the data field, and the actual stream is retrieved from a file of that name in a subfolder with the same name as the table.</para>
      <para>Text archive files that are exported from a database by
<see cref="MsiDatabaseExport" /> are intended for use with version control systems, and are not intended to be used as a means of editing data. Use the database API functions and tools designed for that purpose. Note that control characters in text archive files are translated to avoid conflicts with file delimiters. If a text archive file contains non-ASCII data, it is stamped with the code page of the data, and can only be imported into a database of that exact code page, or into a neutral database. Neutral databases are set to the code page of the imported file. A database can be unconditionally set to a particular code page by importing a pseudo table named: _ForceCodepage. The format of such a file is: Two blank lines, followed by a line that contains the numeric code page, a tab delimiter and the exact string: _ForceCodepage</para>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseImport as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/text-archive-files">Text Archive Files </seealso>
  </member>
  <member name="Windows.MsiDatabaseIsTablePersistent">
    <summary>
      <para>The
<b>MsiDatabaseIsTablePersistent</b> function returns an enumeration that describes the state of a specific table.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database that belongs to the relevant table. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.</para>
    </param>
    <param name="szTableName">
      <para>Specifies the name of the relevant table.</para>
    </param>
    <returns>
      <para>This function returns MSICONDITION.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseIsTablePersistent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseIsTablePersistentA">
    <summary>
      <para>The
<b>MsiDatabaseIsTablePersistent</b> function returns an enumeration that describes the state of a specific table.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database that belongs to the relevant table. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.</para>
    </param>
    <param name="szTableName">
      <para>Specifies the name of the relevant table.</para>
    </param>
    <returns>
      <para>This function returns MSICONDITION.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseIsTablePersistent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseIsTablePersistentW">
    <summary>
      <para>The
<b>MsiDatabaseIsTablePersistent</b> function returns an enumeration that describes the state of a specific table.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database that belongs to the relevant table. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.</para>
    </param>
    <param name="szTableName">
      <para>Specifies the name of the relevant table.</para>
    </param>
    <returns>
      <para>This function returns MSICONDITION.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseIsTablePersistent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseIsTablePersistent">
    <summary>
      <para>The
<b>MsiDatabaseIsTablePersistent</b> function returns an enumeration that describes the state of a specific table.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database that belongs to the relevant table. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.</para>
    </param>
    <param name="szTableName">
      <para>Specifies the name of the relevant table.</para>
    </param>
    <returns>
      <para>This function returns MSICONDITION.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseIsTablePersistent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseIsTablePersistentA">
    <summary>
      <para>The
<b>MsiDatabaseIsTablePersistent</b> function returns an enumeration that describes the state of a specific table.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database that belongs to the relevant table. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.</para>
    </param>
    <param name="szTableName">
      <para>Specifies the name of the relevant table.</para>
    </param>
    <returns>
      <para>This function returns MSICONDITION.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseIsTablePersistent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseIsTablePersistentW">
    <summary>
      <para>The
<b>MsiDatabaseIsTablePersistent</b> function returns an enumeration that describes the state of a specific table.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database that belongs to the relevant table. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.</para>
    </param>
    <param name="szTableName">
      <para>Specifies the name of the relevant table.</para>
    </param>
    <returns>
      <para>This function returns MSICONDITION.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseIsTablePersistent as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseMerge">
    <summary>
      <para>The
<b>MsiDatabaseMerge</b> function merges two databases together, which allows duplicate rows.</para>
    </summary>
    <param name="hDatabase">
      <para>The handle to the database obtained from <see cref="MsiOpenDatabase" />.</para>
    </param>
    <param name="hDatabaseMerge">
      <para>The handle to the database obtained from <see cref="MsiOpenDatabase" /> to merge into the base database.</para>
    </param>
    <param name="szTableName">
      <para>The name of the table to receive merge conflict information.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseMerge</b> function returns one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Row merge conflicts were reported.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>An invalid or inactive handle was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_TABLE</b>
            </para>
          </description>
          <description>
            <para>An invalid table was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_DATATYPE_MISMATCH</b>
            </para>
          </description>
          <description>
            <para>Schema difference between the two databases.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <b>MsiDatabaseMerge</b> function and the <a href="https://docs.microsoft.com//windows/desktop/Msi/database-merge">Merge</a> method of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/database-object">Database</a> object cannot be used to merge a module that is included in the installation package. They should not be used to merge
<a href="https://docs.microsoft.com//windows/desktop/Msi/merge-modules">Merge Modules</a> into a Windows Installer package.  To include a merge module in an installation package, authors of installation packages should follow the guidelines that are described in the <a href="https://docs.microsoft.com//windows/desktop/Msi/applying-merge-modules">Applying Merge Modules</a> topic.</para>
      <para>
        <b>MsiDatabaseMerge</b> does not copy over embedded
<a href="https://docs.microsoft.com//windows/desktop/Msi/cabinet-files">Cabinet Files</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/embedded-transforms">embedded transforms</a> from the reference database into the target database. Embedded data streams that are listed in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/binary-table">Binary Table</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/icon-table">Icon Table</a> are copied from the reference database to the target database. Storage embedded in the reference database are not copied to the target database.</para>
      <para>The
<b>MsiDatabaseMerge</b> function merges the data of two databases. These databases must have the same code page.
<b>MsiDatabaseMerge</b> fails if any tables or rows in the databases conflict. A conflict exists if the data in any row in the first database differs from the data in the corresponding row of the second database. Corresponding rows are in the same table of both databases and have the same primary key in both databases. The tables of non-conflicting databases must have the same number of primary keys, same number of columns, same column types, same column names, and the same data in rows with identical primary keys. Temporary columns however don't matter in the column count and corresponding tables can have a different number of temporary columns without creating conflict as long as the persistent columns match.</para>
      <para>If the number, type, or name of columns in corresponding tables are different, the schema of the two databases are incompatible and the installer stops processing tables and the merge fails. The installer checks that the two databases have the same schema before checking for row merge conflicts. If ERROR_DATATYPE_MISMATCH is returned, you are guaranteed that the databases have not been changed.</para>
      <para>If the data in particular rows differ, this is a row merge conflict, the installer returns ERROR_FUNCTION_FAILED and creates a new table named <i>szTableName</i>. The first column of this table is the name of the table having the conflict. The second column gives the number of rows in the table having the conflict. The table that reports conflicts appears as follows.</para>
      <list type="table">
        <listheader>
          <description>Column</description>
          <description>Type</description>
          <description>Key</description>
          <description>Nullable</description>
        </listheader>
        <item>
          <description>Table</description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/text">Text</a>
          </description>
          <description>Y</description>
          <description>N</description>
        </item>
        <item>
          <description>NumRowMergeConflicts</description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/integer">Integer</a>
          </description>
          <description> </description>
          <description>N</description>
        </item>
      </list>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseMerge as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/column-definition-format">Column Definition Format</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseMergeA">
    <summary>
      <para>The
<b>MsiDatabaseMerge</b> function merges two databases together, which allows duplicate rows.</para>
    </summary>
    <param name="hDatabase">
      <para>The handle to the database obtained from <see cref="MsiOpenDatabase" />.</para>
    </param>
    <param name="hDatabaseMerge">
      <para>The handle to the database obtained from <see cref="MsiOpenDatabase" /> to merge into the base database.</para>
    </param>
    <param name="szTableName">
      <para>The name of the table to receive merge conflict information.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseMerge</b> function returns one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Row merge conflicts were reported.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>An invalid or inactive handle was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_TABLE</b>
            </para>
          </description>
          <description>
            <para>An invalid table was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_DATATYPE_MISMATCH</b>
            </para>
          </description>
          <description>
            <para>Schema difference between the two databases.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <b>MsiDatabaseMerge</b> function and the <a href="https://docs.microsoft.com//windows/desktop/Msi/database-merge">Merge</a> method of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/database-object">Database</a> object cannot be used to merge a module that is included in the installation package. They should not be used to merge
<a href="https://docs.microsoft.com//windows/desktop/Msi/merge-modules">Merge Modules</a> into a Windows Installer package.  To include a merge module in an installation package, authors of installation packages should follow the guidelines that are described in the <a href="https://docs.microsoft.com//windows/desktop/Msi/applying-merge-modules">Applying Merge Modules</a> topic.</para>
      <para>
        <b>MsiDatabaseMerge</b> does not copy over embedded
<a href="https://docs.microsoft.com//windows/desktop/Msi/cabinet-files">Cabinet Files</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/embedded-transforms">embedded transforms</a> from the reference database into the target database. Embedded data streams that are listed in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/binary-table">Binary Table</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/icon-table">Icon Table</a> are copied from the reference database to the target database. Storage embedded in the reference database are not copied to the target database.</para>
      <para>The
<b>MsiDatabaseMerge</b> function merges the data of two databases. These databases must have the same code page.
<b>MsiDatabaseMerge</b> fails if any tables or rows in the databases conflict. A conflict exists if the data in any row in the first database differs from the data in the corresponding row of the second database. Corresponding rows are in the same table of both databases and have the same primary key in both databases. The tables of non-conflicting databases must have the same number of primary keys, same number of columns, same column types, same column names, and the same data in rows with identical primary keys. Temporary columns however don't matter in the column count and corresponding tables can have a different number of temporary columns without creating conflict as long as the persistent columns match.</para>
      <para>If the number, type, or name of columns in corresponding tables are different, the schema of the two databases are incompatible and the installer stops processing tables and the merge fails. The installer checks that the two databases have the same schema before checking for row merge conflicts. If ERROR_DATATYPE_MISMATCH is returned, you are guaranteed that the databases have not been changed.</para>
      <para>If the data in particular rows differ, this is a row merge conflict, the installer returns ERROR_FUNCTION_FAILED and creates a new table named <i>szTableName</i>. The first column of this table is the name of the table having the conflict. The second column gives the number of rows in the table having the conflict. The table that reports conflicts appears as follows.</para>
      <list type="table">
        <listheader>
          <description>Column</description>
          <description>Type</description>
          <description>Key</description>
          <description>Nullable</description>
        </listheader>
        <item>
          <description>Table</description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/text">Text</a>
          </description>
          <description>Y</description>
          <description>N</description>
        </item>
        <item>
          <description>NumRowMergeConflicts</description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/integer">Integer</a>
          </description>
          <description> </description>
          <description>N</description>
        </item>
      </list>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseMerge as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/column-definition-format">Column Definition Format</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseMergeW">
    <summary>
      <para>The
<b>MsiDatabaseMerge</b> function merges two databases together, which allows duplicate rows.</para>
    </summary>
    <param name="hDatabase">
      <para>The handle to the database obtained from <see cref="MsiOpenDatabase" />.</para>
    </param>
    <param name="hDatabaseMerge">
      <para>The handle to the database obtained from <see cref="MsiOpenDatabase" /> to merge into the base database.</para>
    </param>
    <param name="szTableName">
      <para>The name of the table to receive merge conflict information.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseMerge</b> function returns one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Row merge conflicts were reported.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>An invalid or inactive handle was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_TABLE</b>
            </para>
          </description>
          <description>
            <para>An invalid table was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_DATATYPE_MISMATCH</b>
            </para>
          </description>
          <description>
            <para>Schema difference between the two databases.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <b>MsiDatabaseMerge</b> function and the <a href="https://docs.microsoft.com//windows/desktop/Msi/database-merge">Merge</a> method of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/database-object">Database</a> object cannot be used to merge a module that is included in the installation package. They should not be used to merge
<a href="https://docs.microsoft.com//windows/desktop/Msi/merge-modules">Merge Modules</a> into a Windows Installer package.  To include a merge module in an installation package, authors of installation packages should follow the guidelines that are described in the <a href="https://docs.microsoft.com//windows/desktop/Msi/applying-merge-modules">Applying Merge Modules</a> topic.</para>
      <para>
        <b>MsiDatabaseMerge</b> does not copy over embedded
<a href="https://docs.microsoft.com//windows/desktop/Msi/cabinet-files">Cabinet Files</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/embedded-transforms">embedded transforms</a> from the reference database into the target database. Embedded data streams that are listed in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/binary-table">Binary Table</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/icon-table">Icon Table</a> are copied from the reference database to the target database. Storage embedded in the reference database are not copied to the target database.</para>
      <para>The
<b>MsiDatabaseMerge</b> function merges the data of two databases. These databases must have the same code page.
<b>MsiDatabaseMerge</b> fails if any tables or rows in the databases conflict. A conflict exists if the data in any row in the first database differs from the data in the corresponding row of the second database. Corresponding rows are in the same table of both databases and have the same primary key in both databases. The tables of non-conflicting databases must have the same number of primary keys, same number of columns, same column types, same column names, and the same data in rows with identical primary keys. Temporary columns however don't matter in the column count and corresponding tables can have a different number of temporary columns without creating conflict as long as the persistent columns match.</para>
      <para>If the number, type, or name of columns in corresponding tables are different, the schema of the two databases are incompatible and the installer stops processing tables and the merge fails. The installer checks that the two databases have the same schema before checking for row merge conflicts. If ERROR_DATATYPE_MISMATCH is returned, you are guaranteed that the databases have not been changed.</para>
      <para>If the data in particular rows differ, this is a row merge conflict, the installer returns ERROR_FUNCTION_FAILED and creates a new table named <i>szTableName</i>. The first column of this table is the name of the table having the conflict. The second column gives the number of rows in the table having the conflict. The table that reports conflicts appears as follows.</para>
      <list type="table">
        <listheader>
          <description>Column</description>
          <description>Type</description>
          <description>Key</description>
          <description>Nullable</description>
        </listheader>
        <item>
          <description>Table</description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/text">Text</a>
          </description>
          <description>Y</description>
          <description>N</description>
        </item>
        <item>
          <description>NumRowMergeConflicts</description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/integer">Integer</a>
          </description>
          <description> </description>
          <description>N</description>
        </item>
      </list>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseMerge as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/column-definition-format">Column Definition Format</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseMerge">
    <summary>
      <para>The
<b>MsiDatabaseMerge</b> function merges two databases together, which allows duplicate rows.</para>
    </summary>
    <param name="hDatabase">
      <para>The handle to the database obtained from <see cref="MsiOpenDatabase" />.</para>
    </param>
    <param name="hDatabaseMerge">
      <para>The handle to the database obtained from <see cref="MsiOpenDatabase" /> to merge into the base database.</para>
    </param>
    <param name="szTableName">
      <para>The name of the table to receive merge conflict information.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseMerge</b> function returns one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Row merge conflicts were reported.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>An invalid or inactive handle was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_TABLE</b>
            </para>
          </description>
          <description>
            <para>An invalid table was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_DATATYPE_MISMATCH</b>
            </para>
          </description>
          <description>
            <para>Schema difference between the two databases.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <b>MsiDatabaseMerge</b> function and the <a href="https://docs.microsoft.com//windows/desktop/Msi/database-merge">Merge</a> method of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/database-object">Database</a> object cannot be used to merge a module that is included in the installation package. They should not be used to merge
<a href="https://docs.microsoft.com//windows/desktop/Msi/merge-modules">Merge Modules</a> into a Windows Installer package.  To include a merge module in an installation package, authors of installation packages should follow the guidelines that are described in the <a href="https://docs.microsoft.com//windows/desktop/Msi/applying-merge-modules">Applying Merge Modules</a> topic.</para>
      <para>
        <b>MsiDatabaseMerge</b> does not copy over embedded
<a href="https://docs.microsoft.com//windows/desktop/Msi/cabinet-files">Cabinet Files</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/embedded-transforms">embedded transforms</a> from the reference database into the target database. Embedded data streams that are listed in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/binary-table">Binary Table</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/icon-table">Icon Table</a> are copied from the reference database to the target database. Storage embedded in the reference database are not copied to the target database.</para>
      <para>The
<b>MsiDatabaseMerge</b> function merges the data of two databases. These databases must have the same code page.
<b>MsiDatabaseMerge</b> fails if any tables or rows in the databases conflict. A conflict exists if the data in any row in the first database differs from the data in the corresponding row of the second database. Corresponding rows are in the same table of both databases and have the same primary key in both databases. The tables of non-conflicting databases must have the same number of primary keys, same number of columns, same column types, same column names, and the same data in rows with identical primary keys. Temporary columns however don't matter in the column count and corresponding tables can have a different number of temporary columns without creating conflict as long as the persistent columns match.</para>
      <para>If the number, type, or name of columns in corresponding tables are different, the schema of the two databases are incompatible and the installer stops processing tables and the merge fails. The installer checks that the two databases have the same schema before checking for row merge conflicts. If ERROR_DATATYPE_MISMATCH is returned, you are guaranteed that the databases have not been changed.</para>
      <para>If the data in particular rows differ, this is a row merge conflict, the installer returns ERROR_FUNCTION_FAILED and creates a new table named <i>szTableName</i>. The first column of this table is the name of the table having the conflict. The second column gives the number of rows in the table having the conflict. The table that reports conflicts appears as follows.</para>
      <list type="table">
        <listheader>
          <description>Column</description>
          <description>Type</description>
          <description>Key</description>
          <description>Nullable</description>
        </listheader>
        <item>
          <description>Table</description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/text">Text</a>
          </description>
          <description>Y</description>
          <description>N</description>
        </item>
        <item>
          <description>NumRowMergeConflicts</description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/integer">Integer</a>
          </description>
          <description> </description>
          <description>N</description>
        </item>
      </list>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseMerge as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/column-definition-format">Column Definition Format</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseMergeA">
    <summary>
      <para>The
<b>MsiDatabaseMerge</b> function merges two databases together, which allows duplicate rows.</para>
    </summary>
    <param name="hDatabase">
      <para>The handle to the database obtained from <see cref="MsiOpenDatabase" />.</para>
    </param>
    <param name="hDatabaseMerge">
      <para>The handle to the database obtained from <see cref="MsiOpenDatabase" /> to merge into the base database.</para>
    </param>
    <param name="szTableName">
      <para>The name of the table to receive merge conflict information.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseMerge</b> function returns one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Row merge conflicts were reported.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>An invalid or inactive handle was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_TABLE</b>
            </para>
          </description>
          <description>
            <para>An invalid table was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_DATATYPE_MISMATCH</b>
            </para>
          </description>
          <description>
            <para>Schema difference between the two databases.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <b>MsiDatabaseMerge</b> function and the <a href="https://docs.microsoft.com//windows/desktop/Msi/database-merge">Merge</a> method of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/database-object">Database</a> object cannot be used to merge a module that is included in the installation package. They should not be used to merge
<a href="https://docs.microsoft.com//windows/desktop/Msi/merge-modules">Merge Modules</a> into a Windows Installer package.  To include a merge module in an installation package, authors of installation packages should follow the guidelines that are described in the <a href="https://docs.microsoft.com//windows/desktop/Msi/applying-merge-modules">Applying Merge Modules</a> topic.</para>
      <para>
        <b>MsiDatabaseMerge</b> does not copy over embedded
<a href="https://docs.microsoft.com//windows/desktop/Msi/cabinet-files">Cabinet Files</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/embedded-transforms">embedded transforms</a> from the reference database into the target database. Embedded data streams that are listed in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/binary-table">Binary Table</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/icon-table">Icon Table</a> are copied from the reference database to the target database. Storage embedded in the reference database are not copied to the target database.</para>
      <para>The
<b>MsiDatabaseMerge</b> function merges the data of two databases. These databases must have the same code page.
<b>MsiDatabaseMerge</b> fails if any tables or rows in the databases conflict. A conflict exists if the data in any row in the first database differs from the data in the corresponding row of the second database. Corresponding rows are in the same table of both databases and have the same primary key in both databases. The tables of non-conflicting databases must have the same number of primary keys, same number of columns, same column types, same column names, and the same data in rows with identical primary keys. Temporary columns however don't matter in the column count and corresponding tables can have a different number of temporary columns without creating conflict as long as the persistent columns match.</para>
      <para>If the number, type, or name of columns in corresponding tables are different, the schema of the two databases are incompatible and the installer stops processing tables and the merge fails. The installer checks that the two databases have the same schema before checking for row merge conflicts. If ERROR_DATATYPE_MISMATCH is returned, you are guaranteed that the databases have not been changed.</para>
      <para>If the data in particular rows differ, this is a row merge conflict, the installer returns ERROR_FUNCTION_FAILED and creates a new table named <i>szTableName</i>. The first column of this table is the name of the table having the conflict. The second column gives the number of rows in the table having the conflict. The table that reports conflicts appears as follows.</para>
      <list type="table">
        <listheader>
          <description>Column</description>
          <description>Type</description>
          <description>Key</description>
          <description>Nullable</description>
        </listheader>
        <item>
          <description>Table</description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/text">Text</a>
          </description>
          <description>Y</description>
          <description>N</description>
        </item>
        <item>
          <description>NumRowMergeConflicts</description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/integer">Integer</a>
          </description>
          <description> </description>
          <description>N</description>
        </item>
      </list>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseMerge as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/column-definition-format">Column Definition Format</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseMergeW">
    <summary>
      <para>The
<b>MsiDatabaseMerge</b> function merges two databases together, which allows duplicate rows.</para>
    </summary>
    <param name="hDatabase">
      <para>The handle to the database obtained from <see cref="MsiOpenDatabase" />.</para>
    </param>
    <param name="hDatabaseMerge">
      <para>The handle to the database obtained from <see cref="MsiOpenDatabase" /> to merge into the base database.</para>
    </param>
    <param name="szTableName">
      <para>The name of the table to receive merge conflict information.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseMerge</b> function returns one of the following values:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_FAILED</b>
            </para>
          </description>
          <description>
            <para>Row merge conflicts were reported.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>An invalid or inactive handle was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_TABLE</b>
            </para>
          </description>
          <description>
            <para>An invalid table was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function succeeded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_DATATYPE_MISMATCH</b>
            </para>
          </description>
          <description>
            <para>Schema difference between the two databases.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <b>MsiDatabaseMerge</b> function and the <a href="https://docs.microsoft.com//windows/desktop/Msi/database-merge">Merge</a> method of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/database-object">Database</a> object cannot be used to merge a module that is included in the installation package. They should not be used to merge
<a href="https://docs.microsoft.com//windows/desktop/Msi/merge-modules">Merge Modules</a> into a Windows Installer package.  To include a merge module in an installation package, authors of installation packages should follow the guidelines that are described in the <a href="https://docs.microsoft.com//windows/desktop/Msi/applying-merge-modules">Applying Merge Modules</a> topic.</para>
      <para>
        <b>MsiDatabaseMerge</b> does not copy over embedded
<a href="https://docs.microsoft.com//windows/desktop/Msi/cabinet-files">Cabinet Files</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/embedded-transforms">embedded transforms</a> from the reference database into the target database. Embedded data streams that are listed in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/binary-table">Binary Table</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/icon-table">Icon Table</a> are copied from the reference database to the target database. Storage embedded in the reference database are not copied to the target database.</para>
      <para>The
<b>MsiDatabaseMerge</b> function merges the data of two databases. These databases must have the same code page.
<b>MsiDatabaseMerge</b> fails if any tables or rows in the databases conflict. A conflict exists if the data in any row in the first database differs from the data in the corresponding row of the second database. Corresponding rows are in the same table of both databases and have the same primary key in both databases. The tables of non-conflicting databases must have the same number of primary keys, same number of columns, same column types, same column names, and the same data in rows with identical primary keys. Temporary columns however don't matter in the column count and corresponding tables can have a different number of temporary columns without creating conflict as long as the persistent columns match.</para>
      <para>If the number, type, or name of columns in corresponding tables are different, the schema of the two databases are incompatible and the installer stops processing tables and the merge fails. The installer checks that the two databases have the same schema before checking for row merge conflicts. If ERROR_DATATYPE_MISMATCH is returned, you are guaranteed that the databases have not been changed.</para>
      <para>If the data in particular rows differ, this is a row merge conflict, the installer returns ERROR_FUNCTION_FAILED and creates a new table named <i>szTableName</i>. The first column of this table is the name of the table having the conflict. The second column gives the number of rows in the table having the conflict. The table that reports conflicts appears as follows.</para>
      <list type="table">
        <listheader>
          <description>Column</description>
          <description>Type</description>
          <description>Key</description>
          <description>Nullable</description>
        </listheader>
        <item>
          <description>Table</description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/text">Text</a>
          </description>
          <description>Y</description>
          <description>N</description>
        </item>
        <item>
          <description>NumRowMergeConflicts</description>
          <description>
            <a href="https://docs.microsoft.com//windows/desktop/Msi/integer">Integer</a>
          </description>
          <description> </description>
          <description>N</description>
        </item>
      </list>
      <para>This function cannot be called from custom actions. A call to this function from a custom action causes the function to fail.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseMerge as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/column-definition-format">Column Definition Format</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseOpenView">
    <summary>
      <para>The
<b>MsiDatabaseOpenView</b> function prepares a database query and creates a view object. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database to which you want to open a view object. You can get the handle as described in <a href="https://docs.microsoft.com//windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.</para>
    </param>
    <param name="szQuery">
      <para>Specifies a SQL query string for querying the database. For correct syntax, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/sql-syntax">SQL Syntax</a>.</para>
    </param>
    <param name="phView">
      <para>Pointer to a handle for the returned view.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseOpenView</b> function  returns one of the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiDatabaseOpenView</b> function opens a view object for a database. You must open a view object for a database before performing any execution or fetching.</para>
      <para>If an error occurs, you can call
<see cref="MsiGetLastErrorRecord" /> for more information.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseOpenView as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseOpenViewA">
    <summary>
      <para>The
<b>MsiDatabaseOpenView</b> function prepares a database query and creates a view object. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database to which you want to open a view object. You can get the handle as described in <a href="https://docs.microsoft.com//windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.</para>
    </param>
    <param name="szQuery">
      <para>Specifies a SQL query string for querying the database. For correct syntax, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/sql-syntax">SQL Syntax</a>.</para>
    </param>
    <param name="phView">
      <para>Pointer to a handle for the returned view.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseOpenView</b> function  returns one of the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiDatabaseOpenView</b> function opens a view object for a database. You must open a view object for a database before performing any execution or fetching.</para>
      <para>If an error occurs, you can call
<see cref="MsiGetLastErrorRecord" /> for more information.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseOpenView as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseOpenViewW">
    <summary>
      <para>The
<b>MsiDatabaseOpenView</b> function prepares a database query and creates a view object. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database to which you want to open a view object. You can get the handle as described in <a href="https://docs.microsoft.com//windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.</para>
    </param>
    <param name="szQuery">
      <para>Specifies a SQL query string for querying the database. For correct syntax, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/sql-syntax">SQL Syntax</a>.</para>
    </param>
    <param name="phView">
      <para>Pointer to a handle for the returned view.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseOpenView</b> function  returns one of the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiDatabaseOpenView</b> function opens a view object for a database. You must open a view object for a database before performing any execution or fetching.</para>
      <para>If an error occurs, you can call
<see cref="MsiGetLastErrorRecord" /> for more information.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseOpenView as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseOpenView">
    <summary>
      <para>The
<b>MsiDatabaseOpenView</b> function prepares a database query and creates a view object. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database to which you want to open a view object. You can get the handle as described in <a href="https://docs.microsoft.com//windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.</para>
    </param>
    <param name="szQuery">
      <para>Specifies a SQL query string for querying the database. For correct syntax, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/sql-syntax">SQL Syntax</a>.</para>
    </param>
    <param name="phView">
      <para>Pointer to a handle for the returned view.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseOpenView</b> function  returns one of the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiDatabaseOpenView</b> function opens a view object for a database. You must open a view object for a database before performing any execution or fetching.</para>
      <para>If an error occurs, you can call
<see cref="MsiGetLastErrorRecord" /> for more information.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseOpenView as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseOpenViewA">
    <summary>
      <para>The
<b>MsiDatabaseOpenView</b> function prepares a database query and creates a view object. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database to which you want to open a view object. You can get the handle as described in <a href="https://docs.microsoft.com//windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.</para>
    </param>
    <param name="szQuery">
      <para>Specifies a SQL query string for querying the database. For correct syntax, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/sql-syntax">SQL Syntax</a>.</para>
    </param>
    <param name="phView">
      <para>Pointer to a handle for the returned view.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseOpenView</b> function  returns one of the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiDatabaseOpenView</b> function opens a view object for a database. You must open a view object for a database before performing any execution or fetching.</para>
      <para>If an error occurs, you can call
<see cref="MsiGetLastErrorRecord" /> for more information.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseOpenView as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiDatabaseOpenViewW">
    <summary>
      <para>The
<b>MsiDatabaseOpenView</b> function prepares a database query and creates a view object. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database to which you want to open a view object. You can get the handle as described in <a href="https://docs.microsoft.com//windows/desktop/Msi/obtaining-a-database-handle">Obtaining a Database Handle</a>.</para>
    </param>
    <param name="szQuery">
      <para>Specifies a SQL query string for querying the database. For correct syntax, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/sql-syntax">SQL Syntax</a>.</para>
    </param>
    <param name="phView">
      <para>Pointer to a handle for the returned view.</para>
    </param>
    <returns>
      <para>The
<b>MsiDatabaseOpenView</b> function  returns one of the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiDatabaseOpenView</b> function opens a view object for a database. You must open a view object for a database before performing any execution or fetching.</para>
      <para>If an error occurs, you can call
<see cref="MsiGetLastErrorRecord" /> for more information.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDatabaseOpenView as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiDoAction">
    <summary>
      <para>The
<b>MsiDoAction</b> function executes a built-in action, custom action, or user-interface wizard action.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szAction">
      <para>Specifies the action to execute.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiDoAction</b> function executes the action that corresponds to the name supplied. If the name is not recognized by the installer as a built-in action or as a custom action in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/customaction-table">CustomAction table</a>, the name is passed to the user-interface handler object, which can invoke a function or a dialog box. If a null action name is supplied, the installer uses the upper-case value of the <a href="https://docs.microsoft.com//windows/desktop/Msi/action">ACTION</a> property as the action to perform. If no property value is defined, the default action is performed, defined as "INSTALL".</para>
      <para>Actions that update the system, such as the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfiles-action">InstallFiles</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/writeregistryvalues-action">WriteRegistryValues</a> actions, cannot be run by calling
<b>MsiDoAction</b>. The exception to this rule is if
<b>MsiDoAction</b> is called from a custom action that is scheduled in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installexecutesequence-table">InstallExecuteSequence table</a> between the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installinitialize-action">InstallInitialize</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfinalize-action">InstallFinalize actions</a>. Actions that do not update the system, such as
<a href="https://docs.microsoft.com//windows/desktop/Msi/appsearch-action">AppSearch</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize</a>, can be called.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDoAction as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Action Functions</seealso>
  </member>
  <member name="Windows.MsiDoActionA">
    <summary>
      <para>The
<b>MsiDoAction</b> function executes a built-in action, custom action, or user-interface wizard action.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szAction">
      <para>Specifies the action to execute.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiDoAction</b> function executes the action that corresponds to the name supplied. If the name is not recognized by the installer as a built-in action or as a custom action in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/customaction-table">CustomAction table</a>, the name is passed to the user-interface handler object, which can invoke a function or a dialog box. If a null action name is supplied, the installer uses the upper-case value of the <a href="https://docs.microsoft.com//windows/desktop/Msi/action">ACTION</a> property as the action to perform. If no property value is defined, the default action is performed, defined as "INSTALL".</para>
      <para>Actions that update the system, such as the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfiles-action">InstallFiles</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/writeregistryvalues-action">WriteRegistryValues</a> actions, cannot be run by calling
<b>MsiDoAction</b>. The exception to this rule is if
<b>MsiDoAction</b> is called from a custom action that is scheduled in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installexecutesequence-table">InstallExecuteSequence table</a> between the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installinitialize-action">InstallInitialize</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfinalize-action">InstallFinalize actions</a>. Actions that do not update the system, such as
<a href="https://docs.microsoft.com//windows/desktop/Msi/appsearch-action">AppSearch</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize</a>, can be called.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDoAction as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Action Functions</seealso>
  </member>
  <member name="Windows.MsiDoActionW">
    <summary>
      <para>The
<b>MsiDoAction</b> function executes a built-in action, custom action, or user-interface wizard action.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szAction">
      <para>Specifies the action to execute.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiDoAction</b> function executes the action that corresponds to the name supplied. If the name is not recognized by the installer as a built-in action or as a custom action in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/customaction-table">CustomAction table</a>, the name is passed to the user-interface handler object, which can invoke a function or a dialog box. If a null action name is supplied, the installer uses the upper-case value of the <a href="https://docs.microsoft.com//windows/desktop/Msi/action">ACTION</a> property as the action to perform. If no property value is defined, the default action is performed, defined as "INSTALL".</para>
      <para>Actions that update the system, such as the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfiles-action">InstallFiles</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/writeregistryvalues-action">WriteRegistryValues</a> actions, cannot be run by calling
<b>MsiDoAction</b>. The exception to this rule is if
<b>MsiDoAction</b> is called from a custom action that is scheduled in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installexecutesequence-table">InstallExecuteSequence table</a> between the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installinitialize-action">InstallInitialize</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfinalize-action">InstallFinalize actions</a>. Actions that do not update the system, such as
<a href="https://docs.microsoft.com//windows/desktop/Msi/appsearch-action">AppSearch</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize</a>, can be called.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDoAction as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Action Functions</seealso>
  </member>
  <member name="Windows.MsiDoAction">
    <summary>
      <para>The
<b>MsiDoAction</b> function executes a built-in action, custom action, or user-interface wizard action.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szAction">
      <para>Specifies the action to execute.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiDoAction</b> function executes the action that corresponds to the name supplied. If the name is not recognized by the installer as a built-in action or as a custom action in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/customaction-table">CustomAction table</a>, the name is passed to the user-interface handler object, which can invoke a function or a dialog box. If a null action name is supplied, the installer uses the upper-case value of the <a href="https://docs.microsoft.com//windows/desktop/Msi/action">ACTION</a> property as the action to perform. If no property value is defined, the default action is performed, defined as "INSTALL".</para>
      <para>Actions that update the system, such as the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfiles-action">InstallFiles</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/writeregistryvalues-action">WriteRegistryValues</a> actions, cannot be run by calling
<b>MsiDoAction</b>. The exception to this rule is if
<b>MsiDoAction</b> is called from a custom action that is scheduled in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installexecutesequence-table">InstallExecuteSequence table</a> between the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installinitialize-action">InstallInitialize</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfinalize-action">InstallFinalize actions</a>. Actions that do not update the system, such as
<a href="https://docs.microsoft.com//windows/desktop/Msi/appsearch-action">AppSearch</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize</a>, can be called.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDoAction as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Action Functions</seealso>
  </member>
  <member name="Windows.MsiDoActionA">
    <summary>
      <para>The
<b>MsiDoAction</b> function executes a built-in action, custom action, or user-interface wizard action.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szAction">
      <para>Specifies the action to execute.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiDoAction</b> function executes the action that corresponds to the name supplied. If the name is not recognized by the installer as a built-in action or as a custom action in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/customaction-table">CustomAction table</a>, the name is passed to the user-interface handler object, which can invoke a function or a dialog box. If a null action name is supplied, the installer uses the upper-case value of the <a href="https://docs.microsoft.com//windows/desktop/Msi/action">ACTION</a> property as the action to perform. If no property value is defined, the default action is performed, defined as "INSTALL".</para>
      <para>Actions that update the system, such as the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfiles-action">InstallFiles</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/writeregistryvalues-action">WriteRegistryValues</a> actions, cannot be run by calling
<b>MsiDoAction</b>. The exception to this rule is if
<b>MsiDoAction</b> is called from a custom action that is scheduled in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installexecutesequence-table">InstallExecuteSequence table</a> between the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installinitialize-action">InstallInitialize</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfinalize-action">InstallFinalize actions</a>. Actions that do not update the system, such as
<a href="https://docs.microsoft.com//windows/desktop/Msi/appsearch-action">AppSearch</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize</a>, can be called.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDoAction as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Action Functions</seealso>
  </member>
  <member name="Windows.MsiDoActionW">
    <summary>
      <para>The
<b>MsiDoAction</b> function executes a built-in action, custom action, or user-interface wizard action.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szAction">
      <para>Specifies the action to execute.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiDoAction</b> function executes the action that corresponds to the name supplied. If the name is not recognized by the installer as a built-in action or as a custom action in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/customaction-table">CustomAction table</a>, the name is passed to the user-interface handler object, which can invoke a function or a dialog box. If a null action name is supplied, the installer uses the upper-case value of the <a href="https://docs.microsoft.com//windows/desktop/Msi/action">ACTION</a> property as the action to perform. If no property value is defined, the default action is performed, defined as "INSTALL".</para>
      <para>Actions that update the system, such as the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfiles-action">InstallFiles</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/writeregistryvalues-action">WriteRegistryValues</a> actions, cannot be run by calling
<b>MsiDoAction</b>. The exception to this rule is if
<b>MsiDoAction</b> is called from a custom action that is scheduled in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installexecutesequence-table">InstallExecuteSequence table</a> between the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installinitialize-action">InstallInitialize</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfinalize-action">InstallFinalize actions</a>. Actions that do not update the system, such as
<a href="https://docs.microsoft.com//windows/desktop/Msi/appsearch-action">AppSearch</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize</a>, can be called.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiDoAction as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Action Functions</seealso>
  </member>
  <member name="Windows.MsiEnableUIPreview">
    <summary>
      <para>The
<b>MsiEnableUIPreview</b> function enables preview mode of the user interface to facilitate authoring of user-interface dialog boxes. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database.</para>
    </param>
    <param name="phPreview">
      <para>Pointer to a returned handle for user-interface preview capability.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">User Interface Functions</seealso>
  </member>
  <member name="Windows.MsiEnumComponentCosts">
    <summary>
      <para>The
<b>MsiEnumComponentCosts</b> function enumerates the disk-space per drive required to install a component. This information is needed to display the disk-space cost required for all drives in the user interface. The returned disk-space costs are expressed in multiples of 512 bytes.</para>
      <para>
        <b>MsiEnumComponentCosts</b> should only be run after the installer has completed file costing and after the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/file-costing">File Costing</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szComponent">
      <para>A null-terminated string specifying the component's name as it is listed in the Component column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component table</a>. This parameter can be null. If <i>szComponent</i> is null or an empty string,
<b>MsiEnumComponentCosts</b> enumerates the total disk-space per drive used during the installation. In this case, <i>iState</i> is ignored. The costs of the installer include those costs for caching the database in the secure folder as well as the cost to create the installation script. Note that the total disk-space used during the installation may be larger than the space used after the component is installed.</para>
    </param>
    <param name="dwIndex">
      <para>0-based index for drives. This parameter should be zero for the first call to the
<b>MsiEnumComponentCosts</b> function and then incremented for subsequent calls.</para>
    </param>
    <param name="iState">
      <para>Requested component state to be enumerated. If <i>szComponent</i> is passed as Null or an empty string, the installer ignores the <i>iState</i> parameter.</para>
    </param>
    <param name="szDriveBuf">
      <para>Buffer that holds the drive name including the null terminator. This is an empty string in case of an error.</para>
    </param>
    <param name="pcchDriveBuf">
      <para>Pointer to a variable that specifies the size, in TCHARs, of the buffer pointed to by the <i>lpDriveBuf</i> parameter. This size should include the terminating null character. If the buffer provided is too small, the variable pointed to by <i>pcchDriveBuf</i> contains the count of characters not including the null terminator.</para>
    </param>
    <param name="piCost">
      <para>Cost of the component per drive expressed in multiples of 512 bytes. This value is 0 if an error has occurred. The value returned in <i>piCost</i> is final disk-space used by the component after installation. If <i>szComponent</i> is passed as Null or an empty string, the installer sets the value at <i>piCost</i> to 0.</para>
    </param>
    <param name="piTempCost">
      <para>The component cost per drive for the duration of the installation, or 0 if an error occurred. The value in *<i>piTempCost</i> represents the temporary space requirements for the duration of the installation. This temporary space requirement is space needed only for the duration of the installation. This does not affect the final disk space requirement.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE_STATE</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more drives to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The component is missing.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_NOT_CALLED</b>
            </para>
          </description>
          <description>
            <para>Costing is not complete.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>Buffer not large enough for the drive name.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>The supplied handle is invalid or inactive.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The recommended method for enumerating the disk-space costs per drive is as follows. Start with the dwIndex set to 0 and increment it by one after each call. Continue the enumeration as long as
<b>MsiEnumComponentCosts</b> returns ERROR_SUCCESS.</para>
      <para>
        <b>MsiEnumComponentCosts</b> may be called from custom actions.</para>
      <para>The total final disk cost for the installation is the sum of the costs of all components plus the cost of the Windows Installer (<i>szComponent</i> = null).</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiEnumComponentCosts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumComponentCostsA">
    <summary>
      <para>The
<b>MsiEnumComponentCosts</b> function enumerates the disk-space per drive required to install a component. This information is needed to display the disk-space cost required for all drives in the user interface. The returned disk-space costs are expressed in multiples of 512 bytes.</para>
      <para>
        <b>MsiEnumComponentCosts</b> should only be run after the installer has completed file costing and after the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/file-costing">File Costing</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szComponent">
      <para>A null-terminated string specifying the component's name as it is listed in the Component column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component table</a>. This parameter can be null. If <i>szComponent</i> is null or an empty string,
<b>MsiEnumComponentCosts</b> enumerates the total disk-space per drive used during the installation. In this case, <i>iState</i> is ignored. The costs of the installer include those costs for caching the database in the secure folder as well as the cost to create the installation script. Note that the total disk-space used during the installation may be larger than the space used after the component is installed.</para>
    </param>
    <param name="dwIndex">
      <para>0-based index for drives. This parameter should be zero for the first call to the
<b>MsiEnumComponentCosts</b> function and then incremented for subsequent calls.</para>
    </param>
    <param name="iState">
      <para>Requested component state to be enumerated. If <i>szComponent</i> is passed as Null or an empty string, the installer ignores the <i>iState</i> parameter.</para>
    </param>
    <param name="szDriveBuf">
      <para>Buffer that holds the drive name including the null terminator. This is an empty string in case of an error.</para>
    </param>
    <param name="pcchDriveBuf">
      <para>Pointer to a variable that specifies the size, in TCHARs, of the buffer pointed to by the <i>lpDriveBuf</i> parameter. This size should include the terminating null character. If the buffer provided is too small, the variable pointed to by <i>pcchDriveBuf</i> contains the count of characters not including the null terminator.</para>
    </param>
    <param name="piCost">
      <para>Cost of the component per drive expressed in multiples of 512 bytes. This value is 0 if an error has occurred. The value returned in <i>piCost</i> is final disk-space used by the component after installation. If <i>szComponent</i> is passed as Null or an empty string, the installer sets the value at <i>piCost</i> to 0.</para>
    </param>
    <param name="piTempCost">
      <para>The component cost per drive for the duration of the installation, or 0 if an error occurred. The value in *<i>piTempCost</i> represents the temporary space requirements for the duration of the installation. This temporary space requirement is space needed only for the duration of the installation. This does not affect the final disk space requirement.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE_STATE</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more drives to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The component is missing.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_NOT_CALLED</b>
            </para>
          </description>
          <description>
            <para>Costing is not complete.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>Buffer not large enough for the drive name.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>The supplied handle is invalid or inactive.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The recommended method for enumerating the disk-space costs per drive is as follows. Start with the dwIndex set to 0 and increment it by one after each call. Continue the enumeration as long as
<b>MsiEnumComponentCosts</b> returns ERROR_SUCCESS.</para>
      <para>
        <b>MsiEnumComponentCosts</b> may be called from custom actions.</para>
      <para>The total final disk cost for the installation is the sum of the costs of all components plus the cost of the Windows Installer (<i>szComponent</i> = null).</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiEnumComponentCosts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumComponentCostsW">
    <summary>
      <para>The
<b>MsiEnumComponentCosts</b> function enumerates the disk-space per drive required to install a component. This information is needed to display the disk-space cost required for all drives in the user interface. The returned disk-space costs are expressed in multiples of 512 bytes.</para>
      <para>
        <b>MsiEnumComponentCosts</b> should only be run after the installer has completed file costing and after the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/file-costing">File Costing</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szComponent">
      <para>A null-terminated string specifying the component's name as it is listed in the Component column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component table</a>. This parameter can be null. If <i>szComponent</i> is null or an empty string,
<b>MsiEnumComponentCosts</b> enumerates the total disk-space per drive used during the installation. In this case, <i>iState</i> is ignored. The costs of the installer include those costs for caching the database in the secure folder as well as the cost to create the installation script. Note that the total disk-space used during the installation may be larger than the space used after the component is installed.</para>
    </param>
    <param name="dwIndex">
      <para>0-based index for drives. This parameter should be zero for the first call to the
<b>MsiEnumComponentCosts</b> function and then incremented for subsequent calls.</para>
    </param>
    <param name="iState">
      <para>Requested component state to be enumerated. If <i>szComponent</i> is passed as Null or an empty string, the installer ignores the <i>iState</i> parameter.</para>
    </param>
    <param name="szDriveBuf">
      <para>Buffer that holds the drive name including the null terminator. This is an empty string in case of an error.</para>
    </param>
    <param name="pcchDriveBuf">
      <para>Pointer to a variable that specifies the size, in TCHARs, of the buffer pointed to by the <i>lpDriveBuf</i> parameter. This size should include the terminating null character. If the buffer provided is too small, the variable pointed to by <i>pcchDriveBuf</i> contains the count of characters not including the null terminator.</para>
    </param>
    <param name="piCost">
      <para>Cost of the component per drive expressed in multiples of 512 bytes. This value is 0 if an error has occurred. The value returned in <i>piCost</i> is final disk-space used by the component after installation. If <i>szComponent</i> is passed as Null or an empty string, the installer sets the value at <i>piCost</i> to 0.</para>
    </param>
    <param name="piTempCost">
      <para>The component cost per drive for the duration of the installation, or 0 if an error occurred. The value in *<i>piTempCost</i> represents the temporary space requirements for the duration of the installation. This temporary space requirement is space needed only for the duration of the installation. This does not affect the final disk space requirement.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE_STATE</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more drives to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The component is missing.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_NOT_CALLED</b>
            </para>
          </description>
          <description>
            <para>Costing is not complete.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>Buffer not large enough for the drive name.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>The supplied handle is invalid or inactive.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The recommended method for enumerating the disk-space costs per drive is as follows. Start with the dwIndex set to 0 and increment it by one after each call. Continue the enumeration as long as
<b>MsiEnumComponentCosts</b> returns ERROR_SUCCESS.</para>
      <para>
        <b>MsiEnumComponentCosts</b> may be called from custom actions.</para>
      <para>The total final disk cost for the installation is the sum of the costs of all components plus the cost of the Windows Installer (<i>szComponent</i> = null).</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiEnumComponentCosts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumComponentCosts">
    <summary>
      <para>The
<b>MsiEnumComponentCosts</b> function enumerates the disk-space per drive required to install a component. This information is needed to display the disk-space cost required for all drives in the user interface. The returned disk-space costs are expressed in multiples of 512 bytes.</para>
      <para>
        <b>MsiEnumComponentCosts</b> should only be run after the installer has completed file costing and after the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/file-costing">File Costing</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szComponent">
      <para>A null-terminated string specifying the component's name as it is listed in the Component column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component table</a>. This parameter can be null. If <i>szComponent</i> is null or an empty string,
<b>MsiEnumComponentCosts</b> enumerates the total disk-space per drive used during the installation. In this case, <i>iState</i> is ignored. The costs of the installer include those costs for caching the database in the secure folder as well as the cost to create the installation script. Note that the total disk-space used during the installation may be larger than the space used after the component is installed.</para>
    </param>
    <param name="dwIndex">
      <para>0-based index for drives. This parameter should be zero for the first call to the
<b>MsiEnumComponentCosts</b> function and then incremented for subsequent calls.</para>
    </param>
    <param name="iState">
      <para>Requested component state to be enumerated. If <i>szComponent</i> is passed as Null or an empty string, the installer ignores the <i>iState</i> parameter.</para>
    </param>
    <param name="szDriveBuf">
      <para>Buffer that holds the drive name including the null terminator. This is an empty string in case of an error.</para>
    </param>
    <param name="pcchDriveBuf">
      <para>Pointer to a variable that specifies the size, in TCHARs, of the buffer pointed to by the <i>lpDriveBuf</i> parameter. This size should include the terminating null character. If the buffer provided is too small, the variable pointed to by <i>pcchDriveBuf</i> contains the count of characters not including the null terminator.</para>
    </param>
    <param name="piCost">
      <para>Cost of the component per drive expressed in multiples of 512 bytes. This value is 0 if an error has occurred. The value returned in <i>piCost</i> is final disk-space used by the component after installation. If <i>szComponent</i> is passed as Null or an empty string, the installer sets the value at <i>piCost</i> to 0.</para>
    </param>
    <param name="piTempCost">
      <para>The component cost per drive for the duration of the installation, or 0 if an error occurred. The value in *<i>piTempCost</i> represents the temporary space requirements for the duration of the installation. This temporary space requirement is space needed only for the duration of the installation. This does not affect the final disk space requirement.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE_STATE</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more drives to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The component is missing.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_NOT_CALLED</b>
            </para>
          </description>
          <description>
            <para>Costing is not complete.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>Buffer not large enough for the drive name.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>The supplied handle is invalid or inactive.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The recommended method for enumerating the disk-space costs per drive is as follows. Start with the dwIndex set to 0 and increment it by one after each call. Continue the enumeration as long as
<b>MsiEnumComponentCosts</b> returns ERROR_SUCCESS.</para>
      <para>
        <b>MsiEnumComponentCosts</b> may be called from custom actions.</para>
      <para>The total final disk cost for the installation is the sum of the costs of all components plus the cost of the Windows Installer (<i>szComponent</i> = null).</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiEnumComponentCosts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumComponentCostsA">
    <summary>
      <para>The
<b>MsiEnumComponentCosts</b> function enumerates the disk-space per drive required to install a component. This information is needed to display the disk-space cost required for all drives in the user interface. The returned disk-space costs are expressed in multiples of 512 bytes.</para>
      <para>
        <b>MsiEnumComponentCosts</b> should only be run after the installer has completed file costing and after the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/file-costing">File Costing</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szComponent">
      <para>A null-terminated string specifying the component's name as it is listed in the Component column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component table</a>. This parameter can be null. If <i>szComponent</i> is null or an empty string,
<b>MsiEnumComponentCosts</b> enumerates the total disk-space per drive used during the installation. In this case, <i>iState</i> is ignored. The costs of the installer include those costs for caching the database in the secure folder as well as the cost to create the installation script. Note that the total disk-space used during the installation may be larger than the space used after the component is installed.</para>
    </param>
    <param name="dwIndex">
      <para>0-based index for drives. This parameter should be zero for the first call to the
<b>MsiEnumComponentCosts</b> function and then incremented for subsequent calls.</para>
    </param>
    <param name="iState">
      <para>Requested component state to be enumerated. If <i>szComponent</i> is passed as Null or an empty string, the installer ignores the <i>iState</i> parameter.</para>
    </param>
    <param name="szDriveBuf">
      <para>Buffer that holds the drive name including the null terminator. This is an empty string in case of an error.</para>
    </param>
    <param name="pcchDriveBuf">
      <para>Pointer to a variable that specifies the size, in TCHARs, of the buffer pointed to by the <i>lpDriveBuf</i> parameter. This size should include the terminating null character. If the buffer provided is too small, the variable pointed to by <i>pcchDriveBuf</i> contains the count of characters not including the null terminator.</para>
    </param>
    <param name="piCost">
      <para>Cost of the component per drive expressed in multiples of 512 bytes. This value is 0 if an error has occurred. The value returned in <i>piCost</i> is final disk-space used by the component after installation. If <i>szComponent</i> is passed as Null or an empty string, the installer sets the value at <i>piCost</i> to 0.</para>
    </param>
    <param name="piTempCost">
      <para>The component cost per drive for the duration of the installation, or 0 if an error occurred. The value in *<i>piTempCost</i> represents the temporary space requirements for the duration of the installation. This temporary space requirement is space needed only for the duration of the installation. This does not affect the final disk space requirement.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE_STATE</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more drives to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The component is missing.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_NOT_CALLED</b>
            </para>
          </description>
          <description>
            <para>Costing is not complete.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>Buffer not large enough for the drive name.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>The supplied handle is invalid or inactive.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The recommended method for enumerating the disk-space costs per drive is as follows. Start with the dwIndex set to 0 and increment it by one after each call. Continue the enumeration as long as
<b>MsiEnumComponentCosts</b> returns ERROR_SUCCESS.</para>
      <para>
        <b>MsiEnumComponentCosts</b> may be called from custom actions.</para>
      <para>The total final disk cost for the installation is the sum of the costs of all components plus the cost of the Windows Installer (<i>szComponent</i> = null).</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiEnumComponentCosts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEnumComponentCostsW">
    <summary>
      <para>The
<b>MsiEnumComponentCosts</b> function enumerates the disk-space per drive required to install a component. This information is needed to display the disk-space cost required for all drives in the user interface. The returned disk-space costs are expressed in multiples of 512 bytes.</para>
      <para>
        <b>MsiEnumComponentCosts</b> should only be run after the installer has completed file costing and after the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/file-costing">File Costing</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szComponent">
      <para>A null-terminated string specifying the component's name as it is listed in the Component column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component table</a>. This parameter can be null. If <i>szComponent</i> is null or an empty string,
<b>MsiEnumComponentCosts</b> enumerates the total disk-space per drive used during the installation. In this case, <i>iState</i> is ignored. The costs of the installer include those costs for caching the database in the secure folder as well as the cost to create the installation script. Note that the total disk-space used during the installation may be larger than the space used after the component is installed.</para>
    </param>
    <param name="dwIndex">
      <para>0-based index for drives. This parameter should be zero for the first call to the
<b>MsiEnumComponentCosts</b> function and then incremented for subsequent calls.</para>
    </param>
    <param name="iState">
      <para>Requested component state to be enumerated. If <i>szComponent</i> is passed as Null or an empty string, the installer ignores the <i>iState</i> parameter.</para>
    </param>
    <param name="szDriveBuf">
      <para>Buffer that holds the drive name including the null terminator. This is an empty string in case of an error.</para>
    </param>
    <param name="pcchDriveBuf">
      <para>Pointer to a variable that specifies the size, in TCHARs, of the buffer pointed to by the <i>lpDriveBuf</i> parameter. This size should include the terminating null character. If the buffer provided is too small, the variable pointed to by <i>pcchDriveBuf</i> contains the count of characters not including the null terminator.</para>
    </param>
    <param name="piCost">
      <para>Cost of the component per drive expressed in multiples of 512 bytes. This value is 0 if an error has occurred. The value returned in <i>piCost</i> is final disk-space used by the component after installation. If <i>szComponent</i> is passed as Null or an empty string, the installer sets the value at <i>piCost</i> to 0.</para>
    </param>
    <param name="piTempCost">
      <para>The component cost per drive for the duration of the installation, or 0 if an error occurred. The value in *<i>piTempCost</i> represents the temporary space requirements for the duration of the installation. This temporary space requirement is space needed only for the duration of the installation. This does not affect the final disk space requirement.</para>
    </param>
    <returns>
      <list type="table">
        <listheader>
          <description>Return Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE_STATE</b>
            </para>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_MORE_ITEMS</b>
            </para>
          </description>
          <description>
            <para>There are no more drives to return.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>A value was enumerated.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_UNKNOWN_COMPONENT</b>
            </para>
          </description>
          <description>
            <para>The component is missing.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_FUNCTION_NOT_CALLED</b>
            </para>
          </description>
          <description>
            <para>Costing is not complete.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>Buffer not large enough for the drive name.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_HANDLE</b>
            </para>
          </description>
          <description>
            <para>The supplied handle is invalid or inactive.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The recommended method for enumerating the disk-space costs per drive is as follows. Start with the dwIndex set to 0 and increment it by one after each call. Continue the enumeration as long as
<b>MsiEnumComponentCosts</b> returns ERROR_SUCCESS.</para>
      <para>
        <b>MsiEnumComponentCosts</b> may be called from custom actions.</para>
      <para>The total final disk cost for the installation is the sum of the costs of all components plus the cost of the Windows Installer (<i>szComponent</i> = null).</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiEnumComponentCosts as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiEvaluateCondition">
    <summary>
      <para>The
<b>MsiEvaluateCondition</b> function evaluates a conditional expression containing property names and values.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szCondition">
      <para>Specifies the conditional expression. This parameter must not be <b>NULL</b>. For the syntax of conditional expressions see
<a href="https://docs.microsoft.com//windows/desktop/Msi/conditional-statement-syntax">Conditional Statement Syntax</a>.</para>
    </param>
    <returns>
      <para>This function returns MSICONDITION.</para>
    </returns>
    <remarks>
      <para>The following table shows the feature and component state values used by the
<b>MsiEvaluateCondition</b> function. These states are not set until
<see cref="MsiSetInstallLevel" /> is called, either directly or by the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. Therefore, state checking is generally only useful for conditional expressions in an action sequence table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>INSTALLSTATE_ABSENT</description>
          <description>Feature or component not present.</description>
        </item>
        <item>
          <description>INSTALLSTATE_LOCAL </description>
          <description>Feature or component on local computer.</description>
        </item>
        <item>
          <description>INSTALLSTATE_SOURCE</description>
          <description>Feature or component run from source.</description>
        </item>
        <item>
          <description>(null value)</description>
          <description>No action to be taken on feature or component.</description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiEvaluateCondition as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Action Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiEvaluateConditionA">
    <summary>
      <para>The
<b>MsiEvaluateCondition</b> function evaluates a conditional expression containing property names and values.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szCondition">
      <para>Specifies the conditional expression. This parameter must not be <b>NULL</b>. For the syntax of conditional expressions see
<a href="https://docs.microsoft.com//windows/desktop/Msi/conditional-statement-syntax">Conditional Statement Syntax</a>.</para>
    </param>
    <returns>
      <para>This function returns MSICONDITION.</para>
    </returns>
    <remarks>
      <para>The following table shows the feature and component state values used by the
<b>MsiEvaluateCondition</b> function. These states are not set until
<see cref="MsiSetInstallLevel" /> is called, either directly or by the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. Therefore, state checking is generally only useful for conditional expressions in an action sequence table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>INSTALLSTATE_ABSENT</description>
          <description>Feature or component not present.</description>
        </item>
        <item>
          <description>INSTALLSTATE_LOCAL </description>
          <description>Feature or component on local computer.</description>
        </item>
        <item>
          <description>INSTALLSTATE_SOURCE</description>
          <description>Feature or component run from source.</description>
        </item>
        <item>
          <description>(null value)</description>
          <description>No action to be taken on feature or component.</description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiEvaluateCondition as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Action Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiEvaluateConditionW">
    <summary>
      <para>The
<b>MsiEvaluateCondition</b> function evaluates a conditional expression containing property names and values.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szCondition">
      <para>Specifies the conditional expression. This parameter must not be <b>NULL</b>. For the syntax of conditional expressions see
<a href="https://docs.microsoft.com//windows/desktop/Msi/conditional-statement-syntax">Conditional Statement Syntax</a>.</para>
    </param>
    <returns>
      <para>This function returns MSICONDITION.</para>
    </returns>
    <remarks>
      <para>The following table shows the feature and component state values used by the
<b>MsiEvaluateCondition</b> function. These states are not set until
<see cref="MsiSetInstallLevel" /> is called, either directly or by the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. Therefore, state checking is generally only useful for conditional expressions in an action sequence table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>INSTALLSTATE_ABSENT</description>
          <description>Feature or component not present.</description>
        </item>
        <item>
          <description>INSTALLSTATE_LOCAL </description>
          <description>Feature or component on local computer.</description>
        </item>
        <item>
          <description>INSTALLSTATE_SOURCE</description>
          <description>Feature or component run from source.</description>
        </item>
        <item>
          <description>(null value)</description>
          <description>No action to be taken on feature or component.</description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiEvaluateCondition as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Action Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiEvaluateCondition">
    <summary>
      <para>The
<b>MsiEvaluateCondition</b> function evaluates a conditional expression containing property names and values.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szCondition">
      <para>Specifies the conditional expression. This parameter must not be <b>NULL</b>. For the syntax of conditional expressions see
<a href="https://docs.microsoft.com//windows/desktop/Msi/conditional-statement-syntax">Conditional Statement Syntax</a>.</para>
    </param>
    <returns>
      <para>This function returns MSICONDITION.</para>
    </returns>
    <remarks>
      <para>The following table shows the feature and component state values used by the
<b>MsiEvaluateCondition</b> function. These states are not set until
<see cref="MsiSetInstallLevel" /> is called, either directly or by the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. Therefore, state checking is generally only useful for conditional expressions in an action sequence table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>INSTALLSTATE_ABSENT</description>
          <description>Feature or component not present.</description>
        </item>
        <item>
          <description>INSTALLSTATE_LOCAL </description>
          <description>Feature or component on local computer.</description>
        </item>
        <item>
          <description>INSTALLSTATE_SOURCE</description>
          <description>Feature or component run from source.</description>
        </item>
        <item>
          <description>(null value)</description>
          <description>No action to be taken on feature or component.</description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiEvaluateCondition as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Action Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiEvaluateConditionA">
    <summary>
      <para>The
<b>MsiEvaluateCondition</b> function evaluates a conditional expression containing property names and values.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szCondition">
      <para>Specifies the conditional expression. This parameter must not be <b>NULL</b>. For the syntax of conditional expressions see
<a href="https://docs.microsoft.com//windows/desktop/Msi/conditional-statement-syntax">Conditional Statement Syntax</a>.</para>
    </param>
    <returns>
      <para>This function returns MSICONDITION.</para>
    </returns>
    <remarks>
      <para>The following table shows the feature and component state values used by the
<b>MsiEvaluateCondition</b> function. These states are not set until
<see cref="MsiSetInstallLevel" /> is called, either directly or by the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. Therefore, state checking is generally only useful for conditional expressions in an action sequence table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>INSTALLSTATE_ABSENT</description>
          <description>Feature or component not present.</description>
        </item>
        <item>
          <description>INSTALLSTATE_LOCAL </description>
          <description>Feature or component on local computer.</description>
        </item>
        <item>
          <description>INSTALLSTATE_SOURCE</description>
          <description>Feature or component run from source.</description>
        </item>
        <item>
          <description>(null value)</description>
          <description>No action to be taken on feature or component.</description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiEvaluateCondition as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Action Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiEvaluateConditionW">
    <summary>
      <para>The
<b>MsiEvaluateCondition</b> function evaluates a conditional expression containing property names and values.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szCondition">
      <para>Specifies the conditional expression. This parameter must not be <b>NULL</b>. For the syntax of conditional expressions see
<a href="https://docs.microsoft.com//windows/desktop/Msi/conditional-statement-syntax">Conditional Statement Syntax</a>.</para>
    </param>
    <returns>
      <para>This function returns MSICONDITION.</para>
    </returns>
    <remarks>
      <para>The following table shows the feature and component state values used by the
<b>MsiEvaluateCondition</b> function. These states are not set until
<see cref="MsiSetInstallLevel" /> is called, either directly or by the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. Therefore, state checking is generally only useful for conditional expressions in an action sequence table.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>INSTALLSTATE_ABSENT</description>
          <description>Feature or component not present.</description>
        </item>
        <item>
          <description>INSTALLSTATE_LOCAL </description>
          <description>Feature or component on local computer.</description>
        </item>
        <item>
          <description>INSTALLSTATE_SOURCE</description>
          <description>Feature or component run from source.</description>
        </item>
        <item>
          <description>(null value)</description>
          <description>No action to be taken on feature or component.</description>
        </item>
      </list>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiEvaluateCondition as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Action Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetActiveDatabase">
    <summary>
      <para>The
<b>MsiGetActiveDatabase</b> function returns the active database for the installation. This function returns a read-only handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns a read-only handle to the database currently in use by the installer. If the function fails, the function returns zero, 0.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiGetActiveDatabase</b> function accesses the database in use by the running the installation.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiGetComponentState">
    <summary>
      <para>The
<b>MsiGetComponentState</b> function obtains the state of a component.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szComponent">
      <para>A null-terminated string that specifies the component name within the product.</para>
    </param>
    <param name="piInstalled">
      <para>Receives the current installed state. This parameter must not be null. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The component is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The component is installed in the default location: local or source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component is installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_REMOVED</b>
          </description>
          <description>
            <para>The component is being removed. In action state and not settable.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component runs from the source, CD-ROM, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_UNKNOWN</b>
          </description>
          <description>
            <para>An unrecognized product or feature name was passed to the function.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="piAction">
      <para>Receives the action taken during the installation. This parameter must not be null. For return values, see <i>piInstalled</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetComponentState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetComponentStateA">
    <summary>
      <para>The
<b>MsiGetComponentState</b> function obtains the state of a component.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szComponent">
      <para>A null-terminated string that specifies the component name within the product.</para>
    </param>
    <param name="piInstalled">
      <para>Receives the current installed state. This parameter must not be null. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The component is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The component is installed in the default location: local or source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component is installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_REMOVED</b>
          </description>
          <description>
            <para>The component is being removed. In action state and not settable.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component runs from the source, CD-ROM, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_UNKNOWN</b>
          </description>
          <description>
            <para>An unrecognized product or feature name was passed to the function.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="piAction">
      <para>Receives the action taken during the installation. This parameter must not be null. For return values, see <i>piInstalled</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetComponentState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetComponentStateW">
    <summary>
      <para>The
<b>MsiGetComponentState</b> function obtains the state of a component.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szComponent">
      <para>A null-terminated string that specifies the component name within the product.</para>
    </param>
    <param name="piInstalled">
      <para>Receives the current installed state. This parameter must not be null. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The component is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The component is installed in the default location: local or source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component is installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_REMOVED</b>
          </description>
          <description>
            <para>The component is being removed. In action state and not settable.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component runs from the source, CD-ROM, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_UNKNOWN</b>
          </description>
          <description>
            <para>An unrecognized product or feature name was passed to the function.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="piAction">
      <para>Receives the action taken during the installation. This parameter must not be null. For return values, see <i>piInstalled</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetComponentState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetComponentState">
    <summary>
      <para>The
<b>MsiGetComponentState</b> function obtains the state of a component.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szComponent">
      <para>A null-terminated string that specifies the component name within the product.</para>
    </param>
    <param name="piInstalled">
      <para>Receives the current installed state. This parameter must not be null. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The component is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The component is installed in the default location: local or source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component is installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_REMOVED</b>
          </description>
          <description>
            <para>The component is being removed. In action state and not settable.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component runs from the source, CD-ROM, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_UNKNOWN</b>
          </description>
          <description>
            <para>An unrecognized product or feature name was passed to the function.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="piAction">
      <para>Receives the action taken during the installation. This parameter must not be null. For return values, see <i>piInstalled</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetComponentState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetComponentStateA">
    <summary>
      <para>The
<b>MsiGetComponentState</b> function obtains the state of a component.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szComponent">
      <para>A null-terminated string that specifies the component name within the product.</para>
    </param>
    <param name="piInstalled">
      <para>Receives the current installed state. This parameter must not be null. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The component is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The component is installed in the default location: local or source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component is installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_REMOVED</b>
          </description>
          <description>
            <para>The component is being removed. In action state and not settable.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component runs from the source, CD-ROM, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_UNKNOWN</b>
          </description>
          <description>
            <para>An unrecognized product or feature name was passed to the function.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="piAction">
      <para>Receives the action taken during the installation. This parameter must not be null. For return values, see <i>piInstalled</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetComponentState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetComponentStateW">
    <summary>
      <para>The
<b>MsiGetComponentState</b> function obtains the state of a component.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szComponent">
      <para>A null-terminated string that specifies the component name within the product.</para>
    </param>
    <param name="piInstalled">
      <para>Receives the current installed state. This parameter must not be null. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The component is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The component is installed in the default location: local or source.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component is installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_REMOVED</b>
          </description>
          <description>
            <para>The component is being removed. In action state and not settable.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component runs from the source, CD-ROM, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_UNKNOWN</b>
          </description>
          <description>
            <para>An unrecognized product or feature name was passed to the function.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="piAction">
      <para>Receives the action taken during the installation. This parameter must not be null. For return values, see <i>piInstalled</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetComponentState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetDatabaseState">
    <summary>
      <para>The
<b>MsiGetDatabaseState</b> function returns the state of the database.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database obtained from <see cref="MsiOpenDatabase" />.</para>
    </param>
    <returns>
      <para>This function returns MSIDBSTATE.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiGetDatabaseState</b> function returns the update state of the database.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Database Management Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureCost">
    <summary>
      <para>The
<b>MsiGetFeatureCost</b> function returns the disk space required by a feature and its selected children and parent features.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the name of the feature.</para>
    </param>
    <param name="iCostTree">
      <para>Specifies the value the function uses to determine disk space requirements. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICOSTTREE_CHILDREN</b>
          </description>
          <description>
            <para>The children of the indicated feature are included in the cost.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICOSTTREE_PARENTS</b>
          </description>
          <description>
            <para>The parent features of the indicated feature are included in the cost.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICOSTTREE_SELFONLY</b>
          </description>
          <description>
            <para>The feature only is included in the cost.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="iState">
      <para>Specifies the installation state. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_UNKNOWN</b>
          </description>
          <description>
            <para>The product or feature is unrecognized.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The product or feature is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The product or feature is installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The product or feature is installed to run from source, CD, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The product or feature will be installed to use the default location: local or source.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="piCost">
      <para>Receives the disk space requirements in units of 512 bytes. This parameter must not be null.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureCost</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>With the
<b>MsiGetFeatureCost</b> function, the MSICOSTTREE_SELFONLY value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature only. This returned value does not include the children or the parent features of the specified feature. This total cost is made up of the disk costs attributed to every component linked to the feature.</para>
      <para>The MSICOSTTREE_CHILDREN value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature and its children. For each feature, the total cost is made up of the disk costs attributed to every component linked to the feature.</para>
      <para>The MSICOSTTREE_PARENTS value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature and its parent features (up to the root of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>). For each feature, the total cost is made up of the disk costs attributed to every component linked to the feature.</para>
      <para>
        <b>MsiGetFeatureCost</b> is dependent upon several other functions to be successful. The following example demonstrates the order in which these functions must be called:</para>
      <code>MSIHANDLE   hInstall;      //product handle, must be closed
int         iCost;         //cost returned by MsiGetFeatureCost

MsiOpenPackage("Path to package....",&amp;amp;amp;amp;amp;amp;amp;hInstall);   //"Path to package...." should be replaced with the full path to the package to be opened
MsiDoAction(hInstall,"CostInitialize");         //
MsiDoAction(hInstall,"FileCost");
MsiDoAction(hInstall,"CostFinalize");
MsiDoAction(hInstall,"InstallValidate");
MsiGetFeatureCost(hInstall,"FeatureName",MSICOSTTREE_SELFONLY,INSTALLSTATE_ABSENT,&amp;amp;amp;amp;amp;amp;amp;iCost);
MsiCloseHandle(hInstall);                        //close the open product handle
</code>
      <para>The process to query the cost of features scheduled to be removed is slightly different:</para>
      <code>MSIHANDLE   hInstall;      //product handle, must be closed
int         iCost;         //cost returned by MsiGetFeatureCost

MsiOpenPackage("Path to package....",&amp;amp;amp;amp;amp;amp;amp;hInstall);              //"Path to package...." should be replaced with the full path to the package to be opened
MsiDoAction(hInstall,"CostInitialize");                          //
MsiDoAction(hInstall,"FileCost");
MsiDoAction(hInstall,"CostFinalize");
MsiSetFeatureState(hInstall,"FeatureName",INSTALLSTATE_ABSENT);  //set the feature's state to "not installed"
MsiDoAction(hInstall,"InstallValidate");
MsiGetFeatureCost(hInstall,"FeatureName",MSICOSTTREE_SELFONLY,INSTALLSTATE_ABSENT,&amp;amp;amp;amp;amp;amp;amp;iCost);
MsiCloseHandle(hInstall);                                        //close the open product handle
</code>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetFeatureCost as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureCostA">
    <summary>
      <para>The
<b>MsiGetFeatureCost</b> function returns the disk space required by a feature and its selected children and parent features.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the name of the feature.</para>
    </param>
    <param name="iCostTree">
      <para>Specifies the value the function uses to determine disk space requirements. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICOSTTREE_CHILDREN</b>
          </description>
          <description>
            <para>The children of the indicated feature are included in the cost.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICOSTTREE_PARENTS</b>
          </description>
          <description>
            <para>The parent features of the indicated feature are included in the cost.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICOSTTREE_SELFONLY</b>
          </description>
          <description>
            <para>The feature only is included in the cost.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="iState">
      <para>Specifies the installation state. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_UNKNOWN</b>
          </description>
          <description>
            <para>The product or feature is unrecognized.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The product or feature is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The product or feature is installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The product or feature is installed to run from source, CD, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The product or feature will be installed to use the default location: local or source.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="piCost">
      <para>Receives the disk space requirements in units of 512 bytes. This parameter must not be null.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureCost</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>With the
<b>MsiGetFeatureCost</b> function, the MSICOSTTREE_SELFONLY value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature only. This returned value does not include the children or the parent features of the specified feature. This total cost is made up of the disk costs attributed to every component linked to the feature.</para>
      <para>The MSICOSTTREE_CHILDREN value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature and its children. For each feature, the total cost is made up of the disk costs attributed to every component linked to the feature.</para>
      <para>The MSICOSTTREE_PARENTS value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature and its parent features (up to the root of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>). For each feature, the total cost is made up of the disk costs attributed to every component linked to the feature.</para>
      <para>
        <b>MsiGetFeatureCost</b> is dependent upon several other functions to be successful. The following example demonstrates the order in which these functions must be called:</para>
      <code>MSIHANDLE   hInstall;      //product handle, must be closed
int         iCost;         //cost returned by MsiGetFeatureCost

MsiOpenPackage("Path to package....",&amp;amp;amp;amp;amp;amp;amp;hInstall);   //"Path to package...." should be replaced with the full path to the package to be opened
MsiDoAction(hInstall,"CostInitialize");         //
MsiDoAction(hInstall,"FileCost");
MsiDoAction(hInstall,"CostFinalize");
MsiDoAction(hInstall,"InstallValidate");
MsiGetFeatureCost(hInstall,"FeatureName",MSICOSTTREE_SELFONLY,INSTALLSTATE_ABSENT,&amp;amp;amp;amp;amp;amp;amp;iCost);
MsiCloseHandle(hInstall);                        //close the open product handle
</code>
      <para>The process to query the cost of features scheduled to be removed is slightly different:</para>
      <code>MSIHANDLE   hInstall;      //product handle, must be closed
int         iCost;         //cost returned by MsiGetFeatureCost

MsiOpenPackage("Path to package....",&amp;amp;amp;amp;amp;amp;amp;hInstall);              //"Path to package...." should be replaced with the full path to the package to be opened
MsiDoAction(hInstall,"CostInitialize");                          //
MsiDoAction(hInstall,"FileCost");
MsiDoAction(hInstall,"CostFinalize");
MsiSetFeatureState(hInstall,"FeatureName",INSTALLSTATE_ABSENT);  //set the feature's state to "not installed"
MsiDoAction(hInstall,"InstallValidate");
MsiGetFeatureCost(hInstall,"FeatureName",MSICOSTTREE_SELFONLY,INSTALLSTATE_ABSENT,&amp;amp;amp;amp;amp;amp;amp;iCost);
MsiCloseHandle(hInstall);                                        //close the open product handle
</code>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetFeatureCost as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureCostW">
    <summary>
      <para>The
<b>MsiGetFeatureCost</b> function returns the disk space required by a feature and its selected children and parent features.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the name of the feature.</para>
    </param>
    <param name="iCostTree">
      <para>Specifies the value the function uses to determine disk space requirements. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICOSTTREE_CHILDREN</b>
          </description>
          <description>
            <para>The children of the indicated feature are included in the cost.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICOSTTREE_PARENTS</b>
          </description>
          <description>
            <para>The parent features of the indicated feature are included in the cost.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICOSTTREE_SELFONLY</b>
          </description>
          <description>
            <para>The feature only is included in the cost.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="iState">
      <para>Specifies the installation state. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_UNKNOWN</b>
          </description>
          <description>
            <para>The product or feature is unrecognized.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The product or feature is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The product or feature is installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The product or feature is installed to run from source, CD, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The product or feature will be installed to use the default location: local or source.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="piCost">
      <para>Receives the disk space requirements in units of 512 bytes. This parameter must not be null.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureCost</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>With the
<b>MsiGetFeatureCost</b> function, the MSICOSTTREE_SELFONLY value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature only. This returned value does not include the children or the parent features of the specified feature. This total cost is made up of the disk costs attributed to every component linked to the feature.</para>
      <para>The MSICOSTTREE_CHILDREN value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature and its children. For each feature, the total cost is made up of the disk costs attributed to every component linked to the feature.</para>
      <para>The MSICOSTTREE_PARENTS value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature and its parent features (up to the root of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>). For each feature, the total cost is made up of the disk costs attributed to every component linked to the feature.</para>
      <para>
        <b>MsiGetFeatureCost</b> is dependent upon several other functions to be successful. The following example demonstrates the order in which these functions must be called:</para>
      <code>MSIHANDLE   hInstall;      //product handle, must be closed
int         iCost;         //cost returned by MsiGetFeatureCost

MsiOpenPackage("Path to package....",&amp;amp;amp;amp;amp;amp;amp;hInstall);   //"Path to package...." should be replaced with the full path to the package to be opened
MsiDoAction(hInstall,"CostInitialize");         //
MsiDoAction(hInstall,"FileCost");
MsiDoAction(hInstall,"CostFinalize");
MsiDoAction(hInstall,"InstallValidate");
MsiGetFeatureCost(hInstall,"FeatureName",MSICOSTTREE_SELFONLY,INSTALLSTATE_ABSENT,&amp;amp;amp;amp;amp;amp;amp;iCost);
MsiCloseHandle(hInstall);                        //close the open product handle
</code>
      <para>The process to query the cost of features scheduled to be removed is slightly different:</para>
      <code>MSIHANDLE   hInstall;      //product handle, must be closed
int         iCost;         //cost returned by MsiGetFeatureCost

MsiOpenPackage("Path to package....",&amp;amp;amp;amp;amp;amp;amp;hInstall);              //"Path to package...." should be replaced with the full path to the package to be opened
MsiDoAction(hInstall,"CostInitialize");                          //
MsiDoAction(hInstall,"FileCost");
MsiDoAction(hInstall,"CostFinalize");
MsiSetFeatureState(hInstall,"FeatureName",INSTALLSTATE_ABSENT);  //set the feature's state to "not installed"
MsiDoAction(hInstall,"InstallValidate");
MsiGetFeatureCost(hInstall,"FeatureName",MSICOSTTREE_SELFONLY,INSTALLSTATE_ABSENT,&amp;amp;amp;amp;amp;amp;amp;iCost);
MsiCloseHandle(hInstall);                                        //close the open product handle
</code>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetFeatureCost as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureCost">
    <summary>
      <para>The
<b>MsiGetFeatureCost</b> function returns the disk space required by a feature and its selected children and parent features.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the name of the feature.</para>
    </param>
    <param name="iCostTree">
      <para>Specifies the value the function uses to determine disk space requirements. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICOSTTREE_CHILDREN</b>
          </description>
          <description>
            <para>The children of the indicated feature are included in the cost.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICOSTTREE_PARENTS</b>
          </description>
          <description>
            <para>The parent features of the indicated feature are included in the cost.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICOSTTREE_SELFONLY</b>
          </description>
          <description>
            <para>The feature only is included in the cost.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="iState">
      <para>Specifies the installation state. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_UNKNOWN</b>
          </description>
          <description>
            <para>The product or feature is unrecognized.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The product or feature is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The product or feature is installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The product or feature is installed to run from source, CD, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The product or feature will be installed to use the default location: local or source.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="piCost">
      <para>Receives the disk space requirements in units of 512 bytes. This parameter must not be null.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureCost</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>With the
<b>MsiGetFeatureCost</b> function, the MSICOSTTREE_SELFONLY value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature only. This returned value does not include the children or the parent features of the specified feature. This total cost is made up of the disk costs attributed to every component linked to the feature.</para>
      <para>The MSICOSTTREE_CHILDREN value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature and its children. For each feature, the total cost is made up of the disk costs attributed to every component linked to the feature.</para>
      <para>The MSICOSTTREE_PARENTS value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature and its parent features (up to the root of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>). For each feature, the total cost is made up of the disk costs attributed to every component linked to the feature.</para>
      <para>
        <b>MsiGetFeatureCost</b> is dependent upon several other functions to be successful. The following example demonstrates the order in which these functions must be called:</para>
      <code>MSIHANDLE   hInstall;      //product handle, must be closed
int         iCost;         //cost returned by MsiGetFeatureCost

MsiOpenPackage("Path to package....",&amp;amp;amp;amp;amp;amp;amp;hInstall);   //"Path to package...." should be replaced with the full path to the package to be opened
MsiDoAction(hInstall,"CostInitialize");         //
MsiDoAction(hInstall,"FileCost");
MsiDoAction(hInstall,"CostFinalize");
MsiDoAction(hInstall,"InstallValidate");
MsiGetFeatureCost(hInstall,"FeatureName",MSICOSTTREE_SELFONLY,INSTALLSTATE_ABSENT,&amp;amp;amp;amp;amp;amp;amp;iCost);
MsiCloseHandle(hInstall);                        //close the open product handle
</code>
      <para>The process to query the cost of features scheduled to be removed is slightly different:</para>
      <code>MSIHANDLE   hInstall;      //product handle, must be closed
int         iCost;         //cost returned by MsiGetFeatureCost

MsiOpenPackage("Path to package....",&amp;amp;amp;amp;amp;amp;amp;hInstall);              //"Path to package...." should be replaced with the full path to the package to be opened
MsiDoAction(hInstall,"CostInitialize");                          //
MsiDoAction(hInstall,"FileCost");
MsiDoAction(hInstall,"CostFinalize");
MsiSetFeatureState(hInstall,"FeatureName",INSTALLSTATE_ABSENT);  //set the feature's state to "not installed"
MsiDoAction(hInstall,"InstallValidate");
MsiGetFeatureCost(hInstall,"FeatureName",MSICOSTTREE_SELFONLY,INSTALLSTATE_ABSENT,&amp;amp;amp;amp;amp;amp;amp;iCost);
MsiCloseHandle(hInstall);                                        //close the open product handle
</code>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetFeatureCost as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureCostA">
    <summary>
      <para>The
<b>MsiGetFeatureCost</b> function returns the disk space required by a feature and its selected children and parent features.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the name of the feature.</para>
    </param>
    <param name="iCostTree">
      <para>Specifies the value the function uses to determine disk space requirements. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICOSTTREE_CHILDREN</b>
          </description>
          <description>
            <para>The children of the indicated feature are included in the cost.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICOSTTREE_PARENTS</b>
          </description>
          <description>
            <para>The parent features of the indicated feature are included in the cost.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICOSTTREE_SELFONLY</b>
          </description>
          <description>
            <para>The feature only is included in the cost.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="iState">
      <para>Specifies the installation state. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_UNKNOWN</b>
          </description>
          <description>
            <para>The product or feature is unrecognized.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The product or feature is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The product or feature is installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The product or feature is installed to run from source, CD, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The product or feature will be installed to use the default location: local or source.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="piCost">
      <para>Receives the disk space requirements in units of 512 bytes. This parameter must not be null.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureCost</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>With the
<b>MsiGetFeatureCost</b> function, the MSICOSTTREE_SELFONLY value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature only. This returned value does not include the children or the parent features of the specified feature. This total cost is made up of the disk costs attributed to every component linked to the feature.</para>
      <para>The MSICOSTTREE_CHILDREN value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature and its children. For each feature, the total cost is made up of the disk costs attributed to every component linked to the feature.</para>
      <para>The MSICOSTTREE_PARENTS value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature and its parent features (up to the root of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>). For each feature, the total cost is made up of the disk costs attributed to every component linked to the feature.</para>
      <para>
        <b>MsiGetFeatureCost</b> is dependent upon several other functions to be successful. The following example demonstrates the order in which these functions must be called:</para>
      <code>MSIHANDLE   hInstall;      //product handle, must be closed
int         iCost;         //cost returned by MsiGetFeatureCost

MsiOpenPackage("Path to package....",&amp;amp;amp;amp;amp;amp;amp;hInstall);   //"Path to package...." should be replaced with the full path to the package to be opened
MsiDoAction(hInstall,"CostInitialize");         //
MsiDoAction(hInstall,"FileCost");
MsiDoAction(hInstall,"CostFinalize");
MsiDoAction(hInstall,"InstallValidate");
MsiGetFeatureCost(hInstall,"FeatureName",MSICOSTTREE_SELFONLY,INSTALLSTATE_ABSENT,&amp;amp;amp;amp;amp;amp;amp;iCost);
MsiCloseHandle(hInstall);                        //close the open product handle
</code>
      <para>The process to query the cost of features scheduled to be removed is slightly different:</para>
      <code>MSIHANDLE   hInstall;      //product handle, must be closed
int         iCost;         //cost returned by MsiGetFeatureCost

MsiOpenPackage("Path to package....",&amp;amp;amp;amp;amp;amp;amp;hInstall);              //"Path to package...." should be replaced with the full path to the package to be opened
MsiDoAction(hInstall,"CostInitialize");                          //
MsiDoAction(hInstall,"FileCost");
MsiDoAction(hInstall,"CostFinalize");
MsiSetFeatureState(hInstall,"FeatureName",INSTALLSTATE_ABSENT);  //set the feature's state to "not installed"
MsiDoAction(hInstall,"InstallValidate");
MsiGetFeatureCost(hInstall,"FeatureName",MSICOSTTREE_SELFONLY,INSTALLSTATE_ABSENT,&amp;amp;amp;amp;amp;amp;amp;iCost);
MsiCloseHandle(hInstall);                                        //close the open product handle
</code>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetFeatureCost as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureCostW">
    <summary>
      <para>The
<b>MsiGetFeatureCost</b> function returns the disk space required by a feature and its selected children and parent features.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the name of the feature.</para>
    </param>
    <param name="iCostTree">
      <para>Specifies the value the function uses to determine disk space requirements. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICOSTTREE_CHILDREN</b>
          </description>
          <description>
            <para>The children of the indicated feature are included in the cost.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICOSTTREE_PARENTS</b>
          </description>
          <description>
            <para>The parent features of the indicated feature are included in the cost.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICOSTTREE_SELFONLY</b>
          </description>
          <description>
            <para>The feature only is included in the cost.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="iState">
      <para>Specifies the installation state. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_UNKNOWN</b>
          </description>
          <description>
            <para>The product or feature is unrecognized.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The product or feature is uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The product or feature is installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The product or feature is installed to run from source, CD, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The product or feature will be installed to use the default location: local or source.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="piCost">
      <para>Receives the disk space requirements in units of 512 bytes. This parameter must not be null.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureCost</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>With the
<b>MsiGetFeatureCost</b> function, the MSICOSTTREE_SELFONLY value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature only. This returned value does not include the children or the parent features of the specified feature. This total cost is made up of the disk costs attributed to every component linked to the feature.</para>
      <para>The MSICOSTTREE_CHILDREN value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature and its children. For each feature, the total cost is made up of the disk costs attributed to every component linked to the feature.</para>
      <para>The MSICOSTTREE_PARENTS value indicates the total amount of disk space (in units of 512 bytes) required by the specified feature and its parent features (up to the root of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>). For each feature, the total cost is made up of the disk costs attributed to every component linked to the feature.</para>
      <para>
        <b>MsiGetFeatureCost</b> is dependent upon several other functions to be successful. The following example demonstrates the order in which these functions must be called:</para>
      <code>MSIHANDLE   hInstall;      //product handle, must be closed
int         iCost;         //cost returned by MsiGetFeatureCost

MsiOpenPackage("Path to package....",&amp;amp;amp;amp;amp;amp;amp;hInstall);   //"Path to package...." should be replaced with the full path to the package to be opened
MsiDoAction(hInstall,"CostInitialize");         //
MsiDoAction(hInstall,"FileCost");
MsiDoAction(hInstall,"CostFinalize");
MsiDoAction(hInstall,"InstallValidate");
MsiGetFeatureCost(hInstall,"FeatureName",MSICOSTTREE_SELFONLY,INSTALLSTATE_ABSENT,&amp;amp;amp;amp;amp;amp;amp;iCost);
MsiCloseHandle(hInstall);                        //close the open product handle
</code>
      <para>The process to query the cost of features scheduled to be removed is slightly different:</para>
      <code>MSIHANDLE   hInstall;      //product handle, must be closed
int         iCost;         //cost returned by MsiGetFeatureCost

MsiOpenPackage("Path to package....",&amp;amp;amp;amp;amp;amp;amp;hInstall);              //"Path to package...." should be replaced with the full path to the package to be opened
MsiDoAction(hInstall,"CostInitialize");                          //
MsiDoAction(hInstall,"FileCost");
MsiDoAction(hInstall,"CostFinalize");
MsiSetFeatureState(hInstall,"FeatureName",INSTALLSTATE_ABSENT);  //set the feature's state to "not installed"
MsiDoAction(hInstall,"InstallValidate");
MsiGetFeatureCost(hInstall,"FeatureName",MSICOSTTREE_SELFONLY,INSTALLSTATE_ABSENT,&amp;amp;amp;amp;amp;amp;amp;iCost);
MsiCloseHandle(hInstall);                                        //close the open product handle
</code>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetFeatureCost as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureState">
    <summary>
      <para>The
<b>MsiGetFeatureState</b> function gets the requested state of a feature.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature name within the product.</para>
    </param>
    <param name="piInstalled">
      <para>Specifies the returned current installed state. This parameter must not be null. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_BADCONFIG</b>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_INCOMPLETE</b>
          </description>
          <description>
            <para>The installation is suspended or in progress.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCEABSENT</b>
          </description>
          <description>
            <para>The feature must run from the source, and the source is unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_MOREDATA</b>
          </description>
          <description>
            <para>The return buffer is full.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_INVALIDARG</b>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_UNKNOWN</b>
          </description>
          <description>
            <para>An unrecognized product or feature was specified.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_BROKEN</b>
          </description>
          <description>
            <para>The feature is broken.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The advertised feature.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The feature was uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature was installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature must run from the source, CD-ROM, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The feature is  installed in the default location: local or source.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="piAction">
      <para>Receives the action taken during the installation session. This parameter must not be null. For return values, see <i>piInstalled</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureStateA">
    <summary>
      <para>The
<b>MsiGetFeatureState</b> function gets the requested state of a feature.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature name within the product.</para>
    </param>
    <param name="piInstalled">
      <para>Specifies the returned current installed state. This parameter must not be null. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_BADCONFIG</b>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_INCOMPLETE</b>
          </description>
          <description>
            <para>The installation is suspended or in progress.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCEABSENT</b>
          </description>
          <description>
            <para>The feature must run from the source, and the source is unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_MOREDATA</b>
          </description>
          <description>
            <para>The return buffer is full.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_INVALIDARG</b>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_UNKNOWN</b>
          </description>
          <description>
            <para>An unrecognized product or feature was specified.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_BROKEN</b>
          </description>
          <description>
            <para>The feature is broken.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The advertised feature.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The feature was uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature was installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature must run from the source, CD-ROM, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The feature is  installed in the default location: local or source.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="piAction">
      <para>Receives the action taken during the installation session. This parameter must not be null. For return values, see <i>piInstalled</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureStateW">
    <summary>
      <para>The
<b>MsiGetFeatureState</b> function gets the requested state of a feature.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature name within the product.</para>
    </param>
    <param name="piInstalled">
      <para>Specifies the returned current installed state. This parameter must not be null. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_BADCONFIG</b>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_INCOMPLETE</b>
          </description>
          <description>
            <para>The installation is suspended or in progress.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCEABSENT</b>
          </description>
          <description>
            <para>The feature must run from the source, and the source is unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_MOREDATA</b>
          </description>
          <description>
            <para>The return buffer is full.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_INVALIDARG</b>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_UNKNOWN</b>
          </description>
          <description>
            <para>An unrecognized product or feature was specified.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_BROKEN</b>
          </description>
          <description>
            <para>The feature is broken.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The advertised feature.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The feature was uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature was installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature must run from the source, CD-ROM, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The feature is  installed in the default location: local or source.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="piAction">
      <para>Receives the action taken during the installation session. This parameter must not be null. For return values, see <i>piInstalled</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureState">
    <summary>
      <para>The
<b>MsiGetFeatureState</b> function gets the requested state of a feature.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature name within the product.</para>
    </param>
    <param name="piInstalled">
      <para>Specifies the returned current installed state. This parameter must not be null. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_BADCONFIG</b>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_INCOMPLETE</b>
          </description>
          <description>
            <para>The installation is suspended or in progress.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCEABSENT</b>
          </description>
          <description>
            <para>The feature must run from the source, and the source is unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_MOREDATA</b>
          </description>
          <description>
            <para>The return buffer is full.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_INVALIDARG</b>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_UNKNOWN</b>
          </description>
          <description>
            <para>An unrecognized product or feature was specified.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_BROKEN</b>
          </description>
          <description>
            <para>The feature is broken.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The advertised feature.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The feature was uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature was installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature must run from the source, CD-ROM, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The feature is  installed in the default location: local or source.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="piAction">
      <para>Receives the action taken during the installation session. This parameter must not be null. For return values, see <i>piInstalled</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureStateA">
    <summary>
      <para>The
<b>MsiGetFeatureState</b> function gets the requested state of a feature.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature name within the product.</para>
    </param>
    <param name="piInstalled">
      <para>Specifies the returned current installed state. This parameter must not be null. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_BADCONFIG</b>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_INCOMPLETE</b>
          </description>
          <description>
            <para>The installation is suspended or in progress.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCEABSENT</b>
          </description>
          <description>
            <para>The feature must run from the source, and the source is unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_MOREDATA</b>
          </description>
          <description>
            <para>The return buffer is full.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_INVALIDARG</b>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_UNKNOWN</b>
          </description>
          <description>
            <para>An unrecognized product or feature was specified.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_BROKEN</b>
          </description>
          <description>
            <para>The feature is broken.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The advertised feature.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The feature was uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature was installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature must run from the source, CD-ROM, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The feature is  installed in the default location: local or source.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="piAction">
      <para>Receives the action taken during the installation session. This parameter must not be null. For return values, see <i>piInstalled</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureStateW">
    <summary>
      <para>The
<b>MsiGetFeatureState</b> function gets the requested state of a feature.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature name within the product.</para>
    </param>
    <param name="piInstalled">
      <para>Specifies the returned current installed state. This parameter must not be null. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_BADCONFIG</b>
          </description>
          <description>
            <para>The configuration data is corrupt.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_INCOMPLETE</b>
          </description>
          <description>
            <para>The installation is suspended or in progress.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCEABSENT</b>
          </description>
          <description>
            <para>The feature must run from the source, and the source is unavailable.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_MOREDATA</b>
          </description>
          <description>
            <para>The return buffer is full.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_INVALIDARG</b>
          </description>
          <description>
            <para>An invalid parameter was passed to the function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_UNKNOWN</b>
          </description>
          <description>
            <para>An unrecognized product or feature was specified.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_BROKEN</b>
          </description>
          <description>
            <para>The feature is broken.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The advertised feature.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The feature was uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature was installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature must run from the source, CD-ROM, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_DEFAULT</b>
          </description>
          <description>
            <para>The feature is  installed in the default location: local or source.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="piAction">
      <para>Receives the action taken during the installation session. This parameter must not be null. For return values, see <i>piInstalled</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureValidStates">
    <summary>
      <para>The
<b>MsiGetFeatureValidStates</b> function returns a valid installation state.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature name.</para>
    </param>
    <param name="lpInstallStates">
      <para>Receives the location to hold the valid installation states. For each valid installation state, the installer sets <i>pInstallState</i> to a combination of the following values. This parameter should not be null.</para>
      <list type="table">
        <listheader>
          <description>Decimal Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>2</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_ADVERTISED</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be advertised.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>4</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_ABSENT</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be absent.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>8</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_LOCAL</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>16</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_SOURCE</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be configured to run from source, CD-ROM, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>32</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_DEFAULT</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be configured to use the default location: local or source.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureValidStates</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>The <b>MsiGetFeatureValidStates</b> function determines state validity by querying all components that are linked to the specified feature without taking into account the current installed state of any component.</para>
      <para>The possible valid states for a feature are determined as follows:</para>
      <list type="bullet">
        <item>
          <description>If the feature does not contain components, both INSTALLSTATE_LOCAL and INSTALLSTATE_SOURCE are valid states for the feature.</description>
        </item>
        <item>
          <description>If at least one component of the feature has an attribute of msidbComponentAttributesLocalOnly or msidbComponentAttributesOptional, INSTALLSTATE_LOCAL is a valid state for the feature.</description>
        </item>
        <item>
          <description>If at least one component of the feature has an attribute of msidbComponentAttributesSourceOnly or msidbComponentAttributesOptional, INSTALLSTATE_SOURCE is a valid state for the feature.</description>
        </item>
        <item>
          <description>If a file of a component that belongs to the feature is patched or from a compressed source, then INSTALLSTATE_SOURCE is not included as a valid state for the feature.</description>
        </item>
        <item>
          <description>INSTALLSTATE_ADVERTISE is not a valid state if the feature disallows advertisement (msidbFeatureAttributesDisallowAdvertise) or the feature requires platform support for advertisement (msidbFeatureAttributesNoUnsupportedAdvertise) and the platform does not support it.</description>
        </item>
        <item>
          <description>INSTALLSTATE_ABSENT is a valid state for the feature if its attributes do not include msidbFeatureAttributesUIDisallowAbsent.</description>
        </item>
        <item>
          <description>Valid states for child features marked to follow the parent feature (msidbFeatureAttributesFollowParent) are based upon the parent feature's action or installed state.</description>
        </item>
      </list>
      <para>After calling
<b>MsiGetFeatureValidStates</b> a conditional statement may then be used to test the valid installation states of a feature. For example, the following call to
<b>MsiGetFeatureValidStates</b> gets the installation state of Feature1.</para>
      <code>MsiGetFeatureValidStates(hProduct, "Feature1", &amp;amp;amp;amp;amp;amp;amp;dwValidStates);
</code>
      <para>If Feature1 has attributes of value 0 (favor local), and Feature1 has one component with attributes of value 0 (local only), the value of dwValidStates after the call is 14. This indicates that INSTALLSTATE_LOCAL, INSTALLSTATE_ABSENT,and INSTALLSTATE_ADVERTISED are valid states for Feature1. The following conditional statement evaluates to True if local is a valid state for this feature.</para>
      <para>( ( dwValidStates &amp; ( 1 &lt;&lt; INSTALLSTATE_LOCAL ) ) == ( 1 &lt;&lt; INSTALLSTATE_LOCAL ) )</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetFeatureValidStates as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureValidStatesA">
    <summary>
      <para>The
<b>MsiGetFeatureValidStates</b> function returns a valid installation state.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature name.</para>
    </param>
    <param name="lpInstallStates">
      <para>Receives the location to hold the valid installation states. For each valid installation state, the installer sets <i>pInstallState</i> to a combination of the following values. This parameter should not be null.</para>
      <list type="table">
        <listheader>
          <description>Decimal Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>2</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_ADVERTISED</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be advertised.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>4</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_ABSENT</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be absent.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>8</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_LOCAL</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>16</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_SOURCE</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be configured to run from source, CD-ROM, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>32</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_DEFAULT</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be configured to use the default location: local or source.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureValidStates</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>The <b>MsiGetFeatureValidStates</b> function determines state validity by querying all components that are linked to the specified feature without taking into account the current installed state of any component.</para>
      <para>The possible valid states for a feature are determined as follows:</para>
      <list type="bullet">
        <item>
          <description>If the feature does not contain components, both INSTALLSTATE_LOCAL and INSTALLSTATE_SOURCE are valid states for the feature.</description>
        </item>
        <item>
          <description>If at least one component of the feature has an attribute of msidbComponentAttributesLocalOnly or msidbComponentAttributesOptional, INSTALLSTATE_LOCAL is a valid state for the feature.</description>
        </item>
        <item>
          <description>If at least one component of the feature has an attribute of msidbComponentAttributesSourceOnly or msidbComponentAttributesOptional, INSTALLSTATE_SOURCE is a valid state for the feature.</description>
        </item>
        <item>
          <description>If a file of a component that belongs to the feature is patched or from a compressed source, then INSTALLSTATE_SOURCE is not included as a valid state for the feature.</description>
        </item>
        <item>
          <description>INSTALLSTATE_ADVERTISE is not a valid state if the feature disallows advertisement (msidbFeatureAttributesDisallowAdvertise) or the feature requires platform support for advertisement (msidbFeatureAttributesNoUnsupportedAdvertise) and the platform does not support it.</description>
        </item>
        <item>
          <description>INSTALLSTATE_ABSENT is a valid state for the feature if its attributes do not include msidbFeatureAttributesUIDisallowAbsent.</description>
        </item>
        <item>
          <description>Valid states for child features marked to follow the parent feature (msidbFeatureAttributesFollowParent) are based upon the parent feature's action or installed state.</description>
        </item>
      </list>
      <para>After calling
<b>MsiGetFeatureValidStates</b> a conditional statement may then be used to test the valid installation states of a feature. For example, the following call to
<b>MsiGetFeatureValidStates</b> gets the installation state of Feature1.</para>
      <code>MsiGetFeatureValidStates(hProduct, "Feature1", &amp;amp;amp;amp;amp;amp;amp;dwValidStates);
</code>
      <para>If Feature1 has attributes of value 0 (favor local), and Feature1 has one component with attributes of value 0 (local only), the value of dwValidStates after the call is 14. This indicates that INSTALLSTATE_LOCAL, INSTALLSTATE_ABSENT,and INSTALLSTATE_ADVERTISED are valid states for Feature1. The following conditional statement evaluates to True if local is a valid state for this feature.</para>
      <para>( ( dwValidStates &amp; ( 1 &lt;&lt; INSTALLSTATE_LOCAL ) ) == ( 1 &lt;&lt; INSTALLSTATE_LOCAL ) )</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetFeatureValidStates as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureValidStatesW">
    <summary>
      <para>The
<b>MsiGetFeatureValidStates</b> function returns a valid installation state.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature name.</para>
    </param>
    <param name="lpInstallStates">
      <para>Receives the location to hold the valid installation states. For each valid installation state, the installer sets <i>pInstallState</i> to a combination of the following values. This parameter should not be null.</para>
      <list type="table">
        <listheader>
          <description>Decimal Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>2</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_ADVERTISED</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be advertised.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>4</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_ABSENT</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be absent.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>8</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_LOCAL</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>16</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_SOURCE</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be configured to run from source, CD-ROM, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>32</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_DEFAULT</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be configured to use the default location: local or source.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureValidStates</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>The <b>MsiGetFeatureValidStates</b> function determines state validity by querying all components that are linked to the specified feature without taking into account the current installed state of any component.</para>
      <para>The possible valid states for a feature are determined as follows:</para>
      <list type="bullet">
        <item>
          <description>If the feature does not contain components, both INSTALLSTATE_LOCAL and INSTALLSTATE_SOURCE are valid states for the feature.</description>
        </item>
        <item>
          <description>If at least one component of the feature has an attribute of msidbComponentAttributesLocalOnly or msidbComponentAttributesOptional, INSTALLSTATE_LOCAL is a valid state for the feature.</description>
        </item>
        <item>
          <description>If at least one component of the feature has an attribute of msidbComponentAttributesSourceOnly or msidbComponentAttributesOptional, INSTALLSTATE_SOURCE is a valid state for the feature.</description>
        </item>
        <item>
          <description>If a file of a component that belongs to the feature is patched or from a compressed source, then INSTALLSTATE_SOURCE is not included as a valid state for the feature.</description>
        </item>
        <item>
          <description>INSTALLSTATE_ADVERTISE is not a valid state if the feature disallows advertisement (msidbFeatureAttributesDisallowAdvertise) or the feature requires platform support for advertisement (msidbFeatureAttributesNoUnsupportedAdvertise) and the platform does not support it.</description>
        </item>
        <item>
          <description>INSTALLSTATE_ABSENT is a valid state for the feature if its attributes do not include msidbFeatureAttributesUIDisallowAbsent.</description>
        </item>
        <item>
          <description>Valid states for child features marked to follow the parent feature (msidbFeatureAttributesFollowParent) are based upon the parent feature's action or installed state.</description>
        </item>
      </list>
      <para>After calling
<b>MsiGetFeatureValidStates</b> a conditional statement may then be used to test the valid installation states of a feature. For example, the following call to
<b>MsiGetFeatureValidStates</b> gets the installation state of Feature1.</para>
      <code>MsiGetFeatureValidStates(hProduct, "Feature1", &amp;amp;amp;amp;amp;amp;amp;dwValidStates);
</code>
      <para>If Feature1 has attributes of value 0 (favor local), and Feature1 has one component with attributes of value 0 (local only), the value of dwValidStates after the call is 14. This indicates that INSTALLSTATE_LOCAL, INSTALLSTATE_ABSENT,and INSTALLSTATE_ADVERTISED are valid states for Feature1. The following conditional statement evaluates to True if local is a valid state for this feature.</para>
      <para>( ( dwValidStates &amp; ( 1 &lt;&lt; INSTALLSTATE_LOCAL ) ) == ( 1 &lt;&lt; INSTALLSTATE_LOCAL ) )</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetFeatureValidStates as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureValidStates">
    <summary>
      <para>The
<b>MsiGetFeatureValidStates</b> function returns a valid installation state.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature name.</para>
    </param>
    <param name="lpInstallStates">
      <para>Receives the location to hold the valid installation states. For each valid installation state, the installer sets <i>pInstallState</i> to a combination of the following values. This parameter should not be null.</para>
      <list type="table">
        <listheader>
          <description>Decimal Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>2</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_ADVERTISED</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be advertised.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>4</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_ABSENT</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be absent.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>8</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_LOCAL</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>16</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_SOURCE</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be configured to run from source, CD-ROM, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>32</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_DEFAULT</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be configured to use the default location: local or source.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureValidStates</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>The <b>MsiGetFeatureValidStates</b> function determines state validity by querying all components that are linked to the specified feature without taking into account the current installed state of any component.</para>
      <para>The possible valid states for a feature are determined as follows:</para>
      <list type="bullet">
        <item>
          <description>If the feature does not contain components, both INSTALLSTATE_LOCAL and INSTALLSTATE_SOURCE are valid states for the feature.</description>
        </item>
        <item>
          <description>If at least one component of the feature has an attribute of msidbComponentAttributesLocalOnly or msidbComponentAttributesOptional, INSTALLSTATE_LOCAL is a valid state for the feature.</description>
        </item>
        <item>
          <description>If at least one component of the feature has an attribute of msidbComponentAttributesSourceOnly or msidbComponentAttributesOptional, INSTALLSTATE_SOURCE is a valid state for the feature.</description>
        </item>
        <item>
          <description>If a file of a component that belongs to the feature is patched or from a compressed source, then INSTALLSTATE_SOURCE is not included as a valid state for the feature.</description>
        </item>
        <item>
          <description>INSTALLSTATE_ADVERTISE is not a valid state if the feature disallows advertisement (msidbFeatureAttributesDisallowAdvertise) or the feature requires platform support for advertisement (msidbFeatureAttributesNoUnsupportedAdvertise) and the platform does not support it.</description>
        </item>
        <item>
          <description>INSTALLSTATE_ABSENT is a valid state for the feature if its attributes do not include msidbFeatureAttributesUIDisallowAbsent.</description>
        </item>
        <item>
          <description>Valid states for child features marked to follow the parent feature (msidbFeatureAttributesFollowParent) are based upon the parent feature's action or installed state.</description>
        </item>
      </list>
      <para>After calling
<b>MsiGetFeatureValidStates</b> a conditional statement may then be used to test the valid installation states of a feature. For example, the following call to
<b>MsiGetFeatureValidStates</b> gets the installation state of Feature1.</para>
      <code>MsiGetFeatureValidStates(hProduct, "Feature1", &amp;amp;amp;amp;amp;amp;amp;dwValidStates);
</code>
      <para>If Feature1 has attributes of value 0 (favor local), and Feature1 has one component with attributes of value 0 (local only), the value of dwValidStates after the call is 14. This indicates that INSTALLSTATE_LOCAL, INSTALLSTATE_ABSENT,and INSTALLSTATE_ADVERTISED are valid states for Feature1. The following conditional statement evaluates to True if local is a valid state for this feature.</para>
      <para>( ( dwValidStates &amp; ( 1 &lt;&lt; INSTALLSTATE_LOCAL ) ) == ( 1 &lt;&lt; INSTALLSTATE_LOCAL ) )</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetFeatureValidStates as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureValidStatesA">
    <summary>
      <para>The
<b>MsiGetFeatureValidStates</b> function returns a valid installation state.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature name.</para>
    </param>
    <param name="lpInstallStates">
      <para>Receives the location to hold the valid installation states. For each valid installation state, the installer sets <i>pInstallState</i> to a combination of the following values. This parameter should not be null.</para>
      <list type="table">
        <listheader>
          <description>Decimal Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>2</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_ADVERTISED</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be advertised.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>4</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_ABSENT</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be absent.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>8</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_LOCAL</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>16</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_SOURCE</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be configured to run from source, CD-ROM, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>32</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_DEFAULT</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be configured to use the default location: local or source.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureValidStates</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>The <b>MsiGetFeatureValidStates</b> function determines state validity by querying all components that are linked to the specified feature without taking into account the current installed state of any component.</para>
      <para>The possible valid states for a feature are determined as follows:</para>
      <list type="bullet">
        <item>
          <description>If the feature does not contain components, both INSTALLSTATE_LOCAL and INSTALLSTATE_SOURCE are valid states for the feature.</description>
        </item>
        <item>
          <description>If at least one component of the feature has an attribute of msidbComponentAttributesLocalOnly or msidbComponentAttributesOptional, INSTALLSTATE_LOCAL is a valid state for the feature.</description>
        </item>
        <item>
          <description>If at least one component of the feature has an attribute of msidbComponentAttributesSourceOnly or msidbComponentAttributesOptional, INSTALLSTATE_SOURCE is a valid state for the feature.</description>
        </item>
        <item>
          <description>If a file of a component that belongs to the feature is patched or from a compressed source, then INSTALLSTATE_SOURCE is not included as a valid state for the feature.</description>
        </item>
        <item>
          <description>INSTALLSTATE_ADVERTISE is not a valid state if the feature disallows advertisement (msidbFeatureAttributesDisallowAdvertise) or the feature requires platform support for advertisement (msidbFeatureAttributesNoUnsupportedAdvertise) and the platform does not support it.</description>
        </item>
        <item>
          <description>INSTALLSTATE_ABSENT is a valid state for the feature if its attributes do not include msidbFeatureAttributesUIDisallowAbsent.</description>
        </item>
        <item>
          <description>Valid states for child features marked to follow the parent feature (msidbFeatureAttributesFollowParent) are based upon the parent feature's action or installed state.</description>
        </item>
      </list>
      <para>After calling
<b>MsiGetFeatureValidStates</b> a conditional statement may then be used to test the valid installation states of a feature. For example, the following call to
<b>MsiGetFeatureValidStates</b> gets the installation state of Feature1.</para>
      <code>MsiGetFeatureValidStates(hProduct, "Feature1", &amp;amp;amp;amp;amp;amp;amp;dwValidStates);
</code>
      <para>If Feature1 has attributes of value 0 (favor local), and Feature1 has one component with attributes of value 0 (local only), the value of dwValidStates after the call is 14. This indicates that INSTALLSTATE_LOCAL, INSTALLSTATE_ABSENT,and INSTALLSTATE_ADVERTISED are valid states for Feature1. The following conditional statement evaluates to True if local is a valid state for this feature.</para>
      <para>( ( dwValidStates &amp; ( 1 &lt;&lt; INSTALLSTATE_LOCAL ) ) == ( 1 &lt;&lt; INSTALLSTATE_LOCAL ) )</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetFeatureValidStates as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetFeatureValidStatesW">
    <summary>
      <para>The
<b>MsiGetFeatureValidStates</b> function returns a valid installation state.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature name.</para>
    </param>
    <param name="lpInstallStates">
      <para>Receives the location to hold the valid installation states. For each valid installation state, the installer sets <i>pInstallState</i> to a combination of the following values. This parameter should not be null.</para>
      <list type="table">
        <listheader>
          <description>Decimal Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>2</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_ADVERTISED</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be advertised.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>4</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_ABSENT</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be absent.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>8</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_LOCAL</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>16</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_SOURCE</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be configured to run from source, CD-ROM, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>32</b>
                </description>
              </item>
              <item>
                <description>INSTALLSTATE_DEFAULT</description>
              </item>
            </list>
          </description>
          <description>
            <para>The feature can be configured to use the default location: local or source.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiGetFeatureValidStates</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>The <b>MsiGetFeatureValidStates</b> function determines state validity by querying all components that are linked to the specified feature without taking into account the current installed state of any component.</para>
      <para>The possible valid states for a feature are determined as follows:</para>
      <list type="bullet">
        <item>
          <description>If the feature does not contain components, both INSTALLSTATE_LOCAL and INSTALLSTATE_SOURCE are valid states for the feature.</description>
        </item>
        <item>
          <description>If at least one component of the feature has an attribute of msidbComponentAttributesLocalOnly or msidbComponentAttributesOptional, INSTALLSTATE_LOCAL is a valid state for the feature.</description>
        </item>
        <item>
          <description>If at least one component of the feature has an attribute of msidbComponentAttributesSourceOnly or msidbComponentAttributesOptional, INSTALLSTATE_SOURCE is a valid state for the feature.</description>
        </item>
        <item>
          <description>If a file of a component that belongs to the feature is patched or from a compressed source, then INSTALLSTATE_SOURCE is not included as a valid state for the feature.</description>
        </item>
        <item>
          <description>INSTALLSTATE_ADVERTISE is not a valid state if the feature disallows advertisement (msidbFeatureAttributesDisallowAdvertise) or the feature requires platform support for advertisement (msidbFeatureAttributesNoUnsupportedAdvertise) and the platform does not support it.</description>
        </item>
        <item>
          <description>INSTALLSTATE_ABSENT is a valid state for the feature if its attributes do not include msidbFeatureAttributesUIDisallowAbsent.</description>
        </item>
        <item>
          <description>Valid states for child features marked to follow the parent feature (msidbFeatureAttributesFollowParent) are based upon the parent feature's action or installed state.</description>
        </item>
      </list>
      <para>After calling
<b>MsiGetFeatureValidStates</b> a conditional statement may then be used to test the valid installation states of a feature. For example, the following call to
<b>MsiGetFeatureValidStates</b> gets the installation state of Feature1.</para>
      <code>MsiGetFeatureValidStates(hProduct, "Feature1", &amp;amp;amp;amp;amp;amp;amp;dwValidStates);
</code>
      <para>If Feature1 has attributes of value 0 (favor local), and Feature1 has one component with attributes of value 0 (local only), the value of dwValidStates after the call is 14. This indicates that INSTALLSTATE_LOCAL, INSTALLSTATE_ABSENT,and INSTALLSTATE_ADVERTISED are valid states for Feature1. The following conditional statement evaluates to True if local is a valid state for this feature.</para>
      <para>( ( dwValidStates &amp; ( 1 &lt;&lt; INSTALLSTATE_LOCAL ) ) == ( 1 &lt;&lt; INSTALLSTATE_LOCAL ) )</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetFeatureValidStates as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetLanguage">
    <summary>
      <para>The
<b>MsiGetLanguage</b> function returns the numeric language of the installation that is currently running.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the numeric LANGID for the install.</para>
      <para>If the function fails, the return value can be the following value.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiGetLanguage</b> function returns 0 if an installation is not running.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer State Access Functions</seealso>
  </member>
  <member name="Windows.MsiGetLastErrorRecord">
    <summary>
      <para>The
<b>MsiGetLastErrorRecord</b> function returns the error record that was last returned for the calling process. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <returns>
      <para>A handle to the error record. If the last function was successful,
<b>MsiGetLastErrorRecord</b> returns a null <b>MSIHANDLE</b>.</para>
    </returns>
    <remarks>
      <para>With the
<b>MsiGetLastErrorRecord</b> function, field 1 of the record contains the installer error code. Other fields contain data specific to the particular error. The error record is released internally after this function is run.</para>
      <para>If the record is passed to
<see cref="MsiProcessMessage" />, it is formatted by looking up the string in the current database. If there is no installation session but a product database is open, the format string may be obtained by a query on the
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-table">Error table</a> using the error code, followed by a call to
<see cref="MsiFormatRecord" />. If the error code is known, the parameters may be individually interpreted.</para>
      <para>The following functions set the per-process error record or reset it to null if no error occurred. <b>MsiGetLastErrorRecord</b> also clears the error record after returning it.</para>
      <list type="bullet">
        <item>
          <description>
            <see cref="MsiOpenDatabase" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MsiDatabaseCommit" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MsiDatabaseOpenView" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MsiDatabaseImport" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MsiDatabaseExport" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MsiDatabaseMerge" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MsiDatabaseGenerateTransform" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MsiDatabaseApplyTransform" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MsiViewExecute" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MsiViewModify" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MsiRecordSetStream" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MsiGetSummaryInformation" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MsiGetSourcePath" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MsiGetTargetPath" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MsiSetTargetPath" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MsiGetComponentState" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MsiSetComponentState" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MsiGetFeatureState" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MsiSetFeatureState" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MsiGetFeatureCost" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MsiGetFeatureValidStates" />
          </description>
        </item>
        <item>
          <description>
            <see cref="MsiSetInstallLevel" />
          </description>
        </item>
      </list>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <para>The following sample uses a call to <see cref="MsiDatabaseOpenView" /> to  show how to obtain extended error information from one of the Windows Installer functions that supports <b>MsiGetLastErrorRecord</b>.  The example, OpenViewOnDatabase,  attempts to open a view on a database                 handle. The <i>hDatabase</i> handle can be
obtained by a call to <see cref="MsiOpenDatabase" />. If opening
the view fails, the function then tries to obtain extended
error information by using <b>MsiGetLastErrorRecord</b>.</para>
      <code>#include &lt;windows.h&gt;
#include &lt;Msiquery.h&gt;
#pragma comment(lib, "msi.lib")
//-------------------------------------------------------------------
// Function: OpenViewOnDatabase
//
// Arguments: hDatabase - handle to a MSI package obtained
//                                        via a call to MsiOpenDatabase
//
// Returns: UINT status code. ERROR_SUCCESS for success.
//--------------------------------------------------------------------------------------------------
UINT __stdcall OpenViewOnDatabase(MSIHANDLE hDatabase)
{
    if (!hDatabase)
        return ERROR_INVALID_PARAMETER;

    PMSIHANDLE hView = 0;
    UINT uiReturn = MsiDatabaseOpenView(hDatabase,
                                TEXT("SELECT * FROM `UnknownTable`"),
                           &amp;amp;amp;amp;amp;amp;hView);

    if (ERROR_SUCCESS != uiReturn)
    {
        // try to obtain extended error information.

        PMSIHANDLE hLastErrorRec = MsiGetLastErrorRecord();

        TCHAR* szExtendedError = NULL;
        DWORD cchExtendedError = 0;
        if (hLastErrorRec)
        {
            // Since we are not currently calling MsiFormatRecord during an
            // install session, hInstall is NULL. If MsiFormatRecord was called
            // via a DLL custom action, the hInstall handle provided to the DLL
            // custom action entry point could be used to further resolve
            // properties that might be contained within the error record.

            // To determine the size of the buffer required for the text,
            // szResultBuf must be provided as an empty string with
            // *pcchResultBuf set to 0.

            UINT uiStatus = MsiFormatRecord(NULL,
                             hLastErrorRec,
                             TEXT(""),
                             &amp;amp;amp;amp;amp;amp;cchExtendedError);

            if (ERROR_MORE_DATA == uiStatus)
            {
                // returned size does not include null terminator.
                cchExtendedError++;

                szExtendedError = new TCHAR[cchExtendedError];
                if (szExtendedError)
                {
                    uiStatus = MsiFormatRecord(NULL,
                                     hLastErrorRec,
                                     szExtendedError,
                                     &amp;amp;amp;amp;amp;amp;cchExtendedError);
                    if (ERROR_SUCCESS == uiStatus)
                    {
                        // We now have an extended error
                        // message to report.

                        // PLACE ADDITIONAL CODE HERE
                        // TO LOG THE ERROR MESSAGE
                        // IN szExtendedError.
                    }

                    delete [] szExtendedError;
                    szExtendedError = NULL;
                }
            }
        }
    }

    return uiReturn;
}

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer State Access Functions</seealso>
  </member>
  <member name="Windows.MsiGetMode">
    <summary>
      <para>The
<b>MsiGetMode</b> function is used to determine whether the installer is currently running in a specified mode, as listed in the table. The function returns a Boolean value of <b>TRUE</b> or <b>FALSE</b>, indicating whether the specific property passed into the function is currently set (<b>TRUE</b>) or not set (<b>FALSE</b>).</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="eRunMode">
      <para>Specifies the run mode. This parameter must have one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIRUNMODE_ADMIN</b>
          </description>
          <description>
            <para>The administrative mode is installing, or the product is installing.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIRUNMODE_ADVERTISE</b>
          </description>
          <description>
            <para>The advertisements are installing or the product is installing or updating.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIRUNMODE_MAINTENANCE</b>
          </description>
          <description>
            <para>An existing installation is being modified or there is a new installation.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIRUNMODE_ROLLBACKENABLED</b>
          </description>
          <description>
            <para>Rollback is enabled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIRUNMODE_LOGENABLED</b>
          </description>
          <description>
            <para>The log file is active. It was enabled prior to the installation session.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIRUNMODE_OPERATIONS</b>
          </description>
          <description>
            <para>Execute operations are in the determination phase.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIRUNMODE_REBOOTATEND</b>
          </description>
          <description>
            <para>A reboot is necessary after a successful installation (settable).</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIRUNMODE_REBOOTNOW</b>
          </description>
          <description>
            <para>A reboot is necessary to continue the installation (settable).</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIRUNMODE_CABINET</b>
          </description>
          <description>
            <para>Files from cabinets and
<a href="https://docs.microsoft.com//windows/desktop/Msi/media-table">Media table</a> files are installing.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIRUNMODE_SOURCESHORTNAMES</b>
          </description>
          <description>
            <para>The source LongFileNames is suppressed through the PID_MSISOURCE summary property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIRUNMODE_TARGETSHORTNAMES</b>
          </description>
          <description>
            <para>The target LongFileNames is suppressed through the <a href="https://docs.microsoft.com//windows/desktop/Msi/shortfilenames">SHORTFILENAMES</a> property.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIRUNMODE_RESERVED11</b>
          </description>
          <description>
            <para>Reserved for future use.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIRUNMODE_WINDOWS9X</b>
          </description>
          <description>
            <para>The operating system is a 9x version.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIRUNMODE_ZAWENABLED</b>
          </description>
          <description>
            <para>The operating system supports demand installation.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIRUNMODE_RESERVED14</b>
          </description>
          <description>
            <para>Reserved for future use.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIRUNMODE_RESERVED15</b>
          </description>
          <description>
            <para>Reserved for future use.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIRUNMODE_SCHEDULED</b>
          </description>
          <description>
            <para>A custom action called from install script execution.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIRUNMODE_ROLLBACK</b>
          </description>
          <description>
            <para>A custom action called from rollback execution script.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIRUNMODE_COMMIT</b>
          </description>
          <description>
            <para>A custom action called from commit execution script.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>
        <b>TRUE</b> indicates the specific property passed into the function is currently set.</para>
      <para>
        <b>FALSE</b> indicates the specific property passed into the function is currently not set.</para>
    </returns>
    <remarks>
      <para>Note that not all the run mode values of <i>iRunMode</i> are available when calling
<b>MsiGetMode</b> from a deferred custom action. For details, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/obtaining-context-information-for-deferred-execution-custom-actions">Obtaining Context Information for Deferred Execution Custom Actions</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer State Access Functions</seealso>
  </member>
  <member name="Windows.MsiGetProperty">
    <summary>
      <para>The
<b>MsiGetProperty</b> function gets the value for an installer property.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szName">
      <para>A null-terminated string that specifies the name of the property.</para>
    </param>
    <param name="szValueBuf">
      <para>Pointer to the buffer that receives the null terminated string containing the value of the property. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function will then return ERROR_MORE_DATA and <i>pchValueBuf </i> will contain the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchValueBuf </i> contains the number of TCHARs written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf </i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pchValueBuf</i>.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>If the value for the property retrieved by the
<b>MsiGetProperty</b> function is not defined, it is equivalent to a 0-length value. It is not an error.</para>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>The following example shows how a DLL custom action could access the value of a property by dynamically determining the size of the value buffer.</para>
      <code>UINT __stdcall MyCustomAction(MSIHANDLE hInstall)
{
    TCHAR* szValueBuf = NULL;
    DWORD cchValueBuf = 0;
    UINT uiStat =  MsiGetProperty(hInstall, TEXT("MyProperty"), TEXT(""), &amp;amp;amp;amp;amp;amp;cchValueBuf);
    //cchValueBuf now contains the size of the property's string, without null termination
    if (ERROR_MORE_DATA == uiStat)
    {
        ++cchValueBuf; // add 1 for null termination
        szValueBuf = new TCHAR[cchValueBuf];
        if (szValueBuf)
        {
            uiStat = MsiGetProperty(hInstall, TEXT("MyProperty"), szValueBuf, &amp;amp;amp;amp;amp;amp;cchValueBuf);
        }
    }
    if (ERROR_SUCCESS != uiStat)
    {
        if (szValueBuf != NULL)
           delete[] szValueBuf;
        return ERROR_INSTALL_FAILURE;
    }

    // custom action uses MyProperty
    // ...

    delete[] szValueBuf;

    return ERROR_SUCCESS;
}

</code>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer State Access Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetPropertyA">
    <summary>
      <para>The
<b>MsiGetProperty</b> function gets the value for an installer property.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szName">
      <para>A null-terminated string that specifies the name of the property.</para>
    </param>
    <param name="szValueBuf">
      <para>Pointer to the buffer that receives the null terminated string containing the value of the property. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function will then return ERROR_MORE_DATA and <i>pchValueBuf </i> will contain the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchValueBuf </i> contains the number of TCHARs written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf </i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pchValueBuf</i>.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>If the value for the property retrieved by the
<b>MsiGetProperty</b> function is not defined, it is equivalent to a 0-length value. It is not an error.</para>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>The following example shows how a DLL custom action could access the value of a property by dynamically determining the size of the value buffer.</para>
      <code>UINT __stdcall MyCustomAction(MSIHANDLE hInstall)
{
    TCHAR* szValueBuf = NULL;
    DWORD cchValueBuf = 0;
    UINT uiStat =  MsiGetProperty(hInstall, TEXT("MyProperty"), TEXT(""), &amp;amp;amp;amp;amp;amp;cchValueBuf);
    //cchValueBuf now contains the size of the property's string, without null termination
    if (ERROR_MORE_DATA == uiStat)
    {
        ++cchValueBuf; // add 1 for null termination
        szValueBuf = new TCHAR[cchValueBuf];
        if (szValueBuf)
        {
            uiStat = MsiGetProperty(hInstall, TEXT("MyProperty"), szValueBuf, &amp;amp;amp;amp;amp;amp;cchValueBuf);
        }
    }
    if (ERROR_SUCCESS != uiStat)
    {
        if (szValueBuf != NULL)
           delete[] szValueBuf;
        return ERROR_INSTALL_FAILURE;
    }

    // custom action uses MyProperty
    // ...

    delete[] szValueBuf;

    return ERROR_SUCCESS;
}

</code>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer State Access Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetPropertyW">
    <summary>
      <para>The
<b>MsiGetProperty</b> function gets the value for an installer property.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szName">
      <para>A null-terminated string that specifies the name of the property.</para>
    </param>
    <param name="szValueBuf">
      <para>Pointer to the buffer that receives the null terminated string containing the value of the property. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function will then return ERROR_MORE_DATA and <i>pchValueBuf </i> will contain the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchValueBuf </i> contains the number of TCHARs written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf </i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pchValueBuf</i>.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>If the value for the property retrieved by the
<b>MsiGetProperty</b> function is not defined, it is equivalent to a 0-length value. It is not an error.</para>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>The following example shows how a DLL custom action could access the value of a property by dynamically determining the size of the value buffer.</para>
      <code>UINT __stdcall MyCustomAction(MSIHANDLE hInstall)
{
    TCHAR* szValueBuf = NULL;
    DWORD cchValueBuf = 0;
    UINT uiStat =  MsiGetProperty(hInstall, TEXT("MyProperty"), TEXT(""), &amp;amp;amp;amp;amp;amp;cchValueBuf);
    //cchValueBuf now contains the size of the property's string, without null termination
    if (ERROR_MORE_DATA == uiStat)
    {
        ++cchValueBuf; // add 1 for null termination
        szValueBuf = new TCHAR[cchValueBuf];
        if (szValueBuf)
        {
            uiStat = MsiGetProperty(hInstall, TEXT("MyProperty"), szValueBuf, &amp;amp;amp;amp;amp;amp;cchValueBuf);
        }
    }
    if (ERROR_SUCCESS != uiStat)
    {
        if (szValueBuf != NULL)
           delete[] szValueBuf;
        return ERROR_INSTALL_FAILURE;
    }

    // custom action uses MyProperty
    // ...

    delete[] szValueBuf;

    return ERROR_SUCCESS;
}

</code>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer State Access Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetProperty">
    <summary>
      <para>The
<b>MsiGetProperty</b> function gets the value for an installer property.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szName">
      <para>A null-terminated string that specifies the name of the property.</para>
    </param>
    <param name="szValueBuf">
      <para>Pointer to the buffer that receives the null terminated string containing the value of the property. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function will then return ERROR_MORE_DATA and <i>pchValueBuf </i> will contain the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchValueBuf </i> contains the number of TCHARs written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf </i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pchValueBuf</i>.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>If the value for the property retrieved by the
<b>MsiGetProperty</b> function is not defined, it is equivalent to a 0-length value. It is not an error.</para>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>The following example shows how a DLL custom action could access the value of a property by dynamically determining the size of the value buffer.</para>
      <code>UINT __stdcall MyCustomAction(MSIHANDLE hInstall)
{
    TCHAR* szValueBuf = NULL;
    DWORD cchValueBuf = 0;
    UINT uiStat =  MsiGetProperty(hInstall, TEXT("MyProperty"), TEXT(""), &amp;amp;amp;amp;amp;amp;cchValueBuf);
    //cchValueBuf now contains the size of the property's string, without null termination
    if (ERROR_MORE_DATA == uiStat)
    {
        ++cchValueBuf; // add 1 for null termination
        szValueBuf = new TCHAR[cchValueBuf];
        if (szValueBuf)
        {
            uiStat = MsiGetProperty(hInstall, TEXT("MyProperty"), szValueBuf, &amp;amp;amp;amp;amp;amp;cchValueBuf);
        }
    }
    if (ERROR_SUCCESS != uiStat)
    {
        if (szValueBuf != NULL)
           delete[] szValueBuf;
        return ERROR_INSTALL_FAILURE;
    }

    // custom action uses MyProperty
    // ...

    delete[] szValueBuf;

    return ERROR_SUCCESS;
}

</code>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer State Access Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetPropertyA">
    <summary>
      <para>The
<b>MsiGetProperty</b> function gets the value for an installer property.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szName">
      <para>A null-terminated string that specifies the name of the property.</para>
    </param>
    <param name="szValueBuf">
      <para>Pointer to the buffer that receives the null terminated string containing the value of the property. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function will then return ERROR_MORE_DATA and <i>pchValueBuf </i> will contain the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchValueBuf </i> contains the number of TCHARs written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf </i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pchValueBuf</i>.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>If the value for the property retrieved by the
<b>MsiGetProperty</b> function is not defined, it is equivalent to a 0-length value. It is not an error.</para>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>The following example shows how a DLL custom action could access the value of a property by dynamically determining the size of the value buffer.</para>
      <code>UINT __stdcall MyCustomAction(MSIHANDLE hInstall)
{
    TCHAR* szValueBuf = NULL;
    DWORD cchValueBuf = 0;
    UINT uiStat =  MsiGetProperty(hInstall, TEXT("MyProperty"), TEXT(""), &amp;amp;amp;amp;amp;amp;cchValueBuf);
    //cchValueBuf now contains the size of the property's string, without null termination
    if (ERROR_MORE_DATA == uiStat)
    {
        ++cchValueBuf; // add 1 for null termination
        szValueBuf = new TCHAR[cchValueBuf];
        if (szValueBuf)
        {
            uiStat = MsiGetProperty(hInstall, TEXT("MyProperty"), szValueBuf, &amp;amp;amp;amp;amp;amp;cchValueBuf);
        }
    }
    if (ERROR_SUCCESS != uiStat)
    {
        if (szValueBuf != NULL)
           delete[] szValueBuf;
        return ERROR_INSTALL_FAILURE;
    }

    // custom action uses MyProperty
    // ...

    delete[] szValueBuf;

    return ERROR_SUCCESS;
}

</code>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer State Access Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetPropertyW">
    <summary>
      <para>The
<b>MsiGetProperty</b> function gets the value for an installer property.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szName">
      <para>A null-terminated string that specifies the name of the property.</para>
    </param>
    <param name="szValueBuf">
      <para>Pointer to the buffer that receives the null terminated string containing the value of the property. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function will then return ERROR_MORE_DATA and <i>pchValueBuf </i> will contain the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchValueBuf </i> contains the number of TCHARs written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf </i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pchValueBuf</i>.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>If the value for the property retrieved by the
<b>MsiGetProperty</b> function is not defined, it is equivalent to a 0-length value. It is not an error.</para>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>The following example shows how a DLL custom action could access the value of a property by dynamically determining the size of the value buffer.</para>
      <code>UINT __stdcall MyCustomAction(MSIHANDLE hInstall)
{
    TCHAR* szValueBuf = NULL;
    DWORD cchValueBuf = 0;
    UINT uiStat =  MsiGetProperty(hInstall, TEXT("MyProperty"), TEXT(""), &amp;amp;amp;amp;amp;amp;cchValueBuf);
    //cchValueBuf now contains the size of the property's string, without null termination
    if (ERROR_MORE_DATA == uiStat)
    {
        ++cchValueBuf; // add 1 for null termination
        szValueBuf = new TCHAR[cchValueBuf];
        if (szValueBuf)
        {
            uiStat = MsiGetProperty(hInstall, TEXT("MyProperty"), szValueBuf, &amp;amp;amp;amp;amp;amp;cchValueBuf);
        }
    }
    if (ERROR_SUCCESS != uiStat)
    {
        if (szValueBuf != NULL)
           delete[] szValueBuf;
        return ERROR_INSTALL_FAILURE;
    }

    // custom action uses MyProperty
    // ...

    delete[] szValueBuf;

    return ERROR_SUCCESS;
}

</code>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer State Access Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetSourcePath">
    <summary>
      <para>The
<b>MsiGetSourcePath</b> function returns the full source path for a folder in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFolder">
      <para>A null-terminated string that specifies a record of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.</para>
    </param>
    <param name="szPathBuf">
      <para>Pointer to the buffer that receives the null terminated full source path. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szPathBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchPathBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchPathBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szPathBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szPathBuf</i>, not including the terminating null character. If <i>szPathBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchPathBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetSourcePath</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>Before calling this function, the installer must first run the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize action</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/filecost-action">FileCost action</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.</para>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetSourcePath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Location Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetSourcePathA">
    <summary>
      <para>The
<b>MsiGetSourcePath</b> function returns the full source path for a folder in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFolder">
      <para>A null-terminated string that specifies a record of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.</para>
    </param>
    <param name="szPathBuf">
      <para>Pointer to the buffer that receives the null terminated full source path. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szPathBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchPathBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchPathBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szPathBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szPathBuf</i>, not including the terminating null character. If <i>szPathBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchPathBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetSourcePath</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>Before calling this function, the installer must first run the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize action</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/filecost-action">FileCost action</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.</para>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetSourcePath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Location Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetSourcePathW">
    <summary>
      <para>The
<b>MsiGetSourcePath</b> function returns the full source path for a folder in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFolder">
      <para>A null-terminated string that specifies a record of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.</para>
    </param>
    <param name="szPathBuf">
      <para>Pointer to the buffer that receives the null terminated full source path. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szPathBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchPathBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchPathBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szPathBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szPathBuf</i>, not including the terminating null character. If <i>szPathBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchPathBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetSourcePath</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>Before calling this function, the installer must first run the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize action</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/filecost-action">FileCost action</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.</para>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetSourcePath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Location Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetSourcePath">
    <summary>
      <para>The
<b>MsiGetSourcePath</b> function returns the full source path for a folder in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFolder">
      <para>A null-terminated string that specifies a record of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.</para>
    </param>
    <param name="szPathBuf">
      <para>Pointer to the buffer that receives the null terminated full source path. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szPathBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchPathBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchPathBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szPathBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szPathBuf</i>, not including the terminating null character. If <i>szPathBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchPathBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetSourcePath</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>Before calling this function, the installer must first run the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize action</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/filecost-action">FileCost action</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.</para>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetSourcePath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Location Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetSourcePathA">
    <summary>
      <para>The
<b>MsiGetSourcePath</b> function returns the full source path for a folder in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFolder">
      <para>A null-terminated string that specifies a record of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.</para>
    </param>
    <param name="szPathBuf">
      <para>Pointer to the buffer that receives the null terminated full source path. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szPathBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchPathBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchPathBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szPathBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szPathBuf</i>, not including the terminating null character. If <i>szPathBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchPathBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetSourcePath</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>Before calling this function, the installer must first run the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize action</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/filecost-action">FileCost action</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.</para>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetSourcePath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Location Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetSourcePathW">
    <summary>
      <para>The
<b>MsiGetSourcePath</b> function returns the full source path for a folder in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFolder">
      <para>A null-terminated string that specifies a record of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.</para>
    </param>
    <param name="szPathBuf">
      <para>Pointer to the buffer that receives the null terminated full source path. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szPathBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchPathBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchPathBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szPathBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szPathBuf</i>, not including the terminating null character. If <i>szPathBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchPathBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetSourcePath</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>Before calling this function, the installer must first run the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize action</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/filecost-action">FileCost action</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.</para>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetSourcePath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Location Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetSummaryInformation">
    <summary>
      <para>The
<b>MsiGetSummaryInformation</b> function obtains a handle to the _SummaryInformation stream for an installer database. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database.</para>
    </param>
    <param name="szDatabasePath">
      <para>Specifies the path to the database.</para>
    </param>
    <param name="uiUpdateCount">
      <para>Specifies the maximum number of updated values.</para>
    </param>
    <param name="phSummaryInfo">
      <para>Pointer to the location from which to receive the summary information handle.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetSummaryInformation</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>If the database specified by the
<b>MsiGetSummaryInformation</b> function is not open, you must specify 0 for <i>hDatabase</i> and specify the path to the database in <i>szDatabasePath</i>. If the database is open, you must set <i>szDatabasePath</i> to 0.</para>
      <para>If a value of <i>uiUpdateCount</i> greater than 0 is used to open an existing summary information stream,
<see cref="MsiSummaryInfoPersist" /> must be called before closing the <i>phSummaryInfo</i> handle. Failing to do this will lose the existing stream information.</para>
      <para>To view the summary information of a patch using <b>MsiGetSummaryInformation</b>, set <i>szDatabasePath</i> to the path to the patch. Alternately, you can create a handle to the patch using
<see cref="MsiOpenDatabase" /> and then pass that handle to
<b>MsiGetSummaryInformation</b> as the <i>hDatabase</i> parameter.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetSummaryInformation as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Summary Information Property Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
  </member>
  <member name="Windows.MsiGetSummaryInformationA">
    <summary>
      <para>The
<b>MsiGetSummaryInformation</b> function obtains a handle to the _SummaryInformation stream for an installer database. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database.</para>
    </param>
    <param name="szDatabasePath">
      <para>Specifies the path to the database.</para>
    </param>
    <param name="uiUpdateCount">
      <para>Specifies the maximum number of updated values.</para>
    </param>
    <param name="phSummaryInfo">
      <para>Pointer to the location from which to receive the summary information handle.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetSummaryInformation</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>If the database specified by the
<b>MsiGetSummaryInformation</b> function is not open, you must specify 0 for <i>hDatabase</i> and specify the path to the database in <i>szDatabasePath</i>. If the database is open, you must set <i>szDatabasePath</i> to 0.</para>
      <para>If a value of <i>uiUpdateCount</i> greater than 0 is used to open an existing summary information stream,
<see cref="MsiSummaryInfoPersist" /> must be called before closing the <i>phSummaryInfo</i> handle. Failing to do this will lose the existing stream information.</para>
      <para>To view the summary information of a patch using <b>MsiGetSummaryInformation</b>, set <i>szDatabasePath</i> to the path to the patch. Alternately, you can create a handle to the patch using
<see cref="MsiOpenDatabase" /> and then pass that handle to
<b>MsiGetSummaryInformation</b> as the <i>hDatabase</i> parameter.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetSummaryInformation as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Summary Information Property Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
  </member>
  <member name="Windows.MsiGetSummaryInformationW">
    <summary>
      <para>The
<b>MsiGetSummaryInformation</b> function obtains a handle to the _SummaryInformation stream for an installer database. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database.</para>
    </param>
    <param name="szDatabasePath">
      <para>Specifies the path to the database.</para>
    </param>
    <param name="uiUpdateCount">
      <para>Specifies the maximum number of updated values.</para>
    </param>
    <param name="phSummaryInfo">
      <para>Pointer to the location from which to receive the summary information handle.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetSummaryInformation</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>If the database specified by the
<b>MsiGetSummaryInformation</b> function is not open, you must specify 0 for <i>hDatabase</i> and specify the path to the database in <i>szDatabasePath</i>. If the database is open, you must set <i>szDatabasePath</i> to 0.</para>
      <para>If a value of <i>uiUpdateCount</i> greater than 0 is used to open an existing summary information stream,
<see cref="MsiSummaryInfoPersist" /> must be called before closing the <i>phSummaryInfo</i> handle. Failing to do this will lose the existing stream information.</para>
      <para>To view the summary information of a patch using <b>MsiGetSummaryInformation</b>, set <i>szDatabasePath</i> to the path to the patch. Alternately, you can create a handle to the patch using
<see cref="MsiOpenDatabase" /> and then pass that handle to
<b>MsiGetSummaryInformation</b> as the <i>hDatabase</i> parameter.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetSummaryInformation as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Summary Information Property Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
  </member>
  <member name="Windows.MsiGetSummaryInformation">
    <summary>
      <para>The
<b>MsiGetSummaryInformation</b> function obtains a handle to the _SummaryInformation stream for an installer database. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database.</para>
    </param>
    <param name="szDatabasePath">
      <para>Specifies the path to the database.</para>
    </param>
    <param name="uiUpdateCount">
      <para>Specifies the maximum number of updated values.</para>
    </param>
    <param name="phSummaryInfo">
      <para>Pointer to the location from which to receive the summary information handle.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetSummaryInformation</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>If the database specified by the
<b>MsiGetSummaryInformation</b> function is not open, you must specify 0 for <i>hDatabase</i> and specify the path to the database in <i>szDatabasePath</i>. If the database is open, you must set <i>szDatabasePath</i> to 0.</para>
      <para>If a value of <i>uiUpdateCount</i> greater than 0 is used to open an existing summary information stream,
<see cref="MsiSummaryInfoPersist" /> must be called before closing the <i>phSummaryInfo</i> handle. Failing to do this will lose the existing stream information.</para>
      <para>To view the summary information of a patch using <b>MsiGetSummaryInformation</b>, set <i>szDatabasePath</i> to the path to the patch. Alternately, you can create a handle to the patch using
<see cref="MsiOpenDatabase" /> and then pass that handle to
<b>MsiGetSummaryInformation</b> as the <i>hDatabase</i> parameter.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetSummaryInformation as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Summary Information Property Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
  </member>
  <member name="Windows.MsiGetSummaryInformationA">
    <summary>
      <para>The
<b>MsiGetSummaryInformation</b> function obtains a handle to the _SummaryInformation stream for an installer database. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database.</para>
    </param>
    <param name="szDatabasePath">
      <para>Specifies the path to the database.</para>
    </param>
    <param name="uiUpdateCount">
      <para>Specifies the maximum number of updated values.</para>
    </param>
    <param name="phSummaryInfo">
      <para>Pointer to the location from which to receive the summary information handle.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetSummaryInformation</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>If the database specified by the
<b>MsiGetSummaryInformation</b> function is not open, you must specify 0 for <i>hDatabase</i> and specify the path to the database in <i>szDatabasePath</i>. If the database is open, you must set <i>szDatabasePath</i> to 0.</para>
      <para>If a value of <i>uiUpdateCount</i> greater than 0 is used to open an existing summary information stream,
<see cref="MsiSummaryInfoPersist" /> must be called before closing the <i>phSummaryInfo</i> handle. Failing to do this will lose the existing stream information.</para>
      <para>To view the summary information of a patch using <b>MsiGetSummaryInformation</b>, set <i>szDatabasePath</i> to the path to the patch. Alternately, you can create a handle to the patch using
<see cref="MsiOpenDatabase" /> and then pass that handle to
<b>MsiGetSummaryInformation</b> as the <i>hDatabase</i> parameter.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetSummaryInformation as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Summary Information Property Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
  </member>
  <member name="Windows.MsiGetSummaryInformationW">
    <summary>
      <para>The
<b>MsiGetSummaryInformation</b> function obtains a handle to the _SummaryInformation stream for an installer database. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hDatabase">
      <para>Handle to the database.</para>
    </param>
    <param name="szDatabasePath">
      <para>Specifies the path to the database.</para>
    </param>
    <param name="uiUpdateCount">
      <para>Specifies the maximum number of updated values.</para>
    </param>
    <param name="phSummaryInfo">
      <para>Pointer to the location from which to receive the summary information handle.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetSummaryInformation</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>If the database specified by the
<b>MsiGetSummaryInformation</b> function is not open, you must specify 0 for <i>hDatabase</i> and specify the path to the database in <i>szDatabasePath</i>. If the database is open, you must set <i>szDatabasePath</i> to 0.</para>
      <para>If a value of <i>uiUpdateCount</i> greater than 0 is used to open an existing summary information stream,
<see cref="MsiSummaryInfoPersist" /> must be called before closing the <i>phSummaryInfo</i> handle. Failing to do this will lose the existing stream information.</para>
      <para>To view the summary information of a patch using <b>MsiGetSummaryInformation</b>, set <i>szDatabasePath</i> to the path to the patch. Alternately, you can create a handle to the patch using
<see cref="MsiOpenDatabase" /> and then pass that handle to
<b>MsiGetSummaryInformation</b> as the <i>hDatabase</i> parameter.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetSummaryInformation as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Summary Information Property Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
  </member>
  <member name="Windows.MsiGetTargetPath">
    <summary>
      <para>The
<b>MsiGetTargetPath</b> function returns the full target path for a folder in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFolder">
      <para>A null-terminated string that specifies a record of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.</para>
    </param>
    <param name="szPathBuf">
      <para>Pointer to the buffer that receives the null terminated full target path. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szPathBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchPathBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchPathBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to the variable that specifies the size, in <b>TCHARs</b>, of the buffer pointed to by the variable <i>szPathBuf</i> When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szPathBuf</i>, not including the terminating null character. If <i>szPathBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchPathBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetTargetPath</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>Before calling this function, the installer must first run the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize action</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/filecost-action">FileCost action</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.</para>
      <para>
        <b>MsiGetTargetPath</b> returns the default path of the target directory authored in the package if the target's current location is unavailable for an installation. For example, if during a
<a href="https://docs.microsoft.com//windows/desktop/Msi/maintenance-installation">Maintenance Installation</a> a target directory at a network location is unavailable, the installer resets the target directory paths back to their defaults. To get the actual path of the target directory in this case call
<see cref="MsiProvideComponent" /> for a component that is known to have been previously installed into the searched for directory and set <i>dwInstallMode</i> to INSTALLMODE_NODETECTION.</para>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetTargetPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Location Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetTargetPathA">
    <summary>
      <para>The
<b>MsiGetTargetPath</b> function returns the full target path for a folder in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFolder">
      <para>A null-terminated string that specifies a record of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.</para>
    </param>
    <param name="szPathBuf">
      <para>Pointer to the buffer that receives the null terminated full target path. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szPathBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchPathBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchPathBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to the variable that specifies the size, in <b>TCHARs</b>, of the buffer pointed to by the variable <i>szPathBuf</i> When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szPathBuf</i>, not including the terminating null character. If <i>szPathBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchPathBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetTargetPath</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>Before calling this function, the installer must first run the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize action</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/filecost-action">FileCost action</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.</para>
      <para>
        <b>MsiGetTargetPath</b> returns the default path of the target directory authored in the package if the target's current location is unavailable for an installation. For example, if during a
<a href="https://docs.microsoft.com//windows/desktop/Msi/maintenance-installation">Maintenance Installation</a> a target directory at a network location is unavailable, the installer resets the target directory paths back to their defaults. To get the actual path of the target directory in this case call
<see cref="MsiProvideComponent" /> for a component that is known to have been previously installed into the searched for directory and set <i>dwInstallMode</i> to INSTALLMODE_NODETECTION.</para>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetTargetPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Location Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetTargetPathW">
    <summary>
      <para>The
<b>MsiGetTargetPath</b> function returns the full target path for a folder in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFolder">
      <para>A null-terminated string that specifies a record of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.</para>
    </param>
    <param name="szPathBuf">
      <para>Pointer to the buffer that receives the null terminated full target path. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szPathBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchPathBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchPathBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to the variable that specifies the size, in <b>TCHARs</b>, of the buffer pointed to by the variable <i>szPathBuf</i> When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szPathBuf</i>, not including the terminating null character. If <i>szPathBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchPathBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetTargetPath</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>Before calling this function, the installer must first run the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize action</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/filecost-action">FileCost action</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.</para>
      <para>
        <b>MsiGetTargetPath</b> returns the default path of the target directory authored in the package if the target's current location is unavailable for an installation. For example, if during a
<a href="https://docs.microsoft.com//windows/desktop/Msi/maintenance-installation">Maintenance Installation</a> a target directory at a network location is unavailable, the installer resets the target directory paths back to their defaults. To get the actual path of the target directory in this case call
<see cref="MsiProvideComponent" /> for a component that is known to have been previously installed into the searched for directory and set <i>dwInstallMode</i> to INSTALLMODE_NODETECTION.</para>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetTargetPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Location Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetTargetPath">
    <summary>
      <para>The
<b>MsiGetTargetPath</b> function returns the full target path for a folder in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFolder">
      <para>A null-terminated string that specifies a record of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.</para>
    </param>
    <param name="szPathBuf">
      <para>Pointer to the buffer that receives the null terminated full target path. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szPathBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchPathBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchPathBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to the variable that specifies the size, in <b>TCHARs</b>, of the buffer pointed to by the variable <i>szPathBuf</i> When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szPathBuf</i>, not including the terminating null character. If <i>szPathBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchPathBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetTargetPath</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>Before calling this function, the installer must first run the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize action</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/filecost-action">FileCost action</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.</para>
      <para>
        <b>MsiGetTargetPath</b> returns the default path of the target directory authored in the package if the target's current location is unavailable for an installation. For example, if during a
<a href="https://docs.microsoft.com//windows/desktop/Msi/maintenance-installation">Maintenance Installation</a> a target directory at a network location is unavailable, the installer resets the target directory paths back to their defaults. To get the actual path of the target directory in this case call
<see cref="MsiProvideComponent" /> for a component that is known to have been previously installed into the searched for directory and set <i>dwInstallMode</i> to INSTALLMODE_NODETECTION.</para>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetTargetPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Location Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetTargetPathA">
    <summary>
      <para>The
<b>MsiGetTargetPath</b> function returns the full target path for a folder in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFolder">
      <para>A null-terminated string that specifies a record of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.</para>
    </param>
    <param name="szPathBuf">
      <para>Pointer to the buffer that receives the null terminated full target path. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szPathBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchPathBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchPathBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to the variable that specifies the size, in <b>TCHARs</b>, of the buffer pointed to by the variable <i>szPathBuf</i> When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szPathBuf</i>, not including the terminating null character. If <i>szPathBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchPathBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetTargetPath</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>Before calling this function, the installer must first run the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize action</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/filecost-action">FileCost action</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.</para>
      <para>
        <b>MsiGetTargetPath</b> returns the default path of the target directory authored in the package if the target's current location is unavailable for an installation. For example, if during a
<a href="https://docs.microsoft.com//windows/desktop/Msi/maintenance-installation">Maintenance Installation</a> a target directory at a network location is unavailable, the installer resets the target directory paths back to their defaults. To get the actual path of the target directory in this case call
<see cref="MsiProvideComponent" /> for a component that is known to have been previously installed into the searched for directory and set <i>dwInstallMode</i> to INSTALLMODE_NODETECTION.</para>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetTargetPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Location Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiGetTargetPathW">
    <summary>
      <para>The
<b>MsiGetTargetPath</b> function returns the full target path for a folder in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFolder">
      <para>A null-terminated string that specifies a record of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.</para>
    </param>
    <param name="szPathBuf">
      <para>Pointer to the buffer that receives the null terminated full target path. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szPathBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchPathBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchPathBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchPathBuf">
      <para>Pointer to the variable that specifies the size, in <b>TCHARs</b>, of the buffer pointed to by the variable <i>szPathBuf</i> When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szPathBuf</i>, not including the terminating null character. If <i>szPathBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchPathBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiGetTargetPath</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>Before calling this function, the installer must first run the
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize action</a>,
<a href="https://docs.microsoft.com//windows/desktop/Msi/filecost-action">FileCost action</a>, and
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.</para>
      <para>
        <b>MsiGetTargetPath</b> returns the default path of the target directory authored in the package if the target's current location is unavailable for an installation. For example, if during a
<a href="https://docs.microsoft.com//windows/desktop/Msi/maintenance-installation">Maintenance Installation</a> a target directory at a network location is unavailable, the installer resets the target directory paths back to their defaults. To get the actual path of the target directory in this case call
<see cref="MsiProvideComponent" /> for a component that is known to have been previously installed into the searched for directory and set <i>dwInstallMode</i> to INSTALLMODE_NODETECTION.</para>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiGetTargetPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Location Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiOpenDatabase">
    <summary>
      <para>The
<b>MsiOpenDatabase</b> function opens a database file for data access. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="szDatabasePath">
      <para>Specifies the full path or relative path to the database file.</para>
    </param>
    <param name="szPersist">
      <para>Receives the full path to the file or the persistence mode. You can use the <i>szPersist</i> parameter to direct the persistent output to a new file or to specify one of the following predefined persistence modes.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIDBOPEN_CREATEDIRECT</b>
          </description>
          <description>
            <para>Create a new database, direct mode read/write.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_CREATE</b>
          </description>
          <description>
            <para>Create a new database, transact mode read/write.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_DIRECT</b>
          </description>
          <description>
            <para>Open a database direct read/write without transaction.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_READONLY</b>
          </description>
          <description>
            <para>Open a database read-only, no persistent changes.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_TRANSACT</b>
          </description>
          <description>
            <para>Open a database read/write in transaction mode.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_PATCHFILE</b>
          </description>
          <description>
            <para>Add this flag to indicate a patch file.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phDatabase">
      <para>Pointer to the location of the returned database handle.</para>
    </param>
    <returns>
      <para>The
<b>MsiOpenDatabase</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>To make and save changes to a database first open the database in transaction (MSIDBOPEN_TRANSACT), create (MSIDBOPEN_CREATE or MSIDBOPEN_CREATEDIRECT), or direct (MSIDBOPEN_DIRECT) mode. After making the changes, always call
<see cref="MsiDatabaseCommit" /> before closing the database handle.
<b>MsiDatabaseCommit</b> flushes all buffers.</para>
      <para>Always call
<see cref="MsiDatabaseCommit" /> on a database that has been opened in direct mode (MSIDBOPEN_DIRECT or MSIDBOPEN_CREATEDIRECT) before closing the database's handle. Failure to do this may corrupt the database.</para>
      <para>Because
<b>MsiOpenDatabase</b> initiates database access, it cannot be used with a running installation.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <para>
        <b>Note</b>  When a database is opened as the output of another database, the summary information stream of the output database is actually a read-only mirror of the original database, and, thus, cannot be changed. Additionally, it is not persisted with the database. To create or modify the summary information for the output database, it must be closed and reopened.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiOpenDatabase as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/a-database-and-patch-example">A Database and Patch Example</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiOpenDatabaseA">
    <summary>
      <para>The
<b>MsiOpenDatabase</b> function opens a database file for data access. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="szDatabasePath">
      <para>Specifies the full path or relative path to the database file.</para>
    </param>
    <param name="szPersist">
      <para>Receives the full path to the file or the persistence mode. You can use the <i>szPersist</i> parameter to direct the persistent output to a new file or to specify one of the following predefined persistence modes.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIDBOPEN_CREATEDIRECT</b>
          </description>
          <description>
            <para>Create a new database, direct mode read/write.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_CREATE</b>
          </description>
          <description>
            <para>Create a new database, transact mode read/write.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_DIRECT</b>
          </description>
          <description>
            <para>Open a database direct read/write without transaction.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_READONLY</b>
          </description>
          <description>
            <para>Open a database read-only, no persistent changes.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_TRANSACT</b>
          </description>
          <description>
            <para>Open a database read/write in transaction mode.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_PATCHFILE</b>
          </description>
          <description>
            <para>Add this flag to indicate a patch file.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phDatabase">
      <para>Pointer to the location of the returned database handle.</para>
    </param>
    <returns>
      <para>The
<b>MsiOpenDatabase</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>To make and save changes to a database first open the database in transaction (MSIDBOPEN_TRANSACT), create (MSIDBOPEN_CREATE or MSIDBOPEN_CREATEDIRECT), or direct (MSIDBOPEN_DIRECT) mode. After making the changes, always call
<see cref="MsiDatabaseCommit" /> before closing the database handle.
<b>MsiDatabaseCommit</b> flushes all buffers.</para>
      <para>Always call
<see cref="MsiDatabaseCommit" /> on a database that has been opened in direct mode (MSIDBOPEN_DIRECT or MSIDBOPEN_CREATEDIRECT) before closing the database's handle. Failure to do this may corrupt the database.</para>
      <para>Because
<b>MsiOpenDatabase</b> initiates database access, it cannot be used with a running installation.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <para>
        <b>Note</b>  When a database is opened as the output of another database, the summary information stream of the output database is actually a read-only mirror of the original database, and, thus, cannot be changed. Additionally, it is not persisted with the database. To create or modify the summary information for the output database, it must be closed and reopened.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiOpenDatabase as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/a-database-and-patch-example">A Database and Patch Example</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiOpenDatabaseW">
    <summary>
      <para>The
<b>MsiOpenDatabase</b> function opens a database file for data access. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="szDatabasePath">
      <para>Specifies the full path or relative path to the database file.</para>
    </param>
    <param name="szPersist">
      <para>Receives the full path to the file or the persistence mode. You can use the <i>szPersist</i> parameter to direct the persistent output to a new file or to specify one of the following predefined persistence modes.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIDBOPEN_CREATEDIRECT</b>
          </description>
          <description>
            <para>Create a new database, direct mode read/write.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_CREATE</b>
          </description>
          <description>
            <para>Create a new database, transact mode read/write.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_DIRECT</b>
          </description>
          <description>
            <para>Open a database direct read/write without transaction.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_READONLY</b>
          </description>
          <description>
            <para>Open a database read-only, no persistent changes.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_TRANSACT</b>
          </description>
          <description>
            <para>Open a database read/write in transaction mode.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_PATCHFILE</b>
          </description>
          <description>
            <para>Add this flag to indicate a patch file.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phDatabase">
      <para>Pointer to the location of the returned database handle.</para>
    </param>
    <returns>
      <para>The
<b>MsiOpenDatabase</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>To make and save changes to a database first open the database in transaction (MSIDBOPEN_TRANSACT), create (MSIDBOPEN_CREATE or MSIDBOPEN_CREATEDIRECT), or direct (MSIDBOPEN_DIRECT) mode. After making the changes, always call
<see cref="MsiDatabaseCommit" /> before closing the database handle.
<b>MsiDatabaseCommit</b> flushes all buffers.</para>
      <para>Always call
<see cref="MsiDatabaseCommit" /> on a database that has been opened in direct mode (MSIDBOPEN_DIRECT or MSIDBOPEN_CREATEDIRECT) before closing the database's handle. Failure to do this may corrupt the database.</para>
      <para>Because
<b>MsiOpenDatabase</b> initiates database access, it cannot be used with a running installation.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <para>
        <b>Note</b>  When a database is opened as the output of another database, the summary information stream of the output database is actually a read-only mirror of the original database, and, thus, cannot be changed. Additionally, it is not persisted with the database. To create or modify the summary information for the output database, it must be closed and reopened.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiOpenDatabase as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/a-database-and-patch-example">A Database and Patch Example</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiOpenDatabase">
    <summary>
      <para>The
<b>MsiOpenDatabase</b> function opens a database file for data access. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="szDatabasePath">
      <para>Specifies the full path or relative path to the database file.</para>
    </param>
    <param name="szPersist">
      <para>Receives the full path to the file or the persistence mode. You can use the <i>szPersist</i> parameter to direct the persistent output to a new file or to specify one of the following predefined persistence modes.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIDBOPEN_CREATEDIRECT</b>
          </description>
          <description>
            <para>Create a new database, direct mode read/write.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_CREATE</b>
          </description>
          <description>
            <para>Create a new database, transact mode read/write.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_DIRECT</b>
          </description>
          <description>
            <para>Open a database direct read/write without transaction.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_READONLY</b>
          </description>
          <description>
            <para>Open a database read-only, no persistent changes.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_TRANSACT</b>
          </description>
          <description>
            <para>Open a database read/write in transaction mode.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_PATCHFILE</b>
          </description>
          <description>
            <para>Add this flag to indicate a patch file.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phDatabase">
      <para>Pointer to the location of the returned database handle.</para>
    </param>
    <returns>
      <para>The
<b>MsiOpenDatabase</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>To make and save changes to a database first open the database in transaction (MSIDBOPEN_TRANSACT), create (MSIDBOPEN_CREATE or MSIDBOPEN_CREATEDIRECT), or direct (MSIDBOPEN_DIRECT) mode. After making the changes, always call
<see cref="MsiDatabaseCommit" /> before closing the database handle.
<b>MsiDatabaseCommit</b> flushes all buffers.</para>
      <para>Always call
<see cref="MsiDatabaseCommit" /> on a database that has been opened in direct mode (MSIDBOPEN_DIRECT or MSIDBOPEN_CREATEDIRECT) before closing the database's handle. Failure to do this may corrupt the database.</para>
      <para>Because
<b>MsiOpenDatabase</b> initiates database access, it cannot be used with a running installation.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <para>
        <b>Note</b>  When a database is opened as the output of another database, the summary information stream of the output database is actually a read-only mirror of the original database, and, thus, cannot be changed. Additionally, it is not persisted with the database. To create or modify the summary information for the output database, it must be closed and reopened.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiOpenDatabase as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/a-database-and-patch-example">A Database and Patch Example</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiOpenDatabaseA">
    <summary>
      <para>The
<b>MsiOpenDatabase</b> function opens a database file for data access. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="szDatabasePath">
      <para>Specifies the full path or relative path to the database file.</para>
    </param>
    <param name="szPersist">
      <para>Receives the full path to the file or the persistence mode. You can use the <i>szPersist</i> parameter to direct the persistent output to a new file or to specify one of the following predefined persistence modes.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIDBOPEN_CREATEDIRECT</b>
          </description>
          <description>
            <para>Create a new database, direct mode read/write.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_CREATE</b>
          </description>
          <description>
            <para>Create a new database, transact mode read/write.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_DIRECT</b>
          </description>
          <description>
            <para>Open a database direct read/write without transaction.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_READONLY</b>
          </description>
          <description>
            <para>Open a database read-only, no persistent changes.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_TRANSACT</b>
          </description>
          <description>
            <para>Open a database read/write in transaction mode.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_PATCHFILE</b>
          </description>
          <description>
            <para>Add this flag to indicate a patch file.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phDatabase">
      <para>Pointer to the location of the returned database handle.</para>
    </param>
    <returns>
      <para>The
<b>MsiOpenDatabase</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>To make and save changes to a database first open the database in transaction (MSIDBOPEN_TRANSACT), create (MSIDBOPEN_CREATE or MSIDBOPEN_CREATEDIRECT), or direct (MSIDBOPEN_DIRECT) mode. After making the changes, always call
<see cref="MsiDatabaseCommit" /> before closing the database handle.
<b>MsiDatabaseCommit</b> flushes all buffers.</para>
      <para>Always call
<see cref="MsiDatabaseCommit" /> on a database that has been opened in direct mode (MSIDBOPEN_DIRECT or MSIDBOPEN_CREATEDIRECT) before closing the database's handle. Failure to do this may corrupt the database.</para>
      <para>Because
<b>MsiOpenDatabase</b> initiates database access, it cannot be used with a running installation.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <para>
        <b>Note</b>  When a database is opened as the output of another database, the summary information stream of the output database is actually a read-only mirror of the original database, and, thus, cannot be changed. Additionally, it is not persisted with the database. To create or modify the summary information for the output database, it must be closed and reopened.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiOpenDatabase as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/a-database-and-patch-example">A Database and Patch Example</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiOpenDatabaseW">
    <summary>
      <para>The
<b>MsiOpenDatabase</b> function opens a database file for data access. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="szDatabasePath">
      <para>Specifies the full path or relative path to the database file.</para>
    </param>
    <param name="szPersist">
      <para>Receives the full path to the file or the persistence mode. You can use the <i>szPersist</i> parameter to direct the persistent output to a new file or to specify one of the following predefined persistence modes.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIDBOPEN_CREATEDIRECT</b>
          </description>
          <description>
            <para>Create a new database, direct mode read/write.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_CREATE</b>
          </description>
          <description>
            <para>Create a new database, transact mode read/write.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_DIRECT</b>
          </description>
          <description>
            <para>Open a database direct read/write without transaction.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_READONLY</b>
          </description>
          <description>
            <para>Open a database read-only, no persistent changes.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_TRANSACT</b>
          </description>
          <description>
            <para>Open a database read/write in transaction mode.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIDBOPEN_PATCHFILE</b>
          </description>
          <description>
            <para>Add this flag to indicate a patch file.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phDatabase">
      <para>Pointer to the location of the returned database handle.</para>
    </param>
    <returns>
      <para>The
<b>MsiOpenDatabase</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>To make and save changes to a database first open the database in transaction (MSIDBOPEN_TRANSACT), create (MSIDBOPEN_CREATE or MSIDBOPEN_CREATEDIRECT), or direct (MSIDBOPEN_DIRECT) mode. After making the changes, always call
<see cref="MsiDatabaseCommit" /> before closing the database handle.
<b>MsiDatabaseCommit</b> flushes all buffers.</para>
      <para>Always call
<see cref="MsiDatabaseCommit" /> on a database that has been opened in direct mode (MSIDBOPEN_DIRECT or MSIDBOPEN_CREATEDIRECT) before closing the database's handle. Failure to do this may corrupt the database.</para>
      <para>Because
<b>MsiOpenDatabase</b> initiates database access, it cannot be used with a running installation.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
      <para>
        <b>Note</b>  When a database is opened as the output of another database, the summary information stream of the output database is actually a read-only mirror of the original database, and, thus, cannot be changed. Additionally, it is not persisted with the database. To create or modify the summary information for the output database, it must be closed and reopened.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiOpenDatabase as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/a-database-and-patch-example">A Database and Patch Example</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiPreviewBillboard">
    <summary>
      <para>The
<b>MsiPreviewBillboard</b> function displays a billboard with the host control in the displayed dialog box.</para>
    </summary>
    <param name="hPreview">
      <para>Handle to the preview.</para>
    </param>
    <param name="szControlName">
      <para>Specifies the name of the host control.</para>
    </param>
    <param name="szBillboard">
      <para>Specifies the name of the billboard to display.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>Supplying a null billboard name in the
<b>MsiPreviewBillboard</b> function removes any billboard displayed.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiPreviewBillboard as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">User Interface Functions</seealso>
  </member>
  <member name="Windows.MsiPreviewBillboardA">
    <summary>
      <para>The
<b>MsiPreviewBillboard</b> function displays a billboard with the host control in the displayed dialog box.</para>
    </summary>
    <param name="hPreview">
      <para>Handle to the preview.</para>
    </param>
    <param name="szControlName">
      <para>Specifies the name of the host control.</para>
    </param>
    <param name="szBillboard">
      <para>Specifies the name of the billboard to display.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>Supplying a null billboard name in the
<b>MsiPreviewBillboard</b> function removes any billboard displayed.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiPreviewBillboard as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">User Interface Functions</seealso>
  </member>
  <member name="Windows.MsiPreviewBillboardW">
    <summary>
      <para>The
<b>MsiPreviewBillboard</b> function displays a billboard with the host control in the displayed dialog box.</para>
    </summary>
    <param name="hPreview">
      <para>Handle to the preview.</para>
    </param>
    <param name="szControlName">
      <para>Specifies the name of the host control.</para>
    </param>
    <param name="szBillboard">
      <para>Specifies the name of the billboard to display.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>Supplying a null billboard name in the
<b>MsiPreviewBillboard</b> function removes any billboard displayed.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiPreviewBillboard as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">User Interface Functions</seealso>
  </member>
  <member name="Windows.MsiPreviewBillboard">
    <summary>
      <para>The
<b>MsiPreviewBillboard</b> function displays a billboard with the host control in the displayed dialog box.</para>
    </summary>
    <param name="hPreview">
      <para>Handle to the preview.</para>
    </param>
    <param name="szControlName">
      <para>Specifies the name of the host control.</para>
    </param>
    <param name="szBillboard">
      <para>Specifies the name of the billboard to display.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>Supplying a null billboard name in the
<b>MsiPreviewBillboard</b> function removes any billboard displayed.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiPreviewBillboard as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">User Interface Functions</seealso>
  </member>
  <member name="Windows.MsiPreviewBillboardA">
    <summary>
      <para>The
<b>MsiPreviewBillboard</b> function displays a billboard with the host control in the displayed dialog box.</para>
    </summary>
    <param name="hPreview">
      <para>Handle to the preview.</para>
    </param>
    <param name="szControlName">
      <para>Specifies the name of the host control.</para>
    </param>
    <param name="szBillboard">
      <para>Specifies the name of the billboard to display.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>Supplying a null billboard name in the
<b>MsiPreviewBillboard</b> function removes any billboard displayed.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiPreviewBillboard as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">User Interface Functions</seealso>
  </member>
  <member name="Windows.MsiPreviewBillboardW">
    <summary>
      <para>The
<b>MsiPreviewBillboard</b> function displays a billboard with the host control in the displayed dialog box.</para>
    </summary>
    <param name="hPreview">
      <para>Handle to the preview.</para>
    </param>
    <param name="szControlName">
      <para>Specifies the name of the host control.</para>
    </param>
    <param name="szBillboard">
      <para>Specifies the name of the billboard to display.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>Supplying a null billboard name in the
<b>MsiPreviewBillboard</b> function removes any billboard displayed.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiPreviewBillboard as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">User Interface Functions</seealso>
  </member>
  <member name="Windows.MsiPreviewDialog">
    <summary>
      <para>The
<b>MsiPreviewDialog</b> function displays a dialog box as modeless and inactive.</para>
    </summary>
    <param name="hPreview">
      <para>Handle to the preview.</para>
    </param>
    <param name="szDialogName">
      <para>Specifies the name of the dialog box to preview.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>Supplying a null name in the
<b>MsiPreviewDialog</b> function removes any current dialog box.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiPreviewDialog as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">User Interface Functions</seealso>
  </member>
  <member name="Windows.MsiPreviewDialogA">
    <summary>
      <para>The
<b>MsiPreviewDialog</b> function displays a dialog box as modeless and inactive.</para>
    </summary>
    <param name="hPreview">
      <para>Handle to the preview.</para>
    </param>
    <param name="szDialogName">
      <para>Specifies the name of the dialog box to preview.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>Supplying a null name in the
<b>MsiPreviewDialog</b> function removes any current dialog box.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiPreviewDialog as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">User Interface Functions</seealso>
  </member>
  <member name="Windows.MsiPreviewDialogW">
    <summary>
      <para>The
<b>MsiPreviewDialog</b> function displays a dialog box as modeless and inactive.</para>
    </summary>
    <param name="hPreview">
      <para>Handle to the preview.</para>
    </param>
    <param name="szDialogName">
      <para>Specifies the name of the dialog box to preview.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>Supplying a null name in the
<b>MsiPreviewDialog</b> function removes any current dialog box.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiPreviewDialog as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">User Interface Functions</seealso>
  </member>
  <member name="Windows.MsiPreviewDialog">
    <summary>
      <para>The
<b>MsiPreviewDialog</b> function displays a dialog box as modeless and inactive.</para>
    </summary>
    <param name="hPreview">
      <para>Handle to the preview.</para>
    </param>
    <param name="szDialogName">
      <para>Specifies the name of the dialog box to preview.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>Supplying a null name in the
<b>MsiPreviewDialog</b> function removes any current dialog box.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiPreviewDialog as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">User Interface Functions</seealso>
  </member>
  <member name="Windows.MsiPreviewDialogA">
    <summary>
      <para>The
<b>MsiPreviewDialog</b> function displays a dialog box as modeless and inactive.</para>
    </summary>
    <param name="hPreview">
      <para>Handle to the preview.</para>
    </param>
    <param name="szDialogName">
      <para>Specifies the name of the dialog box to preview.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>Supplying a null name in the
<b>MsiPreviewDialog</b> function removes any current dialog box.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiPreviewDialog as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">User Interface Functions</seealso>
  </member>
  <member name="Windows.MsiPreviewDialogW">
    <summary>
      <para>The
<b>MsiPreviewDialog</b> function displays a dialog box as modeless and inactive.</para>
    </summary>
    <param name="hPreview">
      <para>Handle to the preview.</para>
    </param>
    <param name="szDialogName">
      <para>Specifies the name of the dialog box to preview.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>Supplying a null name in the
<b>MsiPreviewDialog</b> function removes any current dialog box.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiPreviewDialog as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">User Interface Functions</seealso>
  </member>
  <member name="Windows.MsiProcessMessage">
    <summary>
      <para>The
<b>MsiProcessMessage</b> function sends an error record to the installer for processing.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="eMessageType">
      <para>The <i>eMessage</i> parameter must be a value specifying one of the following message types. To display a message box with push buttons or icons, use OR-operators to add INSTALLMESSAGE_ERROR, INSTALLMESSAGE_WARNING, or INSTALLMESSAGE_USER to the standard message box styles used by
the <see cref="MessageBox" /> and
<see cref="MessageBoxEx" /> functions. For more information, see the Remarks below.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLMESSAGE_FATALEXIT</b>
          </description>
          <description>
            <para>Premature termination, possibly fatal out of memory.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMESSAGE_ERROR</b>
          </description>
          <description>
            <para>Formatted error message, [1] is message number in
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-table">Error table</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMESSAGE_WARNING</b>
          </description>
          <description>
            <para>Formatted warning message, [1] is message number in Error table.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMESSAGE_USER</b>
          </description>
          <description>
            <para>User request message, [1] is message number in Error table.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMESSAGE_INFO</b>
          </description>
          <description>
            <para>Informative message for log,  not to be displayed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMESSAGE_FILESINUSE</b>
          </description>
          <description>
            <para>List of files currently in use that must be closed before being replaced.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMESSAGE_RESOLVESOURCE</b>
          </description>
          <description>
            <para>Request to determine a valid source location.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMESSAGE_RMFILESINUSE</b>
          </description>
          <description>
            <para>List of files currently in use that must be closed before being replaced. Available beginning with Windows Installer version 4.0. For more information about this message see <a href="https://docs.microsoft.com//windows/desktop/Msi/using-restart-manager-with-an-external-ui-">Using Restart Manager with an External UI</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMESSAGE_OUTOFDISKSPACE</b>
          </description>
          <description>
            <para>Insufficient disk space message.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMESSAGE_ACTIONSTART</b>
          </description>
          <description>
            <para>Progress: start of action, [1] action name, [2] description, [3] template for ACTIONDATA messages.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMESSAGE_ACTIONDATA</b>
          </description>
          <description>
            <para>Action data. Record fields correspond to the template of ACTIONSTART message.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMESSAGE_PROGRESS</b>
          </description>
          <description>
            <para>Progress bar information. See the description of record fields below.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLMESSAGE_COMMONDATA</b>
          </description>
          <description>
            <para>To enable the Cancel button set [1] to 2 and [2] to 1.</para>
            <para>To disable the Cancel button set [1] to 2 and [2] to 0</para>
          </description>
        </item>
      </list>
    </param>
    <param name="hRecord">
      <para>Handle to a record containing message format and data.</para>
    </param>
    <returns>
      <para>This function returns int.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiProcessMessage</b> function performs any enabled logging operations and defers execution. You can selectively enable logging for various message types.</para>
      <para>For INSTALLMESSAGE_FATALEXIT, INSTALLMESSAGE_ERROR, INSTALLMESSAGE_WARNING, and INSTALLMESSAGE_USER messages, if field 0 is not set field 1 must be set to the error code corresponding to the error message in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/error-table">Error table</a>. Then, the message is formatted using the template from the Error table before passing it to the user-interface handler for display.</para>
      <h3>Record Fields for Progress Bar Messages</h3>
      <para>The following describes the record fields when eMessageType is set to INSTALLMESSAGE_PROGRESS. Field 1 specifies the type of the progress message. The meaning of the other fields depend upon the value in this field. The possible values that can be set into Field 1 are as follows.</para>
      <list type="table">
        <listheader>
          <description>Field 1 value</description>
          <description>Field 1 description</description>
        </listheader>
        <item>
          <description>0</description>
          <description>Resets progress bar and sets the expected total number of ticks in the bar.</description>
        </item>
        <item>
          <description>1</description>
          <description>Provides information related to progress messages to be sent by the current action.</description>
        </item>
        <item>
          <description>2</description>
          <description>Increments the progress bar.</description>
        </item>
        <item>
          <description>3</description>
          <description>Enables an action (such as CustomAction) to add ticks to the expected total number of progress of the progress bar.</description>
        </item>
      </list>
      <para>The meaning of Field 2 depends upon the value in Field 1 as follows.</para>
      <list type="table">
        <listheader>
          <description>Field 1 value</description>
          <description>Field 2 description</description>
        </listheader>
        <item>
          <description>0</description>
          <description>Expected total number of ticks in the progress bar.</description>
        </item>
        <item>
          <description>1</description>
          <description>Number of ticks the progress bar moves for each ActionData message that is sent by the current action. This field is ignored if Field 3 is 0.</description>
        </item>
        <item>
          <description>2</description>
          <description>Number of ticks the progress bar has moved.</description>
        </item>
        <item>
          <description>3</description>
          <description>Number of ticks to add to total expected progress.</description>
        </item>
      </list>
      <para>The meaning of Field 3 depends upon the value in Field 1 as follows.</para>
      <list type="table">
        <listheader>
          <description>Field 1 value</description>
          <description>Field 3 value</description>
          <description>Field 3 description</description>
        </listheader>
        <item>
          <description>0</description>
          <description>0</description>
          <description>Forward progress bar (left to right)</description>
        </item>
        <item>
          <description> </description>
          <description>1</description>
          <description>Backward progress bar (right to left)</description>
        </item>
        <item>
          <description>1</description>
          <description>0</description>
          <description>The current action will send explicit ProgressReport messages.</description>
        </item>
        <item>
          <description> </description>
          <description>1</description>
          <description>Increment the progress bar by the number of ticks specified in Field 2 each time an ActionData message is sent by the current action.</description>
        </item>
        <item>
          <description>2</description>
          <description>Unused</description>
          <description> </description>
        </item>
        <item>
          <description>3</description>
          <description>Unused</description>
          <description> </description>
        </item>
      </list>
      <para>The meaning of Field 4 depends upon the value in Field 1 as follows.</para>
      <list type="table">
        <listheader>
          <description>Field 1 value</description>
          <description>Field 4 value</description>
          <description>Field 4 description</description>
        </listheader>
        <item>
          <description>0</description>
          <description>0</description>
          <description>Execution is in progress. In this case, the UI could calculate and display the time remaining.</description>
        </item>
        <item>
          <description> </description>
          <description>1</description>
          <description>Creating the execution script. In this case, the UI could display a message to please wait while the installer finishes preparing the installation.</description>
        </item>
        <item>
          <description>1</description>
          <description>Unused</description>
          <description> </description>
        </item>
        <item>
          <description>2</description>
          <description>Unused</description>
          <description> </description>
        </item>
        <item>
          <description>3</description>
          <description>Unused</description>
          <description> </description>
        </item>
      </list>
      <para>For more information and a code sample, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/adding-custom-actions-to-the-progressbar">Adding Custom Actions to the ProgressBar</a>.</para>
      <h3>Display of Message Boxes</h3>
      <para>To display a message box with push buttons or icons, use OR-operators to add INSTALLMESSAGE_ERROR, INSTALLMESSAGE_WARNING, or INSTALLMESSAGE_USER with the message box options used by <see cref="MessageBox" /> and <see cref="MessageBoxEx" />. The available push button options are MB_OK, MB_OKCANCEL, MB_ABORTRETRYIGNORE, MB_YESNOCANCEL, MB_YESNO, and MB_RETRYCANCEL. The available default button options are MB_DEFBUTTON1, MB_DEFBUTTON2, and MB_DEFBUTTON3. The available icon options are MB_ICONERROR, MB_ICONQUESTION, MB_ICONWARNING, and MB_ICONINFORMATION. If no icon options is specified, Windows Installer chooses a default icon style based upon the message type.</para>
      <para>For example, the following call to
<b>MsiProcessMessage</b> sends an INSTALLMESSAGE_ERROR message with the MB_ICONWARNING icon and the MB_ABORTRETRYCANCEL buttons.</para>
      <code>PMSIHANDLE hInstall;
PMSIHANDLE hRec;
MsiProcessMessage(hInstall,
                  INSTALLMESSAGE(INSTALLMESSAGE_ERROR|MB_ABORTRETRYIGNORE|MB_ICONWARNING),
                  hRec);

</code>
      <para>If a custom action calls <b>MsiProcessMessage</b>, the custom action should be capable of handling a cancellation by the user and should return ERROR_INSTALL_USEREXIT.</para>
      <para>For more information on sending messages with
<b>MsiProcessMessage</b>, see the
<a href="https://docs.microsoft.com//windows/desktop/Msi/sending-messages-to-windows-installer-using-msiprocessmessage">Sending Messages to Windows Installer Using MsiProcessMessage</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Action Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/sending-messages-to-windows-installer-using-msiprocessmessage">Sending Messages to Windows Installer Using MsiProcessMessage</seealso>
  </member>
  <member name="Windows.MsiRecordClearData">
    <summary>
      <para>The
<b>MsiRecordClearData</b> function sets all fields in a record to null.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordDataSize">
    <summary>
      <para>The
<b>MsiRecordDataSize</b> function returns the length of a record field. The count does not include the terminating null character.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <param name="iField">
      <para>Specifies a field of the record.</para>
    </param>
    <returns>
      <para>The
<b>MsiRecordDataSize</b> function returns 0 if the field is null, nonexistent, or an internal object pointer. The function also returns 0 if the handle is not a valid record handle.</para>
      <para>If the data is in integer format, the function returns sizeof(int).</para>
      <para>If the data is in string format, the function returns the character count (not including the null character).</para>
      <para>If the data is in stream format, the function returns the byte count.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordGetFieldCount">
    <summary>
      <para>The
<b>MsiRecordGetFieldCount</b> function returns the number of fields in a record.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to a record.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the number of fields in the record.</para>
    </returns>
    <remarks>
      <para>The count returned by the
<b>MsiRecordGetFieldCount</b> parameter does not include field 0. Read access to fields beyond this count returns null values. Write access fails.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordGetInteger">
    <summary>
      <para>The
<b>MsiRecordGetInteger</b> function returns the integer value from a record field.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to a record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field of the record from which to obtain the value.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the integer value of the field.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiRecordGetInteger</b> function returns <b>MSI_NULL_INTEGER</b> if the field is null or if the field is a string that cannot be converted to an integer.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordGetString">
    <summary>
      <para>The
<b>MsiRecordGetString</b> function returns the string value of a record field.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field requested.</para>
    </param>
    <param name="szValueBuf">
      <para>Pointer to the buffer that receives the null terminated string containing the value of the record field. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns <b>ERROR_MORE_DATA</b> and <i>pcchValueBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of <b>ERROR_SUCCESS</b>, <i>pcchValueBuf</i> contains the number of <b>TCHARs</b> written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to the variable that specifies the size, in <b>TCHAR</b>s, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns <b>ERROR_SUCCESS</b>, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf</i> is not large enough, the function returns <b>ERROR_MORE_DATA</b> and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchValueBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiRecordGetString</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>If <b>ERROR_MORE_DATA</b> is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If <b>ERROR_SUCCESS</b> is returned, it gives the number of characters written to the string buffer. To get the size of the buffer, pass in the address of a 1 character buffer as <i>szValueBuf</i> and specify the size of the buffer with <i>pcchValueBuf</i> as 0. This ensures that no string value returned by the function fits into the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiRecordGetString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordGetStringA">
    <summary>
      <para>The
<b>MsiRecordGetString</b> function returns the string value of a record field.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field requested.</para>
    </param>
    <param name="szValueBuf">
      <para>Pointer to the buffer that receives the null terminated string containing the value of the record field. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns <b>ERROR_MORE_DATA</b> and <i>pcchValueBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of <b>ERROR_SUCCESS</b>, <i>pcchValueBuf</i> contains the number of <b>TCHARs</b> written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to the variable that specifies the size, in <b>TCHAR</b>s, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns <b>ERROR_SUCCESS</b>, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf</i> is not large enough, the function returns <b>ERROR_MORE_DATA</b> and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchValueBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiRecordGetString</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>If <b>ERROR_MORE_DATA</b> is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If <b>ERROR_SUCCESS</b> is returned, it gives the number of characters written to the string buffer. To get the size of the buffer, pass in the address of a 1 character buffer as <i>szValueBuf</i> and specify the size of the buffer with <i>pcchValueBuf</i> as 0. This ensures that no string value returned by the function fits into the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiRecordGetString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordGetStringW">
    <summary>
      <para>The
<b>MsiRecordGetString</b> function returns the string value of a record field.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field requested.</para>
    </param>
    <param name="szValueBuf">
      <para>Pointer to the buffer that receives the null terminated string containing the value of the record field. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns <b>ERROR_MORE_DATA</b> and <i>pcchValueBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of <b>ERROR_SUCCESS</b>, <i>pcchValueBuf</i> contains the number of <b>TCHARs</b> written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to the variable that specifies the size, in <b>TCHAR</b>s, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns <b>ERROR_SUCCESS</b>, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf</i> is not large enough, the function returns <b>ERROR_MORE_DATA</b> and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchValueBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiRecordGetString</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>If <b>ERROR_MORE_DATA</b> is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If <b>ERROR_SUCCESS</b> is returned, it gives the number of characters written to the string buffer. To get the size of the buffer, pass in the address of a 1 character buffer as <i>szValueBuf</i> and specify the size of the buffer with <i>pcchValueBuf</i> as 0. This ensures that no string value returned by the function fits into the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiRecordGetString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordGetString">
    <summary>
      <para>The
<b>MsiRecordGetString</b> function returns the string value of a record field.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field requested.</para>
    </param>
    <param name="szValueBuf">
      <para>Pointer to the buffer that receives the null terminated string containing the value of the record field. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns <b>ERROR_MORE_DATA</b> and <i>pcchValueBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of <b>ERROR_SUCCESS</b>, <i>pcchValueBuf</i> contains the number of <b>TCHARs</b> written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to the variable that specifies the size, in <b>TCHAR</b>s, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns <b>ERROR_SUCCESS</b>, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf</i> is not large enough, the function returns <b>ERROR_MORE_DATA</b> and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchValueBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiRecordGetString</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>If <b>ERROR_MORE_DATA</b> is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If <b>ERROR_SUCCESS</b> is returned, it gives the number of characters written to the string buffer. To get the size of the buffer, pass in the address of a 1 character buffer as <i>szValueBuf</i> and specify the size of the buffer with <i>pcchValueBuf</i> as 0. This ensures that no string value returned by the function fits into the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiRecordGetString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordGetStringA">
    <summary>
      <para>The
<b>MsiRecordGetString</b> function returns the string value of a record field.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field requested.</para>
    </param>
    <param name="szValueBuf">
      <para>Pointer to the buffer that receives the null terminated string containing the value of the record field. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns <b>ERROR_MORE_DATA</b> and <i>pcchValueBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of <b>ERROR_SUCCESS</b>, <i>pcchValueBuf</i> contains the number of <b>TCHARs</b> written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to the variable that specifies the size, in <b>TCHAR</b>s, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns <b>ERROR_SUCCESS</b>, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf</i> is not large enough, the function returns <b>ERROR_MORE_DATA</b> and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchValueBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiRecordGetString</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>If <b>ERROR_MORE_DATA</b> is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If <b>ERROR_SUCCESS</b> is returned, it gives the number of characters written to the string buffer. To get the size of the buffer, pass in the address of a 1 character buffer as <i>szValueBuf</i> and specify the size of the buffer with <i>pcchValueBuf</i> as 0. This ensures that no string value returned by the function fits into the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiRecordGetString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordGetStringW">
    <summary>
      <para>The
<b>MsiRecordGetString</b> function returns the string value of a record field.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field requested.</para>
    </param>
    <param name="szValueBuf">
      <para>Pointer to the buffer that receives the null terminated string containing the value of the record field. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns <b>ERROR_MORE_DATA</b> and <i>pcchValueBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of <b>ERROR_SUCCESS</b>, <i>pcchValueBuf</i> contains the number of <b>TCHARs</b> written to the buffer, not including the terminating null character.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to the variable that specifies the size, in <b>TCHAR</b>s, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns <b>ERROR_SUCCESS</b>, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf</i> is not large enough, the function returns <b>ERROR_MORE_DATA</b> and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchValueBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiRecordGetString</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>If <b>ERROR_MORE_DATA</b> is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If <b>ERROR_SUCCESS</b> is returned, it gives the number of characters written to the string buffer. To get the size of the buffer, pass in the address of a 1 character buffer as <i>szValueBuf</i> and specify the size of the buffer with <i>pcchValueBuf</i> as 0. This ensures that no string value returned by the function fits into the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiRecordGetString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordIsNull">
    <summary>
      <para>The
<b>MsiRecordIsNull</b> function reports a null record field.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to a record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field to check.</para>
    </param>
    <returns>
      <para>This function returns BOOL.</para>
    </returns>
    <remarks>
      <para>The <i>iField</i> parameter is based on 1 (one).</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordReadStream">
    <summary>
      <para>The
<b>MsiRecordReadStream</b> function reads bytes from a record stream field into a buffer.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field of the record.</para>
    </param>
    <param name="szDataBuf">
      <para>A buffer to receive the stream field. You should ensure the destination buffer is the same size or larger than the source buffer. See the Remarks section.</para>
    </param>
    <param name="pcbDataBuf">
      <para>Specifies the in and out buffer count. On input, this is the full size of the buffer. On output, this is the number of bytes that were actually written to the buffer. See the Remarks section.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>To read a stream, set <i>pcbDataBuf</i> to the number of bytes that are to be transferred from stream to buffer each time the function is called. On return, the
<b>MsiRecordReadStream</b> resets <i>pcbDataBuf </i> to the number of bytes that were actually transferred. If the buffer is smaller than the stream, the stream is repositioned when the buffer becomes full such that the next data in the stream is transferred by the next call to the function. When no more bytes are available,
<b>MsiRecordReadStream</b> returns ERROR_SUCCESS.</para>
      <para>If you pass 0 for <i>szDataBuf</i> then <i>pcbDataBuf</i> is reset to the number of bytes in the stream remaining to be read.</para>
      <para>The following code sample reads from a stream that is in field 1 of a record specified by hRecord and reads the entire stream 8 bytes at a time.</para>
      <code>char szBuffer[8];
PMSIHANDLE hRecord;
DWORD cbBuf = sizeof(szBuffer);
do
{
    if (MsiRecordReadStream(hRecord, 1, szBuffer,
        &amp;amp;amp;amp;amp;amp;cbBuf) != ERROR_SUCCESS)
        break; /* error */
}
while (cbBuf == 8);  //continue reading the stream while you receive a full buffer
//cbBuf will be less once you reach the end of the stream and cannot fill your
//buffer with stream data

</code>
      <para>See also
<a href="https://docs.microsoft.com//windows/desktop/Msi/ole-limitations-on-streams">OLE Limitations on Streams</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordSetInteger">
    <summary>
      <para>The
<b>MsiRecordSetInteger</b> function sets a record field to an integer field.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field of the record to set.</para>
    </param>
    <param name="iValue">
      <para>Specifies the value to which to set the field.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>In the
<b>MsiRecordSetInteger</b> function, attempting to store a value in a nonexistent field causes an error. Note that the following code returns <b>ERROR_INVALID_PARAMETER</b>.</para>
      <code>MSIHANDLE hRecord;
UINT lReturn;

//create an msirecord with no fields
hRecord = MsiCreateRecord(0);

//attempting to set the first field's value gives you ERROR_INVALID_PARAMETER
lReturn = MsiRecordSetInteger(hRecord, 1, 0);

</code>
      <para>To set a record integer field to <b>NULL_INTEGER</b>, set <i>iValue</i> to <b>MSI_NULL_INTEGER</b>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordSetStream">
    <summary>
      <para>The
<b>MsiRecordSetStream</b> function sets a record stream field from a file. Stream data cannot be inserted into temporary fields.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field of the record to set.</para>
    </param>
    <param name="szFilePath">
      <para>Specifies the path to the file containing the stream.</para>
    </param>
    <returns>
      <para>The
<b>MsiRecordSetStream</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The contents of the file specified in the
<b>MsiRecordSetStream</b> function is read into a stream object. The stream persists if the record is inserted into the database and the database is committed.</para>
      <para>To reset the stream to its beginning you must pass in a Null pointer for <i>szFilePath</i>. Do not pass a pointer to an empty string, "", to reset the stream.</para>
      <para>See also
<a href="https://docs.microsoft.com//windows/desktop/Msi/ole-limitations-on-streams">OLE Limitations on Streams</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiRecordSetStream as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordSetStreamA">
    <summary>
      <para>The
<b>MsiRecordSetStream</b> function sets a record stream field from a file. Stream data cannot be inserted into temporary fields.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field of the record to set.</para>
    </param>
    <param name="szFilePath">
      <para>Specifies the path to the file containing the stream.</para>
    </param>
    <returns>
      <para>The
<b>MsiRecordSetStream</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The contents of the file specified in the
<b>MsiRecordSetStream</b> function is read into a stream object. The stream persists if the record is inserted into the database and the database is committed.</para>
      <para>To reset the stream to its beginning you must pass in a Null pointer for <i>szFilePath</i>. Do not pass a pointer to an empty string, "", to reset the stream.</para>
      <para>See also
<a href="https://docs.microsoft.com//windows/desktop/Msi/ole-limitations-on-streams">OLE Limitations on Streams</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiRecordSetStream as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordSetStreamW">
    <summary>
      <para>The
<b>MsiRecordSetStream</b> function sets a record stream field from a file. Stream data cannot be inserted into temporary fields.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field of the record to set.</para>
    </param>
    <param name="szFilePath">
      <para>Specifies the path to the file containing the stream.</para>
    </param>
    <returns>
      <para>The
<b>MsiRecordSetStream</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The contents of the file specified in the
<b>MsiRecordSetStream</b> function is read into a stream object. The stream persists if the record is inserted into the database and the database is committed.</para>
      <para>To reset the stream to its beginning you must pass in a Null pointer for <i>szFilePath</i>. Do not pass a pointer to an empty string, "", to reset the stream.</para>
      <para>See also
<a href="https://docs.microsoft.com//windows/desktop/Msi/ole-limitations-on-streams">OLE Limitations on Streams</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiRecordSetStream as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordSetStream">
    <summary>
      <para>The
<b>MsiRecordSetStream</b> function sets a record stream field from a file. Stream data cannot be inserted into temporary fields.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field of the record to set.</para>
    </param>
    <param name="szFilePath">
      <para>Specifies the path to the file containing the stream.</para>
    </param>
    <returns>
      <para>The
<b>MsiRecordSetStream</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The contents of the file specified in the
<b>MsiRecordSetStream</b> function is read into a stream object. The stream persists if the record is inserted into the database and the database is committed.</para>
      <para>To reset the stream to its beginning you must pass in a Null pointer for <i>szFilePath</i>. Do not pass a pointer to an empty string, "", to reset the stream.</para>
      <para>See also
<a href="https://docs.microsoft.com//windows/desktop/Msi/ole-limitations-on-streams">OLE Limitations on Streams</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiRecordSetStream as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordSetStreamA">
    <summary>
      <para>The
<b>MsiRecordSetStream</b> function sets a record stream field from a file. Stream data cannot be inserted into temporary fields.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field of the record to set.</para>
    </param>
    <param name="szFilePath">
      <para>Specifies the path to the file containing the stream.</para>
    </param>
    <returns>
      <para>The
<b>MsiRecordSetStream</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The contents of the file specified in the
<b>MsiRecordSetStream</b> function is read into a stream object. The stream persists if the record is inserted into the database and the database is committed.</para>
      <para>To reset the stream to its beginning you must pass in a Null pointer for <i>szFilePath</i>. Do not pass a pointer to an empty string, "", to reset the stream.</para>
      <para>See also
<a href="https://docs.microsoft.com//windows/desktop/Msi/ole-limitations-on-streams">OLE Limitations on Streams</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiRecordSetStream as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordSetStreamW">
    <summary>
      <para>The
<b>MsiRecordSetStream</b> function sets a record stream field from a file. Stream data cannot be inserted into temporary fields.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field of the record to set.</para>
    </param>
    <param name="szFilePath">
      <para>Specifies the path to the file containing the stream.</para>
    </param>
    <returns>
      <para>The
<b>MsiRecordSetStream</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The contents of the file specified in the
<b>MsiRecordSetStream</b> function is read into a stream object. The stream persists if the record is inserted into the database and the database is committed.</para>
      <para>To reset the stream to its beginning you must pass in a Null pointer for <i>szFilePath</i>. Do not pass a pointer to an empty string, "", to reset the stream.</para>
      <para>See also
<a href="https://docs.microsoft.com//windows/desktop/Msi/ole-limitations-on-streams">OLE Limitations on Streams</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiRecordSetStream as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordSetString">
    <summary>
      <para>The
<b>MsiRecordSetString</b> function copies a string into the designated field.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field of the record to set.</para>
    </param>
    <param name="szValue">
      <para>Specifies the string value of the field.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>In the
<b>MsiRecordSetString</b> function, a null string pointer and an empty string both set the field to null. Attempting to store a value in a nonexistent field causes an error.</para>
      <para>To set a record string field to null, set szValue to either a null string or an empty string.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiRecordSetString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordSetStringA">
    <summary>
      <para>The
<b>MsiRecordSetString</b> function copies a string into the designated field.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field of the record to set.</para>
    </param>
    <param name="szValue">
      <para>Specifies the string value of the field.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>In the
<b>MsiRecordSetString</b> function, a null string pointer and an empty string both set the field to null. Attempting to store a value in a nonexistent field causes an error.</para>
      <para>To set a record string field to null, set szValue to either a null string or an empty string.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiRecordSetString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordSetStringW">
    <summary>
      <para>The
<b>MsiRecordSetString</b> function copies a string into the designated field.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field of the record to set.</para>
    </param>
    <param name="szValue">
      <para>Specifies the string value of the field.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>In the
<b>MsiRecordSetString</b> function, a null string pointer and an empty string both set the field to null. Attempting to store a value in a nonexistent field causes an error.</para>
      <para>To set a record string field to null, set szValue to either a null string or an empty string.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiRecordSetString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordSetString">
    <summary>
      <para>The
<b>MsiRecordSetString</b> function copies a string into the designated field.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field of the record to set.</para>
    </param>
    <param name="szValue">
      <para>Specifies the string value of the field.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>In the
<b>MsiRecordSetString</b> function, a null string pointer and an empty string both set the field to null. Attempting to store a value in a nonexistent field causes an error.</para>
      <para>To set a record string field to null, set szValue to either a null string or an empty string.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiRecordSetString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordSetStringA">
    <summary>
      <para>The
<b>MsiRecordSetString</b> function copies a string into the designated field.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field of the record to set.</para>
    </param>
    <param name="szValue">
      <para>Specifies the string value of the field.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>In the
<b>MsiRecordSetString</b> function, a null string pointer and an empty string both set the field to null. Attempting to store a value in a nonexistent field causes an error.</para>
      <para>To set a record string field to null, set szValue to either a null string or an empty string.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiRecordSetString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiRecordSetStringW">
    <summary>
      <para>The
<b>MsiRecordSetString</b> function copies a string into the designated field.</para>
    </summary>
    <param name="hRecord">
      <para>Handle to the record.</para>
    </param>
    <param name="iField">
      <para>Specifies the field of the record to set.</para>
    </param>
    <param name="szValue">
      <para>Specifies the string value of the field.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>In the
<b>MsiRecordSetString</b> function, a null string pointer and an empty string both set the field to null. Attempting to store a value in a nonexistent field causes an error.</para>
      <para>To set a record string field to null, set szValue to either a null string or an empty string.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiRecordSetString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Record Processing Functions</seealso>
  </member>
  <member name="Windows.MsiSequence">
    <summary>
      <para>The
<b>MsiSequence</b> function executes another action sequence, as described in the specified table.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szTable">
      <para>Specifies the name of the table containing the action sequence.</para>
    </param>
    <param name="iSequenceMode">
      <para>This parameter is currently unimplemented. It is reserved for future use and must be 0.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSequence</b> function queries the specified table, ordering the actions by the numbers in the Sequence column. For each row retrieved, an action is executed, provided that any supplied condition expression does not evaluate to FALSE.</para>
      <para>An action sequence containing any actions that update the system, such as the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfiles-action">InstallFiles</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/writeregistryvalues-action">WriteRegistryValues</a> actions, cannot be run by calling
<b>MsiSequence</b>. The exception to this rule is if
<b>MsiSequence</b> is called from a custom action that is scheduled in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installexecutesequence-table">InstallExecuteSequence table</a> between the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installinitialize-action">InstallInitialize</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfinalize-action">InstallFinalize actions</a>. Actions that do not update the system, such as
<a href="https://docs.microsoft.com//windows/desktop/Msi/appsearch-action">AppSearch</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize</a>, can be called.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSequence as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Action Functions</seealso>
  </member>
  <member name="Windows.MsiSequenceA">
    <summary>
      <para>The
<b>MsiSequence</b> function executes another action sequence, as described in the specified table.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szTable">
      <para>Specifies the name of the table containing the action sequence.</para>
    </param>
    <param name="iSequenceMode">
      <para>This parameter is currently unimplemented. It is reserved for future use and must be 0.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSequence</b> function queries the specified table, ordering the actions by the numbers in the Sequence column. For each row retrieved, an action is executed, provided that any supplied condition expression does not evaluate to FALSE.</para>
      <para>An action sequence containing any actions that update the system, such as the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfiles-action">InstallFiles</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/writeregistryvalues-action">WriteRegistryValues</a> actions, cannot be run by calling
<b>MsiSequence</b>. The exception to this rule is if
<b>MsiSequence</b> is called from a custom action that is scheduled in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installexecutesequence-table">InstallExecuteSequence table</a> between the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installinitialize-action">InstallInitialize</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfinalize-action">InstallFinalize actions</a>. Actions that do not update the system, such as
<a href="https://docs.microsoft.com//windows/desktop/Msi/appsearch-action">AppSearch</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize</a>, can be called.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSequence as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Action Functions</seealso>
  </member>
  <member name="Windows.MsiSequenceW">
    <summary>
      <para>The
<b>MsiSequence</b> function executes another action sequence, as described in the specified table.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szTable">
      <para>Specifies the name of the table containing the action sequence.</para>
    </param>
    <param name="iSequenceMode">
      <para>This parameter is currently unimplemented. It is reserved for future use and must be 0.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSequence</b> function queries the specified table, ordering the actions by the numbers in the Sequence column. For each row retrieved, an action is executed, provided that any supplied condition expression does not evaluate to FALSE.</para>
      <para>An action sequence containing any actions that update the system, such as the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfiles-action">InstallFiles</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/writeregistryvalues-action">WriteRegistryValues</a> actions, cannot be run by calling
<b>MsiSequence</b>. The exception to this rule is if
<b>MsiSequence</b> is called from a custom action that is scheduled in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installexecutesequence-table">InstallExecuteSequence table</a> between the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installinitialize-action">InstallInitialize</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfinalize-action">InstallFinalize actions</a>. Actions that do not update the system, such as
<a href="https://docs.microsoft.com//windows/desktop/Msi/appsearch-action">AppSearch</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize</a>, can be called.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSequence as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Action Functions</seealso>
  </member>
  <member name="Windows.MsiSequence">
    <summary>
      <para>The
<b>MsiSequence</b> function executes another action sequence, as described in the specified table.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szTable">
      <para>Specifies the name of the table containing the action sequence.</para>
    </param>
    <param name="iSequenceMode">
      <para>This parameter is currently unimplemented. It is reserved for future use and must be 0.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSequence</b> function queries the specified table, ordering the actions by the numbers in the Sequence column. For each row retrieved, an action is executed, provided that any supplied condition expression does not evaluate to FALSE.</para>
      <para>An action sequence containing any actions that update the system, such as the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfiles-action">InstallFiles</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/writeregistryvalues-action">WriteRegistryValues</a> actions, cannot be run by calling
<b>MsiSequence</b>. The exception to this rule is if
<b>MsiSequence</b> is called from a custom action that is scheduled in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installexecutesequence-table">InstallExecuteSequence table</a> between the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installinitialize-action">InstallInitialize</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfinalize-action">InstallFinalize actions</a>. Actions that do not update the system, such as
<a href="https://docs.microsoft.com//windows/desktop/Msi/appsearch-action">AppSearch</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize</a>, can be called.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSequence as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Action Functions</seealso>
  </member>
  <member name="Windows.MsiSequenceA">
    <summary>
      <para>The
<b>MsiSequence</b> function executes another action sequence, as described in the specified table.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szTable">
      <para>Specifies the name of the table containing the action sequence.</para>
    </param>
    <param name="iSequenceMode">
      <para>This parameter is currently unimplemented. It is reserved for future use and must be 0.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSequence</b> function queries the specified table, ordering the actions by the numbers in the Sequence column. For each row retrieved, an action is executed, provided that any supplied condition expression does not evaluate to FALSE.</para>
      <para>An action sequence containing any actions that update the system, such as the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfiles-action">InstallFiles</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/writeregistryvalues-action">WriteRegistryValues</a> actions, cannot be run by calling
<b>MsiSequence</b>. The exception to this rule is if
<b>MsiSequence</b> is called from a custom action that is scheduled in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installexecutesequence-table">InstallExecuteSequence table</a> between the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installinitialize-action">InstallInitialize</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfinalize-action">InstallFinalize actions</a>. Actions that do not update the system, such as
<a href="https://docs.microsoft.com//windows/desktop/Msi/appsearch-action">AppSearch</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize</a>, can be called.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSequence as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Action Functions</seealso>
  </member>
  <member name="Windows.MsiSequenceW">
    <summary>
      <para>The
<b>MsiSequence</b> function executes another action sequence, as described in the specified table.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szTable">
      <para>Specifies the name of the table containing the action sequence.</para>
    </param>
    <param name="iSequenceMode">
      <para>This parameter is currently unimplemented. It is reserved for future use and must be 0.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSequence</b> function queries the specified table, ordering the actions by the numbers in the Sequence column. For each row retrieved, an action is executed, provided that any supplied condition expression does not evaluate to FALSE.</para>
      <para>An action sequence containing any actions that update the system, such as the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfiles-action">InstallFiles</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/writeregistryvalues-action">WriteRegistryValues</a> actions, cannot be run by calling
<b>MsiSequence</b>. The exception to this rule is if
<b>MsiSequence</b> is called from a custom action that is scheduled in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installexecutesequence-table">InstallExecuteSequence table</a> between the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installinitialize-action">InstallInitialize</a> and
<a href="https://docs.microsoft.com//windows/desktop/Msi/installfinalize-action">InstallFinalize actions</a>. Actions that do not update the system, such as
<a href="https://docs.microsoft.com//windows/desktop/Msi/appsearch-action">AppSearch</a> or
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize</a>, can be called.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSequence as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Action Functions</seealso>
  </member>
  <member name="Windows.MsiSetComponentState">
    <summary>
      <para>The
<b>MsiSetComponentState</b> function sets a component to the requested state.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szComponent">
      <para>Specifies the name of the component.</para>
    </param>
    <param name="iState">
      <para>Specifies the state to set. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The component was uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component was installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component will run from source, CD, or network.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiSetComponentState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSetComponentState</b> function requests a change in the Action state of a record in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component table</a>.</para>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
  </member>
  <member name="Windows.MsiSetComponentStateA">
    <summary>
      <para>The
<b>MsiSetComponentState</b> function sets a component to the requested state.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szComponent">
      <para>Specifies the name of the component.</para>
    </param>
    <param name="iState">
      <para>Specifies the state to set. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The component was uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component was installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component will run from source, CD, or network.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiSetComponentState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSetComponentState</b> function requests a change in the Action state of a record in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component table</a>.</para>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
  </member>
  <member name="Windows.MsiSetComponentStateW">
    <summary>
      <para>The
<b>MsiSetComponentState</b> function sets a component to the requested state.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szComponent">
      <para>Specifies the name of the component.</para>
    </param>
    <param name="iState">
      <para>Specifies the state to set. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The component was uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component was installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component will run from source, CD, or network.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiSetComponentState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSetComponentState</b> function requests a change in the Action state of a record in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component table</a>.</para>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
  </member>
  <member name="Windows.MsiSetComponentState">
    <summary>
      <para>The
<b>MsiSetComponentState</b> function sets a component to the requested state.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szComponent">
      <para>Specifies the name of the component.</para>
    </param>
    <param name="iState">
      <para>Specifies the state to set. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The component was uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component was installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component will run from source, CD, or network.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiSetComponentState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSetComponentState</b> function requests a change in the Action state of a record in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component table</a>.</para>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
  </member>
  <member name="Windows.MsiSetComponentStateA">
    <summary>
      <para>The
<b>MsiSetComponentState</b> function sets a component to the requested state.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szComponent">
      <para>Specifies the name of the component.</para>
    </param>
    <param name="iState">
      <para>Specifies the state to set. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The component was uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component was installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component will run from source, CD, or network.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiSetComponentState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSetComponentState</b> function requests a change in the Action state of a record in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component table</a>.</para>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
  </member>
  <member name="Windows.MsiSetComponentStateW">
    <summary>
      <para>The
<b>MsiSetComponentState</b> function sets a component to the requested state.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szComponent">
      <para>Specifies the name of the component.</para>
    </param>
    <param name="iState">
      <para>Specifies the state to set. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The component was uninstalled.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The component was installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The component will run from source, CD, or network.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiSetComponentState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSetComponentState</b> function requests a change in the Action state of a record in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component table</a>.</para>
      <para>For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetComponentState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
  </member>
  <member name="Windows.MsiSetFeatureAttributes">
    <summary>
      <para>The
<b>MsiSetFeatureAttributes</b> function can modify the default attributes of a feature at runtime. Note that the default attributes of features are authored in the Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature name within the product.</para>
    </param>
    <param name="dwAttributes">
      <para>Feature attributes specified at run time as a set of bit flags:</para>
      <list type="table">
        <listheader>
          <description>Constant</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FAVORLOCAL</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFavorLocal at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FAVORSOURCE</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFavorSource at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FOLLOWPARENT</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFollowParent at run time. Note that this is not a valid attribute to be set for top-level features. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FAVORADVERTISE</b>
                </description>
              </item>
              <item>
                <description>8</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFavorAdvertise at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE</b>
                </description>
              </item>
              <item>
                <description>16</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesDisallowAdvertise at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE</b>
                </description>
              </item>
              <item>
                <description>32</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesNoUnsupportedAdvertise at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>
        <b>MsiSetFeatureAttributes</b> must be called after
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize action</a> and before
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. The function returns ERROR_FUNCTION_FAILED if called at any other time.</para>
      <para>The INSTALLFEATUREATTRIBUTE_FAVORLOCAL, INSTALLFEATUREATTRIBUTE_FAVORSOURCE, and INSTALLFEATUREATTRIBUTE_FOLLOWPARENT flags are mutually exclusive. Only one of these bits can be set for any feature. If more than one of these flags is set, the behavior of that feature is undefined.</para>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetFeatureAttributes as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiSetFeatureAttributesA">
    <summary>
      <para>The
<b>MsiSetFeatureAttributes</b> function can modify the default attributes of a feature at runtime. Note that the default attributes of features are authored in the Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature name within the product.</para>
    </param>
    <param name="dwAttributes">
      <para>Feature attributes specified at run time as a set of bit flags:</para>
      <list type="table">
        <listheader>
          <description>Constant</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FAVORLOCAL</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFavorLocal at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FAVORSOURCE</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFavorSource at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FOLLOWPARENT</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFollowParent at run time. Note that this is not a valid attribute to be set for top-level features. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FAVORADVERTISE</b>
                </description>
              </item>
              <item>
                <description>8</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFavorAdvertise at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE</b>
                </description>
              </item>
              <item>
                <description>16</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesDisallowAdvertise at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE</b>
                </description>
              </item>
              <item>
                <description>32</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesNoUnsupportedAdvertise at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>
        <b>MsiSetFeatureAttributes</b> must be called after
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize action</a> and before
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. The function returns ERROR_FUNCTION_FAILED if called at any other time.</para>
      <para>The INSTALLFEATUREATTRIBUTE_FAVORLOCAL, INSTALLFEATUREATTRIBUTE_FAVORSOURCE, and INSTALLFEATUREATTRIBUTE_FOLLOWPARENT flags are mutually exclusive. Only one of these bits can be set for any feature. If more than one of these flags is set, the behavior of that feature is undefined.</para>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetFeatureAttributes as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiSetFeatureAttributesW">
    <summary>
      <para>The
<b>MsiSetFeatureAttributes</b> function can modify the default attributes of a feature at runtime. Note that the default attributes of features are authored in the Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature name within the product.</para>
    </param>
    <param name="dwAttributes">
      <para>Feature attributes specified at run time as a set of bit flags:</para>
      <list type="table">
        <listheader>
          <description>Constant</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FAVORLOCAL</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFavorLocal at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FAVORSOURCE</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFavorSource at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FOLLOWPARENT</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFollowParent at run time. Note that this is not a valid attribute to be set for top-level features. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FAVORADVERTISE</b>
                </description>
              </item>
              <item>
                <description>8</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFavorAdvertise at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE</b>
                </description>
              </item>
              <item>
                <description>16</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesDisallowAdvertise at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE</b>
                </description>
              </item>
              <item>
                <description>32</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesNoUnsupportedAdvertise at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>
        <b>MsiSetFeatureAttributes</b> must be called after
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize action</a> and before
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. The function returns ERROR_FUNCTION_FAILED if called at any other time.</para>
      <para>The INSTALLFEATUREATTRIBUTE_FAVORLOCAL, INSTALLFEATUREATTRIBUTE_FAVORSOURCE, and INSTALLFEATUREATTRIBUTE_FOLLOWPARENT flags are mutually exclusive. Only one of these bits can be set for any feature. If more than one of these flags is set, the behavior of that feature is undefined.</para>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetFeatureAttributes as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiSetFeatureAttributes">
    <summary>
      <para>The
<b>MsiSetFeatureAttributes</b> function can modify the default attributes of a feature at runtime. Note that the default attributes of features are authored in the Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature name within the product.</para>
    </param>
    <param name="dwAttributes">
      <para>Feature attributes specified at run time as a set of bit flags:</para>
      <list type="table">
        <listheader>
          <description>Constant</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FAVORLOCAL</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFavorLocal at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FAVORSOURCE</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFavorSource at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FOLLOWPARENT</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFollowParent at run time. Note that this is not a valid attribute to be set for top-level features. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FAVORADVERTISE</b>
                </description>
              </item>
              <item>
                <description>8</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFavorAdvertise at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE</b>
                </description>
              </item>
              <item>
                <description>16</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesDisallowAdvertise at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE</b>
                </description>
              </item>
              <item>
                <description>32</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesNoUnsupportedAdvertise at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>
        <b>MsiSetFeatureAttributes</b> must be called after
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize action</a> and before
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. The function returns ERROR_FUNCTION_FAILED if called at any other time.</para>
      <para>The INSTALLFEATUREATTRIBUTE_FAVORLOCAL, INSTALLFEATUREATTRIBUTE_FAVORSOURCE, and INSTALLFEATUREATTRIBUTE_FOLLOWPARENT flags are mutually exclusive. Only one of these bits can be set for any feature. If more than one of these flags is set, the behavior of that feature is undefined.</para>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetFeatureAttributes as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiSetFeatureAttributesA">
    <summary>
      <para>The
<b>MsiSetFeatureAttributes</b> function can modify the default attributes of a feature at runtime. Note that the default attributes of features are authored in the Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature name within the product.</para>
    </param>
    <param name="dwAttributes">
      <para>Feature attributes specified at run time as a set of bit flags:</para>
      <list type="table">
        <listheader>
          <description>Constant</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FAVORLOCAL</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFavorLocal at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FAVORSOURCE</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFavorSource at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FOLLOWPARENT</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFollowParent at run time. Note that this is not a valid attribute to be set for top-level features. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FAVORADVERTISE</b>
                </description>
              </item>
              <item>
                <description>8</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFavorAdvertise at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE</b>
                </description>
              </item>
              <item>
                <description>16</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesDisallowAdvertise at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE</b>
                </description>
              </item>
              <item>
                <description>32</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesNoUnsupportedAdvertise at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>
        <b>MsiSetFeatureAttributes</b> must be called after
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize action</a> and before
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. The function returns ERROR_FUNCTION_FAILED if called at any other time.</para>
      <para>The INSTALLFEATUREATTRIBUTE_FAVORLOCAL, INSTALLFEATUREATTRIBUTE_FAVORSOURCE, and INSTALLFEATUREATTRIBUTE_FOLLOWPARENT flags are mutually exclusive. Only one of these bits can be set for any feature. If more than one of these flags is set, the behavior of that feature is undefined.</para>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetFeatureAttributes as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiSetFeatureAttributesW">
    <summary>
      <para>The
<b>MsiSetFeatureAttributes</b> function can modify the default attributes of a feature at runtime. Note that the default attributes of features are authored in the Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the feature name within the product.</para>
    </param>
    <param name="dwAttributes">
      <para>Feature attributes specified at run time as a set of bit flags:</para>
      <list type="table">
        <listheader>
          <description>Constant</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FAVORLOCAL</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFavorLocal at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FAVORSOURCE</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFavorSource at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FOLLOWPARENT</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFollowParent at run time. Note that this is not a valid attribute to be set for top-level features. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_FAVORADVERTISE</b>
                </description>
              </item>
              <item>
                <description>8</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesFavorAdvertise at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_DISALLOWADVERTISE</b>
                </description>
              </item>
              <item>
                <description>16</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesDisallowAdvertise at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INSTALLFEATUREATTRIBUTE_NOUNSUPPORTEDADVERTISE</b>
                </description>
              </item>
              <item>
                <description>32</description>
              </item>
            </list>
          </description>
          <description>
            <para>Modifies default feature attributes to msidbFeatureAttributesNoUnsupportedAdvertise at run time. See Attributes column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a> for a description.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>
        <b>MsiSetFeatureAttributes</b> must be called after
<a href="https://docs.microsoft.com//windows/desktop/Msi/costinitialize-action">CostInitialize action</a> and before
<a href="https://docs.microsoft.com//windows/desktop/Msi/costfinalize-action">CostFinalize action</a>. The function returns ERROR_FUNCTION_FAILED if called at any other time.</para>
      <para>The INSTALLFEATUREATTRIBUTE_FAVORLOCAL, INSTALLFEATUREATTRIBUTE_FAVORSOURCE, and INSTALLFEATUREATTRIBUTE_FOLLOWPARENT flags are mutually exclusive. Only one of these bits can be set for any feature. If more than one of these flags is set, the behavior of that feature is undefined.</para>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetFeatureAttributes as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.MsiSetFeatureState">
    <summary>
      <para>The
<b>MsiSetFeatureState</b> function sets a feature to a specified state.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the name of the feature.</para>
    </param>
    <param name="iState">
      <para>Specifies the state to set. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature is installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature is run from the source, CD, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The feature is advertised.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiSetFeatureState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSetFeatureState</b> function requests a change in the select state of a feature in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature</a> table and its children. In turn, the action state of all the components linked to the changed feature records are also updated appropriately, based on the new feature select state.</para>
      <para>The
<see cref="MsiSetInstallLevel" /> function must be called before calling
<b>MsiSetFeatureState</b>.</para>
      <para>When <b>MsiSetFeatureState</b> is called, the installer attempts to set the action state of each component tied to the specified feature to the specified state. However, there are common situations when the request cannot be fully implemented. For example, if a feature is tied to two components, component A and component B, through the <a href="https://docs.microsoft.com//windows/desktop/Msi/featurecomponents-table">FeatureComponents</a> table, and component A has the <b>msidbComponentAttributesLocalOnly</b> attribute and component B has the <b>msidbComponentAttributesSourceOnly</b> attribute. In this case, if <b>MsiSetFeatureState</b> is called with a requested state of either INSTALLSTATE_LOCAL or INSTALLSTATE_SOURCE, the request cannot be fully implemented for both components. In this case, both components are turned ON, with component A set to Local and component B set to Source.</para>
      <para>If more than one feature is linked to a single component (a common scenario), the final action state of that component is determined as follows:</para>
      <list type="bullet">
        <item>
          <description>If at least one feature requires the component to be installed locally, the feature is installed with a state of local.</description>
        </item>
        <item>
          <description>If at least one feature requires the component to be run from the source, the feature is installed with a state of source.</description>
        </item>
        <item>
          <description>If at least one feature requires the removal of the component, the action state is absent.</description>
        </item>
      </list>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
  </member>
  <member name="Windows.MsiSetFeatureStateA">
    <summary>
      <para>The
<b>MsiSetFeatureState</b> function sets a feature to a specified state.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the name of the feature.</para>
    </param>
    <param name="iState">
      <para>Specifies the state to set. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature is installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature is run from the source, CD, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The feature is advertised.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiSetFeatureState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSetFeatureState</b> function requests a change in the select state of a feature in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature</a> table and its children. In turn, the action state of all the components linked to the changed feature records are also updated appropriately, based on the new feature select state.</para>
      <para>The
<see cref="MsiSetInstallLevel" /> function must be called before calling
<b>MsiSetFeatureState</b>.</para>
      <para>When <b>MsiSetFeatureState</b> is called, the installer attempts to set the action state of each component tied to the specified feature to the specified state. However, there are common situations when the request cannot be fully implemented. For example, if a feature is tied to two components, component A and component B, through the <a href="https://docs.microsoft.com//windows/desktop/Msi/featurecomponents-table">FeatureComponents</a> table, and component A has the <b>msidbComponentAttributesLocalOnly</b> attribute and component B has the <b>msidbComponentAttributesSourceOnly</b> attribute. In this case, if <b>MsiSetFeatureState</b> is called with a requested state of either INSTALLSTATE_LOCAL or INSTALLSTATE_SOURCE, the request cannot be fully implemented for both components. In this case, both components are turned ON, with component A set to Local and component B set to Source.</para>
      <para>If more than one feature is linked to a single component (a common scenario), the final action state of that component is determined as follows:</para>
      <list type="bullet">
        <item>
          <description>If at least one feature requires the component to be installed locally, the feature is installed with a state of local.</description>
        </item>
        <item>
          <description>If at least one feature requires the component to be run from the source, the feature is installed with a state of source.</description>
        </item>
        <item>
          <description>If at least one feature requires the removal of the component, the action state is absent.</description>
        </item>
      </list>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
  </member>
  <member name="Windows.MsiSetFeatureStateW">
    <summary>
      <para>The
<b>MsiSetFeatureState</b> function sets a feature to a specified state.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the name of the feature.</para>
    </param>
    <param name="iState">
      <para>Specifies the state to set. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature is installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature is run from the source, CD, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The feature is advertised.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiSetFeatureState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSetFeatureState</b> function requests a change in the select state of a feature in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature</a> table and its children. In turn, the action state of all the components linked to the changed feature records are also updated appropriately, based on the new feature select state.</para>
      <para>The
<see cref="MsiSetInstallLevel" /> function must be called before calling
<b>MsiSetFeatureState</b>.</para>
      <para>When <b>MsiSetFeatureState</b> is called, the installer attempts to set the action state of each component tied to the specified feature to the specified state. However, there are common situations when the request cannot be fully implemented. For example, if a feature is tied to two components, component A and component B, through the <a href="https://docs.microsoft.com//windows/desktop/Msi/featurecomponents-table">FeatureComponents</a> table, and component A has the <b>msidbComponentAttributesLocalOnly</b> attribute and component B has the <b>msidbComponentAttributesSourceOnly</b> attribute. In this case, if <b>MsiSetFeatureState</b> is called with a requested state of either INSTALLSTATE_LOCAL or INSTALLSTATE_SOURCE, the request cannot be fully implemented for both components. In this case, both components are turned ON, with component A set to Local and component B set to Source.</para>
      <para>If more than one feature is linked to a single component (a common scenario), the final action state of that component is determined as follows:</para>
      <list type="bullet">
        <item>
          <description>If at least one feature requires the component to be installed locally, the feature is installed with a state of local.</description>
        </item>
        <item>
          <description>If at least one feature requires the component to be run from the source, the feature is installed with a state of source.</description>
        </item>
        <item>
          <description>If at least one feature requires the removal of the component, the action state is absent.</description>
        </item>
      </list>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
  </member>
  <member name="Windows.MsiSetFeatureState">
    <summary>
      <para>The
<b>MsiSetFeatureState</b> function sets a feature to a specified state.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the name of the feature.</para>
    </param>
    <param name="iState">
      <para>Specifies the state to set. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature is installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature is run from the source, CD, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The feature is advertised.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiSetFeatureState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSetFeatureState</b> function requests a change in the select state of a feature in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature</a> table and its children. In turn, the action state of all the components linked to the changed feature records are also updated appropriately, based on the new feature select state.</para>
      <para>The
<see cref="MsiSetInstallLevel" /> function must be called before calling
<b>MsiSetFeatureState</b>.</para>
      <para>When <b>MsiSetFeatureState</b> is called, the installer attempts to set the action state of each component tied to the specified feature to the specified state. However, there are common situations when the request cannot be fully implemented. For example, if a feature is tied to two components, component A and component B, through the <a href="https://docs.microsoft.com//windows/desktop/Msi/featurecomponents-table">FeatureComponents</a> table, and component A has the <b>msidbComponentAttributesLocalOnly</b> attribute and component B has the <b>msidbComponentAttributesSourceOnly</b> attribute. In this case, if <b>MsiSetFeatureState</b> is called with a requested state of either INSTALLSTATE_LOCAL or INSTALLSTATE_SOURCE, the request cannot be fully implemented for both components. In this case, both components are turned ON, with component A set to Local and component B set to Source.</para>
      <para>If more than one feature is linked to a single component (a common scenario), the final action state of that component is determined as follows:</para>
      <list type="bullet">
        <item>
          <description>If at least one feature requires the component to be installed locally, the feature is installed with a state of local.</description>
        </item>
        <item>
          <description>If at least one feature requires the component to be run from the source, the feature is installed with a state of source.</description>
        </item>
        <item>
          <description>If at least one feature requires the removal of the component, the action state is absent.</description>
        </item>
      </list>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
  </member>
  <member name="Windows.MsiSetFeatureStateA">
    <summary>
      <para>The
<b>MsiSetFeatureState</b> function sets a feature to a specified state.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the name of the feature.</para>
    </param>
    <param name="iState">
      <para>Specifies the state to set. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature is installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature is run from the source, CD, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The feature is advertised.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiSetFeatureState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSetFeatureState</b> function requests a change in the select state of a feature in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature</a> table and its children. In turn, the action state of all the components linked to the changed feature records are also updated appropriately, based on the new feature select state.</para>
      <para>The
<see cref="MsiSetInstallLevel" /> function must be called before calling
<b>MsiSetFeatureState</b>.</para>
      <para>When <b>MsiSetFeatureState</b> is called, the installer attempts to set the action state of each component tied to the specified feature to the specified state. However, there are common situations when the request cannot be fully implemented. For example, if a feature is tied to two components, component A and component B, through the <a href="https://docs.microsoft.com//windows/desktop/Msi/featurecomponents-table">FeatureComponents</a> table, and component A has the <b>msidbComponentAttributesLocalOnly</b> attribute and component B has the <b>msidbComponentAttributesSourceOnly</b> attribute. In this case, if <b>MsiSetFeatureState</b> is called with a requested state of either INSTALLSTATE_LOCAL or INSTALLSTATE_SOURCE, the request cannot be fully implemented for both components. In this case, both components are turned ON, with component A set to Local and component B set to Source.</para>
      <para>If more than one feature is linked to a single component (a common scenario), the final action state of that component is determined as follows:</para>
      <list type="bullet">
        <item>
          <description>If at least one feature requires the component to be installed locally, the feature is installed with a state of local.</description>
        </item>
        <item>
          <description>If at least one feature requires the component to be run from the source, the feature is installed with a state of source.</description>
        </item>
        <item>
          <description>If at least one feature requires the removal of the component, the action state is absent.</description>
        </item>
      </list>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
  </member>
  <member name="Windows.MsiSetFeatureStateW">
    <summary>
      <para>The
<b>MsiSetFeatureState</b> function sets a feature to a specified state.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFeature">
      <para>Specifies the name of the feature.</para>
    </param>
    <param name="iState">
      <para>Specifies the state to set. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>INSTALLSTATE_ABSENT</b>
          </description>
          <description>
            <para>The feature is not installed.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_LOCAL</b>
          </description>
          <description>
            <para>The feature is installed on the local drive.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_SOURCE</b>
          </description>
          <description>
            <para>The feature is run from the source, CD, or network.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INSTALLSTATE_ADVERTISED</b>
          </description>
          <description>
            <para>The feature is advertised.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The
<b>MsiSetFeatureState</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSetFeatureState</b> function requests a change in the select state of a feature in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature</a> table and its children. In turn, the action state of all the components linked to the changed feature records are also updated appropriately, based on the new feature select state.</para>
      <para>The
<see cref="MsiSetInstallLevel" /> function must be called before calling
<b>MsiSetFeatureState</b>.</para>
      <para>When <b>MsiSetFeatureState</b> is called, the installer attempts to set the action state of each component tied to the specified feature to the specified state. However, there are common situations when the request cannot be fully implemented. For example, if a feature is tied to two components, component A and component B, through the <a href="https://docs.microsoft.com//windows/desktop/Msi/featurecomponents-table">FeatureComponents</a> table, and component A has the <b>msidbComponentAttributesLocalOnly</b> attribute and component B has the <b>msidbComponentAttributesSourceOnly</b> attribute. In this case, if <b>MsiSetFeatureState</b> is called with a requested state of either INSTALLSTATE_LOCAL or INSTALLSTATE_SOURCE, the request cannot be fully implemented for both components. In this case, both components are turned ON, with component A set to Local and component B set to Source.</para>
      <para>If more than one feature is linked to a single component (a common scenario), the final action state of that component is determined as follows:</para>
      <list type="bullet">
        <item>
          <description>If at least one feature requires the component to be installed locally, the feature is installed with a state of local.</description>
        </item>
        <item>
          <description>If at least one feature requires the component to be run from the source, the feature is installed with a state of source.</description>
        </item>
        <item>
          <description>If at least one feature requires the removal of the component, the action state is absent.</description>
        </item>
      </list>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions from Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetFeatureState as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
  </member>
  <member name="Windows.MsiSetInstallLevel">
    <summary>
      <para>The
<b>MsiSetInstallLevel</b> function sets the installation level for a full product installation.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation that is provided to a DLL custom action or obtained by using <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="iInstallLevel">
      <para>The installation level.</para>
    </param>
    <returns>
      <para>The
<b>MsiSetInstallLevel</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSetInstallLevel</b> function sets the following:</para>
      <list type="bullet">
        <item>
          <description>The installation level for the current installation to a specified value.</description>
        </item>
        <item>
          <description>The Select and Installed states for all features in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/feature-table">Feature table</a>.</description>
        </item>
        <item>
          <description>The Action state of each component in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/component-table">Component table</a>, based on the new level.</description>
        </item>
      </list>
      <para>For any installation, there is a defined install level, which is an integral value from 1 to 32,767. The initial value is determined by the
<a href="https://docs.microsoft.com//windows/desktop/Msi/installlevel">INSTALLLEVEL</a> property, which is set in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/property-table">Property Table</a>.</para>
      <para>If 0 (zero) or a negative number is passed in the <i>iInstallLevel</i> parameter, the current installation level does not change, but all features are still updated based on the current installation level. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
  </member>
  <member name="Windows.MsiSetMode">
    <summary>
      <para>The
<b>MsiSetMode</b> function sets an internal engine Boolean state.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="eRunMode">
      <para>Specifies the run mode. This parameter must be one of the following values. While there are many values for this parameter, as described in
<see cref="MsiGetMode" />, only one of the following values can be set.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSIRUNMODE_REBOOTATEND</b>
          </description>
          <description>
            <para>A reboot is necessary after a successful installation.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSIRUNMODE_REBOOTNOW</b>
          </description>
          <description>
            <para>A reboot is necessary to continue installation.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="fState">
      <para>Specifies the state to set to <b>TRUE</b> or <b>FALSE</b>.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer State Access Functions</seealso>
  </member>
  <member name="Windows.MsiSetProperty">
    <summary>
      <para>The
<b>MsiSetProperty</b> function sets the value for an installation property.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szName">
      <para>Specifies the name of the property.</para>
    </param>
    <param name="szValue">
      <para>Specifies the value of the property.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>If the property is not defined, it is created by the
<b>MsiSetProperty</b> function. If the value is null or an empty string, the property is removed.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer State Access Functions</seealso>
  </member>
  <member name="Windows.MsiSetPropertyA">
    <summary>
      <para>The
<b>MsiSetProperty</b> function sets the value for an installation property.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szName">
      <para>Specifies the name of the property.</para>
    </param>
    <param name="szValue">
      <para>Specifies the value of the property.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>If the property is not defined, it is created by the
<b>MsiSetProperty</b> function. If the value is null or an empty string, the property is removed.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer State Access Functions</seealso>
  </member>
  <member name="Windows.MsiSetPropertyW">
    <summary>
      <para>The
<b>MsiSetProperty</b> function sets the value for an installation property.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szName">
      <para>Specifies the name of the property.</para>
    </param>
    <param name="szValue">
      <para>Specifies the value of the property.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>If the property is not defined, it is created by the
<b>MsiSetProperty</b> function. If the value is null or an empty string, the property is removed.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer State Access Functions</seealso>
  </member>
  <member name="Windows.MsiSetProperty">
    <summary>
      <para>The
<b>MsiSetProperty</b> function sets the value for an installation property.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szName">
      <para>Specifies the name of the property.</para>
    </param>
    <param name="szValue">
      <para>Specifies the value of the property.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>If the property is not defined, it is created by the
<b>MsiSetProperty</b> function. If the value is null or an empty string, the property is removed.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer State Access Functions</seealso>
  </member>
  <member name="Windows.MsiSetPropertyA">
    <summary>
      <para>The
<b>MsiSetProperty</b> function sets the value for an installation property.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szName">
      <para>Specifies the name of the property.</para>
    </param>
    <param name="szValue">
      <para>Specifies the value of the property.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>If the property is not defined, it is created by the
<b>MsiSetProperty</b> function. If the value is null or an empty string, the property is removed.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer State Access Functions</seealso>
  </member>
  <member name="Windows.MsiSetPropertyW">
    <summary>
      <para>The
<b>MsiSetProperty</b> function sets the value for an installation property.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szName">
      <para>Specifies the name of the property.</para>
    </param>
    <param name="szValue">
      <para>Specifies the value of the property.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>If the property is not defined, it is created by the
<b>MsiSetProperty</b> function. If the value is null or an empty string, the property is removed.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer State Access Functions</seealso>
  </member>
  <member name="Windows.MsiSetTargetPath">
    <summary>
      <para>The
<b>MsiSetTargetPath</b> function sets the full target path for a folder in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFolder">
      <para>Specifies the folder identifier. This is a primary key in the Directory table.</para>
    </param>
    <param name="szFolderPath">
      <para>Specifies the full path for the folder, ending in a directory separator.</para>
    </param>
    <returns>
      <para>The
<b>MsiSetTargetPath</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSetTargetPath</b> function changes the path specification for the target directory named in the in-memory
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>. Also, the path specifications of all other path objects in the table that are either subordinate or equivalent to the changed path are updated to reflect the change. The properties for each affected path are also updated.</para>
      <para>
        <b>MsiSetTargetPath</b> fails if the selected directory is read only.</para>
      <para>If an error occurs in this function, all updated paths and properties revert to their previous values. Therefore, it is safe to treat errors returned by this function as nonfatal.</para>
      <para>Do not attempt to configure the target path if the components using those paths are already installed for the current user or for a different user. Check the
<a href="https://docs.microsoft.com//windows/desktop/Msi/productstate">ProductState</a> property before calling
<b>MsiSetTargetPath</b> to determine if the product containing this component is installed.</para>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetTargetPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Location Functions</seealso>
  </member>
  <member name="Windows.MsiSetTargetPathA">
    <summary>
      <para>The
<b>MsiSetTargetPath</b> function sets the full target path for a folder in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFolder">
      <para>Specifies the folder identifier. This is a primary key in the Directory table.</para>
    </param>
    <param name="szFolderPath">
      <para>Specifies the full path for the folder, ending in a directory separator.</para>
    </param>
    <returns>
      <para>The
<b>MsiSetTargetPath</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSetTargetPath</b> function changes the path specification for the target directory named in the in-memory
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>. Also, the path specifications of all other path objects in the table that are either subordinate or equivalent to the changed path are updated to reflect the change. The properties for each affected path are also updated.</para>
      <para>
        <b>MsiSetTargetPath</b> fails if the selected directory is read only.</para>
      <para>If an error occurs in this function, all updated paths and properties revert to their previous values. Therefore, it is safe to treat errors returned by this function as nonfatal.</para>
      <para>Do not attempt to configure the target path if the components using those paths are already installed for the current user or for a different user. Check the
<a href="https://docs.microsoft.com//windows/desktop/Msi/productstate">ProductState</a> property before calling
<b>MsiSetTargetPath</b> to determine if the product containing this component is installed.</para>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetTargetPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Location Functions</seealso>
  </member>
  <member name="Windows.MsiSetTargetPathW">
    <summary>
      <para>The
<b>MsiSetTargetPath</b> function sets the full target path for a folder in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFolder">
      <para>Specifies the folder identifier. This is a primary key in the Directory table.</para>
    </param>
    <param name="szFolderPath">
      <para>Specifies the full path for the folder, ending in a directory separator.</para>
    </param>
    <returns>
      <para>The
<b>MsiSetTargetPath</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSetTargetPath</b> function changes the path specification for the target directory named in the in-memory
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>. Also, the path specifications of all other path objects in the table that are either subordinate or equivalent to the changed path are updated to reflect the change. The properties for each affected path are also updated.</para>
      <para>
        <b>MsiSetTargetPath</b> fails if the selected directory is read only.</para>
      <para>If an error occurs in this function, all updated paths and properties revert to their previous values. Therefore, it is safe to treat errors returned by this function as nonfatal.</para>
      <para>Do not attempt to configure the target path if the components using those paths are already installed for the current user or for a different user. Check the
<a href="https://docs.microsoft.com//windows/desktop/Msi/productstate">ProductState</a> property before calling
<b>MsiSetTargetPath</b> to determine if the product containing this component is installed.</para>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetTargetPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Location Functions</seealso>
  </member>
  <member name="Windows.MsiSetTargetPath">
    <summary>
      <para>The
<b>MsiSetTargetPath</b> function sets the full target path for a folder in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFolder">
      <para>Specifies the folder identifier. This is a primary key in the Directory table.</para>
    </param>
    <param name="szFolderPath">
      <para>Specifies the full path for the folder, ending in a directory separator.</para>
    </param>
    <returns>
      <para>The
<b>MsiSetTargetPath</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSetTargetPath</b> function changes the path specification for the target directory named in the in-memory
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>. Also, the path specifications of all other path objects in the table that are either subordinate or equivalent to the changed path are updated to reflect the change. The properties for each affected path are also updated.</para>
      <para>
        <b>MsiSetTargetPath</b> fails if the selected directory is read only.</para>
      <para>If an error occurs in this function, all updated paths and properties revert to their previous values. Therefore, it is safe to treat errors returned by this function as nonfatal.</para>
      <para>Do not attempt to configure the target path if the components using those paths are already installed for the current user or for a different user. Check the
<a href="https://docs.microsoft.com//windows/desktop/Msi/productstate">ProductState</a> property before calling
<b>MsiSetTargetPath</b> to determine if the product containing this component is installed.</para>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetTargetPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Location Functions</seealso>
  </member>
  <member name="Windows.MsiSetTargetPathA">
    <summary>
      <para>The
<b>MsiSetTargetPath</b> function sets the full target path for a folder in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFolder">
      <para>Specifies the folder identifier. This is a primary key in the Directory table.</para>
    </param>
    <param name="szFolderPath">
      <para>Specifies the full path for the folder, ending in a directory separator.</para>
    </param>
    <returns>
      <para>The
<b>MsiSetTargetPath</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSetTargetPath</b> function changes the path specification for the target directory named in the in-memory
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>. Also, the path specifications of all other path objects in the table that are either subordinate or equivalent to the changed path are updated to reflect the change. The properties for each affected path are also updated.</para>
      <para>
        <b>MsiSetTargetPath</b> fails if the selected directory is read only.</para>
      <para>If an error occurs in this function, all updated paths and properties revert to their previous values. Therefore, it is safe to treat errors returned by this function as nonfatal.</para>
      <para>Do not attempt to configure the target path if the components using those paths are already installed for the current user or for a different user. Check the
<a href="https://docs.microsoft.com//windows/desktop/Msi/productstate">ProductState</a> property before calling
<b>MsiSetTargetPath</b> to determine if the product containing this component is installed.</para>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetTargetPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Location Functions</seealso>
  </member>
  <member name="Windows.MsiSetTargetPathW">
    <summary>
      <para>The
<b>MsiSetTargetPath</b> function sets the full target path for a folder in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <param name="szFolder">
      <para>Specifies the folder identifier. This is a primary key in the Directory table.</para>
    </param>
    <param name="szFolderPath">
      <para>Specifies the full path for the folder, ending in a directory separator.</para>
    </param>
    <returns>
      <para>The
<b>MsiSetTargetPath</b> function returns the following values:</para>
    </returns>
    <remarks>
      <para>The
<b>MsiSetTargetPath</b> function changes the path specification for the target directory named in the in-memory
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory table</a>. Also, the path specifications of all other path objects in the table that are either subordinate or equivalent to the changed path are updated to reflect the change. The properties for each affected path are also updated.</para>
      <para>
        <b>MsiSetTargetPath</b> fails if the selected directory is read only.</para>
      <para>If an error occurs in this function, all updated paths and properties revert to their previous values. Therefore, it is safe to treat errors returned by this function as nonfatal.</para>
      <para>Do not attempt to configure the target path if the components using those paths are already installed for the current user or for a different user. Check the
<a href="https://docs.microsoft.com//windows/desktop/Msi/productstate">ProductState</a> property before calling
<b>MsiSetTargetPath</b> to determine if the product containing this component is installed.</para>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSetTargetPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Location Functions</seealso>
  </member>
  <member name="Windows.MsiSummaryInfoGetProperty">
    <summary>
      <para>The
<b>MsiSummaryInfoGetProperty</b> function gets a single property from the <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream">summary information stream</a>.</para>
      <para>
        <b>Note</b>  The meaning of the property value depends on whether the summary information stream is for an installation database (.msi file), transform (.mst file) or patch (.msp file). See <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-property-descriptions">Summary Property Descriptions</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a> for more information about summary information properties.</para>
    </summary>
    <param name="hSummaryInfo">
      <para>Handle to summary information.</para>
    </param>
    <param name="uiProperty">
      <para>Specifies the property ID of the summary property. This parameter can be a property ID  listed in the <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.  This function does not return values for PID_DICTIONARY OR PID_THUMBNAIL property.</para>
    </param>
    <param name="puiDataType">
      <para>Receives the returned property type. This  parameter can be a type listed in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.</para>
    </param>
    <param name="piValue">
      <para>Receives the returned integer property data.</para>
    </param>
    <param name="pftValue">
      <para>Pointer to a file value.</para>
    </param>
    <param name="szValueBuf">
      <para>Pointer to the buffer that receives the null terminated summary information property value. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchValueBuf</i> contains the required buffer size in <b>TCHARs</b>, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchValueBuf</i> contains the number of <b>TCHARs</b> written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to the variable that specifies the size, in <b>TCHARs</b>, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchValueBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiSummaryInfoGetProperty</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>Windows Installer functions that return data in a user provided memory location should not be called with null as the value for the pointer. These functions return a string or return data as integer pointers, but return inconsistent values when passing null as the value for the output argument. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</a>.</para>
      <para>The property information returned by the <b>MsiSummaryInfoGetProperty</b> function is received by the <i>piValue</i>, <i>pftValue</i>, or  <i>szValueBuf</i> parameter depending upon the type of property value that has been specified in the <i>puiDataType</i> parameter.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSummaryInfoGetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Summary Information Property Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summaryinfo-summaryinfo">Summaryinfo.Property</seealso>
  </member>
  <member name="Windows.MsiSummaryInfoGetPropertyA">
    <summary>
      <para>The
<b>MsiSummaryInfoGetProperty</b> function gets a single property from the <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream">summary information stream</a>.</para>
      <para>
        <b>Note</b>  The meaning of the property value depends on whether the summary information stream is for an installation database (.msi file), transform (.mst file) or patch (.msp file). See <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-property-descriptions">Summary Property Descriptions</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a> for more information about summary information properties.</para>
    </summary>
    <param name="hSummaryInfo">
      <para>Handle to summary information.</para>
    </param>
    <param name="uiProperty">
      <para>Specifies the property ID of the summary property. This parameter can be a property ID  listed in the <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.  This function does not return values for PID_DICTIONARY OR PID_THUMBNAIL property.</para>
    </param>
    <param name="puiDataType">
      <para>Receives the returned property type. This  parameter can be a type listed in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.</para>
    </param>
    <param name="piValue">
      <para>Receives the returned integer property data.</para>
    </param>
    <param name="pftValue">
      <para>Pointer to a file value.</para>
    </param>
    <param name="szValueBuf">
      <para>Pointer to the buffer that receives the null terminated summary information property value. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchValueBuf</i> contains the required buffer size in <b>TCHARs</b>, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchValueBuf</i> contains the number of <b>TCHARs</b> written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to the variable that specifies the size, in <b>TCHARs</b>, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchValueBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiSummaryInfoGetProperty</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>Windows Installer functions that return data in a user provided memory location should not be called with null as the value for the pointer. These functions return a string or return data as integer pointers, but return inconsistent values when passing null as the value for the output argument. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</a>.</para>
      <para>The property information returned by the <b>MsiSummaryInfoGetProperty</b> function is received by the <i>piValue</i>, <i>pftValue</i>, or  <i>szValueBuf</i> parameter depending upon the type of property value that has been specified in the <i>puiDataType</i> parameter.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSummaryInfoGetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Summary Information Property Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summaryinfo-summaryinfo">Summaryinfo.Property</seealso>
  </member>
  <member name="Windows.MsiSummaryInfoGetPropertyW">
    <summary>
      <para>The
<b>MsiSummaryInfoGetProperty</b> function gets a single property from the <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream">summary information stream</a>.</para>
      <para>
        <b>Note</b>  The meaning of the property value depends on whether the summary information stream is for an installation database (.msi file), transform (.mst file) or patch (.msp file). See <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-property-descriptions">Summary Property Descriptions</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a> for more information about summary information properties.</para>
    </summary>
    <param name="hSummaryInfo">
      <para>Handle to summary information.</para>
    </param>
    <param name="uiProperty">
      <para>Specifies the property ID of the summary property. This parameter can be a property ID  listed in the <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.  This function does not return values for PID_DICTIONARY OR PID_THUMBNAIL property.</para>
    </param>
    <param name="puiDataType">
      <para>Receives the returned property type. This  parameter can be a type listed in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.</para>
    </param>
    <param name="piValue">
      <para>Receives the returned integer property data.</para>
    </param>
    <param name="pftValue">
      <para>Pointer to a file value.</para>
    </param>
    <param name="szValueBuf">
      <para>Pointer to the buffer that receives the null terminated summary information property value. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchValueBuf</i> contains the required buffer size in <b>TCHARs</b>, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchValueBuf</i> contains the number of <b>TCHARs</b> written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to the variable that specifies the size, in <b>TCHARs</b>, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchValueBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiSummaryInfoGetProperty</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>Windows Installer functions that return data in a user provided memory location should not be called with null as the value for the pointer. These functions return a string or return data as integer pointers, but return inconsistent values when passing null as the value for the output argument. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</a>.</para>
      <para>The property information returned by the <b>MsiSummaryInfoGetProperty</b> function is received by the <i>piValue</i>, <i>pftValue</i>, or  <i>szValueBuf</i> parameter depending upon the type of property value that has been specified in the <i>puiDataType</i> parameter.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSummaryInfoGetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Summary Information Property Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summaryinfo-summaryinfo">Summaryinfo.Property</seealso>
  </member>
  <member name="Windows.MsiSummaryInfoGetPropertyCount">
    <summary>
      <para>The
<b>MsiSummaryInfoGetPropertyCount</b> function returns the number of existing properties in the summary information stream.</para>
    </summary>
    <param name="hSummaryInfo">
      <para>Handle to summary information.</para>
    </param>
    <param name="puiPropertyCount">
      <para>Location to receive the total property count.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Summary Information Property Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
  </member>
  <member name="Windows.MsiSummaryInfoGetProperty">
    <summary>
      <para>The
<b>MsiSummaryInfoGetProperty</b> function gets a single property from the <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream">summary information stream</a>.</para>
      <para>
        <b>Note</b>  The meaning of the property value depends on whether the summary information stream is for an installation database (.msi file), transform (.mst file) or patch (.msp file). See <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-property-descriptions">Summary Property Descriptions</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a> for more information about summary information properties.</para>
    </summary>
    <param name="hSummaryInfo">
      <para>Handle to summary information.</para>
    </param>
    <param name="uiProperty">
      <para>Specifies the property ID of the summary property. This parameter can be a property ID  listed in the <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.  This function does not return values for PID_DICTIONARY OR PID_THUMBNAIL property.</para>
    </param>
    <param name="puiDataType">
      <para>Receives the returned property type. This  parameter can be a type listed in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.</para>
    </param>
    <param name="piValue">
      <para>Receives the returned integer property data.</para>
    </param>
    <param name="pftValue">
      <para>Pointer to a file value.</para>
    </param>
    <param name="szValueBuf">
      <para>Pointer to the buffer that receives the null terminated summary information property value. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchValueBuf</i> contains the required buffer size in <b>TCHARs</b>, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchValueBuf</i> contains the number of <b>TCHARs</b> written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to the variable that specifies the size, in <b>TCHARs</b>, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchValueBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiSummaryInfoGetProperty</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>Windows Installer functions that return data in a user provided memory location should not be called with null as the value for the pointer. These functions return a string or return data as integer pointers, but return inconsistent values when passing null as the value for the output argument. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</a>.</para>
      <para>The property information returned by the <b>MsiSummaryInfoGetProperty</b> function is received by the <i>piValue</i>, <i>pftValue</i>, or  <i>szValueBuf</i> parameter depending upon the type of property value that has been specified in the <i>puiDataType</i> parameter.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSummaryInfoGetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Summary Information Property Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summaryinfo-summaryinfo">Summaryinfo.Property</seealso>
  </member>
  <member name="Windows.MsiSummaryInfoGetPropertyA">
    <summary>
      <para>The
<b>MsiSummaryInfoGetProperty</b> function gets a single property from the <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream">summary information stream</a>.</para>
      <para>
        <b>Note</b>  The meaning of the property value depends on whether the summary information stream is for an installation database (.msi file), transform (.mst file) or patch (.msp file). See <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-property-descriptions">Summary Property Descriptions</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a> for more information about summary information properties.</para>
    </summary>
    <param name="hSummaryInfo">
      <para>Handle to summary information.</para>
    </param>
    <param name="uiProperty">
      <para>Specifies the property ID of the summary property. This parameter can be a property ID  listed in the <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.  This function does not return values for PID_DICTIONARY OR PID_THUMBNAIL property.</para>
    </param>
    <param name="puiDataType">
      <para>Receives the returned property type. This  parameter can be a type listed in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.</para>
    </param>
    <param name="piValue">
      <para>Receives the returned integer property data.</para>
    </param>
    <param name="pftValue">
      <para>Pointer to a file value.</para>
    </param>
    <param name="szValueBuf">
      <para>Pointer to the buffer that receives the null terminated summary information property value. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchValueBuf</i> contains the required buffer size in <b>TCHARs</b>, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchValueBuf</i> contains the number of <b>TCHARs</b> written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to the variable that specifies the size, in <b>TCHARs</b>, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchValueBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiSummaryInfoGetProperty</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>Windows Installer functions that return data in a user provided memory location should not be called with null as the value for the pointer. These functions return a string or return data as integer pointers, but return inconsistent values when passing null as the value for the output argument. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</a>.</para>
      <para>The property information returned by the <b>MsiSummaryInfoGetProperty</b> function is received by the <i>piValue</i>, <i>pftValue</i>, or  <i>szValueBuf</i> parameter depending upon the type of property value that has been specified in the <i>puiDataType</i> parameter.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSummaryInfoGetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Summary Information Property Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summaryinfo-summaryinfo">Summaryinfo.Property</seealso>
  </member>
  <member name="Windows.MsiSummaryInfoGetPropertyW">
    <summary>
      <para>The
<b>MsiSummaryInfoGetProperty</b> function gets a single property from the <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream">summary information stream</a>.</para>
      <para>
        <b>Note</b>  The meaning of the property value depends on whether the summary information stream is for an installation database (.msi file), transform (.mst file) or patch (.msp file). See <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-property-descriptions">Summary Property Descriptions</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a> for more information about summary information properties.</para>
    </summary>
    <param name="hSummaryInfo">
      <para>Handle to summary information.</para>
    </param>
    <param name="uiProperty">
      <para>Specifies the property ID of the summary property. This parameter can be a property ID  listed in the <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.  This function does not return values for PID_DICTIONARY OR PID_THUMBNAIL property.</para>
    </param>
    <param name="puiDataType">
      <para>Receives the returned property type. This  parameter can be a type listed in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.</para>
    </param>
    <param name="piValue">
      <para>Receives the returned integer property data.</para>
    </param>
    <param name="pftValue">
      <para>Pointer to a file value.</para>
    </param>
    <param name="szValueBuf">
      <para>Pointer to the buffer that receives the null terminated summary information property value. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szValueBuf</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns ERROR_MORE_DATA and <i>pcchValueBuf</i> contains the required buffer size in <b>TCHARs</b>, not including the terminating null character. On return of ERROR_SUCCESS, <i>pcchValueBuf</i> contains the number of <b>TCHARs</b> written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.</para>
    </param>
    <param name="pcchValueBuf">
      <para>Pointer to the variable that specifies the size, in <b>TCHARs</b>, of the buffer pointed to by the variable <i>szValueBuf</i>. When the function returns ERROR_SUCCESS, this variable contains the size of the data copied to <i>szValueBuf</i>, not including the terminating null character. If <i>szValueBuf</i> is not large enough, the function returns ERROR_MORE_DATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchValueBuf</i>.</para>
    </param>
    <returns>
      <para>The
<b>MsiSummaryInfoGetProperty</b> function returns one of the following values:</para>
    </returns>
    <remarks>
      <para>If ERROR_MORE_DATA is returned, the parameter which is a pointer gives the size of the buffer required to hold the string. If ERROR_SUCCESS is returned, it gives the number of characters written to the string buffer. Therefore you can get the size of the buffer by passing in an empty string (for example "") for the parameter that specifies the buffer. Do not attempt to determine the size of the buffer by passing in a Null (value=0).</para>
      <para>Windows Installer functions that return data in a user provided memory location should not be called with null as the value for the pointer. These functions return a string or return data as integer pointers, but return inconsistent values when passing null as the value for the output argument. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</a>.</para>
      <para>The property information returned by the <b>MsiSummaryInfoGetProperty</b> function is received by the <i>piValue</i>, <i>pftValue</i>, or  <i>szValueBuf</i> parameter depending upon the type of property value that has been specified in the <i>puiDataType</i> parameter.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSummaryInfoGetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Summary Information Property Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summaryinfo-summaryinfo">Summaryinfo.Property</seealso>
  </member>
  <member name="Windows.MsiSummaryInfoPersist">
    <summary>
      <para>The
<b>MsiSummaryInfoPersist</b> function writes changed summary information back to the summary information stream.</para>
    </summary>
    <param name="hSummaryInfo">
      <para>Handle to summary information.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Summary Information Property Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
  </member>
  <member name="Windows.MsiSummaryInfoSetProperty">
    <summary>
      <para>The
<b>MsiSummaryInfoSetProperty</b> function sets a single summary information property.</para>
      <para>
        <b>Note</b>  The meaning of the property value depends on whether the summary information stream is for an installation database (.msi file), transform (.mst file) or patch (.msp file). See <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-property-descriptions">Summary Property Descriptions</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a> for more information about summary information properties.</para>
    </summary>
    <param name="hSummaryInfo">
      <para>Handle to summary information.</para>
    </param>
    <param name="uiProperty">
      <para>Specifies the property ID of the summary property being set. This parameter can be a property ID  listed in the <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.  This function does not set values for PID_DICTIONARY OR PID_THUMBNAIL property.</para>
    </param>
    <param name="uiDataType">
      <para>Specifies the type of property to set. This parameter can be a type listed in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.</para>
    </param>
    <param name="iValue">
      <para>Specifies the integer value.</para>
    </param>
    <param name="pftValue">
      <para>Specifies the file-time value.</para>
    </param>
    <param name="szValue">
      <para>Specifies the text value.</para>
    </param>
    <returns>
      <para>The
<b>MsiSummaryInfoSetProperty</b> function returns the following values:</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSummaryInfoSetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Summary Information Property Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summaryinfo-summaryinfo">Summaryinfo.Property</seealso>
  </member>
  <member name="Windows.MsiSummaryInfoSetPropertyA">
    <summary>
      <para>The
<b>MsiSummaryInfoSetProperty</b> function sets a single summary information property.</para>
      <para>
        <b>Note</b>  The meaning of the property value depends on whether the summary information stream is for an installation database (.msi file), transform (.mst file) or patch (.msp file). See <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-property-descriptions">Summary Property Descriptions</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a> for more information about summary information properties.</para>
    </summary>
    <param name="hSummaryInfo">
      <para>Handle to summary information.</para>
    </param>
    <param name="uiProperty">
      <para>Specifies the property ID of the summary property being set. This parameter can be a property ID  listed in the <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.  This function does not set values for PID_DICTIONARY OR PID_THUMBNAIL property.</para>
    </param>
    <param name="uiDataType">
      <para>Specifies the type of property to set. This parameter can be a type listed in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.</para>
    </param>
    <param name="iValue">
      <para>Specifies the integer value.</para>
    </param>
    <param name="pftValue">
      <para>Specifies the file-time value.</para>
    </param>
    <param name="szValue">
      <para>Specifies the text value.</para>
    </param>
    <returns>
      <para>The
<b>MsiSummaryInfoSetProperty</b> function returns the following values:</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSummaryInfoSetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Summary Information Property Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summaryinfo-summaryinfo">Summaryinfo.Property</seealso>
  </member>
  <member name="Windows.MsiSummaryInfoSetPropertyW">
    <summary>
      <para>The
<b>MsiSummaryInfoSetProperty</b> function sets a single summary information property.</para>
      <para>
        <b>Note</b>  The meaning of the property value depends on whether the summary information stream is for an installation database (.msi file), transform (.mst file) or patch (.msp file). See <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-property-descriptions">Summary Property Descriptions</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a> for more information about summary information properties.</para>
    </summary>
    <param name="hSummaryInfo">
      <para>Handle to summary information.</para>
    </param>
    <param name="uiProperty">
      <para>Specifies the property ID of the summary property being set. This parameter can be a property ID  listed in the <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.  This function does not set values for PID_DICTIONARY OR PID_THUMBNAIL property.</para>
    </param>
    <param name="uiDataType">
      <para>Specifies the type of property to set. This parameter can be a type listed in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.</para>
    </param>
    <param name="iValue">
      <para>Specifies the integer value.</para>
    </param>
    <param name="pftValue">
      <para>Specifies the file-time value.</para>
    </param>
    <param name="szValue">
      <para>Specifies the text value.</para>
    </param>
    <returns>
      <para>The
<b>MsiSummaryInfoSetProperty</b> function returns the following values:</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSummaryInfoSetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Summary Information Property Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summaryinfo-summaryinfo">Summaryinfo.Property</seealso>
  </member>
  <member name="Windows.MsiSummaryInfoSetProperty">
    <summary>
      <para>The
<b>MsiSummaryInfoSetProperty</b> function sets a single summary information property.</para>
      <para>
        <b>Note</b>  The meaning of the property value depends on whether the summary information stream is for an installation database (.msi file), transform (.mst file) or patch (.msp file). See <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-property-descriptions">Summary Property Descriptions</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a> for more information about summary information properties.</para>
    </summary>
    <param name="hSummaryInfo">
      <para>Handle to summary information.</para>
    </param>
    <param name="uiProperty">
      <para>Specifies the property ID of the summary property being set. This parameter can be a property ID  listed in the <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.  This function does not set values for PID_DICTIONARY OR PID_THUMBNAIL property.</para>
    </param>
    <param name="uiDataType">
      <para>Specifies the type of property to set. This parameter can be a type listed in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.</para>
    </param>
    <param name="iValue">
      <para>Specifies the integer value.</para>
    </param>
    <param name="pftValue">
      <para>Specifies the file-time value.</para>
    </param>
    <param name="szValue">
      <para>Specifies the text value.</para>
    </param>
    <returns>
      <para>The
<b>MsiSummaryInfoSetProperty</b> function returns the following values:</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSummaryInfoSetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Summary Information Property Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summaryinfo-summaryinfo">Summaryinfo.Property</seealso>
  </member>
  <member name="Windows.MsiSummaryInfoSetPropertyA">
    <summary>
      <para>The
<b>MsiSummaryInfoSetProperty</b> function sets a single summary information property.</para>
      <para>
        <b>Note</b>  The meaning of the property value depends on whether the summary information stream is for an installation database (.msi file), transform (.mst file) or patch (.msp file). See <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-property-descriptions">Summary Property Descriptions</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a> for more information about summary information properties.</para>
    </summary>
    <param name="hSummaryInfo">
      <para>Handle to summary information.</para>
    </param>
    <param name="uiProperty">
      <para>Specifies the property ID of the summary property being set. This parameter can be a property ID  listed in the <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.  This function does not set values for PID_DICTIONARY OR PID_THUMBNAIL property.</para>
    </param>
    <param name="uiDataType">
      <para>Specifies the type of property to set. This parameter can be a type listed in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.</para>
    </param>
    <param name="iValue">
      <para>Specifies the integer value.</para>
    </param>
    <param name="pftValue">
      <para>Specifies the file-time value.</para>
    </param>
    <param name="szValue">
      <para>Specifies the text value.</para>
    </param>
    <returns>
      <para>The
<b>MsiSummaryInfoSetProperty</b> function returns the following values:</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSummaryInfoSetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Summary Information Property Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summaryinfo-summaryinfo">Summaryinfo.Property</seealso>
  </member>
  <member name="Windows.MsiSummaryInfoSetPropertyW">
    <summary>
      <para>The
<b>MsiSummaryInfoSetProperty</b> function sets a single summary information property.</para>
      <para>
        <b>Note</b>  The meaning of the property value depends on whether the summary information stream is for an installation database (.msi file), transform (.mst file) or patch (.msp file). See <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-property-descriptions">Summary Property Descriptions</a> and <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a> for more information about summary information properties.</para>
    </summary>
    <param name="hSummaryInfo">
      <para>Handle to summary information.</para>
    </param>
    <param name="uiProperty">
      <para>Specifies the property ID of the summary property being set. This parameter can be a property ID  listed in the <a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.  This function does not set values for PID_DICTIONARY OR PID_THUMBNAIL property.</para>
    </param>
    <param name="uiDataType">
      <para>Specifies the type of property to set. This parameter can be a type listed in the
<a href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</a>.</para>
    </param>
    <param name="iValue">
      <para>Specifies the integer value.</para>
    </param>
    <param name="pftValue">
      <para>Specifies the file-time value.</para>
    </param>
    <param name="szValue">
      <para>Specifies the text value.</para>
    </param>
    <returns>
      <para>The
<b>MsiSummaryInfoSetProperty</b> function returns the following values:</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiSummaryInfoSetProperty as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Summary Information Property Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summary-information-stream-property-set">Summary Information Stream Property Set</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/summaryinfo-summaryinfo">Summaryinfo.Property</seealso>
  </member>
  <member name="Windows.MsiVerifyDiskSpace">
    <summary>
      <para>The
<b>MsiVerifyDiskSpace</b> function checks to see if sufficient disk space is present for the current installation.</para>
    </summary>
    <param name="hInstall">
      <para>Handle to the installation provided to a DLL custom action or obtained through <see cref="MsiOpenPackage" />, <see cref="MsiOpenPackageEx" />, or <see cref="MsiOpenProduct" />.</para>
    </param>
    <returns>
      <para>This function returns UINT.</para>
    </returns>
    <remarks>
      <para>See
<a href="https://docs.microsoft.com//windows/desktop/Msi/calling-database-functions-from-programs">Calling Database Functions From Programs</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">Installer Selection Functions</seealso>
  </member>
  <member name="Windows.MsiViewClose">
    <summary>
      <para>The
<b>MsiViewClose</b> function releases the result set for an executed view.</para>
    </summary>
    <param name="hView">
      <para>Handle to a view that is set to release.</para>
    </param>
    <returns>
      <para>Note that in low memory situations, this function can raise a STATUS_NO_MEMORY exception.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiViewClose</b> function must be called before the
<see cref="MsiViewExecute" /> function is called again on the view, unless all rows of the result set have been obtained with the
<see cref="MsiViewFetch" /> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiViewExecute">
    <summary>
      <para>The
<b>MsiViewExecute</b> function executes a SQL view query and supplies any required parameters. The query uses the question mark token to represent parameters as described in
<a href="https://docs.microsoft.com//windows/desktop/Msi/sql-syntax">SQL Syntax</a>. The values of these parameters are passed in as the corresponding fields of a parameter record.</para>
    </summary>
    <param name="hView">
      <para>Handle to the view upon which to execute the query.</para>
    </param>
    <param name="hRecord">
      <para>Handle to a record that supplies the parameters. This parameter contains values to replace the parameter tokens in the SQL query. It is optional, so <i>hRecord</i> can be zero. For a reference on syntax, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/sql-syntax">SQL Syntax</a>.</para>
    </param>
    <returns>
      <para>Note that in low memory situations, this function can raise a STATUS_NO_MEMORY exception.</para>
    </returns>
    <remarks>
      <para>The
<b>MsiViewExecute</b> function must be called before any calls to
<see cref="MsiViewFetch" />.</para>
      <para>If the SQL query specifies values with parameter markers (?), a record must be supplied that contains all of the replacement values in the exact order and of compatible data types. When used with INSERT and UPDATE queries all the parameterized values must precede all nonparameterized values.</para>
      <para>For example, these queries are valid.</para>
      <para>UPDATE {table-list} SET {column}= ? , {column}= {constant}</para>
      <para>INSERT INTO {table} ({column-list}) VALUES (?, {constant-list})</para>
      <para>However these queries are invalid.</para>
      <para>UPDATE {table-list} SET {column}= {constant}, {column}=?</para>
      <para>INSERT INTO {table} ({column-list}) VALUES ({constant-list}, ? )</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
  <member name="Windows.MsiViewFetch">
    <summary>
      <para>The
<b>MsiViewFetch</b> function fetches the next sequential record from the view. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hView">
      <para>Handle to the view to fetch from.</para>
    </param>
    <param name="phRecord">
      <para>Pointer to the handle for the fetched record.</para>
    </param>
    <returns>
      <para>Note that in low memory situations, this function can raise a STATUS_NO_MEMORY exception.</para>
    </returns>
    <remarks>
      <para>If the
<b>MsiViewFetch</b> function returns ERROR_FUNCTION_FAILED, it is possible that the
<see cref="MsiViewExecute" /> function was not called first. If more rows are available in the result set,
<b>MsiViewFetch</b> returns <i>phRecord</i> as a handle to a record containing the requested column data, or <i>phRecord</i> is 0. For maximum performance, the same record should be used for all retrievals, or the record should be released by going out of scope.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/working-with-queries">Working with Queries</seealso>
  </member>
  <member name="Windows.MsiViewGetColumnInfo">
    <summary>
      <para>The
<b>MsiViewGetColumnInfo</b> function returns a record containing column names or definitions. This function returns a handle that should be closed using
<see cref="MsiCloseHandle" />.</para>
    </summary>
    <param name="hView">
      <para>Handle to the view from which to obtain column information.</para>
    </param>
    <param name="eColumnInfo">
      <para>Specifies a flag indicating what type of information is needed. This parameter must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>MSICOLINFO_NAMES</b>
          </description>
          <description>
            <para>Column names are returned.</para>
          </description>
        </item>
        <item>
          <description>
            <b>MSICOLINFO_TYPES</b>
          </description>
          <description>
            <para>Definitions are returned.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phRecord">
      <para>Pointer to a handle to receive the column information data record.</para>
    </param>
    <returns>
      <para>Note that in low memory situations, this function can raise a STATUS_NO_MEMORY exception.</para>
    </returns>
    <remarks>
      <para>The column description returned by
<b>MsiViewGetColumnInfo</b> is in the format described in the section:
<a href="https://docs.microsoft.com//windows/desktop/Msi/column-definition-format">Column Definition Format</a>. Each column is described by a string in the corresponding record field. The definition string consists of a single letter representing the data type followed by the width of the column (in characters when applicable, bytes otherwise). A width of zero designates an unbounded width (for example, long text fields and streams). An uppercase letter indicates that null values are allowed in the column.</para>
      <para>Note that it is recommended to use variables of type PMSIHANDLE because the installer closes PMSIHANDLE objects as they go out of scope, whereas you must close MSIHANDLE objects by calling
<see cref="MsiCloseHandle" />. For more information see <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Use PMSIHANDLE instead of HANDLE</a> section in the <a href="https://docs.microsoft.com//windows/desktop/Msi/windows-installer-best-practices">Windows Installer Best Practices</a>.</para>
    </remarks>
  </member>
  <member name="Windows.MsiViewGetError">
    <summary>
      <para>The
<b>MsiViewGetError</b> function returns the error that occurred in the
<see cref="MsiViewModify" /> function.</para>
    </summary>
    <param name="hView">
      <para>Handle to the view.</para>
    </param>
    <param name="szColumnNameBuffer">
      <para>Pointer to the buffer that receives the null-terminated column name. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szColumnName</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns MSIDBERROR_MOREDATA and <i>pcchBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of MSIDBERROR_NOERROR, <i>pcchBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.</para>
    </param>
    <param name="pcchBuf">
      <para>Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szColumnNameBuffer</i>. When the function returns MSIDBERROR_NOERROR, this variable contains the size of the data copied to <i>szColumnNameBuffer</i>, not including the terminating null character. If <i>szColumnNameBuffer</i> is not large enough, the function returns MSIDBERROR_MOREDATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchBuf</i>.</para>
    </param>
    <returns>
      <para>This function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Error code</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>An argument was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_MOREDATA</b>
            </para>
          </description>
          <description>
            <para>The buffer was too small to receive data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_FUNCTIONERROR</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_NOERROR</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully with no errors.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_DUPLICATEKEY</b>
            </para>
          </description>
          <description>
            <para>The new record duplicates primary keys of the existing record in a table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_REQUIRED</b>
            </para>
          </description>
          <description>
            <para>There are no null values allowed; or the column is about to be deleted, but is referenced by another row.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADLINK</b>
            </para>
          </description>
          <description>
            <para>The corresponding record in a foreign table was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_OVERFLOW</b>
            </para>
          </description>
          <description>
            <para>The data is greater than the maximum value allowed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_UNDERFLOW</b>
            </para>
          </description>
          <description>
            <para>The data is less than the minimum value allowed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_NOTINSET</b>
            </para>
          </description>
          <description>
            <para>The data is not a member of the values permitted in the set.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADVERSION</b>
            </para>
          </description>
          <description>
            <para>An invalid version string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCASE</b>
            </para>
          </description>
          <description>
            <para>The case was invalid. The case must be all uppercase or all lowercase.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADGUID</b>
            </para>
          </description>
          <description>
            <para>An invalid GUID was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADWILDCARD</b>
            </para>
          </description>
          <description>
            <para>An invalid wildcard file name was supplied, or the use of wildcards was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADIDENTIFIER</b>
            </para>
          </description>
          <description>
            <para>An invalid identifier was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADLANGUAGE</b>
            </para>
          </description>
          <description>
            <para>Invalid language IDs were supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADFILENAME</b>
            </para>
          </description>
          <description>
            <para>An invalid file name was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADPATH</b>
            </para>
          </description>
          <description>
            <para>An invalid path was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCONDITION</b>
            </para>
          </description>
          <description>
            <para>An invalid conditional statement was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADFORMATTED</b>
            </para>
          </description>
          <description>
            <para>An invalid format string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADTEMPLATE</b>
            </para>
          </description>
          <description>
            <para>An invalid template string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADDEFAULTDIR</b>
            </para>
          </description>
          <description>
            <para>An invalid string was supplied in the DefaultDir column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory</a> table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADREGPATH</b>
            </para>
          </description>
          <description>
            <para>An invalid registry path string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCUSTOMSOURCE</b>
            </para>
          </description>
          <description>
            <para>An invalid string was supplied in the CustomSource column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/customaction-table">CustomAction</a> table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADPROPERTY</b>
            </para>
          </description>
          <description>
            <para>An invalid property string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_MISSINGDATA</b>
            </para>
          </description>
          <description>
            <para>The
<a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table is missing a reference to a column.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCATEGORY</b>
            </para>
          </description>
          <description>
            <para>The category column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table for the column is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCABINET</b>
            </para>
          </description>
          <description>
            <para>An invalid cabinet name was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADKEYTABLE</b>
            </para>
          </description>
          <description>
            <para>The table in the Keytable column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table was not found or loaded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADMAXMINVALUES</b>
            </para>
          </description>
          <description>
            <para>The value in the MaxValue column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table is less than the value in the MinValue column.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADSHORTCUT</b>
            </para>
          </description>
          <description>
            <para>An invalid shortcut target name was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_STRINGOVERFLOW</b>
            </para>
          </description>
          <description>
            <para>The string is too long for the length specified by the column definition.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADLOCALIZEATTRIB</b>
            </para>
          </description>
          <description>
            <para>An invalid localization attribute was supplied. (Primary keys cannot be localized.)</para>
          </description>
        </item>
      </list>
      <para>Note that in low memory situations, this function can raise a STATUS_NO_MEMORY exception.</para>
    </returns>
    <remarks>
      <para>You should only call the
<b>MsiViewGetError</b> function when
<see cref="MsiViewModify" /> returns ERROR_INVALID_DATA, indicating that the data is invalid. Errors are only recorded for MSIMODIFY_VALIDATE, MSIMODIFY_VALIDATE_NEW, and MSIMODIFY_VALIDATEFIELD.</para>
      <para>If ERROR_MORE_DATA is returned, the parameter that  is a pointer gives the size of the buffer required to hold the string. Upon success, it gives the number of characters written to the string buffer. Therefore you can get the required size of the buffer by passing a small buffer (one character minimum) and examining the value at <i>pcchPathBuf</i> when the function returns MSIDBERROR_MOREDATA. Do not attempt to determine the size of the buffer by passing in null as <i>szColumnNameBuffer</i> or a buffer size of 0 in the <b>DWORD</b> referenced by <i>pcchBuf</i>.</para>
      <para>Once MSIDBERROR_NOERROR is returned, no more validation errors remain. The MSIDBERROR return value indicates the type of validation error that occurred for the value located in the column identified by the <i>szColumnNameBuffer</i>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiViewGetError as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiViewGetErrorA">
    <summary>
      <para>The
<b>MsiViewGetError</b> function returns the error that occurred in the
<see cref="MsiViewModify" /> function.</para>
    </summary>
    <param name="hView">
      <para>Handle to the view.</para>
    </param>
    <param name="szColumnNameBuffer">
      <para>Pointer to the buffer that receives the null-terminated column name. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szColumnName</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns MSIDBERROR_MOREDATA and <i>pcchBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of MSIDBERROR_NOERROR, <i>pcchBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.</para>
    </param>
    <param name="pcchBuf">
      <para>Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szColumnNameBuffer</i>. When the function returns MSIDBERROR_NOERROR, this variable contains the size of the data copied to <i>szColumnNameBuffer</i>, not including the terminating null character. If <i>szColumnNameBuffer</i> is not large enough, the function returns MSIDBERROR_MOREDATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchBuf</i>.</para>
    </param>
    <returns>
      <para>This function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Error code</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>An argument was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_MOREDATA</b>
            </para>
          </description>
          <description>
            <para>The buffer was too small to receive data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_FUNCTIONERROR</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_NOERROR</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully with no errors.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_DUPLICATEKEY</b>
            </para>
          </description>
          <description>
            <para>The new record duplicates primary keys of the existing record in a table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_REQUIRED</b>
            </para>
          </description>
          <description>
            <para>There are no null values allowed; or the column is about to be deleted, but is referenced by another row.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADLINK</b>
            </para>
          </description>
          <description>
            <para>The corresponding record in a foreign table was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_OVERFLOW</b>
            </para>
          </description>
          <description>
            <para>The data is greater than the maximum value allowed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_UNDERFLOW</b>
            </para>
          </description>
          <description>
            <para>The data is less than the minimum value allowed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_NOTINSET</b>
            </para>
          </description>
          <description>
            <para>The data is not a member of the values permitted in the set.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADVERSION</b>
            </para>
          </description>
          <description>
            <para>An invalid version string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCASE</b>
            </para>
          </description>
          <description>
            <para>The case was invalid. The case must be all uppercase or all lowercase.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADGUID</b>
            </para>
          </description>
          <description>
            <para>An invalid GUID was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADWILDCARD</b>
            </para>
          </description>
          <description>
            <para>An invalid wildcard file name was supplied, or the use of wildcards was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADIDENTIFIER</b>
            </para>
          </description>
          <description>
            <para>An invalid identifier was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADLANGUAGE</b>
            </para>
          </description>
          <description>
            <para>Invalid language IDs were supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADFILENAME</b>
            </para>
          </description>
          <description>
            <para>An invalid file name was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADPATH</b>
            </para>
          </description>
          <description>
            <para>An invalid path was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCONDITION</b>
            </para>
          </description>
          <description>
            <para>An invalid conditional statement was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADFORMATTED</b>
            </para>
          </description>
          <description>
            <para>An invalid format string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADTEMPLATE</b>
            </para>
          </description>
          <description>
            <para>An invalid template string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADDEFAULTDIR</b>
            </para>
          </description>
          <description>
            <para>An invalid string was supplied in the DefaultDir column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory</a> table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADREGPATH</b>
            </para>
          </description>
          <description>
            <para>An invalid registry path string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCUSTOMSOURCE</b>
            </para>
          </description>
          <description>
            <para>An invalid string was supplied in the CustomSource column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/customaction-table">CustomAction</a> table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADPROPERTY</b>
            </para>
          </description>
          <description>
            <para>An invalid property string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_MISSINGDATA</b>
            </para>
          </description>
          <description>
            <para>The
<a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table is missing a reference to a column.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCATEGORY</b>
            </para>
          </description>
          <description>
            <para>The category column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table for the column is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCABINET</b>
            </para>
          </description>
          <description>
            <para>An invalid cabinet name was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADKEYTABLE</b>
            </para>
          </description>
          <description>
            <para>The table in the Keytable column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table was not found or loaded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADMAXMINVALUES</b>
            </para>
          </description>
          <description>
            <para>The value in the MaxValue column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table is less than the value in the MinValue column.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADSHORTCUT</b>
            </para>
          </description>
          <description>
            <para>An invalid shortcut target name was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_STRINGOVERFLOW</b>
            </para>
          </description>
          <description>
            <para>The string is too long for the length specified by the column definition.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADLOCALIZEATTRIB</b>
            </para>
          </description>
          <description>
            <para>An invalid localization attribute was supplied. (Primary keys cannot be localized.)</para>
          </description>
        </item>
      </list>
      <para>Note that in low memory situations, this function can raise a STATUS_NO_MEMORY exception.</para>
    </returns>
    <remarks>
      <para>You should only call the
<b>MsiViewGetError</b> function when
<see cref="MsiViewModify" /> returns ERROR_INVALID_DATA, indicating that the data is invalid. Errors are only recorded for MSIMODIFY_VALIDATE, MSIMODIFY_VALIDATE_NEW, and MSIMODIFY_VALIDATEFIELD.</para>
      <para>If ERROR_MORE_DATA is returned, the parameter that  is a pointer gives the size of the buffer required to hold the string. Upon success, it gives the number of characters written to the string buffer. Therefore you can get the required size of the buffer by passing a small buffer (one character minimum) and examining the value at <i>pcchPathBuf</i> when the function returns MSIDBERROR_MOREDATA. Do not attempt to determine the size of the buffer by passing in null as <i>szColumnNameBuffer</i> or a buffer size of 0 in the <b>DWORD</b> referenced by <i>pcchBuf</i>.</para>
      <para>Once MSIDBERROR_NOERROR is returned, no more validation errors remain. The MSIDBERROR return value indicates the type of validation error that occurred for the value located in the column identified by the <i>szColumnNameBuffer</i>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiViewGetError as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiViewGetErrorW">
    <summary>
      <para>The
<b>MsiViewGetError</b> function returns the error that occurred in the
<see cref="MsiViewModify" /> function.</para>
    </summary>
    <param name="hView">
      <para>Handle to the view.</para>
    </param>
    <param name="szColumnNameBuffer">
      <para>Pointer to the buffer that receives the null-terminated column name. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szColumnName</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns MSIDBERROR_MOREDATA and <i>pcchBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of MSIDBERROR_NOERROR, <i>pcchBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.</para>
    </param>
    <param name="pcchBuf">
      <para>Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szColumnNameBuffer</i>. When the function returns MSIDBERROR_NOERROR, this variable contains the size of the data copied to <i>szColumnNameBuffer</i>, not including the terminating null character. If <i>szColumnNameBuffer</i> is not large enough, the function returns MSIDBERROR_MOREDATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchBuf</i>.</para>
    </param>
    <returns>
      <para>This function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Error code</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>An argument was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_MOREDATA</b>
            </para>
          </description>
          <description>
            <para>The buffer was too small to receive data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_FUNCTIONERROR</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_NOERROR</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully with no errors.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_DUPLICATEKEY</b>
            </para>
          </description>
          <description>
            <para>The new record duplicates primary keys of the existing record in a table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_REQUIRED</b>
            </para>
          </description>
          <description>
            <para>There are no null values allowed; or the column is about to be deleted, but is referenced by another row.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADLINK</b>
            </para>
          </description>
          <description>
            <para>The corresponding record in a foreign table was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_OVERFLOW</b>
            </para>
          </description>
          <description>
            <para>The data is greater than the maximum value allowed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_UNDERFLOW</b>
            </para>
          </description>
          <description>
            <para>The data is less than the minimum value allowed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_NOTINSET</b>
            </para>
          </description>
          <description>
            <para>The data is not a member of the values permitted in the set.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADVERSION</b>
            </para>
          </description>
          <description>
            <para>An invalid version string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCASE</b>
            </para>
          </description>
          <description>
            <para>The case was invalid. The case must be all uppercase or all lowercase.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADGUID</b>
            </para>
          </description>
          <description>
            <para>An invalid GUID was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADWILDCARD</b>
            </para>
          </description>
          <description>
            <para>An invalid wildcard file name was supplied, or the use of wildcards was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADIDENTIFIER</b>
            </para>
          </description>
          <description>
            <para>An invalid identifier was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADLANGUAGE</b>
            </para>
          </description>
          <description>
            <para>Invalid language IDs were supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADFILENAME</b>
            </para>
          </description>
          <description>
            <para>An invalid file name was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADPATH</b>
            </para>
          </description>
          <description>
            <para>An invalid path was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCONDITION</b>
            </para>
          </description>
          <description>
            <para>An invalid conditional statement was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADFORMATTED</b>
            </para>
          </description>
          <description>
            <para>An invalid format string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADTEMPLATE</b>
            </para>
          </description>
          <description>
            <para>An invalid template string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADDEFAULTDIR</b>
            </para>
          </description>
          <description>
            <para>An invalid string was supplied in the DefaultDir column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory</a> table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADREGPATH</b>
            </para>
          </description>
          <description>
            <para>An invalid registry path string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCUSTOMSOURCE</b>
            </para>
          </description>
          <description>
            <para>An invalid string was supplied in the CustomSource column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/customaction-table">CustomAction</a> table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADPROPERTY</b>
            </para>
          </description>
          <description>
            <para>An invalid property string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_MISSINGDATA</b>
            </para>
          </description>
          <description>
            <para>The
<a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table is missing a reference to a column.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCATEGORY</b>
            </para>
          </description>
          <description>
            <para>The category column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table for the column is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCABINET</b>
            </para>
          </description>
          <description>
            <para>An invalid cabinet name was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADKEYTABLE</b>
            </para>
          </description>
          <description>
            <para>The table in the Keytable column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table was not found or loaded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADMAXMINVALUES</b>
            </para>
          </description>
          <description>
            <para>The value in the MaxValue column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table is less than the value in the MinValue column.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADSHORTCUT</b>
            </para>
          </description>
          <description>
            <para>An invalid shortcut target name was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_STRINGOVERFLOW</b>
            </para>
          </description>
          <description>
            <para>The string is too long for the length specified by the column definition.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADLOCALIZEATTRIB</b>
            </para>
          </description>
          <description>
            <para>An invalid localization attribute was supplied. (Primary keys cannot be localized.)</para>
          </description>
        </item>
      </list>
      <para>Note that in low memory situations, this function can raise a STATUS_NO_MEMORY exception.</para>
    </returns>
    <remarks>
      <para>You should only call the
<b>MsiViewGetError</b> function when
<see cref="MsiViewModify" /> returns ERROR_INVALID_DATA, indicating that the data is invalid. Errors are only recorded for MSIMODIFY_VALIDATE, MSIMODIFY_VALIDATE_NEW, and MSIMODIFY_VALIDATEFIELD.</para>
      <para>If ERROR_MORE_DATA is returned, the parameter that  is a pointer gives the size of the buffer required to hold the string. Upon success, it gives the number of characters written to the string buffer. Therefore you can get the required size of the buffer by passing a small buffer (one character minimum) and examining the value at <i>pcchPathBuf</i> when the function returns MSIDBERROR_MOREDATA. Do not attempt to determine the size of the buffer by passing in null as <i>szColumnNameBuffer</i> or a buffer size of 0 in the <b>DWORD</b> referenced by <i>pcchBuf</i>.</para>
      <para>Once MSIDBERROR_NOERROR is returned, no more validation errors remain. The MSIDBERROR return value indicates the type of validation error that occurred for the value located in the column identified by the <i>szColumnNameBuffer</i>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiViewGetError as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiViewGetError">
    <summary>
      <para>The
<b>MsiViewGetError</b> function returns the error that occurred in the
<see cref="MsiViewModify" /> function.</para>
    </summary>
    <param name="hView">
      <para>Handle to the view.</para>
    </param>
    <param name="szColumnNameBuffer">
      <para>Pointer to the buffer that receives the null-terminated column name. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szColumnName</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns MSIDBERROR_MOREDATA and <i>pcchBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of MSIDBERROR_NOERROR, <i>pcchBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.</para>
    </param>
    <param name="pcchBuf">
      <para>Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szColumnNameBuffer</i>. When the function returns MSIDBERROR_NOERROR, this variable contains the size of the data copied to <i>szColumnNameBuffer</i>, not including the terminating null character. If <i>szColumnNameBuffer</i> is not large enough, the function returns MSIDBERROR_MOREDATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchBuf</i>.</para>
    </param>
    <returns>
      <para>This function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Error code</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>An argument was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_MOREDATA</b>
            </para>
          </description>
          <description>
            <para>The buffer was too small to receive data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_FUNCTIONERROR</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_NOERROR</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully with no errors.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_DUPLICATEKEY</b>
            </para>
          </description>
          <description>
            <para>The new record duplicates primary keys of the existing record in a table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_REQUIRED</b>
            </para>
          </description>
          <description>
            <para>There are no null values allowed; or the column is about to be deleted, but is referenced by another row.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADLINK</b>
            </para>
          </description>
          <description>
            <para>The corresponding record in a foreign table was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_OVERFLOW</b>
            </para>
          </description>
          <description>
            <para>The data is greater than the maximum value allowed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_UNDERFLOW</b>
            </para>
          </description>
          <description>
            <para>The data is less than the minimum value allowed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_NOTINSET</b>
            </para>
          </description>
          <description>
            <para>The data is not a member of the values permitted in the set.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADVERSION</b>
            </para>
          </description>
          <description>
            <para>An invalid version string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCASE</b>
            </para>
          </description>
          <description>
            <para>The case was invalid. The case must be all uppercase or all lowercase.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADGUID</b>
            </para>
          </description>
          <description>
            <para>An invalid GUID was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADWILDCARD</b>
            </para>
          </description>
          <description>
            <para>An invalid wildcard file name was supplied, or the use of wildcards was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADIDENTIFIER</b>
            </para>
          </description>
          <description>
            <para>An invalid identifier was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADLANGUAGE</b>
            </para>
          </description>
          <description>
            <para>Invalid language IDs were supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADFILENAME</b>
            </para>
          </description>
          <description>
            <para>An invalid file name was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADPATH</b>
            </para>
          </description>
          <description>
            <para>An invalid path was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCONDITION</b>
            </para>
          </description>
          <description>
            <para>An invalid conditional statement was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADFORMATTED</b>
            </para>
          </description>
          <description>
            <para>An invalid format string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADTEMPLATE</b>
            </para>
          </description>
          <description>
            <para>An invalid template string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADDEFAULTDIR</b>
            </para>
          </description>
          <description>
            <para>An invalid string was supplied in the DefaultDir column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory</a> table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADREGPATH</b>
            </para>
          </description>
          <description>
            <para>An invalid registry path string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCUSTOMSOURCE</b>
            </para>
          </description>
          <description>
            <para>An invalid string was supplied in the CustomSource column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/customaction-table">CustomAction</a> table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADPROPERTY</b>
            </para>
          </description>
          <description>
            <para>An invalid property string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_MISSINGDATA</b>
            </para>
          </description>
          <description>
            <para>The
<a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table is missing a reference to a column.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCATEGORY</b>
            </para>
          </description>
          <description>
            <para>The category column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table for the column is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCABINET</b>
            </para>
          </description>
          <description>
            <para>An invalid cabinet name was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADKEYTABLE</b>
            </para>
          </description>
          <description>
            <para>The table in the Keytable column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table was not found or loaded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADMAXMINVALUES</b>
            </para>
          </description>
          <description>
            <para>The value in the MaxValue column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table is less than the value in the MinValue column.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADSHORTCUT</b>
            </para>
          </description>
          <description>
            <para>An invalid shortcut target name was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_STRINGOVERFLOW</b>
            </para>
          </description>
          <description>
            <para>The string is too long for the length specified by the column definition.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADLOCALIZEATTRIB</b>
            </para>
          </description>
          <description>
            <para>An invalid localization attribute was supplied. (Primary keys cannot be localized.)</para>
          </description>
        </item>
      </list>
      <para>Note that in low memory situations, this function can raise a STATUS_NO_MEMORY exception.</para>
    </returns>
    <remarks>
      <para>You should only call the
<b>MsiViewGetError</b> function when
<see cref="MsiViewModify" /> returns ERROR_INVALID_DATA, indicating that the data is invalid. Errors are only recorded for MSIMODIFY_VALIDATE, MSIMODIFY_VALIDATE_NEW, and MSIMODIFY_VALIDATEFIELD.</para>
      <para>If ERROR_MORE_DATA is returned, the parameter that  is a pointer gives the size of the buffer required to hold the string. Upon success, it gives the number of characters written to the string buffer. Therefore you can get the required size of the buffer by passing a small buffer (one character minimum) and examining the value at <i>pcchPathBuf</i> when the function returns MSIDBERROR_MOREDATA. Do not attempt to determine the size of the buffer by passing in null as <i>szColumnNameBuffer</i> or a buffer size of 0 in the <b>DWORD</b> referenced by <i>pcchBuf</i>.</para>
      <para>Once MSIDBERROR_NOERROR is returned, no more validation errors remain. The MSIDBERROR return value indicates the type of validation error that occurred for the value located in the column identified by the <i>szColumnNameBuffer</i>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiViewGetError as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiViewGetErrorA">
    <summary>
      <para>The
<b>MsiViewGetError</b> function returns the error that occurred in the
<see cref="MsiViewModify" /> function.</para>
    </summary>
    <param name="hView">
      <para>Handle to the view.</para>
    </param>
    <param name="szColumnNameBuffer">
      <para>Pointer to the buffer that receives the null-terminated column name. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szColumnName</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns MSIDBERROR_MOREDATA and <i>pcchBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of MSIDBERROR_NOERROR, <i>pcchBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.</para>
    </param>
    <param name="pcchBuf">
      <para>Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szColumnNameBuffer</i>. When the function returns MSIDBERROR_NOERROR, this variable contains the size of the data copied to <i>szColumnNameBuffer</i>, not including the terminating null character. If <i>szColumnNameBuffer</i> is not large enough, the function returns MSIDBERROR_MOREDATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchBuf</i>.</para>
    </param>
    <returns>
      <para>This function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Error code</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>An argument was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_MOREDATA</b>
            </para>
          </description>
          <description>
            <para>The buffer was too small to receive data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_FUNCTIONERROR</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_NOERROR</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully with no errors.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_DUPLICATEKEY</b>
            </para>
          </description>
          <description>
            <para>The new record duplicates primary keys of the existing record in a table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_REQUIRED</b>
            </para>
          </description>
          <description>
            <para>There are no null values allowed; or the column is about to be deleted, but is referenced by another row.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADLINK</b>
            </para>
          </description>
          <description>
            <para>The corresponding record in a foreign table was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_OVERFLOW</b>
            </para>
          </description>
          <description>
            <para>The data is greater than the maximum value allowed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_UNDERFLOW</b>
            </para>
          </description>
          <description>
            <para>The data is less than the minimum value allowed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_NOTINSET</b>
            </para>
          </description>
          <description>
            <para>The data is not a member of the values permitted in the set.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADVERSION</b>
            </para>
          </description>
          <description>
            <para>An invalid version string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCASE</b>
            </para>
          </description>
          <description>
            <para>The case was invalid. The case must be all uppercase or all lowercase.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADGUID</b>
            </para>
          </description>
          <description>
            <para>An invalid GUID was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADWILDCARD</b>
            </para>
          </description>
          <description>
            <para>An invalid wildcard file name was supplied, or the use of wildcards was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADIDENTIFIER</b>
            </para>
          </description>
          <description>
            <para>An invalid identifier was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADLANGUAGE</b>
            </para>
          </description>
          <description>
            <para>Invalid language IDs were supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADFILENAME</b>
            </para>
          </description>
          <description>
            <para>An invalid file name was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADPATH</b>
            </para>
          </description>
          <description>
            <para>An invalid path was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCONDITION</b>
            </para>
          </description>
          <description>
            <para>An invalid conditional statement was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADFORMATTED</b>
            </para>
          </description>
          <description>
            <para>An invalid format string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADTEMPLATE</b>
            </para>
          </description>
          <description>
            <para>An invalid template string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADDEFAULTDIR</b>
            </para>
          </description>
          <description>
            <para>An invalid string was supplied in the DefaultDir column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory</a> table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADREGPATH</b>
            </para>
          </description>
          <description>
            <para>An invalid registry path string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCUSTOMSOURCE</b>
            </para>
          </description>
          <description>
            <para>An invalid string was supplied in the CustomSource column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/customaction-table">CustomAction</a> table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADPROPERTY</b>
            </para>
          </description>
          <description>
            <para>An invalid property string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_MISSINGDATA</b>
            </para>
          </description>
          <description>
            <para>The
<a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table is missing a reference to a column.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCATEGORY</b>
            </para>
          </description>
          <description>
            <para>The category column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table for the column is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCABINET</b>
            </para>
          </description>
          <description>
            <para>An invalid cabinet name was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADKEYTABLE</b>
            </para>
          </description>
          <description>
            <para>The table in the Keytable column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table was not found or loaded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADMAXMINVALUES</b>
            </para>
          </description>
          <description>
            <para>The value in the MaxValue column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table is less than the value in the MinValue column.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADSHORTCUT</b>
            </para>
          </description>
          <description>
            <para>An invalid shortcut target name was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_STRINGOVERFLOW</b>
            </para>
          </description>
          <description>
            <para>The string is too long for the length specified by the column definition.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADLOCALIZEATTRIB</b>
            </para>
          </description>
          <description>
            <para>An invalid localization attribute was supplied. (Primary keys cannot be localized.)</para>
          </description>
        </item>
      </list>
      <para>Note that in low memory situations, this function can raise a STATUS_NO_MEMORY exception.</para>
    </returns>
    <remarks>
      <para>You should only call the
<b>MsiViewGetError</b> function when
<see cref="MsiViewModify" /> returns ERROR_INVALID_DATA, indicating that the data is invalid. Errors are only recorded for MSIMODIFY_VALIDATE, MSIMODIFY_VALIDATE_NEW, and MSIMODIFY_VALIDATEFIELD.</para>
      <para>If ERROR_MORE_DATA is returned, the parameter that  is a pointer gives the size of the buffer required to hold the string. Upon success, it gives the number of characters written to the string buffer. Therefore you can get the required size of the buffer by passing a small buffer (one character minimum) and examining the value at <i>pcchPathBuf</i> when the function returns MSIDBERROR_MOREDATA. Do not attempt to determine the size of the buffer by passing in null as <i>szColumnNameBuffer</i> or a buffer size of 0 in the <b>DWORD</b> referenced by <i>pcchBuf</i>.</para>
      <para>Once MSIDBERROR_NOERROR is returned, no more validation errors remain. The MSIDBERROR return value indicates the type of validation error that occurred for the value located in the column identified by the <i>szColumnNameBuffer</i>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiViewGetError as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiViewGetErrorW">
    <summary>
      <para>The
<b>MsiViewGetError</b> function returns the error that occurred in the
<see cref="MsiViewModify" /> function.</para>
    </summary>
    <param name="hView">
      <para>Handle to the view.</para>
    </param>
    <param name="szColumnNameBuffer">
      <para>Pointer to the buffer that receives the null-terminated column name. Do not attempt to determine the size of the buffer by passing in a null (value=0) for <i>szColumnName</i>. You can get the size of the buffer by passing in an empty string (for example ""). The function then returns MSIDBERROR_MOREDATA and <i>pcchBuf</i> contains the required buffer size in TCHARs, not including the terminating null character. On return of MSIDBERROR_NOERROR, <i>pcchBuf</i> contains the number of TCHARs written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.</para>
    </param>
    <param name="pcchBuf">
      <para>Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <i>szColumnNameBuffer</i>. When the function returns MSIDBERROR_NOERROR, this variable contains the size of the data copied to <i>szColumnNameBuffer</i>, not including the terminating null character. If <i>szColumnNameBuffer</i> is not large enough, the function returns MSIDBERROR_MOREDATA and stores the required size, not including the terminating null character, in the variable pointed to by <i>pcchBuf</i>.</para>
    </param>
    <returns>
      <para>This function returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Error code</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>An argument was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_MOREDATA</b>
            </para>
          </description>
          <description>
            <para>The buffer was too small to receive data.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_FUNCTIONERROR</b>
            </para>
          </description>
          <description>
            <para>The function failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_NOERROR</b>
            </para>
          </description>
          <description>
            <para>The function completed successfully with no errors.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_DUPLICATEKEY</b>
            </para>
          </description>
          <description>
            <para>The new record duplicates primary keys of the existing record in a table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_REQUIRED</b>
            </para>
          </description>
          <description>
            <para>There are no null values allowed; or the column is about to be deleted, but is referenced by another row.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADLINK</b>
            </para>
          </description>
          <description>
            <para>The corresponding record in a foreign table was not found.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_OVERFLOW</b>
            </para>
          </description>
          <description>
            <para>The data is greater than the maximum value allowed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_UNDERFLOW</b>
            </para>
          </description>
          <description>
            <para>The data is less than the minimum value allowed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_NOTINSET</b>
            </para>
          </description>
          <description>
            <para>The data is not a member of the values permitted in the set.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADVERSION</b>
            </para>
          </description>
          <description>
            <para>An invalid version string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCASE</b>
            </para>
          </description>
          <description>
            <para>The case was invalid. The case must be all uppercase or all lowercase.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADGUID</b>
            </para>
          </description>
          <description>
            <para>An invalid GUID was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADWILDCARD</b>
            </para>
          </description>
          <description>
            <para>An invalid wildcard file name was supplied, or the use of wildcards was invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADIDENTIFIER</b>
            </para>
          </description>
          <description>
            <para>An invalid identifier was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADLANGUAGE</b>
            </para>
          </description>
          <description>
            <para>Invalid language IDs were supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADFILENAME</b>
            </para>
          </description>
          <description>
            <para>An invalid file name was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADPATH</b>
            </para>
          </description>
          <description>
            <para>An invalid path was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCONDITION</b>
            </para>
          </description>
          <description>
            <para>An invalid conditional statement was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADFORMATTED</b>
            </para>
          </description>
          <description>
            <para>An invalid format string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADTEMPLATE</b>
            </para>
          </description>
          <description>
            <para>An invalid template string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADDEFAULTDIR</b>
            </para>
          </description>
          <description>
            <para>An invalid string was supplied in the DefaultDir column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/directory-table">Directory</a> table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADREGPATH</b>
            </para>
          </description>
          <description>
            <para>An invalid registry path string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCUSTOMSOURCE</b>
            </para>
          </description>
          <description>
            <para>An invalid string was supplied in the CustomSource column of the
<a href="https://docs.microsoft.com//windows/desktop/Msi/customaction-table">CustomAction</a> table.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADPROPERTY</b>
            </para>
          </description>
          <description>
            <para>An invalid property string was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_MISSINGDATA</b>
            </para>
          </description>
          <description>
            <para>The
<a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table is missing a reference to a column.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCATEGORY</b>
            </para>
          </description>
          <description>
            <para>The category column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table for the column is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADCABINET</b>
            </para>
          </description>
          <description>
            <para>An invalid cabinet name was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADKEYTABLE</b>
            </para>
          </description>
          <description>
            <para>The table in the Keytable column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table was not found or loaded.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADMAXMINVALUES</b>
            </para>
          </description>
          <description>
            <para>The value in the MaxValue column of the <a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation</a> table is less than the value in the MinValue column.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADSHORTCUT</b>
            </para>
          </description>
          <description>
            <para>An invalid shortcut target name was supplied.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_STRINGOVERFLOW</b>
            </para>
          </description>
          <description>
            <para>The string is too long for the length specified by the column definition.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>MSIDBERROR_BADLOCALIZEATTRIB</b>
            </para>
          </description>
          <description>
            <para>An invalid localization attribute was supplied. (Primary keys cannot be localized.)</para>
          </description>
        </item>
      </list>
      <para>Note that in low memory situations, this function can raise a STATUS_NO_MEMORY exception.</para>
    </returns>
    <remarks>
      <para>You should only call the
<b>MsiViewGetError</b> function when
<see cref="MsiViewModify" /> returns ERROR_INVALID_DATA, indicating that the data is invalid. Errors are only recorded for MSIMODIFY_VALIDATE, MSIMODIFY_VALIDATE_NEW, and MSIMODIFY_VALIDATEFIELD.</para>
      <para>If ERROR_MORE_DATA is returned, the parameter that  is a pointer gives the size of the buffer required to hold the string. Upon success, it gives the number of characters written to the string buffer. Therefore you can get the required size of the buffer by passing a small buffer (one character minimum) and examining the value at <i>pcchPathBuf</i> when the function returns MSIDBERROR_MOREDATA. Do not attempt to determine the size of the buffer by passing in null as <i>szColumnNameBuffer</i> or a buffer size of 0 in the <b>DWORD</b> referenced by <i>pcchBuf</i>.</para>
      <para>Once MSIDBERROR_NOERROR is returned, no more validation errors remain. The MSIDBERROR return value indicates the type of validation error that occurred for the value located in the column identified by the <i>szColumnNameBuffer</i>.</para>
      <blockquote>
        <para>[!NOTE]
The msiquery.h header defines MsiViewGetError as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/passing-null-as-the-argument-of-windows-installer-functions">Passing Null as the Argument of Windows Installer Functions</seealso>
  </member>
  <member name="Windows.MsiViewModify">
    <summary>
      <para>The
<b>MsiViewModify</b> function updates a fetched record.</para>
    </summary>
    <param name="hView">
      <para>Handle to a view.</para>
    </param>
    <param name="eModifyMode">
      <para>Specifies the modify mode. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIMODIFY_SEEK</b>
                </description>
              </item>
              <item>
                <description>-1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Refreshes the information in the supplied record without changing the position in the result set and without affecting subsequent fetch operations. The record may then be used for subsequent Update, Delete, and Refresh. All primary key columns of the table must be in the query and the record must have at least as many fields as the query. Seek cannot be used with multi-table queries. This mode cannot be used with a view containing joins. See also the remarks.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIMODIFY_REFRESH</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Refreshes the information in the record. Must first call
<see cref="MsiViewFetch" /> with the same record. Fails for a deleted row. Works with read-write and read-only records.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIMODIFY_INSERT</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Inserts a record. Fails if a row with the same primary keys exists. Fails with a read-only database. This mode cannot be used with a view containing joins.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIMODIFY_UPDATE</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Updates an existing record. Nonprimary keys only. Must first call
<see cref="MsiViewFetch" />. Fails with a deleted record. Works only with read-write records.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIMODIFY_ASSIGN</b>
                </description>
              </item>
              <item>
                <description>3</description>
              </item>
            </list>
          </description>
          <description>
            <para>Writes current data in the cursor to a table row. Updates record if the primary keys match an existing row and inserts if they do not match. Fails with a read-only database. This mode cannot be used with a view containing joins.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIMODIFY_REPLACE</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Updates or deletes and inserts a record into a table. Must first call
<see cref="MsiViewFetch" /> with the same record. Updates record if the primary keys are unchanged. Deletes old row and inserts new if primary keys have changed. Fails with a read-only database. This mode cannot be used with a view containing joins.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIMODIFY_MERGE</b>
                </description>
              </item>
              <item>
                <description>5</description>
              </item>
            </list>
          </description>
          <description>
            <para>Inserts or validates a record in a table. Inserts if primary keys do not match any row and validates if there is a match. Fails if the record does not match the data in the table. Fails if there is a record with a duplicate key that is not identical. Works only with read-write records. This mode cannot be used with a view containing joins.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIMODIFY_DELETE</b>
                </description>
              </item>
              <item>
                <description>6</description>
              </item>
            </list>
          </description>
          <description>
            <para>Remove a row from the table. You must first call the
<see cref="MsiViewFetch" /> function with the same record. Fails if the row has been deleted. Works only with read-write records. This mode cannot be used with a view containing joins.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIMODIFY_INSERT_TEMPORARY</b>
                </description>
              </item>
              <item>
                <description>7</description>
              </item>
            </list>
          </description>
          <description>
            <para>Inserts a temporary record. The information is not persistent. Fails if a row with the same primary key exists. Works only with read-write records. This mode cannot be used with a view containing joins.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIMODIFY_VALIDATE</b>
                </description>
              </item>
              <item>
                <description>8</description>
              </item>
            </list>
          </description>
          <description>
            <para>Validates a record. Does not validate across joins. You must first call the
<see cref="MsiViewFetch" /> function with the same record. Obtain validation errors with
<see cref="MsiViewGetError" />. Works with read-write and read-only records. This mode cannot be used with a view containing joins.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIMODIFY_VALIDATE_NEW</b>
                </description>
              </item>
              <item>
                <description>9</description>
              </item>
            </list>
          </description>
          <description>
            <para>Validate a new record. Does not validate across joins. Checks for duplicate keys. Obtain validation errors by calling
<see cref="MsiViewGetError" />. Works with read-write and read-only records. This mode cannot be used with a view containing joins.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIMODIFY_VALIDATE_FIELD</b>
                </description>
              </item>
              <item>
                <description>10</description>
              </item>
            </list>
          </description>
          <description>
            <para>Validates fields of a fetched or new record. Can validate one or more fields of an incomplete record. Obtain validation errors by calling
<see cref="MsiViewGetError" />. Works with read-write and read-only records. This mode cannot be used with a view containing joins.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>MSIMODIFY_VALIDATE_DELETE</b>
                </description>
              </item>
              <item>
                <description>11</description>
              </item>
            </list>
          </description>
          <description>
            <para>Validates a record that will be deleted later. You must first call
<see cref="MsiViewFetch" />. Fails if another row refers to the primary keys of this row. Validation does not check for the existence of the primary keys of this row in properties or strings. Does not check if a column is a foreign key to multiple tables. Obtain validation errors by calling
<see cref="MsiViewGetError" />. Works with read-write and read-only records. This mode cannot be used with a view that contains joins.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="hRecord">
      <para>Handle to the record to modify.</para>
    </param>
    <returns>
      <para>The
<b>MsiViewModify</b> function returns the following values:</para>
      <para>Note that in low memory situations, this function can raise a STATUS_NO_MEMORY exception.</para>
    </returns>
    <remarks>
      <para>The MSIMODIFY_VALIDATE, MSIMODIFY_VALIDATE_NEW, MSIMODIFY_VALIDATE_FIELD, and MSIMODIFY_VALIDATE_DELETE values of the
<b>MsiViewModify</b> function do not perform actual updates; they ensure that the data in the record is valid. Use of these validation enumerations requires that the database contains the
<a href="https://docs.microsoft.com//windows/desktop/Msi/-validation-table">_Validation table</a>.</para>
      <para>You can call MSIMODIFY_UPDATE or MSIMODIFY_DELETE with a record immediately after using MSIMODIFY_INSERT, MSIMODIFY_INSERT_TEMPORARY, or MSIMODIFY_SEEK provided you have NOT modified the 0th field of the inserted or sought record.</para>
      <para>To execute any SQL statement, a view must be created. However, a view that does not create a result set, such as CREATE TABLE, or INSERT INTO, cannot be used with
<b>MsiViewModify</b> to update tables though the view.</para>
      <para>You cannot fetch a record that contains binary data from one database and then use that record to insert the data into another database. To move binary data from one database to another, you should export the data to a file and then import it into the new database using a query and the
<see cref="MsiRecordSetStream" />. This ensures that each database has its own copy of the binary data.</para>
      <para>Note that custom actions can only add, modify, or remove temporary rows, columns, or tables from a database. Custom actions cannot modify persistent data in a database, such as data that is a part of the database stored on disk. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Msi/accessing-the-current-installer-session-from-inside-a-custom-action">Accessing the Current Installer Session from Inside a Custom Action</a>.</para>
      <para>If the function fails, you can obtain extended error information by using <see cref="MsiGetLastErrorRecord" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Msi/database-functions">General Database Access Functions</seealso>
  </member>
</doc>