<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.EnumDirTree">
    <summary>
      <para>Enumerates all occurrences of the specified file in the specified directory tree.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="RootPath">
      <para>The path where the function should begin searching for the file.</para>
    </param>
    <param name="InputPathName">
      <para>The name of the file to be found. You can specify a partial path.</para>
    </param>
    <param name="OutputPathBuffer">
      <para>A pointer to a buffer that receives the full path of the file. If the function fails or does not find a matching file, this buffer will still contain the last full path that was found.</para>
      <para>This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="cb">
      <para>An application-defined callback function, or <b>NULL</b>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumdirtree_callback">EnumDirTreeProc</a>.</para>
    </param>
    <param name="data">
      <para>The user-defined data or <b>NULL</b>. This value is passed to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The search can be canceled if you register a
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function. For every file operation,
<i>EnumDirTree</i> calls this callback function with CBA_DEFERRED_SYMBOL_LOAD_CANCEL. If the callback function returns <b>TRUE</b>,
<i>EnumDirTree</i> cancels the search.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumdirtree_callback">EnumDirTreeProc</seealso>
  </member>
  <member name="Windows.EnumDirTreeW">
    <summary>
      <para>Enumerates all occurrences of the specified file in the specified directory tree.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="RootPath">
      <para>The path where the function should begin searching for the file.</para>
    </param>
    <param name="InputPathName">
      <para>The name of the file to be found. You can specify a partial path.</para>
    </param>
    <param name="OutputPathBuffer">
      <para>A pointer to a buffer that receives the full path of the file. If the function fails or does not find a matching file, this buffer will still contain the last full path that was found.</para>
      <para>This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="cb">
      <para>An application-defined callback function, or <b>NULL</b>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumdirtree_callback">EnumDirTreeProc</a>.</para>
    </param>
    <param name="data">
      <para>The user-defined data or <b>NULL</b>. This value is passed to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The search can be canceled if you register a
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function. For every file operation,
<i>EnumDirTree</i> calls this callback function with CBA_DEFERRED_SYMBOL_LOAD_CANCEL. If the callback function returns <b>TRUE</b>,
<i>EnumDirTree</i> cancels the search.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumdirtree_callback">EnumDirTreeProc</seealso>
  </member>
  <member name="Windows.EnumDirTree">
    <summary>
      <para>Enumerates all occurrences of the specified file in the specified directory tree.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="RootPath">
      <para>The path where the function should begin searching for the file.</para>
    </param>
    <param name="InputPathName">
      <para>The name of the file to be found. You can specify a partial path.</para>
    </param>
    <param name="OutputPathBuffer">
      <para>A pointer to a buffer that receives the full path of the file. If the function fails or does not find a matching file, this buffer will still contain the last full path that was found.</para>
      <para>This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="cb">
      <para>An application-defined callback function, or <b>NULL</b>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumdirtree_callback">EnumDirTreeProc</a>.</para>
    </param>
    <param name="data">
      <para>The user-defined data or <b>NULL</b>. This value is passed to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The search can be canceled if you register a
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function. For every file operation,
<i>EnumDirTree</i> calls this callback function with CBA_DEFERRED_SYMBOL_LOAD_CANCEL. If the callback function returns <b>TRUE</b>,
<i>EnumDirTree</i> cancels the search.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines EnumDirTree as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumdirtree_callback">EnumDirTreeProc</seealso>
  </member>
  <member name="Windows.EnumDirTreeW">
    <summary>
      <para>Enumerates all occurrences of the specified file in the specified directory tree.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="RootPath">
      <para>The path where the function should begin searching for the file.</para>
    </param>
    <param name="InputPathName">
      <para>The name of the file to be found. You can specify a partial path.</para>
    </param>
    <param name="OutputPathBuffer">
      <para>A pointer to a buffer that receives the full path of the file. If the function fails or does not find a matching file, this buffer will still contain the last full path that was found.</para>
      <para>This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="cb">
      <para>An application-defined callback function, or <b>NULL</b>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumdirtree_callback">EnumDirTreeProc</a>.</para>
    </param>
    <param name="data">
      <para>The user-defined data or <b>NULL</b>. This value is passed to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The search can be canceled if you register a
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function. For every file operation,
<i>EnumDirTree</i> calls this callback function with CBA_DEFERRED_SYMBOL_LOAD_CANCEL. If the callback function returns <b>TRUE</b>,
<i>EnumDirTree</i> cancels the search.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines EnumDirTree as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumdirtree_callback">EnumDirTreeProc</seealso>
  </member>
  <member name="Windows.EnumerateLoadedModules">
    <summary>
      <para>Enumerates the loaded modules for the specified process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process whose modules will be enumerated.</para>
    </param>
    <param name="EnumLoadedModulesCallback">
      <para>An application-defined callback function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>Optional user-defined data. This value is passed to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, <i>EnumerateLoadedModulesW64</i>, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <i>EnumerateLoadedModulesW64</i> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
EnumerateLoadedModulesW64(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback,
    __in PVOID UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
    #define EnumerateLoadedModules64      EnumerateLoadedModulesW64
#endif
</code>
      <para>This function supersedes the <i>EnumerateLoadedModules</i> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <i>EnumerateLoadedModules</i> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define EnumerateLoadedModules EnumerateLoadedModules64
#else
BOOL
IMAGEAPI
EnumerateLoadedModules(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACK EnumLoadedModulesCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</seealso>
  </member>
  <member name="Windows.EnumerateLoadedModules64">
    <summary>
      <para>Enumerates the loaded modules for the specified process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process whose modules will be enumerated.</para>
    </param>
    <param name="EnumLoadedModulesCallback">
      <para>An application-defined callback function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>Optional user-defined data. This value is passed to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, <i>EnumerateLoadedModulesW64</i>, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <i>EnumerateLoadedModulesW64</i> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
EnumerateLoadedModulesW64(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback,
    __in PVOID UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
    #define EnumerateLoadedModules64      EnumerateLoadedModulesW64
#endif
</code>
      <para>This function supersedes the <i>EnumerateLoadedModules</i> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <i>EnumerateLoadedModules</i> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define EnumerateLoadedModules EnumerateLoadedModules64
#else
BOOL
IMAGEAPI
EnumerateLoadedModules(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACK EnumLoadedModulesCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</seealso>
  </member>
  <member name="Windows.EnumerateLoadedModulesW64">
    <summary>
      <para>Enumerates the loaded modules for the specified process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process whose modules will be enumerated.</para>
    </param>
    <param name="EnumLoadedModulesCallback">
      <para>An application-defined callback function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>Optional user-defined data. This value is passed to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, <i>EnumerateLoadedModulesW64</i>, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <i>EnumerateLoadedModulesW64</i> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
EnumerateLoadedModulesW64(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback,
    __in PVOID UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
    #define EnumerateLoadedModules64      EnumerateLoadedModulesW64
#endif
</code>
      <para>This function supersedes the <i>EnumerateLoadedModules</i> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <i>EnumerateLoadedModules</i> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define EnumerateLoadedModules EnumerateLoadedModules64
#else
BOOL
IMAGEAPI
EnumerateLoadedModules(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACK EnumLoadedModulesCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</seealso>
  </member>
  <member name="Windows.EnumerateLoadedModules">
    <summary>
      <para>Enumerates the loaded modules for the specified process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process whose modules will be enumerated.</para>
    </param>
    <param name="EnumLoadedModulesCallback">
      <para>An application-defined callback function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>Optional user-defined data. This value is passed to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, <i>EnumerateLoadedModulesW64</i>, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <i>EnumerateLoadedModulesW64</i> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
EnumerateLoadedModulesW64(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback,
    __in PVOID UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
    #define EnumerateLoadedModules64      EnumerateLoadedModulesW64
#endif
</code>
      <para>This function supersedes the <i>EnumerateLoadedModules</i> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <i>EnumerateLoadedModules</i> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define EnumerateLoadedModules EnumerateLoadedModules64
#else
BOOL
IMAGEAPI
EnumerateLoadedModules(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACK EnumLoadedModulesCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</seealso>
  </member>
  <member name="Windows.EnumerateLoadedModules64">
    <summary>
      <para>Enumerates the loaded modules for the specified process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process whose modules will be enumerated.</para>
    </param>
    <param name="EnumLoadedModulesCallback">
      <para>An application-defined callback function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>Optional user-defined data. This value is passed to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, <i>EnumerateLoadedModulesW64</i>, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <i>EnumerateLoadedModulesW64</i> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
EnumerateLoadedModulesW64(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback,
    __in PVOID UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
    #define EnumerateLoadedModules64      EnumerateLoadedModulesW64
#endif
</code>
      <para>This function supersedes the <i>EnumerateLoadedModules</i> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <i>EnumerateLoadedModules</i> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define EnumerateLoadedModules EnumerateLoadedModules64
#else
BOOL
IMAGEAPI
EnumerateLoadedModules(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACK EnumLoadedModulesCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</seealso>
  </member>
  <member name="Windows.EnumerateLoadedModulesW64">
    <summary>
      <para>Enumerates the loaded modules for the specified process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process whose modules will be enumerated.</para>
    </param>
    <param name="EnumLoadedModulesCallback">
      <para>An application-defined callback function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>Optional user-defined data. This value is passed to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, <i>EnumerateLoadedModulesW64</i>, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <i>EnumerateLoadedModulesW64</i> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
EnumerateLoadedModulesW64(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback,
    __in PVOID UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
    #define EnumerateLoadedModules64      EnumerateLoadedModulesW64
#endif
</code>
      <para>This function supersedes the <i>EnumerateLoadedModules</i> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <i>EnumerateLoadedModules</i> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define EnumerateLoadedModules EnumerateLoadedModules64
#else
BOOL
IMAGEAPI
EnumerateLoadedModules(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACK EnumLoadedModulesCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</seealso>
  </member>
  <member name="Windows.EnumerateLoadedModulesEx">
    <summary>
      <para>Enumerates the loaded modules for the specified process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process whose modules will be enumerated.</para>
    </param>
    <param name="EnumLoadedModulesCallback">
      <para>An application-defined callback function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>Optional user-defined data. This value is passed to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.EnumerateLoadedModulesExW">
    <summary>
      <para>Enumerates the loaded modules for the specified process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process whose modules will be enumerated.</para>
    </param>
    <param name="EnumLoadedModulesCallback">
      <para>An application-defined callback function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>Optional user-defined data. This value is passed to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.EnumerateLoadedModulesEx">
    <summary>
      <para>Enumerates the loaded modules for the specified process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process whose modules will be enumerated.</para>
    </param>
    <param name="EnumLoadedModulesCallback">
      <para>An application-defined callback function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>Optional user-defined data. This value is passed to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines EnumerateLoadedModulesEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.EnumerateLoadedModulesExW">
    <summary>
      <para>Enumerates the loaded modules for the specified process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process whose modules will be enumerated.</para>
    </param>
    <param name="EnumLoadedModulesCallback">
      <para>An application-defined callback function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>Optional user-defined data. This value is passed to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines EnumerateLoadedModulesEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.EnumerateLoadedModules">
    <summary>
      <para>Enumerates the loaded modules for the specified process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process whose modules will be enumerated.</para>
    </param>
    <param name="EnumLoadedModulesCallback">
      <para>An application-defined callback function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>Optional user-defined data. This value is passed to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, <i>EnumerateLoadedModulesW64</i>, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <i>EnumerateLoadedModulesW64</i> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
EnumerateLoadedModulesW64(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback,
    __in PVOID UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
    #define EnumerateLoadedModules64      EnumerateLoadedModulesW64
#endif
</code>
      <para>This function supersedes the <i>EnumerateLoadedModules</i> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <i>EnumerateLoadedModules</i> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define EnumerateLoadedModules EnumerateLoadedModules64
#else
BOOL
IMAGEAPI
EnumerateLoadedModules(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACK EnumLoadedModulesCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</seealso>
  </member>
  <member name="Windows.EnumerateLoadedModules64">
    <summary>
      <para>Enumerates the loaded modules for the specified process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process whose modules will be enumerated.</para>
    </param>
    <param name="EnumLoadedModulesCallback">
      <para>An application-defined callback function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>Optional user-defined data. This value is passed to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, <i>EnumerateLoadedModulesW64</i>, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <i>EnumerateLoadedModulesW64</i> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
EnumerateLoadedModulesW64(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback,
    __in PVOID UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
    #define EnumerateLoadedModules64      EnumerateLoadedModulesW64
#endif
</code>
      <para>This function supersedes the <i>EnumerateLoadedModules</i> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <i>EnumerateLoadedModules</i> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define EnumerateLoadedModules EnumerateLoadedModules64
#else
BOOL
IMAGEAPI
EnumerateLoadedModules(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACK EnumLoadedModulesCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</seealso>
  </member>
  <member name="Windows.EnumerateLoadedModulesW64">
    <summary>
      <para>Enumerates the loaded modules for the specified process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process whose modules will be enumerated.</para>
    </param>
    <param name="EnumLoadedModulesCallback">
      <para>An application-defined callback function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>Optional user-defined data. This value is passed to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, <i>EnumerateLoadedModulesW64</i>, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <i>EnumerateLoadedModulesW64</i> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
EnumerateLoadedModulesW64(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback,
    __in PVOID UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
    #define EnumerateLoadedModules64      EnumerateLoadedModulesW64
#endif
</code>
      <para>This function supersedes the <i>EnumerateLoadedModules</i> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <i>EnumerateLoadedModules</i> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define EnumerateLoadedModules EnumerateLoadedModules64
#else
BOOL
IMAGEAPI
EnumerateLoadedModules(
    __in HANDLE hProcess,
    __in PENUMLOADED_MODULES_CALLBACK EnumLoadedModulesCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</seealso>
  </member>
  <member name="Windows.FindDebugInfoFile">
    <summary>
      <para>Locates a
<a href="https://docs.microsoft.com//windows/desktop/Debug/symbol-files">debug (.dbg) file</a>.</para>
      <para>To provide a callback function to verify the symbol file located, use the
<see cref="FindDebugInfoFileEx" /> function.</para>
    </summary>
    <param name="FileName">
      <para>The name of the .dbg file that is desired. You can use a partial path.</para>
    </param>
    <param name="SymbolPath">
      <para>The path where symbol files are located. This can be multiple paths separated by semicolons. To retrieve the symbol path, use the
<see cref="SymGetSearchPath" /> function.</para>
    </param>
    <param name="DebugFilePath">
      <para>A pointer to a buffer that receives the full path of the .dbg file.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the .dbg file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>FindDebugInfoFile</b> function is used to locate a .dbg file. This function is provided so the search can be conducted in several different directories through a single function call. The <i>SymbolPath</i> parameter can contain multiple paths, with each separated by a semicolon (;). When multiple paths are specified, the function searches each directory for the file. Subdirectories are not searched. When the file is located, the search stops. Thus, be sure to specify <i>SymbolPath</i> with the paths in the correct order.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="FindDebugInfoFileEx" />
    <seealso cref="SymGetSearchPath" />
  </member>
  <member name="Windows.FindDebugInfoFileEx">
    <summary>
      <para>Locates the specified
<a href="https://docs.microsoft.com//windows/desktop/Debug/symbol-files">debug (.dbg) file</a>.</para>
    </summary>
    <param name="FileName">
      <para>The name of the .dbg file to locate. You can use a partial path.</para>
    </param>
    <param name="SymbolPath">
      <para>The path where symbol files are located. This can be multiple paths separated by semicolons. To retrieve the symbol path, use the
<see cref="SymGetSearchPath" /> function.</para>
    </param>
    <param name="DebugFilePath">
      <para>A pointer to a buffer that receives the full path of the .dbg file.</para>
    </param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct file was found or the function should continue its search. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</a>.</para>
      <para>This parameter may be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">
      <para>Optional user-defined data to pass to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the .dbg file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>FindDebugInfoFileEx</b> function is used to locate a .dbg file. This function is provided so the search can be conducted in several different directories through a single function call. The <i>SymbolPath</i> parameter can contain multiple paths, with each separated by a semicolon (;). When multiple paths are specified, the function searches each specified directory for the file. When the file is located, the search stops. Thus, be sure to specify <i>SymbolPath</i> with the paths in the correct order.</para>
      <para>If the file name specified does not include a .dbg extension,
<b>FindDebugInfoFileEx</b> searches for the file in the following sequence:</para>
      <list type="number">
        <item>
          <description>
            <i>SymbolPath</i>\Symbols\<i>ext</i>\<i>filename</i>.dbg</description>
        </item>
        <item>
          <description>
            <i>SymbolPath</i>\<i>ext</i>\<i>filename</i>.dbg</description>
        </item>
        <item>
          <description>
            <i>SymbolPath</i>\<i>filename</i>.dbg</description>
        </item>
        <item>
          <description>
            <i>FileNamePath</i>\<i>filename</i>.dbg</description>
        </item>
      </list>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</seealso>
    <seealso cref="SymGetSearchPath" />
  </member>
  <member name="Windows.FindDebugInfoFileExW">
    <summary>
      <para>Locates the specified
<a href="https://docs.microsoft.com//windows/desktop/Debug/symbol-files">debug (.dbg) file</a>.</para>
    </summary>
    <param name="FileName">
      <para>The name of the .dbg file to locate. You can use a partial path.</para>
    </param>
    <param name="SymbolPath">
      <para>The path where symbol files are located. This can be multiple paths separated by semicolons. To retrieve the symbol path, use the
<see cref="SymGetSearchPath" /> function.</para>
    </param>
    <param name="DebugFilePath">
      <para>A pointer to a buffer that receives the full path of the .dbg file.</para>
    </param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct file was found or the function should continue its search. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</a>.</para>
      <para>This parameter may be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">
      <para>Optional user-defined data to pass to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the .dbg file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>FindDebugInfoFileEx</b> function is used to locate a .dbg file. This function is provided so the search can be conducted in several different directories through a single function call. The <i>SymbolPath</i> parameter can contain multiple paths, with each separated by a semicolon (;). When multiple paths are specified, the function searches each specified directory for the file. When the file is located, the search stops. Thus, be sure to specify <i>SymbolPath</i> with the paths in the correct order.</para>
      <para>If the file name specified does not include a .dbg extension,
<b>FindDebugInfoFileEx</b> searches for the file in the following sequence:</para>
      <list type="number">
        <item>
          <description>
            <i>SymbolPath</i>\Symbols\<i>ext</i>\<i>filename</i>.dbg</description>
        </item>
        <item>
          <description>
            <i>SymbolPath</i>\<i>ext</i>\<i>filename</i>.dbg</description>
        </item>
        <item>
          <description>
            <i>SymbolPath</i>\<i>filename</i>.dbg</description>
        </item>
        <item>
          <description>
            <i>FileNamePath</i>\<i>filename</i>.dbg</description>
        </item>
      </list>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</seealso>
    <seealso cref="SymGetSearchPath" />
  </member>
  <member name="Windows.FindDebugInfoFileEx">
    <summary>
      <para>Locates the specified
<a href="https://docs.microsoft.com//windows/desktop/Debug/symbol-files">debug (.dbg) file</a>.</para>
    </summary>
    <param name="FileName">
      <para>The name of the .dbg file to locate. You can use a partial path.</para>
    </param>
    <param name="SymbolPath">
      <para>The path where symbol files are located. This can be multiple paths separated by semicolons. To retrieve the symbol path, use the
<see cref="SymGetSearchPath" /> function.</para>
    </param>
    <param name="DebugFilePath">
      <para>A pointer to a buffer that receives the full path of the .dbg file.</para>
    </param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct file was found or the function should continue its search. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</a>.</para>
      <para>This parameter may be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">
      <para>Optional user-defined data to pass to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the .dbg file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>FindDebugInfoFileEx</b> function is used to locate a .dbg file. This function is provided so the search can be conducted in several different directories through a single function call. The <i>SymbolPath</i> parameter can contain multiple paths, with each separated by a semicolon (;). When multiple paths are specified, the function searches each specified directory for the file. When the file is located, the search stops. Thus, be sure to specify <i>SymbolPath</i> with the paths in the correct order.</para>
      <para>If the file name specified does not include a .dbg extension,
<b>FindDebugInfoFileEx</b> searches for the file in the following sequence:</para>
      <list type="number">
        <item>
          <description>
            <i>SymbolPath</i>\Symbols\<i>ext</i>\<i>filename</i>.dbg</description>
        </item>
        <item>
          <description>
            <i>SymbolPath</i>\<i>ext</i>\<i>filename</i>.dbg</description>
        </item>
        <item>
          <description>
            <i>SymbolPath</i>\<i>filename</i>.dbg</description>
        </item>
        <item>
          <description>
            <i>FileNamePath</i>\<i>filename</i>.dbg</description>
        </item>
      </list>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines FindDebugInfoFileEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</seealso>
    <seealso cref="SymGetSearchPath" />
  </member>
  <member name="Windows.FindDebugInfoFileExW">
    <summary>
      <para>Locates the specified
<a href="https://docs.microsoft.com//windows/desktop/Debug/symbol-files">debug (.dbg) file</a>.</para>
    </summary>
    <param name="FileName">
      <para>The name of the .dbg file to locate. You can use a partial path.</para>
    </param>
    <param name="SymbolPath">
      <para>The path where symbol files are located. This can be multiple paths separated by semicolons. To retrieve the symbol path, use the
<see cref="SymGetSearchPath" /> function.</para>
    </param>
    <param name="DebugFilePath">
      <para>A pointer to a buffer that receives the full path of the .dbg file.</para>
    </param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct file was found or the function should continue its search. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</a>.</para>
      <para>This parameter may be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">
      <para>Optional user-defined data to pass to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the .dbg file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>FindDebugInfoFileEx</b> function is used to locate a .dbg file. This function is provided so the search can be conducted in several different directories through a single function call. The <i>SymbolPath</i> parameter can contain multiple paths, with each separated by a semicolon (;). When multiple paths are specified, the function searches each specified directory for the file. When the file is located, the search stops. Thus, be sure to specify <i>SymbolPath</i> with the paths in the correct order.</para>
      <para>If the file name specified does not include a .dbg extension,
<b>FindDebugInfoFileEx</b> searches for the file in the following sequence:</para>
      <list type="number">
        <item>
          <description>
            <i>SymbolPath</i>\Symbols\<i>ext</i>\<i>filename</i>.dbg</description>
        </item>
        <item>
          <description>
            <i>SymbolPath</i>\<i>ext</i>\<i>filename</i>.dbg</description>
        </item>
        <item>
          <description>
            <i>SymbolPath</i>\<i>filename</i>.dbg</description>
        </item>
        <item>
          <description>
            <i>FileNamePath</i>\<i>filename</i>.dbg</description>
        </item>
      </list>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines FindDebugInfoFileEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</seealso>
    <seealso cref="SymGetSearchPath" />
  </member>
  <member name="Windows.FindExecutableImage">
    <summary>
      <para>Locates an executable file.</para>
      <para>To specify a callback function, use the
<see cref="FindExecutableImageEx" /> function.</para>
    </summary>
    <param name="FileName">
      <para>The name of the symbol file to be located. This parameter can be a partial path.</para>
    </param>
    <param name="SymbolPath">
      <para>The path where symbol files are located. This can be multiple paths separated by semicolons. To retrieve the symbol path, use the
<see cref="SymGetSearchPath" /> function.</para>
    </param>
    <param name="ImageFilePath">
      <para>A pointer to a buffer that receives the full path of the executable file.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the executable file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>FindExecutableImage</b> function is provided so executable files can be located in several different directories through a single function call. The <i>SymbolPath</i> parameter can contain multiple paths, with each separated by a semicolon (;). When multiple paths are specified, the function searches each directory tree for the executable file. When the file is located, the search stops. Thus, be sure to specify <i>SymbolPath</i> with the paths in the correct order.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="FindExecutableImageEx" />
    <seealso cref="SymGetSearchPath" />
  </member>
  <member name="Windows.FindExecutableImageEx">
    <summary>
      <para>Locates the specified executable file.</para>
    </summary>
    <param name="FileName">
      <para>The name of the symbol file to be located. This parameter can be a partial path.</para>
    </param>
    <param name="SymbolPath">
      <para>The path where symbol files are located. This string can contain multiple paths separated by semicolons. To retrieve the symbol path, use the
<see cref="SymGetSearchPath" /> function.</para>
    </param>
    <param name="ImageFilePath">
      <para>A pointer to a buffer that receives the full path of the executable file.</para>
    </param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct executable file was found, or whether the function should continue its search. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">
      <para>Optional user-defined data for the callback function. This parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the executable file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>FindExecutableImageEx</b> function is provided so executable files can be found in several different directories by using a single function call. If the <i>SymbolPath</i> parameter contains multiple paths, the function searches each specified directory tree for the executable file. When the file is found, the search stops. Thus, be sure to specify <i>SymbolPath</i> with the paths in the correct order.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</seealso>
    <seealso cref="SymGetSearchPath" />
  </member>
  <member name="Windows.FindExecutableImageExW">
    <summary>
      <para>Locates the specified executable file.</para>
    </summary>
    <param name="FileName">
      <para>The name of the symbol file to be located. This parameter can be a partial path.</para>
    </param>
    <param name="SymbolPath">
      <para>The path where symbol files are located. This string can contain multiple paths separated by semicolons. To retrieve the symbol path, use the
<see cref="SymGetSearchPath" /> function.</para>
    </param>
    <param name="ImageFilePath">
      <para>A pointer to a buffer that receives the full path of the executable file.</para>
    </param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct executable file was found, or whether the function should continue its search. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">
      <para>Optional user-defined data for the callback function. This parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the executable file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>FindExecutableImageEx</b> function is provided so executable files can be found in several different directories by using a single function call. If the <i>SymbolPath</i> parameter contains multiple paths, the function searches each specified directory tree for the executable file. When the file is found, the search stops. Thus, be sure to specify <i>SymbolPath</i> with the paths in the correct order.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</seealso>
    <seealso cref="SymGetSearchPath" />
  </member>
  <member name="Windows.FindExecutableImageEx">
    <summary>
      <para>Locates the specified executable file.</para>
    </summary>
    <param name="FileName">
      <para>The name of the symbol file to be located. This parameter can be a partial path.</para>
    </param>
    <param name="SymbolPath">
      <para>The path where symbol files are located. This string can contain multiple paths separated by semicolons. To retrieve the symbol path, use the
<see cref="SymGetSearchPath" /> function.</para>
    </param>
    <param name="ImageFilePath">
      <para>A pointer to a buffer that receives the full path of the executable file.</para>
    </param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct executable file was found, or whether the function should continue its search. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">
      <para>Optional user-defined data for the callback function. This parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the executable file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>FindExecutableImageEx</b> function is provided so executable files can be found in several different directories by using a single function call. If the <i>SymbolPath</i> parameter contains multiple paths, the function searches each specified directory tree for the executable file. When the file is found, the search stops. Thus, be sure to specify <i>SymbolPath</i> with the paths in the correct order.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines FindExecutableImageEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</seealso>
    <seealso cref="SymGetSearchPath" />
  </member>
  <member name="Windows.FindExecutableImageExW">
    <summary>
      <para>Locates the specified executable file.</para>
    </summary>
    <param name="FileName">
      <para>The name of the symbol file to be located. This parameter can be a partial path.</para>
    </param>
    <param name="SymbolPath">
      <para>The path where symbol files are located. This string can contain multiple paths separated by semicolons. To retrieve the symbol path, use the
<see cref="SymGetSearchPath" /> function.</para>
    </param>
    <param name="ImageFilePath">
      <para>A pointer to a buffer that receives the full path of the executable file.</para>
    </param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct executable file was found, or whether the function should continue its search. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">
      <para>Optional user-defined data for the callback function. This parameter can be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the executable file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>FindExecutableImageEx</b> function is provided so executable files can be found in several different directories by using a single function call. If the <i>SymbolPath</i> parameter contains multiple paths, the function searches each specified directory tree for the executable file. When the file is found, the search stops. Thus, be sure to specify <i>SymbolPath</i> with the paths in the correct order.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines FindExecutableImageEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</seealso>
    <seealso cref="SymGetSearchPath" />
  </member>
  <member name="Windows.GetSymLoadError">
    <summary>
      <para>Gets the last symbol load error.</para>
    </summary>
    <returns>
      <para>The last symbol load error.</para>
    </returns>
  </member>
  <member name="Windows.GetTimestampForLoadedLibrary">
    <summary>
      <para>Retrieves the time stamp of a loaded image.</para>
    </summary>
    <param name="Module">
      <para>The base address of an image that is mapped into memory by a call to the
<see cref="MapViewOfFile" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the time stamp from the image.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The time stamp for an image is initially set by the linker, but it can be modified by operations such as rebasing. The value is represented in the number of seconds elapsed since midnight (00:00:00), January 1, 1970, Universal Coordinated Time, according to the system clock. The time stamp can be printed using the C run-time (CRT) function ctime.</para>
      <para>All <a href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</a>, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="MapViewOfFile" />
    <seealso cref="ReBaseImage" />
    <seealso cref="ReBaseImage64" />
  </member>
  <member name="Windows.ImageDirectoryEntryToData">
    <summary>
      <para>Obtains access to image-specific data.</para>
      <para>This function has been superseded by the
<see cref="ImageDirectoryEntryToDataEx" /> function. Use
<b>ImageDirectoryEntryToDataEx</b> to retrieve the section header.</para>
    </summary>
    <param name="Base">
      <para>The base address of the image.</para>
    </param>
    <param name="MappedAsImage">
      <para>If this parameter is <b>TRUE</b>, the file is mapped by the system as an image. If the flag is <b>FALSE</b>, the file is mapped as a data file by the
<see cref="MapViewOfFile" /> function.</para>
    </param>
    <param name="DirectoryEntry">
      <para>The index number of the desired directory entry. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_ARCHITECTURE</b>
                </description>
              </item>
              <item>
                <description>7</description>
              </item>
            </list>
          </description>
          <description>
            <para>Architecture-specific data</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_BASERELOC</b>
                </description>
              </item>
              <item>
                <description>5</description>
              </item>
            </list>
          </description>
          <description>
            <para>Base relocation table</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT</b>
                </description>
              </item>
              <item>
                <description>11</description>
              </item>
            </list>
          </description>
          <description>
            <para>Bound import directory</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR</b>
                </description>
              </item>
              <item>
                <description>14</description>
              </item>
            </list>
          </description>
          <description>
            <para>COM descriptor table</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_DEBUG</b>
                </description>
              </item>
              <item>
                <description>6</description>
              </item>
            </list>
          </description>
          <description>
            <para>Debug directory</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT</b>
                </description>
              </item>
              <item>
                <description>13</description>
              </item>
            </list>
          </description>
          <description>
            <para>Delay import table</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_EXCEPTION</b>
                </description>
              </item>
              <item>
                <description>3</description>
              </item>
            </list>
          </description>
          <description>
            <para>Exception directory</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_EXPORT</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Export directory</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_GLOBALPTR</b>
                </description>
              </item>
              <item>
                <description>8</description>
              </item>
            </list>
          </description>
          <description>
            <para>The relative virtual address of global pointer</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_IAT</b>
                </description>
              </item>
              <item>
                <description>12</description>
              </item>
            </list>
          </description>
          <description>
            <para>Import address table</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_IMPORT</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Import directory</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG</b>
                </description>
              </item>
              <item>
                <description>10</description>
              </item>
            </list>
          </description>
          <description>
            <para>Load configuration directory</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_RESOURCE</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Resource directory</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_SECURITY</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Security directory</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_TLS</b>
                </description>
              </item>
              <item>
                <description>9</description>
              </item>
            </list>
          </description>
          <description>
            <para>Thread local storage directory</para>
          </description>
        </item>
      </list>
    </param>
    <param name="Size">
      <para>A pointer to a variable that receives the size of the data for the directory entry, in bytes.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the directory entry's data.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>ImageDirectoryEntryToData</b> function is used to obtain access to image-specific data.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="ImageDirectoryEntryToDataEx" />
    <seealso cref="MapViewOfFile" />
  </member>
  <member name="Windows.ImageDirectoryEntryToDataEx">
    <summary>
      <para>Locates a directory entry within the image header and returns the address of the data for the directory entry. This function returns the section header for the data located, if one exists.</para>
    </summary>
    <param name="Base">
      <para>The base address of the image or data file.</para>
    </param>
    <param name="MappedAsImage">
      <para>If the flag is <b>TRUE</b>, the file is mapped by the system as an image. If this flag is <b>FALSE</b>, the file is mapped as a data file by the
<see cref="MapViewOfFile" /> function.</para>
    </param>
    <param name="DirectoryEntry">
      <para>The directory entry to be located. The value must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_ARCHITECTURE</b>
                </description>
              </item>
              <item>
                <description>7</description>
              </item>
            </list>
          </description>
          <description>
            <para>Architecture-specific data</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_BASERELOC</b>
                </description>
              </item>
              <item>
                <description>5</description>
              </item>
            </list>
          </description>
          <description>
            <para>Base relocation table</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT</b>
                </description>
              </item>
              <item>
                <description>11</description>
              </item>
            </list>
          </description>
          <description>
            <para>Bound import directory</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR</b>
                </description>
              </item>
              <item>
                <description>14</description>
              </item>
            </list>
          </description>
          <description>
            <para>COM descriptor table</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_DEBUG</b>
                </description>
              </item>
              <item>
                <description>6</description>
              </item>
            </list>
          </description>
          <description>
            <para>Debug directory</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT</b>
                </description>
              </item>
              <item>
                <description>13</description>
              </item>
            </list>
          </description>
          <description>
            <para>Delay import table</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_EXCEPTION</b>
                </description>
              </item>
              <item>
                <description>3</description>
              </item>
            </list>
          </description>
          <description>
            <para>Exception directory</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_EXPORT</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Export directory</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_GLOBALPTR</b>
                </description>
              </item>
              <item>
                <description>8</description>
              </item>
            </list>
          </description>
          <description>
            <para>The relative virtual address of global pointer</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_IAT</b>
                </description>
              </item>
              <item>
                <description>12</description>
              </item>
            </list>
          </description>
          <description>
            <para>Import address table</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_IMPORT</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Import directory</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG</b>
                </description>
              </item>
              <item>
                <description>10</description>
              </item>
            </list>
          </description>
          <description>
            <para>Load configuration directory</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_RESOURCE</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Resource directory</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_SECURITY</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Security directory</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_DIRECTORY_ENTRY_TLS</b>
                </description>
              </item>
              <item>
                <description>9</description>
              </item>
            </list>
          </description>
          <description>
            <para>Thread local storage directory</para>
          </description>
        </item>
      </list>
    </param>
    <param name="Size">
      <para>A pointer to a variable that receives the size of the data for the directory entry that is located.</para>
    </param>
    <param name="FoundHeader">
      <para>A pointer to an
<see cref="IMAGE_SECTION_HEADER" /> structure that receives the data. If the section header does not exist, this parameter is <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the data for the directory entry.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGE_SECTION_HEADER" />
    <seealso cref="MapViewOfFile" />
  </member>
  <member name="Windows.ImagehlpApiVersion">
    <summary>
      <para>Retrieves the version information of the DbgHelp library installed on the system.</para>
      <para>To indicate the version of the library with which the application was built, use the
<see cref="ImagehlpApiVersionEx" /> function.</para>
    </summary>
    <returns>
      <para>The return value is a pointer to an
<see cref="API_VERSION" /> structure.</para>
    </returns>
    <remarks>
      <para>Use the information in the
<see cref="API_VERSION" /> structure to determine whether the version of the library installed on the system is compatible with the version of the library used by the application. Although the library functions are backward compatible, functions introduced in one version are obviously not available in earlier versions.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso cref="API_VERSION" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="ImagehlpApiVersionEx" />
  </member>
  <member name="Windows.ImagehlpApiVersionEx">
    <summary>
      <para>Modifies the version information of the library used by the application.</para>
    </summary>
    <param name="AppVersion">
      <para>A pointer to an
<see cref="API_VERSION" /> structure that contains valid version information for your application.</para>
    </param>
    <returns>
      <para>The return value is a pointer to an
<see cref="API_VERSION" /> structure.</para>
    </returns>
    <remarks>
      <para>Use the
<b>ImagehlpApiVersionEx</b> function to indicate the version of the library with which the application was built. The library uses this information to ensure compatibility. For example, consider walking through kernel-mode callback stack frames (User and GDI exist in kernel mode). If you call
<b>ImagehlpApiVersionEx</b> to set the <b>Revision</b> member to version 4 or later, the
<see cref="StackWalk64" /> function will continue through a callback stack frame. Otherwise, if you set <b>Revision</b> to a version earlier than 4,
<b>StackWalk64</b> will stop at the kernel transition.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso cref="API_VERSION" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="ImagehlpApiVersion" />
  </member>
  <member name="Windows.ImageNtHeader">
    <summary>
      <para>Locates the
<see cref="IMAGE_NT_HEADERS" /> structure in a PE image and returns a pointer to the data.</para>
    </summary>
    <param name="Base">
      <para>The base address of an image that is mapped into memory by a call to the
<see cref="MapViewOfFile" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to an
<see cref="IMAGE_NT_HEADERS" /> structure.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGE_NT_HEADERS" />
    <seealso cref="MapViewOfFile" />
  </member>
  <member name="Windows.ImageRvaToSection">
    <summary>
      <para>Locates a relative virtual address (RVA) within the image header of a file that is mapped as a file and returns a pointer to the section table entry for that RVA.</para>
    </summary>
    <param name="NtHeaders">
      <para>A pointer to an
<see cref="IMAGE_NT_HEADERS" /> structure. This structure can be obtained by calling the
<see cref="ImageNtHeader" /> function.</para>
    </param>
    <param name="Base">
      <para>This parameter is reserved.</para>
    </param>
    <param name="Rva">
      <para>The relative virtual address to be located.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to an
<see cref="IMAGE_SECTION_HEADER" /> structure.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGE_NT_HEADERS" />
    <seealso cref="IMAGE_SECTION_HEADER" />
    <seealso cref="ImageNtHeader" />
    <seealso cref="MapViewOfFile" />
  </member>
  <member name="Windows.ImageRvaToVa">
    <summary>
      <para>Locates a relative virtual address (RVA) within the image header of a file that is mapped as a file and returns the virtual address of the corresponding byte in the file.</para>
    </summary>
    <param name="NtHeaders">
      <para>A pointer to an
<see cref="IMAGE_NT_HEADERS" /> structure. This structure can be obtained by calling the
<see cref="ImageNtHeader" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of an image that is mapped into memory through a call to the
<see cref="MapViewOfFile" /> function.</para>
    </param>
    <param name="Rva">
      <para>The relative virtual address to be located.</para>
    </param>
    <param name="LastRvaSection">
      <para>A pointer to an
<see cref="IMAGE_SECTION_HEADER" /> structure that specifies the last RVA section. This is an optional parameter. When specified, it points to a variable that contains the last section value used for the specified image to translate an RVA to a VA.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the virtual address in the mapped file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>ImageRvaToVa</b> function locates an RVA within the image header of a file that is mapped as a file and returns the virtual address of the corresponding byte in the file.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGE_NT_HEADERS" />
    <seealso cref="IMAGE_SECTION_HEADER" />
    <seealso cref="ImageNtHeader" />
    <seealso cref="MapViewOfFile" />
  </member>
  <member name="Windows.MakeSureDirectoryPathExists">
    <summary>
      <para>Creates all the directories in the specified path, beginning with the root.</para>
    </summary>
    <param name="DirPath">
      <para>A valid path name. If the final component of the path is a directory, not a file name, the string must end
with a backslash (\) character.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Each directory specified is created, if it does not already exist. If only some of the directories are
created, the function will return <b>FALSE</b>.</para>
      <para>This function does not support Unicode strings. To specify a Unicode path, use the
<see cref="SHCreateDirectoryEx" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.MapDebugInformation">
    <summary>
      <para>Obtains access to the debugging information for an image.
<b>Note</b>  This function is provided only for backward compatibility. It does not return reliable information. New applications should use the
<see cref="SymGetModuleInfo64" /> and
<see cref="SymLoadModule64" /> functions.</para>
    </summary>
    <param name="FileHandle">
      <para>A handle to an open executable image or <b>NULL</b>.</para>
    </param>
    <param name="FileName">
      <para>The name of an executable image file or <b>NULL</b>.</para>
    </param>
    <param name="SymbolPath">
      <para>The path where symbol files are located. The path can be multiple paths separated by semicolons. To retrieve the symbol path, use the
<see cref="SymGetSearchPath" /> function.</para>
    </param>
    <param name="ImageBase">
      <para>The base address for the image or zero.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to an
<see cref="IMAGE_DEBUG_INFORMATION" /> structure.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>MapDebugInformation</b> function is used to obtain access to an image's debugging information. The debugging information is extracted from the image or the symbol file and placed into the
<see cref="IMAGE_DEBUG_INFORMATION" /> structure. This structure is allocated by the library and must be deallocated by using the
<see cref="UnmapDebugInformation" /> function. The memory for the structure is not in the process's default heap, so attempts to free it with a memory deallocation routine will fail.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGE_DEBUG_INFORMATION" />
    <seealso cref="SymGetSearchPath" />
    <seealso cref="UnmapDebugInformation" />
  </member>
  <member name="Windows.SearchTreeForFile">
    <summary>
      <para>Searches a directory tree for a specified file.</para>
    </summary>
    <param name="RootPath">
      <para>The path where the function should begin searching for the file.</para>
    </param>
    <param name="InputPathName">
      <para>The file for which the function will search. You can use a partial path.</para>
    </param>
    <param name="OutputPathBuffer">
      <para>A pointer to a buffer that receives the full path to the file that is found. This string is not modified if the return value is <b>FALSE</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The function searches for the file specified by the <i>InputPathName</i> parameter beginning at the path specified in the <i>RootPath</i> parameter. The maximum path depth that is allowed in the <i>RootPath</i> is 32 directories. When the function finds the file in the directory tree, it places the full path to the file in the buffer specified by the <i>OutputPathBuffer</i> parameter. The underlying file system specifies the order of the subdirectory search.</para>
      <para>The search can be canceled if you register a
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function. For every directory searched,
<b>SearchTreeForFile</b> calls this callback function with CBA_DEFERRED_SYMBOL_LOAD_CANCEL. If the callback function returns <b>TRUE</b>,
<b>SearchTreeForFile</b> cancels the search.</para>
      <para>This function triggers one CBA_DEFERRED_SYMBOL_LOAD_CANCEL event per directory searched. This allows the caller to cancel the search.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SearchTreeForFileW">
    <summary>
      <para>Searches a directory tree for a specified file.</para>
    </summary>
    <param name="RootPath">
      <para>The path where the function should begin searching for the file.</para>
    </param>
    <param name="InputPathName">
      <para>The file for which the function will search. You can use a partial path.</para>
    </param>
    <param name="OutputPathBuffer">
      <para>A pointer to a buffer that receives the full path to the file that is found. This string is not modified if the return value is <b>FALSE</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The function searches for the file specified by the <i>InputPathName</i> parameter beginning at the path specified in the <i>RootPath</i> parameter. The maximum path depth that is allowed in the <i>RootPath</i> is 32 directories. When the function finds the file in the directory tree, it places the full path to the file in the buffer specified by the <i>OutputPathBuffer</i> parameter. The underlying file system specifies the order of the subdirectory search.</para>
      <para>The search can be canceled if you register a
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function. For every directory searched,
<b>SearchTreeForFile</b> calls this callback function with CBA_DEFERRED_SYMBOL_LOAD_CANCEL. If the callback function returns <b>TRUE</b>,
<b>SearchTreeForFile</b> cancels the search.</para>
      <para>This function triggers one CBA_DEFERRED_SYMBOL_LOAD_CANCEL event per directory searched. This allows the caller to cancel the search.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SearchTreeForFile">
    <summary>
      <para>Searches a directory tree for a specified file.</para>
    </summary>
    <param name="RootPath">
      <para>The path where the function should begin searching for the file.</para>
    </param>
    <param name="InputPathName">
      <para>The file for which the function will search. You can use a partial path.</para>
    </param>
    <param name="OutputPathBuffer">
      <para>A pointer to a buffer that receives the full path to the file that is found. This string is not modified if the return value is <b>FALSE</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The function searches for the file specified by the <i>InputPathName</i> parameter beginning at the path specified in the <i>RootPath</i> parameter. The maximum path depth that is allowed in the <i>RootPath</i> is 32 directories. When the function finds the file in the directory tree, it places the full path to the file in the buffer specified by the <i>OutputPathBuffer</i> parameter. The underlying file system specifies the order of the subdirectory search.</para>
      <para>The search can be canceled if you register a
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function. For every directory searched,
<b>SearchTreeForFile</b> calls this callback function with CBA_DEFERRED_SYMBOL_LOAD_CANCEL. If the callback function returns <b>TRUE</b>,
<b>SearchTreeForFile</b> cancels the search.</para>
      <para>This function triggers one CBA_DEFERRED_SYMBOL_LOAD_CANCEL event per directory searched. This allows the caller to cancel the search.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SearchTreeForFile as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SearchTreeForFileW">
    <summary>
      <para>Searches a directory tree for a specified file.</para>
    </summary>
    <param name="RootPath">
      <para>The path where the function should begin searching for the file.</para>
    </param>
    <param name="InputPathName">
      <para>The file for which the function will search. You can use a partial path.</para>
    </param>
    <param name="OutputPathBuffer">
      <para>A pointer to a buffer that receives the full path to the file that is found. This string is not modified if the return value is <b>FALSE</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The function searches for the file specified by the <i>InputPathName</i> parameter beginning at the path specified in the <i>RootPath</i> parameter. The maximum path depth that is allowed in the <i>RootPath</i> is 32 directories. When the function finds the file in the directory tree, it places the full path to the file in the buffer specified by the <i>OutputPathBuffer</i> parameter. The underlying file system specifies the order of the subdirectory search.</para>
      <para>The search can be canceled if you register a
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function. For every directory searched,
<b>SearchTreeForFile</b> calls this callback function with CBA_DEFERRED_SYMBOL_LOAD_CANCEL. If the callback function returns <b>TRUE</b>,
<b>SearchTreeForFile</b> cancels the search.</para>
      <para>This function triggers one CBA_DEFERRED_SYMBOL_LOAD_CANCEL event per directory searched. This allows the caller to cancel the search.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SearchTreeForFile as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SetSymLoadError">
    <summary>
      <para>Sets a symbol load error.</para>
    </summary>
    <param name="error">
      <para>A symbol load error.</para>
    </param>
    <returns>
      <para>This function does not return a value.</para>
    </returns>
  </member>
  <member name="Windows.StackWalk">
    <summary>
      <para>Obtains a stack trace.</para>
    </summary>
    <param name="MachineType">
      <para>The architecture type of the computer for which the stack trace is generated. This parameter can be one of
the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_FILE_MACHINE_I386</b>
                </description>
              </item>
              <item>
                <description>0x014c</description>
              </item>
            </list>
          </description>
          <description>
            <para>Intel x86</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_FILE_MACHINE_IA64</b>
                </description>
              </item>
              <item>
                <description>0x0200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Intel Itanium</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_FILE_MACHINE_AMD64</b>
                </description>
              </item>
              <item>
                <description>0x8664</description>
              </item>
            </list>
          </description>
          <description>
            <para>x64 (AMD64 or EM64T)</para>
          </description>
        </item>
      </list>
    </param>
    <param name="hProcess">
      <para>A handle to the process for which the stack trace is generated. If the caller supplies a valid callback
pointer for the <i>ReadMemoryRoutine</i> parameter, then this value does not have to be a
valid process handle. It can be a token that is unique and consistently the same for all calls to the
<b>StackWalk64</b> function. If the symbol handler is used with
<b>StackWalk64</b>, use the same process handles for the calls
to each function.</para>
    </param>
    <param name="hThread">
      <para>A handle to the thread for which the stack trace is generated. If the caller supplies a valid callback
pointer for the <i>ReadMemoryRoutine</i> parameter, then this value does not have to be a
valid thread handle. It can be a token that is unique and consistently the same for all calls to the
<b>StackWalk64</b> function.</para>
    </param>
    <param name="StackFrame">
      <para>A pointer to a <see cref="STACKFRAME64" /> structure. This
structure receives information for the next frame, if the function call succeeds.</para>
    </param>
    <param name="ContextRecord">
      <para>A pointer to a <see cref="CONTEXT" /> structure. This parameter is
required only when the <i>MachineType</i> parameter is not
<b>IMAGE_FILE_MACHINE_I386</b>. However, it is recommended that this parameter contain a
valid context record. This allows <b>StackWalk64</b> to handle
a greater variety of situations.</para>
      <para>This context may be modified, so do not pass a context record that should not be modified.</para>
    </param>
    <param name="ReadMemoryRoutine">
      <para>A callback routine that provides memory read services. When the
<b>StackWalk64</b> function needs to read memory from the
process's address space, the
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pread_process_memory_routine">ReadProcessMemoryProc64</a> callback is
used.</para>
      <para>If this parameter is <b>NULL</b>, then the function uses a default routine. In this case,
the <i>hProcess</i> parameter must be a valid process handle.</para>
      <para>If this parameter is not
<b>NULL</b>, the application should implement and register a symbol handler callback
function that handles <b>CBA_READ_MEMORY</b>.</para>
    </param>
    <param name="FunctionTableAccessRoutine">
      <para>A callback routine that provides access to the run-time function table for the process. This parameter is
required because the <b>StackWalk64</b> function does not have
access to the process's run-time function table. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfunction_table_access_routine">FunctionTableAccessProc64</a>.</para>
      <para>The symbol handler provides functions that load and access the run-time table. If these functions are used,
then <see cref="SymFunctionTableAccess64" /> can be
passed as a valid parameter.</para>
    </param>
    <param name="GetModuleBaseRoutine">
      <para>A callback routine that provides a module base for any given virtual address. This parameter is required. For
more information, see <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pget_module_base_routine">GetModuleBaseProc64</a>.</para>
      <para>The symbol handler provides functions that load and maintain module information. If these functions are used,
then <see cref="SymGetModuleBase64" /> can be passed as a valid
parameter.</para>
    </param>
    <param name="TranslateAddress">
      <para>A callback routine that provides address translation for 16-bit addresses. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-ptranslate_address_routine">TranslateAddressProc64</a>.</para>
      <para>Most callers of <b>StackWalk64</b> can safely pass
<b>NULL</b> for this parameter.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. Note that
<b>StackWalk64</b> generally does not set the last error
code.</para>
    </returns>
    <remarks>
      <para>The <b>StackWalk64</b> function provides a portable method
for obtaining a stack trace. Using the <b>StackWalk64</b></para>
      <para>function is recommended over writing your own function because of all the complexities associated with stack
walking on platforms. In addition, there are compiler options that cause the stack to appear differently,
depending on how the module is compiled. By using this function, your application has a portable stack trace that
continues to work as the compiler and operating system change.</para>
      <para>The first call to this function will fail if the <b>AddrPC</b>,
<b>AddrFrame</b>, and <b>AddrStack</b> members of the
<see cref="STACKFRAME64" /> structure passed in the
<i>StackFrame</i> parameter are not initialized.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>StackWalk</b> function. For
more information, see <a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>.
<b>StackWalk</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define StackWalk StackWalk64
#else
BOOL
IMAGEAPI
StackWalk(
    DWORD MachineType,
    __in HANDLE hProcess,
    __in HANDLE hThread,
    __inout LPSTACKFRAME StackFrame,
    __inout PVOID ContextRecord,
    __in_opt PREAD_PROCESS_MEMORY_ROUTINE ReadMemoryRoutine,
    __in_opt PFUNCTION_TABLE_ACCESS_ROUTINE FunctionTableAccessRoutine,
    __in_opt PGET_MODULE_BASE_ROUTINE GetModuleBaseRoutine,
    __in_opt PTRANSLATE_ADDRESS_ROUTINE TranslateAddress
    );

#endif
</code>
    </remarks>
    <seealso cref="CONTEXT" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfunction_table_access_routine">FunctionTableAccessProc64</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pget_module_base_routine">GetModuleBaseProc64</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pread_process_memory_routine">ReadProcessMemoryProc64</seealso>
    <seealso cref="STACKFRAME64" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-ptranslate_address_routine">TranslateAddressProc64</seealso>
  </member>
  <member name="Windows.StackWalk64">
    <summary>
      <para>Obtains a stack trace.</para>
    </summary>
    <param name="MachineType">
      <para>The architecture type of the computer for which the stack trace is generated. This parameter can be one of
the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_FILE_MACHINE_I386</b>
                </description>
              </item>
              <item>
                <description>0x014c</description>
              </item>
            </list>
          </description>
          <description>
            <para>Intel x86</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_FILE_MACHINE_IA64</b>
                </description>
              </item>
              <item>
                <description>0x0200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Intel Itanium</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_FILE_MACHINE_AMD64</b>
                </description>
              </item>
              <item>
                <description>0x8664</description>
              </item>
            </list>
          </description>
          <description>
            <para>x64 (AMD64 or EM64T)</para>
          </description>
        </item>
      </list>
    </param>
    <param name="hProcess">
      <para>A handle to the process for which the stack trace is generated. If the caller supplies a valid callback
pointer for the <i>ReadMemoryRoutine</i> parameter, then this value does not have to be a
valid process handle. It can be a token that is unique and consistently the same for all calls to the
<b>StackWalk64</b> function. If the symbol handler is used with
<b>StackWalk64</b>, use the same process handles for the calls
to each function.</para>
    </param>
    <param name="hThread">
      <para>A handle to the thread for which the stack trace is generated. If the caller supplies a valid callback
pointer for the <i>ReadMemoryRoutine</i> parameter, then this value does not have to be a
valid thread handle. It can be a token that is unique and consistently the same for all calls to the
<b>StackWalk64</b> function.</para>
    </param>
    <param name="StackFrame">
      <para>A pointer to a <see cref="STACKFRAME64" /> structure. This
structure receives information for the next frame, if the function call succeeds.</para>
    </param>
    <param name="ContextRecord">
      <para>A pointer to a <see cref="CONTEXT" /> structure. This parameter is
required only when the <i>MachineType</i> parameter is not
<b>IMAGE_FILE_MACHINE_I386</b>. However, it is recommended that this parameter contain a
valid context record. This allows <b>StackWalk64</b> to handle
a greater variety of situations.</para>
      <para>This context may be modified, so do not pass a context record that should not be modified.</para>
    </param>
    <param name="ReadMemoryRoutine">
      <para>A callback routine that provides memory read services. When the
<b>StackWalk64</b> function needs to read memory from the
process's address space, the
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pread_process_memory_routine">ReadProcessMemoryProc64</a> callback is
used.</para>
      <para>If this parameter is <b>NULL</b>, then the function uses a default routine. In this case,
the <i>hProcess</i> parameter must be a valid process handle.</para>
      <para>If this parameter is not
<b>NULL</b>, the application should implement and register a symbol handler callback
function that handles <b>CBA_READ_MEMORY</b>.</para>
    </param>
    <param name="FunctionTableAccessRoutine">
      <para>A callback routine that provides access to the run-time function table for the process. This parameter is
required because the <b>StackWalk64</b> function does not have
access to the process's run-time function table. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfunction_table_access_routine">FunctionTableAccessProc64</a>.</para>
      <para>The symbol handler provides functions that load and access the run-time table. If these functions are used,
then <see cref="SymFunctionTableAccess64" /> can be
passed as a valid parameter.</para>
    </param>
    <param name="GetModuleBaseRoutine">
      <para>A callback routine that provides a module base for any given virtual address. This parameter is required. For
more information, see <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pget_module_base_routine">GetModuleBaseProc64</a>.</para>
      <para>The symbol handler provides functions that load and maintain module information. If these functions are used,
then <see cref="SymGetModuleBase64" /> can be passed as a valid
parameter.</para>
    </param>
    <param name="TranslateAddress">
      <para>A callback routine that provides address translation for 16-bit addresses. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-ptranslate_address_routine">TranslateAddressProc64</a>.</para>
      <para>Most callers of <b>StackWalk64</b> can safely pass
<b>NULL</b> for this parameter.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. Note that
<b>StackWalk64</b> generally does not set the last error
code.</para>
    </returns>
    <remarks>
      <para>The <b>StackWalk64</b> function provides a portable method
for obtaining a stack trace. Using the <b>StackWalk64</b></para>
      <para>function is recommended over writing your own function because of all the complexities associated with stack
walking on platforms. In addition, there are compiler options that cause the stack to appear differently,
depending on how the module is compiled. By using this function, your application has a portable stack trace that
continues to work as the compiler and operating system change.</para>
      <para>The first call to this function will fail if the <b>AddrPC</b>,
<b>AddrFrame</b>, and <b>AddrStack</b> members of the
<see cref="STACKFRAME64" /> structure passed in the
<i>StackFrame</i> parameter are not initialized.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>StackWalk</b> function. For
more information, see <a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>.
<b>StackWalk</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define StackWalk StackWalk64
#else
BOOL
IMAGEAPI
StackWalk(
    DWORD MachineType,
    __in HANDLE hProcess,
    __in HANDLE hThread,
    __inout LPSTACKFRAME StackFrame,
    __inout PVOID ContextRecord,
    __in_opt PREAD_PROCESS_MEMORY_ROUTINE ReadMemoryRoutine,
    __in_opt PFUNCTION_TABLE_ACCESS_ROUTINE FunctionTableAccessRoutine,
    __in_opt PGET_MODULE_BASE_ROUTINE GetModuleBaseRoutine,
    __in_opt PTRANSLATE_ADDRESS_ROUTINE TranslateAddress
    );

#endif
</code>
    </remarks>
    <seealso cref="CONTEXT" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfunction_table_access_routine">FunctionTableAccessProc64</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pget_module_base_routine">GetModuleBaseProc64</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pread_process_memory_routine">ReadProcessMemoryProc64</seealso>
    <seealso cref="STACKFRAME64" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-ptranslate_address_routine">TranslateAddressProc64</seealso>
  </member>
  <member name="Windows.StackWalk">
    <summary>
      <para>Obtains a stack trace.</para>
    </summary>
    <param name="MachineType">
      <para>The architecture type of the computer for which the stack trace is generated. This parameter can be one of
the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_FILE_MACHINE_I386</b>
                </description>
              </item>
              <item>
                <description>0x014c</description>
              </item>
            </list>
          </description>
          <description>
            <para>Intel x86</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_FILE_MACHINE_IA64</b>
                </description>
              </item>
              <item>
                <description>0x0200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Intel Itanium</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_FILE_MACHINE_AMD64</b>
                </description>
              </item>
              <item>
                <description>0x8664</description>
              </item>
            </list>
          </description>
          <description>
            <para>x64 (AMD64 or EM64T)</para>
          </description>
        </item>
      </list>
    </param>
    <param name="hProcess">
      <para>A handle to the process for which the stack trace is generated. If the caller supplies a valid callback
pointer for the <i>ReadMemoryRoutine</i> parameter, then this value does not have to be a
valid process handle. It can be a token that is unique and consistently the same for all calls to the
<b>StackWalk64</b> function. If the symbol handler is used with
<b>StackWalk64</b>, use the same process handles for the calls
to each function.</para>
    </param>
    <param name="hThread">
      <para>A handle to the thread for which the stack trace is generated. If the caller supplies a valid callback
pointer for the <i>ReadMemoryRoutine</i> parameter, then this value does not have to be a
valid thread handle. It can be a token that is unique and consistently the same for all calls to the
<b>StackWalk64</b> function.</para>
    </param>
    <param name="StackFrame">
      <para>A pointer to a <see cref="STACKFRAME64" /> structure. This
structure receives information for the next frame, if the function call succeeds.</para>
    </param>
    <param name="ContextRecord">
      <para>A pointer to a <see cref="CONTEXT" /> structure. This parameter is
required only when the <i>MachineType</i> parameter is not
<b>IMAGE_FILE_MACHINE_I386</b>. However, it is recommended that this parameter contain a
valid context record. This allows <b>StackWalk64</b> to handle
a greater variety of situations.</para>
      <para>This context may be modified, so do not pass a context record that should not be modified.</para>
    </param>
    <param name="ReadMemoryRoutine">
      <para>A callback routine that provides memory read services. When the
<b>StackWalk64</b> function needs to read memory from the
process's address space, the
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pread_process_memory_routine">ReadProcessMemoryProc64</a> callback is
used.</para>
      <para>If this parameter is <b>NULL</b>, then the function uses a default routine. In this case,
the <i>hProcess</i> parameter must be a valid process handle.</para>
      <para>If this parameter is not
<b>NULL</b>, the application should implement and register a symbol handler callback
function that handles <b>CBA_READ_MEMORY</b>.</para>
    </param>
    <param name="FunctionTableAccessRoutine">
      <para>A callback routine that provides access to the run-time function table for the process. This parameter is
required because the <b>StackWalk64</b> function does not have
access to the process's run-time function table. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfunction_table_access_routine">FunctionTableAccessProc64</a>.</para>
      <para>The symbol handler provides functions that load and access the run-time table. If these functions are used,
then <see cref="SymFunctionTableAccess64" /> can be
passed as a valid parameter.</para>
    </param>
    <param name="GetModuleBaseRoutine">
      <para>A callback routine that provides a module base for any given virtual address. This parameter is required. For
more information, see <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pget_module_base_routine">GetModuleBaseProc64</a>.</para>
      <para>The symbol handler provides functions that load and maintain module information. If these functions are used,
then <see cref="SymGetModuleBase64" /> can be passed as a valid
parameter.</para>
    </param>
    <param name="TranslateAddress">
      <para>A callback routine that provides address translation for 16-bit addresses. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-ptranslate_address_routine">TranslateAddressProc64</a>.</para>
      <para>Most callers of <b>StackWalk64</b> can safely pass
<b>NULL</b> for this parameter.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. Note that
<b>StackWalk64</b> generally does not set the last error
code.</para>
    </returns>
    <remarks>
      <para>The <b>StackWalk64</b> function provides a portable method
for obtaining a stack trace. Using the <b>StackWalk64</b></para>
      <para>function is recommended over writing your own function because of all the complexities associated with stack
walking on platforms. In addition, there are compiler options that cause the stack to appear differently,
depending on how the module is compiled. By using this function, your application has a portable stack trace that
continues to work as the compiler and operating system change.</para>
      <para>The first call to this function will fail if the <b>AddrPC</b>,
<b>AddrFrame</b>, and <b>AddrStack</b> members of the
<see cref="STACKFRAME64" /> structure passed in the
<i>StackFrame</i> parameter are not initialized.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>StackWalk</b> function. For
more information, see <a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>.
<b>StackWalk</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define StackWalk StackWalk64
#else
BOOL
IMAGEAPI
StackWalk(
    DWORD MachineType,
    __in HANDLE hProcess,
    __in HANDLE hThread,
    __inout LPSTACKFRAME StackFrame,
    __inout PVOID ContextRecord,
    __in_opt PREAD_PROCESS_MEMORY_ROUTINE ReadMemoryRoutine,
    __in_opt PFUNCTION_TABLE_ACCESS_ROUTINE FunctionTableAccessRoutine,
    __in_opt PGET_MODULE_BASE_ROUTINE GetModuleBaseRoutine,
    __in_opt PTRANSLATE_ADDRESS_ROUTINE TranslateAddress
    );

#endif
</code>
    </remarks>
    <seealso cref="CONTEXT" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfunction_table_access_routine">FunctionTableAccessProc64</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pget_module_base_routine">GetModuleBaseProc64</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pread_process_memory_routine">ReadProcessMemoryProc64</seealso>
    <seealso cref="STACKFRAME64" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-ptranslate_address_routine">TranslateAddressProc64</seealso>
  </member>
  <member name="Windows.StackWalk64">
    <summary>
      <para>Obtains a stack trace.</para>
    </summary>
    <param name="MachineType">
      <para>The architecture type of the computer for which the stack trace is generated. This parameter can be one of
the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_FILE_MACHINE_I386</b>
                </description>
              </item>
              <item>
                <description>0x014c</description>
              </item>
            </list>
          </description>
          <description>
            <para>Intel x86</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_FILE_MACHINE_IA64</b>
                </description>
              </item>
              <item>
                <description>0x0200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Intel Itanium</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_FILE_MACHINE_AMD64</b>
                </description>
              </item>
              <item>
                <description>0x8664</description>
              </item>
            </list>
          </description>
          <description>
            <para>x64 (AMD64 or EM64T)</para>
          </description>
        </item>
      </list>
    </param>
    <param name="hProcess">
      <para>A handle to the process for which the stack trace is generated. If the caller supplies a valid callback
pointer for the <i>ReadMemoryRoutine</i> parameter, then this value does not have to be a
valid process handle. It can be a token that is unique and consistently the same for all calls to the
<b>StackWalk64</b> function. If the symbol handler is used with
<b>StackWalk64</b>, use the same process handles for the calls
to each function.</para>
    </param>
    <param name="hThread">
      <para>A handle to the thread for which the stack trace is generated. If the caller supplies a valid callback
pointer for the <i>ReadMemoryRoutine</i> parameter, then this value does not have to be a
valid thread handle. It can be a token that is unique and consistently the same for all calls to the
<b>StackWalk64</b> function.</para>
    </param>
    <param name="StackFrame">
      <para>A pointer to a <see cref="STACKFRAME64" /> structure. This
structure receives information for the next frame, if the function call succeeds.</para>
    </param>
    <param name="ContextRecord">
      <para>A pointer to a <see cref="CONTEXT" /> structure. This parameter is
required only when the <i>MachineType</i> parameter is not
<b>IMAGE_FILE_MACHINE_I386</b>. However, it is recommended that this parameter contain a
valid context record. This allows <b>StackWalk64</b> to handle
a greater variety of situations.</para>
      <para>This context may be modified, so do not pass a context record that should not be modified.</para>
    </param>
    <param name="ReadMemoryRoutine">
      <para>A callback routine that provides memory read services. When the
<b>StackWalk64</b> function needs to read memory from the
process's address space, the
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pread_process_memory_routine">ReadProcessMemoryProc64</a> callback is
used.</para>
      <para>If this parameter is <b>NULL</b>, then the function uses a default routine. In this case,
the <i>hProcess</i> parameter must be a valid process handle.</para>
      <para>If this parameter is not
<b>NULL</b>, the application should implement and register a symbol handler callback
function that handles <b>CBA_READ_MEMORY</b>.</para>
    </param>
    <param name="FunctionTableAccessRoutine">
      <para>A callback routine that provides access to the run-time function table for the process. This parameter is
required because the <b>StackWalk64</b> function does not have
access to the process's run-time function table. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfunction_table_access_routine">FunctionTableAccessProc64</a>.</para>
      <para>The symbol handler provides functions that load and access the run-time table. If these functions are used,
then <see cref="SymFunctionTableAccess64" /> can be
passed as a valid parameter.</para>
    </param>
    <param name="GetModuleBaseRoutine">
      <para>A callback routine that provides a module base for any given virtual address. This parameter is required. For
more information, see <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pget_module_base_routine">GetModuleBaseProc64</a>.</para>
      <para>The symbol handler provides functions that load and maintain module information. If these functions are used,
then <see cref="SymGetModuleBase64" /> can be passed as a valid
parameter.</para>
    </param>
    <param name="TranslateAddress">
      <para>A callback routine that provides address translation for 16-bit addresses. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-ptranslate_address_routine">TranslateAddressProc64</a>.</para>
      <para>Most callers of <b>StackWalk64</b> can safely pass
<b>NULL</b> for this parameter.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. Note that
<b>StackWalk64</b> generally does not set the last error
code.</para>
    </returns>
    <remarks>
      <para>The <b>StackWalk64</b> function provides a portable method
for obtaining a stack trace. Using the <b>StackWalk64</b></para>
      <para>function is recommended over writing your own function because of all the complexities associated with stack
walking on platforms. In addition, there are compiler options that cause the stack to appear differently,
depending on how the module is compiled. By using this function, your application has a portable stack trace that
continues to work as the compiler and operating system change.</para>
      <para>The first call to this function will fail if the <b>AddrPC</b>,
<b>AddrFrame</b>, and <b>AddrStack</b> members of the
<see cref="STACKFRAME64" /> structure passed in the
<i>StackFrame</i> parameter are not initialized.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>StackWalk</b> function. For
more information, see <a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>.
<b>StackWalk</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define StackWalk StackWalk64
#else
BOOL
IMAGEAPI
StackWalk(
    DWORD MachineType,
    __in HANDLE hProcess,
    __in HANDLE hThread,
    __inout LPSTACKFRAME StackFrame,
    __inout PVOID ContextRecord,
    __in_opt PREAD_PROCESS_MEMORY_ROUTINE ReadMemoryRoutine,
    __in_opt PFUNCTION_TABLE_ACCESS_ROUTINE FunctionTableAccessRoutine,
    __in_opt PGET_MODULE_BASE_ROUTINE GetModuleBaseRoutine,
    __in_opt PTRANSLATE_ADDRESS_ROUTINE TranslateAddress
    );

#endif
</code>
    </remarks>
    <seealso cref="CONTEXT" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfunction_table_access_routine">FunctionTableAccessProc64</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pget_module_base_routine">GetModuleBaseProc64</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pread_process_memory_routine">ReadProcessMemoryProc64</seealso>
    <seealso cref="STACKFRAME64" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-ptranslate_address_routine">TranslateAddressProc64</seealso>
  </member>
  <member name="Windows.StackWalkEx">
    <summary>
      <para>Obtains a stack trace.</para>
    </summary>
    <param name="MachineType">
      <para>The architecture type of the computer for which the stack trace is generated. This parameter can be one of
the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_FILE_MACHINE_I386</b>
                </description>
              </item>
              <item>
                <description>0x014c</description>
              </item>
            </list>
          </description>
          <description>
            <para>Intel x86</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_FILE_MACHINE_IA64</b>
                </description>
              </item>
              <item>
                <description>0x0200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Intel Itanium</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>IMAGE_FILE_MACHINE_AMD64</b>
                </description>
              </item>
              <item>
                <description>0x8664</description>
              </item>
            </list>
          </description>
          <description>
            <para>x64 (AMD64 or EM64T)</para>
          </description>
        </item>
      </list>
    </param>
    <param name="hProcess">
      <para>A handle to the process for which the stack trace is generated. If the caller supplies a valid callback
pointer for the <i>ReadMemoryRoutine</i> parameter, then this value does not have to be a
valid process handle. It can be a token that is unique and consistently the same for all calls to the
<b>StackWalkEx</b> function. If the symbol handler is used with
<b>StackWalkEx</b>, use the same process handles for the calls
to each function.</para>
    </param>
    <param name="hThread">
      <para>A handle to the thread for which the stack trace is generated. If the caller supplies a valid callback
pointer for the <i>ReadMemoryRoutine</i> parameter, then this value does not have to be a
valid thread handle. It can be a token that is unique and consistently the same for all calls to the
<b>StackWalkEx</b> function.</para>
    </param>
    <param name="StackFrame">
      <para>A pointer to a <see cref="STACKFRAME_EX" /> structure. This
structure receives information for the next frame, if the function call succeeds.</para>
    </param>
    <param name="ContextRecord">
      <para>A pointer to a <see cref="CONTEXT" /> structure. This parameter is
required only when the <i>MachineType</i> parameter is not
<b>IMAGE_FILE_MACHINE_I386</b>. However, it is recommended that this parameter contain a
valid context record. This allows <b>StackWalkEx</b> to handle
a greater variety of situations.</para>
      <para>This context may be modified, so do not pass a context record that should not be modified.</para>
    </param>
    <param name="ReadMemoryRoutine">
      <para>A callback routine that provides memory read services. When the
<b>StackWalkEx</b> function needs to read memory from the
process's address space, the
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pread_process_memory_routine">ReadProcessMemoryProc64</a> callback is
used.</para>
      <para>If this parameter is <b>NULL</b>, then the function uses a default routine. In this case,
the <i>hProcess</i> parameter must be a valid process handle.</para>
      <para>If this parameter is not
<b>NULL</b>, the application should implement and register a symbol handler callback
function that handles <b>CBA_READ_MEMORY</b>.</para>
    </param>
    <param name="FunctionTableAccessRoutine">
      <para>A callback routine that provides access to the run-time function table for the process. This parameter is
required because the <b>StackWalkEx</b> function does not have
access to the process's run-time function table. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfunction_table_access_routine">FunctionTableAccessProc64</a>.</para>
      <para>The symbol handler provides functions that load and access the run-time table. If these functions are used,
then <see cref="SymFunctionTableAccess64" /> can be
passed as a valid parameter.</para>
    </param>
    <param name="GetModuleBaseRoutine">
      <para>A callback routine that provides a module base for any given virtual address. This parameter is required.
For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pget_module_base_routine">GetModuleBaseProc64</a>.</para>
      <para>The symbol handler provides functions that load and maintain module information. If these functions are used,
then <see cref="SymGetModuleBase64" /> can be passed as a valid
parameter.</para>
    </param>
    <param name="TranslateAddress">
      <para>A callback routine that provides address translation for 16-bit addresses. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-ptranslate_address_routine">TranslateAddressProc64</a>.</para>
      <para>Most callers of <b>StackWalkEx</b> can safely pass
<b>NULL</b> for this parameter.</para>
    </param>
    <param name="Flags">
      <para>A combination of zero or more flags.</para>
      <h4>SYM_STKWALK_DEFAULT (0)</h4>
      <h4>SYM_STKWALK_FORCE_FRAMEPTR (1)</h4>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. Note that
<b>StackWalkEx</b> generally does not set the last error
code.</para>
    </returns>
    <remarks>
      <para>The <b>StackWalkEx</b> function provides a portable method
for obtaining a stack trace. Using the <b>StackWalkEx</b></para>
      <para>function is recommended over writing your own function because of all the complexities associated with stack
walking on platforms. In addition, there are compiler options that cause the stack to appear differently,
depending on how the module is compiled. By using this function, your application has a portable stack trace that
continues to work as the compiler and operating system change.</para>
      <para>The first call to this function will fail if the <b>AddrPC</b>,
<b>AddrFrame</b>, and <b>AddrStack</b> members of the
<see cref="STACKFRAME64" /> structure passed in the
<i>StackFrame</i> parameter are not initialized.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso cref="CONTEXT" />
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfunction_table_access_routine">FunctionTableAccessProc64</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pread_process_memory_routine">ReadProcessMemoryProc64</seealso>
    <seealso cref="STACKFRAME_EX" />
    <seealso cref="SymFunctionTableAccess64" />
    <seealso cref="SymGetModuleBase64" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-ptranslate_address_routine">TranslateAddressProc64</seealso>
  </member>
  <member name="Windows.SymAddrIncludeInlineTrace">
    <summary>
      <para>Indicates whether the specified address is within an inline frame.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Address">
      <para>The address.</para>
    </param>
    <returns>
      <para>Returns zero if the address is not within an inline frame.</para>
    </returns>
  </member>
  <member name="Windows.SymAddSourceStream">
    <summary>
      <para>Adds the stream to the specified module for use by the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</a>.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="StreamFile">
      <para>A null-terminated string that contains the absolute or relative path to a file that contains the source indexing stream. Can be <b>NULL</b> if <i>Buffer</i> is not <b>NULL</b>.</para>
    </param>
    <param name="Buffer">
      <para>A buffer that contains the source indexing stream. Can be <b>NULL</b> if <i>StreamFile</i> is not <b>NULL</b>.</para>
    </param>
    <param name="Size">
      <para>Size, in bytes, of the <i>Buffer</i> buffer.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>SymAddSourceStream</b> adds a stream of data formatted for use by the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">source Server</a> to a designated module.  The caller can pass the stream either as a buffer in the <i>Buffer</i> parameter or a file in the <i>StreamFile</i> parameter.  If both parameters are filled, then the function uses the   <i>Buffer</i> parameter.  If both parameters are <b>NULL</b>, then the function returns <b>FALSE</b> and the <a href="https://docs.microsoft.com//windows/desktop/Debug/last-error-code">last-error code</a> is set to <b>ERROR_INVALID_PARAMETER</b>.</para>
      <para>It is important to note that <b>SymAddSourceStream</b> does not add the stream to any corresponding PDB in order to persist the data.  This function is used by those programmatically implementing their own debuggers in scenarios in which a PDB is not available.</para>
    </remarks>
  </member>
  <member name="Windows.SymAddSourceStreamW">
    <summary>
      <para>Adds the stream to the specified module for use by the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</a>.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="StreamFile">
      <para>A null-terminated string that contains the absolute or relative path to a file that contains the source indexing stream. Can be <b>NULL</b> if <i>Buffer</i> is not <b>NULL</b>.</para>
    </param>
    <param name="Buffer">
      <para>A buffer that contains the source indexing stream. Can be <b>NULL</b> if <i>StreamFile</i> is not <b>NULL</b>.</para>
    </param>
    <param name="Size">
      <para>Size, in bytes, of the <i>Buffer</i> buffer.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>SymAddSourceStream</b> adds a stream of data formatted for use by the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">source Server</a> to a designated module.  The caller can pass the stream either as a buffer in the <i>Buffer</i> parameter or a file in the <i>StreamFile</i> parameter.  If both parameters are filled, then the function uses the   <i>Buffer</i> parameter.  If both parameters are <b>NULL</b>, then the function returns <b>FALSE</b> and the <a href="https://docs.microsoft.com//windows/desktop/Debug/last-error-code">last-error code</a> is set to <b>ERROR_INVALID_PARAMETER</b>.</para>
      <para>It is important to note that <b>SymAddSourceStream</b> does not add the stream to any corresponding PDB in order to persist the data.  This function is used by those programmatically implementing their own debuggers in scenarios in which a PDB is not available.</para>
    </remarks>
  </member>
  <member name="Windows.SymAddSourceStream">
    <summary>
      <para>Adds the stream to the specified module for use by the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</a>.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the <see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="StreamFile">
      <para>A null-terminated string that contains the absolute or relative path to a file that contains the source indexing stream. Can be <b>NULL</b> if <i>Buffer</i> is not <b>NULL</b>.</para>
    </param>
    <param name="Buffer">
      <para>A buffer that contains the source indexing stream. Can be <b>NULL</b> if <i>StreamFile</i> is not <b>NULL</b>.</para>
    </param>
    <param name="Size">
      <para>Size, in bytes, of the <i>Buffer</i> buffer.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>SymAddSourceStream</b> adds a stream of data formatted for use by the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">source Server</a> to a designated module. The caller can pass the stream either as a buffer in the <i>Buffer</i> parameter or a file in the <i>StreamFile</i> parameter. If both parameters are filled, then the function uses the <i>Buffer</i> parameter. If both parameters are <b>NULL</b>, then the function returns <b>FALSE</b> and the <a href="https://docs.microsoft.com//windows/desktop/Debug/last-error-code">last-error code</a> is set to <b>ERROR_INVALID_PARAMETER</b>.</para>
      <para>It is important to note that <b>SymAddSourceStream</b> does not add the stream to any corresponding PDB in order to persist the data. This function is used by those programmatically implementing their own debuggers in scenarios in which a PDB is not available.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymAddSourceStream as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.SymAddSourceStreamA">
    <summary>
      <para>Adds the stream to the specified module for use by the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</a>.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the <see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="StreamFile">
      <para>A null-terminated string that contains the absolute or relative path to a file that contains the source indexing stream. Can be <b>NULL</b> if <i>Buffer</i> is not <b>NULL</b>.</para>
    </param>
    <param name="Buffer">
      <para>A buffer that contains the source indexing stream. Can be <b>NULL</b> if <i>StreamFile</i> is not <b>NULL</b>.</para>
    </param>
    <param name="Size">
      <para>Size, in bytes, of the <i>Buffer</i> buffer.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>SymAddSourceStream</b> adds a stream of data formatted for use by the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">source Server</a> to a designated module. The caller can pass the stream either as a buffer in the <i>Buffer</i> parameter or a file in the <i>StreamFile</i> parameter. If both parameters are filled, then the function uses the <i>Buffer</i> parameter. If both parameters are <b>NULL</b>, then the function returns <b>FALSE</b> and the <a href="https://docs.microsoft.com//windows/desktop/Debug/last-error-code">last-error code</a> is set to <b>ERROR_INVALID_PARAMETER</b>.</para>
      <para>It is important to note that <b>SymAddSourceStream</b> does not add the stream to any corresponding PDB in order to persist the data. This function is used by those programmatically implementing their own debuggers in scenarios in which a PDB is not available.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymAddSourceStream as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.SymAddSourceStream">
    <summary>
      <para>Adds the stream to the specified module for use by the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</a>.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="FileSpec">
      <para>A null-terminated string that contains the absolute or relative path to a file that contains the source indexing stream. Can be <b>NULL</b> if <i>Buffer</i> is not <b>NULL</b>.</para>
    </param>
    <param name="Buffer">
      <para>A buffer that contains the source indexing stream. Can be <b>NULL</b> if <i>StreamFile</i> is not <b>NULL</b>.</para>
    </param>
    <param name="Size">
      <para>Size, in bytes, of the <i>Buffer</i> buffer.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>SymAddSourceStream</b> adds a stream of data formatted for use by the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">source Server</a> to a designated module.  The caller can pass the stream either as a buffer in the <i>Buffer</i> parameter or a file in the <i>StreamFile</i> parameter.  If both parameters are filled, then the function uses the   <i>Buffer</i> parameter.  If both parameters are <b>NULL</b>, then the function returns <b>FALSE</b> and the <a href="https://docs.microsoft.com//windows/desktop/Debug/last-error-code">last-error code</a> is set to <b>ERROR_INVALID_PARAMETER</b>.</para>
      <para>It is important to note that <b>SymAddSourceStream</b> does not add the stream to any corresponding PDB in order to persist the data.  This function is used by those programmatically implementing their own debuggers in scenarios in which a PDB is not available.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymAddSourceStream as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.SymAddSourceStreamW">
    <summary>
      <para>Adds the stream to the specified module for use by the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</a>.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="FileSpec">
      <para>A null-terminated string that contains the absolute or relative path to a file that contains the source indexing stream. Can be <b>NULL</b> if <i>Buffer</i> is not <b>NULL</b>.</para>
    </param>
    <param name="Buffer">
      <para>A buffer that contains the source indexing stream. Can be <b>NULL</b> if <i>StreamFile</i> is not <b>NULL</b>.</para>
    </param>
    <param name="Size">
      <para>Size, in bytes, of the <i>Buffer</i> buffer.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>
        <b>SymAddSourceStream</b> adds a stream of data formatted for use by the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">source Server</a> to a designated module.  The caller can pass the stream either as a buffer in the <i>Buffer</i> parameter or a file in the <i>StreamFile</i> parameter.  If both parameters are filled, then the function uses the   <i>Buffer</i> parameter.  If both parameters are <b>NULL</b>, then the function returns <b>FALSE</b> and the <a href="https://docs.microsoft.com//windows/desktop/Debug/last-error-code">last-error code</a> is set to <b>ERROR_INVALID_PARAMETER</b>.</para>
      <para>It is important to note that <b>SymAddSourceStream</b> does not add the stream to any corresponding PDB in order to persist the data.  This function is used by those programmatically implementing their own debuggers in scenarios in which a PDB is not available.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymAddSourceStream as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.SymAddSymbol">
    <summary>
      <para>Adds a virtual symbol
to the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="Name">
      <para>The name of the symbol. The maximum size of a symbol name is MAX_SYM_NAME characters.</para>
    </param>
    <param name="Address">
      <para>The address of the symbol. This address must be within the address range of the specified module.</para>
    </param>
    <param name="Size">
      <para>The size of the symbol, in bytes. This parameter is optional.</para>
    </param>
    <param name="Flags">
      <para>This parameter is unused.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymDeleteSymbol" />
  </member>
  <member name="Windows.SymAddSymbolW">
    <summary>
      <para>Adds a virtual symbol
to the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="Name">
      <para>The name of the symbol. The maximum size of a symbol name is MAX_SYM_NAME characters.</para>
    </param>
    <param name="Address">
      <para>The address of the symbol. This address must be within the address range of the specified module.</para>
    </param>
    <param name="Size">
      <para>The size of the symbol, in bytes. This parameter is optional.</para>
    </param>
    <param name="Flags">
      <para>This parameter is unused.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymDeleteSymbol" />
  </member>
  <member name="Windows.SymAddSymbol">
    <summary>
      <para>Adds a virtual symbol
to the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="Name">
      <para>The name of the symbol. The maximum size of a symbol name is MAX_SYM_NAME characters.</para>
    </param>
    <param name="Address">
      <para>The address of the symbol. This address must be within the address range of the specified module.</para>
    </param>
    <param name="Size">
      <para>The size of the symbol, in bytes. This parameter is optional.</para>
    </param>
    <param name="Flags">
      <para>This parameter is unused.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymAddSymbol as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymDeleteSymbol" />
  </member>
  <member name="Windows.SymAddSymbolW">
    <summary>
      <para>Adds a virtual symbol
to the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="Name">
      <para>The name of the symbol. The maximum size of a symbol name is MAX_SYM_NAME characters.</para>
    </param>
    <param name="Address">
      <para>The address of the symbol. This address must be within the address range of the specified module.</para>
    </param>
    <param name="Size">
      <para>The size of the symbol, in bytes. This parameter is optional.</para>
    </param>
    <param name="Flags">
      <para>This parameter is unused.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymAddSymbol as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymDeleteSymbol" />
  </member>
  <member name="Windows.SymCleanup">
    <summary>
      <para>Deallocates all resources associated with the process handle.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function frees all resources associated with the process handle. Failure to call this function causes memory and resource leaks in the calling application</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, call
<see cref="SymInitialize" /> only when your process starts and
<b>SymCleanup</b> only when your process ends. It is not necessary for each thread in the process to call these functions.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/terminating-the-symbol-handler">Terminating the Symbol Handler</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymCompareInlineTrace">
    <summary>
      <para>Compares two inline traces.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Address1">
      <para>The first address to be compared.</para>
    </param>
    <param name="InlineContext1">
      <para>The inline context for the first trace to be compared.</para>
    </param>
    <param name="RetAddress1">
      <para>The return address of the first trace to be compared.</para>
    </param>
    <param name="Address2">
      <para>The second address to be compared.</para>
    </param>
    <param name="RetAddress2">
      <para>The return address of the second trace to be compared.</para>
    </param>
    <returns>
      <para>Indicates the result of the comparison.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYM_INLINE_COMP_ERROR</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>An error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYM_INLINE_COMP_IDENTICAL</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The inline contexts are identical.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYM_INLINE_COMP_STEPIN</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The inline trace is a step-in of an inline function.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYM_INLINE_COMP_STEPOUT</b>
                </description>
              </item>
              <item>
                <description>3</description>
              </item>
            </list>
          </description>
          <description>
            <para>The inline trace is a step-out of an inline function.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYM_INLINE_COMP_STEPOVER</b>
                </description>
              </item>
              <item>
                <description>4</description>
              </item>
            </list>
          </description>
          <description>
            <para>The inline trace is a step-over of an inline function.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYM_INLINE_COMP_DIFFERENT</b>
                </description>
              </item>
              <item>
                <description>5</description>
              </item>
            </list>
          </description>
          <description>
            <para>The inline contexts are different.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="Windows.SymDeleteSymbol">
    <summary>
      <para>Deletes a virtual symbol from the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="Name">
      <para>The name of the symbol.</para>
    </param>
    <param name="Address">
      <para>The address of the symbol. This address must be within the address range of the specified module.</para>
    </param>
    <param name="Flags">
      <para>This parameter is unused.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymAddSymbol" />
  </member>
  <member name="Windows.SymDeleteSymbolW">
    <summary>
      <para>Deletes a virtual symbol from the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="Name">
      <para>The name of the symbol.</para>
    </param>
    <param name="Address">
      <para>The address of the symbol. This address must be within the address range of the specified module.</para>
    </param>
    <param name="Flags">
      <para>This parameter is unused.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymAddSymbol" />
  </member>
  <member name="Windows.SymDeleteSymbol">
    <summary>
      <para>Deletes a virtual symbol from the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="Name">
      <para>The name of the symbol.</para>
    </param>
    <param name="Address">
      <para>The address of the symbol. This address must be within the address range of the specified module.</para>
    </param>
    <param name="Flags">
      <para>This parameter is unused.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymDeleteSymbol as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymAddSymbol" />
  </member>
  <member name="Windows.SymDeleteSymbolW">
    <summary>
      <para>Deletes a virtual symbol from the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="Name">
      <para>The name of the symbol.</para>
    </param>
    <param name="Address">
      <para>The address of the symbol. This address must be within the address range of the specified module.</para>
    </param>
    <param name="Flags">
      <para>This parameter is unused.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymDeleteSymbol as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymAddSymbol" />
  </member>
  <member name="Windows.SymEnumerateModules">
    <summary>
      <para>Enumerates all modules that have been loaded for the process by the
<see cref="SymLoadModule64" /> or <see cref="SymLoadModuleEx" /> function.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="EnumModulesCallback">
      <para>The enumeration callback function. This function is called once per module. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateModules64</b> function enumerates all modules that have been loaded for the process by
<see cref="SymLoadModule64" />, even if the symbol loading is deferred. The enumeration callback function is called once for each module and is passed the module information.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymEnumerateModulesW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateModulesW64(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACKW64 EnumModulesCallback,
    __in_opt PVOID UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymEnumerateModules64  SymEnumerateModulesW64
#endif
</code>
      <para>This function supersedes the <b>SymEnumerateModules</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateModules</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateModules SymEnumerateModules64
#else
BOOL
IMAGEAPI
SymEnumerateModules(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACK EnumModulesCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/enumerating-symbol-modules">Enumerating Symbol Modules</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymEnumerateModules64">
    <summary>
      <para>Enumerates all modules that have been loaded for the process by the
<see cref="SymLoadModule64" /> or <see cref="SymLoadModuleEx" /> function.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="EnumModulesCallback">
      <para>The enumeration callback function. This function is called once per module. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateModules64</b> function enumerates all modules that have been loaded for the process by
<see cref="SymLoadModule64" />, even if the symbol loading is deferred. The enumeration callback function is called once for each module and is passed the module information.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymEnumerateModulesW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateModulesW64(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACKW64 EnumModulesCallback,
    __in_opt PVOID UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymEnumerateModules64  SymEnumerateModulesW64
#endif
</code>
      <para>This function supersedes the <b>SymEnumerateModules</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateModules</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateModules SymEnumerateModules64
#else
BOOL
IMAGEAPI
SymEnumerateModules(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACK EnumModulesCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/enumerating-symbol-modules">Enumerating Symbol Modules</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymEnumerateModulesW64">
    <summary>
      <para>Enumerates all modules that have been loaded for the process by the
<see cref="SymLoadModule64" /> or <see cref="SymLoadModuleEx" /> function.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="EnumModulesCallback">
      <para>The enumeration callback function. This function is called once per module. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateModules64</b> function enumerates all modules that have been loaded for the process by
<see cref="SymLoadModule64" />, even if the symbol loading is deferred. The enumeration callback function is called once for each module and is passed the module information.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymEnumerateModulesW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateModulesW64(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACKW64 EnumModulesCallback,
    __in_opt PVOID UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymEnumerateModules64  SymEnumerateModulesW64
#endif
</code>
      <para>This function supersedes the <b>SymEnumerateModules</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateModules</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateModules SymEnumerateModules64
#else
BOOL
IMAGEAPI
SymEnumerateModules(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACK EnumModulesCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/enumerating-symbol-modules">Enumerating Symbol Modules</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymEnumerateModules">
    <summary>
      <para>Enumerates all modules that have been loaded for the process by the
<see cref="SymLoadModule64" /> or <see cref="SymLoadModuleEx" /> function.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="EnumModulesCallback">
      <para>The enumeration callback function. This function is called once per module. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateModules64</b> function enumerates all modules that have been loaded for the process by
<see cref="SymLoadModule64" />, even if the symbol loading is deferred. The enumeration callback function is called once for each module and is passed the module information.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymEnumerateModulesW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateModulesW64(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACKW64 EnumModulesCallback,
    __in_opt PVOID UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymEnumerateModules64  SymEnumerateModulesW64
#endif
</code>
      <para>This function supersedes the <b>SymEnumerateModules</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateModules</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateModules SymEnumerateModules64
#else
BOOL
IMAGEAPI
SymEnumerateModules(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACK EnumModulesCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/enumerating-symbol-modules">Enumerating Symbol Modules</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymEnumerateModules64">
    <summary>
      <para>Enumerates all modules that have been loaded for the process by the
<see cref="SymLoadModule64" /> or <see cref="SymLoadModuleEx" /> function.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="EnumModulesCallback">
      <para>The enumeration callback function. This function is called once per module. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateModules64</b> function enumerates all modules that have been loaded for the process by
<see cref="SymLoadModule64" />, even if the symbol loading is deferred. The enumeration callback function is called once for each module and is passed the module information.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymEnumerateModulesW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateModulesW64(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACKW64 EnumModulesCallback,
    __in_opt PVOID UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymEnumerateModules64  SymEnumerateModulesW64
#endif
</code>
      <para>This function supersedes the <b>SymEnumerateModules</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateModules</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateModules SymEnumerateModules64
#else
BOOL
IMAGEAPI
SymEnumerateModules(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACK EnumModulesCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/enumerating-symbol-modules">Enumerating Symbol Modules</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymEnumerateModulesW64">
    <summary>
      <para>Enumerates all modules that have been loaded for the process by the
<see cref="SymLoadModule64" /> or <see cref="SymLoadModuleEx" /> function.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="EnumModulesCallback">
      <para>The enumeration callback function. This function is called once per module. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateModules64</b> function enumerates all modules that have been loaded for the process by
<see cref="SymLoadModule64" />, even if the symbol loading is deferred. The enumeration callback function is called once for each module and is passed the module information.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymEnumerateModulesW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateModulesW64(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACKW64 EnumModulesCallback,
    __in_opt PVOID UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymEnumerateModules64  SymEnumerateModulesW64
#endif
</code>
      <para>This function supersedes the <b>SymEnumerateModules</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateModules</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateModules SymEnumerateModules64
#else
BOOL
IMAGEAPI
SymEnumerateModules(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACK EnumModulesCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/enumerating-symbol-modules">Enumerating Symbol Modules</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymEnumerateModules">
    <summary>
      <para>Enumerates all modules that have been loaded for the process by the
<see cref="SymLoadModule64" /> or <see cref="SymLoadModuleEx" /> function.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="EnumModulesCallback">
      <para>The enumeration callback function. This function is called once per module. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateModules64</b> function enumerates all modules that have been loaded for the process by
<see cref="SymLoadModule64" />, even if the symbol loading is deferred. The enumeration callback function is called once for each module and is passed the module information.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymEnumerateModulesW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateModulesW64(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACKW64 EnumModulesCallback,
    __in_opt PVOID UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymEnumerateModules64  SymEnumerateModulesW64
#endif
</code>
      <para>This function supersedes the <b>SymEnumerateModules</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateModules</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateModules SymEnumerateModules64
#else
BOOL
IMAGEAPI
SymEnumerateModules(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACK EnumModulesCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/enumerating-symbol-modules">Enumerating Symbol Modules</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymEnumerateModules64">
    <summary>
      <para>Enumerates all modules that have been loaded for the process by the
<see cref="SymLoadModule64" /> or <see cref="SymLoadModuleEx" /> function.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="EnumModulesCallback">
      <para>The enumeration callback function. This function is called once per module. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateModules64</b> function enumerates all modules that have been loaded for the process by
<see cref="SymLoadModule64" />, even if the symbol loading is deferred. The enumeration callback function is called once for each module and is passed the module information.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymEnumerateModulesW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateModulesW64(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACKW64 EnumModulesCallback,
    __in_opt PVOID UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymEnumerateModules64  SymEnumerateModulesW64
#endif
</code>
      <para>This function supersedes the <b>SymEnumerateModules</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateModules</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateModules SymEnumerateModules64
#else
BOOL
IMAGEAPI
SymEnumerateModules(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACK EnumModulesCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/enumerating-symbol-modules">Enumerating Symbol Modules</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymEnumerateModulesW64">
    <summary>
      <para>Enumerates all modules that have been loaded for the process by the
<see cref="SymLoadModule64" /> or <see cref="SymLoadModuleEx" /> function.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="EnumModulesCallback">
      <para>The enumeration callback function. This function is called once per module. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateModules64</b> function enumerates all modules that have been loaded for the process by
<see cref="SymLoadModule64" />, even if the symbol loading is deferred. The enumeration callback function is called once for each module and is passed the module information.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymEnumerateModulesW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateModulesW64(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACKW64 EnumModulesCallback,
    __in_opt PVOID UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymEnumerateModules64  SymEnumerateModulesW64
#endif
</code>
      <para>This function supersedes the <b>SymEnumerateModules</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateModules</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateModules SymEnumerateModules64
#else
BOOL
IMAGEAPI
SymEnumerateModules(
    __in HANDLE hProcess,
    __in PSYM_ENUMMODULES_CALLBACK EnumModulesCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/enumerating-symbol-modules">Enumerating Symbol Modules</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymEnumerateSymbols">
    <summary>
      <para>Enumerates all the symbols for a specified module.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymEnumSymbols" />, which is faster and more powerful.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module for which symbols are to be enumerated.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>The callback function that receives the symbol information. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateSymbols64</b> function enumerates all the symbols for the specified module. The module information is located by the <i>BaseOfDll</i> parameter. The callback function is called once per symbol and is passed the information for each symbol.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>The Unicode version of this function, <b>SymEnumerateSymbolsW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateSymbolsW64(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
</code>
      <para>This function supersedes the <b>SymEnumerateSymbols</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateSymbols</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateSymbols SymEnumerateSymbols64
#define SymEnumerateSymbolsW SymEnumerateSymbolsW64
#else
BOOL
IMAGEAPI
SymEnumerateSymbols(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumerateSymbolsW(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymEnumSymbols" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymEnumerateSymbols64">
    <summary>
      <para>Enumerates all the symbols for a specified module.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymEnumSymbols" />, which is faster and more powerful.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module for which symbols are to be enumerated.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>The callback function that receives the symbol information. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateSymbols64</b> function enumerates all the symbols for the specified module. The module information is located by the <i>BaseOfDll</i> parameter. The callback function is called once per symbol and is passed the information for each symbol.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>The Unicode version of this function, <b>SymEnumerateSymbolsW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateSymbolsW64(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
</code>
      <para>This function supersedes the <b>SymEnumerateSymbols</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateSymbols</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateSymbols SymEnumerateSymbols64
#define SymEnumerateSymbolsW SymEnumerateSymbolsW64
#else
BOOL
IMAGEAPI
SymEnumerateSymbols(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumerateSymbolsW(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymEnumSymbols" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymEnumerateSymbolsW">
    <summary>
      <para>Enumerates all the symbols for a specified module.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymEnumSymbols" />, which is faster and more powerful.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module for which symbols are to be enumerated.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>The callback function that receives the symbol information. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateSymbols64</b> function enumerates all the symbols for the specified module. The module information is located by the <i>BaseOfDll</i> parameter. The callback function is called once per symbol and is passed the information for each symbol.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>The Unicode version of this function, <b>SymEnumerateSymbolsW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateSymbolsW64(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
</code>
      <para>This function supersedes the <b>SymEnumerateSymbols</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateSymbols</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateSymbols SymEnumerateSymbols64
#define SymEnumerateSymbolsW SymEnumerateSymbolsW64
#else
BOOL
IMAGEAPI
SymEnumerateSymbols(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumerateSymbolsW(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymEnumSymbols" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymEnumerateSymbolsW64">
    <summary>
      <para>Enumerates all the symbols for a specified module.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymEnumSymbols" />, which is faster and more powerful.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module for which symbols are to be enumerated.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>The callback function that receives the symbol information. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateSymbols64</b> function enumerates all the symbols for the specified module. The module information is located by the <i>BaseOfDll</i> parameter. The callback function is called once per symbol and is passed the information for each symbol.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>The Unicode version of this function, <b>SymEnumerateSymbolsW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateSymbolsW64(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
</code>
      <para>This function supersedes the <b>SymEnumerateSymbols</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateSymbols</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateSymbols SymEnumerateSymbols64
#define SymEnumerateSymbolsW SymEnumerateSymbolsW64
#else
BOOL
IMAGEAPI
SymEnumerateSymbols(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumerateSymbolsW(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymEnumSymbols" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymEnumerateSymbols">
    <summary>
      <para>Enumerates all the symbols for a specified module.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymEnumSymbols" />, which is faster and more powerful.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module for which symbols are to be enumerated.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>The callback function that receives the symbol information. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateSymbols64</b> function enumerates all the symbols for the specified module. The module information is located by the <i>BaseOfDll</i> parameter. The callback function is called once per symbol and is passed the information for each symbol.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>The Unicode version of this function, <b>SymEnumerateSymbolsW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateSymbolsW64(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
</code>
      <para>This function supersedes the <b>SymEnumerateSymbols</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateSymbols</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateSymbols SymEnumerateSymbols64
#define SymEnumerateSymbolsW SymEnumerateSymbolsW64
#else
BOOL
IMAGEAPI
SymEnumerateSymbols(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumerateSymbolsW(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymEnumSymbols" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymEnumerateSymbols64">
    <summary>
      <para>Enumerates all the symbols for a specified module.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymEnumSymbols" />, which is faster and more powerful.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module for which symbols are to be enumerated.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>The callback function that receives the symbol information. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateSymbols64</b> function enumerates all the symbols for the specified module. The module information is located by the <i>BaseOfDll</i> parameter. The callback function is called once per symbol and is passed the information for each symbol.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>The Unicode version of this function, <b>SymEnumerateSymbolsW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateSymbolsW64(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
</code>
      <para>This function supersedes the <b>SymEnumerateSymbols</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateSymbols</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateSymbols SymEnumerateSymbols64
#define SymEnumerateSymbolsW SymEnumerateSymbolsW64
#else
BOOL
IMAGEAPI
SymEnumerateSymbols(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumerateSymbolsW(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymEnumSymbols" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymEnumerateSymbolsW">
    <summary>
      <para>Enumerates all the symbols for a specified module.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymEnumSymbols" />, which is faster and more powerful.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module for which symbols are to be enumerated.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>The callback function that receives the symbol information. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateSymbols64</b> function enumerates all the symbols for the specified module. The module information is located by the <i>BaseOfDll</i> parameter. The callback function is called once per symbol and is passed the information for each symbol.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>The Unicode version of this function, <b>SymEnumerateSymbolsW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateSymbolsW64(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
</code>
      <para>This function supersedes the <b>SymEnumerateSymbols</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateSymbols</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateSymbols SymEnumerateSymbols64
#define SymEnumerateSymbolsW SymEnumerateSymbolsW64
#else
BOOL
IMAGEAPI
SymEnumerateSymbols(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumerateSymbolsW(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymEnumSymbols" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymEnumerateSymbolsW64">
    <summary>
      <para>Enumerates all the symbols for a specified module.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymEnumSymbols" />, which is faster and more powerful.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module for which symbols are to be enumerated.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>The callback function that receives the symbol information. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateSymbols64</b> function enumerates all the symbols for the specified module. The module information is located by the <i>BaseOfDll</i> parameter. The callback function is called once per symbol and is passed the information for each symbol.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>The Unicode version of this function, <b>SymEnumerateSymbolsW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateSymbolsW64(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
</code>
      <para>This function supersedes the <b>SymEnumerateSymbols</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateSymbols</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateSymbols SymEnumerateSymbols64
#define SymEnumerateSymbolsW SymEnumerateSymbolsW64
#else
BOOL
IMAGEAPI
SymEnumerateSymbols(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumerateSymbolsW(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymEnumSymbols" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymEnumerateSymbols">
    <summary>
      <para>Enumerates all the symbols for a specified module.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymEnumSymbols" />, which is faster and more powerful.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module for which symbols are to be enumerated.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>The callback function that receives the symbol information. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateSymbols64</b> function enumerates all the symbols for the specified module. The module information is located by the <i>BaseOfDll</i> parameter. The callback function is called once per symbol and is passed the information for each symbol.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>The Unicode version of this function, <b>SymEnumerateSymbolsW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateSymbolsW64(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
</code>
      <para>This function supersedes the <b>SymEnumerateSymbols</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateSymbols</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateSymbols SymEnumerateSymbols64
#define SymEnumerateSymbolsW SymEnumerateSymbolsW64
#else
BOOL
IMAGEAPI
SymEnumerateSymbols(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumerateSymbolsW(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymEnumSymbols" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymEnumerateSymbols64">
    <summary>
      <para>Enumerates all the symbols for a specified module.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymEnumSymbols" />, which is faster and more powerful.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module for which symbols are to be enumerated.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>The callback function that receives the symbol information. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateSymbols64</b> function enumerates all the symbols for the specified module. The module information is located by the <i>BaseOfDll</i> parameter. The callback function is called once per symbol and is passed the information for each symbol.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>The Unicode version of this function, <b>SymEnumerateSymbolsW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateSymbolsW64(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
</code>
      <para>This function supersedes the <b>SymEnumerateSymbols</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateSymbols</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateSymbols SymEnumerateSymbols64
#define SymEnumerateSymbolsW SymEnumerateSymbolsW64
#else
BOOL
IMAGEAPI
SymEnumerateSymbols(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumerateSymbolsW(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymEnumSymbols" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymEnumerateSymbolsW">
    <summary>
      <para>Enumerates all the symbols for a specified module.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymEnumSymbols" />, which is faster and more powerful.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module for which symbols are to be enumerated.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>The callback function that receives the symbol information. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateSymbols64</b> function enumerates all the symbols for the specified module. The module information is located by the <i>BaseOfDll</i> parameter. The callback function is called once per symbol and is passed the information for each symbol.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>The Unicode version of this function, <b>SymEnumerateSymbolsW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateSymbolsW64(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
</code>
      <para>This function supersedes the <b>SymEnumerateSymbols</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateSymbols</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateSymbols SymEnumerateSymbols64
#define SymEnumerateSymbolsW SymEnumerateSymbolsW64
#else
BOOL
IMAGEAPI
SymEnumerateSymbols(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumerateSymbolsW(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymEnumSymbols" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymEnumerateSymbolsW64">
    <summary>
      <para>Enumerates all the symbols for a specified module.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymEnumSymbols" />, which is faster and more powerful.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module for which symbols are to be enumerated.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>The callback function that receives the symbol information. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateSymbols64</b> function enumerates all the symbols for the specified module. The module information is located by the <i>BaseOfDll</i> parameter. The callback function is called once per symbol and is passed the information for each symbol.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>The Unicode version of this function, <b>SymEnumerateSymbolsW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateSymbolsW64(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
</code>
      <para>This function supersedes the <b>SymEnumerateSymbols</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateSymbols</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateSymbols SymEnumerateSymbols64
#define SymEnumerateSymbolsW SymEnumerateSymbolsW64
#else
BOOL
IMAGEAPI
SymEnumerateSymbols(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumerateSymbolsW(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymEnumSymbols" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymEnumerateSymbols">
    <summary>
      <para>Enumerates all the symbols for a specified module.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymEnumSymbols" />, which is faster and more powerful.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module for which symbols are to be enumerated.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>The callback function that receives the symbol information. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateSymbols64</b> function enumerates all the symbols for the specified module. The module information is located by the <i>BaseOfDll</i> parameter. The callback function is called once per symbol and is passed the information for each symbol.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>The Unicode version of this function, <b>SymEnumerateSymbolsW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateSymbolsW64(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
</code>
      <para>This function supersedes the <b>SymEnumerateSymbols</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateSymbols</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateSymbols SymEnumerateSymbols64
#define SymEnumerateSymbolsW SymEnumerateSymbolsW64
#else
BOOL
IMAGEAPI
SymEnumerateSymbols(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumerateSymbolsW(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymEnumSymbols" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymEnumerateSymbols64">
    <summary>
      <para>Enumerates all the symbols for a specified module.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymEnumSymbols" />, which is faster and more powerful.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module for which symbols are to be enumerated.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>The callback function that receives the symbol information. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateSymbols64</b> function enumerates all the symbols for the specified module. The module information is located by the <i>BaseOfDll</i> parameter. The callback function is called once per symbol and is passed the information for each symbol.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>The Unicode version of this function, <b>SymEnumerateSymbolsW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateSymbolsW64(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
</code>
      <para>This function supersedes the <b>SymEnumerateSymbols</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateSymbols</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateSymbols SymEnumerateSymbols64
#define SymEnumerateSymbolsW SymEnumerateSymbolsW64
#else
BOOL
IMAGEAPI
SymEnumerateSymbols(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumerateSymbolsW(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymEnumSymbols" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymEnumerateSymbolsW">
    <summary>
      <para>Enumerates all the symbols for a specified module.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymEnumSymbols" />, which is faster and more powerful.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module for which symbols are to be enumerated.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>The callback function that receives the symbol information. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateSymbols64</b> function enumerates all the symbols for the specified module. The module information is located by the <i>BaseOfDll</i> parameter. The callback function is called once per symbol and is passed the information for each symbol.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>The Unicode version of this function, <b>SymEnumerateSymbolsW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateSymbolsW64(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
</code>
      <para>This function supersedes the <b>SymEnumerateSymbols</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateSymbols</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateSymbols SymEnumerateSymbols64
#define SymEnumerateSymbolsW SymEnumerateSymbolsW64
#else
BOOL
IMAGEAPI
SymEnumerateSymbols(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumerateSymbolsW(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymEnumSymbols" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymEnumerateSymbolsW64">
    <summary>
      <para>Enumerates all the symbols for a specified module.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymEnumSymbols" />, which is faster and more powerful.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module for which symbols are to be enumerated.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>The callback function that receives the symbol information. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymEnumerateSymbols64</b> function enumerates all the symbols for the specified module. The module information is located by the <i>BaseOfDll</i> parameter. The callback function is called once per symbol and is passed the information for each symbol.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>The Unicode version of this function, <b>SymEnumerateSymbolsW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymEnumerateSymbolsW64(
    __in HANDLE hProcess,
    __in ULONG64 BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
</code>
      <para>This function supersedes the <b>SymEnumerateSymbols</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymEnumerateSymbols</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymEnumerateSymbols SymEnumerateSymbols64
#define SymEnumerateSymbolsW SymEnumerateSymbolsW64
#else
BOOL
IMAGEAPI
SymEnumerateSymbols(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );

BOOL
IMAGEAPI
SymEnumerateSymbolsW(
    __in HANDLE hProcess,
    __in ULONG BaseOfDll,
    __in PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymEnumSymbols" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymEnumLines">
    <summary>
      <para>Enumerates all lines in the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="Obj">
      <para>The name of an .obj file within the module. The scope of the enumeration is limited to this file. If this parameter is <b>NULL</b> or an empty string, all .obj files are searched.</para>
    </param>
    <param name="File">
      <para>A wildcard expression that indicates the names of the source files to be searched. If this parameter is <b>NULL</b> or an empty string, all files are searched.</para>
    </param>
    <param name="EnumLinesCallback">
      <para>A
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumlines_callback">SymEnumLinesProc</a> callback function that receives the line information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function is supported for PDB information only. If you have COFF information, try using one of the <b>SymGetLineXXX</b> functions.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumLinesProc</seealso>
  </member>
  <member name="Windows.SymEnumLinesW">
    <summary>
      <para>Enumerates all lines in the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="Obj">
      <para>The name of an .obj file within the module. The scope of the enumeration is limited to this file. If this parameter is <b>NULL</b> or an empty string, all .obj files are searched.</para>
    </param>
    <param name="File">
      <para>A wildcard expression that indicates the names of the source files to be searched. If this parameter is <b>NULL</b> or an empty string, all files are searched.</para>
    </param>
    <param name="EnumLinesCallback">
      <para>A
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumlines_callback">SymEnumLinesProc</a> callback function that receives the line information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function is supported for PDB information only. If you have COFF information, try using one of the <b>SymGetLineXXX</b> functions.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumLinesProc</seealso>
  </member>
  <member name="Windows.SymEnumLines">
    <summary>
      <para>Enumerates all lines in the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="Obj">
      <para>The name of an .obj file within the module. The scope of the enumeration is limited to this file. If this parameter is <b>NULL</b> or an empty string, all .obj files are searched.</para>
    </param>
    <param name="File">
      <para>A wildcard expression that indicates the names of the source files to be searched. If this parameter is <b>NULL</b> or an empty string, all files are searched.</para>
    </param>
    <param name="EnumLinesCallback">
      <para>A
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumlines_callback">SymEnumLinesProc</a> callback function that receives the line information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function is supported for PDB information only. If you have COFF information, try using one of the <b>SymGetLineXXX</b> functions.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymEnumLines as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumLinesProc</seealso>
  </member>
  <member name="Windows.SymEnumLinesW">
    <summary>
      <para>Enumerates all lines in the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="Obj">
      <para>The name of an .obj file within the module. The scope of the enumeration is limited to this file. If this parameter is <b>NULL</b> or an empty string, all .obj files are searched.</para>
    </param>
    <param name="File">
      <para>A wildcard expression that indicates the names of the source files to be searched. If this parameter is <b>NULL</b> or an empty string, all files are searched.</para>
    </param>
    <param name="EnumLinesCallback">
      <para>A
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumlines_callback">SymEnumLinesProc</a> callback function that receives the line information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function is supported for PDB information only. If you have COFF information, try using one of the <b>SymGetLineXXX</b> functions.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymEnumLines as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumLinesProc</seealso>
  </member>
  <member name="Windows.SymEnumProcesses">
    <summary>
      <para>Enumerates each process that has called the <see cref="SymInitialize" /> function.</para>
    </summary>
    <param name="EnumProcessesCallback">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumprocesses_callback">SymEnumProcessesProc</a> callback function that receives the process information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumprocesses_callback">SymEnumProcessesProc</seealso>
  </member>
  <member name="Windows.SymEnumSourceFiles">
    <summary>
      <para>Enumerates all source files in a process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="ModBase">
      <para>The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and <i>Mask</i> does not contain an exclamation point, the function uses the scope established by the
<see cref="SymSetContext" /> function.</para>
    </param>
    <param name="Mask">
      <para>A wildcard expression that indicates the names of the source files to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</para>
      <para>If this parameter is <b>NULL</b>, the function will enumerate all files.</para>
    </param>
    <param name="cbSrcFiles">
      <para>Pointer to a
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsourcefiles_callback">SymEnumSourceFilesProc</a> callback function that receives the source file information.</para>
    </param>
    <param name="UserContext">
      <para>User-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsourcefiles_callback">SymEnumSourceFilesProc</seealso>
  </member>
  <member name="Windows.SymEnumSourceFilesW">
    <summary>
      <para>Enumerates all source files in a process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="ModBase">
      <para>The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and <i>Mask</i> does not contain an exclamation point, the function uses the scope established by the
<see cref="SymSetContext" /> function.</para>
    </param>
    <param name="Mask">
      <para>A wildcard expression that indicates the names of the source files to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</para>
      <para>If this parameter is <b>NULL</b>, the function will enumerate all files.</para>
    </param>
    <param name="cbSrcFiles">
      <para>Pointer to a
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsourcefiles_callback">SymEnumSourceFilesProc</a> callback function that receives the source file information.</para>
    </param>
    <param name="UserContext">
      <para>User-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsourcefiles_callback">SymEnumSourceFilesProc</seealso>
  </member>
  <member name="Windows.SymEnumSourceFiles">
    <summary>
      <para>Enumerates all source files in a process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="ModBase">
      <para>The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and <i>Mask</i> does not contain an exclamation point, the function uses the scope established by the
<see cref="SymSetContext" /> function.</para>
    </param>
    <param name="Mask">
      <para>A wildcard expression that indicates the names of the source files to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</para>
      <para>If this parameter is <b>NULL</b>, the function will enumerate all files.</para>
    </param>
    <param name="cbSrcFiles">
      <para>Pointer to a
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsourcefiles_callback">SymEnumSourceFilesProc</a> callback function that receives the source file information.</para>
    </param>
    <param name="UserContext">
      <para>User-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymEnumSourceFiles as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsourcefiles_callback">SymEnumSourceFilesProc</seealso>
  </member>
  <member name="Windows.SymEnumSourceFilesW">
    <summary>
      <para>Enumerates all source files in a process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="ModBase">
      <para>The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and <i>Mask</i> does not contain an exclamation point, the function uses the scope established by the
<see cref="SymSetContext" /> function.</para>
    </param>
    <param name="Mask">
      <para>A wildcard expression that indicates the names of the source files to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</para>
      <para>If this parameter is <b>NULL</b>, the function will enumerate all files.</para>
    </param>
    <param name="cbSrcFiles">
      <para>Pointer to a
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsourcefiles_callback">SymEnumSourceFilesProc</a> callback function that receives the source file information.</para>
    </param>
    <param name="UserContext">
      <para>User-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymEnumSourceFiles as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsourcefiles_callback">SymEnumSourceFilesProc</seealso>
  </member>
  <member name="Windows.SymEnumSourceFileTokens">
    <summary>
      <para>Enumerates all individual entries in a module's <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">source server</a> data, if available.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="Callback">
      <para>A
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumsourcefiletokenscallback">SymEnumSourceFileTokensProc</a> callback function that receives the symbol information.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Some modules have PDB files with <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">source server</a> information detailing the version control information for each of the source files used to create each individual module.  An application can use this function to enumerate the  data for every source file that was "source indexed".</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumsourcefiletokenscallback">SymEnumSourceFileTokensProc</seealso>
  </member>
  <member name="Windows.SymEnumSourceLines">
    <summary>
      <para>Enumerates all source lines in a module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="Obj">
      <para>The name of an .obj file within the module. The scope of the enumeration is limited to this file. If this parameter is <b>NULL</b> or an empty string, all .obj files are searched.</para>
    </param>
    <param name="File">
      <para>A wildcard expression that indicates the names of the source files to be searched. If this parameter is <b>NULL</b> or an empty string, all files are searched.</para>
    </param>
    <param name="Line">
      <para>The line number of a line within the module. The scope of the enumeration is limited to this line. If this parameter is 0, all lines are searched.</para>
    </param>
    <param name="Flags">
      <para>If this parameter is ESLFLAG_FULLPATH, the function matches the full path in the <i>File</i> parameter.</para>
    </param>
    <param name="EnumLinesCallback">
      <para>A
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumlines_callback">SymEnumLinesProc</a> callback function that receives the line information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumlines_callback">SymEnumLinesProc</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymEnumSourceLinesW">
    <summary>
      <para>Enumerates all source lines in a module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="Obj">
      <para>The name of an .obj file within the module. The scope of the enumeration is limited to this file. If this parameter is <b>NULL</b> or an empty string, all .obj files are searched.</para>
    </param>
    <param name="File">
      <para>A wildcard expression that indicates the names of the source files to be searched. If this parameter is <b>NULL</b> or an empty string, all files are searched.</para>
    </param>
    <param name="Line">
      <para>The line number of a line within the module. The scope of the enumeration is limited to this line. If this parameter is 0, all lines are searched.</para>
    </param>
    <param name="Flags">
      <para>If this parameter is ESLFLAG_FULLPATH, the function matches the full path in the <i>File</i> parameter.</para>
    </param>
    <param name="EnumLinesCallback">
      <para>A
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumlines_callback">SymEnumLinesProc</a> callback function that receives the line information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumlines_callback">SymEnumLinesProc</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymEnumSourceLines">
    <summary>
      <para>Enumerates all source lines in a module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="Obj">
      <para>The name of an .obj file within the module. The scope of the enumeration is limited to this file. If this parameter is <b>NULL</b> or an empty string, all .obj files are searched.</para>
    </param>
    <param name="File">
      <para>A wildcard expression that indicates the names of the source files to be searched. If this parameter is <b>NULL</b> or an empty string, all files are searched.</para>
    </param>
    <param name="Line">
      <para>The line number of a line within the module. The scope of the enumeration is limited to this line. If this parameter is 0, all lines are searched.</para>
    </param>
    <param name="Flags">
      <para>If this parameter is ESLFLAG_FULLPATH, the function matches the full path in the <i>File</i> parameter.</para>
    </param>
    <param name="EnumLinesCallback">
      <para>A
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumlines_callback">SymEnumLinesProc</a> callback function that receives the line information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymEnumSourceLines as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumlines_callback">SymEnumLinesProc</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymEnumSourceLinesW">
    <summary>
      <para>Enumerates all source lines in a module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="Obj">
      <para>The name of an .obj file within the module. The scope of the enumeration is limited to this file. If this parameter is <b>NULL</b> or an empty string, all .obj files are searched.</para>
    </param>
    <param name="File">
      <para>A wildcard expression that indicates the names of the source files to be searched. If this parameter is <b>NULL</b> or an empty string, all files are searched.</para>
    </param>
    <param name="Line">
      <para>The line number of a line within the module. The scope of the enumeration is limited to this line. If this parameter is 0, all lines are searched.</para>
    </param>
    <param name="Flags">
      <para>If this parameter is ESLFLAG_FULLPATH, the function matches the full path in the <i>File</i> parameter.</para>
    </param>
    <param name="EnumLinesCallback">
      <para>A
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumlines_callback">SymEnumLinesProc</a> callback function that receives the line information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymEnumSourceLines as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumlines_callback">SymEnumLinesProc</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymEnumSymbols">
    <summary>
      <para>Enumerates all symbols in a process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module. If this value is zero and <i>Mask</i> contains an
exclamation point (!), the function looks across modules. If this value is zero and
<i>Mask</i> does not contain an exclamation point, the function uses the scope established by
the <see cref="SymSetContext" /> function.</para>
    </param>
    <param name="Mask">
      <para>A wildcard string that indicates the names of the symbols to be enumerated. The text can optionally contain
the wildcards, "*" and "?".</para>
      <para>To specify a specific module or set of modules, begin the text with a wildcard string specifying the module,
followed by an exclamation point. When specifying a module, <i>BaseOfDll</i> is ignored.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>foo</b>
          </description>
          <description>
            <para>If <i>BaseOfDll</i> is not zero, then
<b>SymEnumSymbols</b> will look for a global symbol named
"foo".</para>
            <para>If <i>BaseOfDll</i> is zero, then
<b>SymEnumSymbols</b> will look for a local symbol named
"foo" within the scope established by the most recent call to the
<see cref="SymSetContext" /> function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>foo?</b>
          </description>
          <description>
            <para>If <i>BaseOfDll</i> is not zero, then
<b>SymEnumSymbols</b> will look for a global symbol that
starts with "foo" and contains one extra character afterwards, such as
"fool" and "foot".</para>
            <para>If <i>BaseOfDll</i> is zero, then
<b>SymEnumSymbols</b> will look for a symbol that starts
with "foo" and contains one extra character afterwards, such as "fool" and
"foot". The search would be within the scope established by the most recent call to the
<see cref="SymSetContext" /> function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>foo*!bar</b>
          </description>
          <description>
            <b>SymEnumSymbols</b> will look in every loaded module
that starts with the text "foo" for a symbol called "bar".  It could find
matches such as these, "foot!bar", "footlocker!bar", and
"fool!bar".
</description>
        </item>
        <item>
          <description>
            <b>*!*</b>
          </description>
          <description>
            <b>SymEnumSymbols</b> will enumerate every symbol in
every loaded module.
</description>
        </item>
      </list>
    </param>
    <param name="EnumSymbolsCallback">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that
receives the symbol information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value that is passed to the callback function, or <b>NULL</b>. This
parameter is typically used by an application to pass a pointer to a data structure that provides context for
the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define
<b>DBGHELP_TRANSLATE_TCHAR</b>.</para>
      <h4>Examples</h4>
      <para>For an example, see <a href="https://docs.microsoft.com//windows/desktop/Debug/enumerating-symbols">Enumerating Symbols</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</seealso>
  </member>
  <member name="Windows.SymEnumSymbolsW">
    <summary>
      <para>Enumerates all symbols in a process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module. If this value is zero and <i>Mask</i> contains an
exclamation point (!), the function looks across modules. If this value is zero and
<i>Mask</i> does not contain an exclamation point, the function uses the scope established by
the <see cref="SymSetContext" /> function.</para>
    </param>
    <param name="Mask">
      <para>A wildcard string that indicates the names of the symbols to be enumerated. The text can optionally contain
the wildcards, "*" and "?".</para>
      <para>To specify a specific module or set of modules, begin the text with a wildcard string specifying the module,
followed by an exclamation point. When specifying a module, <i>BaseOfDll</i> is ignored.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>foo</b>
          </description>
          <description>
            <para>If <i>BaseOfDll</i> is not zero, then
<b>SymEnumSymbols</b> will look for a global symbol named
"foo".</para>
            <para>If <i>BaseOfDll</i> is zero, then
<b>SymEnumSymbols</b> will look for a local symbol named
"foo" within the scope established by the most recent call to the
<see cref="SymSetContext" /> function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>foo?</b>
          </description>
          <description>
            <para>If <i>BaseOfDll</i> is not zero, then
<b>SymEnumSymbols</b> will look for a global symbol that
starts with "foo" and contains one extra character afterwards, such as
"fool" and "foot".</para>
            <para>If <i>BaseOfDll</i> is zero, then
<b>SymEnumSymbols</b> will look for a symbol that starts
with "foo" and contains one extra character afterwards, such as "fool" and
"foot". The search would be within the scope established by the most recent call to the
<see cref="SymSetContext" /> function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>foo*!bar</b>
          </description>
          <description>
            <b>SymEnumSymbols</b> will look in every loaded module
that starts with the text "foo" for a symbol called "bar".  It could find
matches such as these, "foot!bar", "footlocker!bar", and
"fool!bar".
</description>
        </item>
        <item>
          <description>
            <b>*!*</b>
          </description>
          <description>
            <b>SymEnumSymbols</b> will enumerate every symbol in
every loaded module.
</description>
        </item>
      </list>
    </param>
    <param name="EnumSymbolsCallback">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that
receives the symbol information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value that is passed to the callback function, or <b>NULL</b>. This
parameter is typically used by an application to pass a pointer to a data structure that provides context for
the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define
<b>DBGHELP_TRANSLATE_TCHAR</b>.</para>
      <h4>Examples</h4>
      <para>For an example, see <a href="https://docs.microsoft.com//windows/desktop/Debug/enumerating-symbols">Enumerating Symbols</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</seealso>
  </member>
  <member name="Windows.SymEnumSymbolsEx">
    <summary>
      <para>Enumerates all symbols in a process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module. If this value is zero and <i>Mask</i> contains an
exclamation point (!), the function looks across modules. If this value is zero and
<i>Mask</i> does not contain an exclamation point, the function uses the scope established by
the <see cref="SymSetContext" /> function.</para>
    </param>
    <param name="Mask">
      <para>A wildcard string that indicates the names of the symbols to be enumerated. The text can optionally contain
the wildcards, "*" and "?".</para>
      <para>To specify a specific module or set of modules, begin the text with a wildcard string specifying the module,
followed by an exclamation point. When specifying a module, <i>BaseOfDll</i> is ignored.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>foo</b>
          </description>
          <description>
            <para>If <i>BaseOfDll</i> is not zero, then
<see cref="SymEnumSymbols" /> will look for a global symbol named
"foo".</para>
            <para>If <i>BaseOfDll</i> is zero, then
<see cref="SymEnumSymbols" /> will look for a local symbol named
"foo" within the scope established by the most recent call to the
<see cref="SymSetContext" /> function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>foo?</b>
          </description>
          <description>
            <para>If <i>BaseOfDll</i> is not zero, then
<see cref="SymEnumSymbols" /> will look for a global symbol that
starts with "foo" and contains one extra character afterwards, such as
"fool" and "foot".</para>
            <para>If <i>BaseOfDll</i> is zero, then
<see cref="SymEnumSymbols" /> will look for a symbol that starts
with "foo" and contains one extra character afterwards, such as "fool" and
"foot". The search would be within the scope established by the most recent call to the
<see cref="SymSetContext" /> function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>foo*!bar</b>
          </description>
          <description>
            <para>
              <see cref="SymEnumSymbols" /> will look in every loaded module
that starts with the text "foo" for a symbol called "bar".  It could find
matches such as these, "foot!bar", "footlocker!bar", and
"fool!bar".</para>
          </description>
        </item>
        <item>
          <description>
            <b>*!*</b>
          </description>
          <description>
            <para>
              <see cref="SymEnumSymbols" /> will enumerate every symbol in
every loaded module.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="EnumSymbolsCallback">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that
receives the symbol information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value that is passed to the callback function, or <b>NULL</b>. This
parameter is typically used by an application to pass a pointer to a data structure that provides context for
the callback function.</para>
    </param>
    <param name="Options">
      <para>Indicates possible options.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMENUM_OPTIONS_DEFAULT</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Use the default options.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMENUM_OPTIONS_INLINE</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Enumerate inline symbols.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSymbolsExW">
    <summary>
      <para>Enumerates all symbols in a process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module. If this value is zero and <i>Mask</i> contains an
exclamation point (!), the function looks across modules. If this value is zero and
<i>Mask</i> does not contain an exclamation point, the function uses the scope established by
the <see cref="SymSetContext" /> function.</para>
    </param>
    <param name="Mask">
      <para>A wildcard string that indicates the names of the symbols to be enumerated. The text can optionally contain
the wildcards, "*" and "?".</para>
      <para>To specify a specific module or set of modules, begin the text with a wildcard string specifying the module,
followed by an exclamation point. When specifying a module, <i>BaseOfDll</i> is ignored.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>foo</b>
          </description>
          <description>
            <para>If <i>BaseOfDll</i> is not zero, then
<see cref="SymEnumSymbols" /> will look for a global symbol named
"foo".</para>
            <para>If <i>BaseOfDll</i> is zero, then
<see cref="SymEnumSymbols" /> will look for a local symbol named
"foo" within the scope established by the most recent call to the
<see cref="SymSetContext" /> function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>foo?</b>
          </description>
          <description>
            <para>If <i>BaseOfDll</i> is not zero, then
<see cref="SymEnumSymbols" /> will look for a global symbol that
starts with "foo" and contains one extra character afterwards, such as
"fool" and "foot".</para>
            <para>If <i>BaseOfDll</i> is zero, then
<see cref="SymEnumSymbols" /> will look for a symbol that starts
with "foo" and contains one extra character afterwards, such as "fool" and
"foot". The search would be within the scope established by the most recent call to the
<see cref="SymSetContext" /> function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>foo*!bar</b>
          </description>
          <description>
            <para>
              <see cref="SymEnumSymbols" /> will look in every loaded module
that starts with the text "foo" for a symbol called "bar".  It could find
matches such as these, "foot!bar", "footlocker!bar", and
"fool!bar".</para>
          </description>
        </item>
        <item>
          <description>
            <b>*!*</b>
          </description>
          <description>
            <para>
              <see cref="SymEnumSymbols" /> will enumerate every symbol in
every loaded module.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="EnumSymbolsCallback">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that
receives the symbol information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value that is passed to the callback function, or <b>NULL</b>. This
parameter is typically used by an application to pass a pointer to a data structure that provides context for
the callback function.</para>
    </param>
    <param name="Options">
      <para>Indicates possible options.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMENUM_OPTIONS_DEFAULT</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Use the default options.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMENUM_OPTIONS_INLINE</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Enumerate inline symbols.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSymbolsEx">
    <summary>
      <para>Enumerates all symbols in a process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module. If this value is zero and <i>Mask</i> contains an
exclamation point (!), the function looks across modules. If this value is zero and
<i>Mask</i> does not contain an exclamation point, the function uses the scope established by
the <see cref="SymSetContext" /> function.</para>
    </param>
    <param name="Mask">
      <para>A wildcard string that indicates the names of the symbols to be enumerated. The text can optionally contain
the wildcards, "*" and "?".</para>
      <para>To specify a specific module or set of modules, begin the text with a wildcard string specifying the module,
followed by an exclamation point. When specifying a module, <i>BaseOfDll</i> is ignored.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>foo</b>
          </description>
          <description>
            <para>If <i>BaseOfDll</i> is not zero, then
<see cref="SymEnumSymbols" /> will look for a global symbol named
"foo".</para>
            <para>If <i>BaseOfDll</i> is zero, then
<see cref="SymEnumSymbols" /> will look for a local symbol named
"foo" within the scope established by the most recent call to the
<see cref="SymSetContext" /> function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>foo?</b>
          </description>
          <description>
            <para>If <i>BaseOfDll</i> is not zero, then
<see cref="SymEnumSymbols" /> will look for a global symbol that
starts with "foo" and contains one extra character afterwards, such as
"fool" and "foot".</para>
            <para>If <i>BaseOfDll</i> is zero, then
<see cref="SymEnumSymbols" /> will look for a symbol that starts
with "foo" and contains one extra character afterwards, such as "fool" and
"foot". The search would be within the scope established by the most recent call to the
<see cref="SymSetContext" /> function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>foo*!bar</b>
          </description>
          <description>
            <para>
              <see cref="SymEnumSymbols" /> will look in every loaded module
that starts with the text "foo" for a symbol called "bar".  It could find
matches such as these, "foot!bar", "footlocker!bar", and
"fool!bar".</para>
          </description>
        </item>
        <item>
          <description>
            <b>*!*</b>
          </description>
          <description>
            <para>
              <see cref="SymEnumSymbols" /> will enumerate every symbol in
every loaded module.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="EnumSymbolsCallback">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that
receives the symbol information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value that is passed to the callback function, or <b>NULL</b>. This
parameter is typically used by an application to pass a pointer to a data structure that provides context for
the callback function.</para>
    </param>
    <param name="Options">
      <para>Indicates possible options.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMENUM_OPTIONS_DEFAULT</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Use the default options.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMENUM_OPTIONS_INLINE</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Enumerate inline symbols.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymEnumSymbolsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.SymEnumSymbolsExW">
    <summary>
      <para>Enumerates all symbols in a process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module. If this value is zero and <i>Mask</i> contains an
exclamation point (!), the function looks across modules. If this value is zero and
<i>Mask</i> does not contain an exclamation point, the function uses the scope established by
the <see cref="SymSetContext" /> function.</para>
    </param>
    <param name="Mask">
      <para>A wildcard string that indicates the names of the symbols to be enumerated. The text can optionally contain
the wildcards, "*" and "?".</para>
      <para>To specify a specific module or set of modules, begin the text with a wildcard string specifying the module,
followed by an exclamation point. When specifying a module, <i>BaseOfDll</i> is ignored.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>foo</b>
          </description>
          <description>
            <para>If <i>BaseOfDll</i> is not zero, then
<see cref="SymEnumSymbols" /> will look for a global symbol named
"foo".</para>
            <para>If <i>BaseOfDll</i> is zero, then
<see cref="SymEnumSymbols" /> will look for a local symbol named
"foo" within the scope established by the most recent call to the
<see cref="SymSetContext" /> function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>foo?</b>
          </description>
          <description>
            <para>If <i>BaseOfDll</i> is not zero, then
<see cref="SymEnumSymbols" /> will look for a global symbol that
starts with "foo" and contains one extra character afterwards, such as
"fool" and "foot".</para>
            <para>If <i>BaseOfDll</i> is zero, then
<see cref="SymEnumSymbols" /> will look for a symbol that starts
with "foo" and contains one extra character afterwards, such as "fool" and
"foot". The search would be within the scope established by the most recent call to the
<see cref="SymSetContext" /> function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>foo*!bar</b>
          </description>
          <description>
            <para>
              <see cref="SymEnumSymbols" /> will look in every loaded module
that starts with the text "foo" for a symbol called "bar".  It could find
matches such as these, "foot!bar", "footlocker!bar", and
"fool!bar".</para>
          </description>
        </item>
        <item>
          <description>
            <b>*!*</b>
          </description>
          <description>
            <para>
              <see cref="SymEnumSymbols" /> will enumerate every symbol in
every loaded module.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="EnumSymbolsCallback">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that
receives the symbol information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value that is passed to the callback function, or <b>NULL</b>. This
parameter is typically used by an application to pass a pointer to a data structure that provides context for
the callback function.</para>
    </param>
    <param name="Options">
      <para>Indicates possible options.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMENUM_OPTIONS_DEFAULT</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Use the default options.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMENUM_OPTIONS_INLINE</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>Enumerate inline symbols.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymEnumSymbolsEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.SymEnumSymbolsForAddr">
    <summary>
      <para>Enumerates the symbols for the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Address">
      <para>The address for which symbols are to be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol (the beginning of the symbol plus the symbol size), the function will find the symbol.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>An application-defined callback function. This function is called for every symbol found at <i>Address</i>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a>.</para>
    </param>
    <param name="UserContext">
      <para>Optional user-defined data. This value is passed to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</seealso>
  </member>
  <member name="Windows.SymEnumSymbolsForAddrW">
    <summary>
      <para>Enumerates the symbols for the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Address">
      <para>The address for which symbols are to be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol (the beginning of the symbol plus the symbol size), the function will find the symbol.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>An application-defined callback function. This function is called for every symbol found at <i>Address</i>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a>.</para>
    </param>
    <param name="UserContext">
      <para>Optional user-defined data. This value is passed to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</seealso>
  </member>
  <member name="Windows.SymEnumSymbolsForAddr">
    <summary>
      <para>Enumerates the symbols for the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Address">
      <para>The address for which symbols are to be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol (the beginning of the symbol plus the symbol size), the function will find the symbol.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>An application-defined callback function. This function is called for every symbol found at <i>Address</i>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a>.</para>
    </param>
    <param name="UserContext">
      <para>Optional user-defined data. This value is passed to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymEnumSymbolsForAddr as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</seealso>
  </member>
  <member name="Windows.SymEnumSymbolsForAddrW">
    <summary>
      <para>Enumerates the symbols for the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Address">
      <para>The address for which symbols are to be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol (the beginning of the symbol plus the symbol size), the function will find the symbol.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>An application-defined callback function. This function is called for every symbol found at <i>Address</i>. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a>.</para>
    </param>
    <param name="UserContext">
      <para>Optional user-defined data. This value is passed to the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymEnumSymbolsForAddr as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</seealso>
  </member>
  <member name="Windows.SymEnumSymbols">
    <summary>
      <para>Enumerates all symbols in a process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module. If this value is zero and <i>Mask</i> contains an
exclamation point (!), the function looks across modules. If this value is zero and
<i>Mask</i> does not contain an exclamation point, the function uses the scope established by
the <see cref="SymSetContext" /> function.</para>
    </param>
    <param name="Mask">
      <para>A wildcard string that indicates the names of the symbols to be enumerated. The text can optionally contain
the wildcards, "*" and "?".</para>
      <para>To specify a specific module or set of modules, begin the text with a wildcard string specifying the module,
followed by an exclamation point. When specifying a module, <i>BaseOfDll</i> is ignored.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>foo</b>
          </description>
          <description>
            <para>If <i>BaseOfDll</i> is not zero, then
<b>SymEnumSymbols</b> will look for a global symbol named
"foo".</para>
            <para>If <i>BaseOfDll</i> is zero, then
<b>SymEnumSymbols</b> will look for a local symbol named
"foo" within the scope established by the most recent call to the
<see cref="SymSetContext" /> function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>foo?</b>
          </description>
          <description>
            <para>If <i>BaseOfDll</i> is not zero, then
<b>SymEnumSymbols</b> will look for a global symbol that
starts with "foo" and contains one extra character afterwards, such as
"fool" and "foot".</para>
            <para>If <i>BaseOfDll</i> is zero, then
<b>SymEnumSymbols</b> will look for a symbol that starts
with "foo" and contains one extra character afterwards, such as "fool" and
"foot". The search would be within the scope established by the most recent call to the
<see cref="SymSetContext" /> function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>foo*!bar</b>
          </description>
          <description>
            <b>SymEnumSymbols</b> will look in every loaded module
that starts with the text "foo" for a symbol called "bar".  It could find
matches such as these, "foot!bar", "footlocker!bar", and
"fool!bar".
</description>
        </item>
        <item>
          <description>
            <b>*!*</b>
          </description>
          <description>
            <b>SymEnumSymbols</b> will enumerate every symbol in
every loaded module.
</description>
        </item>
      </list>
    </param>
    <param name="EnumSymbolsCallback">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that
receives the symbol information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value that is passed to the callback function, or <b>NULL</b>. This
parameter is typically used by an application to pass a pointer to a data structure that provides context for
the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define
<b>DBGHELP_TRANSLATE_TCHAR</b>.</para>
      <h4>Examples</h4>
      <para>For an example, see <a href="https://docs.microsoft.com//windows/desktop/Debug/enumerating-symbols">Enumerating Symbols</a>.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymEnumSymbols as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</seealso>
  </member>
  <member name="Windows.SymEnumSymbolsW">
    <summary>
      <para>Enumerates all symbols in a process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module. If this value is zero and <i>Mask</i> contains an
exclamation point (!), the function looks across modules. If this value is zero and
<i>Mask</i> does not contain an exclamation point, the function uses the scope established by
the <see cref="SymSetContext" /> function.</para>
    </param>
    <param name="Mask">
      <para>A wildcard string that indicates the names of the symbols to be enumerated. The text can optionally contain
the wildcards, "*" and "?".</para>
      <para>To specify a specific module or set of modules, begin the text with a wildcard string specifying the module,
followed by an exclamation point. When specifying a module, <i>BaseOfDll</i> is ignored.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>foo</b>
          </description>
          <description>
            <para>If <i>BaseOfDll</i> is not zero, then
<b>SymEnumSymbols</b> will look for a global symbol named
"foo".</para>
            <para>If <i>BaseOfDll</i> is zero, then
<b>SymEnumSymbols</b> will look for a local symbol named
"foo" within the scope established by the most recent call to the
<see cref="SymSetContext" /> function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>foo?</b>
          </description>
          <description>
            <para>If <i>BaseOfDll</i> is not zero, then
<b>SymEnumSymbols</b> will look for a global symbol that
starts with "foo" and contains one extra character afterwards, such as
"fool" and "foot".</para>
            <para>If <i>BaseOfDll</i> is zero, then
<b>SymEnumSymbols</b> will look for a symbol that starts
with "foo" and contains one extra character afterwards, such as "fool" and
"foot". The search would be within the scope established by the most recent call to the
<see cref="SymSetContext" /> function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>foo*!bar</b>
          </description>
          <description>
            <b>SymEnumSymbols</b> will look in every loaded module
that starts with the text "foo" for a symbol called "bar".  It could find
matches such as these, "foot!bar", "footlocker!bar", and
"fool!bar".
</description>
        </item>
        <item>
          <description>
            <b>*!*</b>
          </description>
          <description>
            <b>SymEnumSymbols</b> will enumerate every symbol in
every loaded module.
</description>
        </item>
      </list>
    </param>
    <param name="EnumSymbolsCallback">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that
receives the symbol information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value that is passed to the callback function, or <b>NULL</b>. This
parameter is typically used by an application to pass a pointer to a data structure that provides context for
the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define
<b>DBGHELP_TRANSLATE_TCHAR</b>.</para>
      <h4>Examples</h4>
      <para>For an example, see <a href="https://docs.microsoft.com//windows/desktop/Debug/enumerating-symbols">Enumerating Symbols</a>.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymEnumSymbols as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</seealso>
  </member>
  <member name="Windows.SymEnumTypes">
    <summary>
      <para>Enumerates all user-defined types.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>A pointer to an
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value to be passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context information for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</seealso>
  </member>
  <member name="Windows.SymEnumTypesW">
    <summary>
      <para>Enumerates all user-defined types.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>A pointer to an
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value to be passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context information for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</seealso>
  </member>
  <member name="Windows.SymEnumTypesByName">
    <summary>
      <para>Enumerates all user-defined types.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="mask">
      <para>A wildcard expression that indicates the names of the symbols to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>A pointer to an
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value to be passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context information for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</seealso>
  </member>
  <member name="Windows.SymEnumTypesByNameW">
    <summary>
      <para>Enumerates all user-defined types.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="mask">
      <para>A wildcard expression that indicates the names of the symbols to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>A pointer to an
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value to be passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context information for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</seealso>
  </member>
  <member name="Windows.SymEnumTypesByName">
    <summary>
      <para>Enumerates all user-defined types.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="mask">
      <para>A wildcard expression that indicates the names of the symbols to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>A pointer to an
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value to be passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context information for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymEnumTypesByName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</seealso>
  </member>
  <member name="Windows.SymEnumTypesByNameW">
    <summary>
      <para>Enumerates all user-defined types.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="mask">
      <para>A wildcard expression that indicates the names of the symbols to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>A pointer to an
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value to be passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context information for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymEnumTypesByName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</seealso>
  </member>
  <member name="Windows.SymEnumTypes">
    <summary>
      <para>Enumerates all user-defined types.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>A pointer to an
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value to be passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context information for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymEnumTypes as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</seealso>
  </member>
  <member name="Windows.SymEnumTypesW">
    <summary>
      <para>Enumerates all user-defined types.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>A pointer to an
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value to be passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context information for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymEnumTypes as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</seealso>
  </member>
  <member name="Windows.SymFindDebugInfoFile">
    <summary>
      <para>Locates a .dbg file in the process search path.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="FileName">
      <para>The name of the .dbg file. You can use a partial path.</para>
    </param>
    <param name="DebugFilePath">
      <para>The fully qualified path of the .dbg file. This buffer must be at least MAX_PATH characters.</para>
    </param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct file was found or the function should continue its search. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the .dbg file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function uses the search path set using the
<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</seealso>
  </member>
  <member name="Windows.SymFindDebugInfoFileW">
    <summary>
      <para>Locates a .dbg file in the process search path.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="FileName">
      <para>The name of the .dbg file. You can use a partial path.</para>
    </param>
    <param name="DebugFilePath">
      <para>The fully qualified path of the .dbg file. This buffer must be at least MAX_PATH characters.</para>
    </param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct file was found or the function should continue its search. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the .dbg file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function uses the search path set using the
<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</seealso>
  </member>
  <member name="Windows.SymFindDebugInfoFile">
    <summary>
      <para>Locates a .dbg file in the process search path.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="FileName">
      <para>The name of the .dbg file. You can use a partial path.</para>
    </param>
    <param name="DebugFilePath">
      <para>The fully qualified path of the .dbg file. This buffer must be at least MAX_PATH characters.</para>
    </param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct file was found or the function should continue its search. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the .dbg file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function uses the search path set using the
<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymFindDebugInfoFile as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</seealso>
  </member>
  <member name="Windows.SymFindDebugInfoFileW">
    <summary>
      <para>Locates a .dbg file in the process search path.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="FileName">
      <para>The name of the .dbg file. You can use a partial path.</para>
    </param>
    <param name="DebugFilePath">
      <para>The fully qualified path of the .dbg file. This buffer must be at least MAX_PATH characters.</para>
    </param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct file was found or the function should continue its search. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the .dbg file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function uses the search path set using the
<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymFindDebugInfoFile as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</seealso>
  </member>
  <member name="Windows.SymFindExecutableImage">
    <summary>
      <para>Locates an executable file in the process search path.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="FileName">
      <para>The name of the executable file. You can use a partial path.</para>
    </param>
    <param name="ImageFilePath">
      <para>The fully qualified path of the executable file. This buffer must be at least MAX_PATH characters.</para>
    </param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct executable file was found, or whether the function should continue its search. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the executable file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function uses the search path set using the
<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</seealso>
  </member>
  <member name="Windows.SymFindExecutableImageW">
    <summary>
      <para>Locates an executable file in the process search path.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="FileName">
      <para>The name of the executable file. You can use a partial path.</para>
    </param>
    <param name="ImageFilePath">
      <para>The fully qualified path of the executable file. This buffer must be at least MAX_PATH characters.</para>
    </param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct executable file was found, or whether the function should continue its search. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the executable file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function uses the search path set using the
<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</seealso>
  </member>
  <member name="Windows.SymFindExecutableImage">
    <summary>
      <para>Locates an executable file in the process search path.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="FileName">
      <para>The name of the executable file. You can use a partial path.</para>
    </param>
    <param name="ImageFilePath">
      <para>The fully qualified path of the executable file. This buffer must be at least MAX_PATH characters.</para>
    </param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct executable file was found, or whether the function should continue its search. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the executable file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function uses the search path set using the
<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymFindExecutableImage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</seealso>
  </member>
  <member name="Windows.SymFindExecutableImageW">
    <summary>
      <para>Locates an executable file in the process search path.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="FileName">
      <para>The name of the executable file. You can use a partial path.</para>
    </param>
    <param name="ImageFilePath">
      <para>The fully qualified path of the executable file. This buffer must be at least MAX_PATH characters.</para>
    </param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct executable file was found, or whether the function should continue its search. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the executable file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function uses the search path set using the
<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymFindExecutableImage as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</seealso>
  </member>
  <member name="Windows.SymFindFileInPath">
    <summary>
      <para>Locates a symbol file or executable image.</para>
    </summary>
    <param name="hprocess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SearchPath">
      <para>The search path. This can be multiple paths separated by semicolons. It can include both directories and symbol servers. If this parameter is <b>NULL</b>, the function uses the search path set using the
<see cref="SymSetSearchPath" /> or <see cref="SymInitialize" /> function.</para>
    </param>
    <param name="FileName">
      <para>The name of the file. You can specify a path; however, only the file name is used.</para>
    </param>
    <param name="id">
      <para>The first of three identifying parameters (see Remarks).</para>
    </param>
    <param name="two">
      <para>The second of three identifying parameters (see Remarks).</para>
    </param>
    <param name="three">
      <para>The third of three identifying parameters (see Remarks).</para>
    </param>
    <param name="flags">
      <para>The format of the <i>id</i> parameter. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SSRVOPT_DWORD</b>
                </description>
              </item>
              <item>
                <description>0x0002</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>id</i> parameter is a <b>DWORD</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SSRVOPT_DWORDPTR</b>
                </description>
              </item>
              <item>
                <description>0x0004</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>id</i> parameter is a pointer to a <b>DWORD</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SSRVOPT_GUIDPTR</b>
                </description>
              </item>
              <item>
                <description>0x0008</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>id</i> parameter is a pointer to a <b>GUID</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="FoundFile">
      <para>A pointer to a buffer that receives the fully qualified path to the symbol file. This buffer must be at least MAX_PATH characters.</para>
    </param>
    <param name="callback">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfindfileinpathcallback">SymFindFileInPathProc</a> callback function.</para>
    </param>
    <param name="context">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</para>
    </param>
    <returns>
      <para>If the server locates a valid symbol file, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b> and
<see cref="GetLastError" /> returns a value that indicates why the symbol file was not returned.</para>
    </returns>
    <remarks>
      <para>The identifying parameters are filled in as follows:</para>
      <list type="bullet">
        <item>
          <description>
            <para>If DbgHelp is looking for a .pdb file, the <i>id</i> parameter specifies the PDB signature as found in the codeview debug directory of the original image. Parameter <i>two</i> specifies the PDB age. Parameter <i>three</i> is unused and set to zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>If DbgHelp is looking for any other type of image, such as an executable file or .dbg file, the <i>id</i> parameter specifies the TimeDateStamp of the original image as found in its PE header. Parameter <i>two</i> specifies the SizeOfImage field, also extracted from the PE header. Parameter <i>three</i> is unused and set to zero.</para>
          </description>
        </item>
      </list>
      <para>All of these values can be obtained by calling <see cref="SymSrvGetFileIndexInfo" />.</para>
      <para>When searching a directory, this function does not verify that the symbol identifiers match by default. To ensure the matching symbol files are located, call the <see cref="SymSetOptions" /> function with SYMOPT_EXACT_SYMBOLS.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfindfileinpathcallback">SymFindFileInPathProc</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymSetSearchPath" />
    <seealso cref="SymSrvGetFileIndexInfo" />
  </member>
  <member name="Windows.SymFindFileInPathW">
    <summary>
      <para>Locates a symbol file or executable image.</para>
    </summary>
    <param name="hprocess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SearchPath">
      <para>The search path. This can be multiple paths separated by semicolons. It can include both directories and symbol servers. If this parameter is <b>NULL</b>, the function uses the search path set using the
<see cref="SymSetSearchPath" /> or <see cref="SymInitialize" /> function.</para>
    </param>
    <param name="FileName">
      <para>The name of the file. You can specify a path; however, only the file name is used.</para>
    </param>
    <param name="id">
      <para>The first of three identifying parameters (see Remarks).</para>
    </param>
    <param name="two">
      <para>The second of three identifying parameters (see Remarks).</para>
    </param>
    <param name="three">
      <para>The third of three identifying parameters (see Remarks).</para>
    </param>
    <param name="flags">
      <para>The format of the <i>id</i> parameter. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SSRVOPT_DWORD</b>
                </description>
              </item>
              <item>
                <description>0x0002</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>id</i> parameter is a <b>DWORD</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SSRVOPT_DWORDPTR</b>
                </description>
              </item>
              <item>
                <description>0x0004</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>id</i> parameter is a pointer to a <b>DWORD</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SSRVOPT_GUIDPTR</b>
                </description>
              </item>
              <item>
                <description>0x0008</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>id</i> parameter is a pointer to a <b>GUID</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="FoundFile">
      <para>A pointer to a buffer that receives the fully qualified path to the symbol file. This buffer must be at least MAX_PATH characters.</para>
    </param>
    <param name="callback">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfindfileinpathcallback">SymFindFileInPathProc</a> callback function.</para>
    </param>
    <param name="context">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</para>
    </param>
    <returns>
      <para>If the server locates a valid symbol file, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b> and
<see cref="GetLastError" /> returns a value that indicates why the symbol file was not returned.</para>
    </returns>
    <remarks>
      <para>The identifying parameters are filled in as follows:</para>
      <list type="bullet">
        <item>
          <description>
            <para>If DbgHelp is looking for a .pdb file, the <i>id</i> parameter specifies the PDB signature as found in the codeview debug directory of the original image. Parameter <i>two</i> specifies the PDB age. Parameter <i>three</i> is unused and set to zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>If DbgHelp is looking for any other type of image, such as an executable file or .dbg file, the <i>id</i> parameter specifies the TimeDateStamp of the original image as found in its PE header. Parameter <i>two</i> specifies the SizeOfImage field, also extracted from the PE header. Parameter <i>three</i> is unused and set to zero.</para>
          </description>
        </item>
      </list>
      <para>All of these values can be obtained by calling <see cref="SymSrvGetFileIndexInfo" />.</para>
      <para>When searching a directory, this function does not verify that the symbol identifiers match by default. To ensure the matching symbol files are located, call the <see cref="SymSetOptions" /> function with SYMOPT_EXACT_SYMBOLS.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfindfileinpathcallback">SymFindFileInPathProc</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymSetSearchPath" />
    <seealso cref="SymSrvGetFileIndexInfo" />
  </member>
  <member name="Windows.SymFindFileInPath">
    <summary>
      <para>Locates a symbol file or executable image.</para>
    </summary>
    <param name="hprocess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SearchPath">
      <para>The search path. This can be multiple paths separated by semicolons. It can include both directories and symbol servers. If this parameter is <b>NULL</b>, the function uses the search path set using the
<see cref="SymSetSearchPath" /> or <see cref="SymInitialize" /> function.</para>
    </param>
    <param name="FileName">
      <para>The name of the file. You can specify a path; however, only the file name is used.</para>
    </param>
    <param name="id">
      <para>The first of three identifying parameters (see Remarks).</para>
    </param>
    <param name="two">
      <para>The second of three identifying parameters (see Remarks).</para>
    </param>
    <param name="three">
      <para>The third of three identifying parameters (see Remarks).</para>
    </param>
    <param name="flags">
      <para>The format of the <i>id</i> parameter. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SSRVOPT_DWORD</b>
                </description>
              </item>
              <item>
                <description>0x0002</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>id</i> parameter is a <b>DWORD</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SSRVOPT_DWORDPTR</b>
                </description>
              </item>
              <item>
                <description>0x0004</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>id</i> parameter is a pointer to a <b>DWORD</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SSRVOPT_GUIDPTR</b>
                </description>
              </item>
              <item>
                <description>0x0008</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>id</i> parameter is a pointer to a <b>GUID</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="FoundFile">
      <para>A pointer to a buffer that receives the fully qualified path to the symbol file. This buffer must be at least MAX_PATH characters.</para>
    </param>
    <param name="callback">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfindfileinpathcallback">SymFindFileInPathProc</a> callback function.</para>
    </param>
    <param name="context">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</para>
    </param>
    <returns>
      <para>If the server locates a valid symbol file, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b> and
<see cref="GetLastError" /> returns a value that indicates why the symbol file was not returned.</para>
    </returns>
    <remarks>
      <para>The identifying parameters are filled in as follows:</para>
      <list type="bullet">
        <item>
          <description>
            <para>If DbgHelp is looking for a .pdb file, the <i>id</i> parameter specifies the PDB signature as found in the codeview debug directory of the original image. Parameter <i>two</i> specifies the PDB age. Parameter <i>three</i> is unused and set to zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>If DbgHelp is looking for any other type of image, such as an executable file or .dbg file, the <i>id</i> parameter specifies the TimeDateStamp of the original image as found in its PE header. Parameter <i>two</i> specifies the SizeOfImage field, also extracted from the PE header. Parameter <i>three</i> is unused and set to zero.</para>
          </description>
        </item>
      </list>
      <para>All of these values can be obtained by calling <see cref="SymSrvGetFileIndexInfo" />.</para>
      <para>When searching a directory, this function does not verify that the symbol identifiers match by default. To ensure the matching symbol files are located, call the <see cref="SymSetOptions" /> function with SYMOPT_EXACT_SYMBOLS.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymFindFileInPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfindfileinpathcallback">SymFindFileInPathProc</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymSetSearchPath" />
    <seealso cref="SymSrvGetFileIndexInfo" />
  </member>
  <member name="Windows.SymFindFileInPathW">
    <summary>
      <para>Locates a symbol file or executable image.</para>
    </summary>
    <param name="hprocess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SearchPath">
      <para>The search path. This can be multiple paths separated by semicolons. It can include both directories and symbol servers. If this parameter is <b>NULL</b>, the function uses the search path set using the
<see cref="SymSetSearchPath" /> or <see cref="SymInitialize" /> function.</para>
    </param>
    <param name="FileName">
      <para>The name of the file. You can specify a path; however, only the file name is used.</para>
    </param>
    <param name="id">
      <para>The first of three identifying parameters (see Remarks).</para>
    </param>
    <param name="two">
      <para>The second of three identifying parameters (see Remarks).</para>
    </param>
    <param name="three">
      <para>The third of three identifying parameters (see Remarks).</para>
    </param>
    <param name="flags">
      <para>The format of the <i>id</i> parameter. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SSRVOPT_DWORD</b>
                </description>
              </item>
              <item>
                <description>0x0002</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>id</i> parameter is a <b>DWORD</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SSRVOPT_DWORDPTR</b>
                </description>
              </item>
              <item>
                <description>0x0004</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>id</i> parameter is a pointer to a <b>DWORD</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SSRVOPT_GUIDPTR</b>
                </description>
              </item>
              <item>
                <description>0x0008</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <i>id</i> parameter is a pointer to a <b>GUID</b>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="FoundFile">
      <para>A pointer to a buffer that receives the fully qualified path to the symbol file. This buffer must be at least MAX_PATH characters.</para>
    </param>
    <param name="callback">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfindfileinpathcallback">SymFindFileInPathProc</a> callback function.</para>
    </param>
    <param name="context">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</para>
    </param>
    <returns>
      <para>If the server locates a valid symbol file, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b> and
<see cref="GetLastError" /> returns a value that indicates why the symbol file was not returned.</para>
    </returns>
    <remarks>
      <para>The identifying parameters are filled in as follows:</para>
      <list type="bullet">
        <item>
          <description>
            <para>If DbgHelp is looking for a .pdb file, the <i>id</i> parameter specifies the PDB signature as found in the codeview debug directory of the original image. Parameter <i>two</i> specifies the PDB age. Parameter <i>three</i> is unused and set to zero.</para>
          </description>
        </item>
        <item>
          <description>
            <para>If DbgHelp is looking for any other type of image, such as an executable file or .dbg file, the <i>id</i> parameter specifies the TimeDateStamp of the original image as found in its PE header. Parameter <i>two</i> specifies the SizeOfImage field, also extracted from the PE header. Parameter <i>three</i> is unused and set to zero.</para>
          </description>
        </item>
      </list>
      <para>All of these values can be obtained by calling <see cref="SymSrvGetFileIndexInfo" />.</para>
      <para>When searching a directory, this function does not verify that the symbol identifiers match by default. To ensure the matching symbol files are located, call the <see cref="SymSetOptions" /> function with SYMOPT_EXACT_SYMBOLS.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymFindFileInPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfindfileinpathcallback">SymFindFileInPathProc</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymSetSearchPath" />
    <seealso cref="SymSrvGetFileIndexInfo" />
  </member>
  <member name="Windows.SymFromAddr">
    <summary>
      <para>Retrieves symbol information for the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Address">
      <para>The address for which a symbol should be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol, the symbol is found.</para>
    </param>
    <param name="Displacement">
      <para>The displacement from the beginning of the symbol, or zero.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the symbol. The symbol name is variable in length; therefore this buffer must be large enough to hold the name stored at the end of the
<b>SYMBOL_INFO</b> structure. Be sure to set the <b>MaxNameLen</b> member to the number of bytes reserved for the name.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-address">Retrieving Symbol Information by Address</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
  </member>
  <member name="Windows.SymFromAddrW">
    <summary>
      <para>Retrieves symbol information for the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Address">
      <para>The address for which a symbol should be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol, the symbol is found.</para>
    </param>
    <param name="Displacement">
      <para>The displacement from the beginning of the symbol, or zero.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the symbol. The symbol name is variable in length; therefore this buffer must be large enough to hold the name stored at the end of the
<b>SYMBOL_INFO</b> structure. Be sure to set the <b>MaxNameLen</b> member to the number of bytes reserved for the name.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-address">Retrieving Symbol Information by Address</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
  </member>
  <member name="Windows.SymFromAddr">
    <summary>
      <para>Retrieves symbol information for the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Address">
      <para>The address for which a symbol should be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol, the symbol is found.</para>
    </param>
    <param name="Displacement">
      <para>The displacement from the beginning of the symbol, or zero.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the symbol. The symbol name is variable in length; therefore this buffer must be large enough to hold the name stored at the end of the
<b>SYMBOL_INFO</b> structure. Be sure to set the <b>MaxNameLen</b> member to the number of bytes reserved for the name.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-address">Retrieving Symbol Information by Address</a>.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymFromAddr as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
  </member>
  <member name="Windows.SymFromAddrW">
    <summary>
      <para>Retrieves symbol information for the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Address">
      <para>The address for which a symbol should be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol, the symbol is found.</para>
    </param>
    <param name="Displacement">
      <para>The displacement from the beginning of the symbol, or zero.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the symbol. The symbol name is variable in length; therefore this buffer must be large enough to hold the name stored at the end of the
<b>SYMBOL_INFO</b> structure. Be sure to set the <b>MaxNameLen</b> member to the number of bytes reserved for the name.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-address">Retrieving Symbol Information by Address</a>.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymFromAddr as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
  </member>
  <member name="Windows.SymFromIndex">
    <summary>
      <para>Retrieves symbol information for the specified index.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="Index">
      <para>A unique value for the symbol.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
  </member>
  <member name="Windows.SymFromIndexW">
    <summary>
      <para>Retrieves symbol information for the specified index.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="Index">
      <para>A unique value for the symbol.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
  </member>
  <member name="Windows.SymFromIndex">
    <summary>
      <para>Retrieves symbol information for the specified index.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="Index">
      <para>A unique value for the symbol.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymFromIndex as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
  </member>
  <member name="Windows.SymFromIndexW">
    <summary>
      <para>Retrieves symbol information for the specified index.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="Index">
      <para>A unique value for the symbol.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymFromIndex as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
  </member>
  <member name="Windows.SymFromInlineContext">
    <summary>
      <para>Retrieves symbol information for the specified address and inline context.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Address">
      <para>The address for which a symbol should be located. The address does not have to be on a symbol boundary. If
the address comes after the beginning of a symbol and before the end of the symbol, the symbol is found.</para>
    </param>
    <param name="InlineContext">
      <para>The inline context for which a symbol should be located.</para>
    </param>
    <param name="Displacement">
      <para>The displacement from the beginning of the symbol, or zero.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a <see cref="SYMBOL_INFO" /> structure that
provides information about the symbol. The symbol name is variable in length; therefore this buffer must be
large enough to hold the name stored at the end of the
<b>SYMBOL_INFO</b> structure. Be sure to set the
<b>MaxNameLen</b> member to the number of bytes reserved for the name.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFromInlineContextW">
    <summary>
      <para>Retrieves symbol information for the specified address and inline context.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Address">
      <para>The address for which a symbol should be located. The address does not have to be on a symbol boundary. If
the address comes after the beginning of a symbol and before the end of the symbol, the symbol is found.</para>
    </param>
    <param name="InlineContext">
      <para>The inline context for which a symbol should be located.</para>
    </param>
    <param name="Displacement">
      <para>The displacement from the beginning of the symbol, or zero.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a <see cref="SYMBOL_INFO" /> structure that
provides information about the symbol. The symbol name is variable in length; therefore this buffer must be
large enough to hold the name stored at the end of the
<b>SYMBOL_INFO</b> structure. Be sure to set the
<b>MaxNameLen</b> member to the number of bytes reserved for the name.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFromInlineContext">
    <summary>
      <para>Retrieves symbol information for the specified address and inline context.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Address">
      <para>The address for which a symbol should be located. The address does not have to be on a symbol boundary. If
the address comes after the beginning of a symbol and before the end of the symbol, the symbol is found.</para>
    </param>
    <param name="InlineContext">
      <para>The inline context for which a symbol should be located.</para>
    </param>
    <param name="Displacement">
      <para>The displacement from the beginning of the symbol, or zero.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a <see cref="SYMBOL_INFO" /> structure that
provides information about the symbol. The symbol name is variable in length; therefore this buffer must be
large enough to hold the name stored at the end of the
<b>SYMBOL_INFO</b> structure. Be sure to set the
<b>MaxNameLen</b> member to the number of bytes reserved for the name.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymFromInlineContext as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.SymFromInlineContextW">
    <summary>
      <para>Retrieves symbol information for the specified address and inline context.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Address">
      <para>The address for which a symbol should be located. The address does not have to be on a symbol boundary. If
the address comes after the beginning of a symbol and before the end of the symbol, the symbol is found.</para>
    </param>
    <param name="InlineContext">
      <para>The inline context for which a symbol should be located.</para>
    </param>
    <param name="Displacement">
      <para>The displacement from the beginning of the symbol, or zero.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a <see cref="SYMBOL_INFO" /> structure that
provides information about the symbol. The symbol name is variable in length; therefore this buffer must be
large enough to hold the name stored at the end of the
<b>SYMBOL_INFO</b> structure. Be sure to set the
<b>MaxNameLen</b> member to the number of bytes reserved for the name.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymFromInlineContext as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.SymFromName">
    <summary>
      <para>Retrieves symbol information for the specified name.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Name">
      <para>The name of the symbol to be located.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-name">Retrieving Symbol Information by Name</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
  </member>
  <member name="Windows.SymFromNameW">
    <summary>
      <para>Retrieves symbol information for the specified name.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Name">
      <para>The name of the symbol to be located.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-name">Retrieving Symbol Information by Name</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
  </member>
  <member name="Windows.SymFromName">
    <summary>
      <para>Retrieves symbol information for the specified name.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Name">
      <para>The name of the symbol to be located.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-name">Retrieving Symbol Information by Name</a>.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymFromName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
  </member>
  <member name="Windows.SymFromNameW">
    <summary>
      <para>Retrieves symbol information for the specified name.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Name">
      <para>The name of the symbol to be located.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-name">Retrieving Symbol Information by Name</a>.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymFromName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
  </member>
  <member name="Windows.SymFromToken">
    <summary>
      <para>Retrieves symbol information for the specified managed code token.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the managed code module.</para>
    </param>
    <param name="Token">
      <para>The managed code token.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
  </member>
  <member name="Windows.SymFromTokenW">
    <summary>
      <para>Retrieves symbol information for the specified managed code token.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the managed code module.</para>
    </param>
    <param name="Token">
      <para>The managed code token.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
  </member>
  <member name="Windows.SymFromToken">
    <summary>
      <para>Retrieves symbol information for the specified managed code token.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the managed code module.</para>
    </param>
    <param name="Token">
      <para>The managed code token.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymFromToken as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
  </member>
  <member name="Windows.SymFromTokenW">
    <summary>
      <para>Retrieves symbol information for the specified managed code token.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the managed code module.</para>
    </param>
    <param name="Token">
      <para>The managed code token.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymFromToken as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
  </member>
  <member name="Windows.SymFunctionTableAccess">
    <summary>
      <para>Retrieves the function table entry for the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="AddrBase">
      <para>The base address for which function table information is required.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the function table entry.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The type of pointer returned is specific to the image from which symbols are loaded.</para>
      <para>
        <b>x86:  </b>If the image is for an x86 system, this is a pointer to an
<see cref="FPO_DATA" /> structure.</para>
      <para>
        <b>x64:  </b>If the image is for an x64 system, this is a pointer to an <see cref="_IMAGE_RUNTIME_FUNCTION_ENTRY" /> structure.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymFunctionTableAccess</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymFunctionTableAccess</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymFunctionTableAccess SymFunctionTableAccess64
#else
PVOID
IMAGEAPI
SymFunctionTableAccess(
    __in HANDLE hProcess,
    __in DWORD AddrBase
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="FPO_DATA" />
    <seealso cref="IMAGE_FUNCTION_ENTRY" />
    <seealso cref="SymInitialize" />
    <seealso cref="_IMAGE_RUNTIME_FUNCTION_ENTRY" />
  </member>
  <member name="Windows.SymFunctionTableAccess64">
    <summary>
      <para>Retrieves the function table entry for the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="AddrBase">
      <para>The base address for which function table information is required.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the function table entry.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The type of pointer returned is specific to the image from which symbols are loaded.</para>
      <para>
        <b>x86:  </b>If the image is for an x86 system, this is a pointer to an
<see cref="FPO_DATA" /> structure.</para>
      <para>
        <b>x64:  </b>If the image is for an x64 system, this is a pointer to an <see cref="_IMAGE_RUNTIME_FUNCTION_ENTRY" /> structure.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymFunctionTableAccess</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymFunctionTableAccess</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymFunctionTableAccess SymFunctionTableAccess64
#else
PVOID
IMAGEAPI
SymFunctionTableAccess(
    __in HANDLE hProcess,
    __in DWORD AddrBase
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="FPO_DATA" />
    <seealso cref="IMAGE_FUNCTION_ENTRY" />
    <seealso cref="SymInitialize" />
    <seealso cref="_IMAGE_RUNTIME_FUNCTION_ENTRY" />
  </member>
  <member name="Windows.SymFunctionTableAccess">
    <summary>
      <para>Retrieves the function table entry for the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="AddrBase">
      <para>The base address for which function table information is required.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the function table entry.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The type of pointer returned is specific to the image from which symbols are loaded.</para>
      <para>
        <b>x86:  </b>If the image is for an x86 system, this is a pointer to an
<see cref="FPO_DATA" /> structure.</para>
      <para>
        <b>x64:  </b>If the image is for an x64 system, this is a pointer to an <see cref="_IMAGE_RUNTIME_FUNCTION_ENTRY" /> structure.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymFunctionTableAccess</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymFunctionTableAccess</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymFunctionTableAccess SymFunctionTableAccess64
#else
PVOID
IMAGEAPI
SymFunctionTableAccess(
    __in HANDLE hProcess,
    __in DWORD AddrBase
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="FPO_DATA" />
    <seealso cref="IMAGE_FUNCTION_ENTRY" />
    <seealso cref="SymInitialize" />
    <seealso cref="_IMAGE_RUNTIME_FUNCTION_ENTRY" />
  </member>
  <member name="Windows.SymFunctionTableAccess64">
    <summary>
      <para>Retrieves the function table entry for the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="AddrBase">
      <para>The base address for which function table information is required.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the function table entry.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The type of pointer returned is specific to the image from which symbols are loaded.</para>
      <para>
        <b>x86:  </b>If the image is for an x86 system, this is a pointer to an
<see cref="FPO_DATA" /> structure.</para>
      <para>
        <b>x64:  </b>If the image is for an x64 system, this is a pointer to an <see cref="_IMAGE_RUNTIME_FUNCTION_ENTRY" /> structure.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymFunctionTableAccess</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymFunctionTableAccess</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymFunctionTableAccess SymFunctionTableAccess64
#else
PVOID
IMAGEAPI
SymFunctionTableAccess(
    __in HANDLE hProcess,
    __in DWORD AddrBase
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="FPO_DATA" />
    <seealso cref="IMAGE_FUNCTION_ENTRY" />
    <seealso cref="SymInitialize" />
    <seealso cref="_IMAGE_RUNTIME_FUNCTION_ENTRY" />
  </member>
  <member name="Windows.SymFunctionTableAccess64AccessRoutines">
    <summary>
      <para>Finds a function table entry or  frame pointer omission (FPO) record for an address.</para>
      <para>Use <see cref="SymFunctionTableAccess64" /> instead.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="AddrBase">
      <para>The base address for which function table information is required.</para>
    </param>
    <param name="ReadMemoryRoutine">
      <para>Pointer to a read memory callback function.</para>
    </param>
    <param name="GetModuleBaseRoutine">
      <para>Pointer to a get module base callback function.</para>
    </param>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetExtendedOption">
    <summary>
      <para>Gets whether the specified extended symbol option on or off.</para>
    </summary>
    <param name="option">
      <para>The extended symbol option to check. The following are valid values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_EX_DISABLEACCESSTIMEUPDATE</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>Turns off explicit updates to the last access time of a symbol that is loaded. By default, DbgHelp updates the last access time of a symbol file that is consumed so that a symbol cache can be maintained by using a least recently used mechanism.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The value of the specified symbol option.</para>
    </returns>
    <seealso cref="IMAGEHLP_EXTENDED_OPTIONS" />
    <seealso cref="SymSetExtendedOption" />
  </member>
  <member name="Windows.SymGetFileLineOffsets64">
    <summary>
      <para>Locates line information for the specified module and file name.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="ModuleName">
      <para>The name of the module in which  lines are to be located. If this parameter is <b>NULL</b>, the function searches all modules.</para>
    </param>
    <param name="FileName">
      <para>The name of the file in which lines are to be located.</para>
    </param>
    <param name="Buffer">
      <para>An array of offsets for each line. The offset for the line n is stored in element n-1. Array elements for lines that do not have line information are left unchanged.</para>
    </param>
    <param name="BufferLines">
      <para>The size of the <i>Buffer</i> array, in elements.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the highest line number found.
This value is zero if no line information was found.</para>
      <para>If the function fails, the return value is LINE_ERROR. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymGetHomeDirectory">
    <summary>
      <para>Retrieves the home directory used by Dbghelp.</para>
    </summary>
    <param name="type">
      <para>The directory to be retrieved. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>hdBase</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>The home directory.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>hdSrc</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The source directory.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>hdSym</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The symbol directory.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dir">
      <para>A pointer to a string that receives the directory.</para>
    </param>
    <param name="size">
      <para>The size of the output buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the <i>dir</i> parameter.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymSetHomeDirectory" />
  </member>
  <member name="Windows.SymGetHomeDirectoryW">
    <summary>
      <para>Retrieves the home directory used by Dbghelp.</para>
    </summary>
    <param name="type">
      <para>The directory to be retrieved. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>hdBase</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>The home directory.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>hdSrc</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The source directory.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>hdSym</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The symbol directory.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dir">
      <para>A pointer to a string that receives the directory.</para>
    </param>
    <param name="size">
      <para>The size of the output buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the <i>dir</i> parameter.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymSetHomeDirectory" />
  </member>
  <member name="Windows.SymGetHomeDirectory">
    <summary>
      <para>Retrieves the home directory used by Dbghelp.</para>
    </summary>
    <param name="type">
      <para>The directory to be retrieved. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>hdBase</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>The home directory.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>hdSrc</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The source directory.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>hdSym</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The symbol directory.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dir">
      <para>A pointer to a string that receives the directory.</para>
    </param>
    <param name="size">
      <para>The size of the output buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the <i>dir</i> parameter.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymGetHomeDirectory as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymSetHomeDirectory" />
  </member>
  <member name="Windows.SymGetHomeDirectoryW">
    <summary>
      <para>Retrieves the home directory used by Dbghelp.</para>
    </summary>
    <param name="type">
      <para>The directory to be retrieved. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>hdBase</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>The home directory.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>hdSrc</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The source directory.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>hdSym</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The symbol directory.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dir">
      <para>A pointer to a string that receives the directory.</para>
    </param>
    <param name="size">
      <para>The size of the output buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the <i>dir</i> parameter.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymGetHomeDirectory as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymSetHomeDirectory" />
  </member>
  <member name="Windows.SymGetLineFromAddr">
    <summary>
      <para>Locates the source line for the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dwAddr">
      <para>The address for which a line should be located. It is not necessary for the address to be on a line
boundary. If the address appears after the beginning of a line and before the end of the line, the line is
found.</para>
    </param>
    <param name="pdwDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line">
      <para>A pointer to an <see cref="IMAGEHLP_LINE64" /></para>
      <para>structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members
of the <see cref="IMAGEHLP_LINE64" /> structure before
calling <b>SymGetLineFromAddr64</b>.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy
the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>.
<b>SymGetLineFromAddrW64</b> is defined as follows in
Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLineFromAddrW64(
    _In_ HANDLE hProcess,
    _In_ DWORD64 dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
 #define SymGetLineFromAddr64   SymGetLineFromAddrW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineFromAddr</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineFromAddr</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineFromAddr SymGetLineFromAddr64
#define SymGetLineFromAddrW SymGetLineFromAddrW64
#else
BOOL
IMAGEAPI
SymGetLineFromAddr(
    _In_ HANDLE hProcess,
    _In_ DWORD dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLineFromAddrW(
    _In_ HANDLE hProcess,
    _In_ DWORD dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW Line
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-address">Retrieving Symbol Information by Address</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineFromAddr64">
    <summary>
      <para>Locates the source line for the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dwAddr">
      <para>The address for which a line should be located. It is not necessary for the address to be on a line
boundary. If the address appears after the beginning of a line and before the end of the line, the line is
found.</para>
    </param>
    <param name="pdwDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line">
      <para>A pointer to an <see cref="IMAGEHLP_LINE64" /></para>
      <para>structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members
of the <see cref="IMAGEHLP_LINE64" /> structure before
calling <b>SymGetLineFromAddr64</b>.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy
the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>.
<b>SymGetLineFromAddrW64</b> is defined as follows in
Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLineFromAddrW64(
    _In_ HANDLE hProcess,
    _In_ DWORD64 dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
 #define SymGetLineFromAddr64   SymGetLineFromAddrW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineFromAddr</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineFromAddr</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineFromAddr SymGetLineFromAddr64
#define SymGetLineFromAddrW SymGetLineFromAddrW64
#else
BOOL
IMAGEAPI
SymGetLineFromAddr(
    _In_ HANDLE hProcess,
    _In_ DWORD dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLineFromAddrW(
    _In_ HANDLE hProcess,
    _In_ DWORD dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW Line
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-address">Retrieving Symbol Information by Address</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineFromAddrW64">
    <summary>
      <para>Locates the source line for the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dwAddr">
      <para>The address for which a line should be located. It is not necessary for the address to be on a line
boundary. If the address appears after the beginning of a line and before the end of the line, the line is
found.</para>
    </param>
    <param name="pdwDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line">
      <para>A pointer to an <see cref="IMAGEHLP_LINE64" /></para>
      <para>structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members
of the <see cref="IMAGEHLP_LINE64" /> structure before
calling <b>SymGetLineFromAddr64</b>.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy
the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>.
<b>SymGetLineFromAddrW64</b> is defined as follows in
Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLineFromAddrW64(
    _In_ HANDLE hProcess,
    _In_ DWORD64 dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
 #define SymGetLineFromAddr64   SymGetLineFromAddrW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineFromAddr</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineFromAddr</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineFromAddr SymGetLineFromAddr64
#define SymGetLineFromAddrW SymGetLineFromAddrW64
#else
BOOL
IMAGEAPI
SymGetLineFromAddr(
    _In_ HANDLE hProcess,
    _In_ DWORD dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLineFromAddrW(
    _In_ HANDLE hProcess,
    _In_ DWORD dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW Line
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-address">Retrieving Symbol Information by Address</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineFromAddr">
    <summary>
      <para>Locates the source line for the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="qwAddr">
      <para>The address for which a line should be located. It is not necessary for the address to be on a line
boundary. If the address appears after the beginning of a line and before the end of the line, the line is
found.</para>
    </param>
    <param name="pdwDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line64">
      <para>A pointer to an <see cref="IMAGEHLP_LINE64" /></para>
      <para>structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members
of the <see cref="IMAGEHLP_LINE64" /> structure before
calling <b>SymGetLineFromAddr64</b>.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy
the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>.
<b>SymGetLineFromAddrW64</b> is defined as follows in
Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLineFromAddrW64(
    _In_ HANDLE hProcess,
    _In_ DWORD64 dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
 #define SymGetLineFromAddr64   SymGetLineFromAddrW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineFromAddr</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineFromAddr</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineFromAddr SymGetLineFromAddr64
#define SymGetLineFromAddrW SymGetLineFromAddrW64
#else
BOOL
IMAGEAPI
SymGetLineFromAddr(
    _In_ HANDLE hProcess,
    _In_ DWORD dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLineFromAddrW(
    _In_ HANDLE hProcess,
    _In_ DWORD dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW Line
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-address">Retrieving Symbol Information by Address</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineFromAddr64">
    <summary>
      <para>Locates the source line for the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="qwAddr">
      <para>The address for which a line should be located. It is not necessary for the address to be on a line
boundary. If the address appears after the beginning of a line and before the end of the line, the line is
found.</para>
    </param>
    <param name="pdwDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line64">
      <para>A pointer to an <see cref="IMAGEHLP_LINE64" /></para>
      <para>structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members
of the <see cref="IMAGEHLP_LINE64" /> structure before
calling <b>SymGetLineFromAddr64</b>.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy
the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>.
<b>SymGetLineFromAddrW64</b> is defined as follows in
Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLineFromAddrW64(
    _In_ HANDLE hProcess,
    _In_ DWORD64 dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
 #define SymGetLineFromAddr64   SymGetLineFromAddrW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineFromAddr</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineFromAddr</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineFromAddr SymGetLineFromAddr64
#define SymGetLineFromAddrW SymGetLineFromAddrW64
#else
BOOL
IMAGEAPI
SymGetLineFromAddr(
    _In_ HANDLE hProcess,
    _In_ DWORD dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLineFromAddrW(
    _In_ HANDLE hProcess,
    _In_ DWORD dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW Line
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-address">Retrieving Symbol Information by Address</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineFromAddrW64">
    <summary>
      <para>Locates the source line for the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="qwAddr">
      <para>The address for which a line should be located. It is not necessary for the address to be on a line
boundary. If the address appears after the beginning of a line and before the end of the line, the line is
found.</para>
    </param>
    <param name="pdwDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line64">
      <para>A pointer to an <see cref="IMAGEHLP_LINE64" /></para>
      <para>structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members
of the <see cref="IMAGEHLP_LINE64" /> structure before
calling <b>SymGetLineFromAddr64</b>.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy
the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>.
<b>SymGetLineFromAddrW64</b> is defined as follows in
Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLineFromAddrW64(
    _In_ HANDLE hProcess,
    _In_ DWORD64 dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
 #define SymGetLineFromAddr64   SymGetLineFromAddrW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineFromAddr</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineFromAddr</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineFromAddr SymGetLineFromAddr64
#define SymGetLineFromAddrW SymGetLineFromAddrW64
#else
BOOL
IMAGEAPI
SymGetLineFromAddr(
    _In_ HANDLE hProcess,
    _In_ DWORD dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLineFromAddrW(
    _In_ HANDLE hProcess,
    _In_ DWORD dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW Line
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-address">Retrieving Symbol Information by Address</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineFromAddr">
    <summary>
      <para>Locates the source line for the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dwAddr">
      <para>The address for which a line should be located. It is not necessary for the address to be on a line
boundary. If the address appears after the beginning of a line and before the end of the line, the line is
found.</para>
    </param>
    <param name="pdwDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line">
      <para>A pointer to an <see cref="IMAGEHLP_LINE64" /></para>
      <para>structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members
of the <see cref="IMAGEHLP_LINE64" /> structure before
calling <b>SymGetLineFromAddr64</b>.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy
the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>.
<b>SymGetLineFromAddrW64</b> is defined as follows in
Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLineFromAddrW64(
    _In_ HANDLE hProcess,
    _In_ DWORD64 dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
 #define SymGetLineFromAddr64   SymGetLineFromAddrW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineFromAddr</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineFromAddr</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineFromAddr SymGetLineFromAddr64
#define SymGetLineFromAddrW SymGetLineFromAddrW64
#else
BOOL
IMAGEAPI
SymGetLineFromAddr(
    _In_ HANDLE hProcess,
    _In_ DWORD dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLineFromAddrW(
    _In_ HANDLE hProcess,
    _In_ DWORD dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW Line
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-address">Retrieving Symbol Information by Address</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineFromAddr64">
    <summary>
      <para>Locates the source line for the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dwAddr">
      <para>The address for which a line should be located. It is not necessary for the address to be on a line
boundary. If the address appears after the beginning of a line and before the end of the line, the line is
found.</para>
    </param>
    <param name="pdwDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line">
      <para>A pointer to an <see cref="IMAGEHLP_LINE64" /></para>
      <para>structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members
of the <see cref="IMAGEHLP_LINE64" /> structure before
calling <b>SymGetLineFromAddr64</b>.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy
the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>.
<b>SymGetLineFromAddrW64</b> is defined as follows in
Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLineFromAddrW64(
    _In_ HANDLE hProcess,
    _In_ DWORD64 dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
 #define SymGetLineFromAddr64   SymGetLineFromAddrW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineFromAddr</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineFromAddr</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineFromAddr SymGetLineFromAddr64
#define SymGetLineFromAddrW SymGetLineFromAddrW64
#else
BOOL
IMAGEAPI
SymGetLineFromAddr(
    _In_ HANDLE hProcess,
    _In_ DWORD dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLineFromAddrW(
    _In_ HANDLE hProcess,
    _In_ DWORD dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW Line
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-address">Retrieving Symbol Information by Address</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineFromAddrW64">
    <summary>
      <para>Locates the source line for the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dwAddr">
      <para>The address for which a line should be located. It is not necessary for the address to be on a line
boundary. If the address appears after the beginning of a line and before the end of the line, the line is
found.</para>
    </param>
    <param name="pdwDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line">
      <para>A pointer to an <see cref="IMAGEHLP_LINE64" /></para>
      <para>structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members
of the <see cref="IMAGEHLP_LINE64" /> structure before
calling <b>SymGetLineFromAddr64</b>.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy
the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>.
<b>SymGetLineFromAddrW64</b> is defined as follows in
Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLineFromAddrW64(
    _In_ HANDLE hProcess,
    _In_ DWORD64 dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
 #define SymGetLineFromAddr64   SymGetLineFromAddrW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineFromAddr</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineFromAddr</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineFromAddr SymGetLineFromAddr64
#define SymGetLineFromAddrW SymGetLineFromAddrW64
#else
BOOL
IMAGEAPI
SymGetLineFromAddr(
    _In_ HANDLE hProcess,
    _In_ DWORD dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLineFromAddrW(
    _In_ HANDLE hProcess,
    _In_ DWORD dwAddr,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW Line
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-address">Retrieving Symbol Information by Address</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineFromInlineContext">
    <summary>
      <para>Locates the source line for the specified inline context.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="qwAddr">
      <para>The address for which a line should be located. It is not necessary for the address to be on a line
boundary. If the address appears after the beginning of a line and before the end of the line, the line is
found.</para>
    </param>
    <param name="InlineContext">
      <para>The inline context.</para>
    </param>
    <param name="qwModuleBaseAddress">
      <para>The base address of the module.</para>
    </param>
    <param name="pdwDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line64">
      <para>A pointer to an <see cref="IMAGEHLP_LINE64" /></para>
      <para>structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members
of the <see cref="IMAGEHLP_LINE64" /> structure before
calling <b>SymGetLineFromInlineContext</b>.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy
the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single
threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or
memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this
function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>.
<b>SymGetLineFromInlineContext</b> is defined as
follows in Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLineFromInlineContextW(
    _In_ HANDLE hProcess,
    _In_ DWORD64 dwAddr,
    _In_ ULONG InlineContext,
    _In_opt_ DWORD64 qwModuleBaseAddress,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
 #define SymGetLineFromInlineContext SymGetLineFromInlineContextW
#endif
</code>
    </remarks>
  </member>
  <member name="Windows.SymGetLineFromInlineContextW">
    <summary>
      <para>Locates the source line for the specified inline context.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="qwAddr">
      <para>The address for which a line should be located. It is not necessary for the address to be on a line
boundary. If the address appears after the beginning of a line and before the end of the line, the line is
found.</para>
    </param>
    <param name="InlineContext">
      <para>The inline context.</para>
    </param>
    <param name="qwModuleBaseAddress">
      <para>The base address of the module.</para>
    </param>
    <param name="pdwDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line64">
      <para>A pointer to an <see cref="IMAGEHLP_LINE64" /></para>
      <para>structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members
of the <see cref="IMAGEHLP_LINE64" /> structure before
calling <b>SymGetLineFromInlineContext</b>.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy
the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single
threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or
memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this
function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>.
<b>SymGetLineFromInlineContext</b> is defined as
follows in Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLineFromInlineContextW(
    _In_ HANDLE hProcess,
    _In_ DWORD64 dwAddr,
    _In_ ULONG InlineContext,
    _In_opt_ DWORD64 qwModuleBaseAddress,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
 #define SymGetLineFromInlineContext SymGetLineFromInlineContextW
#endif
</code>
    </remarks>
  </member>
  <member name="Windows.SymGetLineFromInlineContext">
    <summary>
      <para>Locates the source line for the specified inline context.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dwAddr">
      <para>The address for which a line should be located. It is not necessary for the address to be on a line
boundary. If the address appears after the beginning of a line and before the end of the line, the line is
found.</para>
    </param>
    <param name="InlineContext">
      <para>The inline context.</para>
    </param>
    <param name="qwModuleBaseAddress">
      <para>The base address of the module.</para>
    </param>
    <param name="pdwDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line">
      <para>A pointer to an <see cref="IMAGEHLP_LINE64" /></para>
      <para>structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members
of the <see cref="IMAGEHLP_LINE64" /> structure before
calling <b>SymGetLineFromInlineContext</b>.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy
the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single
threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or
memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this
function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>.
<b>SymGetLineFromInlineContext</b> is defined as
follows in Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLineFromInlineContextW(
    _In_ HANDLE hProcess,
    _In_ DWORD64 dwAddr,
    _In_ ULONG InlineContext,
    _In_opt_ DWORD64 qwModuleBaseAddress,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
 #define SymGetLineFromInlineContext SymGetLineFromInlineContextW
#endif
</code>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymGetLineFromInlineContext as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.SymGetLineFromInlineContextW">
    <summary>
      <para>Locates the source line for the specified inline context.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dwAddr">
      <para>The address for which a line should be located. It is not necessary for the address to be on a line
boundary. If the address appears after the beginning of a line and before the end of the line, the line is
found.</para>
    </param>
    <param name="InlineContext">
      <para>The inline context.</para>
    </param>
    <param name="qwModuleBaseAddress">
      <para>The base address of the module.</para>
    </param>
    <param name="pdwDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line">
      <para>A pointer to an <see cref="IMAGEHLP_LINE64" /></para>
      <para>structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members
of the <see cref="IMAGEHLP_LINE64" /> structure before
calling <b>SymGetLineFromInlineContext</b>.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy
the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single
threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or
memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this
function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>.
<b>SymGetLineFromInlineContext</b> is defined as
follows in Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLineFromInlineContextW(
    _In_ HANDLE hProcess,
    _In_ DWORD64 dwAddr,
    _In_ ULONG InlineContext,
    _In_opt_ DWORD64 qwModuleBaseAddress,
    _Out_ PDWORD pdwDisplacement,
    _Out_ PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
 #define SymGetLineFromInlineContext SymGetLineFromInlineContextW
#endif
</code>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymGetLineFromInlineContext as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.SymGetLineFromName">
    <summary>
      <para>Locates a source line for the specified module, file name, and line number.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="ModuleName">
      <para>The name of the module in which a line is to be located.</para>
    </param>
    <param name="FileName">
      <para>The name of the file in which a line is to be located. If the application has more than one source file with this name, be sure to specify a full path.</para>
    </param>
    <param name="dwLineNumber">
      <para>The line number to be located.</para>
    </param>
    <param name="plDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members of the
<see cref="IMAGEHLP_LINE64" /> structure before calling
<b>SymGetLineFromName64</b>.</para>
      <para>Before calling this function, ensure that the symbols are initialized correctly by first calling
<see cref="SymInitialize" />,
<see cref="SymSetOptions" />, and
<see cref="SymLoadModule64" />.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLineFromNameW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetLineFromNameW64(
    __in HANDLE hProcess,
    __in_opt PCWSTR ModuleName,
    __in_opt PCWSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLineFromName64   SymGetLineFromNameW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineFromName</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineFromName</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineFromName SymGetLineFromName64
#else
BOOL
IMAGEAPI
SymGetLineFromName(
    __in HANDLE hProcess,
    __in_opt PCSTR ModuleName,
    __in_opt PCSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINE Line
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-name">Retrieving Symbol Information by Name</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineFromName64">
    <summary>
      <para>Locates a source line for the specified module, file name, and line number.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="ModuleName">
      <para>The name of the module in which a line is to be located.</para>
    </param>
    <param name="FileName">
      <para>The name of the file in which a line is to be located. If the application has more than one source file with this name, be sure to specify a full path.</para>
    </param>
    <param name="dwLineNumber">
      <para>The line number to be located.</para>
    </param>
    <param name="plDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members of the
<see cref="IMAGEHLP_LINE64" /> structure before calling
<b>SymGetLineFromName64</b>.</para>
      <para>Before calling this function, ensure that the symbols are initialized correctly by first calling
<see cref="SymInitialize" />,
<see cref="SymSetOptions" />, and
<see cref="SymLoadModule64" />.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLineFromNameW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetLineFromNameW64(
    __in HANDLE hProcess,
    __in_opt PCWSTR ModuleName,
    __in_opt PCWSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLineFromName64   SymGetLineFromNameW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineFromName</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineFromName</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineFromName SymGetLineFromName64
#else
BOOL
IMAGEAPI
SymGetLineFromName(
    __in HANDLE hProcess,
    __in_opt PCSTR ModuleName,
    __in_opt PCSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINE Line
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-name">Retrieving Symbol Information by Name</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineFromNameW64">
    <summary>
      <para>Locates a source line for the specified module, file name, and line number.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="ModuleName">
      <para>The name of the module in which a line is to be located.</para>
    </param>
    <param name="FileName">
      <para>The name of the file in which a line is to be located. If the application has more than one source file with this name, be sure to specify a full path.</para>
    </param>
    <param name="dwLineNumber">
      <para>The line number to be located.</para>
    </param>
    <param name="plDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members of the
<see cref="IMAGEHLP_LINE64" /> structure before calling
<b>SymGetLineFromName64</b>.</para>
      <para>Before calling this function, ensure that the symbols are initialized correctly by first calling
<see cref="SymInitialize" />,
<see cref="SymSetOptions" />, and
<see cref="SymLoadModule64" />.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLineFromNameW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetLineFromNameW64(
    __in HANDLE hProcess,
    __in_opt PCWSTR ModuleName,
    __in_opt PCWSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLineFromName64   SymGetLineFromNameW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineFromName</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineFromName</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineFromName SymGetLineFromName64
#else
BOOL
IMAGEAPI
SymGetLineFromName(
    __in HANDLE hProcess,
    __in_opt PCSTR ModuleName,
    __in_opt PCSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINE Line
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-name">Retrieving Symbol Information by Name</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineFromName">
    <summary>
      <para>Locates a source line for the specified module, file name, and line number.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="ModuleName">
      <para>The name of the module in which a line is to be located.</para>
    </param>
    <param name="FileName">
      <para>The name of the file in which a line is to be located. If the application has more than one source file with this name, be sure to specify a full path.</para>
    </param>
    <param name="dwLineNumber">
      <para>The line number to be located.</para>
    </param>
    <param name="plDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members of the
<see cref="IMAGEHLP_LINE64" /> structure before calling
<b>SymGetLineFromName64</b>.</para>
      <para>Before calling this function, ensure that the symbols are initialized correctly by first calling
<see cref="SymInitialize" />,
<see cref="SymSetOptions" />, and
<see cref="SymLoadModule64" />.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLineFromNameW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetLineFromNameW64(
    __in HANDLE hProcess,
    __in_opt PCWSTR ModuleName,
    __in_opt PCWSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLineFromName64   SymGetLineFromNameW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineFromName</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineFromName</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineFromName SymGetLineFromName64
#else
BOOL
IMAGEAPI
SymGetLineFromName(
    __in HANDLE hProcess,
    __in_opt PCSTR ModuleName,
    __in_opt PCSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINE Line
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-name">Retrieving Symbol Information by Name</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineFromName64">
    <summary>
      <para>Locates a source line for the specified module, file name, and line number.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="ModuleName">
      <para>The name of the module in which a line is to be located.</para>
    </param>
    <param name="FileName">
      <para>The name of the file in which a line is to be located. If the application has more than one source file with this name, be sure to specify a full path.</para>
    </param>
    <param name="dwLineNumber">
      <para>The line number to be located.</para>
    </param>
    <param name="plDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members of the
<see cref="IMAGEHLP_LINE64" /> structure before calling
<b>SymGetLineFromName64</b>.</para>
      <para>Before calling this function, ensure that the symbols are initialized correctly by first calling
<see cref="SymInitialize" />,
<see cref="SymSetOptions" />, and
<see cref="SymLoadModule64" />.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLineFromNameW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetLineFromNameW64(
    __in HANDLE hProcess,
    __in_opt PCWSTR ModuleName,
    __in_opt PCWSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLineFromName64   SymGetLineFromNameW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineFromName</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineFromName</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineFromName SymGetLineFromName64
#else
BOOL
IMAGEAPI
SymGetLineFromName(
    __in HANDLE hProcess,
    __in_opt PCSTR ModuleName,
    __in_opt PCSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINE Line
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-name">Retrieving Symbol Information by Name</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineFromNameW64">
    <summary>
      <para>Locates a source line for the specified module, file name, and line number.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="ModuleName">
      <para>The name of the module in which a line is to be located.</para>
    </param>
    <param name="FileName">
      <para>The name of the file in which a line is to be located. If the application has more than one source file with this name, be sure to specify a full path.</para>
    </param>
    <param name="dwLineNumber">
      <para>The line number to be located.</para>
    </param>
    <param name="plDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members of the
<see cref="IMAGEHLP_LINE64" /> structure before calling
<b>SymGetLineFromName64</b>.</para>
      <para>Before calling this function, ensure that the symbols are initialized correctly by first calling
<see cref="SymInitialize" />,
<see cref="SymSetOptions" />, and
<see cref="SymLoadModule64" />.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLineFromNameW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetLineFromNameW64(
    __in HANDLE hProcess,
    __in_opt PCWSTR ModuleName,
    __in_opt PCWSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLineFromName64   SymGetLineFromNameW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineFromName</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineFromName</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineFromName SymGetLineFromName64
#else
BOOL
IMAGEAPI
SymGetLineFromName(
    __in HANDLE hProcess,
    __in_opt PCSTR ModuleName,
    __in_opt PCSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINE Line
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-name">Retrieving Symbol Information by Name</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineFromName">
    <summary>
      <para>Locates a source line for the specified module, file name, and line number.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="ModuleName">
      <para>The name of the module in which a line is to be located.</para>
    </param>
    <param name="FileName">
      <para>The name of the file in which a line is to be located. If the application has more than one source file with this name, be sure to specify a full path.</para>
    </param>
    <param name="dwLineNumber">
      <para>The line number to be located.</para>
    </param>
    <param name="plDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members of the
<see cref="IMAGEHLP_LINE64" /> structure before calling
<b>SymGetLineFromName64</b>.</para>
      <para>Before calling this function, ensure that the symbols are initialized correctly by first calling
<see cref="SymInitialize" />,
<see cref="SymSetOptions" />, and
<see cref="SymLoadModule64" />.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLineFromNameW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetLineFromNameW64(
    __in HANDLE hProcess,
    __in_opt PCWSTR ModuleName,
    __in_opt PCWSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLineFromName64   SymGetLineFromNameW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineFromName</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineFromName</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineFromName SymGetLineFromName64
#else
BOOL
IMAGEAPI
SymGetLineFromName(
    __in HANDLE hProcess,
    __in_opt PCSTR ModuleName,
    __in_opt PCSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINE Line
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-name">Retrieving Symbol Information by Name</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineFromName64">
    <summary>
      <para>Locates a source line for the specified module, file name, and line number.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="ModuleName">
      <para>The name of the module in which a line is to be located.</para>
    </param>
    <param name="FileName">
      <para>The name of the file in which a line is to be located. If the application has more than one source file with this name, be sure to specify a full path.</para>
    </param>
    <param name="dwLineNumber">
      <para>The line number to be located.</para>
    </param>
    <param name="plDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members of the
<see cref="IMAGEHLP_LINE64" /> structure before calling
<b>SymGetLineFromName64</b>.</para>
      <para>Before calling this function, ensure that the symbols are initialized correctly by first calling
<see cref="SymInitialize" />,
<see cref="SymSetOptions" />, and
<see cref="SymLoadModule64" />.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLineFromNameW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetLineFromNameW64(
    __in HANDLE hProcess,
    __in_opt PCWSTR ModuleName,
    __in_opt PCWSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLineFromName64   SymGetLineFromNameW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineFromName</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineFromName</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineFromName SymGetLineFromName64
#else
BOOL
IMAGEAPI
SymGetLineFromName(
    __in HANDLE hProcess,
    __in_opt PCSTR ModuleName,
    __in_opt PCSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINE Line
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-name">Retrieving Symbol Information by Name</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineFromNameW64">
    <summary>
      <para>Locates a source line for the specified module, file name, and line number.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="ModuleName">
      <para>The name of the module in which a line is to be located.</para>
    </param>
    <param name="FileName">
      <para>The name of the file in which a line is to be located. If the application has more than one source file with this name, be sure to specify a full path.</para>
    </param>
    <param name="dwLineNumber">
      <para>The line number to be located.</para>
    </param>
    <param name="plDisplacement">
      <para>The displacement in bytes from the beginning of the line, or zero.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller must allocate the <i>Line</i> buffer properly and fill in the required members of the
<see cref="IMAGEHLP_LINE64" /> structure before calling
<b>SymGetLineFromName64</b>.</para>
      <para>Before calling this function, ensure that the symbols are initialized correctly by first calling
<see cref="SymInitialize" />,
<see cref="SymSetOptions" />, and
<see cref="SymLoadModule64" />.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLineFromNameW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetLineFromNameW64(
    __in HANDLE hProcess,
    __in_opt PCWSTR ModuleName,
    __in_opt PCWSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLineFromName64   SymGetLineFromNameW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineFromName</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineFromName</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineFromName SymGetLineFromName64
#else
BOOL
IMAGEAPI
SymGetLineFromName(
    __in HANDLE hProcess,
    __in_opt PCSTR ModuleName,
    __in_opt PCSTR FileName,
    __in DWORD dwLineNumber,
    __out PLONG plDisplacement,
    __inout PIMAGEHLP_LINE Line
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-symbol-information-by-name">Retrieving Symbol Information by Name</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineNext">
    <summary>
      <para>Retrieves the line information for the next source line.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure that contains the line information.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetLineNext64</b> function requires that the
<see cref="IMAGEHLP_LINE64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetLineFromAddr64" /> or
<see cref="SymGetLineFromName64" /> function. This structure receives the line information for the next line in sequence.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLineNextW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetLineNextW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLineNext64  SymGetLineNextW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineNext</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineNext</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineNext SymGetLineNext64
#else
BOOL
IMAGEAPI
SymGetLineNext(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLineNextW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymGetLinePrev64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineNext64">
    <summary>
      <para>Retrieves the line information for the next source line.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure that contains the line information.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetLineNext64</b> function requires that the
<see cref="IMAGEHLP_LINE64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetLineFromAddr64" /> or
<see cref="SymGetLineFromName64" /> function. This structure receives the line information for the next line in sequence.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLineNextW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetLineNextW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLineNext64  SymGetLineNextW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineNext</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineNext</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineNext SymGetLineNext64
#else
BOOL
IMAGEAPI
SymGetLineNext(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLineNextW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymGetLinePrev64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineNextW64">
    <summary>
      <para>Retrieves the line information for the next source line.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure that contains the line information.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetLineNext64</b> function requires that the
<see cref="IMAGEHLP_LINE64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetLineFromAddr64" /> or
<see cref="SymGetLineFromName64" /> function. This structure receives the line information for the next line in sequence.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLineNextW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetLineNextW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLineNext64  SymGetLineNextW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineNext</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineNext</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineNext SymGetLineNext64
#else
BOOL
IMAGEAPI
SymGetLineNext(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLineNextW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymGetLinePrev64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineNext">
    <summary>
      <para>Retrieves the line information for the next source line.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure that contains the line information.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetLineNext64</b> function requires that the
<see cref="IMAGEHLP_LINE64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetLineFromAddr64" /> or
<see cref="SymGetLineFromName64" /> function. This structure receives the line information for the next line in sequence.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLineNextW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetLineNextW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLineNext64  SymGetLineNextW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineNext</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineNext</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineNext SymGetLineNext64
#else
BOOL
IMAGEAPI
SymGetLineNext(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLineNextW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymGetLinePrev64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineNext64">
    <summary>
      <para>Retrieves the line information for the next source line.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure that contains the line information.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetLineNext64</b> function requires that the
<see cref="IMAGEHLP_LINE64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetLineFromAddr64" /> or
<see cref="SymGetLineFromName64" /> function. This structure receives the line information for the next line in sequence.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLineNextW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetLineNextW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLineNext64  SymGetLineNextW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineNext</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineNext</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineNext SymGetLineNext64
#else
BOOL
IMAGEAPI
SymGetLineNext(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLineNextW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymGetLinePrev64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineNextW64">
    <summary>
      <para>Retrieves the line information for the next source line.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure that contains the line information.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetLineNext64</b> function requires that the
<see cref="IMAGEHLP_LINE64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetLineFromAddr64" /> or
<see cref="SymGetLineFromName64" /> function. This structure receives the line information for the next line in sequence.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLineNextW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetLineNextW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLineNext64  SymGetLineNextW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineNext</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineNext</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineNext SymGetLineNext64
#else
BOOL
IMAGEAPI
SymGetLineNext(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLineNextW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymGetLinePrev64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineNext">
    <summary>
      <para>Retrieves the line information for the next source line.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure that contains the line information.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetLineNext64</b> function requires that the
<see cref="IMAGEHLP_LINE64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetLineFromAddr64" /> or
<see cref="SymGetLineFromName64" /> function. This structure receives the line information for the next line in sequence.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLineNextW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetLineNextW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLineNext64  SymGetLineNextW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineNext</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineNext</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineNext SymGetLineNext64
#else
BOOL
IMAGEAPI
SymGetLineNext(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLineNextW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymGetLinePrev64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineNext64">
    <summary>
      <para>Retrieves the line information for the next source line.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure that contains the line information.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetLineNext64</b> function requires that the
<see cref="IMAGEHLP_LINE64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetLineFromAddr64" /> or
<see cref="SymGetLineFromName64" /> function. This structure receives the line information for the next line in sequence.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLineNextW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetLineNextW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLineNext64  SymGetLineNextW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineNext</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineNext</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineNext SymGetLineNext64
#else
BOOL
IMAGEAPI
SymGetLineNext(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLineNextW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymGetLinePrev64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLineNextW64">
    <summary>
      <para>Retrieves the line information for the next source line.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure that contains the line information.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetLineNext64</b> function requires that the
<see cref="IMAGEHLP_LINE64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetLineFromAddr64" /> or
<see cref="SymGetLineFromName64" /> function. This structure receives the line information for the next line in sequence.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLineNextW64</b> is defined as follows in Dbghelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetLineNextW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLineNext64  SymGetLineNextW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLineNext</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLineNext</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLineNext SymGetLineNext64
#else
BOOL
IMAGEAPI
SymGetLineNext(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLineNextW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymGetLinePrev64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLinePrev">
    <summary>
      <para>Retrieves the line information for the previous source line.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetLinePrev64</b> function requires that the
<see cref="IMAGEHLP_LINE64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetLineFromAddr64" /> or
<see cref="SymGetLineFromName64" /> function. This structure is filled with the line information for the previous line in sequence.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLinePrevW64</b> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLinePrevW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLinePrev64    SymGetLinePrevW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLinePrev</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLinePrev</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLinePrev SymGetLinePrev64
#else
BOOL
IMAGEAPI
SymGetLinePrev(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLinePrevW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymGetLineNext64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLinePrev64">
    <summary>
      <para>Retrieves the line information for the previous source line.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetLinePrev64</b> function requires that the
<see cref="IMAGEHLP_LINE64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetLineFromAddr64" /> or
<see cref="SymGetLineFromName64" /> function. This structure is filled with the line information for the previous line in sequence.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLinePrevW64</b> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLinePrevW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLinePrev64    SymGetLinePrevW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLinePrev</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLinePrev</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLinePrev SymGetLinePrev64
#else
BOOL
IMAGEAPI
SymGetLinePrev(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLinePrevW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymGetLineNext64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLinePrevW64">
    <summary>
      <para>Retrieves the line information for the previous source line.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetLinePrev64</b> function requires that the
<see cref="IMAGEHLP_LINE64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetLineFromAddr64" /> or
<see cref="SymGetLineFromName64" /> function. This structure is filled with the line information for the previous line in sequence.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLinePrevW64</b> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLinePrevW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLinePrev64    SymGetLinePrevW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLinePrev</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLinePrev</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLinePrev SymGetLinePrev64
#else
BOOL
IMAGEAPI
SymGetLinePrev(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLinePrevW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymGetLineNext64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLinePrev">
    <summary>
      <para>Retrieves the line information for the previous source line.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetLinePrev64</b> function requires that the
<see cref="IMAGEHLP_LINE64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetLineFromAddr64" /> or
<see cref="SymGetLineFromName64" /> function. This structure is filled with the line information for the previous line in sequence.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLinePrevW64</b> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLinePrevW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLinePrev64    SymGetLinePrevW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLinePrev</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLinePrev</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLinePrev SymGetLinePrev64
#else
BOOL
IMAGEAPI
SymGetLinePrev(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLinePrevW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymGetLineNext64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLinePrev64">
    <summary>
      <para>Retrieves the line information for the previous source line.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetLinePrev64</b> function requires that the
<see cref="IMAGEHLP_LINE64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetLineFromAddr64" /> or
<see cref="SymGetLineFromName64" /> function. This structure is filled with the line information for the previous line in sequence.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLinePrevW64</b> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLinePrevW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLinePrev64    SymGetLinePrevW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLinePrev</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLinePrev</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLinePrev SymGetLinePrev64
#else
BOOL
IMAGEAPI
SymGetLinePrev(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLinePrevW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymGetLineNext64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLinePrevW64">
    <summary>
      <para>Retrieves the line information for the previous source line.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetLinePrev64</b> function requires that the
<see cref="IMAGEHLP_LINE64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetLineFromAddr64" /> or
<see cref="SymGetLineFromName64" /> function. This structure is filled with the line information for the previous line in sequence.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLinePrevW64</b> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLinePrevW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLinePrev64    SymGetLinePrevW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLinePrev</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLinePrev</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLinePrev SymGetLinePrev64
#else
BOOL
IMAGEAPI
SymGetLinePrev(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLinePrevW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymGetLineNext64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLinePrev">
    <summary>
      <para>Retrieves the line information for the previous source line.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetLinePrev64</b> function requires that the
<see cref="IMAGEHLP_LINE64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetLineFromAddr64" /> or
<see cref="SymGetLineFromName64" /> function. This structure is filled with the line information for the previous line in sequence.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLinePrevW64</b> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLinePrevW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLinePrev64    SymGetLinePrevW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLinePrev</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLinePrev</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLinePrev SymGetLinePrev64
#else
BOOL
IMAGEAPI
SymGetLinePrev(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLinePrevW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymGetLineNext64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLinePrev64">
    <summary>
      <para>Retrieves the line information for the previous source line.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetLinePrev64</b> function requires that the
<see cref="IMAGEHLP_LINE64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetLineFromAddr64" /> or
<see cref="SymGetLineFromName64" /> function. This structure is filled with the line information for the previous line in sequence.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLinePrevW64</b> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLinePrevW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLinePrev64    SymGetLinePrevW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLinePrev</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLinePrev</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLinePrev SymGetLinePrev64
#else
BOOL
IMAGEAPI
SymGetLinePrev(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLinePrevW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymGetLineNext64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetLinePrevW64">
    <summary>
      <para>Retrieves the line information for the previous source line.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Line">
      <para>A pointer to an
<see cref="IMAGEHLP_LINE64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetLinePrev64</b> function requires that the
<see cref="IMAGEHLP_LINE64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetLineFromAddr64" /> or
<see cref="SymGetLineFromName64" /> function. This structure is filled with the line information for the previous line in sequence.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetLinePrevW64</b> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetLinePrevW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW64 Line
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetLinePrev64    SymGetLinePrevW64
#endif
</code>
      <para>This function supersedes the <b>SymGetLinePrev</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetLinePrev</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetLinePrev SymGetLinePrev64
#else
BOOL
IMAGEAPI
SymGetLinePrev(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINE Line
    );

BOOL
IMAGEAPI
SymGetLinePrevW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_LINEW Line
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_LINE64" />
    <seealso cref="SymGetLineFromAddr64" />
    <seealso cref="SymGetLineFromName64" />
    <seealso cref="SymGetLineNext64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetModuleBase">
    <summary>
      <para>Retrieves the base address of the module that contains the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dwAddr">
      <para>The virtual address that is contained in one of the modules loaded by the
<see cref="SymLoadModule64" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a nonzero virtual address. The value is the base address of the module containing the address specified by the <i>dwAddr</i> parameter.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The module table is searched for a module that contains <i>dwAddr</i>. The module is located based on the load address and size of each module.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymGetModuleBase</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetModuleBase</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetModuleBase SymGetModuleBase64
#else
DWORD
IMAGEAPI
SymGetModuleBase(
    __in HANDLE hProcess,
    __in DWORD dwAddr
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymGetModuleBase64">
    <summary>
      <para>Retrieves the base address of the module that contains the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dwAddr">
      <para>The virtual address that is contained in one of the modules loaded by the
<see cref="SymLoadModule64" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a nonzero virtual address. The value is the base address of the module containing the address specified by the <i>dwAddr</i> parameter.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The module table is searched for a module that contains <i>dwAddr</i>. The module is located based on the load address and size of each module.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymGetModuleBase</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetModuleBase</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetModuleBase SymGetModuleBase64
#else
DWORD
IMAGEAPI
SymGetModuleBase(
    __in HANDLE hProcess,
    __in DWORD dwAddr
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymGetModuleBase">
    <summary>
      <para>Retrieves the base address of the module that contains the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="qwAddr">
      <para>The virtual address that is contained in one of the modules loaded by the
<see cref="SymLoadModule64" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a nonzero virtual address. The value is the base address of the module containing the address specified by the <i>dwAddr</i> parameter.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The module table is searched for a module that contains <i>dwAddr</i>. The module is located based on the load address and size of each module.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymGetModuleBase</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetModuleBase</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetModuleBase SymGetModuleBase64
#else
DWORD
IMAGEAPI
SymGetModuleBase(
    __in HANDLE hProcess,
    __in DWORD dwAddr
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymGetModuleBase64">
    <summary>
      <para>Retrieves the base address of the module that contains the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="qwAddr">
      <para>The virtual address that is contained in one of the modules loaded by the
<see cref="SymLoadModule64" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a nonzero virtual address. The value is the base address of the module containing the address specified by the <i>dwAddr</i> parameter.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The module table is searched for a module that contains <i>dwAddr</i>. The module is located based on the load address and size of each module.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymGetModuleBase</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetModuleBase</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetModuleBase SymGetModuleBase64
#else
DWORD
IMAGEAPI
SymGetModuleBase(
    __in HANDLE hProcess,
    __in DWORD dwAddr
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymGetModuleInfo">
    <summary>
      <para>Retrieves the module information of the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dwAddr">
      <para>The virtual address that is contained in one of the modules loaded by the
<see cref="SymLoadModule64" /> function</para>
    </param>
    <param name="ModuleInfo">
      <para>A pointer to an
<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the
<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The module table is searched for a module that contains the <i>dwAddr</i>. The module is located based on the load address and size of each module. If a valid module is found, the <i>ModuleInfo</i> parameter is filled with the information about the module.</para>
      <para>The size of the <see cref="IMAGEHLP_MODULE64" /> structure used by this function has changed over the years.  If a version of DbgHelp.dll is called that is older than the DbgHelp.h used to compile the calling code, then this function may fail with an error code of <b>ERROR_INVALID_PARAMETER</b>.  This most commonly occurs when the system version (%WinDir%\System32\DbgHelp.dll) is called.  Code that calls the system version of DbgHelp.dll must be compiled using the appropriate SDK for that Windows release or the SDK for a previous release.</para>
      <para>The recommended model is to redistribute the required version of DbgHelp.dll along with the calling software.  This allows the caller to use the most robust versions of DbgHelp.dll as well as a simplifying upgrades.  The most recent version of DbgHelp.dll can always be found in the <a href="https://docs.microsoft.com//windows-hardware/drivers/debugger/">Debugging Tools for Windows</a> package.  As a general rule, code that is compiled to work with older versions will always work with newer versions.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <b>SymGetModuleInfoW64</b> is defined as follows in DbgHelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetModuleInfoW64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PIMAGEHLP_MODULEW64 ModuleInfo
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetModuleInfo64   SymGetModuleInfoW64
#endif
</code>
      <para>This function supersedes the <b>SymGetModuleInfo</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetModuleInfo</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetModuleInfo   SymGetModuleInfo64
#define SymGetModuleInfoW  SymGetModuleInfoW64
#else
BOOL
IMAGEAPI
SymGetModuleInfo(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULE ModuleInfo
    );

BOOL
IMAGEAPI
SymGetModuleInfoW(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULEW ModuleInfo
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_MODULE64" />
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymGetModuleInfo64">
    <summary>
      <para>Retrieves the module information of the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dwAddr">
      <para>The virtual address that is contained in one of the modules loaded by the
<see cref="SymLoadModule64" /> function</para>
    </param>
    <param name="ModuleInfo">
      <para>A pointer to an
<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the
<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The module table is searched for a module that contains the <i>dwAddr</i>. The module is located based on the load address and size of each module. If a valid module is found, the <i>ModuleInfo</i> parameter is filled with the information about the module.</para>
      <para>The size of the <see cref="IMAGEHLP_MODULE64" /> structure used by this function has changed over the years.  If a version of DbgHelp.dll is called that is older than the DbgHelp.h used to compile the calling code, then this function may fail with an error code of <b>ERROR_INVALID_PARAMETER</b>.  This most commonly occurs when the system version (%WinDir%\System32\DbgHelp.dll) is called.  Code that calls the system version of DbgHelp.dll must be compiled using the appropriate SDK for that Windows release or the SDK for a previous release.</para>
      <para>The recommended model is to redistribute the required version of DbgHelp.dll along with the calling software.  This allows the caller to use the most robust versions of DbgHelp.dll as well as a simplifying upgrades.  The most recent version of DbgHelp.dll can always be found in the <a href="https://docs.microsoft.com//windows-hardware/drivers/debugger/">Debugging Tools for Windows</a> package.  As a general rule, code that is compiled to work with older versions will always work with newer versions.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <b>SymGetModuleInfoW64</b> is defined as follows in DbgHelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetModuleInfoW64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PIMAGEHLP_MODULEW64 ModuleInfo
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetModuleInfo64   SymGetModuleInfoW64
#endif
</code>
      <para>This function supersedes the <b>SymGetModuleInfo</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetModuleInfo</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetModuleInfo   SymGetModuleInfo64
#define SymGetModuleInfoW  SymGetModuleInfoW64
#else
BOOL
IMAGEAPI
SymGetModuleInfo(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULE ModuleInfo
    );

BOOL
IMAGEAPI
SymGetModuleInfoW(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULEW ModuleInfo
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_MODULE64" />
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymGetModuleInfoW">
    <summary>
      <para>Retrieves the module information of the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dwAddr">
      <para>The virtual address that is contained in one of the modules loaded by the
<see cref="SymLoadModule64" /> function</para>
    </param>
    <param name="ModuleInfo">
      <para>A pointer to an
<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the
<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The module table is searched for a module that contains the <i>dwAddr</i>. The module is located based on the load address and size of each module. If a valid module is found, the <i>ModuleInfo</i> parameter is filled with the information about the module.</para>
      <para>The size of the <see cref="IMAGEHLP_MODULE64" /> structure used by this function has changed over the years.  If a version of DbgHelp.dll is called that is older than the DbgHelp.h used to compile the calling code, then this function may fail with an error code of <b>ERROR_INVALID_PARAMETER</b>.  This most commonly occurs when the system version (%WinDir%\System32\DbgHelp.dll) is called.  Code that calls the system version of DbgHelp.dll must be compiled using the appropriate SDK for that Windows release or the SDK for a previous release.</para>
      <para>The recommended model is to redistribute the required version of DbgHelp.dll along with the calling software.  This allows the caller to use the most robust versions of DbgHelp.dll as well as a simplifying upgrades.  The most recent version of DbgHelp.dll can always be found in the <a href="https://docs.microsoft.com//windows-hardware/drivers/debugger/">Debugging Tools for Windows</a> package.  As a general rule, code that is compiled to work with older versions will always work with newer versions.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <b>SymGetModuleInfoW64</b> is defined as follows in DbgHelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetModuleInfoW64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PIMAGEHLP_MODULEW64 ModuleInfo
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetModuleInfo64   SymGetModuleInfoW64
#endif
</code>
      <para>This function supersedes the <b>SymGetModuleInfo</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetModuleInfo</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetModuleInfo   SymGetModuleInfo64
#define SymGetModuleInfoW  SymGetModuleInfoW64
#else
BOOL
IMAGEAPI
SymGetModuleInfo(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULE ModuleInfo
    );

BOOL
IMAGEAPI
SymGetModuleInfoW(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULEW ModuleInfo
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_MODULE64" />
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymGetModuleInfoW64">
    <summary>
      <para>Retrieves the module information of the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dwAddr">
      <para>The virtual address that is contained in one of the modules loaded by the
<see cref="SymLoadModule64" /> function</para>
    </param>
    <param name="ModuleInfo">
      <para>A pointer to an
<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the
<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The module table is searched for a module that contains the <i>dwAddr</i>. The module is located based on the load address and size of each module. If a valid module is found, the <i>ModuleInfo</i> parameter is filled with the information about the module.</para>
      <para>The size of the <see cref="IMAGEHLP_MODULE64" /> structure used by this function has changed over the years.  If a version of DbgHelp.dll is called that is older than the DbgHelp.h used to compile the calling code, then this function may fail with an error code of <b>ERROR_INVALID_PARAMETER</b>.  This most commonly occurs when the system version (%WinDir%\System32\DbgHelp.dll) is called.  Code that calls the system version of DbgHelp.dll must be compiled using the appropriate SDK for that Windows release or the SDK for a previous release.</para>
      <para>The recommended model is to redistribute the required version of DbgHelp.dll along with the calling software.  This allows the caller to use the most robust versions of DbgHelp.dll as well as a simplifying upgrades.  The most recent version of DbgHelp.dll can always be found in the <a href="https://docs.microsoft.com//windows-hardware/drivers/debugger/">Debugging Tools for Windows</a> package.  As a general rule, code that is compiled to work with older versions will always work with newer versions.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <b>SymGetModuleInfoW64</b> is defined as follows in DbgHelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetModuleInfoW64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PIMAGEHLP_MODULEW64 ModuleInfo
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetModuleInfo64   SymGetModuleInfoW64
#endif
</code>
      <para>This function supersedes the <b>SymGetModuleInfo</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetModuleInfo</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetModuleInfo   SymGetModuleInfo64
#define SymGetModuleInfoW  SymGetModuleInfoW64
#else
BOOL
IMAGEAPI
SymGetModuleInfo(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULE ModuleInfo
    );

BOOL
IMAGEAPI
SymGetModuleInfoW(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULEW ModuleInfo
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_MODULE64" />
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymGetModuleInfo">
    <summary>
      <para>Retrieves the module information of the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="qwAddr">
      <para>The virtual address that is contained in one of the modules loaded by the
<see cref="SymLoadModule64" /> function.</para>
    </param>
    <param name="ModuleInfo">
      <para>A pointer to an
<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the
<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The module table is searched for a module that contains the <i>dwAddr</i>. The module is located based on the load address and size of each module. If a valid module is found, the <i>ModuleInfo</i> parameter is filled with the information about the module.</para>
      <para>The size of the <see cref="IMAGEHLP_MODULE64" /> structure used by this function has changed over the years.  If a version of DbgHelp.dll is called that is older than the DbgHelp.h used to compile the calling code, then this function may fail with an error code of <b>ERROR_INVALID_PARAMETER</b>.  This most commonly occurs when the system version (%WinDir%\System32\DbgHelp.dll) is called.  Code that calls the system version of DbgHelp.dll must be compiled using the appropriate SDK for that Windows release or the SDK for a previous release.</para>
      <para>The recommended model is to redistribute the required version of DbgHelp.dll along with the calling software.  This allows the caller to use the most robust versions of DbgHelp.dll as well as a simplifying upgrades.  The most recent version of DbgHelp.dll can always be found in the <a href="https://docs.microsoft.com//windows-hardware/drivers/debugger/">Debugging Tools for Windows</a> package.  As a general rule, code that is compiled to work with older versions will always work with newer versions.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <b>SymGetModuleInfoW64</b> is defined as follows in DbgHelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetModuleInfoW64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PIMAGEHLP_MODULEW64 ModuleInfo
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetModuleInfo64   SymGetModuleInfoW64
#endif
</code>
      <para>This function supersedes the <b>SymGetModuleInfo</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetModuleInfo</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetModuleInfo   SymGetModuleInfo64
#define SymGetModuleInfoW  SymGetModuleInfoW64
#else
BOOL
IMAGEAPI
SymGetModuleInfo(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULE ModuleInfo
    );

BOOL
IMAGEAPI
SymGetModuleInfoW(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULEW ModuleInfo
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_MODULE64" />
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymGetModuleInfo64">
    <summary>
      <para>Retrieves the module information of the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="qwAddr">
      <para>The virtual address that is contained in one of the modules loaded by the
<see cref="SymLoadModule64" /> function.</para>
    </param>
    <param name="ModuleInfo">
      <para>A pointer to an
<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the
<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The module table is searched for a module that contains the <i>dwAddr</i>. The module is located based on the load address and size of each module. If a valid module is found, the <i>ModuleInfo</i> parameter is filled with the information about the module.</para>
      <para>The size of the <see cref="IMAGEHLP_MODULE64" /> structure used by this function has changed over the years.  If a version of DbgHelp.dll is called that is older than the DbgHelp.h used to compile the calling code, then this function may fail with an error code of <b>ERROR_INVALID_PARAMETER</b>.  This most commonly occurs when the system version (%WinDir%\System32\DbgHelp.dll) is called.  Code that calls the system version of DbgHelp.dll must be compiled using the appropriate SDK for that Windows release or the SDK for a previous release.</para>
      <para>The recommended model is to redistribute the required version of DbgHelp.dll along with the calling software.  This allows the caller to use the most robust versions of DbgHelp.dll as well as a simplifying upgrades.  The most recent version of DbgHelp.dll can always be found in the <a href="https://docs.microsoft.com//windows-hardware/drivers/debugger/">Debugging Tools for Windows</a> package.  As a general rule, code that is compiled to work with older versions will always work with newer versions.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <b>SymGetModuleInfoW64</b> is defined as follows in DbgHelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetModuleInfoW64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PIMAGEHLP_MODULEW64 ModuleInfo
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetModuleInfo64   SymGetModuleInfoW64
#endif
</code>
      <para>This function supersedes the <b>SymGetModuleInfo</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetModuleInfo</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetModuleInfo   SymGetModuleInfo64
#define SymGetModuleInfoW  SymGetModuleInfoW64
#else
BOOL
IMAGEAPI
SymGetModuleInfo(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULE ModuleInfo
    );

BOOL
IMAGEAPI
SymGetModuleInfoW(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULEW ModuleInfo
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_MODULE64" />
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymGetModuleInfoW">
    <summary>
      <para>Retrieves the module information of the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="qwAddr">
      <para>The virtual address that is contained in one of the modules loaded by the
<see cref="SymLoadModule64" /> function.</para>
    </param>
    <param name="ModuleInfo">
      <para>A pointer to an
<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the
<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The module table is searched for a module that contains the <i>dwAddr</i>. The module is located based on the load address and size of each module. If a valid module is found, the <i>ModuleInfo</i> parameter is filled with the information about the module.</para>
      <para>The size of the <see cref="IMAGEHLP_MODULE64" /> structure used by this function has changed over the years.  If a version of DbgHelp.dll is called that is older than the DbgHelp.h used to compile the calling code, then this function may fail with an error code of <b>ERROR_INVALID_PARAMETER</b>.  This most commonly occurs when the system version (%WinDir%\System32\DbgHelp.dll) is called.  Code that calls the system version of DbgHelp.dll must be compiled using the appropriate SDK for that Windows release or the SDK for a previous release.</para>
      <para>The recommended model is to redistribute the required version of DbgHelp.dll along with the calling software.  This allows the caller to use the most robust versions of DbgHelp.dll as well as a simplifying upgrades.  The most recent version of DbgHelp.dll can always be found in the <a href="https://docs.microsoft.com//windows-hardware/drivers/debugger/">Debugging Tools for Windows</a> package.  As a general rule, code that is compiled to work with older versions will always work with newer versions.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <b>SymGetModuleInfoW64</b> is defined as follows in DbgHelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetModuleInfoW64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PIMAGEHLP_MODULEW64 ModuleInfo
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetModuleInfo64   SymGetModuleInfoW64
#endif
</code>
      <para>This function supersedes the <b>SymGetModuleInfo</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetModuleInfo</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetModuleInfo   SymGetModuleInfo64
#define SymGetModuleInfoW  SymGetModuleInfoW64
#else
BOOL
IMAGEAPI
SymGetModuleInfo(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULE ModuleInfo
    );

BOOL
IMAGEAPI
SymGetModuleInfoW(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULEW ModuleInfo
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_MODULE64" />
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymGetModuleInfoW64">
    <summary>
      <para>Retrieves the module information of the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="qwAddr">
      <para>The virtual address that is contained in one of the modules loaded by the
<see cref="SymLoadModule64" /> function.</para>
    </param>
    <param name="ModuleInfo">
      <para>A pointer to an
<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the
<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The module table is searched for a module that contains the <i>dwAddr</i>. The module is located based on the load address and size of each module. If a valid module is found, the <i>ModuleInfo</i> parameter is filled with the information about the module.</para>
      <para>The size of the <see cref="IMAGEHLP_MODULE64" /> structure used by this function has changed over the years.  If a version of DbgHelp.dll is called that is older than the DbgHelp.h used to compile the calling code, then this function may fail with an error code of <b>ERROR_INVALID_PARAMETER</b>.  This most commonly occurs when the system version (%WinDir%\System32\DbgHelp.dll) is called.  Code that calls the system version of DbgHelp.dll must be compiled using the appropriate SDK for that Windows release or the SDK for a previous release.</para>
      <para>The recommended model is to redistribute the required version of DbgHelp.dll along with the calling software.  This allows the caller to use the most robust versions of DbgHelp.dll as well as a simplifying upgrades.  The most recent version of DbgHelp.dll can always be found in the <a href="https://docs.microsoft.com//windows-hardware/drivers/debugger/">Debugging Tools for Windows</a> package.  As a general rule, code that is compiled to work with older versions will always work with newer versions.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <b>SymGetModuleInfoW64</b> is defined as follows in DbgHelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetModuleInfoW64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PIMAGEHLP_MODULEW64 ModuleInfo
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetModuleInfo64   SymGetModuleInfoW64
#endif
</code>
      <para>This function supersedes the <b>SymGetModuleInfo</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetModuleInfo</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetModuleInfo   SymGetModuleInfo64
#define SymGetModuleInfoW  SymGetModuleInfoW64
#else
BOOL
IMAGEAPI
SymGetModuleInfo(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULE ModuleInfo
    );

BOOL
IMAGEAPI
SymGetModuleInfoW(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULEW ModuleInfo
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_MODULE64" />
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymGetModuleInfo">
    <summary>
      <para>Retrieves the module information of the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dwAddr">
      <para>The virtual address that is contained in one of the modules loaded by the
<see cref="SymLoadModule64" /> function</para>
    </param>
    <param name="ModuleInfo">
      <para>A pointer to an
<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the
<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The module table is searched for a module that contains the <i>dwAddr</i>. The module is located based on the load address and size of each module. If a valid module is found, the <i>ModuleInfo</i> parameter is filled with the information about the module.</para>
      <para>The size of the <see cref="IMAGEHLP_MODULE64" /> structure used by this function has changed over the years.  If a version of DbgHelp.dll is called that is older than the DbgHelp.h used to compile the calling code, then this function may fail with an error code of <b>ERROR_INVALID_PARAMETER</b>.  This most commonly occurs when the system version (%WinDir%\System32\DbgHelp.dll) is called.  Code that calls the system version of DbgHelp.dll must be compiled using the appropriate SDK for that Windows release or the SDK for a previous release.</para>
      <para>The recommended model is to redistribute the required version of DbgHelp.dll along with the calling software.  This allows the caller to use the most robust versions of DbgHelp.dll as well as a simplifying upgrades.  The most recent version of DbgHelp.dll can always be found in the <a href="https://docs.microsoft.com//windows-hardware/drivers/debugger/">Debugging Tools for Windows</a> package.  As a general rule, code that is compiled to work with older versions will always work with newer versions.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <b>SymGetModuleInfoW64</b> is defined as follows in DbgHelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetModuleInfoW64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PIMAGEHLP_MODULEW64 ModuleInfo
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetModuleInfo64   SymGetModuleInfoW64
#endif
</code>
      <para>This function supersedes the <b>SymGetModuleInfo</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetModuleInfo</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetModuleInfo   SymGetModuleInfo64
#define SymGetModuleInfoW  SymGetModuleInfoW64
#else
BOOL
IMAGEAPI
SymGetModuleInfo(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULE ModuleInfo
    );

BOOL
IMAGEAPI
SymGetModuleInfoW(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULEW ModuleInfo
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_MODULE64" />
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymGetModuleInfo64">
    <summary>
      <para>Retrieves the module information of the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dwAddr">
      <para>The virtual address that is contained in one of the modules loaded by the
<see cref="SymLoadModule64" /> function</para>
    </param>
    <param name="ModuleInfo">
      <para>A pointer to an
<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the
<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The module table is searched for a module that contains the <i>dwAddr</i>. The module is located based on the load address and size of each module. If a valid module is found, the <i>ModuleInfo</i> parameter is filled with the information about the module.</para>
      <para>The size of the <see cref="IMAGEHLP_MODULE64" /> structure used by this function has changed over the years.  If a version of DbgHelp.dll is called that is older than the DbgHelp.h used to compile the calling code, then this function may fail with an error code of <b>ERROR_INVALID_PARAMETER</b>.  This most commonly occurs when the system version (%WinDir%\System32\DbgHelp.dll) is called.  Code that calls the system version of DbgHelp.dll must be compiled using the appropriate SDK for that Windows release or the SDK for a previous release.</para>
      <para>The recommended model is to redistribute the required version of DbgHelp.dll along with the calling software.  This allows the caller to use the most robust versions of DbgHelp.dll as well as a simplifying upgrades.  The most recent version of DbgHelp.dll can always be found in the <a href="https://docs.microsoft.com//windows-hardware/drivers/debugger/">Debugging Tools for Windows</a> package.  As a general rule, code that is compiled to work with older versions will always work with newer versions.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <b>SymGetModuleInfoW64</b> is defined as follows in DbgHelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetModuleInfoW64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PIMAGEHLP_MODULEW64 ModuleInfo
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetModuleInfo64   SymGetModuleInfoW64
#endif
</code>
      <para>This function supersedes the <b>SymGetModuleInfo</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetModuleInfo</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetModuleInfo   SymGetModuleInfo64
#define SymGetModuleInfoW  SymGetModuleInfoW64
#else
BOOL
IMAGEAPI
SymGetModuleInfo(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULE ModuleInfo
    );

BOOL
IMAGEAPI
SymGetModuleInfoW(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULEW ModuleInfo
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_MODULE64" />
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymGetModuleInfoW">
    <summary>
      <para>Retrieves the module information of the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dwAddr">
      <para>The virtual address that is contained in one of the modules loaded by the
<see cref="SymLoadModule64" /> function</para>
    </param>
    <param name="ModuleInfo">
      <para>A pointer to an
<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the
<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The module table is searched for a module that contains the <i>dwAddr</i>. The module is located based on the load address and size of each module. If a valid module is found, the <i>ModuleInfo</i> parameter is filled with the information about the module.</para>
      <para>The size of the <see cref="IMAGEHLP_MODULE64" /> structure used by this function has changed over the years.  If a version of DbgHelp.dll is called that is older than the DbgHelp.h used to compile the calling code, then this function may fail with an error code of <b>ERROR_INVALID_PARAMETER</b>.  This most commonly occurs when the system version (%WinDir%\System32\DbgHelp.dll) is called.  Code that calls the system version of DbgHelp.dll must be compiled using the appropriate SDK for that Windows release or the SDK for a previous release.</para>
      <para>The recommended model is to redistribute the required version of DbgHelp.dll along with the calling software.  This allows the caller to use the most robust versions of DbgHelp.dll as well as a simplifying upgrades.  The most recent version of DbgHelp.dll can always be found in the <a href="https://docs.microsoft.com//windows-hardware/drivers/debugger/">Debugging Tools for Windows</a> package.  As a general rule, code that is compiled to work with older versions will always work with newer versions.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <b>SymGetModuleInfoW64</b> is defined as follows in DbgHelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetModuleInfoW64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PIMAGEHLP_MODULEW64 ModuleInfo
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetModuleInfo64   SymGetModuleInfoW64
#endif
</code>
      <para>This function supersedes the <b>SymGetModuleInfo</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetModuleInfo</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetModuleInfo   SymGetModuleInfo64
#define SymGetModuleInfoW  SymGetModuleInfoW64
#else
BOOL
IMAGEAPI
SymGetModuleInfo(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULE ModuleInfo
    );

BOOL
IMAGEAPI
SymGetModuleInfoW(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULEW ModuleInfo
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_MODULE64" />
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymGetModuleInfoW64">
    <summary>
      <para>Retrieves the module information of the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dwAddr">
      <para>The virtual address that is contained in one of the modules loaded by the
<see cref="SymLoadModule64" /> function</para>
    </param>
    <param name="ModuleInfo">
      <para>A pointer to an
<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the
<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The module table is searched for a module that contains the <i>dwAddr</i>. The module is located based on the load address and size of each module. If a valid module is found, the <i>ModuleInfo</i> parameter is filled with the information about the module.</para>
      <para>The size of the <see cref="IMAGEHLP_MODULE64" /> structure used by this function has changed over the years.  If a version of DbgHelp.dll is called that is older than the DbgHelp.h used to compile the calling code, then this function may fail with an error code of <b>ERROR_INVALID_PARAMETER</b>.  This most commonly occurs when the system version (%WinDir%\System32\DbgHelp.dll) is called.  Code that calls the system version of DbgHelp.dll must be compiled using the appropriate SDK for that Windows release or the SDK for a previous release.</para>
      <para>The recommended model is to redistribute the required version of DbgHelp.dll along with the calling software.  This allows the caller to use the most robust versions of DbgHelp.dll as well as a simplifying upgrades.  The most recent version of DbgHelp.dll can always be found in the <a href="https://docs.microsoft.com//windows-hardware/drivers/debugger/">Debugging Tools for Windows</a> package.  As a general rule, code that is compiled to work with older versions will always work with newer versions.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <b>SymGetModuleInfoW64</b> is defined as follows in DbgHelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetModuleInfoW64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PIMAGEHLP_MODULEW64 ModuleInfo
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetModuleInfo64   SymGetModuleInfoW64
#endif
</code>
      <para>This function supersedes the <b>SymGetModuleInfo</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetModuleInfo</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetModuleInfo   SymGetModuleInfo64
#define SymGetModuleInfoW  SymGetModuleInfoW64
#else
BOOL
IMAGEAPI
SymGetModuleInfo(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULE ModuleInfo
    );

BOOL
IMAGEAPI
SymGetModuleInfoW(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULEW ModuleInfo
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_MODULE64" />
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymGetModuleInfo">
    <summary>
      <para>Retrieves the module information of the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="qwAddr">
      <para>The virtual address that is contained in one of the modules loaded by the
<see cref="SymLoadModule64" /> function.</para>
    </param>
    <param name="ModuleInfo">
      <para>A pointer to an
<see cref="IMAGEHLP_MODULEW64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the
<b>IMAGEHLP_MODULEW64</b> structure. An invalid value will result in an error.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The module table is searched for a module that contains the <i>dwAddr</i>. The module is located based on the load address and size of each module. If a valid module is found, the <i>ModuleInfo</i> parameter is filled with the information about the module.</para>
      <para>The size of the <see cref="IMAGEHLP_MODULEW64" /> structure used by this function has changed over the years.  If a version of DbgHelp.dll is called that is older than the DbgHelp.h used to compile the calling code, then this function may fail with an error code of <b>ERROR_INVALID_PARAMETER</b>.  This most commonly occurs when the system version (%WinDir%\System32\DbgHelp.dll) is called.  Code that calls the system version of DbgHelp.dll must be compiled using the appropriate SDK for that Windows release or the SDK for a previous release.</para>
      <para>The recommended model is to redistribute the required version of DbgHelp.dll along with the calling software.  This allows the caller to use the most robust versions of DbgHelp.dll as well as a simplifying upgrades.  The most recent version of DbgHelp.dll can always be found in the <a href="https://docs.microsoft.com//windows-hardware/drivers/debugger/">Debugging Tools for Windows</a> package.  As a general rule, code that is compiled to work with older versions will always work with newer versions.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <b>SymGetModuleInfoW64</b> is defined as follows in DbgHelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetModuleInfoW64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PIMAGEHLP_MODULEW64 ModuleInfo
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetModuleInfo64   SymGetModuleInfoW64
#endif
</code>
      <para>This function supersedes the <b>SymGetModuleInfo</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetModuleInfo</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetModuleInfo   SymGetModuleInfo64
#define SymGetModuleInfoW  SymGetModuleInfoW64
#else
BOOL
IMAGEAPI
SymGetModuleInfo(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULE ModuleInfo
    );

BOOL
IMAGEAPI
SymGetModuleInfoW(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULEW ModuleInfo
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_MODULEW64" />
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymGetModuleInfo64">
    <summary>
      <para>Retrieves the module information of the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="qwAddr">
      <para>The virtual address that is contained in one of the modules loaded by the
<see cref="SymLoadModule64" /> function.</para>
    </param>
    <param name="ModuleInfo">
      <para>A pointer to an
<see cref="IMAGEHLP_MODULEW64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the
<b>IMAGEHLP_MODULEW64</b> structure. An invalid value will result in an error.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The module table is searched for a module that contains the <i>dwAddr</i>. The module is located based on the load address and size of each module. If a valid module is found, the <i>ModuleInfo</i> parameter is filled with the information about the module.</para>
      <para>The size of the <see cref="IMAGEHLP_MODULEW64" /> structure used by this function has changed over the years.  If a version of DbgHelp.dll is called that is older than the DbgHelp.h used to compile the calling code, then this function may fail with an error code of <b>ERROR_INVALID_PARAMETER</b>.  This most commonly occurs when the system version (%WinDir%\System32\DbgHelp.dll) is called.  Code that calls the system version of DbgHelp.dll must be compiled using the appropriate SDK for that Windows release or the SDK for a previous release.</para>
      <para>The recommended model is to redistribute the required version of DbgHelp.dll along with the calling software.  This allows the caller to use the most robust versions of DbgHelp.dll as well as a simplifying upgrades.  The most recent version of DbgHelp.dll can always be found in the <a href="https://docs.microsoft.com//windows-hardware/drivers/debugger/">Debugging Tools for Windows</a> package.  As a general rule, code that is compiled to work with older versions will always work with newer versions.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <b>SymGetModuleInfoW64</b> is defined as follows in DbgHelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetModuleInfoW64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PIMAGEHLP_MODULEW64 ModuleInfo
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetModuleInfo64   SymGetModuleInfoW64
#endif
</code>
      <para>This function supersedes the <b>SymGetModuleInfo</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetModuleInfo</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetModuleInfo   SymGetModuleInfo64
#define SymGetModuleInfoW  SymGetModuleInfoW64
#else
BOOL
IMAGEAPI
SymGetModuleInfo(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULE ModuleInfo
    );

BOOL
IMAGEAPI
SymGetModuleInfoW(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULEW ModuleInfo
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_MODULEW64" />
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymGetModuleInfoW">
    <summary>
      <para>Retrieves the module information of the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="qwAddr">
      <para>The virtual address that is contained in one of the modules loaded by the
<see cref="SymLoadModule64" /> function.</para>
    </param>
    <param name="ModuleInfo">
      <para>A pointer to an
<see cref="IMAGEHLP_MODULEW64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the
<b>IMAGEHLP_MODULEW64</b> structure. An invalid value will result in an error.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The module table is searched for a module that contains the <i>dwAddr</i>. The module is located based on the load address and size of each module. If a valid module is found, the <i>ModuleInfo</i> parameter is filled with the information about the module.</para>
      <para>The size of the <see cref="IMAGEHLP_MODULEW64" /> structure used by this function has changed over the years.  If a version of DbgHelp.dll is called that is older than the DbgHelp.h used to compile the calling code, then this function may fail with an error code of <b>ERROR_INVALID_PARAMETER</b>.  This most commonly occurs when the system version (%WinDir%\System32\DbgHelp.dll) is called.  Code that calls the system version of DbgHelp.dll must be compiled using the appropriate SDK for that Windows release or the SDK for a previous release.</para>
      <para>The recommended model is to redistribute the required version of DbgHelp.dll along with the calling software.  This allows the caller to use the most robust versions of DbgHelp.dll as well as a simplifying upgrades.  The most recent version of DbgHelp.dll can always be found in the <a href="https://docs.microsoft.com//windows-hardware/drivers/debugger/">Debugging Tools for Windows</a> package.  As a general rule, code that is compiled to work with older versions will always work with newer versions.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <b>SymGetModuleInfoW64</b> is defined as follows in DbgHelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetModuleInfoW64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PIMAGEHLP_MODULEW64 ModuleInfo
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetModuleInfo64   SymGetModuleInfoW64
#endif
</code>
      <para>This function supersedes the <b>SymGetModuleInfo</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetModuleInfo</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetModuleInfo   SymGetModuleInfo64
#define SymGetModuleInfoW  SymGetModuleInfoW64
#else
BOOL
IMAGEAPI
SymGetModuleInfo(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULE ModuleInfo
    );

BOOL
IMAGEAPI
SymGetModuleInfoW(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULEW ModuleInfo
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_MODULEW64" />
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymGetModuleInfoW64">
    <summary>
      <para>Retrieves the module information of the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="qwAddr">
      <para>The virtual address that is contained in one of the modules loaded by the
<see cref="SymLoadModule64" /> function.</para>
    </param>
    <param name="ModuleInfo">
      <para>A pointer to an
<see cref="IMAGEHLP_MODULEW64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the
<b>IMAGEHLP_MODULEW64</b> structure. An invalid value will result in an error.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The module table is searched for a module that contains the <i>dwAddr</i>. The module is located based on the load address and size of each module. If a valid module is found, the <i>ModuleInfo</i> parameter is filled with the information about the module.</para>
      <para>The size of the <see cref="IMAGEHLP_MODULEW64" /> structure used by this function has changed over the years.  If a version of DbgHelp.dll is called that is older than the DbgHelp.h used to compile the calling code, then this function may fail with an error code of <b>ERROR_INVALID_PARAMETER</b>.  This most commonly occurs when the system version (%WinDir%\System32\DbgHelp.dll) is called.  Code that calls the system version of DbgHelp.dll must be compiled using the appropriate SDK for that Windows release or the SDK for a previous release.</para>
      <para>The recommended model is to redistribute the required version of DbgHelp.dll along with the calling software.  This allows the caller to use the most robust versions of DbgHelp.dll as well as a simplifying upgrades.  The most recent version of DbgHelp.dll can always be found in the <a href="https://docs.microsoft.com//windows-hardware/drivers/debugger/">Debugging Tools for Windows</a> package.  As a general rule, code that is compiled to work with older versions will always work with newer versions.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <b>SymGetModuleInfoW64</b> is defined as follows in DbgHelp.h.</para>
      <code>
BOOL
IMAGEAPI
SymGetModuleInfoW64(
    __in HANDLE hProcess,
    __in DWORD64 qwAddr,
    __out PIMAGEHLP_MODULEW64 ModuleInfo
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymGetModuleInfo64   SymGetModuleInfoW64
#endif
</code>
      <para>This function supersedes the <b>SymGetModuleInfo</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetModuleInfo</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetModuleInfo   SymGetModuleInfo64
#define SymGetModuleInfoW  SymGetModuleInfoW64
#else
BOOL
IMAGEAPI
SymGetModuleInfo(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULE ModuleInfo
    );

BOOL
IMAGEAPI
SymGetModuleInfoW(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out PIMAGEHLP_MODULEW ModuleInfo
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_MODULEW64" />
    <seealso cref="SymInitialize" />
    <seealso cref="SymLoadModule64" />
  </member>
  <member name="Windows.SymGetOmaps">
    <summary>
      <para>Retrieves the omap tables within a loaded module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="OmapTo">
      <para>An array of address map entries to the new image layout taken from the original layout. For details on the map entries, see the <see cref="OMAP" /> structure.</para>
    </param>
    <param name="cOmapTo">
      <para>The number of entries in the <i>OmapTo</i> array.</para>
    </param>
    <param name="OmapFrom">
      <para>An array of address map entries from the new image layout to the original layout (as described by the debug symbols). For details on the map entries, see the <see cref="OMAP" /> structure.</para>
    </param>
    <param name="cOmapFrom">
      <para>The number of entries in the <i>OmapFrom</i> array.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails (the omap is not found), the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso cref="OMAP" />
  </member>
  <member name="Windows.SymGetOptions">
    <summary>
      <para>Retrieves the current option mask.</para>
    </summary>
    <returns>
      <para>The
function returns the current options that have been set. Zero is a valid value and indicates that all options are turned off.</para>
    </returns>
    <remarks>
      <para>These options can be changed several times while the library is in use by an application. Any option change affects all future calls to the symbol handler.</para>
      <para>The return value is the combination of the
following values that have been set using the <see cref="SymSetOptions" /> function.</para>
      <list type="bullet">
        <item>
          <description>SYMOPT_ALLOW_ABSOLUTE_SYMBOLS</description>
        </item>
        <item>
          <description>SYMOPT_ALLOW_ZERO_ADDRESS</description>
        </item>
        <item>
          <description>SYMOPT_AUTO_PUBLICS</description>
        </item>
        <item>
          <description>SYMOPT_CASE_INSENSITIVE</description>
        </item>
        <item>
          <description>SYMOPT_DEBUG</description>
        </item>
        <item>
          <description>SYMOPT_DEFERRED_LOADS</description>
        </item>
        <item>
          <description>SYMOPT_EXACT_SYMBOLS</description>
        </item>
        <item>
          <description>SYMOPT_FAIL_CRITICAL_ERRORS</description>
        </item>
        <item>
          <description>SYMOPT_FAVOR_COMPRESSED</description>
        </item>
        <item>
          <description>SYMOPT_FLAT_DIRECTORY</description>
        </item>
        <item>
          <description>SYMOPT_IGNORE_CVREC</description>
        </item>
        <item>
          <description>SYMOPT_IGNORE_IMAGEDIR</description>
        </item>
        <item>
          <description>SYMOPT_IGNORE_NT_SYMPATH</description>
        </item>
        <item>
          <description>SYMOPT_INCLUDE_32BIT_MODULES</description>
        </item>
        <item>
          <description>SYMOPT_LOAD_ANYTHING</description>
        </item>
        <item>
          <description>SYMOPT_LOAD_LINES</description>
        </item>
        <item>
          <description>SYMOPT_NO_CPP</description>
        </item>
        <item>
          <description>SYMOPT_NO_IMAGE_SEARCH</description>
        </item>
        <item>
          <description>SYMOPT_NO_PROMPTS</description>
        </item>
        <item>
          <description>SYMOPT_NO_PUBLICS</description>
        </item>
        <item>
          <description>SYMOPT_NO_UNQUALIFIED_LOADS</description>
        </item>
        <item>
          <description>SYMOPT_OVERWRITE</description>
        </item>
        <item>
          <description>SYMOPT_PUBLICS_ONLY</description>
        </item>
        <item>
          <description>SYMOPT_SECURE</description>
        </item>
        <item>
          <description>SYMOPT_UNDNAME</description>
        </item>
      </list>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymGetScope">
    <summary>
      <para>Retrieves the scope for the specified index.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="Index">
      <para>A unique value for the symbol.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure. The <b>Scope</b> member contains the scope.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
    <seealso cref="SymSetScopeFromAddr" />
    <seealso cref="SymSetScopeFromIndex" />
  </member>
  <member name="Windows.SymGetScopeW">
    <summary>
      <para>Retrieves the scope for the specified index.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="Index">
      <para>A unique value for the symbol.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure. The <b>Scope</b> member contains the scope.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
    <seealso cref="SymSetScopeFromAddr" />
    <seealso cref="SymSetScopeFromIndex" />
  </member>
  <member name="Windows.SymGetScope">
    <summary>
      <para>Retrieves the scope for the specified index.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="Index">
      <para>A unique value for the symbol.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure. The <b>Scope</b> member contains the scope.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymGetScope as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
    <seealso cref="SymSetScopeFromAddr" />
    <seealso cref="SymSetScopeFromIndex" />
  </member>
  <member name="Windows.SymGetScopeW">
    <summary>
      <para>Retrieves the scope for the specified index.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="Index">
      <para>A unique value for the symbol.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure. The <b>Scope</b> member contains the scope.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymGetScope as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
    <seealso cref="SymSetScopeFromAddr" />
    <seealso cref="SymSetScopeFromIndex" />
  </member>
  <member name="Windows.SymGetSearchPath">
    <summary>
      <para>Retrieves the symbol search path for the specified process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SearchPath">
      <para>A pointer to the buffer that receives the symbol search path.</para>
    </param>
    <param name="SearchPathLength">
      <para>The size of the <i>SearchPath</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetSearchPath</b> function copies the symbol search path for the specified process into the <i>SearchPath</i> buffer. If the function fails, the contents of the buffer are undefined.</para>
      <para>To specify a symbol search path for the process, use the
<see cref="SymSetSearchPath" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymSetSearchPath" />
  </member>
  <member name="Windows.SymGetSearchPathW">
    <summary>
      <para>Retrieves the symbol search path for the specified process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SearchPath">
      <para>A pointer to the buffer that receives the symbol search path.</para>
    </param>
    <param name="SearchPathLength">
      <para>The size of the <i>SearchPath</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetSearchPath</b> function copies the symbol search path for the specified process into the <i>SearchPath</i> buffer. If the function fails, the contents of the buffer are undefined.</para>
      <para>To specify a symbol search path for the process, use the
<see cref="SymSetSearchPath" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymSetSearchPath" />
  </member>
  <member name="Windows.SymGetSearchPath">
    <summary>
      <para>Retrieves the symbol search path for the specified process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SearchPath">
      <para>A pointer to the buffer that receives the symbol search path.</para>
    </param>
    <param name="SearchPathLength">
      <para>The size of the <i>SearchPath</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetSearchPath</b> function copies the symbol search path for the specified process into the <i>SearchPath</i> buffer. If the function fails, the contents of the buffer are undefined.</para>
      <para>To specify a symbol search path for the process, use the
<see cref="SymSetSearchPath" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymGetSearchPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymSetSearchPath" />
  </member>
  <member name="Windows.SymGetSearchPathW">
    <summary>
      <para>Retrieves the symbol search path for the specified process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SearchPath">
      <para>A pointer to the buffer that receives the symbol search path.</para>
    </param>
    <param name="SearchPathLength">
      <para>The size of the <i>SearchPath</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetSearchPath</b> function copies the symbol search path for the specified process into the <i>SearchPath</i> buffer. If the function fails, the contents of the buffer are undefined.</para>
      <para>To specify a symbol search path for the process, use the
<see cref="SymSetSearchPath" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymGetSearchPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymSetSearchPath" />
  </member>
  <member name="Windows.SymGetSourceFile">
    <summary>
      <para>Retrieves the specified source file from the source server.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="Params">
      <para>This parameter is unused.</para>
    </param>
    <param name="FileSpec">
      <para>The name of the source file.</para>
    </param>
    <param name="FilePath">
      <para>A pointer to a
buffer that receives the fully qualified path of the source file.</para>
    </param>
    <param name="Size">
      <para>The size of the <i>FilePath</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>To control which directory receives the source files, use the <see cref="SymSetHomeDirectory" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</seealso>
  </member>
  <member name="Windows.SymGetSourceFileW">
    <summary>
      <para>Retrieves the specified source file from the source server.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="Params">
      <para>This parameter is unused.</para>
    </param>
    <param name="FileSpec">
      <para>The name of the source file.</para>
    </param>
    <param name="FilePath">
      <para>A pointer to a
buffer that receives the fully qualified path of the source file.</para>
    </param>
    <param name="Size">
      <para>The size of the <i>FilePath</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>To control which directory receives the source files, use the <see cref="SymSetHomeDirectory" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</seealso>
  </member>
  <member name="Windows.SymGetSourceFileChecksum">
    <summary>
      <para>Retrieves the specified source file checksum from the source server.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="FileSpec">
      <para>The name of the source file.</para>
    </param>
    <param name="pCheckSumType">
      <para>On success, points to the checksum type.</para>
    </param>
    <param name="pChecksum">
      <para>pointer to a buffer that receives the checksum. If <b>NULL</b>, then when the call returns <i>pActualBytesWritten</i> returns the number of bytes required.</para>
    </param>
    <param name="checksumSize">
      <para>The size of the <i>pChecksum</i> buffer, in bytes.</para>
    </param>
    <param name="pActualBytesWritten">
      <para>Pointer to the actual bytes written in the buffer.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceFileChecksumW">
    <summary>
      <para>Retrieves the specified source file checksum from the source server.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="FileSpec">
      <para>The name of the source file.</para>
    </param>
    <param name="pCheckSumType">
      <para>On success, points to the checksum type.</para>
    </param>
    <param name="pChecksum">
      <para>pointer to a buffer that receives the checksum. If <b>NULL</b>, then when the call returns <i>pActualBytesWritten</i> returns the number of bytes required.</para>
    </param>
    <param name="checksumSize">
      <para>The size of the <i>pChecksum</i> buffer, in bytes.</para>
    </param>
    <param name="pActualBytesWritten">
      <para>Pointer to the actual bytes written in the buffer.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceFileChecksum">
    <summary>
      <para>Retrieves the specified source file checksum from the source server.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="FileSpec">
      <para>The name of the source file.</para>
    </param>
    <param name="pCheckSumType">
      <para>On success, points to the checksum type.</para>
    </param>
    <param name="pChecksum">
      <para>pointer to a buffer that receives the checksum. If <b>NULL</b>, then when the call returns <i>pActualBytesWritten</i> returns the number of bytes required.</para>
    </param>
    <param name="checksumSize">
      <para>The size of the <i>pChecksum</i> buffer, in bytes.</para>
    </param>
    <param name="pActualBytesWritten">
      <para>Pointer to the actual bytes written in the buffer.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceFileChecksumW">
    <summary>
      <para>Retrieves the specified source file checksum from the source server.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="FileSpec">
      <para>The name of the source file.</para>
    </param>
    <param name="pCheckSumType">
      <para>On success, points to the checksum type.</para>
    </param>
    <param name="pChecksum">
      <para>pointer to a buffer that receives the checksum. If <b>NULL</b>, then when the call returns <i>pActualBytesWritten</i> returns the number of bytes required.</para>
    </param>
    <param name="checksumSize">
      <para>The size of the <i>pChecksum</i> buffer, in bytes.</para>
    </param>
    <param name="pActualBytesWritten">
      <para>Pointer to the actual bytes written in the buffer.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceFileFromToken">
    <summary>
      <para>Retrieves the source file associated with the specified token from the source server.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Token">
      <para>A pointer to the token.</para>
    </param>
    <param name="Params">
      <para>This parameter is unused.</para>
    </param>
    <param name="FilePath">
      <para>A pointer to a
buffer that receives the fully qualified path of the source file.</para>
    </param>
    <param name="Size">
      <para>The size of the <i>FilePath</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</seealso>
  </member>
  <member name="Windows.SymGetSourceFileFromTokenW">
    <summary>
      <para>Retrieves the source file associated with the specified token from the source server.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Token">
      <para>A pointer to the token.</para>
    </param>
    <param name="Params">
      <para>This parameter is unused.</para>
    </param>
    <param name="FilePath">
      <para>A pointer to a
buffer that receives the fully qualified path of the source file.</para>
    </param>
    <param name="Size">
      <para>The size of the <i>FilePath</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</seealso>
  </member>
  <member name="Windows.SymGetSourceFileFromToken">
    <summary>
      <para>Retrieves the source file associated with the specified token from the source server.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Token">
      <para>A pointer to the token.</para>
    </param>
    <param name="Params">
      <para>This parameter is unused.</para>
    </param>
    <param name="FilePath">
      <para>A pointer to a
buffer that receives the fully qualified path of the source file.</para>
    </param>
    <param name="Size">
      <para>The size of the <i>FilePath</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymGetSourceFileFromToken as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</seealso>
  </member>
  <member name="Windows.SymGetSourceFileFromTokenW">
    <summary>
      <para>Retrieves the source file associated with the specified token from the source server.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Token">
      <para>A pointer to the token.</para>
    </param>
    <param name="Params">
      <para>This parameter is unused.</para>
    </param>
    <param name="FilePath">
      <para>A pointer to a
buffer that receives the fully qualified path of the source file.</para>
    </param>
    <param name="Size">
      <para>The size of the <i>FilePath</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymGetSourceFileFromToken as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</seealso>
  </member>
  <member name="Windows.SymGetSourceFileToken">
    <summary>
      <para>Retrieves token for the specified source file from the source server.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="FileSpec">
      <para>The name of the source file.</para>
    </param>
    <param name="Token">
      <para>A pointer to a
buffer that receives the token.</para>
    </param>
    <param name="Size">
      <para>The size of the <i>Token</i> buffer, in bytes.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</seealso>
  </member>
  <member name="Windows.SymGetSourceFileTokenW">
    <summary>
      <para>Retrieves token for the specified source file from the source server.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="FileSpec">
      <para>The name of the source file.</para>
    </param>
    <param name="Token">
      <para>A pointer to a
buffer that receives the token.</para>
    </param>
    <param name="Size">
      <para>The size of the <i>Token</i> buffer, in bytes.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</seealso>
  </member>
  <member name="Windows.SymGetSourceFileToken">
    <summary>
      <para>Retrieves token for the specified source file from the source server.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="FileSpec">
      <para>The name of the source file.</para>
    </param>
    <param name="Token">
      <para>A pointer to a
buffer that receives the token.</para>
    </param>
    <param name="Size">
      <para>The size of the <i>Token</i> buffer, in bytes.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymGetSourceFileToken as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</seealso>
  </member>
  <member name="Windows.SymGetSourceFileTokenW">
    <summary>
      <para>Retrieves token for the specified source file from the source server.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="FileSpec">
      <para>The name of the source file.</para>
    </param>
    <param name="Token">
      <para>A pointer to a
buffer that receives the token.</para>
    </param>
    <param name="Size">
      <para>The size of the <i>Token</i> buffer, in bytes.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymGetSourceFileToken as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</seealso>
  </member>
  <member name="Windows.SymGetSourceFile">
    <summary>
      <para>Retrieves the specified source file from the source server.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="Params">
      <para>This parameter is unused.</para>
    </param>
    <param name="FileSpec">
      <para>The name of the source file.</para>
    </param>
    <param name="FilePath">
      <para>A pointer to a
buffer that receives the fully qualified path of the source file.</para>
    </param>
    <param name="Size">
      <para>The size of the <i>FilePath</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>To control which directory receives the source files, use the <see cref="SymSetHomeDirectory" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymGetSourceFile as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</seealso>
  </member>
  <member name="Windows.SymGetSourceFileW">
    <summary>
      <para>Retrieves the specified source file from the source server.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Base">
      <para>The base address of the module.</para>
    </param>
    <param name="Params">
      <para>This parameter is unused.</para>
    </param>
    <param name="FileSpec">
      <para>The name of the source file.</para>
    </param>
    <param name="FilePath">
      <para>A pointer to a
buffer that receives the fully qualified path of the source file.</para>
    </param>
    <param name="Size">
      <para>The size of the <i>FilePath</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>To control which directory receives the source files, use the <see cref="SymSetHomeDirectory" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymGetSourceFile as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</seealso>
  </member>
  <member name="Windows.SymGetSourceVarFromToken">
    <summary>
      <para>Retrieves the value associated with the specified variable name from the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</a> token.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Token">
      <para>A pointer to the token.</para>
    </param>
    <param name="Params">
      <para>This parameter is unused.</para>
    </param>
    <param name="VarName">
      <para>The name of the variable token whose value you want to retrieve.</para>
    </param>
    <param name="Value">
      <para>A pointer to a
buffer that receives the value associated with the variable token specified in the <i>VarName</i> parameter.</para>
    </param>
    <param name="Size">
      <para>The size of the <i>Value</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
  </member>
  <member name="Windows.SymGetSourceVarFromTokenW">
    <summary>
      <para>Retrieves the value associated with the specified variable name from the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</a> token.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Token">
      <para>A pointer to the token.</para>
    </param>
    <param name="Params">
      <para>This parameter is unused.</para>
    </param>
    <param name="VarName">
      <para>The name of the variable token whose value you want to retrieve.</para>
    </param>
    <param name="Value">
      <para>A pointer to a
buffer that receives the value associated with the variable token specified in the <i>VarName</i> parameter.</para>
    </param>
    <param name="Size">
      <para>The size of the <i>Value</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
  </member>
  <member name="Windows.SymGetSourceVarFromToken">
    <summary>
      <para>Retrieves the value associated with the specified variable name from the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</a> token.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Token">
      <para>A pointer to the token.</para>
    </param>
    <param name="Params">
      <para>This parameter is unused.</para>
    </param>
    <param name="VarName">
      <para>The name of the variable token whose value you want to retrieve.</para>
    </param>
    <param name="Value">
      <para>A pointer to a
buffer that receives the value associated with the variable token specified in the <i>VarName</i> parameter.</para>
    </param>
    <param name="Size">
      <para>The size of the <i>Value</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymGetSourceVarFromToken as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.SymGetSourceVarFromTokenW">
    <summary>
      <para>Retrieves the value associated with the specified variable name from the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</a> token.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Token">
      <para>A pointer to the token.</para>
    </param>
    <param name="Params">
      <para>This parameter is unused.</para>
    </param>
    <param name="VarName">
      <para>The name of the variable token whose value you want to retrieve.</para>
    </param>
    <param name="Value">
      <para>A pointer to a
buffer that receives the value associated with the variable token specified in the <i>VarName</i> parameter.</para>
    </param>
    <param name="Size">
      <para>The size of the <i>Value</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymGetSourceVarFromToken as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
  </member>
  <member name="Windows.SymGetSymbolFile">
    <summary>
      <para>Locates a symbol file in the specified symbol path.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
      <para>If this handle is 0, <i>SymPath</i> cannot be <b>NULL</b>. Use this option to load a symbol file without calling <see cref="SymInitialize" /> or <see cref="SymCleanup" />.</para>
    </param>
    <param name="SymPath">
      <para>The symbol path. If this parameter is <b>NULL</b> or an empty string, the function uses the symbol path set using the
<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</para>
    </param>
    <param name="ImageFile">
      <para>The name of the image  file.</para>
    </param>
    <param name="Type">
      <para>The type of symbol file. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>sfImage</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>A .exe or .dll file.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>sfDbg</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>A .dbg file.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>sfPdb</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>A .pdb file.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>sfMpd</b>
                </description>
              </item>
              <item>
                <description>3</description>
              </item>
            </list>
          </description>
          <description>
            <para>Reserved.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="SymbolFile">
      <para>A pointer to a null-terminated string that receives the name of the symbol file.</para>
    </param>
    <param name="cSymbolFile">
      <para>The size of the <i>SymbolFile</i> buffer, in characters.</para>
    </param>
    <param name="DbgFile">
      <para>A pointer to a buffer that receives the fully qualified path to the symbol file. This buffer must be at least MAX_PATH characters.</para>
    </param>
    <param name="cDbgFile">
      <para>The size of the <i>DbgFile</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the server locates a valid symbol file, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b> and
<see cref="GetLastError" /> returns a value that indicates why the symbol file was not returned.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetSymbolFileW">
    <summary>
      <para>Locates a symbol file in the specified symbol path.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
      <para>If this handle is 0, <i>SymPath</i> cannot be <b>NULL</b>. Use this option to load a symbol file without calling <see cref="SymInitialize" /> or <see cref="SymCleanup" />.</para>
    </param>
    <param name="SymPath">
      <para>The symbol path. If this parameter is <b>NULL</b> or an empty string, the function uses the symbol path set using the
<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</para>
    </param>
    <param name="ImageFile">
      <para>The name of the image  file.</para>
    </param>
    <param name="Type">
      <para>The type of symbol file. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>sfImage</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>A .exe or .dll file.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>sfDbg</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>A .dbg file.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>sfPdb</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>A .pdb file.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>sfMpd</b>
                </description>
              </item>
              <item>
                <description>3</description>
              </item>
            </list>
          </description>
          <description>
            <para>Reserved.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="SymbolFile">
      <para>A pointer to a null-terminated string that receives the name of the symbol file.</para>
    </param>
    <param name="cSymbolFile">
      <para>The size of the <i>SymbolFile</i> buffer, in characters.</para>
    </param>
    <param name="DbgFile">
      <para>A pointer to a buffer that receives the fully qualified path to the symbol file. This buffer must be at least MAX_PATH characters.</para>
    </param>
    <param name="cDbgFile">
      <para>The size of the <i>DbgFile</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the server locates a valid symbol file, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b> and
<see cref="GetLastError" /> returns a value that indicates why the symbol file was not returned.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetSymbolFile">
    <summary>
      <para>Locates a symbol file in the specified symbol path.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
      <para>If this handle is 0, <i>SymPath</i> cannot be <b>NULL</b>. Use this option to load a symbol file without calling <see cref="SymInitialize" /> or <see cref="SymCleanup" />.</para>
    </param>
    <param name="SymPath">
      <para>The symbol path. If this parameter is <b>NULL</b> or an empty string, the function uses the symbol path set using the
<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</para>
    </param>
    <param name="ImageFile">
      <para>The name of the image  file.</para>
    </param>
    <param name="Type">
      <para>The type of symbol file. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>sfImage</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>A .exe or .dll file.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>sfDbg</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>A .dbg file.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>sfPdb</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>A .pdb file.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>sfMpd</b>
                </description>
              </item>
              <item>
                <description>3</description>
              </item>
            </list>
          </description>
          <description>
            <para>Reserved.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="SymbolFile">
      <para>A pointer to a null-terminated string that receives the name of the symbol file.</para>
    </param>
    <param name="cSymbolFile">
      <para>The size of the <i>SymbolFile</i> buffer, in characters.</para>
    </param>
    <param name="DbgFile">
      <para>A pointer to a buffer that receives the fully qualified path to the symbol file. This buffer must be at least MAX_PATH characters.</para>
    </param>
    <param name="cDbgFile">
      <para>The size of the <i>DbgFile</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the server locates a valid symbol file, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b> and
<see cref="GetLastError" /> returns a value that indicates why the symbol file was not returned.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymGetSymbolFile as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetSymbolFileW">
    <summary>
      <para>Locates a symbol file in the specified symbol path.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
      <para>If this handle is 0, <i>SymPath</i> cannot be <b>NULL</b>. Use this option to load a symbol file without calling <see cref="SymInitialize" /> or <see cref="SymCleanup" />.</para>
    </param>
    <param name="SymPath">
      <para>The symbol path. If this parameter is <b>NULL</b> or an empty string, the function uses the symbol path set using the
<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</para>
    </param>
    <param name="ImageFile">
      <para>The name of the image  file.</para>
    </param>
    <param name="Type">
      <para>The type of symbol file. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>sfImage</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>A .exe or .dll file.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>sfDbg</b>
                </description>
              </item>
              <item>
                <description>1</description>
              </item>
            </list>
          </description>
          <description>
            <para>A .dbg file.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>sfPdb</b>
                </description>
              </item>
              <item>
                <description>2</description>
              </item>
            </list>
          </description>
          <description>
            <para>A .pdb file.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>sfMpd</b>
                </description>
              </item>
              <item>
                <description>3</description>
              </item>
            </list>
          </description>
          <description>
            <para>Reserved.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="SymbolFile">
      <para>A pointer to a null-terminated string that receives the name of the symbol file.</para>
    </param>
    <param name="cSymbolFile">
      <para>The size of the <i>SymbolFile</i> buffer, in characters.</para>
    </param>
    <param name="DbgFile">
      <para>A pointer to a buffer that receives the fully qualified path to the symbol file. This buffer must be at least MAX_PATH characters.</para>
    </param>
    <param name="cDbgFile">
      <para>The size of the <i>DbgFile</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the server locates a valid symbol file, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b> and
<see cref="GetLastError" /> returns a value that indicates why the symbol file was not returned.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymGetSymbolFile as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetSymFromAddr">
    <summary>
      <para>Locates the symbol for the specified address.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymFromAddr" />.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dwAddr">
      <para>The address for which a symbol is to be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol (the beginning of the symbol plus the symbol size), the symbol is found.</para>
    </param>
    <param name="pdwDisplacement">
      <para>The displacement from the beginning of the symbol, or zero.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to an
<see cref="IMAGEHLP_SYMBOL64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetSymFromAddr64</b> function locates the symbol for a specified address. The modules are searched for the one the address belongs to. When the module is found, its symbol table is searched for a match. When the symbol is found, the symbol information is copied into the <i>Symbol</i> buffer provided by the caller. The caller must allocate the <i>Symbol</i> buffer properly and fill in the required parameters in the
<see cref="IMAGEHLP_SYMBOL64" /> structure before calling
<b>SymGetSymFromAddr64</b>.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymGetSymFromAddr</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetSymFromAddr</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetSymFromAddr SymGetSymFromAddr64
#else
BOOL
IMAGEAPI
SymGetSymFromAddr(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out_opt PDWORD pdwDisplacement,
    __inout PIMAGEHLP_SYMBOL Symbol
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_SYMBOL64" />
    <seealso cref="SymFromAddr" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetSymFromAddr64">
    <summary>
      <para>Locates the symbol for the specified address.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymFromAddr" />.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dwAddr">
      <para>The address for which a symbol is to be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol (the beginning of the symbol plus the symbol size), the symbol is found.</para>
    </param>
    <param name="pdwDisplacement">
      <para>The displacement from the beginning of the symbol, or zero.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to an
<see cref="IMAGEHLP_SYMBOL64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetSymFromAddr64</b> function locates the symbol for a specified address. The modules are searched for the one the address belongs to. When the module is found, its symbol table is searched for a match. When the symbol is found, the symbol information is copied into the <i>Symbol</i> buffer provided by the caller. The caller must allocate the <i>Symbol</i> buffer properly and fill in the required parameters in the
<see cref="IMAGEHLP_SYMBOL64" /> structure before calling
<b>SymGetSymFromAddr64</b>.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymGetSymFromAddr</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetSymFromAddr</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetSymFromAddr SymGetSymFromAddr64
#else
BOOL
IMAGEAPI
SymGetSymFromAddr(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out_opt PDWORD pdwDisplacement,
    __inout PIMAGEHLP_SYMBOL Symbol
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_SYMBOL64" />
    <seealso cref="SymFromAddr" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetSymFromAddr">
    <summary>
      <para>Locates the symbol for the specified address.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymFromAddr" />.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="qwAddr">
      <para>The address for which a symbol is to be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol (the beginning of the symbol plus the symbol size), the symbol is found.</para>
    </param>
    <param name="pdwDisplacement">
      <para>The displacement from the beginning of the symbol, or zero.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to an
<see cref="IMAGEHLP_SYMBOL64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetSymFromAddr64</b> function locates the symbol for a specified address. The modules are searched for the one the address belongs to. When the module is found, its symbol table is searched for a match. When the symbol is found, the symbol information is copied into the <i>Symbol</i> buffer provided by the caller. The caller must allocate the <i>Symbol</i> buffer properly and fill in the required parameters in the
<see cref="IMAGEHLP_SYMBOL64" /> structure before calling
<b>SymGetSymFromAddr64</b>.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymGetSymFromAddr</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetSymFromAddr</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetSymFromAddr SymGetSymFromAddr64
#else
BOOL
IMAGEAPI
SymGetSymFromAddr(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out_opt PDWORD pdwDisplacement,
    __inout PIMAGEHLP_SYMBOL Symbol
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_SYMBOL64" />
    <seealso cref="SymFromAddr" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetSymFromAddr64">
    <summary>
      <para>Locates the symbol for the specified address.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymFromAddr" />.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="qwAddr">
      <para>The address for which a symbol is to be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol (the beginning of the symbol plus the symbol size), the symbol is found.</para>
    </param>
    <param name="pdwDisplacement">
      <para>The displacement from the beginning of the symbol, or zero.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to an
<see cref="IMAGEHLP_SYMBOL64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetSymFromAddr64</b> function locates the symbol for a specified address. The modules are searched for the one the address belongs to. When the module is found, its symbol table is searched for a match. When the symbol is found, the symbol information is copied into the <i>Symbol</i> buffer provided by the caller. The caller must allocate the <i>Symbol</i> buffer properly and fill in the required parameters in the
<see cref="IMAGEHLP_SYMBOL64" /> structure before calling
<b>SymGetSymFromAddr64</b>.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymGetSymFromAddr</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetSymFromAddr</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetSymFromAddr SymGetSymFromAddr64
#else
BOOL
IMAGEAPI
SymGetSymFromAddr(
    __in HANDLE hProcess,
    __in DWORD dwAddr,
    __out_opt PDWORD pdwDisplacement,
    __inout PIMAGEHLP_SYMBOL Symbol
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_SYMBOL64" />
    <seealso cref="SymFromAddr" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetSymFromName">
    <summary>
      <para>Locates a symbol for the specified name.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymFromName" />.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Name">
      <para>The symbol name for which a symbol is to be located.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to an
<see cref="IMAGEHLP_SYMBOL64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetSymFromName64</b> function is used to locate a symbol for a specified name. The name can contain a module prefix that isolates the symbol search to a single module's symbol table.</para>
      <para>The module prefix is in the form of "<i>module</i>!". The "!" character is the delimiter between the module name and the symbol name. If there is no module prefix, then the search is performed on each module's symbol table in a linear manner, beginning with the first module that is loaded.</para>
      <para>Using the module prefix is preferable for two reasons. First, the symbol search occurs much faster. Second, when deferred symbol loading is turned on, the search causes symbols to be loaded for each module that is searched. When the symbol is found, the symbol information is copied into the <i>Symbol</i> buffer provided by the caller. The caller must allocate the <i>Symbol</i> buffer properly and fill in the required parameters in the
<see cref="IMAGEHLP_SYMBOL64" /> structure before calling
<b>SymGetSymFromName64</b>.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymGetSymFromName</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetSymFromName</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetSymFromName SymGetSymFromName64
#else
BOOL
IMAGEAPI
SymGetSymFromName(
    __in HANDLE hProcess,
    __in PCSTR Name,
    __inout PIMAGEHLP_SYMBOL Symbol
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_SYMBOL64" />
    <seealso cref="SymFromName" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetSymFromName64">
    <summary>
      <para>Locates a symbol for the specified name.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymFromName" />.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Name">
      <para>The symbol name for which a symbol is to be located.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to an
<see cref="IMAGEHLP_SYMBOL64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetSymFromName64</b> function is used to locate a symbol for a specified name. The name can contain a module prefix that isolates the symbol search to a single module's symbol table.</para>
      <para>The module prefix is in the form of "<i>module</i>!". The "!" character is the delimiter between the module name and the symbol name. If there is no module prefix, then the search is performed on each module's symbol table in a linear manner, beginning with the first module that is loaded.</para>
      <para>Using the module prefix is preferable for two reasons. First, the symbol search occurs much faster. Second, when deferred symbol loading is turned on, the search causes symbols to be loaded for each module that is searched. When the symbol is found, the symbol information is copied into the <i>Symbol</i> buffer provided by the caller. The caller must allocate the <i>Symbol</i> buffer properly and fill in the required parameters in the
<see cref="IMAGEHLP_SYMBOL64" /> structure before calling
<b>SymGetSymFromName64</b>.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymGetSymFromName</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetSymFromName</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetSymFromName SymGetSymFromName64
#else
BOOL
IMAGEAPI
SymGetSymFromName(
    __in HANDLE hProcess,
    __in PCSTR Name,
    __inout PIMAGEHLP_SYMBOL Symbol
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_SYMBOL64" />
    <seealso cref="SymFromName" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetSymFromName">
    <summary>
      <para>Locates a symbol for the specified name.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymFromName" />.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Name">
      <para>The symbol name for which a symbol is to be located.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to an
<see cref="IMAGEHLP_SYMBOL64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetSymFromName64</b> function is used to locate a symbol for a specified name. The name can contain a module prefix that isolates the symbol search to a single module's symbol table.</para>
      <para>The module prefix is in the form of "<i>module</i>!". The "!" character is the delimiter between the module name and the symbol name. If there is no module prefix, then the search is performed on each module's symbol table in a linear manner, beginning with the first module that is loaded.</para>
      <para>Using the module prefix is preferable for two reasons. First, the symbol search occurs much faster. Second, when deferred symbol loading is turned on, the search causes symbols to be loaded for each module that is searched. When the symbol is found, the symbol information is copied into the <i>Symbol</i> buffer provided by the caller. The caller must allocate the <i>Symbol</i> buffer properly and fill in the required parameters in the
<see cref="IMAGEHLP_SYMBOL64" /> structure before calling
<b>SymGetSymFromName64</b>.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymGetSymFromName</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetSymFromName</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetSymFromName SymGetSymFromName64
#else
BOOL
IMAGEAPI
SymGetSymFromName(
    __in HANDLE hProcess,
    __in PCSTR Name,
    __inout PIMAGEHLP_SYMBOL Symbol
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_SYMBOL64" />
    <seealso cref="SymFromName" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetSymFromName64">
    <summary>
      <para>Locates a symbol for the specified name.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymFromName" />.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Name">
      <para>The symbol name for which a symbol is to be located.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to an
<see cref="IMAGEHLP_SYMBOL64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetSymFromName64</b> function is used to locate a symbol for a specified name. The name can contain a module prefix that isolates the symbol search to a single module's symbol table.</para>
      <para>The module prefix is in the form of "<i>module</i>!". The "!" character is the delimiter between the module name and the symbol name. If there is no module prefix, then the search is performed on each module's symbol table in a linear manner, beginning with the first module that is loaded.</para>
      <para>Using the module prefix is preferable for two reasons. First, the symbol search occurs much faster. Second, when deferred symbol loading is turned on, the search causes symbols to be loaded for each module that is searched. When the symbol is found, the symbol information is copied into the <i>Symbol</i> buffer provided by the caller. The caller must allocate the <i>Symbol</i> buffer properly and fill in the required parameters in the
<see cref="IMAGEHLP_SYMBOL64" /> structure before calling
<b>SymGetSymFromName64</b>.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymGetSymFromName</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetSymFromName</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetSymFromName SymGetSymFromName64
#else
BOOL
IMAGEAPI
SymGetSymFromName(
    __in HANDLE hProcess,
    __in PCSTR Name,
    __inout PIMAGEHLP_SYMBOL Symbol
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_SYMBOL64" />
    <seealso cref="SymFromName" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetSymNext">
    <summary>
      <para>Retrieves the symbol information for the next symbol.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymNext" />.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to an
<see cref="IMAGEHLP_SYMBOL64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetSymNext64</b> function requires that the
<see cref="IMAGEHLP_SYMBOL64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetSymFromAddr64" /> or
<see cref="SymGetSymFromName64" /> function. This structure is filled with the symbol information for the next symbol in sequence by virtual address.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <b>SymGetSymNextW64</b> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetSymNextW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOLW64 Symbol
    );
</code>
      <para>This function supersedes the <b>SymGetSymNext</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetSymNext</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetSymNext SymGetSymNext64
#define SymGetSymNextW SymGetSymNextW64
#else
BOOL
IMAGEAPI
SymGetSymNext(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOL Symbol
    );

BOOL
IMAGEAPI
SymGetSymNextW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOLW Symbol
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_SYMBOL64" />
    <seealso cref="SymGetSymFromAddr64" />
    <seealso cref="SymGetSymFromName64" />
    <seealso cref="SymGetSymPrev64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetSymNext64">
    <summary>
      <para>Retrieves the symbol information for the next symbol.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymNext" />.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to an
<see cref="IMAGEHLP_SYMBOL64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetSymNext64</b> function requires that the
<see cref="IMAGEHLP_SYMBOL64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetSymFromAddr64" /> or
<see cref="SymGetSymFromName64" /> function. This structure is filled with the symbol information for the next symbol in sequence by virtual address.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <b>SymGetSymNextW64</b> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetSymNextW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOLW64 Symbol
    );
</code>
      <para>This function supersedes the <b>SymGetSymNext</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetSymNext</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetSymNext SymGetSymNext64
#define SymGetSymNextW SymGetSymNextW64
#else
BOOL
IMAGEAPI
SymGetSymNext(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOL Symbol
    );

BOOL
IMAGEAPI
SymGetSymNextW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOLW Symbol
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_SYMBOL64" />
    <seealso cref="SymGetSymFromAddr64" />
    <seealso cref="SymGetSymFromName64" />
    <seealso cref="SymGetSymPrev64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetSymNext">
    <summary>
      <para>Retrieves the symbol information for the next symbol.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymNext" />.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to an
<see cref="IMAGEHLP_SYMBOL64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetSymNext64</b> function requires that the
<see cref="IMAGEHLP_SYMBOL64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetSymFromAddr64" /> or
<see cref="SymGetSymFromName64" /> function. This structure is filled with the symbol information for the next symbol in sequence by virtual address.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <b>SymGetSymNextW64</b> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetSymNextW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOLW64 Symbol
    );
</code>
      <para>This function supersedes the <b>SymGetSymNext</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetSymNext</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetSymNext SymGetSymNext64
#define SymGetSymNextW SymGetSymNextW64
#else
BOOL
IMAGEAPI
SymGetSymNext(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOL Symbol
    );

BOOL
IMAGEAPI
SymGetSymNextW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOLW Symbol
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_SYMBOL64" />
    <seealso cref="SymGetSymFromAddr64" />
    <seealso cref="SymGetSymFromName64" />
    <seealso cref="SymGetSymPrev64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetSymNext64">
    <summary>
      <para>Retrieves the symbol information for the next symbol.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymNext" />.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to an
<see cref="IMAGEHLP_SYMBOL64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetSymNext64</b> function requires that the
<see cref="IMAGEHLP_SYMBOL64" /> structure have valid data, presumably obtained from a call to the
<see cref="SymGetSymFromAddr64" /> or
<see cref="SymGetSymFromName64" /> function. This structure is filled with the symbol information for the next symbol in sequence by virtual address.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>. <b>SymGetSymNextW64</b> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetSymNextW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOLW64 Symbol
    );
</code>
      <para>This function supersedes the <b>SymGetSymNext</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetSymNext</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetSymNext SymGetSymNext64
#define SymGetSymNextW SymGetSymNextW64
#else
BOOL
IMAGEAPI
SymGetSymNext(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOL Symbol
    );

BOOL
IMAGEAPI
SymGetSymNextW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOLW Symbol
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_SYMBOL64" />
    <seealso cref="SymGetSymFromAddr64" />
    <seealso cref="SymGetSymFromName64" />
    <seealso cref="SymGetSymPrev64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetSymPrev">
    <summary>
      <para>Retrieves the symbol information for the previous symbol.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymPrev" />.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to an
<see cref="IMAGEHLP_SYMBOL64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetSymPrev64</b> function requires the <see cref="IMAGEHLP_SYMBOL64" /> structure to have valid data, presumably obtained from a call to the
<see cref="SymGetSymFromAddr64" /> or
<see cref="SymGetSymFromName64" /> function. This structure is filled in with the symbol information for the previous symbol in sequence by virtual address.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetSymPrevW64</b> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetSymPrevW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOLW64 Symbol
    );
</code>
      <para>This function supersedes the <b>SymGetSymPrev</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetSymPrev</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetSymPrev SymGetSymPrev64
#define SymGetSymPrevW SymGetSymPrevW64
#else
BOOL
IMAGEAPI
SymGetSymPrev(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOL Symbol
    );

BOOL
IMAGEAPI
SymGetSymPrevW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOLW Symbol
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_SYMBOL64" />
    <seealso cref="SymGetSymFromAddr64" />
    <seealso cref="SymGetSymFromName64" />
    <seealso cref="SymGetSymNext64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetSymPrev64">
    <summary>
      <para>Retrieves the symbol information for the previous symbol.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymPrev" />.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to an
<see cref="IMAGEHLP_SYMBOL64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetSymPrev64</b> function requires the <see cref="IMAGEHLP_SYMBOL64" /> structure to have valid data, presumably obtained from a call to the
<see cref="SymGetSymFromAddr64" /> or
<see cref="SymGetSymFromName64" /> function. This structure is filled in with the symbol information for the previous symbol in sequence by virtual address.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetSymPrevW64</b> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetSymPrevW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOLW64 Symbol
    );
</code>
      <para>This function supersedes the <b>SymGetSymPrev</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetSymPrev</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetSymPrev SymGetSymPrev64
#define SymGetSymPrevW SymGetSymPrevW64
#else
BOOL
IMAGEAPI
SymGetSymPrev(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOL Symbol
    );

BOOL
IMAGEAPI
SymGetSymPrevW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOLW Symbol
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_SYMBOL64" />
    <seealso cref="SymGetSymFromAddr64" />
    <seealso cref="SymGetSymFromName64" />
    <seealso cref="SymGetSymNext64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetSymPrev">
    <summary>
      <para>Retrieves the symbol information for the previous symbol.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymPrev" />.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to an
<see cref="IMAGEHLP_SYMBOL64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetSymPrev64</b> function requires the <see cref="IMAGEHLP_SYMBOL64" /> structure to have valid data, presumably obtained from a call to the
<see cref="SymGetSymFromAddr64" /> or
<see cref="SymGetSymFromName64" /> function. This structure is filled in with the symbol information for the previous symbol in sequence by virtual address.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetSymPrevW64</b> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetSymPrevW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOLW64 Symbol
    );
</code>
      <para>This function supersedes the <b>SymGetSymPrev</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetSymPrev</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetSymPrev SymGetSymPrev64
#define SymGetSymPrevW SymGetSymPrevW64
#else
BOOL
IMAGEAPI
SymGetSymPrev(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOL Symbol
    );

BOOL
IMAGEAPI
SymGetSymPrevW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOLW Symbol
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_SYMBOL64" />
    <seealso cref="SymGetSymFromAddr64" />
    <seealso cref="SymGetSymFromName64" />
    <seealso cref="SymGetSymNext64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetSymPrev64">
    <summary>
      <para>Retrieves the symbol information for the previous symbol.
<b>Note</b>  This function is provided only for compatibility. Applications should use
<see cref="SymPrev" />.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to an
<see cref="IMAGEHLP_SYMBOL64" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymGetSymPrev64</b> function requires the <see cref="IMAGEHLP_SYMBOL64" /> structure to have valid data, presumably obtained from a call to the
<see cref="SymGetSymFromAddr64" /> or
<see cref="SymGetSymFromName64" /> function. This structure is filled in with the symbol information for the previous symbol in sequence by virtual address.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymGetSymPrevW64</b> is defined as follows in DbgHelp.h.</para>
      <code>BOOL
IMAGEAPI
SymGetSymPrevW64(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOLW64 Symbol
    );
</code>
      <para>This function supersedes the <b>SymGetSymPrev</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymGetSymPrev</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymGetSymPrev SymGetSymPrev64
#define SymGetSymPrevW SymGetSymPrevW64
#else
BOOL
IMAGEAPI
SymGetSymPrev(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOL Symbol
    );

BOOL
IMAGEAPI
SymGetSymPrevW(
    __in HANDLE hProcess,
    __inout PIMAGEHLP_SYMBOLW Symbol
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_SYMBOL64" />
    <seealso cref="SymGetSymFromAddr64" />
    <seealso cref="SymGetSymFromName64" />
    <seealso cref="SymGetSymNext64" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymGetTypeFromName">
    <summary>
      <para>Retrieves a type index for the specified type name.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="Name">
      <para>The name of the type.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure. The <b>TypeIndex</b> member contains the type index.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>To retrieve information about the type, pass the type index to the
<see cref="SymGetTypeInfo" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
    <seealso cref="SymGetTypeInfo" />
  </member>
  <member name="Windows.SymGetTypeFromNameW">
    <summary>
      <para>Retrieves a type index for the specified type name.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="Name">
      <para>The name of the type.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure. The <b>TypeIndex</b> member contains the type index.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>To retrieve information about the type, pass the type index to the
<see cref="SymGetTypeInfo" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
    <seealso cref="SymGetTypeInfo" />
  </member>
  <member name="Windows.SymGetTypeFromName">
    <summary>
      <para>Retrieves a type index for the specified type name.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="Name">
      <para>The name of the type.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure. The <b>TypeIndex</b> member contains the type index.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>To retrieve information about the type, pass the type index to the
<see cref="SymGetTypeInfo" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymGetTypeFromName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
    <seealso cref="SymGetTypeInfo" />
  </member>
  <member name="Windows.SymGetTypeFromNameW">
    <summary>
      <para>Retrieves a type index for the specified type name.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="Name">
      <para>The name of the type.</para>
    </param>
    <param name="Symbol">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure. The <b>TypeIndex</b> member contains the type index.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>To retrieve information about the type, pass the type index to the
<see cref="SymGetTypeInfo" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymGetTypeFromName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
    <seealso cref="SymGetTypeInfo" />
  </member>
  <member name="Windows.SymGetTypeInfo">
    <summary>
      <para>Retrieves type information for the specified type index. For larger queries, use the <see cref="SymGetTypeInfoEx" /> function.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="ModBase">
      <para>The base address of the module.</para>
    </param>
    <param name="TypeId">
      <para>The type index. (A number of functions return a type index in the <b>TypeIndex</b> member of the
<see cref="SYMBOL_INFO" /> structure.)</para>
    </param>
    <param name="GetType">
      <para>The information type. This parameter can be one of more of the values from the <see cref="IMAGEHLP_SYMBOL_TYPE_INFO" /> enumeration type.</para>
    </param>
    <param name="pInfo">
      <para>The data. The format of the data depends on the value of the <i>GetType</i> parameter.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>For more details on the type information, see the documentation for the PDB format.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_SYMBOL_TYPE_INFO" />
    <seealso cref="SymGetTypeFromName" />
    <seealso cref="SymGetTypeInfoEx" />
  </member>
  <member name="Windows.SymGetTypeInfoEx">
    <summary>
      <para>Retrieves multiple pieces of type information.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="ModBase">
      <para>The base address of the module.</para>
    </param>
    <param name="Params">
      <para>A pointer to an <see cref="IMAGEHLP_GET_TYPE_INFO_PARAMS" /> structure that specifies input and output information for the query.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_GET_TYPE_INFO_PARAMS" />
    <seealso cref="SymGetTypeFromName" />
  </member>
  <member name="Windows.SymInitialize">
    <summary>
      <para>Initializes the symbol handler for a process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle that identifies the caller. This value should be unique and nonzero, but need not be a process handle. However, if you do use a process handle, be sure to use the correct handle. If the application is a debugger, use the process handle for the process being debugged. Do not use the handle returned by <see cref="GetCurrentProcess" /> when debugging another process, because calling functions like <see cref="SymLoadModuleEx" /> can have unexpected results.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="UserSearchPath">
      <para>The path, or series of paths separated by a semicolon (;), that is used to search for symbol files. If this parameter is <b>NULL</b>, the library attempts to form a symbol path from the following sources:</para>
      <list type="bullet">
        <item>
          <description>The current working directory of the application</description>
        </item>
        <item>
          <description>The _NT_SYMBOL_PATH environment variable</description>
        </item>
        <item>
          <description>The _NT_ALTERNATE_SYMBOL_PATH environment variable</description>
        </item>
      </list>
      <para>Note that the search path can also be set using the <see cref="SymSetSearchPath" /> function.</para>
    </param>
    <param name="fInvadeProcess">
      <para>If this value is <b>TRUE</b>, enumerates the loaded modules for the process and effectively calls the
<see cref="SymLoadModule64" /> function for each module.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymInitialize</b> function is used to initialize the symbol handler for a process. In the context of the symbol handler, a process is a convenient object to use when collecting symbol information. Usually, symbol handlers are used by debuggers and other tools that need to load symbols for a process being debugged.</para>
      <para>The  handle passed to
<b>SymInitialize</b> must be the same value passed to all other symbol handler functions called by the process. It is the  handle that the functions use to identify the caller and locate the correct symbol information. When you have finished using the symbol information, call the
<see cref="SymCleanup" /> function to deallocate all resources associated with the process for which symbols are loaded.</para>
      <para>The search for symbols files is performed recursively for all paths specified in the <i>UserSearchPath</i> parameter. Therefore, if you specify the root directory in a search, the whole drive is searched, which can take significant time. Note that the directory that contains the executable file for the process is not automatically part of the search path. To include this directory in the search path, call the
<see cref="GetModuleFileNameEx" /> function, then add the path returned to <i>UserSearchPath</i>.</para>
      <para>A process that calls <b>SymInitialize</b> should not call it again unless it calls <see cref="SymCleanup" /> first. If the call to <b>SymInitialize</b> set <i>fInvadeProcess</i> to <b>TRUE</b> and you simply need to reload the module list, use the <see cref="SymRefreshModuleList" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, call
<b>SymInitialize</b> only when your process starts and
<see cref="SymCleanup" /> only when your process ends. It is not necessary for each thread in the process to call these functions.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/initializing-the-symbol-handler">Initializing the Symbol Handler</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="GetModuleFileNameEx" />
    <seealso cref="SymCleanup" />
    <seealso cref="SymEnumProcesses" />
    <seealso cref="SymLoadModule64" />
    <seealso cref="SymRefreshModuleList" />
    <seealso cref="SymSetSearchPath" />
  </member>
  <member name="Windows.SymInitializeW">
    <summary>
      <para>Initializes the symbol handler for a process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle that identifies the caller. This value should be unique and nonzero, but need not be a process handle. However, if you do use a process handle, be sure to use the correct handle. If the application is a debugger, use the process handle for the process being debugged. Do not use the handle returned by <see cref="GetCurrentProcess" /> when debugging another process, because calling functions like <see cref="SymLoadModuleEx" /> can have unexpected results.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="UserSearchPath">
      <para>The path, or series of paths separated by a semicolon (;), that is used to search for symbol files. If this parameter is <b>NULL</b>, the library attempts to form a symbol path from the following sources:</para>
      <list type="bullet">
        <item>
          <description>The current working directory of the application</description>
        </item>
        <item>
          <description>The _NT_SYMBOL_PATH environment variable</description>
        </item>
        <item>
          <description>The _NT_ALTERNATE_SYMBOL_PATH environment variable</description>
        </item>
      </list>
      <para>Note that the search path can also be set using the <see cref="SymSetSearchPath" /> function.</para>
    </param>
    <param name="fInvadeProcess">
      <para>If this value is <b>TRUE</b>, enumerates the loaded modules for the process and effectively calls the
<see cref="SymLoadModule64" /> function for each module.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymInitialize</b> function is used to initialize the symbol handler for a process. In the context of the symbol handler, a process is a convenient object to use when collecting symbol information. Usually, symbol handlers are used by debuggers and other tools that need to load symbols for a process being debugged.</para>
      <para>The  handle passed to
<b>SymInitialize</b> must be the same value passed to all other symbol handler functions called by the process. It is the  handle that the functions use to identify the caller and locate the correct symbol information. When you have finished using the symbol information, call the
<see cref="SymCleanup" /> function to deallocate all resources associated with the process for which symbols are loaded.</para>
      <para>The search for symbols files is performed recursively for all paths specified in the <i>UserSearchPath</i> parameter. Therefore, if you specify the root directory in a search, the whole drive is searched, which can take significant time. Note that the directory that contains the executable file for the process is not automatically part of the search path. To include this directory in the search path, call the
<see cref="GetModuleFileNameEx" /> function, then add the path returned to <i>UserSearchPath</i>.</para>
      <para>A process that calls <b>SymInitialize</b> should not call it again unless it calls <see cref="SymCleanup" /> first. If the call to <b>SymInitialize</b> set <i>fInvadeProcess</i> to <b>TRUE</b> and you simply need to reload the module list, use the <see cref="SymRefreshModuleList" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, call
<b>SymInitialize</b> only when your process starts and
<see cref="SymCleanup" /> only when your process ends. It is not necessary for each thread in the process to call these functions.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/initializing-the-symbol-handler">Initializing the Symbol Handler</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="GetModuleFileNameEx" />
    <seealso cref="SymCleanup" />
    <seealso cref="SymEnumProcesses" />
    <seealso cref="SymLoadModule64" />
    <seealso cref="SymRefreshModuleList" />
    <seealso cref="SymSetSearchPath" />
  </member>
  <member name="Windows.SymInitialize">
    <summary>
      <para>Initializes the symbol handler for a process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle that identifies the caller. This value should be unique and nonzero, but need not be a process handle. However, if you do use a process handle, be sure to use the correct handle. If the application is a debugger, use the process handle for the process being debugged. Do not use the handle returned by <see cref="GetCurrentProcess" /> when debugging another process, because calling functions like <see cref="SymLoadModuleEx" /> can have unexpected results.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="UserSearchPath">
      <para>The path, or series of paths separated by a semicolon (;), that is used to search for symbol files. If this parameter is <b>NULL</b>, the library attempts to form a symbol path from the following sources:</para>
      <list type="bullet">
        <item>
          <description>The current working directory of the application</description>
        </item>
        <item>
          <description>The _NT_SYMBOL_PATH environment variable</description>
        </item>
        <item>
          <description>The _NT_ALTERNATE_SYMBOL_PATH environment variable</description>
        </item>
      </list>
      <para>Note that the search path can also be set using the <see cref="SymSetSearchPath" /> function.</para>
    </param>
    <param name="fInvadeProcess">
      <para>If this value is <b>TRUE</b>, enumerates the loaded modules for the process and effectively calls the
<see cref="SymLoadModule64" /> function for each module.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymInitialize</b> function is used to initialize the symbol handler for a process. In the context of the symbol handler, a process is a convenient object to use when collecting symbol information. Usually, symbol handlers are used by debuggers and other tools that need to load symbols for a process being debugged.</para>
      <para>The  handle passed to
<b>SymInitialize</b> must be the same value passed to all other symbol handler functions called by the process. It is the  handle that the functions use to identify the caller and locate the correct symbol information. When you have finished using the symbol information, call the
<see cref="SymCleanup" /> function to deallocate all resources associated with the process for which symbols are loaded.</para>
      <para>The search for symbols files is performed recursively for all paths specified in the <i>UserSearchPath</i> parameter. Therefore, if you specify the root directory in a search, the whole drive is searched, which can take significant time. Note that the directory that contains the executable file for the process is not automatically part of the search path. To include this directory in the search path, call the
<see cref="GetModuleFileNameEx" /> function, then add the path returned to <i>UserSearchPath</i>.</para>
      <para>A process that calls <b>SymInitialize</b> should not call it again unless it calls <see cref="SymCleanup" /> first. If the call to <b>SymInitialize</b> set <i>fInvadeProcess</i> to <b>TRUE</b> and you simply need to reload the module list, use the <see cref="SymRefreshModuleList" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, call
<b>SymInitialize</b> only when your process starts and
<see cref="SymCleanup" /> only when your process ends. It is not necessary for each thread in the process to call these functions.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/initializing-the-symbol-handler">Initializing the Symbol Handler</a>.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymInitialize as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="GetModuleFileNameEx" />
    <seealso cref="SymCleanup" />
    <seealso cref="SymEnumProcesses" />
    <seealso cref="SymLoadModule64" />
    <seealso cref="SymRefreshModuleList" />
    <seealso cref="SymSetSearchPath" />
  </member>
  <member name="Windows.SymInitializeW">
    <summary>
      <para>Initializes the symbol handler for a process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle that identifies the caller. This value should be unique and nonzero, but need not be a process handle. However, if you do use a process handle, be sure to use the correct handle. If the application is a debugger, use the process handle for the process being debugged. Do not use the handle returned by <see cref="GetCurrentProcess" /> when debugging another process, because calling functions like <see cref="SymLoadModuleEx" /> can have unexpected results.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="UserSearchPath">
      <para>The path, or series of paths separated by a semicolon (;), that is used to search for symbol files. If this parameter is <b>NULL</b>, the library attempts to form a symbol path from the following sources:</para>
      <list type="bullet">
        <item>
          <description>The current working directory of the application</description>
        </item>
        <item>
          <description>The _NT_SYMBOL_PATH environment variable</description>
        </item>
        <item>
          <description>The _NT_ALTERNATE_SYMBOL_PATH environment variable</description>
        </item>
      </list>
      <para>Note that the search path can also be set using the <see cref="SymSetSearchPath" /> function.</para>
    </param>
    <param name="fInvadeProcess">
      <para>If this value is <b>TRUE</b>, enumerates the loaded modules for the process and effectively calls the
<see cref="SymLoadModule64" /> function for each module.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymInitialize</b> function is used to initialize the symbol handler for a process. In the context of the symbol handler, a process is a convenient object to use when collecting symbol information. Usually, symbol handlers are used by debuggers and other tools that need to load symbols for a process being debugged.</para>
      <para>The  handle passed to
<b>SymInitialize</b> must be the same value passed to all other symbol handler functions called by the process. It is the  handle that the functions use to identify the caller and locate the correct symbol information. When you have finished using the symbol information, call the
<see cref="SymCleanup" /> function to deallocate all resources associated with the process for which symbols are loaded.</para>
      <para>The search for symbols files is performed recursively for all paths specified in the <i>UserSearchPath</i> parameter. Therefore, if you specify the root directory in a search, the whole drive is searched, which can take significant time. Note that the directory that contains the executable file for the process is not automatically part of the search path. To include this directory in the search path, call the
<see cref="GetModuleFileNameEx" /> function, then add the path returned to <i>UserSearchPath</i>.</para>
      <para>A process that calls <b>SymInitialize</b> should not call it again unless it calls <see cref="SymCleanup" /> first. If the call to <b>SymInitialize</b> set <i>fInvadeProcess</i> to <b>TRUE</b> and you simply need to reload the module list, use the <see cref="SymRefreshModuleList" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, call
<b>SymInitialize</b> only when your process starts and
<see cref="SymCleanup" /> only when your process ends. It is not necessary for each thread in the process to call these functions.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/initializing-the-symbol-handler">Initializing the Symbol Handler</a>.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymInitialize as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="GetModuleFileNameEx" />
    <seealso cref="SymCleanup" />
    <seealso cref="SymEnumProcesses" />
    <seealso cref="SymLoadModule64" />
    <seealso cref="SymRefreshModuleList" />
    <seealso cref="SymSetSearchPath" />
  </member>
  <member name="Windows.SymLoadModule">
    <summary>
      <para>Loads the symbol table.</para>
      <para>This function has been superseded by the <see cref="SymLoadModuleEx" /> function.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="hFile">
      <para>A handle to the file for the executable image. This argument is used mostly by debuggers, where the debugger passes the file handle obtained from a debugging event. A value of <b>NULL</b> indicates that <i>hFile</i> is not used.</para>
    </param>
    <param name="ImageName">
      <para>The name of the executable image. This name can contain a partial path, a full path, or no path at all. If the file cannot be located by the name provided, the symbol search path is used.</para>
    </param>
    <param name="ModuleName">
      <para>A shortcut name for the module. If the pointer value is <b>NULL</b>, the library creates a name using the base name of the symbol file.</para>
    </param>
    <param name="BaseOfDll">
      <para>The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an actual load address should use the real load address when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="SizeOfDll">
      <para>The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real size when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the base address of the loaded module.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
      <para>If the module is already loaded, the return value is zero and <see cref="GetLastError" /> returns <b>ERROR_SUCCESS</b>.</para>
    </returns>
    <remarks>
      <para>The symbol handler creates an entry for the module and if the deferred symbol loading option is turned off, an attempt is made to load the symbols. If deferred symbol loading is enabled, the module is marked as deferred and the symbols are not loaded until a reference is made to a symbol in the module.</para>
      <para>To unload the symbol table, use the
<see cref="SymUnloadModule64" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymLoadModule</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymLoadModule</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymLoadModule SymLoadModule64
#else
DWORD
IMAGEAPI
SymLoadModule(
    __in HANDLE hProcess,
    __in_opt HANDLE hFile,
    __in_opt PCSTR ImageName,
    __in_opt PCSTR ModuleName,
    __in DWORD BaseOfDll,
    __in DWORD SizeOfDll
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymUnloadModule64" />
  </member>
  <member name="Windows.SymLoadModule64">
    <summary>
      <para>Loads the symbol table.</para>
      <para>This function has been superseded by the <see cref="SymLoadModuleEx" /> function.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="hFile">
      <para>A handle to the file for the executable image. This argument is used mostly by debuggers, where the debugger passes the file handle obtained from a debugging event. A value of <b>NULL</b> indicates that <i>hFile</i> is not used.</para>
    </param>
    <param name="ImageName">
      <para>The name of the executable image. This name can contain a partial path, a full path, or no path at all. If the file cannot be located by the name provided, the symbol search path is used.</para>
    </param>
    <param name="ModuleName">
      <para>A shortcut name for the module. If the pointer value is <b>NULL</b>, the library creates a name using the base name of the symbol file.</para>
    </param>
    <param name="BaseOfDll">
      <para>The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an actual load address should use the real load address when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="SizeOfDll">
      <para>The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real size when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the base address of the loaded module.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
      <para>If the module is already loaded, the return value is zero and <see cref="GetLastError" /> returns <b>ERROR_SUCCESS</b>.</para>
    </returns>
    <remarks>
      <para>The symbol handler creates an entry for the module and if the deferred symbol loading option is turned off, an attempt is made to load the symbols. If deferred symbol loading is enabled, the module is marked as deferred and the symbols are not loaded until a reference is made to a symbol in the module.</para>
      <para>To unload the symbol table, use the
<see cref="SymUnloadModule64" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymLoadModule</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymLoadModule</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymLoadModule SymLoadModule64
#else
DWORD
IMAGEAPI
SymLoadModule(
    __in HANDLE hProcess,
    __in_opt HANDLE hFile,
    __in_opt PCSTR ImageName,
    __in_opt PCSTR ModuleName,
    __in DWORD BaseOfDll,
    __in DWORD SizeOfDll
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymUnloadModule64" />
  </member>
  <member name="Windows.SymLoadModule">
    <summary>
      <para>Loads the symbol table.</para>
      <para>This function has been superseded by the <see cref="SymLoadModuleEx" /> function.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="hFile">
      <para>A handle to the file for the executable image. This argument is used mostly by debuggers, where the debugger passes the file handle obtained from a debugging event. A value of <b>NULL</b> indicates that <i>hFile</i> is not used.</para>
    </param>
    <param name="ImageName">
      <para>The name of the executable image. This name can contain a partial path, a full path, or no path at all. If the file cannot be located by the name provided, the symbol search path is used.</para>
    </param>
    <param name="ModuleName">
      <para>A shortcut name for the module. If the pointer value is <b>NULL</b>, the library creates a name using the base name of the symbol file.</para>
    </param>
    <param name="BaseOfDll">
      <para>The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an actual load address should use the real load address when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="SizeOfDll">
      <para>The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real size when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the base address of the loaded module.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
      <para>If the module is already loaded, the return value is zero and <see cref="GetLastError" /> returns <b>ERROR_SUCCESS</b>.</para>
    </returns>
    <remarks>
      <para>The symbol handler creates an entry for the module and if the deferred symbol loading option is turned off, an attempt is made to load the symbols. If deferred symbol loading is enabled, the module is marked as deferred and the symbols are not loaded until a reference is made to a symbol in the module.</para>
      <para>To unload the symbol table, use the
<see cref="SymUnloadModule64" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymLoadModule</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymLoadModule</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymLoadModule SymLoadModule64
#else
DWORD
IMAGEAPI
SymLoadModule(
    __in HANDLE hProcess,
    __in_opt HANDLE hFile,
    __in_opt PCSTR ImageName,
    __in_opt PCSTR ModuleName,
    __in DWORD BaseOfDll,
    __in DWORD SizeOfDll
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymUnloadModule64" />
  </member>
  <member name="Windows.SymLoadModule64">
    <summary>
      <para>Loads the symbol table.</para>
      <para>This function has been superseded by the <see cref="SymLoadModuleEx" /> function.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="hFile">
      <para>A handle to the file for the executable image. This argument is used mostly by debuggers, where the debugger passes the file handle obtained from a debugging event. A value of <b>NULL</b> indicates that <i>hFile</i> is not used.</para>
    </param>
    <param name="ImageName">
      <para>The name of the executable image. This name can contain a partial path, a full path, or no path at all. If the file cannot be located by the name provided, the symbol search path is used.</para>
    </param>
    <param name="ModuleName">
      <para>A shortcut name for the module. If the pointer value is <b>NULL</b>, the library creates a name using the base name of the symbol file.</para>
    </param>
    <param name="BaseOfDll">
      <para>The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an actual load address should use the real load address when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="SizeOfDll">
      <para>The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real size when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the base address of the loaded module.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
      <para>If the module is already loaded, the return value is zero and <see cref="GetLastError" /> returns <b>ERROR_SUCCESS</b>.</para>
    </returns>
    <remarks>
      <para>The symbol handler creates an entry for the module and if the deferred symbol loading option is turned off, an attempt is made to load the symbols. If deferred symbol loading is enabled, the module is marked as deferred and the symbols are not loaded until a reference is made to a symbol in the module.</para>
      <para>To unload the symbol table, use the
<see cref="SymUnloadModule64" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymLoadModule</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymLoadModule</b> is defined as follows in DbgHelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymLoadModule SymLoadModule64
#else
DWORD
IMAGEAPI
SymLoadModule(
    __in HANDLE hProcess,
    __in_opt HANDLE hFile,
    __in_opt PCSTR ImageName,
    __in_opt PCSTR ModuleName,
    __in DWORD BaseOfDll,
    __in DWORD SizeOfDll
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymInitialize" />
    <seealso cref="SymUnloadModule64" />
  </member>
  <member name="Windows.SymLoadModuleEx">
    <summary>
      <para>Loads the symbol table for the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="hFile">
      <para>A handle to the file for the executable image. This argument is used mostly by debuggers, where the debugger passes the file handle obtained from a debugging event. A value of <b>NULL</b> indicates that <i>hFile</i> is not used.</para>
    </param>
    <param name="ImageName">
      <para>The name of the executable image. This name can contain a partial path, a full path, or no path at all. If the file cannot be located by the name provided, the symbol search path is used.</para>
    </param>
    <param name="ModuleName">
      <para>A shortcut name for the module. If the pointer value is <b>NULL</b>, the library creates a name using the base name of the symbol file.</para>
    </param>
    <param name="BaseOfDll">
      <para>The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an actual load address should use the real load address when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="DllSize">
      <para>The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real size when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="Data">
      <para>A pointer to a
<see cref="MODLOAD_DATA" /> structure that represents headers other than the standard PE header. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="Flags">
      <para>This parameter can be zero or one or more of the following values. If this parameter is zero, the function loads the modules and the symbols for the module.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SLMFLAG_NO_SYMBOLS</b>
                </description>
              </item>
              <item>
                <description>0x4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Loads the module but not the symbols for the module.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SLMFLAG_VIRTUAL</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a virtual module named <i>ModuleName</i> at the address specified in <i>BaseOfDll</i>. To add symbols to this module, call the
<see cref="SymAddSymbol" /> function.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the base address of the loaded module.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
      <para>If the module is already loaded, the return value is zero and <see cref="GetLastError" /> returns ERROR_SUCCESS.</para>
    </returns>
    <remarks>
      <para>The symbol handler creates an entry for the module and if the deferred symbol loading option is turned off, an attempt is made to load the symbols. If deferred symbol loading is enabled, the module is marked as deferred and the symbols are not loaded until a reference is made to a symbol in the module. Therefore, you should always call the <see cref="SymGetModuleInfo64" /> function after calling <b>SymLoadModuleEx</b>.</para>
      <para>To unload the symbol table, use the
<see cref="SymUnloadModule64" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/loading-a-symbol-module">Loading a Symbol Module</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="MODLOAD_DATA" />
    <seealso cref="SymAddSymbol" />
    <seealso cref="SymUnloadModule64" />
  </member>
  <member name="Windows.SymLoadModuleExW">
    <summary>
      <para>Loads the symbol table for the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="hFile">
      <para>A handle to the file for the executable image. This argument is used mostly by debuggers, where the debugger passes the file handle obtained from a debugging event. A value of <b>NULL</b> indicates that <i>hFile</i> is not used.</para>
    </param>
    <param name="ImageName">
      <para>The name of the executable image. This name can contain a partial path, a full path, or no path at all. If the file cannot be located by the name provided, the symbol search path is used.</para>
    </param>
    <param name="ModuleName">
      <para>A shortcut name for the module. If the pointer value is <b>NULL</b>, the library creates a name using the base name of the symbol file.</para>
    </param>
    <param name="BaseOfDll">
      <para>The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an actual load address should use the real load address when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="DllSize">
      <para>The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real size when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="Data">
      <para>A pointer to a
<see cref="MODLOAD_DATA" /> structure that represents headers other than the standard PE header. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="Flags">
      <para>This parameter can be zero or one or more of the following values. If this parameter is zero, the function loads the modules and the symbols for the module.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SLMFLAG_NO_SYMBOLS</b>
                </description>
              </item>
              <item>
                <description>0x4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Loads the module but not the symbols for the module.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SLMFLAG_VIRTUAL</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a virtual module named <i>ModuleName</i> at the address specified in <i>BaseOfDll</i>. To add symbols to this module, call the
<see cref="SymAddSymbol" /> function.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the base address of the loaded module.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
      <para>If the module is already loaded, the return value is zero and <see cref="GetLastError" /> returns ERROR_SUCCESS.</para>
    </returns>
    <remarks>
      <para>The symbol handler creates an entry for the module and if the deferred symbol loading option is turned off, an attempt is made to load the symbols. If deferred symbol loading is enabled, the module is marked as deferred and the symbols are not loaded until a reference is made to a symbol in the module. Therefore, you should always call the <see cref="SymGetModuleInfo64" /> function after calling <b>SymLoadModuleEx</b>.</para>
      <para>To unload the symbol table, use the
<see cref="SymUnloadModule64" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/loading-a-symbol-module">Loading a Symbol Module</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="MODLOAD_DATA" />
    <seealso cref="SymAddSymbol" />
    <seealso cref="SymUnloadModule64" />
  </member>
  <member name="Windows.SymLoadModuleEx">
    <summary>
      <para>Loads the symbol table for the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="hFile">
      <para>A handle to the file for the executable image. This argument is used mostly by debuggers, where the debugger passes the file handle obtained from a debugging event. A value of <b>NULL</b> indicates that <i>hFile</i> is not used.</para>
    </param>
    <param name="ImageName">
      <para>The name of the executable image. This name can contain a partial path, a full path, or no path at all. If the file cannot be located by the name provided, the symbol search path is used.</para>
    </param>
    <param name="ModuleName">
      <para>A shortcut name for the module. If the pointer value is <b>NULL</b>, the library creates a name using the base name of the symbol file.</para>
    </param>
    <param name="BaseOfDll">
      <para>The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an actual load address should use the real load address when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="DllSize">
      <para>The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real size when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="Data">
      <para>A pointer to a
<see cref="MODLOAD_DATA" /> structure that represents headers other than the standard PE header. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="Flags">
      <para>This parameter can be zero or one or more of the following values. If this parameter is zero, the function loads the modules and the symbols for the module.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SLMFLAG_NO_SYMBOLS</b>
                </description>
              </item>
              <item>
                <description>0x4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Loads the module but not the symbols for the module.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SLMFLAG_VIRTUAL</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a virtual module named <i>ModuleName</i> at the address specified in <i>BaseOfDll</i>. To add symbols to this module, call the
<see cref="SymAddSymbol" /> function.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the base address of the loaded module.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
      <para>If the module is already loaded, the return value is zero and <see cref="GetLastError" /> returns ERROR_SUCCESS.</para>
    </returns>
    <remarks>
      <para>The symbol handler creates an entry for the module and if the deferred symbol loading option is turned off, an attempt is made to load the symbols. If deferred symbol loading is enabled, the module is marked as deferred and the symbols are not loaded until a reference is made to a symbol in the module. Therefore, you should always call the <see cref="SymGetModuleInfo64" /> function after calling <b>SymLoadModuleEx</b>.</para>
      <para>To unload the symbol table, use the
<see cref="SymUnloadModule64" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/loading-a-symbol-module">Loading a Symbol Module</a>.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymLoadModuleEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="MODLOAD_DATA" />
    <seealso cref="SymAddSymbol" />
    <seealso cref="SymUnloadModule64" />
  </member>
  <member name="Windows.SymLoadModuleExW">
    <summary>
      <para>Loads the symbol table for the specified module.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="hFile">
      <para>A handle to the file for the executable image. This argument is used mostly by debuggers, where the debugger passes the file handle obtained from a debugging event. A value of <b>NULL</b> indicates that <i>hFile</i> is not used.</para>
    </param>
    <param name="ImageName">
      <para>The name of the executable image. This name can contain a partial path, a full path, or no path at all. If the file cannot be located by the name provided, the symbol search path is used.</para>
    </param>
    <param name="ModuleName">
      <para>A shortcut name for the module. If the pointer value is <b>NULL</b>, the library creates a name using the base name of the symbol file.</para>
    </param>
    <param name="BaseOfDll">
      <para>The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an actual load address should use the real load address when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="DllSize">
      <para>The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real size when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="Data">
      <para>A pointer to a
<see cref="MODLOAD_DATA" /> structure that represents headers other than the standard PE header. This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="Flags">
      <para>This parameter can be zero or one or more of the following values. If this parameter is zero, the function loads the modules and the symbols for the module.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SLMFLAG_NO_SYMBOLS</b>
                </description>
              </item>
              <item>
                <description>0x4</description>
              </item>
            </list>
          </description>
          <description>
            <para>Loads the module but not the symbols for the module.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SLMFLAG_VIRTUAL</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Creates a virtual module named <i>ModuleName</i> at the address specified in <i>BaseOfDll</i>. To add symbols to this module, call the
<see cref="SymAddSymbol" /> function.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the base address of the loaded module.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
      <para>If the module is already loaded, the return value is zero and <see cref="GetLastError" /> returns ERROR_SUCCESS.</para>
    </returns>
    <remarks>
      <para>The symbol handler creates an entry for the module and if the deferred symbol loading option is turned off, an attempt is made to load the symbols. If deferred symbol loading is enabled, the module is marked as deferred and the symbols are not loaded until a reference is made to a symbol in the module. Therefore, you should always call the <see cref="SymGetModuleInfo64" /> function after calling <b>SymLoadModuleEx</b>.</para>
      <para>To unload the symbol table, use the
<see cref="SymUnloadModule64" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/loading-a-symbol-module">Loading a Symbol Module</a>.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymLoadModuleEx as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="MODLOAD_DATA" />
    <seealso cref="SymAddSymbol" />
    <seealso cref="SymUnloadModule64" />
  </member>
  <member name="Windows.SymMatchFileName">
    <summary>
      <para>Compares a string to a file name and path.</para>
    </summary>
    <param name="FileName">
      <para>The file name to be compared to the <i>Match</i> parameter.</para>
    </param>
    <param name="Match">
      <para>The string to be compared to the <i>FileName</i> parameter.</para>
    </param>
    <param name="FileNameStop">
      <para>A pointer to a string buffer that receives a pointer to the location in <i>FileName</i> where matching stopped. For a complete match, this value can be one character before <i>FileName</i>. This value can also be <b>NULL</b>.</para>
    </param>
    <param name="MatchStop">
      <para>A pointer to a string buffer that receives a pointer to the location in <i>Match</i> where matching stopped. For a complete match, this value may be one character before <i>Match</i>. This value may be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Because the match string can be a suffix of the complete file name, this function can be used to match a plain file name to a fully qualified file name.</para>
      <para>Matching begins from the end of both strings and proceeds backward. Matching is case-insensitive and equates a backslash ('') with a forward slash ('/').</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymMatchFileNameW">
    <summary>
      <para>Compares a string to a file name and path.</para>
    </summary>
    <param name="FileName">
      <para>The file name to be compared to the <i>Match</i> parameter.</para>
    </param>
    <param name="Match">
      <para>The string to be compared to the <i>FileName</i> parameter.</para>
    </param>
    <param name="FileNameStop">
      <para>A pointer to a string buffer that receives a pointer to the location in <i>FileName</i> where matching stopped. For a complete match, this value can be one character before <i>FileName</i>. This value can also be <b>NULL</b>.</para>
    </param>
    <param name="MatchStop">
      <para>A pointer to a string buffer that receives a pointer to the location in <i>Match</i> where matching stopped. For a complete match, this value may be one character before <i>Match</i>. This value may be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Because the match string can be a suffix of the complete file name, this function can be used to match a plain file name to a fully qualified file name.</para>
      <para>Matching begins from the end of both strings and proceeds backward. Matching is case-insensitive and equates a backslash ('') with a forward slash ('/').</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymMatchFileName">
    <summary>
      <para>Compares a string to a file name and path.</para>
    </summary>
    <param name="FileName">
      <para>The file name to be compared to the <i>Match</i> parameter.</para>
    </param>
    <param name="Match">
      <para>The string to be compared to the <i>FileName</i> parameter.</para>
    </param>
    <param name="FileNameStop">
      <para>A pointer to a string buffer that receives a pointer to the location in <i>FileName</i> where matching stopped. For a complete match, this value can be one character before <i>FileName</i>. This value can also be <b>NULL</b>.</para>
    </param>
    <param name="MatchStop">
      <para>A pointer to a string buffer that receives a pointer to the location in <i>Match</i> where matching stopped. For a complete match, this value may be one character before <i>Match</i>. This value may be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Because the match string can be a suffix of the complete file name, this function can be used to match a plain file name to a fully qualified file name.</para>
      <para>Matching begins from the end of both strings and proceeds backward. Matching is case-insensitive and equates a backslash ('') with a forward slash ('/').</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymMatchFileName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymMatchFileNameW">
    <summary>
      <para>Compares a string to a file name and path.</para>
    </summary>
    <param name="FileName">
      <para>The file name to be compared to the <i>Match</i> parameter.</para>
    </param>
    <param name="Match">
      <para>The string to be compared to the <i>FileName</i> parameter.</para>
    </param>
    <param name="FileNameStop">
      <para>A pointer to a string buffer that receives a pointer to the location in <i>FileName</i> where matching stopped. For a complete match, this value can be one character before <i>FileName</i>. This value can also be <b>NULL</b>.</para>
    </param>
    <param name="MatchStop">
      <para>A pointer to a string buffer that receives a pointer to the location in <i>Match</i> where matching stopped. For a complete match, this value may be one character before <i>Match</i>. This value may be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Because the match string can be a suffix of the complete file name, this function can be used to match a plain file name to a fully qualified file name.</para>
      <para>Matching begins from the end of both strings and proceeds backward. Matching is case-insensitive and equates a backslash ('') with a forward slash ('/').</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymMatchFileName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymMatchString">
    <summary>
      <para>Compares the specified string to the specified wildcard expression.</para>
    </summary>
    <param name="string">
      <para>The string, such as a symbol name, to be compared to the <i>expression</i> parameter.</para>
    </param>
    <param name="expression">
      <para>The wildcard expression to compare to the <i>string</i> parameter.  The wildcard expression supports the inclusion of the * and ? characters.  * matches any string and ? matches any single character.</para>
    </param>
    <param name="fCase">
      <para>A variable that indicates whether or not the comparison is to be case sensitive.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymMatchStringW">
    <summary>
      <para>Compares the specified string to the specified wildcard expression.</para>
    </summary>
    <param name="string">
      <para>The string, such as a symbol name, to be compared to the <i>expression</i> parameter.</para>
    </param>
    <param name="expression">
      <para>The wildcard expression to compare to the <i>string</i> parameter.  The wildcard expression supports the inclusion of the * and ? characters.  * matches any string and ? matches any single character.</para>
    </param>
    <param name="fCase">
      <para>A variable that indicates whether or not the comparison is to be case sensitive.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymMatchString">
    <summary>
      <para>Compares the specified string to the specified wildcard expression.</para>
    </summary>
    <param name="string">
      <para>The string, such as a symbol name, to be compared to the <i>expression</i> parameter.</para>
    </param>
    <param name="expression">
      <para>The wildcard expression to compare to the <i>string</i> parameter. The wildcard expression supports the inclusion of the * and ? characters. * matches any string and ? matches any single character.</para>
    </param>
    <param name="fCase">
      <para>A variable that indicates whether or not the comparison is to be case sensitive.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymMatchString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymMatchStringA">
    <summary>
      <para>Compares the specified string to the specified wildcard expression.</para>
    </summary>
    <param name="string">
      <para>The string, such as a symbol name, to be compared to the <i>expression</i> parameter.</para>
    </param>
    <param name="expression">
      <para>The wildcard expression to compare to the <i>string</i> parameter. The wildcard expression supports the inclusion of the * and ? characters. * matches any string and ? matches any single character.</para>
    </param>
    <param name="fCase">
      <para>A variable that indicates whether or not the comparison is to be case sensitive.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymMatchString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymMatchString">
    <summary>
      <para>Compares the specified string to the specified wildcard expression.</para>
    </summary>
    <param name="string">
      <para>The string, such as a symbol name, to be compared to the <i>expression</i> parameter.</para>
    </param>
    <param name="expression">
      <para>The wildcard expression to compare to the <i>string</i> parameter.  The wildcard expression supports the inclusion of the * and ? characters.  * matches any string and ? matches any single character.</para>
    </param>
    <param name="fCase">
      <para>A variable that indicates whether or not the comparison is to be case sensitive.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymMatchString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymMatchStringW">
    <summary>
      <para>Compares the specified string to the specified wildcard expression.</para>
    </summary>
    <param name="string">
      <para>The string, such as a symbol name, to be compared to the <i>expression</i> parameter.</para>
    </param>
    <param name="expression">
      <para>The wildcard expression to compare to the <i>string</i> parameter.  The wildcard expression supports the inclusion of the * and ? characters.  * matches any string and ? matches any single character.</para>
    </param>
    <param name="fCase">
      <para>A variable that indicates whether or not the comparison is to be case sensitive.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymMatchString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymNext">
    <summary>
      <para>Retrieves symbol information for the next symbol.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="si">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the current symbol. Upon return, the structure contains information about the next symbol.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function requires that the <see cref="SYMBOL_INFO" /> structure have valid data for the current symbol. The next symbol is the symbol with the virtual address that is next in the sequence.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
    <seealso cref="SymPrev" />
  </member>
  <member name="Windows.SymNextW">
    <summary>
      <para>Retrieves symbol information for the next symbol.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="si">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the current symbol. Upon return, the structure contains information about the next symbol.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function requires that the <see cref="SYMBOL_INFO" /> structure have valid data for the current symbol. The next symbol is the symbol with the virtual address that is next in the sequence.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
    <seealso cref="SymPrev" />
  </member>
  <member name="Windows.SymNext">
    <summary>
      <para>Retrieves symbol information for the next symbol.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="siw">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the current symbol. Upon return, the structure contains information about the next symbol.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function requires that the <see cref="SYMBOL_INFO" /> structure have valid data for the current symbol. The next symbol is the symbol with the virtual address that is next in the sequence.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymNext as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
    <seealso cref="SymPrev" />
  </member>
  <member name="Windows.SymNextW">
    <summary>
      <para>Retrieves symbol information for the next symbol.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="siw">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the current symbol. Upon return, the structure contains information about the next symbol.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function requires that the <see cref="SYMBOL_INFO" /> structure have valid data for the current symbol. The next symbol is the symbol with the virtual address that is next in the sequence.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymNext as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
    <seealso cref="SymPrev" />
  </member>
  <member name="Windows.SymPrev">
    <summary>
      <para>Retrieves symbol information for the previous symbol.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="si">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the current symbol. Upon return, the structure contains information about the previous symbol.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function requires that the <see cref="SYMBOL_INFO" /> structure have valid data for the current symbol. The previous symbol is the symbol with a virtual address that immediately precedes this symbol.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
    <seealso cref="SymNext" />
  </member>
  <member name="Windows.SymPrevW">
    <summary>
      <para>Retrieves symbol information for the previous symbol.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="si">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the current symbol. Upon return, the structure contains information about the previous symbol.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function requires that the <see cref="SYMBOL_INFO" /> structure have valid data for the current symbol. The previous symbol is the symbol with a virtual address that immediately precedes this symbol.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
    <seealso cref="SymNext" />
  </member>
  <member name="Windows.SymPrev">
    <summary>
      <para>Retrieves symbol information for the previous symbol.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="siw">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the current symbol. Upon return, the structure contains information about the previous symbol.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function requires that the <see cref="SYMBOL_INFO" /> structure have valid data for the current symbol. The previous symbol is the symbol with a virtual address that immediately precedes this symbol.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymPrev as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
    <seealso cref="SymNext" />
  </member>
  <member name="Windows.SymPrevW">
    <summary>
      <para>Retrieves symbol information for the previous symbol.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="siw">
      <para>A pointer to a
<see cref="SYMBOL_INFO" /> structure that provides information about the current symbol. Upon return, the structure contains information about the previous symbol.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function requires that the <see cref="SYMBOL_INFO" /> structure have valid data for the current symbol. The previous symbol is the symbol with a virtual address that immediately precedes this symbol.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymPrev as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMBOL_INFO" />
    <seealso cref="SymNext" />
  </member>
  <member name="Windows.SymQueryInlineTrace">
    <summary>
      <para>Queries an inline trace.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="StartAddress">
      <para>The start address.</para>
    </param>
    <param name="StartContext">
      <para>Contains the context of the start of block.</para>
    </param>
    <param name="StartRetAddress">
      <para>Contains the return address of the start of the current block/</para>
    </param>
    <param name="CurAddress">
      <para>Contains the current address.</para>
    </param>
    <param name="CurContext">
      <para>Address of a <b>DWORD</b> that receives the current context.</para>
    </param>
    <param name="CurFrameIndex">
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </param>
    <remarks>
      <para>Either the <i>StartAddress</i> or <i>StartRetAddress</i> parameters must be within the same function scope as the <i>CurAddress</i> parameter. The former indicates a step-over within the same function and the latter indicates a step-over from <i>StartAddress</i>.</para>
    </remarks>
  </member>
  <member name="Windows.SymRefreshModuleList">
    <summary>
      <para>Refreshes the module list for the process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function enumerates the loaded modules for the process and effectively calls the
<see cref="SymLoadModule64" /> function for each module. This same process is performed by <see cref="SymInitialize" /> if <i>fInvadeProcess</i> is <b>TRUE</b>.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymRegisterCallback">
    <summary>
      <para>Registers a callback function for use by the symbol handler.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="CallbackFunction">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymRegisterCallback64</b> function lets an application register a callback function for use by the symbol handler. The symbol handler calls the registered callback function when there is status or progress information for the application.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymRegisterCallbackW64</b> is defined as follows in Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymRegisterCallbackW64(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction,
    __in ULONG64 UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymRegisterCallback64   SymRegisterCallbackW64
#endif
</code>
      <para>This function supersedes the <b>SymRegisterCallback</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymRegisterCallback</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymRegisterCallback SymRegisterCallback64
#else
BOOL
IMAGEAPI
SymRegisterCallback(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK CallbackFunction,
    __in_opt PVOID UserContext
    );
#endif
</code>
      <para>For a more extensive example, read <a href="https://docs.microsoft.com//windows/desktop/Debug/getting-notifications">Getting Notifications</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/getting-notifications">Getting Notifications</seealso>
    <seealso cref="SymInitialize" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</seealso>
  </member>
  <member name="Windows.SymRegisterCallback64">
    <summary>
      <para>Registers a callback function for use by the symbol handler.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="CallbackFunction">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymRegisterCallback64</b> function lets an application register a callback function for use by the symbol handler. The symbol handler calls the registered callback function when there is status or progress information for the application.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymRegisterCallbackW64</b> is defined as follows in Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymRegisterCallbackW64(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction,
    __in ULONG64 UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymRegisterCallback64   SymRegisterCallbackW64
#endif
</code>
      <para>This function supersedes the <b>SymRegisterCallback</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymRegisterCallback</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymRegisterCallback SymRegisterCallback64
#else
BOOL
IMAGEAPI
SymRegisterCallback(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK CallbackFunction,
    __in_opt PVOID UserContext
    );
#endif
</code>
      <para>For a more extensive example, read <a href="https://docs.microsoft.com//windows/desktop/Debug/getting-notifications">Getting Notifications</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/getting-notifications">Getting Notifications</seealso>
    <seealso cref="SymInitialize" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</seealso>
  </member>
  <member name="Windows.SymRegisterCallbackW64">
    <summary>
      <para>Registers a callback function for use by the symbol handler.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="CallbackFunction">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymRegisterCallback64</b> function lets an application register a callback function for use by the symbol handler. The symbol handler calls the registered callback function when there is status or progress information for the application.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymRegisterCallbackW64</b> is defined as follows in Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymRegisterCallbackW64(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction,
    __in ULONG64 UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymRegisterCallback64   SymRegisterCallbackW64
#endif
</code>
      <para>This function supersedes the <b>SymRegisterCallback</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymRegisterCallback</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymRegisterCallback SymRegisterCallback64
#else
BOOL
IMAGEAPI
SymRegisterCallback(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK CallbackFunction,
    __in_opt PVOID UserContext
    );
#endif
</code>
      <para>For a more extensive example, read <a href="https://docs.microsoft.com//windows/desktop/Debug/getting-notifications">Getting Notifications</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/getting-notifications">Getting Notifications</seealso>
    <seealso cref="SymInitialize" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</seealso>
  </member>
  <member name="Windows.SymRegisterCallback">
    <summary>
      <para>Registers a callback function for use by the symbol handler.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="CallbackFunction">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymRegisterCallback64</b> function lets an application register a callback function for use by the symbol handler. The symbol handler calls the registered callback function when there is status or progress information for the application.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymRegisterCallbackW64</b> is defined as follows in Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymRegisterCallbackW64(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction,
    __in ULONG64 UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymRegisterCallback64   SymRegisterCallbackW64
#endif
</code>
      <para>This function supersedes the <b>SymRegisterCallback</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymRegisterCallback</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymRegisterCallback SymRegisterCallback64
#else
BOOL
IMAGEAPI
SymRegisterCallback(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK CallbackFunction,
    __in_opt PVOID UserContext
    );
#endif
</code>
      <para>For a more extensive example, read <a href="https://docs.microsoft.com//windows/desktop/Debug/getting-notifications">Getting Notifications</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/getting-notifications">Getting Notifications</seealso>
    <seealso cref="SymInitialize" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</seealso>
  </member>
  <member name="Windows.SymRegisterCallback64">
    <summary>
      <para>Registers a callback function for use by the symbol handler.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="CallbackFunction">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymRegisterCallback64</b> function lets an application register a callback function for use by the symbol handler. The symbol handler calls the registered callback function when there is status or progress information for the application.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymRegisterCallbackW64</b> is defined as follows in Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymRegisterCallbackW64(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction,
    __in ULONG64 UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymRegisterCallback64   SymRegisterCallbackW64
#endif
</code>
      <para>This function supersedes the <b>SymRegisterCallback</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymRegisterCallback</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymRegisterCallback SymRegisterCallback64
#else
BOOL
IMAGEAPI
SymRegisterCallback(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK CallbackFunction,
    __in_opt PVOID UserContext
    );
#endif
</code>
      <para>For a more extensive example, read <a href="https://docs.microsoft.com//windows/desktop/Debug/getting-notifications">Getting Notifications</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/getting-notifications">Getting Notifications</seealso>
    <seealso cref="SymInitialize" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</seealso>
  </member>
  <member name="Windows.SymRegisterCallbackW64">
    <summary>
      <para>Registers a callback function for use by the symbol handler.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="CallbackFunction">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymRegisterCallback64</b> function lets an application register a callback function for use by the symbol handler. The symbol handler calls the registered callback function when there is status or progress information for the application.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymRegisterCallbackW64</b> is defined as follows in Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymRegisterCallbackW64(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction,
    __in ULONG64 UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymRegisterCallback64   SymRegisterCallbackW64
#endif
</code>
      <para>This function supersedes the <b>SymRegisterCallback</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymRegisterCallback</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymRegisterCallback SymRegisterCallback64
#else
BOOL
IMAGEAPI
SymRegisterCallback(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK CallbackFunction,
    __in_opt PVOID UserContext
    );
#endif
</code>
      <para>For a more extensive example, read <a href="https://docs.microsoft.com//windows/desktop/Debug/getting-notifications">Getting Notifications</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/getting-notifications">Getting Notifications</seealso>
    <seealso cref="SymInitialize" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</seealso>
  </member>
  <member name="Windows.SymRegisterCallback">
    <summary>
      <para>Registers a callback function for use by the symbol handler.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="CallbackFunction">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymRegisterCallback64</b> function lets an application register a callback function for use by the symbol handler. The symbol handler calls the registered callback function when there is status or progress information for the application.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymRegisterCallbackW64</b> is defined as follows in Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymRegisterCallbackW64(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction,
    __in ULONG64 UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymRegisterCallback64   SymRegisterCallbackW64
#endif
</code>
      <para>This function supersedes the <b>SymRegisterCallback</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymRegisterCallback</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymRegisterCallback SymRegisterCallback64
#else
BOOL
IMAGEAPI
SymRegisterCallback(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK CallbackFunction,
    __in_opt PVOID UserContext
    );
#endif
</code>
      <para>For a more extensive example, read <a href="https://docs.microsoft.com//windows/desktop/Debug/getting-notifications">Getting Notifications</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/getting-notifications">Getting Notifications</seealso>
    <seealso cref="SymInitialize" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</seealso>
  </member>
  <member name="Windows.SymRegisterCallback64">
    <summary>
      <para>Registers a callback function for use by the symbol handler.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="CallbackFunction">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymRegisterCallback64</b> function lets an application register a callback function for use by the symbol handler. The symbol handler calls the registered callback function when there is status or progress information for the application.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymRegisterCallbackW64</b> is defined as follows in Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymRegisterCallbackW64(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction,
    __in ULONG64 UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymRegisterCallback64   SymRegisterCallbackW64
#endif
</code>
      <para>This function supersedes the <b>SymRegisterCallback</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymRegisterCallback</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymRegisterCallback SymRegisterCallback64
#else
BOOL
IMAGEAPI
SymRegisterCallback(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK CallbackFunction,
    __in_opt PVOID UserContext
    );
#endif
</code>
      <para>For a more extensive example, read <a href="https://docs.microsoft.com//windows/desktop/Debug/getting-notifications">Getting Notifications</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/getting-notifications">Getting Notifications</seealso>
    <seealso cref="SymInitialize" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</seealso>
  </member>
  <member name="Windows.SymRegisterCallbackW64">
    <summary>
      <para>Registers a callback function for use by the symbol handler.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="CallbackFunction">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymRegisterCallback64</b> function lets an application register a callback function for use by the symbol handler. The symbol handler calls the registered callback function when there is status or progress information for the application.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <b>SymRegisterCallbackW64</b> is defined as follows in Dbghelp.h.</para>
      <code>BOOL
IMAGEAPI
SymRegisterCallbackW64(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction,
    __in ULONG64 UserContext
    );

#ifdef DBGHELP_TRANSLATE_TCHAR
#define SymRegisterCallback64   SymRegisterCallbackW64
#endif
</code>
      <para>This function supersedes the <b>SymRegisterCallback</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymRegisterCallback</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymRegisterCallback SymRegisterCallback64
#else
BOOL
IMAGEAPI
SymRegisterCallback(
    __in HANDLE hProcess,
    __in PSYMBOL_REGISTERED_CALLBACK CallbackFunction,
    __in_opt PVOID UserContext
    );
#endif
</code>
      <para>For a more extensive example, read <a href="https://docs.microsoft.com//windows/desktop/Debug/getting-notifications">Getting Notifications</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/getting-notifications">Getting Notifications</seealso>
    <seealso cref="SymInitialize" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</seealso>
  </member>
  <member name="Windows.SymRegisterFunctionEntryCallback">
    <summary>
      <para>Registers a callback function for use by the stack walking procedure on Alpha computers.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="StackWalk64" /> function.</para>
    </param>
    <param name="CallbackFunction">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_funcentry_callback">SymRegisterFunctionEntryCallbackProc64</a> callback function.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymRegisterFunctionEntryCallback64</b> function lets an application register a callback function for use by the stack walking procedure. The stack walking procedure calls the registered callback function when it is unable to locate a function table entry for an address. In most cases, the stack walking procedure locates the function table entries in the function table of the image containing the address. However, in situations where the function table entries are not in the image, this callback allows the debugger to provide the function table entry from another source. For example, run-time generated code on Alpha computers can define dynamic function tables to support exception handling and stack tracing.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymRegisterFunctionEntryCallback</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymRegisterFunctionEntryCallback</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymRegisterFunctionEntryCallback SymRegisterFunctionEntryCallback64
#else
BOOL
IMAGEAPI
SymRegisterFunctionEntryCallback(
    __in HANDLE hProcess,
    __in PSYMBOL_FUNCENTRY_CALLBACK CallbackFunction,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="StackWalk64" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_funcentry_callback">SymRegisterFunctionEntryCallbackProc64</seealso>
  </member>
  <member name="Windows.SymRegisterFunctionEntryCallback64">
    <summary>
      <para>Registers a callback function for use by the stack walking procedure on Alpha computers.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="StackWalk64" /> function.</para>
    </param>
    <param name="CallbackFunction">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_funcentry_callback">SymRegisterFunctionEntryCallbackProc64</a> callback function.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymRegisterFunctionEntryCallback64</b> function lets an application register a callback function for use by the stack walking procedure. The stack walking procedure calls the registered callback function when it is unable to locate a function table entry for an address. In most cases, the stack walking procedure locates the function table entries in the function table of the image containing the address. However, in situations where the function table entries are not in the image, this callback allows the debugger to provide the function table entry from another source. For example, run-time generated code on Alpha computers can define dynamic function tables to support exception handling and stack tracing.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymRegisterFunctionEntryCallback</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymRegisterFunctionEntryCallback</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymRegisterFunctionEntryCallback SymRegisterFunctionEntryCallback64
#else
BOOL
IMAGEAPI
SymRegisterFunctionEntryCallback(
    __in HANDLE hProcess,
    __in PSYMBOL_FUNCENTRY_CALLBACK CallbackFunction,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="StackWalk64" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_funcentry_callback">SymRegisterFunctionEntryCallbackProc64</seealso>
  </member>
  <member name="Windows.SymRegisterFunctionEntryCallback">
    <summary>
      <para>Registers a callback function for use by the stack walking procedure on Alpha computers.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="StackWalk64" /> function.</para>
    </param>
    <param name="CallbackFunction">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_funcentry_callback">SymRegisterFunctionEntryCallbackProc64</a> callback function.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymRegisterFunctionEntryCallback64</b> function lets an application register a callback function for use by the stack walking procedure. The stack walking procedure calls the registered callback function when it is unable to locate a function table entry for an address. In most cases, the stack walking procedure locates the function table entries in the function table of the image containing the address. However, in situations where the function table entries are not in the image, this callback allows the debugger to provide the function table entry from another source. For example, run-time generated code on Alpha computers can define dynamic function tables to support exception handling and stack tracing.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymRegisterFunctionEntryCallback</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymRegisterFunctionEntryCallback</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymRegisterFunctionEntryCallback SymRegisterFunctionEntryCallback64
#else
BOOL
IMAGEAPI
SymRegisterFunctionEntryCallback(
    __in HANDLE hProcess,
    __in PSYMBOL_FUNCENTRY_CALLBACK CallbackFunction,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="StackWalk64" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_funcentry_callback">SymRegisterFunctionEntryCallbackProc64</seealso>
  </member>
  <member name="Windows.SymRegisterFunctionEntryCallback64">
    <summary>
      <para>Registers a callback function for use by the stack walking procedure on Alpha computers.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="StackWalk64" /> function.</para>
    </param>
    <param name="CallbackFunction">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_funcentry_callback">SymRegisterFunctionEntryCallbackProc64</a> callback function.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>SymRegisterFunctionEntryCallback64</b> function lets an application register a callback function for use by the stack walking procedure. The stack walking procedure calls the registered callback function when it is unable to locate a function table entry for an address. In most cases, the stack walking procedure locates the function table entries in the function table of the image containing the address. However, in situations where the function table entries are not in the image, this callback allows the debugger to provide the function table entry from another source. For example, run-time generated code on Alpha computers can define dynamic function tables to support exception handling and stack tracing.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymRegisterFunctionEntryCallback</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymRegisterFunctionEntryCallback</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymRegisterFunctionEntryCallback SymRegisterFunctionEntryCallback64
#else
BOOL
IMAGEAPI
SymRegisterFunctionEntryCallback(
    __in HANDLE hProcess,
    __in PSYMBOL_FUNCENTRY_CALLBACK CallbackFunction,
    __in_opt PVOID UserContext
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="StackWalk64" />
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_funcentry_callback">SymRegisterFunctionEntryCallbackProc64</seealso>
  </member>
  <member name="Windows.SymSearch">
    <summary>
      <para>Searches for  PDB symbols that meet the specified criteria.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and <i>Mask</i> does not contain an exclamation point, the function uses the scope established by the
<see cref="SymSetContext" /> function.</para>
    </param>
    <param name="Index">
      <para>A unique value for the symbol.</para>
    </param>
    <param name="SymTag">
      <para>The PDB classification. These values are defined in Dbghelp.h in the <b>SymTagEnum</b> enumeration type. For  descriptions, see the PDB documentation.</para>
    </param>
    <param name="Mask">
      <para>A wildcard expression that indicates the names of the symbols to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</para>
    </param>
    <param name="Address">
      <para>The address of the symbol.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>A
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</para>
    </param>
    <param name="Options">
      <para>The options that control the behavior of this function.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSEARCH_ALLITEMS</b>
                </description>
              </item>
              <item>
                <description>0x08</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include all symbols and other data in the .pdb files.</para>
            <para>
              <b>DbgHelp 6.6 and earlier:  </b>This value is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSEARCH_GLOBALSONLY</b>
                </description>
              </item>
              <item>
                <description>0x04</description>
              </item>
            </list>
          </description>
          <description>
            <para>Search only for global symbols.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSEARCH_MASKOBJS</b>
                </description>
              </item>
              <item>
                <description>0x01</description>
              </item>
            </list>
          </description>
          <description>
            <para>For internal use only.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSEARCH_RECURSE</b>
                </description>
              </item>
              <item>
                <description>0x02</description>
              </item>
            </list>
          </description>
          <description>
            <para>Recurse from the top to find all symbols.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</seealso>
  </member>
  <member name="Windows.SymSearchW">
    <summary>
      <para>Searches for  PDB symbols that meet the specified criteria.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and <i>Mask</i> does not contain an exclamation point, the function uses the scope established by the
<see cref="SymSetContext" /> function.</para>
    </param>
    <param name="Index">
      <para>A unique value for the symbol.</para>
    </param>
    <param name="SymTag">
      <para>The PDB classification. These values are defined in Dbghelp.h in the <b>SymTagEnum</b> enumeration type. For  descriptions, see the PDB documentation.</para>
    </param>
    <param name="Mask">
      <para>A wildcard expression that indicates the names of the symbols to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</para>
    </param>
    <param name="Address">
      <para>The address of the symbol.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>A
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</para>
    </param>
    <param name="Options">
      <para>The options that control the behavior of this function.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSEARCH_ALLITEMS</b>
                </description>
              </item>
              <item>
                <description>0x08</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include all symbols and other data in the .pdb files.</para>
            <para>
              <b>DbgHelp 6.6 and earlier:  </b>This value is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSEARCH_GLOBALSONLY</b>
                </description>
              </item>
              <item>
                <description>0x04</description>
              </item>
            </list>
          </description>
          <description>
            <para>Search only for global symbols.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSEARCH_MASKOBJS</b>
                </description>
              </item>
              <item>
                <description>0x01</description>
              </item>
            </list>
          </description>
          <description>
            <para>For internal use only.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSEARCH_RECURSE</b>
                </description>
              </item>
              <item>
                <description>0x02</description>
              </item>
            </list>
          </description>
          <description>
            <para>Recurse from the top to find all symbols.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</seealso>
  </member>
  <member name="Windows.SymSearch">
    <summary>
      <para>Searches for  PDB symbols that meet the specified criteria.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and <i>Mask</i> does not contain an exclamation point, the function uses the scope established by the
<see cref="SymSetContext" /> function.</para>
    </param>
    <param name="Index">
      <para>A unique value for the symbol.</para>
    </param>
    <param name="SymTag">
      <para>The PDB classification. These values are defined in Dbghelp.h in the <b>SymTagEnum</b> enumeration type. For  descriptions, see the PDB documentation.</para>
    </param>
    <param name="Mask">
      <para>A wildcard expression that indicates the names of the symbols to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</para>
    </param>
    <param name="Address">
      <para>The address of the symbol.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>A
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</para>
    </param>
    <param name="Options">
      <para>The options that control the behavior of this function.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSEARCH_ALLITEMS</b>
                </description>
              </item>
              <item>
                <description>0x08</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include all symbols and other data in the .pdb files.</para>
            <para>
              <b>DbgHelp 6.6 and earlier:  </b>This value is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSEARCH_GLOBALSONLY</b>
                </description>
              </item>
              <item>
                <description>0x04</description>
              </item>
            </list>
          </description>
          <description>
            <para>Search only for global symbols.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSEARCH_MASKOBJS</b>
                </description>
              </item>
              <item>
                <description>0x01</description>
              </item>
            </list>
          </description>
          <description>
            <para>For internal use only.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSEARCH_RECURSE</b>
                </description>
              </item>
              <item>
                <description>0x02</description>
              </item>
            </list>
          </description>
          <description>
            <para>Recurse from the top to find all symbols.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymSearch as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</seealso>
  </member>
  <member name="Windows.SymSearchW">
    <summary>
      <para>Searches for  PDB symbols that meet the specified criteria.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and <i>Mask</i> does not contain an exclamation point, the function uses the scope established by the
<see cref="SymSetContext" /> function.</para>
    </param>
    <param name="Index">
      <para>A unique value for the symbol.</para>
    </param>
    <param name="SymTag">
      <para>The PDB classification. These values are defined in Dbghelp.h in the <b>SymTagEnum</b> enumeration type. For  descriptions, see the PDB documentation.</para>
    </param>
    <param name="Mask">
      <para>A wildcard expression that indicates the names of the symbols to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</para>
    </param>
    <param name="Address">
      <para>The address of the symbol.</para>
    </param>
    <param name="EnumSymbolsCallback">
      <para>A
<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</para>
    </param>
    <param name="UserContext">
      <para>A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</para>
    </param>
    <param name="Options">
      <para>The options that control the behavior of this function.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSEARCH_ALLITEMS</b>
                </description>
              </item>
              <item>
                <description>0x08</description>
              </item>
            </list>
          </description>
          <description>
            <para>Include all symbols and other data in the .pdb files.</para>
            <para>
              <b>DbgHelp 6.6 and earlier:  </b>This value is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSEARCH_GLOBALSONLY</b>
                </description>
              </item>
              <item>
                <description>0x04</description>
              </item>
            </list>
          </description>
          <description>
            <para>Search only for global symbols.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSEARCH_MASKOBJS</b>
                </description>
              </item>
              <item>
                <description>0x01</description>
              </item>
            </list>
          </description>
          <description>
            <para>For internal use only.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSEARCH_RECURSE</b>
                </description>
              </item>
              <item>
                <description>0x02</description>
              </item>
            </list>
          </description>
          <description>
            <para>Recurse from the top to find all symbols.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymSearch as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</seealso>
  </member>
  <member name="Windows.SymSetContext">
    <summary>
      <para>Sets context information used by the
<see cref="SymEnumSymbols" /> function. This function only works with
PDB symbols.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="StackFrame">
      <para>A pointer to an <see cref="IMAGEHLP_STACK_FRAME" /></para>
      <para>structure that contains frame information.</para>
    </param>
    <param name="Context">
      <para>This parameter is ignored.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If you call <b>SymSetContext</b> to set the context to its
current value, the function fails but <see cref="GetLastError" /></para>
      <para>returns <b>ERROR_SUCCESS</b>.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGEHLP_STACK_FRAME" />
    <seealso cref="SymEnumSymbols" />
  </member>
  <member name="Windows.SymSetExtendedOption">
    <summary>
      <para>Turns the specified extended symbol option on or off.</para>
    </summary>
    <param name="option">
      <para>The extended symbol option to turn on or off. The following are valid values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_EX_DISABLEACCESSTIMEUPDATE</b>
                </description>
              </item>
              <item>
                <description>0</description>
              </item>
            </list>
          </description>
          <description>
            <para>When set to TRUE, turns off explicitly updating the last access time of a symbol that is loaded. By default, DbgHelp updates the last access time of a symbol file that is consumed so that a symbol cache can be maintained by using a least recently used mechanism.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="value">
      <para>The value to set for the specified option, either TRUE or FALSE.</para>
    </param>
    <returns>
      <para>The previous value of the specified extended option.</para>
    </returns>
    <seealso cref="IMAGEHLP_EXTENDED_OPTIONS" />
    <seealso cref="SymGetExtendedOption" />
  </member>
  <member name="Windows.SymSetHomeDirectory">
    <summary>
      <para>Sets the home directory used by Dbghelp.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the <see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dir">
      <para>The home directory. This directory must be writable, otherwise the home directory is the common application directory specified with <a href="https://docs.microsoft.com//windows/win32/shell/csidl">CSIDL_COMMON_APPDATA</a>. If this parameter is <b>NULL</b>, the function uses the default directory.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the <i>dir</i> parameter.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The default home directory is the directory in which Dbghelp.dll resides. Dbghelp uses this directory as a basis for other directories, such as the default downstream store directory (the sym subdirectory of the home directory).</para>
      <para>The home directory used for the default symbol store and the source server cache location is stored in the DBGHELP_HOMEDIR environment variable.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymGetHomeDirectory" />
  </member>
  <member name="Windows.SymSetHomeDirectoryW">
    <summary>
      <para>Sets the home directory used by Dbghelp.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the <see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dir">
      <para>The home directory. This directory must be writable, otherwise the home directory is the common application directory specified with <a href="https://docs.microsoft.com//windows/win32/shell/csidl">CSIDL_COMMON_APPDATA</a>. If this parameter is <b>NULL</b>, the function uses the default directory.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the <i>dir</i> parameter.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The default home directory is the directory in which Dbghelp.dll resides. Dbghelp uses this directory as a basis for other directories, such as the default downstream store directory (the sym subdirectory of the home directory).</para>
      <para>The home directory used for the default symbol store and the source server cache location is stored in the DBGHELP_HOMEDIR environment variable.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymGetHomeDirectory" />
  </member>
  <member name="Windows.SymSetHomeDirectory">
    <summary>
      <para>Sets the home directory used by Dbghelp.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the <see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dir">
      <para>The home directory. This directory must be writable, otherwise the home directory is the common application directory specified with <a href="https://docs.microsoft.com//windows/win32/shell/csidl">CSIDL_COMMON_APPDATA</a>. If this parameter is <b>NULL</b>, the function uses the default directory.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the <i>dir</i> parameter.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The default home directory is the directory in which Dbghelp.dll resides. Dbghelp uses this directory as a basis for other directories, such as the default downstream store directory (the sym subdirectory of the home directory).</para>
      <para>The home directory used for the default symbol store and the source server cache location is stored in the DBGHELP_HOMEDIR environment variable.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymSetHomeDirectory as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymGetHomeDirectory" />
  </member>
  <member name="Windows.SymSetHomeDirectoryW">
    <summary>
      <para>Sets the home directory used by Dbghelp.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the <see cref="SymInitialize" /> function.</para>
    </param>
    <param name="dir">
      <para>The home directory. This directory must be writable, otherwise the home directory is the common application directory specified with <a href="https://docs.microsoft.com//windows/win32/shell/csidl">CSIDL_COMMON_APPDATA</a>. If this parameter is <b>NULL</b>, the function uses the default directory.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the <i>dir</i> parameter.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The default home directory is the directory in which Dbghelp.dll resides. Dbghelp uses this directory as a basis for other directories, such as the default downstream store directory (the sym subdirectory of the home directory).</para>
      <para>The home directory used for the default symbol store and the source server cache location is stored in the DBGHELP_HOMEDIR environment variable.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymSetHomeDirectory as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymGetHomeDirectory" />
  </member>
  <member name="Windows.SymSetOptions">
    <summary>
      <para>Sets the options mask.</para>
    </summary>
    <param name="SymOptions">
      <para>The symbol options. Zero is a valid value and indicates that all options are turned off. The options values are combined using the OR operator to form a valid options value. The following are valid values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_ALLOW_ABSOLUTE_SYMBOLS</b>
                </description>
              </item>
              <item>
                <description>0x00000800</description>
              </item>
            </list>
          </description>
          <description>
            <para>Enables the use of symbols that are stored with absolute addresses. Most symbols are stored as RVAs from the base of the module. DbgHelp translates them to absolute addresses. There are symbols that are stored as an absolute address. These have very specialized purposes and are typically not used.</para>
            <para>
              <b>DbgHelp 5.1 and earlier:  </b>This value is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_ALLOW_ZERO_ADDRESS</b>
                </description>
              </item>
              <item>
                <description>0x01000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Enables the use of symbols that do not have an address. By default, DbgHelp filters out symbols that do not have an address.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_AUTO_PUBLICS</b>
                </description>
              </item>
              <item>
                <description>0x00010000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not search the public symbols when searching for symbols by address, or when enumerating symbols, unless they were not found in the global symbols or within the current scope. This option has no effect with <b>SYMOPT_PUBLICS_ONLY</b>.</para>
            <para>
              <b>DbgHelp 5.1 and earlier:  </b>This value is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_CASE_INSENSITIVE</b>
                </description>
              </item>
              <item>
                <description>0x00000001</description>
              </item>
            </list>
          </description>
          <description>
            <para>All symbol searches are insensitive to case.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_DEBUG</b>
                </description>
              </item>
              <item>
                <description>0x80000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Pass debug output through <see cref="OutputDebugString" /> or the  <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_DEFERRED_LOADS</b>
                </description>
              </item>
              <item>
                <description>0x00000004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Symbols are not loaded until a reference is made requiring the symbols be loaded. This is the fastest, most efficient way to use the symbol handler.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_DISABLE_SYMSRV_AUTODETECT</b>
                </description>
              </item>
              <item>
                <description>0x02000000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disables the auto-detection of symbol server stores in the symbol path, even without the "SRV*" designation, maintaining compatibility with previous behavior.</para>
            <para>
              <b>DbgHelp 6.6 and earlier:  </b>This value is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_EXACT_SYMBOLS</b>
                </description>
              </item>
              <item>
                <description>0x00000400</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not load an unmatched .pdb file. Do not load export symbols if all else fails.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_FAIL_CRITICAL_ERRORS</b>
                </description>
              </item>
              <item>
                <description>0x00000200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not display system dialog boxes when there is a media failure such as no media in a drive. Instead, the failure happens silently.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_FAVOR_COMPRESSED</b>
                </description>
              </item>
              <item>
                <description>0x00800000</description>
              </item>
            </list>
          </description>
          <description>
            <para>If there is both an uncompressed and a compressed file available, favor the compressed file. This option is good for slow connections.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_FLAT_DIRECTORY</b>
                </description>
              </item>
              <item>
                <description>0x00400000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Symbols are stored in the root directory of the default downstream store.</para>
            <para>
              <b>DbgHelp 6.1 and earlier:  </b>This value is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_IGNORE_CVREC</b>
                </description>
              </item>
              <item>
                <description>0x00000080</description>
              </item>
            </list>
          </description>
          <description>
            <para>Ignore path information in the CodeView record of the image header when loading a .pdb file.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_IGNORE_IMAGEDIR</b>
                </description>
              </item>
              <item>
                <description>0x00200000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Ignore the image directory.</para>
            <para>
              <b>DbgHelp 6.1 and earlier:  </b>This value is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_IGNORE_NT_SYMPATH</b>
                </description>
              </item>
              <item>
                <description>0x00001000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not use the path specified by <b>_NT_SYMBOL_PATH</b> if the user calls
<see cref="SymSetSearchPath" /> without a valid path.</para>
            <para>
              <b>DbgHelp 5.1:  </b>This value is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_INCLUDE_32BIT_MODULES</b>
                </description>
              </item>
              <item>
                <description>0x00002000</description>
              </item>
            </list>
          </description>
          <description>
            <para>When debugging on 64-bit Windows, include any 32-bit modules.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_LOAD_ANYTHING</b>
                </description>
              </item>
              <item>
                <description>0x00000040</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable checks to ensure a file (.exe, .dbg., or .pdb) is the correct file. Instead, load the first file located.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_LOAD_LINES</b>
                </description>
              </item>
              <item>
                <description>0x00000010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Loads line number information.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_NO_CPP</b>
                </description>
              </item>
              <item>
                <description>0x00000008</description>
              </item>
            </list>
          </description>
          <description>
            <para>All C++ decorated symbols containing the symbol separator "." are replaced by "__". This option exists for debuggers that cannot handle parsing real C++ symbol names.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_NO_IMAGE_SEARCH</b>
                </description>
              </item>
              <item>
                <description>0x00020000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not search the image for the symbol path when loading the symbols for a module if the module header cannot be read.</para>
            <para>
              <b>DbgHelp 5.1:  </b>This value is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_NO_PROMPTS</b>
                </description>
              </item>
              <item>
                <description>0x00080000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Prevents prompting for validation from the symbol server.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_NO_PUBLICS</b>
                </description>
              </item>
              <item>
                <description>0x00008000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not search the publics table for symbols. This option should have little effect because there are copies of the public symbols in the globals table.</para>
            <para>
              <b>DbgHelp 5.1:  </b>This value is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_NO_UNQUALIFIED_LOADS</b>
                </description>
              </item>
              <item>
                <description>0x00000100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Prevents symbols from being loaded when the caller examines symbols across multiple modules. Examine only the module whose symbols have already been loaded.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_OVERWRITE</b>
                </description>
              </item>
              <item>
                <description>0x00100000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Overwrite the downlevel store from the symbol store.</para>
            <para>
              <b>DbgHelp 6.1 and earlier:  </b>This value is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_PUBLICS_ONLY</b>
                </description>
              </item>
              <item>
                <description>0x00004000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not use private symbols. The version of DbgHelp that shipped with earlier Windows release supported only public symbols; this option provides compatibility with this limitation.</para>
            <para>
              <b>DbgHelp 5.1:  </b>This value is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_SECURE</b>
                </description>
              </item>
              <item>
                <description>0x00040000</description>
              </item>
            </list>
          </description>
          <description>
            <para>DbgHelp will not load any symbol server other than SymSrv. SymSrv will not use the downstream store specified in <b>_NT_SYMBOL_PATH</b>. After this flag has been set, it cannot be cleared.</para>
            <para>
              <b>DbgHelp 6.0 and 6.1:  </b>This flag can be cleared.</para>
            <para>
              <b>DbgHelp 5.1:  </b>This value is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMOPT_UNDNAME</b>
                </description>
              </item>
              <item>
                <description>0x00000002</description>
              </item>
            </list>
          </description>
          <description>
            <para>All symbols are presented in undecorated form.</para>
            <para>This option has no effect on global or local symbols because they are stored undecorated. This option applies only to public symbols.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>The function returns the current options mask.</para>
    </returns>
    <remarks>
      <para>The options value can be changed any number of times while the library is in use by an application. The option change affects all future calls to the symbol handler.</para>
      <para>To get the current options mask, call the
<see cref="SymGetOptions" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/initializing-the-symbol-handler">Initializing the Symbol Handler</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymGetOptions" />
  </member>
  <member name="Windows.SymSetParentWindow">
    <summary>
      <para>Sets the window that the caller will use to display a user interface.</para>
    </summary>
    <param name="hwnd">
      <para>A handle to the window.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymSetScopeFromAddr">
    <summary>
      <para>Sets the local scope to the symbol that matches the specified address.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Address">
      <para>The address.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso cref="SymGetScope" />
    <seealso cref="SymSetScopeFromIndex" />
  </member>
  <member name="Windows.SymSetScopeFromIndex">
    <summary>
      <para>Sets the local scope to the symbol that matches the specified index.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module.</para>
    </param>
    <param name="Index">
      <para>The unique value for the symbol.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso cref="SymGetScope" />
    <seealso cref="SymSetScopeFromAddr" />
  </member>
  <member name="Windows.SymSetScopeFromInlineContext">
    <summary>
      <para>Sets the local scope to the symbol that matches the specified address and inline
context.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="Address">
      <para>The address.</para>
    </param>
    <param name="InlineContext">
      <para>The inline context.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error
information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSetSearchPath">
    <summary>
      <para>Sets the search path for the specified process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SearchPath">
      <para>The symbol search path. The string can contain multiple paths separated by semicolons.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The symbol search path can be changed any number of times while the library is in use by an application. The change affects all future calls to the symbol handler.</para>
      <para>To get the current search path, call the
<see cref="SymGetSearchPath" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymGetSearchPath" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymSetSearchPathW">
    <summary>
      <para>Sets the search path for the specified process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SearchPath">
      <para>The symbol search path. The string can contain multiple paths separated by semicolons.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The symbol search path can be changed any number of times while the library is in use by an application. The change affects all future calls to the symbol handler.</para>
      <para>To get the current search path, call the
<see cref="SymGetSearchPath" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymGetSearchPath" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymSetSearchPath">
    <summary>
      <para>Sets the search path for the specified process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SearchPath">
      <para>The symbol search path. The string can contain multiple paths separated by semicolons.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The symbol search path can be changed any number of times while the library is in use by an application. The change affects all future calls to the symbol handler.</para>
      <para>To get the current search path, call the
<see cref="SymGetSearchPath" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymSetSearchPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymGetSearchPath" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymSetSearchPathW">
    <summary>
      <para>Sets the search path for the specified process.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SearchPath">
      <para>The symbol search path. The string can contain multiple paths separated by semicolons.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The symbol search path can be changed any number of times while the library is in use by an application. The change affects all future calls to the symbol handler.</para>
      <para>To get the current search path, call the
<see cref="SymGetSearchPath" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymSetSearchPath as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymGetSearchPath" />
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymSrvDeltaName">
    <summary>
      <para>Generates the name for a file that describes the relationship between two different versions of the same symbol or image file.
Using this feature prevents applications from having to regenerate such information every time they analyze two files.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SymPath">
      <para>The symbol path. The function uses only the symbol stores described in standard syntax for symbol stores. All other paths are ignored. If this parameter is <b>NULL</b>, the function uses the symbol path set using the
<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</para>
    </param>
    <param name="Type">
      <para>The extension for the generated file name.</para>
    </param>
    <param name="File1">
      <para>The path of the first version of the symbol or image file.</para>
    </param>
    <param name="File2">
      <para>The path of the second version of the symbol or image file.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the resulting file name.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function opens the two specified files, reads the indexing information from the header, and passes this information to the symbol server so it can create the file name. If you specify the <i>Type</i> parameter as "xml", the name is the index of <i>File1</i>, followed by a dash, followed by the index of <i>File2</i>, followed by an .xml extension. For example:</para>
      <para>3F3D5C755000-3F3D647621000.xml</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymSrvDeltaNameW">
    <summary>
      <para>Generates the name for a file that describes the relationship between two different versions of the same symbol or image file.
Using this feature prevents applications from having to regenerate such information every time they analyze two files.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SymPath">
      <para>The symbol path. The function uses only the symbol stores described in standard syntax for symbol stores. All other paths are ignored. If this parameter is <b>NULL</b>, the function uses the symbol path set using the
<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</para>
    </param>
    <param name="Type">
      <para>The extension for the generated file name.</para>
    </param>
    <param name="File1">
      <para>The path of the first version of the symbol or image file.</para>
    </param>
    <param name="File2">
      <para>The path of the second version of the symbol or image file.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the resulting file name.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function opens the two specified files, reads the indexing information from the header, and passes this information to the symbol server so it can create the file name. If you specify the <i>Type</i> parameter as "xml", the name is the index of <i>File1</i>, followed by a dash, followed by the index of <i>File2</i>, followed by an .xml extension. For example:</para>
      <para>3F3D5C755000-3F3D647621000.xml</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymSrvDeltaName">
    <summary>
      <para>Generates the name for a file that describes the relationship between two different versions of the same symbol or image file.
Using this feature prevents applications from having to regenerate such information every time they analyze two files.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SymPath">
      <para>The symbol path. The function uses only the symbol stores described in standard syntax for symbol stores. All other paths are ignored. If this parameter is <b>NULL</b>, the function uses the symbol path set using the
<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</para>
    </param>
    <param name="Type">
      <para>The extension for the generated file name.</para>
    </param>
    <param name="File1">
      <para>The path of the first version of the symbol or image file.</para>
    </param>
    <param name="File2">
      <para>The path of the second version of the symbol or image file.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the resulting file name.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function opens the two specified files, reads the indexing information from the header, and passes this information to the symbol server so it can create the file name. If you specify the <i>Type</i> parameter as "xml", the name is the index of <i>File1</i>, followed by a dash, followed by the index of <i>File2</i>, followed by an .xml extension. For example:</para>
      <para>3F3D5C755000-3F3D647621000.xml</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymSrvDeltaName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymSrvDeltaNameW">
    <summary>
      <para>Generates the name for a file that describes the relationship between two different versions of the same symbol or image file.
Using this feature prevents applications from having to regenerate such information every time they analyze two files.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SymPath">
      <para>The symbol path. The function uses only the symbol stores described in standard syntax for symbol stores. All other paths are ignored. If this parameter is <b>NULL</b>, the function uses the symbol path set using the
<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</para>
    </param>
    <param name="Type">
      <para>The extension for the generated file name.</para>
    </param>
    <param name="File1">
      <para>The path of the first version of the symbol or image file.</para>
    </param>
    <param name="File2">
      <para>The path of the second version of the symbol or image file.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the resulting file name.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function opens the two specified files, reads the indexing information from the header, and passes this information to the symbol server so it can create the file name. If you specify the <i>Type</i> parameter as "xml", the name is the index of <i>File1</i>, followed by a dash, followed by the index of <i>File2</i>, followed by an .xml extension. For example:</para>
      <para>3F3D5C755000-3F3D647621000.xml</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymSrvDeltaName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymSrvGetFileIndexes">
    <summary>
      <para>Retrieves the indexes for the specified .pdb, .dbg, or image file that would be used to store the file. The combination of these values uniquely identifies the file in the symbol server. They can be used when calling the <see cref="SymFindFileInPath" /> function to search for a file in a symbol store.</para>
    </summary>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <param name="Id">
      <para>The first of three identifying parameters.</para>
    </param>
    <param name="Val1">
      <para>The second of three identifying parameters.</para>
    </param>
    <param name="Val2">
      <para>The third of three identifying parameters.</para>
    </param>
    <param name="Flags">
      <para>This parameter is reserved for future use.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymSrvGetFileIndexesW">
    <summary>
      <para>Retrieves the indexes for the specified .pdb, .dbg, or image file that would be used to store the file. The combination of these values uniquely identifies the file in the symbol server. They can be used when calling the <see cref="SymFindFileInPath" /> function to search for a file in a symbol store.</para>
    </summary>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <param name="Id">
      <para>The first of three identifying parameters.</para>
    </param>
    <param name="Val1">
      <para>The second of three identifying parameters.</para>
    </param>
    <param name="Val2">
      <para>The third of three identifying parameters.</para>
    </param>
    <param name="Flags">
      <para>This parameter is reserved for future use.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymSrvGetFileIndexes">
    <summary>
      <para>Retrieves the indexes for the specified .pdb, .dbg, or image file that would be used to store the file. The combination of these values uniquely identifies the file in the symbol server. They can be used when calling the <see cref="SymFindFileInPath" /> function to search for a file in a symbol store.</para>
    </summary>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <param name="Id">
      <para>The first of three identifying parameters.</para>
    </param>
    <param name="Val1">
      <para>The second of three identifying parameters.</para>
    </param>
    <param name="Val2">
      <para>The third of three identifying parameters.</para>
    </param>
    <param name="Flags">
      <para>This parameter is reserved for future use.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymSrvGetFileIndexesW">
    <summary>
      <para>Retrieves the indexes for the specified .pdb, .dbg, or image file that would be used to store the file. The combination of these values uniquely identifies the file in the symbol server. They can be used when calling the <see cref="SymFindFileInPath" /> function to search for a file in a symbol store.</para>
    </summary>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <param name="Id">
      <para>The first of three identifying parameters.</para>
    </param>
    <param name="Val1">
      <para>The second of three identifying parameters.</para>
    </param>
    <param name="Val2">
      <para>The third of three identifying parameters.</para>
    </param>
    <param name="Flags">
      <para>This parameter is reserved for future use.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymSrvGetFileIndexInfo">
    <summary>
      <para>Retrieves the index information for the specified .pdb, .dbg, or image file.</para>
    </summary>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <param name="Info">
      <para>A <see cref="SYMSRV_INDEX_INFO" /> structure that receives the index information.</para>
    </param>
    <param name="Flags">
      <para>This parameter is reserved for future use.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function is not for general use.  Those writing utilities for the management of files in symbol server stores may use to this function to predict the relative path the symbol server will look for a file.  It is used by srctool.exe to actually populate symbol server stores.  It may also be of use to those looking to find the parameters to feed the <see cref="SymFindFileInPath" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMSRV_INDEX_INFO" />
  </member>
  <member name="Windows.SymSrvGetFileIndexInfoW">
    <summary>
      <para>Retrieves the index information for the specified .pdb, .dbg, or image file.</para>
    </summary>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <param name="Info">
      <para>A <see cref="SYMSRV_INDEX_INFO" /> structure that receives the index information.</para>
    </param>
    <param name="Flags">
      <para>This parameter is reserved for future use.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function is not for general use.  Those writing utilities for the management of files in symbol server stores may use to this function to predict the relative path the symbol server will look for a file.  It is used by srctool.exe to actually populate symbol server stores.  It may also be of use to those looking to find the parameters to feed the <see cref="SymFindFileInPath" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMSRV_INDEX_INFO" />
  </member>
  <member name="Windows.SymSrvGetFileIndexInfo">
    <summary>
      <para>Retrieves the index information for the specified .pdb, .dbg, or image file.</para>
    </summary>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <param name="Info">
      <para>A <see cref="SYMSRV_INDEX_INFO" /> structure that receives the index information.</para>
    </param>
    <param name="Flags">
      <para>This parameter is reserved for future use.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function is not for general use.  Those writing utilities for the management of files in symbol server stores may use to this function to predict the relative path the symbol server will look for a file.  It is used by srctool.exe to actually populate symbol server stores.  It may also be of use to those looking to find the parameters to feed the <see cref="SymFindFileInPath" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymSrvGetFileIndexInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMSRV_INDEX_INFO" />
  </member>
  <member name="Windows.SymSrvGetFileIndexInfoW">
    <summary>
      <para>Retrieves the index information for the specified .pdb, .dbg, or image file.</para>
    </summary>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <param name="Info">
      <para>A <see cref="SYMSRV_INDEX_INFO" /> structure that receives the index information.</para>
    </param>
    <param name="Flags">
      <para>This parameter is reserved for future use.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function is not for general use.  Those writing utilities for the management of files in symbol server stores may use to this function to predict the relative path the symbol server will look for a file.  It is used by srctool.exe to actually populate symbol server stores.  It may also be of use to those looking to find the parameters to feed the <see cref="SymFindFileInPath" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymSrvGetFileIndexInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SYMSRV_INDEX_INFO" />
  </member>
  <member name="Windows.SymSrvGetFileIndexString">
    <summary>
      <para>Retrieves the index string for the specified .pdb, .dbg, or image file.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SrvPath">
      <para>The path to the symbol server.</para>
    </param>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <param name="Index">
      <para>A pointer to a
buffer that receives the index string.</para>
    </param>
    <param name="Size">
      <para>The size of
the <i>Index</i> buffer, in characters.</para>
    </param>
    <param name="Flags">
      <para>This parameter is reserved for future use.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function is not for general use.  Those writing utilities for the management of files in symbol server stores may use to this function to predict the relative path the symbol server will look for a file.  It is used by srctool.exe to actually populate symbol server stores.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymSrvGetFileIndexStringW">
    <summary>
      <para>Retrieves the index string for the specified .pdb, .dbg, or image file.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SrvPath">
      <para>The path to the symbol server.</para>
    </param>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <param name="Index">
      <para>A pointer to a
buffer that receives the index string.</para>
    </param>
    <param name="Size">
      <para>The size of
the <i>Index</i> buffer, in characters.</para>
    </param>
    <param name="Flags">
      <para>This parameter is reserved for future use.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function is not for general use.  Those writing utilities for the management of files in symbol server stores may use to this function to predict the relative path the symbol server will look for a file.  It is used by srctool.exe to actually populate symbol server stores.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymSrvGetFileIndexString">
    <summary>
      <para>Retrieves the index string for the specified .pdb, .dbg, or image file.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SrvPath">
      <para>The path to the symbol server.</para>
    </param>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <param name="Index">
      <para>A pointer to a
buffer that receives the index string.</para>
    </param>
    <param name="Size">
      <para>The size of
the <i>Index</i> buffer, in characters.</para>
    </param>
    <param name="Flags">
      <para>This parameter is reserved for future use.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function is not for general use.  Those writing utilities for the management of files in symbol server stores may use to this function to predict the relative path the symbol server will look for a file.  It is used by srctool.exe to actually populate symbol server stores.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymSrvGetFileIndexString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymSrvGetFileIndexStringW">
    <summary>
      <para>Retrieves the index string for the specified .pdb, .dbg, or image file.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SrvPath">
      <para>The path to the symbol server.</para>
    </param>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <param name="Index">
      <para>A pointer to a
buffer that receives the index string.</para>
    </param>
    <param name="Size">
      <para>The size of
the <i>Index</i> buffer, in characters.</para>
    </param>
    <param name="Flags">
      <para>This parameter is reserved for future use.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function is not for general use.  Those writing utilities for the management of files in symbol server stores may use to this function to predict the relative path the symbol server will look for a file.  It is used by srctool.exe to actually populate symbol server stores.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymSrvGetFileIndexString as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymSrvGetSupplement">
    <summary>
      <para>Retrieves the specified file from the supplement for a symbol store.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SymPath">
      <para>The symbol path. The function uses only the symbol stores described in standard syntax for symbol stores. All other paths are ignored. If this parameter is <b>NULL</b>, the function uses the symbol path set using the
<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</para>
    </param>
    <param name="Node">
      <para>The symbol file associated with the supplemental file.</para>
    </param>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the fully qualified path for the supplemental file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>For more information on supplemental files, see <see cref="SymSrvStoreSupplement" />.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymSrvStoreSupplement" />
  </member>
  <member name="Windows.SymSrvGetSupplementW">
    <summary>
      <para>Retrieves the specified file from the supplement for a symbol store.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SymPath">
      <para>The symbol path. The function uses only the symbol stores described in standard syntax for symbol stores. All other paths are ignored. If this parameter is <b>NULL</b>, the function uses the symbol path set using the
<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</para>
    </param>
    <param name="Node">
      <para>The symbol file associated with the supplemental file.</para>
    </param>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the fully qualified path for the supplemental file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>For more information on supplemental files, see <see cref="SymSrvStoreSupplement" />.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymSrvStoreSupplement" />
  </member>
  <member name="Windows.SymSrvGetSupplement">
    <summary>
      <para>Retrieves the specified file from the supplement for a symbol store.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SymPath">
      <para>The symbol path. The function uses only the symbol stores described in standard syntax for symbol stores. All other paths are ignored. If this parameter is <b>NULL</b>, the function uses the symbol path set using the
<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</para>
    </param>
    <param name="Node">
      <para>The symbol file associated with the supplemental file.</para>
    </param>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the fully qualified path for the supplemental file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>For more information on supplemental files, see <see cref="SymSrvStoreSupplement" />.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymSrvGetSupplement as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymSrvStoreSupplement" />
  </member>
  <member name="Windows.SymSrvGetSupplementW">
    <summary>
      <para>Retrieves the specified file from the supplement for a symbol store.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SymPath">
      <para>The symbol path. The function uses only the symbol stores described in standard syntax for symbol stores. All other paths are ignored. If this parameter is <b>NULL</b>, the function uses the symbol path set using the
<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</para>
    </param>
    <param name="Node">
      <para>The symbol file associated with the supplemental file.</para>
    </param>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the fully qualified path for the supplemental file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>For more information on supplemental files, see <see cref="SymSrvStoreSupplement" />.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymSrvGetSupplement as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymSrvStoreSupplement" />
  </member>
  <member name="Windows.SymSrvIsStore">
    <summary>
      <para>Determines whether the specified path points to a symbol store.</para>
    </summary>
    <param name="hProcess">
      <para>The handle of a process that you previously passed to the
<see cref="SymInitialize" /> function. If this parameter is set to  <b>NULL</b>, the function determines only whether the store exists; otherwise, the function determines whether the store exists and contains a process entry for the specified process handle.</para>
    </param>
    <param name="path">
      <para>The path to a symbol store. The path can specify the default symbol store (for example, SRV*), point to an HTTP or HTTPS symbol server, or specify a UNC, absolute, or relative path to the store.</para>
    </param>
    <returns>
      <para>If the path specifies a symbol store, the function returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>. To get extended error information, call the <see cref="GetLastError" /> function.</para>
    </returns>
    <remarks>
      <para>If the path points to the default symbol store (for example, SRV*) or to an HTTP or HTTPS symbol server, the function assumes the store exists.</para>
      <para>If there is a proxy computer between the client computer and the server, the version of the SymSrv.dll on the proxy cannot be less than the version that is on the client.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymSrvIsStoreW">
    <summary>
      <para>Determines whether the specified path points to a symbol store.</para>
    </summary>
    <param name="hProcess">
      <para>The handle of a process that you previously passed to the
<see cref="SymInitialize" /> function. If this parameter is set to  <b>NULL</b>, the function determines only whether the store exists; otherwise, the function determines whether the store exists and contains a process entry for the specified process handle.</para>
    </param>
    <param name="path">
      <para>The path to a symbol store. The path can specify the default symbol store (for example, SRV*), point to an HTTP or HTTPS symbol server, or specify a UNC, absolute, or relative path to the store.</para>
    </param>
    <returns>
      <para>If the path specifies a symbol store, the function returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>. To get extended error information, call the <see cref="GetLastError" /> function.</para>
    </returns>
    <remarks>
      <para>If the path points to the default symbol store (for example, SRV*) or to an HTTP or HTTPS symbol server, the function assumes the store exists.</para>
      <para>If there is a proxy computer between the client computer and the server, the version of the SymSrv.dll on the proxy cannot be less than the version that is on the client.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymSrvIsStore">
    <summary>
      <para>Determines whether the specified path points to a symbol store.</para>
    </summary>
    <param name="hProcess">
      <para>The handle of a process that you previously passed to the
<see cref="SymInitialize" /> function. If this parameter is set to  <b>NULL</b>, the function determines only whether the store exists; otherwise, the function determines whether the store exists and contains a process entry for the specified process handle.</para>
    </param>
    <param name="path">
      <para>The path to a symbol store. The path can specify the default symbol store (for example, SRV*), point to an HTTP or HTTPS symbol server, or specify a UNC, absolute, or relative path to the store.</para>
    </param>
    <returns>
      <para>If the path specifies a symbol store, the function returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>. To get extended error information, call the <see cref="GetLastError" /> function.</para>
    </returns>
    <remarks>
      <para>If the path points to the default symbol store (for example, SRV*) or to an HTTP or HTTPS symbol server, the function assumes the store exists.</para>
      <para>If there is a proxy computer between the client computer and the server, the version of the SymSrv.dll on the proxy cannot be less than the version that is on the client.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymSrvIsStore as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymSrvIsStoreW">
    <summary>
      <para>Determines whether the specified path points to a symbol store.</para>
    </summary>
    <param name="hProcess">
      <para>The handle of a process that you previously passed to the
<see cref="SymInitialize" /> function. If this parameter is set to  <b>NULL</b>, the function determines only whether the store exists; otherwise, the function determines whether the store exists and contains a process entry for the specified process handle.</para>
    </param>
    <param name="path">
      <para>The path to a symbol store. The path can specify the default symbol store (for example, SRV*), point to an HTTP or HTTPS symbol server, or specify a UNC, absolute, or relative path to the store.</para>
    </param>
    <returns>
      <para>If the path specifies a symbol store, the function returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>. To get extended error information, call the <see cref="GetLastError" /> function.</para>
    </returns>
    <remarks>
      <para>If the path points to the default symbol store (for example, SRV*) or to an HTTP or HTTPS symbol server, the function assumes the store exists.</para>
      <para>If there is a proxy computer between the client computer and the server, the version of the SymSrv.dll on the proxy cannot be less than the version that is on the client.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymSrvIsStore as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymSrvStoreFile">
    <summary>
      <para>Stores a file in the specified symbol store.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SrvPath">
      <para>The symbol store.</para>
    </param>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <param name="Flags">
      <para>The flags that control the function.
This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSTOREOPT_COMPRESS</b>
                </description>
              </item>
              <item>
                <description>0x01</description>
              </item>
            </list>
          </description>
          <description>
            <para>Compress the file.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSTOREOPT_OVERWRITE</b>
                </description>
              </item>
              <item>
                <description>0x02</description>
              </item>
            </list>
          </description>
          <description>
            <para>Overwrite the file if it exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSTOREOPT_PASS_IF_EXISTS</b>
                </description>
              </item>
              <item>
                <description>0x40</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not report an error if the file already exists in the symbol store.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSTOREOPT_POINTER</b>
                </description>
              </item>
              <item>
                <description>0x08</description>
              </item>
            </list>
          </description>
          <description>
            <para>Store in File.ptr.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSTOREOPT_RETURNINDEX</b>
                </description>
              </item>
              <item>
                <description>0x04</description>
              </item>
            </list>
          </description>
          <description>
            <para>Return the index only.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to a null-terminated string that specifies the full-qualified path to the stored file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymSrvStoreFileW">
    <summary>
      <para>Stores a file in the specified symbol store.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SrvPath">
      <para>The symbol store.</para>
    </param>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <param name="Flags">
      <para>The flags that control the function.
This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSTOREOPT_COMPRESS</b>
                </description>
              </item>
              <item>
                <description>0x01</description>
              </item>
            </list>
          </description>
          <description>
            <para>Compress the file.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSTOREOPT_OVERWRITE</b>
                </description>
              </item>
              <item>
                <description>0x02</description>
              </item>
            </list>
          </description>
          <description>
            <para>Overwrite the file if it exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSTOREOPT_PASS_IF_EXISTS</b>
                </description>
              </item>
              <item>
                <description>0x40</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not report an error if the file already exists in the symbol store.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSTOREOPT_POINTER</b>
                </description>
              </item>
              <item>
                <description>0x08</description>
              </item>
            </list>
          </description>
          <description>
            <para>Store in File.ptr.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSTOREOPT_RETURNINDEX</b>
                </description>
              </item>
              <item>
                <description>0x04</description>
              </item>
            </list>
          </description>
          <description>
            <para>Return the index only.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to a null-terminated string that specifies the full-qualified path to the stored file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymSrvStoreFile">
    <summary>
      <para>Stores a file in the specified symbol store.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SrvPath">
      <para>The symbol store.</para>
    </param>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <param name="Flags">
      <para>The flags that control the function.
This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSTOREOPT_COMPRESS</b>
                </description>
              </item>
              <item>
                <description>0x01</description>
              </item>
            </list>
          </description>
          <description>
            <para>Compress the file.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSTOREOPT_OVERWRITE</b>
                </description>
              </item>
              <item>
                <description>0x02</description>
              </item>
            </list>
          </description>
          <description>
            <para>Overwrite the file if it exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSTOREOPT_PASS_IF_EXISTS</b>
                </description>
              </item>
              <item>
                <description>0x40</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not report an error if the file already exists in the symbol store.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSTOREOPT_POINTER</b>
                </description>
              </item>
              <item>
                <description>0x08</description>
              </item>
            </list>
          </description>
          <description>
            <para>Store in File.ptr.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSTOREOPT_RETURNINDEX</b>
                </description>
              </item>
              <item>
                <description>0x04</description>
              </item>
            </list>
          </description>
          <description>
            <para>Return the index only.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to a null-terminated string that specifies the full-qualified path to the stored file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymSrvStoreFile as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymSrvStoreFileW">
    <summary>
      <para>Stores a file in the specified symbol store.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SrvPath">
      <para>The symbol store.</para>
    </param>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <param name="Flags">
      <para>The flags that control the function.
This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSTOREOPT_COMPRESS</b>
                </description>
              </item>
              <item>
                <description>0x01</description>
              </item>
            </list>
          </description>
          <description>
            <para>Compress the file.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSTOREOPT_OVERWRITE</b>
                </description>
              </item>
              <item>
                <description>0x02</description>
              </item>
            </list>
          </description>
          <description>
            <para>Overwrite the file if it exists.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSTOREOPT_PASS_IF_EXISTS</b>
                </description>
              </item>
              <item>
                <description>0x40</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not report an error if the file already exists in the symbol store.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSTOREOPT_POINTER</b>
                </description>
              </item>
              <item>
                <description>0x08</description>
              </item>
            </list>
          </description>
          <description>
            <para>Store in File.ptr.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYMSTOREOPT_RETURNINDEX</b>
                </description>
              </item>
              <item>
                <description>0x04</description>
              </item>
            </list>
          </description>
          <description>
            <para>Return the index only.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to a null-terminated string that specifies the full-qualified path to the stored file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymSrvStoreFile as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
  </member>
  <member name="Windows.SymSrvStoreSupplement">
    <summary>
      <para>Stores a file in the specified supplement to a symbol store. The file is typically associated with a file in the symbol server.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SrvPath">
      <para>The path to the symbol store.</para>
    </param>
    <param name="Node">
      <para>The symbol file associated with the supplemental file.</para>
    </param>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <param name="Flags">
      <para>If this parameter is <b>SYMSTOREOPT_COMPRESS</b>, the file is compressed in the symbol store. Currently, there are no other supported values.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the fully qualified path for the supplemental file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>An important use for this function is to store delta files. For more information, see <see cref="SymSrvDeltaName" />.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>The symbol server stores supplemental files with the same extension in a common directory. For example, Sup1.xml would be stored in the following directory: <i>SymPath</i>\supplement\<i>Node</i>\xml.</para>
      <para>The administrator of a store can prevent users from writing supplemental files by creating a read-only file in the root of the store named Supplement. Alternatively, the administrator can create the supplement directory and use ACLs to control access.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymSrvGetSupplement" />
  </member>
  <member name="Windows.SymSrvStoreSupplementW">
    <summary>
      <para>Stores a file in the specified supplement to a symbol store. The file is typically associated with a file in the symbol server.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SrvPath">
      <para>The path to the symbol store.</para>
    </param>
    <param name="Node">
      <para>The symbol file associated with the supplemental file.</para>
    </param>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <param name="Flags">
      <para>If this parameter is <b>SYMSTOREOPT_COMPRESS</b>, the file is compressed in the symbol store. Currently, there are no other supported values.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the fully qualified path for the supplemental file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>An important use for this function is to store delta files. For more information, see <see cref="SymSrvDeltaName" />.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>The symbol server stores supplemental files with the same extension in a common directory. For example, Sup1.xml would be stored in the following directory: <i>SymPath</i>\supplement\<i>Node</i>\xml.</para>
      <para>The administrator of a store can prevent users from writing supplemental files by creating a read-only file in the root of the store named Supplement. Alternatively, the administrator can create the supplement directory and use ACLs to control access.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymSrvGetSupplement" />
  </member>
  <member name="Windows.SymSrvStoreSupplement">
    <summary>
      <para>Stores a file in the specified supplement to a symbol store. The file is typically associated with a file in the symbol server.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SymPath">
      <para>The path to the symbol store.</para>
    </param>
    <param name="Node">
      <para>The symbol file associated with the supplemental file.</para>
    </param>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <param name="Flags">
      <para>If this parameter is <b>SYMSTOREOPT_COMPRESS</b>, the file is compressed in the symbol store. Currently, there are no other supported values.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the fully qualified path for the supplemental file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>An important use for this function is to store delta files. For more information, see <see cref="SymSrvDeltaName" />.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>The symbol server stores supplemental files with the same extension in a common directory. For example, Sup1.xml would be stored in the following directory: <i>SymPath</i>\supplement\<i>Node</i>\xml.</para>
      <para>The administrator of a store can prevent users from writing supplemental files by creating a read-only file in the root of the store named Supplement. Alternatively, the administrator can create the supplement directory and use ACLs to control access.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymSrvStoreSupplement as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymSrvGetSupplement" />
  </member>
  <member name="Windows.SymSrvStoreSupplementW">
    <summary>
      <para>Stores a file in the specified supplement to a symbol store. The file is typically associated with a file in the symbol server.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to a process. This handle must have been previously passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="SymPath">
      <para>The path to the symbol store.</para>
    </param>
    <param name="Node">
      <para>The symbol file associated with the supplemental file.</para>
    </param>
    <param name="File">
      <para>The name of the file.</para>
    </param>
    <param name="Flags">
      <para>If this parameter is <b>SYMSTOREOPT_COMPRESS</b>, the file is compressed in the symbol store. Currently, there are no other supported values.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the fully qualified path for the supplemental file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>An important use for this function is to store delta files. For more information, see <see cref="SymSrvDeltaName" />.</para>
      <para>This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned to another buffer immediately.</para>
      <para>The symbol server stores supplemental files with the same extension in a common directory. For example, Sup1.xml would be stored in the following directory: <i>SymPath</i>\supplement\<i>Node</i>\xml.</para>
      <para>The administrator of a store can prevent users from writing supplemental files by creating a read-only file in the root of the store named Supplement. Alternatively, the administrator can create the supplement directory and use ACLs to control access.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines SymSrvStoreSupplement as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymSrvGetSupplement" />
  </member>
  <member name="Windows.SymUnDName">
    <summary>
      <para>Undecorates a decorated C++ symbol name.</para>
      <para>Applications can also use the <see cref="UnDecorateSymbolName" /> function.</para>
    </summary>
    <param name="sym">
      <para>A pointer to an
<see cref="IMAGEHLP_SYMBOL64" /> structure that specifies the symbol to be undecorated.</para>
    </param>
    <param name="UnDecName">
      <para>A pointer to a buffer that receives the undecorated name.</para>
    </param>
    <param name="UnDecNameLength">
      <para>The size of the <i>UnDecName</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymUnDName</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymUnDName</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymUnDName SymUnDName64
#else
BOOL
IMAGEAPI
SymUnDName(
    __in PIMAGEHLP_SYMBOL sym,
    __out_ecount(UnDecNameLength) PSTR UnDecName,
    __in DWORD UnDecNameLength
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="UnDecorateSymbolName" />
  </member>
  <member name="Windows.SymUnDName64">
    <summary>
      <para>Undecorates a decorated C++ symbol name.</para>
      <para>Applications can also use the <see cref="UnDecorateSymbolName" /> function.</para>
    </summary>
    <param name="sym">
      <para>A pointer to an
<see cref="IMAGEHLP_SYMBOL64" /> structure that specifies the symbol to be undecorated.</para>
    </param>
    <param name="UnDecName">
      <para>A pointer to a buffer that receives the undecorated name.</para>
    </param>
    <param name="UnDecNameLength">
      <para>The size of the <i>UnDecName</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymUnDName</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymUnDName</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymUnDName SymUnDName64
#else
BOOL
IMAGEAPI
SymUnDName(
    __in PIMAGEHLP_SYMBOL sym,
    __out_ecount(UnDecNameLength) PSTR UnDecName,
    __in DWORD UnDecNameLength
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="UnDecorateSymbolName" />
  </member>
  <member name="Windows.SymUnDName">
    <summary>
      <para>Undecorates a decorated C++ symbol name.</para>
      <para>Applications can also use the <see cref="UnDecorateSymbolName" /> function.</para>
    </summary>
    <param name="sym">
      <para>A pointer to an
<see cref="IMAGEHLP_SYMBOL64" /> structure that specifies the symbol to be undecorated.</para>
    </param>
    <param name="UnDecName">
      <para>A pointer to a buffer that receives the undecorated name.</para>
    </param>
    <param name="UnDecNameLength">
      <para>The size of the <i>UnDecName</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymUnDName</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymUnDName</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymUnDName SymUnDName64
#else
BOOL
IMAGEAPI
SymUnDName(
    __in PIMAGEHLP_SYMBOL sym,
    __out_ecount(UnDecNameLength) PSTR UnDecName,
    __in DWORD UnDecNameLength
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="UnDecorateSymbolName" />
  </member>
  <member name="Windows.SymUnDName64">
    <summary>
      <para>Undecorates a decorated C++ symbol name.</para>
      <para>Applications can also use the <see cref="UnDecorateSymbolName" /> function.</para>
    </summary>
    <param name="sym">
      <para>A pointer to an
<see cref="IMAGEHLP_SYMBOL64" /> structure that specifies the symbol to be undecorated.</para>
    </param>
    <param name="UnDecName">
      <para>A pointer to a buffer that receives the undecorated name.</para>
    </param>
    <param name="UnDecNameLength">
      <para>The size of the <i>UnDecName</i> buffer, in characters.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymUnDName</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymUnDName</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymUnDName SymUnDName64
#else
BOOL
IMAGEAPI
SymUnDName(
    __in PIMAGEHLP_SYMBOL sym,
    __out_ecount(UnDecNameLength) PSTR UnDecName,
    __in DWORD UnDecNameLength
    );
#endif
</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="UnDecorateSymbolName" />
  </member>
  <member name="Windows.SymUnloadModule">
    <summary>
      <para>Unloads the symbol table.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module that is to be unloaded.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymUnloadedModule</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymUnloadedModule</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymUnloadModule SymUnloadModule64
#else
BOOL
IMAGEAPI
SymUnloadModule(
    __in HANDLE hProcess,
    __in DWORD BaseOfDll
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/unloading-a-symbol-module">Unloading a Symbol Module</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymUnloadModule64">
    <summary>
      <para>Unloads the symbol table.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module that is to be unloaded.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymUnloadedModule</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymUnloadedModule</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymUnloadModule SymUnloadModule64
#else
BOOL
IMAGEAPI
SymUnloadModule(
    __in HANDLE hProcess,
    __in DWORD BaseOfDll
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/unloading-a-symbol-module">Unloading a Symbol Module</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymUnloadModule">
    <summary>
      <para>Unloads the symbol table.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module that is to be unloaded.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymUnloadedModule</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymUnloadedModule</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymUnloadModule SymUnloadModule64
#else
BOOL
IMAGEAPI
SymUnloadModule(
    __in HANDLE hProcess,
    __in DWORD BaseOfDll
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/unloading-a-symbol-module">Unloading a Symbol Module</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.SymUnloadModule64">
    <summary>
      <para>Unloads the symbol table.</para>
    </summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the
<see cref="SymInitialize" /> function.</para>
    </param>
    <param name="BaseOfDll">
      <para>The base address of the module that is to be unloaded.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
      <para>This function supersedes the <b>SymUnloadedModule</b> function. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/updated-platform-support">Updated Platform Support</a>. <b>SymUnloadedModule</b> is defined as follows in Dbghelp.h.</para>
      <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; defined(_IMAGEHLP64)
#define SymUnloadModule SymUnloadModule64
#else
BOOL
IMAGEAPI
SymUnloadModule(
    __in HANDLE hProcess,
    __in DWORD BaseOfDll
    );
#endif
</code>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/unloading-a-symbol-module">Unloading a Symbol Module</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymInitialize" />
  </member>
  <member name="Windows.UnDecorateSymbolName">
    <summary>
      <para>Undecorates the specified decorated C++ symbol name.</para>
    </summary>
    <param name="name">
      <para>The decorated C++ symbol name. This name can be identified by the first character of the name, which is
always a question mark (?).</para>
    </param>
    <param name="outputString">
      <para>A pointer to a string buffer that receives the undecorated name.</para>
    </param>
    <param name="maxStringLength">
      <para>The size of the <i>UnDecoratedName</i> buffer, in characters.</para>
    </param>
    <param name="flags">
      <para>The options for how the decorated name is undecorated. This parameter can be zero or more of the following
values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_32_BIT_DECODE</b>
                </description>
              </item>
              <item>
                <description>0x0800</description>
              </item>
            </list>
          </description>
          <description>
            <para>Undecorate 32-bit decorated names.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_COMPLETE</b>
                </description>
              </item>
              <item>
                <description>0x0000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Enable full undecoration.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NAME_ONLY</b>
                </description>
              </item>
              <item>
                <description>0x1000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Undecorate only the name for primary declaration. Returns [scope.]name. Does expand template
parameters.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_ACCESS_SPECIFIERS</b>
                </description>
              </item>
              <item>
                <description>0x0080</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of access specifiers for members.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_ALLOCATION_LANGUAGE</b>
                </description>
              </item>
              <item>
                <description>0x0010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of the declaration language specifier.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_ALLOCATION_MODEL</b>
                </description>
              </item>
              <item>
                <description>0x0008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of the declaration model.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_ARGUMENTS</b>
                </description>
              </item>
              <item>
                <description>0x2000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not undecorate function arguments.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_CV_THISTYPE</b>
                </description>
              </item>
              <item>
                <description>0x0040</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of CodeView modifiers on the <b>this</b> type for primary
declaration.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_FUNCTION_RETURNS</b>
                </description>
              </item>
              <item>
                <description>0x0004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of return types for primary declarations.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_LEADING_UNDERSCORES</b>
                </description>
              </item>
              <item>
                <description>0x0001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Remove leading underscores from Microsoft keywords.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_MEMBER_TYPE</b>
                </description>
              </item>
              <item>
                <description>0x0200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of the static or virtual attribute of members.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_MS_KEYWORDS</b>
                </description>
              </item>
              <item>
                <description>0x0002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of Microsoft keywords.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_MS_THISTYPE</b>
                </description>
              </item>
              <item>
                <description>0x0020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of Microsoft keywords on the <b>this</b> type for primary
declaration.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_RETURN_UDT_MODEL</b>
                </description>
              </item>
              <item>
                <description>0x0400</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of the Microsoft model for user-defined type returns.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_SPECIAL_SYMS</b>
                </description>
              </item>
              <item>
                <description>0x4000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not undecorate special names, such as vtable, vcall, vector, metatype, and so on.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_THISTYPE</b>
                </description>
              </item>
              <item>
                <description>0x0060</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable all modifiers on the <b>this</b> type.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_THROW_SIGNATURES</b>
                </description>
              </item>
              <item>
                <description>0x0100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of throw-signatures for functions and pointers to functions.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters in the
<i>UnDecoratedName</i> buffer, not including the NULL terminator.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
      <para>If the function fails and returns zero, the content of the <i>UnDecoratedName</i> buffer
is undetermined.</para>
    </returns>
    <remarks>
      <para>To use undecorated symbols, call the <see cref="SymSetOptions" /></para>
      <para>function with the <b>SYMOPT_UNDNAME</b> option.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-undecorated-symbol-names">Retrieving Undecorated Symbol Names</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymSetOptions" />
  </member>
  <member name="Windows.UnDecorateSymbolNameW">
    <summary>
      <para>Undecorates the specified decorated C++ symbol name.</para>
    </summary>
    <param name="name">
      <para>The decorated C++ symbol name. This name can be identified by the first character of the name, which is
always a question mark (?).</para>
    </param>
    <param name="outputString">
      <para>A pointer to a string buffer that receives the undecorated name.</para>
    </param>
    <param name="maxStringLength">
      <para>The size of the <i>UnDecoratedName</i> buffer, in characters.</para>
    </param>
    <param name="flags">
      <para>The options for how the decorated name is undecorated. This parameter can be zero or more of the following
values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_32_BIT_DECODE</b>
                </description>
              </item>
              <item>
                <description>0x0800</description>
              </item>
            </list>
          </description>
          <description>
            <para>Undecorate 32-bit decorated names.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_COMPLETE</b>
                </description>
              </item>
              <item>
                <description>0x0000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Enable full undecoration.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NAME_ONLY</b>
                </description>
              </item>
              <item>
                <description>0x1000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Undecorate only the name for primary declaration. Returns [scope.]name. Does expand template
parameters.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_ACCESS_SPECIFIERS</b>
                </description>
              </item>
              <item>
                <description>0x0080</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of access specifiers for members.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_ALLOCATION_LANGUAGE</b>
                </description>
              </item>
              <item>
                <description>0x0010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of the declaration language specifier.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_ALLOCATION_MODEL</b>
                </description>
              </item>
              <item>
                <description>0x0008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of the declaration model.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_ARGUMENTS</b>
                </description>
              </item>
              <item>
                <description>0x2000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not undecorate function arguments.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_CV_THISTYPE</b>
                </description>
              </item>
              <item>
                <description>0x0040</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of CodeView modifiers on the <b>this</b> type for primary
declaration.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_FUNCTION_RETURNS</b>
                </description>
              </item>
              <item>
                <description>0x0004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of return types for primary declarations.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_LEADING_UNDERSCORES</b>
                </description>
              </item>
              <item>
                <description>0x0001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Remove leading underscores from Microsoft keywords.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_MEMBER_TYPE</b>
                </description>
              </item>
              <item>
                <description>0x0200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of the static or virtual attribute of members.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_MS_KEYWORDS</b>
                </description>
              </item>
              <item>
                <description>0x0002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of Microsoft keywords.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_MS_THISTYPE</b>
                </description>
              </item>
              <item>
                <description>0x0020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of Microsoft keywords on the <b>this</b> type for primary
declaration.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_RETURN_UDT_MODEL</b>
                </description>
              </item>
              <item>
                <description>0x0400</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of the Microsoft model for user-defined type returns.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_SPECIAL_SYMS</b>
                </description>
              </item>
              <item>
                <description>0x4000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not undecorate special names, such as vtable, vcall, vector, metatype, and so on.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_THISTYPE</b>
                </description>
              </item>
              <item>
                <description>0x0060</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable all modifiers on the <b>this</b> type.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_THROW_SIGNATURES</b>
                </description>
              </item>
              <item>
                <description>0x0100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of throw-signatures for functions and pointers to functions.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters in the
<i>UnDecoratedName</i> buffer, not including the NULL terminator.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
      <para>If the function fails and returns zero, the content of the <i>UnDecoratedName</i> buffer
is undetermined.</para>
    </returns>
    <remarks>
      <para>To use undecorated symbols, call the <see cref="SymSetOptions" /></para>
      <para>function with the <b>SYMOPT_UNDNAME</b> option.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-undecorated-symbol-names">Retrieving Undecorated Symbol Names</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymSetOptions" />
  </member>
  <member name="Windows.UnDecorateSymbolName">
    <summary>
      <para>Undecorates the specified decorated C++ symbol name.</para>
    </summary>
    <param name="name">
      <para>The decorated C++ symbol name. This name can be identified by the first character of the name, which is
always a question mark (?).</para>
    </param>
    <param name="outputString">
      <para>A pointer to a string buffer that receives the undecorated name.</para>
    </param>
    <param name="maxStringLength">
      <para>The size of the <i>UnDecoratedName</i> buffer, in characters.</para>
    </param>
    <param name="flags">
      <para>The options for how the decorated name is undecorated. This parameter can be zero or more of the following
values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_32_BIT_DECODE</b>
                </description>
              </item>
              <item>
                <description>0x0800</description>
              </item>
            </list>
          </description>
          <description>
            <para>Undecorate 32-bit decorated names.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_COMPLETE</b>
                </description>
              </item>
              <item>
                <description>0x0000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Enable full undecoration.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NAME_ONLY</b>
                </description>
              </item>
              <item>
                <description>0x1000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Undecorate only the name for primary declaration. Returns [scope.]name. Does expand template
parameters.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_ACCESS_SPECIFIERS</b>
                </description>
              </item>
              <item>
                <description>0x0080</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of access specifiers for members.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_ALLOCATION_LANGUAGE</b>
                </description>
              </item>
              <item>
                <description>0x0010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of the declaration language specifier.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_ALLOCATION_MODEL</b>
                </description>
              </item>
              <item>
                <description>0x0008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of the declaration model.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_ARGUMENTS</b>
                </description>
              </item>
              <item>
                <description>0x2000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not undecorate function arguments.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_CV_THISTYPE</b>
                </description>
              </item>
              <item>
                <description>0x0040</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of CodeView modifiers on the <b>this</b> type for primary
declaration.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_FUNCTION_RETURNS</b>
                </description>
              </item>
              <item>
                <description>0x0004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of return types for primary declarations.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_LEADING_UNDERSCORES</b>
                </description>
              </item>
              <item>
                <description>0x0001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Remove leading underscores from Microsoft keywords.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_MEMBER_TYPE</b>
                </description>
              </item>
              <item>
                <description>0x0200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of the static or virtual attribute of members.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_MS_KEYWORDS</b>
                </description>
              </item>
              <item>
                <description>0x0002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of Microsoft keywords.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_MS_THISTYPE</b>
                </description>
              </item>
              <item>
                <description>0x0020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of Microsoft keywords on the <b>this</b> type for primary
declaration.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_RETURN_UDT_MODEL</b>
                </description>
              </item>
              <item>
                <description>0x0400</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of the Microsoft model for user-defined type returns.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_SPECIAL_SYMS</b>
                </description>
              </item>
              <item>
                <description>0x4000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not undecorate special names, such as vtable, vcall, vector, metatype, and so on.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_THISTYPE</b>
                </description>
              </item>
              <item>
                <description>0x0060</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable all modifiers on the <b>this</b> type.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_THROW_SIGNATURES</b>
                </description>
              </item>
              <item>
                <description>0x0100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of throw-signatures for functions and pointers to functions.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters in the
<i>UnDecoratedName</i> buffer, not including the NULL terminator.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
      <para>If the function fails and returns zero, the content of the <i>UnDecoratedName</i> buffer
is undetermined.</para>
    </returns>
    <remarks>
      <para>To use undecorated symbols, call the <see cref="SymSetOptions" /></para>
      <para>function with the <b>SYMOPT_UNDNAME</b> option.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-undecorated-symbol-names">Retrieving Undecorated Symbol Names</a>.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines UnDecorateSymbolName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymSetOptions" />
  </member>
  <member name="Windows.UnDecorateSymbolNameW">
    <summary>
      <para>Undecorates the specified decorated C++ symbol name.</para>
    </summary>
    <param name="name">
      <para>The decorated C++ symbol name. This name can be identified by the first character of the name, which is
always a question mark (?).</para>
    </param>
    <param name="outputString">
      <para>A pointer to a string buffer that receives the undecorated name.</para>
    </param>
    <param name="maxStringLength">
      <para>The size of the <i>UnDecoratedName</i> buffer, in characters.</para>
    </param>
    <param name="flags">
      <para>The options for how the decorated name is undecorated. This parameter can be zero or more of the following
values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_32_BIT_DECODE</b>
                </description>
              </item>
              <item>
                <description>0x0800</description>
              </item>
            </list>
          </description>
          <description>
            <para>Undecorate 32-bit decorated names.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_COMPLETE</b>
                </description>
              </item>
              <item>
                <description>0x0000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Enable full undecoration.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NAME_ONLY</b>
                </description>
              </item>
              <item>
                <description>0x1000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Undecorate only the name for primary declaration. Returns [scope.]name. Does expand template
parameters.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_ACCESS_SPECIFIERS</b>
                </description>
              </item>
              <item>
                <description>0x0080</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of access specifiers for members.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_ALLOCATION_LANGUAGE</b>
                </description>
              </item>
              <item>
                <description>0x0010</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of the declaration language specifier.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_ALLOCATION_MODEL</b>
                </description>
              </item>
              <item>
                <description>0x0008</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of the declaration model.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_ARGUMENTS</b>
                </description>
              </item>
              <item>
                <description>0x2000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not undecorate function arguments.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_CV_THISTYPE</b>
                </description>
              </item>
              <item>
                <description>0x0040</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of CodeView modifiers on the <b>this</b> type for primary
declaration.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_FUNCTION_RETURNS</b>
                </description>
              </item>
              <item>
                <description>0x0004</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of return types for primary declarations.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_LEADING_UNDERSCORES</b>
                </description>
              </item>
              <item>
                <description>0x0001</description>
              </item>
            </list>
          </description>
          <description>
            <para>Remove leading underscores from Microsoft keywords.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_MEMBER_TYPE</b>
                </description>
              </item>
              <item>
                <description>0x0200</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of the static or virtual attribute of members.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_MS_KEYWORDS</b>
                </description>
              </item>
              <item>
                <description>0x0002</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of Microsoft keywords.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_MS_THISTYPE</b>
                </description>
              </item>
              <item>
                <description>0x0020</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of Microsoft keywords on the <b>this</b> type for primary
declaration.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_RETURN_UDT_MODEL</b>
                </description>
              </item>
              <item>
                <description>0x0400</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of the Microsoft model for user-defined type returns.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_SPECIAL_SYMS</b>
                </description>
              </item>
              <item>
                <description>0x4000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Do not undecorate special names, such as vtable, vcall, vector, metatype, and so on.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_THISTYPE</b>
                </description>
              </item>
              <item>
                <description>0x0060</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable all modifiers on the <b>this</b> type.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>UNDNAME_NO_THROW_SIGNATURES</b>
                </description>
              </item>
              <item>
                <description>0x0100</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disable expansion of throw-signatures for functions and pointers to functions.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters in the
<i>UnDecoratedName</i> buffer, not including the NULL terminator.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
      <para>If the function fails and returns zero, the content of the <i>UnDecoratedName</i> buffer
is undetermined.</para>
    </returns>
    <remarks>
      <para>To use undecorated symbols, call the <see cref="SymSetOptions" /></para>
      <para>function with the <b>SYMOPT_UNDNAME</b> option.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to
this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize
all concurrent calls from more than one thread to this function.</para>
      <para>To call the Unicode version of this function, define <b>DBGHELP_TRANSLATE_TCHAR</b>.</para>
      <h4>Examples</h4>
      <para>For an example, see
<a href="https://docs.microsoft.com//windows/desktop/Debug/retrieving-undecorated-symbol-names">Retrieving Undecorated Symbol Names</a>.</para>
      <blockquote>
        <para>[!NOTE]
The dbghelp.h header defines UnDecorateSymbolName as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see <a href="https://docs.microsoft.com//windows/win32/intl/conventions-for-function-prototypes">Conventions for Function Prototypes</a>.</para>
      </blockquote>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="SymSetOptions" />
  </member>
  <member name="Windows.UnmapDebugInformation">
    <summary>
      <para>Deallocates the memory and resources allocated by a call to the
<see cref="MapDebugInformation" /> function.
<b>Note</b>  This function is provided only for backward compatibility. New applications should use the
<see cref="SymUnloadModule64" /> function.</para>
    </summary>
    <param name="DebugInfo">
      <para>A pointer to an
<see cref="IMAGE_DEBUG_INFORMATION" /> structure that is returned from a call to
<see cref="MapDebugInformation" />.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<b>UnmapDebugInformation</b> function is the counterpart to the
<see cref="MapDebugInformation" /> function and must be used to deallocate the memory and resources allocated by a call to the
<see cref="MapDebugInformation" /> function.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/Debug/dbghelp-functions">DbgHelp Functions</seealso>
    <seealso cref="IMAGE_DEBUG_INFORMATION" />
    <seealso cref="MapDebugInformation" />
  </member>
</doc>