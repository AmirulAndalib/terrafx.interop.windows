<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.EnumDirTree">
    <summary>Enumerates all occurrences of the specified file in the specified directory tree.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="RootPath">The path where the function should begin searching for the file.</param>
    <param name="InputPathName">The name of the file to be found. You can specify a partial path.</param>
    <param name="OutputPathBuffer">
      <para>A pointer to a buffer that receives the full path of the file. If the function fails or does not find a matching file, this buffer will still contain the last full path that was found.</para>
      <para>This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="cb">An application-defined callback function, or <b>NULL</b>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumdirtree_callback">EnumDirTreeProc</a>.</param>
    <param name="data">The user-defined data or <b>NULL</b>. This value is passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumDirTreeW">
    <summary>Enumerates all occurrences of the specified file in the specified directory tree.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="RootPath">The path where the function should begin searching for the file.</param>
    <param name="InputPathName">The name of the file to be found. You can specify a partial path.</param>
    <param name="OutputPathBuffer">
      <para>A pointer to a buffer that receives the full path of the file. If the function fails or does not find a matching file, this buffer will still contain the last full path that was found.</para>
      <para>This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="cb">An application-defined callback function, or <b>NULL</b>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumdirtree_callback">EnumDirTreeProc</a>.</param>
    <param name="data">The user-defined data or <b>NULL</b>. This value is passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumDirTree">
    <summary>Enumerates all occurrences of the specified file in the specified directory tree.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="RootPath">The path where the function should begin searching for the file.</param>
    <param name="InputPathName">The name of the file to be found. You can specify a partial path.</param>
    <param name="OutputPathBuffer">
      <para>A pointer to a buffer that receives the full path of the file. If the function fails or does not find a matching file, this buffer will still contain the last full path that was found.</para>
      <para>This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="cb">An application-defined callback function, or <b>NULL</b>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumdirtree_callback">EnumDirTreeProc</a>.</param>
    <param name="data">The user-defined data or <b>NULL</b>. This value is passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumDirTreeW">
    <summary>Enumerates all occurrences of the specified file in the specified directory tree.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="RootPath">The path where the function should begin searching for the file.</param>
    <param name="InputPathName">The name of the file to be found. You can specify a partial path.</param>
    <param name="OutputPathBuffer">
      <para>A pointer to a buffer that receives the full path of the file. If the function fails or does not find a matching file, this buffer will still contain the last full path that was found.</para>
      <para>This parameter is optional and can be <b>NULL</b>.</para>
    </param>
    <param name="cb">An application-defined callback function, or <b>NULL</b>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumdirtree_callback">EnumDirTreeProc</a>.</param>
    <param name="data">The user-defined data or <b>NULL</b>. This value is passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumerateLoadedModules">
    <summary>Enumerates the loaded modules for the specified process.</summary>
    <param name="hProcess">A handle to the process whose modules will be enumerated.</param>
    <param name="EnumLoadedModulesCallback">An application-defined callback function. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</param>
    <param name="UserContext">Optional user-defined data. This value is passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumerateLoadedModules64">
    <summary>Enumerates the loaded modules for the specified process.</summary>
    <param name="hProcess">A handle to the process whose modules will be enumerated.</param>
    <param name="EnumLoadedModulesCallback">An application-defined callback function. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</param>
    <param name="UserContext">Optional user-defined data. This value is passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumerateLoadedModulesW64">
    <summary>Enumerates the loaded modules for the specified process.</summary>
    <param name="hProcess">A handle to the process whose modules will be enumerated.</param>
    <param name="EnumLoadedModulesCallback">An application-defined callback function. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</param>
    <param name="UserContext">Optional user-defined data. This value is passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumerateLoadedModules">
    <summary>Enumerates the loaded modules for the specified process.</summary>
    <param name="hProcess">A handle to the process whose modules will be enumerated.</param>
    <param name="EnumLoadedModulesCallback">An application-defined callback function. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</param>
    <param name="UserContext">Optional user-defined data. This value is passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumerateLoadedModules64">
    <summary>Enumerates the loaded modules for the specified process.</summary>
    <param name="hProcess">A handle to the process whose modules will be enumerated.</param>
    <param name="EnumLoadedModulesCallback">An application-defined callback function. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</param>
    <param name="UserContext">Optional user-defined data. This value is passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumerateLoadedModulesW64">
    <summary>Enumerates the loaded modules for the specified process.</summary>
    <param name="hProcess">A handle to the process whose modules will be enumerated.</param>
    <param name="EnumLoadedModulesCallback">An application-defined callback function. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</param>
    <param name="UserContext">Optional user-defined data. This value is passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumerateLoadedModulesEx">
    <summary>Enumerates the loaded modules for the specified process.</summary>
    <param name="hProcess">A handle to the process whose modules will be enumerated.</param>
    <param name="EnumLoadedModulesCallback">An application-defined callback function. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</param>
    <param name="UserContext">Optional user-defined data. This value is passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumerateLoadedModulesExW">
    <summary>Enumerates the loaded modules for the specified process.</summary>
    <param name="hProcess">A handle to the process whose modules will be enumerated.</param>
    <param name="EnumLoadedModulesCallback">An application-defined callback function. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</param>
    <param name="UserContext">Optional user-defined data. This value is passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumerateLoadedModulesEx">
    <summary>Enumerates the loaded modules for the specified process.</summary>
    <param name="hProcess">A handle to the process whose modules will be enumerated.</param>
    <param name="EnumLoadedModulesCallback">An application-defined callback function. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</param>
    <param name="UserContext">Optional user-defined data. This value is passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumerateLoadedModulesExW">
    <summary>Enumerates the loaded modules for the specified process.</summary>
    <param name="hProcess">A handle to the process whose modules will be enumerated.</param>
    <param name="EnumLoadedModulesCallback">An application-defined callback function. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</param>
    <param name="UserContext">Optional user-defined data. This value is passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumerateLoadedModules">
    <summary>Enumerates the loaded modules for the specified process.</summary>
    <param name="hProcess">A handle to the process whose modules will be enumerated.</param>
    <param name="EnumLoadedModulesCallback">An application-defined callback function. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</param>
    <param name="UserContext">Optional user-defined data. This value is passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumerateLoadedModules64">
    <summary>Enumerates the loaded modules for the specified process.</summary>
    <param name="hProcess">A handle to the process whose modules will be enumerated.</param>
    <param name="EnumLoadedModulesCallback">An application-defined callback function. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</param>
    <param name="UserContext">Optional user-defined data. This value is passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.EnumerateLoadedModulesW64">
    <summary>Enumerates the loaded modules for the specified process.</summary>
    <param name="hProcess">A handle to the process whose modules will be enumerated.</param>
    <param name="EnumLoadedModulesCallback">An application-defined callback function. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumloaded_modules_callback">EnumerateLoadedModulesProc64</a>.</param>
    <param name="UserContext">Optional user-defined data. This value is passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindDebugInfoFile">
    <summary>
      <para>Locates a<a href="https://docs.microsoft.com//windows/desktop/Debug/symbol-files">debug (.dbg) file</a>.</para>
      <para>To provide a callback function to verify the symbol file located, use the<see cref="FindDebugInfoFileEx" /> function.</para>
    </summary>
    <param name="FileName">The name of the .dbg file that is desired. You can use a partial path.</param>
    <param name="SymbolPath">The path where symbol files are located. This can be multiple paths separated by semicolons. To retrieve the symbol path, use the<see cref="SymGetSearchPath" /> function.</param>
    <param name="DebugFilePath">A pointer to a buffer that receives the full path of the .dbg file.</param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the .dbg file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindDebugInfoFileEx">
    <summary>Locates the specified<a href="https://docs.microsoft.com//windows/desktop/Debug/symbol-files">debug (.dbg) file</a>.</summary>
    <param name="FileName">The name of the .dbg file to locate. You can use a partial path.</param>
    <param name="SymbolPath">The path where symbol files are located. This can be multiple paths separated by semicolons. To retrieve the symbol path, use the<see cref="SymGetSearchPath" /> function.</param>
    <param name="DebugFilePath">A pointer to a buffer that receives the full path of the .dbg file.</param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct file was found or the function should continue its search. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</a>.</para>
      <para>This parameter may be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">Optional user-defined data to pass to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the .dbg file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindDebugInfoFileExW">
    <summary>Locates the specified<a href="https://docs.microsoft.com//windows/desktop/Debug/symbol-files">debug (.dbg) file</a>.</summary>
    <param name="FileName">The name of the .dbg file to locate. You can use a partial path.</param>
    <param name="SymbolPath">The path where symbol files are located. This can be multiple paths separated by semicolons. To retrieve the symbol path, use the<see cref="SymGetSearchPath" /> function.</param>
    <param name="DebugFilePath">A pointer to a buffer that receives the full path of the .dbg file.</param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct file was found or the function should continue its search. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</a>.</para>
      <para>This parameter may be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">Optional user-defined data to pass to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the .dbg file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindDebugInfoFileEx">
    <summary>Locates the specified<a href="https://docs.microsoft.com//windows/desktop/Debug/symbol-files">debug (.dbg) file</a>.</summary>
    <param name="FileName">The name of the .dbg file to locate. You can use a partial path.</param>
    <param name="SymbolPath">The path where symbol files are located. This can be multiple paths separated by semicolons. To retrieve the symbol path, use the<see cref="SymGetSearchPath" /> function.</param>
    <param name="DebugFilePath">A pointer to a buffer that receives the full path of the .dbg file.</param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct file was found or the function should continue its search. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</a>.</para>
      <para>This parameter may be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">Optional user-defined data to pass to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the .dbg file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindDebugInfoFileExW">
    <summary>Locates the specified<a href="https://docs.microsoft.com//windows/desktop/Debug/symbol-files">debug (.dbg) file</a>.</summary>
    <param name="FileName">The name of the .dbg file to locate. You can use a partial path.</param>
    <param name="SymbolPath">The path where symbol files are located. This can be multiple paths separated by semicolons. To retrieve the symbol path, use the<see cref="SymGetSearchPath" /> function.</param>
    <param name="DebugFilePath">A pointer to a buffer that receives the full path of the .dbg file.</param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct file was found or the function should continue its search. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</a>.</para>
      <para>This parameter may be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">Optional user-defined data to pass to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the .dbg file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindExecutableImage">
    <summary>
      <para>Locates an executable file.</para>
      <para>To specify a callback function, use the<see cref="FindExecutableImageEx" /> function.</para>
    </summary>
    <param name="FileName">The name of the symbol file to be located. This parameter can be a partial path.</param>
    <param name="SymbolPath">The path where symbol files are located. This can be multiple paths separated by semicolons. To retrieve the symbol path, use the<see cref="SymGetSearchPath" /> function.</param>
    <param name="ImageFilePath">A pointer to a buffer that receives the full path of the executable file.</param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the executable file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindExecutableImageEx">
    <summary>Locates the specified executable file.</summary>
    <param name="FileName">The name of the symbol file to be located. This parameter can be a partial path.</param>
    <param name="SymbolPath">The path where symbol files are located. This string can contain multiple paths separated by semicolons. To retrieve the symbol path, use the<see cref="SymGetSearchPath" /> function.</param>
    <param name="ImageFilePath">A pointer to a buffer that receives the full path of the executable file.</param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct executable file was found, or whether the function should continue its search. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">Optional user-defined data for the callback function. This parameter can be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the executable file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindExecutableImageExW">
    <summary>Locates the specified executable file.</summary>
    <param name="FileName">The name of the symbol file to be located. This parameter can be a partial path.</param>
    <param name="SymbolPath">The path where symbol files are located. This string can contain multiple paths separated by semicolons. To retrieve the symbol path, use the<see cref="SymGetSearchPath" /> function.</param>
    <param name="ImageFilePath">A pointer to a buffer that receives the full path of the executable file.</param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct executable file was found, or whether the function should continue its search. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">Optional user-defined data for the callback function. This parameter can be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the executable file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindExecutableImageEx">
    <summary>Locates the specified executable file.</summary>
    <param name="FileName">The name of the symbol file to be located. This parameter can be a partial path.</param>
    <param name="SymbolPath">The path where symbol files are located. This string can contain multiple paths separated by semicolons. To retrieve the symbol path, use the<see cref="SymGetSearchPath" /> function.</param>
    <param name="ImageFilePath">A pointer to a buffer that receives the full path of the executable file.</param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct executable file was found, or whether the function should continue its search. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">Optional user-defined data for the callback function. This parameter can be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the executable file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.FindExecutableImageExW">
    <summary>Locates the specified executable file.</summary>
    <param name="FileName">The name of the symbol file to be located. This parameter can be a partial path.</param>
    <param name="SymbolPath">The path where symbol files are located. This string can contain multiple paths separated by semicolons. To retrieve the symbol path, use the<see cref="SymGetSearchPath" /> function.</param>
    <param name="ImageFilePath">A pointer to a buffer that receives the full path of the executable file.</param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct executable file was found, or whether the function should continue its search. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">Optional user-defined data for the callback function. This parameter can be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the executable file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.GetSymLoadError">
    <summary>Gets the last symbol load error.</summary>
    <returns>The last symbol load error.</returns>
  </member>
  <member name="Windows.GetTimestampForLoadedLibrary">
    <summary>Retrieves the time stamp of a loaded image.</summary>
    <param name="Module">The base address of an image that is mapped into memory by a call to the<see cref="MapViewOfFile" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is the time stamp from the image.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ImageDirectoryEntryToData">
    <summary>
      <para>Obtains access to image-specific data.</para>
      <para>This function has been superseded by the<see cref="ImageDirectoryEntryToDataEx" /> function. Use<b>ImageDirectoryEntryToDataEx</b> to retrieve the section header.</para>
    </summary>
    <param name="Base">The base address of the image.</param>
    <param name="MappedAsImage">If this parameter is <b>TRUE</b>, the file is mapped by the system as an image. If the flag is <b>FALSE</b>, the file is mapped as a data file by the<see cref="MapViewOfFile" /> function.</param>
    <param name="DirectoryEntry">
      <para>The index number of the desired directory entry. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_ARCHITECTURE</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>Architecture-specific data</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_BASERELOC</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>Base relocation table</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>Bound import directory</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR</b>
                </term>
              </listheader>
              <listheader>
                <term>14</term>
              </listheader>
            </list>
          </description>
          <description>COM descriptor table</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_DEBUG</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>Debug directory</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT</b>
                </term>
              </listheader>
              <listheader>
                <term>13</term>
              </listheader>
            </list>
          </description>
          <description>Delay import table</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_EXCEPTION</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Exception directory</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_EXPORT</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>Export directory</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_GLOBALPTR</b>
                </term>
              </listheader>
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>The relative virtual address of global pointer</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_IAT</b>
                </term>
              </listheader>
              <listheader>
                <term>12</term>
              </listheader>
            </list>
          </description>
          <description>Import address table</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_IMPORT</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Import directory</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>Load configuration directory</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_RESOURCE</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Resource directory</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_SECURITY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Security directory</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_TLS</b>
                </term>
              </listheader>
              <listheader>
                <term>9</term>
              </listheader>
            </list>
          </description>
          <description>Thread local storage directory</description>
        </listheader>
      </list>
    </param>
    <param name="Size">A pointer to a variable that receives the size of the data for the directory entry, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the directory entry's data.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ImageDirectoryEntryToDataEx">
    <summary>Locates a directory entry within the image header and returns the address of the data for the directory entry. This function returns the section header for the data located, if one exists.</summary>
    <param name="Base">The base address of the image or data file.</param>
    <param name="MappedAsImage">If the flag is <b>TRUE</b>, the file is mapped by the system as an image. If this flag is <b>FALSE</b>, the file is mapped as a data file by the<see cref="MapViewOfFile" /> function.</param>
    <param name="DirectoryEntry">
      <para>The directory entry to be located. The value must be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_ARCHITECTURE</b>
                </term>
              </listheader>
              <listheader>
                <term>7</term>
              </listheader>
            </list>
          </description>
          <description>Architecture-specific data</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_BASERELOC</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>Base relocation table</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT</b>
                </term>
              </listheader>
              <listheader>
                <term>11</term>
              </listheader>
            </list>
          </description>
          <description>Bound import directory</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR</b>
                </term>
              </listheader>
              <listheader>
                <term>14</term>
              </listheader>
            </list>
          </description>
          <description>COM descriptor table</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_DEBUG</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>Debug directory</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT</b>
                </term>
              </listheader>
              <listheader>
                <term>13</term>
              </listheader>
            </list>
          </description>
          <description>Delay import table</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_EXCEPTION</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Exception directory</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_EXPORT</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>Export directory</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_GLOBALPTR</b>
                </term>
              </listheader>
              <listheader>
                <term>8</term>
              </listheader>
            </list>
          </description>
          <description>The relative virtual address of global pointer</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_IAT</b>
                </term>
              </listheader>
              <listheader>
                <term>12</term>
              </listheader>
            </list>
          </description>
          <description>Import address table</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_IMPORT</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Import directory</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG</b>
                </term>
              </listheader>
              <listheader>
                <term>10</term>
              </listheader>
            </list>
          </description>
          <description>Load configuration directory</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_RESOURCE</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Resource directory</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_SECURITY</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Security directory</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_DIRECTORY_ENTRY_TLS</b>
                </term>
              </listheader>
              <listheader>
                <term>9</term>
              </listheader>
            </list>
          </description>
          <description>Thread local storage directory</description>
        </listheader>
      </list>
    </param>
    <param name="Size">A pointer to a variable that receives the size of the data for the directory entry that is located.</param>
    <param name="FoundHeader">A pointer to an<see cref="IMAGE_SECTION_HEADER" /> structure that receives the data. If the section header does not exist, this parameter is <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the data for the directory entry.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
      <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
    </returns>
  </member>
  <member name="Windows.ImagehlpApiVersion">
    <summary>
      <para>Retrieves the version information of the DbgHelp library installed on the system.</para>
      <para>To indicate the version of the library with which the application was built, use the<see cref="ImagehlpApiVersionEx" /> function.</para>
    </summary>
    <returns>The return value is a pointer to an<see cref="API_VERSION" /> structure.</returns>
  </member>
  <member name="Windows.ImagehlpApiVersionEx">
    <summary>Modifies the version information of the library used by the application.</summary>
    <param name="AppVersion">A pointer to an<see cref="API_VERSION" /> structure that contains valid version information for your application.</param>
    <returns>The return value is a pointer to an<see cref="API_VERSION" /> structure.</returns>
  </member>
  <member name="Windows.ImageNtHeader">
    <summary>Locates the<see cref="IMAGE_NT_HEADERS" /> structure in a PE image and returns a pointer to the data.</summary>
    <param name="Base">The base address of an image that is mapped into memory by a call to the<see cref="MapViewOfFile" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to an<see cref="IMAGE_NT_HEADERS" /> structure.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ImageRvaToSection">
    <summary>Locates a relative virtual address (RVA) within the image header of a file that is mapped as a file and returns a pointer to the section table entry for that RVA.</summary>
    <param name="NtHeaders">A pointer to an<see cref="IMAGE_NT_HEADERS" /> structure. This structure can be obtained by calling the<see cref="ImageNtHeader" /> function.</param>
    <param name="Base">This parameter is reserved.</param>
    <param name="Rva">The relative virtual address to be located.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to an<see cref="IMAGE_SECTION_HEADER" /> structure.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ImageRvaToVa">
    <summary>Locates a relative virtual address (RVA) within the image header of a file that is mapped as a file and returns the virtual address of the corresponding byte in the file.</summary>
    <param name="NtHeaders">A pointer to an<see cref="IMAGE_NT_HEADERS" /> structure. This structure can be obtained by calling the<see cref="ImageNtHeader" /> function.</param>
    <param name="Base">The base address of an image that is mapped into memory through a call to the<see cref="MapViewOfFile" /> function.</param>
    <param name="Rva">The relative virtual address to be located.</param>
    <param name="LastRvaSection">A pointer to an<see cref="IMAGE_SECTION_HEADER" /> structure that specifies the last RVA section. This is an optional parameter. When specified, it points to a variable that contains the last section value used for the specified image to translate an RVA to a VA.</param>
    <returns>
      <para>If the function succeeds, the return value is the virtual address in the mapped file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.MakeSureDirectoryPathExists">
    <summary>Creates all the directories in the specified path, beginning with the root.</summary>
    <param name="DirPath">A valid path name. If the final component of the path is a directory, not a file name, the string must end with a backslash (\) character.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.MapDebugInformation">
    <summary>
      <para>Obtains access to the debugging information for an image.</para>
      <div>
        <b>Note</b>  This function is provided only for backward compatibility. It does not return reliable information. New applications should use the <see cref="SymGetModuleInfo64" /> and <see cref="SymLoadModule64" /> functions.</div>
    </summary>
    <param name="FileHandle">A handle to an open executable image or <b>NULL</b>.</param>
    <param name="FileName">The name of an executable image file or <b>NULL</b>.</param>
    <param name="SymbolPath">The path where symbol files are located. The path can be multiple paths separated by semicolons. To retrieve the symbol path, use the<see cref="SymGetSearchPath" /> function.</param>
    <param name="ImageBase">The base address for the image or zero.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to an<see cref="IMAGE_DEBUG_INFORMATION" /> structure.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SearchTreeForFile">
    <summary>Searches a directory tree for a specified file.</summary>
    <param name="RootPath">The path where the function should begin searching for the file.</param>
    <param name="InputPathName">The file for which the function will search. You can use a partial path.</param>
    <param name="OutputPathBuffer">A pointer to a buffer that receives the full path to the file that is found. This string is not modified if the return value is <b>FALSE</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SearchTreeForFileW">
    <summary>Searches a directory tree for a specified file.</summary>
    <param name="RootPath">The path where the function should begin searching for the file.</param>
    <param name="InputPathName">The file for which the function will search. You can use a partial path.</param>
    <param name="OutputPathBuffer">A pointer to a buffer that receives the full path to the file that is found. This string is not modified if the return value is <b>FALSE</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SearchTreeForFile">
    <summary>Searches a directory tree for a specified file.</summary>
    <param name="RootPath">The path where the function should begin searching for the file.</param>
    <param name="InputPathName">The file for which the function will search. You can use a partial path.</param>
    <param name="OutputPathBuffer">A pointer to a buffer that receives the full path to the file that is found. This string is not modified if the return value is <b>FALSE</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SearchTreeForFileW">
    <summary>Searches a directory tree for a specified file.</summary>
    <param name="RootPath">The path where the function should begin searching for the file.</param>
    <param name="InputPathName">The file for which the function will search. You can use a partial path.</param>
    <param name="OutputPathBuffer">A pointer to a buffer that receives the full path to the file that is found. This string is not modified if the return value is <b>FALSE</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SetSymLoadError">
    <summary>Sets a symbol load error.</summary>
    <param name="error">A symbol load error.</param>
    <returns>This function does not return a value.</returns>
  </member>
  <member name="Windows.StackWalk">
    <summary>Obtains a stack trace.</summary>
    <param name="MachineType">
      <para>The architecture type of the computer for which the stack trace is generated. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_FILE_MACHINE_I386</b>
                </term>
              </listheader>
              <listheader>
                <term>0x014c</term>
              </listheader>
            </list>
          </description>
          <description>Intel x86</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_FILE_MACHINE_IA64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0200</term>
              </listheader>
            </list>
          </description>
          <description>Intel Itanium</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_FILE_MACHINE_AMD64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8664</term>
              </listheader>
            </list>
          </description>
          <description>x64 (AMD64 or EM64T)</description>
        </listheader>
      </list>
    </param>
    <param name="hProcess">A handle to the process for which the stack trace is generated. If the caller supplies a valid callback pointer for the <i>ReadMemoryRoutine</i> parameter, then this value does not have to be a valid process handle. It can be a token that is unique and consistently the same for all calls to the<b>StackWalk64</b> function. If the symbol handler is used with<b>StackWalk64</b>, use the same process handles for the calls to each function.</param>
    <param name="hThread">A handle to the thread for which the stack trace is generated. If the caller supplies a valid callback pointer for the <i>ReadMemoryRoutine</i> parameter, then this value does not have to be a valid thread handle. It can be a token that is unique and consistently the same for all calls to the<b>StackWalk64</b> function.</param>
    <param name="StackFrame">A pointer to a <see cref="STACKFRAME64" /> structure. This structure receives information for the next frame, if the function call succeeds.</param>
    <param name="ContextRecord">
      <para>A pointer to a <see cref="CONTEXT" /> structure. This parameter is required only when the <i>MachineType</i> parameter is not<b>IMAGE_FILE_MACHINE_I386</b>. However, it is recommended that this parameter contain a valid context record. This allows <b>StackWalk64</b> to handle a greater variety of situations.</para>
      <para>This context may be modified, so do not pass a context record that should not be modified.</para>
    </param>
    <param name="ReadMemoryRoutine">
      <para>A callback routine that provides memory read services. When the<b>StackWalk64</b> function needs to read memory from the process's address space, the<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pread_process_memory_routine">ReadProcessMemoryProc64</a> callback is used.</para>
      <para>If this parameter is <b>NULL</b>, then the function uses a default routine. In this case, the <i>hProcess</i> parameter must be a valid process handle.</para>
      <para>If this parameter is not<b>NULL</b>, the application should implement and register a symbol handler callback function that handles <b>CBA_READ_MEMORY</b>.</para>
    </param>
    <param name="FunctionTableAccessRoutine">
      <para>A callback routine that provides access to the run-time function table for the process. This parameter is required because the <b>StackWalk64</b> function does not have access to the process's run-time function table. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfunction_table_access_routine">FunctionTableAccessProc64</a>.</para>
      <para>The symbol handler provides functions that load and access the run-time table. If these functions are used, then <see cref="SymFunctionTableAccess64" /> can be passed as a valid parameter.</para>
    </param>
    <param name="GetModuleBaseRoutine">
      <para>A callback routine that provides a module base for any given virtual address. This parameter is required. For more information, see <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pget_module_base_routine">GetModuleBaseProc64</a>.</para>
      <para>The symbol handler provides functions that load and maintain module information. If these functions are used, then <see cref="SymGetModuleBase64" /> can be passed as a valid parameter.</para>
    </param>
    <param name="TranslateAddress">
      <para>A callback routine that provides address translation for 16-bit addresses. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-ptranslate_address_routine">TranslateAddressProc64</a>.</para>
      <para>Most callers of <b>StackWalk64</b> can safely pass<b>NULL</b> for this parameter.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. Note that<b>StackWalk64</b> generally does not set the last error code.</para>
    </returns>
  </member>
  <member name="Windows.StackWalk64">
    <summary>Obtains a stack trace.</summary>
    <param name="MachineType">
      <para>The architecture type of the computer for which the stack trace is generated. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_FILE_MACHINE_I386</b>
                </term>
              </listheader>
              <listheader>
                <term>0x014c</term>
              </listheader>
            </list>
          </description>
          <description>Intel x86</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_FILE_MACHINE_IA64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0200</term>
              </listheader>
            </list>
          </description>
          <description>Intel Itanium</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_FILE_MACHINE_AMD64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8664</term>
              </listheader>
            </list>
          </description>
          <description>x64 (AMD64 or EM64T)</description>
        </listheader>
      </list>
    </param>
    <param name="hProcess">A handle to the process for which the stack trace is generated. If the caller supplies a valid callback pointer for the <i>ReadMemoryRoutine</i> parameter, then this value does not have to be a valid process handle. It can be a token that is unique and consistently the same for all calls to the<b>StackWalk64</b> function. If the symbol handler is used with<b>StackWalk64</b>, use the same process handles for the calls to each function.</param>
    <param name="hThread">A handle to the thread for which the stack trace is generated. If the caller supplies a valid callback pointer for the <i>ReadMemoryRoutine</i> parameter, then this value does not have to be a valid thread handle. It can be a token that is unique and consistently the same for all calls to the<b>StackWalk64</b> function.</param>
    <param name="StackFrame">A pointer to a <see cref="STACKFRAME64" /> structure. This structure receives information for the next frame, if the function call succeeds.</param>
    <param name="ContextRecord">
      <para>A pointer to a <see cref="CONTEXT" /> structure. This parameter is required only when the <i>MachineType</i> parameter is not<b>IMAGE_FILE_MACHINE_I386</b>. However, it is recommended that this parameter contain a valid context record. This allows <b>StackWalk64</b> to handle a greater variety of situations.</para>
      <para>This context may be modified, so do not pass a context record that should not be modified.</para>
    </param>
    <param name="ReadMemoryRoutine">
      <para>A callback routine that provides memory read services. When the<b>StackWalk64</b> function needs to read memory from the process's address space, the<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pread_process_memory_routine">ReadProcessMemoryProc64</a> callback is used.</para>
      <para>If this parameter is <b>NULL</b>, then the function uses a default routine. In this case, the <i>hProcess</i> parameter must be a valid process handle.</para>
      <para>If this parameter is not<b>NULL</b>, the application should implement and register a symbol handler callback function that handles <b>CBA_READ_MEMORY</b>.</para>
    </param>
    <param name="FunctionTableAccessRoutine">
      <para>A callback routine that provides access to the run-time function table for the process. This parameter is required because the <b>StackWalk64</b> function does not have access to the process's run-time function table. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfunction_table_access_routine">FunctionTableAccessProc64</a>.</para>
      <para>The symbol handler provides functions that load and access the run-time table. If these functions are used, then <see cref="SymFunctionTableAccess64" /> can be passed as a valid parameter.</para>
    </param>
    <param name="GetModuleBaseRoutine">
      <para>A callback routine that provides a module base for any given virtual address. This parameter is required. For more information, see <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pget_module_base_routine">GetModuleBaseProc64</a>.</para>
      <para>The symbol handler provides functions that load and maintain module information. If these functions are used, then <see cref="SymGetModuleBase64" /> can be passed as a valid parameter.</para>
    </param>
    <param name="TranslateAddress">
      <para>A callback routine that provides address translation for 16-bit addresses. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-ptranslate_address_routine">TranslateAddressProc64</a>.</para>
      <para>Most callers of <b>StackWalk64</b> can safely pass<b>NULL</b> for this parameter.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. Note that<b>StackWalk64</b> generally does not set the last error code.</para>
    </returns>
  </member>
  <member name="Windows.StackWalk">
    <summary>Obtains a stack trace.</summary>
    <param name="MachineType">
      <para>The architecture type of the computer for which the stack trace is generated. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_FILE_MACHINE_I386</b>
                </term>
              </listheader>
              <listheader>
                <term>0x014c</term>
              </listheader>
            </list>
          </description>
          <description>Intel x86</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_FILE_MACHINE_IA64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0200</term>
              </listheader>
            </list>
          </description>
          <description>Intel Itanium</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_FILE_MACHINE_AMD64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8664</term>
              </listheader>
            </list>
          </description>
          <description>x64 (AMD64 or EM64T)</description>
        </listheader>
      </list>
    </param>
    <param name="hProcess">A handle to the process for which the stack trace is generated. If the caller supplies a valid callback pointer for the <i>ReadMemoryRoutine</i> parameter, then this value does not have to be a valid process handle. It can be a token that is unique and consistently the same for all calls to the<b>StackWalk64</b> function. If the symbol handler is used with<b>StackWalk64</b>, use the same process handles for the calls to each function.</param>
    <param name="hThread">A handle to the thread for which the stack trace is generated. If the caller supplies a valid callback pointer for the <i>ReadMemoryRoutine</i> parameter, then this value does not have to be a valid thread handle. It can be a token that is unique and consistently the same for all calls to the<b>StackWalk64</b> function.</param>
    <param name="StackFrame">A pointer to a <see cref="STACKFRAME64" /> structure. This structure receives information for the next frame, if the function call succeeds.</param>
    <param name="ContextRecord">
      <para>A pointer to a <see cref="CONTEXT" /> structure. This parameter is required only when the <i>MachineType</i> parameter is not<b>IMAGE_FILE_MACHINE_I386</b>. However, it is recommended that this parameter contain a valid context record. This allows <b>StackWalk64</b> to handle a greater variety of situations.</para>
      <para>This context may be modified, so do not pass a context record that should not be modified.</para>
    </param>
    <param name="ReadMemoryRoutine">
      <para>A callback routine that provides memory read services. When the<b>StackWalk64</b> function needs to read memory from the process's address space, the<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pread_process_memory_routine">ReadProcessMemoryProc64</a> callback is used.</para>
      <para>If this parameter is <b>NULL</b>, then the function uses a default routine. In this case, the <i>hProcess</i> parameter must be a valid process handle.</para>
      <para>If this parameter is not<b>NULL</b>, the application should implement and register a symbol handler callback function that handles <b>CBA_READ_MEMORY</b>.</para>
    </param>
    <param name="FunctionTableAccessRoutine">
      <para>A callback routine that provides access to the run-time function table for the process. This parameter is required because the <b>StackWalk64</b> function does not have access to the process's run-time function table. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfunction_table_access_routine">FunctionTableAccessProc64</a>.</para>
      <para>The symbol handler provides functions that load and access the run-time table. If these functions are used, then <see cref="SymFunctionTableAccess64" /> can be passed as a valid parameter.</para>
    </param>
    <param name="GetModuleBaseRoutine">
      <para>A callback routine that provides a module base for any given virtual address. This parameter is required. For more information, see <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pget_module_base_routine">GetModuleBaseProc64</a>.</para>
      <para>The symbol handler provides functions that load and maintain module information. If these functions are used, then <see cref="SymGetModuleBase64" /> can be passed as a valid parameter.</para>
    </param>
    <param name="TranslateAddress">
      <para>A callback routine that provides address translation for 16-bit addresses. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-ptranslate_address_routine">TranslateAddressProc64</a>.</para>
      <para>Most callers of <b>StackWalk64</b> can safely pass<b>NULL</b> for this parameter.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. Note that<b>StackWalk64</b> generally does not set the last error code.</para>
    </returns>
  </member>
  <member name="Windows.StackWalk64">
    <summary>Obtains a stack trace.</summary>
    <param name="MachineType">
      <para>The architecture type of the computer for which the stack trace is generated. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_FILE_MACHINE_I386</b>
                </term>
              </listheader>
              <listheader>
                <term>0x014c</term>
              </listheader>
            </list>
          </description>
          <description>Intel x86</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_FILE_MACHINE_IA64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0200</term>
              </listheader>
            </list>
          </description>
          <description>Intel Itanium</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_FILE_MACHINE_AMD64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8664</term>
              </listheader>
            </list>
          </description>
          <description>x64 (AMD64 or EM64T)</description>
        </listheader>
      </list>
    </param>
    <param name="hProcess">A handle to the process for which the stack trace is generated. If the caller supplies a valid callback pointer for the <i>ReadMemoryRoutine</i> parameter, then this value does not have to be a valid process handle. It can be a token that is unique and consistently the same for all calls to the<b>StackWalk64</b> function. If the symbol handler is used with<b>StackWalk64</b>, use the same process handles for the calls to each function.</param>
    <param name="hThread">A handle to the thread for which the stack trace is generated. If the caller supplies a valid callback pointer for the <i>ReadMemoryRoutine</i> parameter, then this value does not have to be a valid thread handle. It can be a token that is unique and consistently the same for all calls to the<b>StackWalk64</b> function.</param>
    <param name="StackFrame">A pointer to a <see cref="STACKFRAME64" /> structure. This structure receives information for the next frame, if the function call succeeds.</param>
    <param name="ContextRecord">
      <para>A pointer to a <see cref="CONTEXT" /> structure. This parameter is required only when the <i>MachineType</i> parameter is not<b>IMAGE_FILE_MACHINE_I386</b>. However, it is recommended that this parameter contain a valid context record. This allows <b>StackWalk64</b> to handle a greater variety of situations.</para>
      <para>This context may be modified, so do not pass a context record that should not be modified.</para>
    </param>
    <param name="ReadMemoryRoutine">
      <para>A callback routine that provides memory read services. When the<b>StackWalk64</b> function needs to read memory from the process's address space, the<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pread_process_memory_routine">ReadProcessMemoryProc64</a> callback is used.</para>
      <para>If this parameter is <b>NULL</b>, then the function uses a default routine. In this case, the <i>hProcess</i> parameter must be a valid process handle.</para>
      <para>If this parameter is not<b>NULL</b>, the application should implement and register a symbol handler callback function that handles <b>CBA_READ_MEMORY</b>.</para>
    </param>
    <param name="FunctionTableAccessRoutine">
      <para>A callback routine that provides access to the run-time function table for the process. This parameter is required because the <b>StackWalk64</b> function does not have access to the process's run-time function table. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfunction_table_access_routine">FunctionTableAccessProc64</a>.</para>
      <para>The symbol handler provides functions that load and access the run-time table. If these functions are used, then <see cref="SymFunctionTableAccess64" /> can be passed as a valid parameter.</para>
    </param>
    <param name="GetModuleBaseRoutine">
      <para>A callback routine that provides a module base for any given virtual address. This parameter is required. For more information, see <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pget_module_base_routine">GetModuleBaseProc64</a>.</para>
      <para>The symbol handler provides functions that load and maintain module information. If these functions are used, then <see cref="SymGetModuleBase64" /> can be passed as a valid parameter.</para>
    </param>
    <param name="TranslateAddress">
      <para>A callback routine that provides address translation for 16-bit addresses. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-ptranslate_address_routine">TranslateAddressProc64</a>.</para>
      <para>Most callers of <b>StackWalk64</b> can safely pass<b>NULL</b> for this parameter.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. Note that<b>StackWalk64</b> generally does not set the last error code.</para>
    </returns>
  </member>
  <member name="Windows.StackWalkEx">
    <summary>Obtains a stack trace.</summary>
    <param name="MachineType">
      <para>The architecture type of the computer for which the stack trace is generated. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_FILE_MACHINE_I386</b>
                </term>
              </listheader>
              <listheader>
                <term>0x014c</term>
              </listheader>
            </list>
          </description>
          <description>Intel x86</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_FILE_MACHINE_IA64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0200</term>
              </listheader>
            </list>
          </description>
          <description>Intel Itanium</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IMAGE_FILE_MACHINE_AMD64</b>
                </term>
              </listheader>
              <listheader>
                <term>0x8664</term>
              </listheader>
            </list>
          </description>
          <description>x64 (AMD64 or EM64T)</description>
        </listheader>
      </list>
    </param>
    <param name="hProcess">A handle to the process for which the stack trace is generated. If the caller supplies a valid callback pointer for the <i>ReadMemoryRoutine</i> parameter, then this value does not have to be a valid process handle. It can be a token that is unique and consistently the same for all calls to the<b>StackWalkEx</b> function. If the symbol handler is used with<b>StackWalkEx</b>, use the same process handles for the calls to each function.</param>
    <param name="hThread">A handle to the thread for which the stack trace is generated. If the caller supplies a valid callback pointer for the <i>ReadMemoryRoutine</i> parameter, then this value does not have to be a valid thread handle. It can be a token that is unique and consistently the same for all calls to the<b>StackWalkEx</b> function.</param>
    <param name="StackFrame">A pointer to a <see cref="STACKFRAME_EX" /> structure. This structure receives information for the next frame, if the function call succeeds.</param>
    <param name="ContextRecord">
      <para>A pointer to a <see cref="CONTEXT" /> structure. This parameter is required only when the <i>MachineType</i> parameter is not<b>IMAGE_FILE_MACHINE_I386</b>. However, it is recommended that this parameter contain a valid context record. This allows <b>StackWalkEx</b> to handle a greater variety of situations.</para>
      <para>This context may be modified, so do not pass a context record that should not be modified.</para>
    </param>
    <param name="ReadMemoryRoutine">
      <para>A callback routine that provides memory read services. When the<b>StackWalkEx</b> function needs to read memory from the process's address space, the<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pread_process_memory_routine">ReadProcessMemoryProc64</a> callback is used.</para>
      <para>If this parameter is <b>NULL</b>, then the function uses a default routine. In this case, the <i>hProcess</i> parameter must be a valid process handle.</para>
      <para>If this parameter is not<b>NULL</b>, the application should implement and register a symbol handler callback function that handles <b>CBA_READ_MEMORY</b>.</para>
    </param>
    <param name="FunctionTableAccessRoutine">
      <para>A callback routine that provides access to the run-time function table for the process. This parameter is required because the <b>StackWalkEx</b> function does not have access to the process's run-time function table. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfunction_table_access_routine">FunctionTableAccessProc64</a>.</para>
      <para>The symbol handler provides functions that load and access the run-time table. If these functions are used, then <see cref="SymFunctionTableAccess64" /> can be passed as a valid parameter.</para>
    </param>
    <param name="GetModuleBaseRoutine">
      <para>A callback routine that provides a module base for any given virtual address. This parameter is required. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pget_module_base_routine">GetModuleBaseProc64</a>.</para>
      <para>The symbol handler provides functions that load and maintain module information. If these functions are used, then <see cref="SymGetModuleBase64" /> can be passed as a valid parameter.</para>
    </param>
    <param name="TranslateAddress">
      <para>A callback routine that provides address translation for 16-bit addresses. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-ptranslate_address_routine">TranslateAddressProc64</a>.</para>
      <para>Most callers of <b>StackWalkEx</b> can safely pass<b>NULL</b> for this parameter.</para>
    </param>
    <param name="Flags">
      <para>A combination of zero or more flags.</para>
      <h4>SYM_STKWALK_DEFAULT (0)</h4>
      <h4>SYM_STKWALK_FORCE_FRAMEPTR (1)</h4>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. Note that<b>StackWalkEx</b> generally does not set the last error code.</para>
    </returns>
  </member>
  <member name="Windows.SymAddrIncludeInlineTrace">
    <summary>Indicates whether the specified address is within an inline frame.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Address">The address.</param>
    <returns>Returns zero if the address is not within an inline frame.</returns>
  </member>
  <member name="Windows.SymAddSourceStream">
    <summary>Adds the stream to the specified module for use by the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</a>.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="StreamFile">A null-terminated string that contains the absolute or relative path to a file that contains the source indexing stream. Can be <b>NULL</b> if <i>Buffer</i> is not <b>NULL</b>.</param>
    <param name="Buffer">A buffer that contains the source indexing stream. Can be <b>NULL</b> if <i>StreamFile</i> is not <b>NULL</b>.</param>
    <param name="Size">Size, in bytes, of the <i>Buffer</i> buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymAddSourceStreamW">
    <summary>Adds the stream to the specified module for use by the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</a>.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="StreamFile">A null-terminated string that contains the absolute or relative path to a file that contains the source indexing stream. Can be <b>NULL</b> if <i>Buffer</i> is not <b>NULL</b>.</param>
    <param name="Buffer">A buffer that contains the source indexing stream. Can be <b>NULL</b> if <i>StreamFile</i> is not <b>NULL</b>.</param>
    <param name="Size">Size, in bytes, of the <i>Buffer</i> buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymAddSourceStream">
    <summary>Adds the stream to the specified module for use by the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</a>.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the <see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="StreamFile">A null-terminated string that contains the absolute or relative path to a file that contains the source indexing stream. Can be <b>NULL</b> if <i>Buffer</i> is not <b>NULL</b>.</param>
    <param name="Buffer">A buffer that contains the source indexing stream. Can be <b>NULL</b> if <i>StreamFile</i> is not <b>NULL</b>.</param>
    <param name="Size">Size, in bytes, of the <i>Buffer</i> buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymAddSourceStreamA">
    <summary>Adds the stream to the specified module for use by the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</a>.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the <see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="StreamFile">A null-terminated string that contains the absolute or relative path to a file that contains the source indexing stream. Can be <b>NULL</b> if <i>Buffer</i> is not <b>NULL</b>.</param>
    <param name="Buffer">A buffer that contains the source indexing stream. Can be <b>NULL</b> if <i>StreamFile</i> is not <b>NULL</b>.</param>
    <param name="Size">Size, in bytes, of the <i>Buffer</i> buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymAddSourceStream">
    <summary>Adds the stream to the specified module for use by the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</a>.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="FileSpec">A null-terminated string that contains the absolute or relative path to a file that contains the source indexing stream. Can be <b>NULL</b> if <i>Buffer</i> is not <b>NULL</b>.</param>
    <param name="Buffer">A buffer that contains the source indexing stream. Can be <b>NULL</b> if <i>StreamFile</i> is not <b>NULL</b>.</param>
    <param name="Size">Size, in bytes, of the <i>Buffer</i> buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymAddSourceStreamW">
    <summary>Adds the stream to the specified module for use by the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</a>.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="FileSpec">A null-terminated string that contains the absolute or relative path to a file that contains the source indexing stream. Can be <b>NULL</b> if <i>Buffer</i> is not <b>NULL</b>.</param>
    <param name="Buffer">A buffer that contains the source indexing stream. Can be <b>NULL</b> if <i>StreamFile</i> is not <b>NULL</b>.</param>
    <param name="Size">Size, in bytes, of the <i>Buffer</i> buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymAddSymbol">
    <summary>Adds a virtual symbol to the specified module.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="Name">The name of the symbol. The maximum size of a symbol name is MAX_SYM_NAME characters.</param>
    <param name="Address">The address of the symbol. This address must be within the address range of the specified module.</param>
    <param name="Size">The size of the symbol, in bytes. This parameter is optional.</param>
    <param name="Flags">This parameter is unused.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymAddSymbolW">
    <summary>Adds a virtual symbol to the specified module.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="Name">The name of the symbol. The maximum size of a symbol name is MAX_SYM_NAME characters.</param>
    <param name="Address">The address of the symbol. This address must be within the address range of the specified module.</param>
    <param name="Size">The size of the symbol, in bytes. This parameter is optional.</param>
    <param name="Flags">This parameter is unused.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymAddSymbol">
    <summary>Adds a virtual symbol to the specified module.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="Name">The name of the symbol. The maximum size of a symbol name is MAX_SYM_NAME characters.</param>
    <param name="Address">The address of the symbol. This address must be within the address range of the specified module.</param>
    <param name="Size">The size of the symbol, in bytes. This parameter is optional.</param>
    <param name="Flags">This parameter is unused.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymAddSymbolW">
    <summary>Adds a virtual symbol to the specified module.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="Name">The name of the symbol. The maximum size of a symbol name is MAX_SYM_NAME characters.</param>
    <param name="Address">The address of the symbol. This address must be within the address range of the specified module.</param>
    <param name="Size">The size of the symbol, in bytes. This parameter is optional.</param>
    <param name="Flags">This parameter is unused.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymCleanup">
    <summary>Deallocates all resources associated with the process handle.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymCompareInlineTrace">
    <summary>Compares two inline traces.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Address1">The first address to be compared.</param>
    <param name="InlineContext1">The inline context for the first trace to be compared.</param>
    <param name="RetAddress1">The return address of the first trace to be compared.</param>
    <param name="Address2">The second address to be compared.</param>
    <param name="RetAddress2">The return address of the second trace to be compared.</param>
    <returns>
      <para>Indicates the result of the comparison.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYM_INLINE_COMP_ERROR</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>An error occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYM_INLINE_COMP_IDENTICAL</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The inline contexts are identical.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYM_INLINE_COMP_STEPIN</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The inline trace is a step-in of an inline function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYM_INLINE_COMP_STEPOUT</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>The inline trace is a step-out of an inline function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYM_INLINE_COMP_STEPOVER</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>The inline trace is a step-over of an inline function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYM_INLINE_COMP_DIFFERENT</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>The inline contexts are different.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.SymDeleteSymbol">
    <summary>Deletes a virtual symbol from the specified module.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="Name">The name of the symbol.</param>
    <param name="Address">The address of the symbol. This address must be within the address range of the specified module.</param>
    <param name="Flags">This parameter is unused.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymDeleteSymbolW">
    <summary>Deletes a virtual symbol from the specified module.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="Name">The name of the symbol.</param>
    <param name="Address">The address of the symbol. This address must be within the address range of the specified module.</param>
    <param name="Flags">This parameter is unused.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymDeleteSymbol">
    <summary>Deletes a virtual symbol from the specified module.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="Name">The name of the symbol.</param>
    <param name="Address">The address of the symbol. This address must be within the address range of the specified module.</param>
    <param name="Flags">This parameter is unused.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymDeleteSymbolW">
    <summary>Deletes a virtual symbol from the specified module.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="Name">The name of the symbol.</param>
    <param name="Address">The address of the symbol. This address must be within the address range of the specified module.</param>
    <param name="Flags">This parameter is unused.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateModules">
    <summary>Enumerates all modules that have been loaded for the process by the<see cref="SymLoadModule64" /> or <see cref="SymLoadModuleEx" /> function.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="EnumModulesCallback">The enumeration callback function. This function is called once per module. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateModules64">
    <summary>Enumerates all modules that have been loaded for the process by the<see cref="SymLoadModule64" /> or <see cref="SymLoadModuleEx" /> function.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="EnumModulesCallback">The enumeration callback function. This function is called once per module. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateModulesW64">
    <summary>Enumerates all modules that have been loaded for the process by the<see cref="SymLoadModule64" /> or <see cref="SymLoadModuleEx" /> function.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="EnumModulesCallback">The enumeration callback function. This function is called once per module. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateModules">
    <summary>Enumerates all modules that have been loaded for the process by the<see cref="SymLoadModule64" /> or <see cref="SymLoadModuleEx" /> function.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="EnumModulesCallback">The enumeration callback function. This function is called once per module. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateModules64">
    <summary>Enumerates all modules that have been loaded for the process by the<see cref="SymLoadModule64" /> or <see cref="SymLoadModuleEx" /> function.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="EnumModulesCallback">The enumeration callback function. This function is called once per module. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateModulesW64">
    <summary>Enumerates all modules that have been loaded for the process by the<see cref="SymLoadModule64" /> or <see cref="SymLoadModuleEx" /> function.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="EnumModulesCallback">The enumeration callback function. This function is called once per module. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateModules">
    <summary>Enumerates all modules that have been loaded for the process by the<see cref="SymLoadModule64" /> or <see cref="SymLoadModuleEx" /> function.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="EnumModulesCallback">The enumeration callback function. This function is called once per module. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateModules64">
    <summary>Enumerates all modules that have been loaded for the process by the<see cref="SymLoadModule64" /> or <see cref="SymLoadModuleEx" /> function.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="EnumModulesCallback">The enumeration callback function. This function is called once per module. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateModulesW64">
    <summary>Enumerates all modules that have been loaded for the process by the<see cref="SymLoadModule64" /> or <see cref="SymLoadModuleEx" /> function.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="EnumModulesCallback">The enumeration callback function. This function is called once per module. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enummodules_callback">SymEnumerateModulesProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateSymbols">
    <summary>
      <para>Enumerates all the symbols for a specified module.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymEnumSymbols" />, which is faster and more powerful.</div>
    </summary>
    <param name="hProcess">A handle to the process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module for which symbols are to be enumerated.</param>
    <param name="EnumSymbolsCallback">The callback function that receives the symbol information. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateSymbols64">
    <summary>
      <para>Enumerates all the symbols for a specified module.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymEnumSymbols" />, which is faster and more powerful.</div>
    </summary>
    <param name="hProcess">A handle to the process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module for which symbols are to be enumerated.</param>
    <param name="EnumSymbolsCallback">The callback function that receives the symbol information. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateSymbolsW">
    <summary>
      <para>Enumerates all the symbols for a specified module.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymEnumSymbols" />, which is faster and more powerful.</div>
    </summary>
    <param name="hProcess">A handle to the process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module for which symbols are to be enumerated.</param>
    <param name="EnumSymbolsCallback">The callback function that receives the symbol information. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateSymbolsW64">
    <summary>
      <para>Enumerates all the symbols for a specified module.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymEnumSymbols" />, which is faster and more powerful.</div>
    </summary>
    <param name="hProcess">A handle to the process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module for which symbols are to be enumerated.</param>
    <param name="EnumSymbolsCallback">The callback function that receives the symbol information. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateSymbols">
    <summary>
      <para>Enumerates all the symbols for a specified module.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymEnumSymbols" />, which is faster and more powerful.</div>
    </summary>
    <param name="hProcess">A handle to the process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module for which symbols are to be enumerated.</param>
    <param name="EnumSymbolsCallback">The callback function that receives the symbol information. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateSymbols64">
    <summary>
      <para>Enumerates all the symbols for a specified module.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymEnumSymbols" />, which is faster and more powerful.</div>
    </summary>
    <param name="hProcess">A handle to the process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module for which symbols are to be enumerated.</param>
    <param name="EnumSymbolsCallback">The callback function that receives the symbol information. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateSymbolsW">
    <summary>
      <para>Enumerates all the symbols for a specified module.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymEnumSymbols" />, which is faster and more powerful.</div>
    </summary>
    <param name="hProcess">A handle to the process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module for which symbols are to be enumerated.</param>
    <param name="EnumSymbolsCallback">The callback function that receives the symbol information. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateSymbolsW64">
    <summary>
      <para>Enumerates all the symbols for a specified module.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymEnumSymbols" />, which is faster and more powerful.</div>
    </summary>
    <param name="hProcess">A handle to the process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module for which symbols are to be enumerated.</param>
    <param name="EnumSymbolsCallback">The callback function that receives the symbol information. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateSymbols">
    <summary>
      <para>Enumerates all the symbols for a specified module.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymEnumSymbols" />, which is faster and more powerful.</div>
    </summary>
    <param name="hProcess">A handle to the process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module for which symbols are to be enumerated.</param>
    <param name="EnumSymbolsCallback">The callback function that receives the symbol information. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateSymbols64">
    <summary>
      <para>Enumerates all the symbols for a specified module.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymEnumSymbols" />, which is faster and more powerful.</div>
    </summary>
    <param name="hProcess">A handle to the process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module for which symbols are to be enumerated.</param>
    <param name="EnumSymbolsCallback">The callback function that receives the symbol information. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateSymbolsW">
    <summary>
      <para>Enumerates all the symbols for a specified module.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymEnumSymbols" />, which is faster and more powerful.</div>
    </summary>
    <param name="hProcess">A handle to the process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module for which symbols are to be enumerated.</param>
    <param name="EnumSymbolsCallback">The callback function that receives the symbol information. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateSymbolsW64">
    <summary>
      <para>Enumerates all the symbols for a specified module.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymEnumSymbols" />, which is faster and more powerful.</div>
    </summary>
    <param name="hProcess">A handle to the process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module for which symbols are to be enumerated.</param>
    <param name="EnumSymbolsCallback">The callback function that receives the symbol information. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateSymbols">
    <summary>
      <para>Enumerates all the symbols for a specified module.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymEnumSymbols" />, which is faster and more powerful.</div>
    </summary>
    <param name="hProcess">A handle to the process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module for which symbols are to be enumerated.</param>
    <param name="EnumSymbolsCallback">The callback function that receives the symbol information. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateSymbols64">
    <summary>
      <para>Enumerates all the symbols for a specified module.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymEnumSymbols" />, which is faster and more powerful.</div>
    </summary>
    <param name="hProcess">A handle to the process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module for which symbols are to be enumerated.</param>
    <param name="EnumSymbolsCallback">The callback function that receives the symbol information. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateSymbolsW">
    <summary>
      <para>Enumerates all the symbols for a specified module.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymEnumSymbols" />, which is faster and more powerful.</div>
    </summary>
    <param name="hProcess">A handle to the process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module for which symbols are to be enumerated.</param>
    <param name="EnumSymbolsCallback">The callback function that receives the symbol information. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumerateSymbolsW64">
    <summary>
      <para>Enumerates all the symbols for a specified module.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymEnumSymbols" />, which is faster and more powerful.</div>
    </summary>
    <param name="hProcess">A handle to the process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module for which symbols are to be enumerated.</param>
    <param name="EnumSymbolsCallback">The callback function that receives the symbol information. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsymbols_callback">SymEnumerateSymbolsProc64</a>.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is passed to the callback function. Typically, this parameter is used by an application to pass a pointer to a data structure that enables the callback function establish some type of context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumLines">
    <summary>Enumerates all lines in the specified module.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="Obj">The name of an .obj file within the module. The scope of the enumeration is limited to this file. If this parameter is <b>NULL</b> or an empty string, all .obj files are searched.</param>
    <param name="File">A wildcard expression that indicates the names of the source files to be searched. If this parameter is <b>NULL</b> or an empty string, all files are searched.</param>
    <param name="EnumLinesCallback">A<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumlines_callback">SymEnumLinesProc</a> callback function that receives the line information.</param>
    <param name="UserContext">A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumLinesW">
    <summary>Enumerates all lines in the specified module.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="Obj">The name of an .obj file within the module. The scope of the enumeration is limited to this file. If this parameter is <b>NULL</b> or an empty string, all .obj files are searched.</param>
    <param name="File">A wildcard expression that indicates the names of the source files to be searched. If this parameter is <b>NULL</b> or an empty string, all files are searched.</param>
    <param name="EnumLinesCallback">A<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumlines_callback">SymEnumLinesProc</a> callback function that receives the line information.</param>
    <param name="UserContext">A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumLines">
    <summary>Enumerates all lines in the specified module.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="Obj">The name of an .obj file within the module. The scope of the enumeration is limited to this file. If this parameter is <b>NULL</b> or an empty string, all .obj files are searched.</param>
    <param name="File">A wildcard expression that indicates the names of the source files to be searched. If this parameter is <b>NULL</b> or an empty string, all files are searched.</param>
    <param name="EnumLinesCallback">A<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumlines_callback">SymEnumLinesProc</a> callback function that receives the line information.</param>
    <param name="UserContext">A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumLinesW">
    <summary>Enumerates all lines in the specified module.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="Obj">The name of an .obj file within the module. The scope of the enumeration is limited to this file. If this parameter is <b>NULL</b> or an empty string, all .obj files are searched.</param>
    <param name="File">A wildcard expression that indicates the names of the source files to be searched. If this parameter is <b>NULL</b> or an empty string, all files are searched.</param>
    <param name="EnumLinesCallback">A<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumlines_callback">SymEnumLinesProc</a> callback function that receives the line information.</param>
    <param name="UserContext">A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumProcesses">
    <summary>Enumerates each process that has called the <see cref="SymInitialize" /> function.</summary>
    <param name="EnumProcessesCallback">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumprocesses_callback">SymEnumProcessesProc</a> callback function that receives the process information.</param>
    <param name="UserContext">A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSourceFiles">
    <summary>Enumerates all source files in a process.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="ModBase">The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and <i>Mask</i> does not contain an exclamation point, the function uses the scope established by the<see cref="SymSetContext" /> function.</param>
    <param name="Mask">
      <para>A wildcard expression that indicates the names of the source files to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</para>
      <para>If this parameter is <b>NULL</b>, the function will enumerate all files.</para>
    </param>
    <param name="cbSrcFiles">Pointer to a<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsourcefiles_callback">SymEnumSourceFilesProc</a> callback function that receives the source file information.</param>
    <param name="UserContext">User-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSourceFilesW">
    <summary>Enumerates all source files in a process.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="ModBase">The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and <i>Mask</i> does not contain an exclamation point, the function uses the scope established by the<see cref="SymSetContext" /> function.</param>
    <param name="Mask">
      <para>A wildcard expression that indicates the names of the source files to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</para>
      <para>If this parameter is <b>NULL</b>, the function will enumerate all files.</para>
    </param>
    <param name="cbSrcFiles">Pointer to a<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsourcefiles_callback">SymEnumSourceFilesProc</a> callback function that receives the source file information.</param>
    <param name="UserContext">User-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSourceFiles">
    <summary>Enumerates all source files in a process.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="ModBase">The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and <i>Mask</i> does not contain an exclamation point, the function uses the scope established by the<see cref="SymSetContext" /> function.</param>
    <param name="Mask">
      <para>A wildcard expression that indicates the names of the source files to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</para>
      <para>If this parameter is <b>NULL</b>, the function will enumerate all files.</para>
    </param>
    <param name="cbSrcFiles">Pointer to a<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsourcefiles_callback">SymEnumSourceFilesProc</a> callback function that receives the source file information.</param>
    <param name="UserContext">User-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSourceFilesW">
    <summary>Enumerates all source files in a process.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="ModBase">The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and <i>Mask</i> does not contain an exclamation point, the function uses the scope established by the<see cref="SymSetContext" /> function.</param>
    <param name="Mask">
      <para>A wildcard expression that indicates the names of the source files to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</para>
      <para>If this parameter is <b>NULL</b>, the function will enumerate all files.</para>
    </param>
    <param name="cbSrcFiles">Pointer to a<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumsourcefiles_callback">SymEnumSourceFilesProc</a> callback function that receives the source file information.</param>
    <param name="UserContext">User-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSourceFileTokens">
    <summary>Enumerates all individual entries in a module's <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">source server</a> data, if available.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="Callback">A<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-penumsourcefiletokenscallback">SymEnumSourceFileTokensProc</a> callback function that receives the symbol information.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSourceLines">
    <summary>Enumerates all source lines in a module.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="Obj">The name of an .obj file within the module. The scope of the enumeration is limited to this file. If this parameter is <b>NULL</b> or an empty string, all .obj files are searched.</param>
    <param name="File">A wildcard expression that indicates the names of the source files to be searched. If this parameter is <b>NULL</b> or an empty string, all files are searched.</param>
    <param name="Line">The line number of a line within the module. The scope of the enumeration is limited to this line. If this parameter is 0, all lines are searched.</param>
    <param name="Flags">If this parameter is ESLFLAG_FULLPATH, the function matches the full path in the <i>File</i> parameter.</param>
    <param name="EnumLinesCallback">A<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumlines_callback">SymEnumLinesProc</a> callback function that receives the line information.</param>
    <param name="UserContext">A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSourceLinesW">
    <summary>Enumerates all source lines in a module.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="Obj">The name of an .obj file within the module. The scope of the enumeration is limited to this file. If this parameter is <b>NULL</b> or an empty string, all .obj files are searched.</param>
    <param name="File">A wildcard expression that indicates the names of the source files to be searched. If this parameter is <b>NULL</b> or an empty string, all files are searched.</param>
    <param name="Line">The line number of a line within the module. The scope of the enumeration is limited to this line. If this parameter is 0, all lines are searched.</param>
    <param name="Flags">If this parameter is ESLFLAG_FULLPATH, the function matches the full path in the <i>File</i> parameter.</param>
    <param name="EnumLinesCallback">A<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumlines_callback">SymEnumLinesProc</a> callback function that receives the line information.</param>
    <param name="UserContext">A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSourceLines">
    <summary>Enumerates all source lines in a module.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="Obj">The name of an .obj file within the module. The scope of the enumeration is limited to this file. If this parameter is <b>NULL</b> or an empty string, all .obj files are searched.</param>
    <param name="File">A wildcard expression that indicates the names of the source files to be searched. If this parameter is <b>NULL</b> or an empty string, all files are searched.</param>
    <param name="Line">The line number of a line within the module. The scope of the enumeration is limited to this line. If this parameter is 0, all lines are searched.</param>
    <param name="Flags">If this parameter is ESLFLAG_FULLPATH, the function matches the full path in the <i>File</i> parameter.</param>
    <param name="EnumLinesCallback">A<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumlines_callback">SymEnumLinesProc</a> callback function that receives the line information.</param>
    <param name="UserContext">A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSourceLinesW">
    <summary>Enumerates all source lines in a module.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="Obj">The name of an .obj file within the module. The scope of the enumeration is limited to this file. If this parameter is <b>NULL</b> or an empty string, all .obj files are searched.</param>
    <param name="File">A wildcard expression that indicates the names of the source files to be searched. If this parameter is <b>NULL</b> or an empty string, all files are searched.</param>
    <param name="Line">The line number of a line within the module. The scope of the enumeration is limited to this line. If this parameter is 0, all lines are searched.</param>
    <param name="Flags">If this parameter is ESLFLAG_FULLPATH, the function matches the full path in the <i>File</i> parameter.</param>
    <param name="EnumLinesCallback">A<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumlines_callback">SymEnumLinesProc</a> callback function that receives the line information.</param>
    <param name="UserContext">A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSymbols">
    <summary>Enumerates all symbols in a process.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and<i>Mask</i> does not contain an exclamation point, the function uses the scope established by the <see cref="SymSetContext" /> function.</param>
    <param name="Mask">
      <para>A wildcard string that indicates the names of the symbols to be enumerated. The text can optionally contain the wildcards, "*" and "?".</para>
      <para>To specify a specific module or set of modules, begin the text with a wildcard string specifying the module, followed by an exclamation point. When specifying a module, <i>BaseOfDll</i> is ignored.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If <i>BaseOfDll</i> is not zero, then <b>SymEnumSymbols</b> will look for a global symbol named "foo".<para>If <i>BaseOfDll</i> is zero, then<b>SymEnumSymbols</b> will look for a local symbol named "foo" within the scope established by the most recent call to the<see cref="SymSetContext" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo?</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If <i>BaseOfDll</i> is not zero, then <b>SymEnumSymbols</b> will look for a global symbol that starts with "foo" and contains one extra character afterwards, such as "fool" and "foot".<para>If <i>BaseOfDll</i> is zero, then<b>SymEnumSymbols</b> will look for a symbol that starts with "foo" and contains one extra character afterwards, such as "fool" and "foot". The search would be within the scope established by the most recent call to the<see cref="SymSetContext" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo*!bar</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <b>SymEnumSymbols</b> will look in every loaded module that starts with the text "foo" for a symbol called "bar". It could find matches such as these, "foot!bar", "footlocker!bar", and "fool!bar".</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>*!*</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <b>SymEnumSymbols</b> will enumerate every symbol in every loaded module.</description>
        </listheader>
      </list>
    </param>
    <param name="EnumSymbolsCallback">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</param>
    <param name="UserContext">A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSymbolsW">
    <summary>Enumerates all symbols in a process.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and<i>Mask</i> does not contain an exclamation point, the function uses the scope established by the <see cref="SymSetContext" /> function.</param>
    <param name="Mask">
      <para>A wildcard string that indicates the names of the symbols to be enumerated. The text can optionally contain the wildcards, "*" and "?".</para>
      <para>To specify a specific module or set of modules, begin the text with a wildcard string specifying the module, followed by an exclamation point. When specifying a module, <i>BaseOfDll</i> is ignored.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If <i>BaseOfDll</i> is not zero, then <b>SymEnumSymbols</b> will look for a global symbol named "foo".<para>If <i>BaseOfDll</i> is zero, then<b>SymEnumSymbols</b> will look for a local symbol named "foo" within the scope established by the most recent call to the<see cref="SymSetContext" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo?</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If <i>BaseOfDll</i> is not zero, then <b>SymEnumSymbols</b> will look for a global symbol that starts with "foo" and contains one extra character afterwards, such as "fool" and "foot".<para>If <i>BaseOfDll</i> is zero, then<b>SymEnumSymbols</b> will look for a symbol that starts with "foo" and contains one extra character afterwards, such as "fool" and "foot". The search would be within the scope established by the most recent call to the<see cref="SymSetContext" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo*!bar</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <b>SymEnumSymbols</b> will look in every loaded module that starts with the text "foo" for a symbol called "bar". It could find matches such as these, "foot!bar", "footlocker!bar", and "fool!bar".</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>*!*</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <b>SymEnumSymbols</b> will enumerate every symbol in every loaded module.</description>
        </listheader>
      </list>
    </param>
    <param name="EnumSymbolsCallback">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</param>
    <param name="UserContext">A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSymbolsEx">
    <summary>Enumerates all symbols in a process.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and<i>Mask</i> does not contain an exclamation point, the function uses the scope established by the <see cref="SymSetContext" /> function.</param>
    <param name="Mask">
      <para>A wildcard string that indicates the names of the symbols to be enumerated. The text can optionally contain the wildcards, "*" and "?".</para>
      <para>To specify a specific module or set of modules, begin the text with a wildcard string specifying the module, followed by an exclamation point. When specifying a module, <i>BaseOfDll</i> is ignored.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If <i>BaseOfDll</i> is not zero, then <see cref="SymEnumSymbols" /> will look for a global symbol named "foo".<para>If <i>BaseOfDll</i> is zero, then<see cref="SymEnumSymbols" /> will look for a local symbol named "foo" within the scope established by the most recent call to the<see cref="SymSetContext" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo?</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If <i>BaseOfDll</i> is not zero, then <see cref="SymEnumSymbols" /> will look for a global symbol that starts with "foo" and contains one extra character afterwards, such as "fool" and "foot".<para>If <i>BaseOfDll</i> is zero, then<see cref="SymEnumSymbols" /> will look for a symbol that starts with "foo" and contains one extra character afterwards, such as "fool" and "foot". The search would be within the scope established by the most recent call to the<see cref="SymSetContext" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo*!bar</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="SymEnumSymbols" /> will look in every loaded module that starts with the text "foo" for a symbol called "bar". It could find matches such as these, "foot!bar", "footlocker!bar", and "fool!bar".</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>*!*</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="SymEnumSymbols" /> will enumerate every symbol in every loaded module.</description>
        </listheader>
      </list>
    </param>
    <param name="EnumSymbolsCallback">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</param>
    <param name="UserContext">A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <param name="Options">
      <para>Indicates possible options.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMENUM_OPTIONS_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Use the default options.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMENUM_OPTIONS_INLINE</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Enumerate inline symbols.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSymbolsExW">
    <summary>Enumerates all symbols in a process.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and<i>Mask</i> does not contain an exclamation point, the function uses the scope established by the <see cref="SymSetContext" /> function.</param>
    <param name="Mask">
      <para>A wildcard string that indicates the names of the symbols to be enumerated. The text can optionally contain the wildcards, "*" and "?".</para>
      <para>To specify a specific module or set of modules, begin the text with a wildcard string specifying the module, followed by an exclamation point. When specifying a module, <i>BaseOfDll</i> is ignored.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If <i>BaseOfDll</i> is not zero, then <see cref="SymEnumSymbols" /> will look for a global symbol named "foo".<para>If <i>BaseOfDll</i> is zero, then<see cref="SymEnumSymbols" /> will look for a local symbol named "foo" within the scope established by the most recent call to the<see cref="SymSetContext" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo?</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If <i>BaseOfDll</i> is not zero, then <see cref="SymEnumSymbols" /> will look for a global symbol that starts with "foo" and contains one extra character afterwards, such as "fool" and "foot".<para>If <i>BaseOfDll</i> is zero, then<see cref="SymEnumSymbols" /> will look for a symbol that starts with "foo" and contains one extra character afterwards, such as "fool" and "foot". The search would be within the scope established by the most recent call to the<see cref="SymSetContext" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo*!bar</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="SymEnumSymbols" /> will look in every loaded module that starts with the text "foo" for a symbol called "bar". It could find matches such as these, "foot!bar", "footlocker!bar", and "fool!bar".</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>*!*</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="SymEnumSymbols" /> will enumerate every symbol in every loaded module.</description>
        </listheader>
      </list>
    </param>
    <param name="EnumSymbolsCallback">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</param>
    <param name="UserContext">A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <param name="Options">
      <para>Indicates possible options.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMENUM_OPTIONS_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Use the default options.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMENUM_OPTIONS_INLINE</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Enumerate inline symbols.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSymbolsEx">
    <summary>Enumerates all symbols in a process.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and<i>Mask</i> does not contain an exclamation point, the function uses the scope established by the <see cref="SymSetContext" /> function.</param>
    <param name="Mask">
      <para>A wildcard string that indicates the names of the symbols to be enumerated. The text can optionally contain the wildcards, "*" and "?".</para>
      <para>To specify a specific module or set of modules, begin the text with a wildcard string specifying the module, followed by an exclamation point. When specifying a module, <i>BaseOfDll</i> is ignored.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If <i>BaseOfDll</i> is not zero, then <see cref="SymEnumSymbols" /> will look for a global symbol named "foo".<para>If <i>BaseOfDll</i> is zero, then<see cref="SymEnumSymbols" /> will look for a local symbol named "foo" within the scope established by the most recent call to the<see cref="SymSetContext" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo?</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If <i>BaseOfDll</i> is not zero, then <see cref="SymEnumSymbols" /> will look for a global symbol that starts with "foo" and contains one extra character afterwards, such as "fool" and "foot".<para>If <i>BaseOfDll</i> is zero, then<see cref="SymEnumSymbols" /> will look for a symbol that starts with "foo" and contains one extra character afterwards, such as "fool" and "foot". The search would be within the scope established by the most recent call to the<see cref="SymSetContext" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo*!bar</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="SymEnumSymbols" /> will look in every loaded module that starts with the text "foo" for a symbol called "bar". It could find matches such as these, "foot!bar", "footlocker!bar", and "fool!bar".</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>*!*</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="SymEnumSymbols" /> will enumerate every symbol in every loaded module.</description>
        </listheader>
      </list>
    </param>
    <param name="EnumSymbolsCallback">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callbackw">SymEnumSymbolsProcW</a> callback function that receives the symbol information.</param>
    <param name="UserContext">A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <param name="Options">
      <para>Indicates possible options.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMENUM_OPTIONS_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Use the default options.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMENUM_OPTIONS_INLINE</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Enumerate inline symbols.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSymbolsExW">
    <summary>Enumerates all symbols in a process.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and<i>Mask</i> does not contain an exclamation point, the function uses the scope established by the <see cref="SymSetContext" /> function.</param>
    <param name="Mask">
      <para>A wildcard string that indicates the names of the symbols to be enumerated. The text can optionally contain the wildcards, "*" and "?".</para>
      <para>To specify a specific module or set of modules, begin the text with a wildcard string specifying the module, followed by an exclamation point. When specifying a module, <i>BaseOfDll</i> is ignored.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If <i>BaseOfDll</i> is not zero, then <see cref="SymEnumSymbols" /> will look for a global symbol named "foo".<para>If <i>BaseOfDll</i> is zero, then<see cref="SymEnumSymbols" /> will look for a local symbol named "foo" within the scope established by the most recent call to the<see cref="SymSetContext" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo?</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If <i>BaseOfDll</i> is not zero, then <see cref="SymEnumSymbols" /> will look for a global symbol that starts with "foo" and contains one extra character afterwards, such as "fool" and "foot".<para>If <i>BaseOfDll</i> is zero, then<see cref="SymEnumSymbols" /> will look for a symbol that starts with "foo" and contains one extra character afterwards, such as "fool" and "foot". The search would be within the scope established by the most recent call to the<see cref="SymSetContext" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo*!bar</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="SymEnumSymbols" /> will look in every loaded module that starts with the text "foo" for a symbol called "bar". It could find matches such as these, "foot!bar", "footlocker!bar", and "fool!bar".</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>*!*</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <see cref="SymEnumSymbols" /> will enumerate every symbol in every loaded module.</description>
        </listheader>
      </list>
    </param>
    <param name="EnumSymbolsCallback">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callbackw">SymEnumSymbolsProcW</a> callback function that receives the symbol information.</param>
    <param name="UserContext">A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <param name="Options">
      <para>Indicates possible options.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMENUM_OPTIONS_DEFAULT</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Use the default options.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMENUM_OPTIONS_INLINE</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Enumerate inline symbols.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSymbolsForAddr">
    <summary>Enumerates the symbols for the specified address.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Address">The address for which symbols are to be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol (the beginning of the symbol plus the symbol size), the function will find the symbol.</param>
    <param name="EnumSymbolsCallback">An application-defined callback function. This function is called for every symbol found at <i>Address</i>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a>.</param>
    <param name="UserContext">Optional user-defined data. This value is passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSymbolsForAddrW">
    <summary>Enumerates the symbols for the specified address.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Address">The address for which symbols are to be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol (the beginning of the symbol plus the symbol size), the function will find the symbol.</param>
    <param name="EnumSymbolsCallback">An application-defined callback function. This function is called for every symbol found at <i>Address</i>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a>.</param>
    <param name="UserContext">Optional user-defined data. This value is passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSymbolsForAddr">
    <summary>Enumerates the symbols for the specified address.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Address">The address for which symbols are to be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol (the beginning of the symbol plus the symbol size), the function will find the symbol.</param>
    <param name="EnumSymbolsCallback">An application-defined callback function. This function is called for every symbol found at <i>Address</i>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a>.</param>
    <param name="UserContext">Optional user-defined data. This value is passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSymbolsForAddrW">
    <summary>Enumerates the symbols for the specified address.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Address">The address for which symbols are to be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol (the beginning of the symbol plus the symbol size), the function will find the symbol.</param>
    <param name="EnumSymbolsCallback">An application-defined callback function. This function is called for every symbol found at <i>Address</i>. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a>.</param>
    <param name="UserContext">Optional user-defined data. This value is passed to the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSymbols">
    <summary>Enumerates all symbols in a process.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and<i>Mask</i> does not contain an exclamation point, the function uses the scope established by the <see cref="SymSetContext" /> function.</param>
    <param name="Mask">
      <para>A wildcard string that indicates the names of the symbols to be enumerated. The text can optionally contain the wildcards, "*" and "?".</para>
      <para>To specify a specific module or set of modules, begin the text with a wildcard string specifying the module, followed by an exclamation point. When specifying a module, <i>BaseOfDll</i> is ignored.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If <i>BaseOfDll</i> is not zero, then <b>SymEnumSymbols</b> will look for a global symbol named "foo".<para>If <i>BaseOfDll</i> is zero, then<b>SymEnumSymbols</b> will look for a local symbol named "foo" within the scope established by the most recent call to the<see cref="SymSetContext" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo?</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If <i>BaseOfDll</i> is not zero, then <b>SymEnumSymbols</b> will look for a global symbol that starts with "foo" and contains one extra character afterwards, such as "fool" and "foot".<para>If <i>BaseOfDll</i> is zero, then<b>SymEnumSymbols</b> will look for a symbol that starts with "foo" and contains one extra character afterwards, such as "fool" and "foot". The search would be within the scope established by the most recent call to the<see cref="SymSetContext" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo*!bar</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <b>SymEnumSymbols</b> will look in every loaded module that starts with the text "foo" for a symbol called "bar". It could find matches such as these, "foot!bar", "footlocker!bar", and "fool!bar".</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>*!*</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <b>SymEnumSymbols</b> will enumerate every symbol in every loaded module.</description>
        </listheader>
      </list>
    </param>
    <param name="EnumSymbolsCallback">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</param>
    <param name="UserContext">A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumSymbolsW">
    <summary>Enumerates all symbols in a process.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and<i>Mask</i> does not contain an exclamation point, the function uses the scope established by the <see cref="SymSetContext" /> function.</param>
    <param name="Mask">
      <para>A wildcard string that indicates the names of the symbols to be enumerated. The text can optionally contain the wildcards, "*" and "?".</para>
      <para>To specify a specific module or set of modules, begin the text with a wildcard string specifying the module, followed by an exclamation point. When specifying a module, <i>BaseOfDll</i> is ignored.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If <i>BaseOfDll</i> is not zero, then <b>SymEnumSymbols</b> will look for a global symbol named "foo".<para>If <i>BaseOfDll</i> is zero, then<b>SymEnumSymbols</b> will look for a local symbol named "foo" within the scope established by the most recent call to the<see cref="SymSetContext" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo?</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>If <i>BaseOfDll</i> is not zero, then <b>SymEnumSymbols</b> will look for a global symbol that starts with "foo" and contains one extra character afterwards, such as "fool" and "foot".<para>If <i>BaseOfDll</i> is zero, then<b>SymEnumSymbols</b> will look for a symbol that starts with "foo" and contains one extra character afterwards, such as "fool" and "foot". The search would be within the scope established by the most recent call to the<see cref="SymSetContext" /> function.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>foo*!bar</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <b>SymEnumSymbols</b> will look in every loaded module that starts with the text "foo" for a symbol called "bar". It could find matches such as these, "foot!bar", "footlocker!bar", and "fool!bar".</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>*!*</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>
            <b>SymEnumSymbols</b> will enumerate every symbol in every loaded module.</description>
        </listheader>
      </list>
    </param>
    <param name="EnumSymbolsCallback">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</param>
    <param name="UserContext">A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumTypes">
    <summary>Enumerates all user-defined types.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="EnumSymbolsCallback">A pointer to an<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</param>
    <param name="UserContext">A user-defined value to be passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context information for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumTypesW">
    <summary>Enumerates all user-defined types.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="EnumSymbolsCallback">A pointer to an<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</param>
    <param name="UserContext">A user-defined value to be passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context information for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumTypesByName">
    <summary>Enumerates all user-defined types.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="mask">A wildcard expression that indicates the names of the symbols to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</param>
    <param name="EnumSymbolsCallback">A pointer to an<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</param>
    <param name="UserContext">A user-defined value to be passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context information for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumTypesByNameW">
    <summary>Enumerates all user-defined types.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="mask">A wildcard expression that indicates the names of the symbols to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</param>
    <param name="EnumSymbolsCallback">A pointer to an<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</param>
    <param name="UserContext">A user-defined value to be passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context information for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumTypesByName">
    <summary>Enumerates all user-defined types.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="mask">A wildcard expression that indicates the names of the symbols to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</param>
    <param name="EnumSymbolsCallback">A pointer to an<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</param>
    <param name="UserContext">A user-defined value to be passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context information for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumTypesByNameW">
    <summary>Enumerates all user-defined types.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="mask">A wildcard expression that indicates the names of the symbols to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</param>
    <param name="EnumSymbolsCallback">A pointer to an<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</param>
    <param name="UserContext">A user-defined value to be passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context information for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumTypes">
    <summary>Enumerates all user-defined types.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="EnumSymbolsCallback">A pointer to an<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</param>
    <param name="UserContext">A user-defined value to be passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context information for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymEnumTypesW">
    <summary>Enumerates all user-defined types.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="EnumSymbolsCallback">A pointer to an<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</param>
    <param name="UserContext">A user-defined value to be passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context information for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFindDebugInfoFile">
    <summary>Locates a .dbg file in the process search path.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="FileName">The name of the .dbg file. You can use a partial path.</param>
    <param name="DebugFilePath">The fully qualified path of the .dbg file. This buffer must be at least MAX_PATH characters.</param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct file was found or the function should continue its search. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the .dbg file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFindDebugInfoFileW">
    <summary>Locates a .dbg file in the process search path.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="FileName">The name of the .dbg file. You can use a partial path.</param>
    <param name="DebugFilePath">The fully qualified path of the .dbg file. This buffer must be at least MAX_PATH characters.</param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct file was found or the function should continue its search. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the .dbg file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFindDebugInfoFile">
    <summary>Locates a .dbg file in the process search path.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="FileName">The name of the .dbg file. You can use a partial path.</param>
    <param name="DebugFilePath">The fully qualified path of the .dbg file. This buffer must be at least MAX_PATH characters.</param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct file was found or the function should continue its search. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the .dbg file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFindDebugInfoFileW">
    <summary>Locates a .dbg file in the process search path.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="FileName">The name of the .dbg file. You can use a partial path.</param>
    <param name="DebugFilePath">The fully qualified path of the .dbg file. This buffer must be at least MAX_PATH characters.</param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct file was found or the function should continue its search. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_debug_file_callback">FindDebugInfoFileProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the .dbg file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFindExecutableImage">
    <summary>Locates an executable file in the process search path.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="FileName">The name of the executable file. You can use a partial path.</param>
    <param name="ImageFilePath">The fully qualified path of the executable file. This buffer must be at least MAX_PATH characters.</param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct executable file was found, or whether the function should continue its search. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the executable file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFindExecutableImageW">
    <summary>Locates an executable file in the process search path.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="FileName">The name of the executable file. You can use a partial path.</param>
    <param name="ImageFilePath">The fully qualified path of the executable file. This buffer must be at least MAX_PATH characters.</param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct executable file was found, or whether the function should continue its search. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the executable file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFindExecutableImage">
    <summary>Locates an executable file in the process search path.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="FileName">The name of the executable file. You can use a partial path.</param>
    <param name="ImageFilePath">The fully qualified path of the executable file. This buffer must be at least MAX_PATH characters.</param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct executable file was found, or whether the function should continue its search. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the executable file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFindExecutableImageW">
    <summary>Locates an executable file in the process search path.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="FileName">The name of the executable file. You can use a partial path.</param>
    <param name="ImageFilePath">The fully qualified path of the executable file. This buffer must be at least MAX_PATH characters.</param>
    <param name="Callback">
      <para>An application-defined callback function that verifies whether the correct executable file was found, or whether the function should continue its search. For more information, see<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfind_exe_file_callback">FindExecutableImageProc</a>.</para>
      <para>This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CallerData">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</param>
    <returns>
      <para>If the function succeeds, the return value is an open handle to the executable file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFindFileInPath">
    <summary>Locates a symbol file or executable image.</summary>
    <param name="hprocess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SearchPath">The search path. This can be multiple paths separated by semicolons. It can include both directories and symbol servers. If this parameter is <b>NULL</b>, the function uses the search path set using the<see cref="SymSetSearchPath" /> or <see cref="SymInitialize" /> function.</param>
    <param name="FileName">The name of the file. You can specify a path; however, only the file name is used.</param>
    <param name="id">The first of three identifying parameters (see Remarks).</param>
    <param name="two">The second of three identifying parameters (see Remarks).</param>
    <param name="three">The third of three identifying parameters (see Remarks).</param>
    <param name="flags">
      <para>The format of the <i>id</i> parameter. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SSRVOPT_DWORD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>The <i>id</i> parameter is a <b>DWORD</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SSRVOPT_DWORDPTR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>The <i>id</i> parameter is a pointer to a <b>DWORD</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SSRVOPT_GUIDPTR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>The <i>id</i> parameter is a pointer to a <b>GUID</b>.</description>
        </listheader>
      </list>
    </param>
    <param name="FoundFile">A pointer to a buffer that receives the fully qualified path to the symbol file. This buffer must be at least MAX_PATH characters.</param>
    <param name="callback">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfindfileinpathcallback">SymFindFileInPathProc</a> callback function.</param>
    <param name="context">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</param>
    <returns>If the server locates a valid symbol file, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b> and<see cref="GetLastError" /> returns a value that indicates why the symbol file was not returned.</returns>
  </member>
  <member name="Windows.SymFindFileInPathW">
    <summary>Locates a symbol file or executable image.</summary>
    <param name="hprocess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SearchPath">The search path. This can be multiple paths separated by semicolons. It can include both directories and symbol servers. If this parameter is <b>NULL</b>, the function uses the search path set using the<see cref="SymSetSearchPath" /> or <see cref="SymInitialize" /> function.</param>
    <param name="FileName">The name of the file. You can specify a path; however, only the file name is used.</param>
    <param name="id">The first of three identifying parameters (see Remarks).</param>
    <param name="two">The second of three identifying parameters (see Remarks).</param>
    <param name="three">The third of three identifying parameters (see Remarks).</param>
    <param name="flags">
      <para>The format of the <i>id</i> parameter. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SSRVOPT_DWORD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>The <i>id</i> parameter is a <b>DWORD</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SSRVOPT_DWORDPTR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>The <i>id</i> parameter is a pointer to a <b>DWORD</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SSRVOPT_GUIDPTR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>The <i>id</i> parameter is a pointer to a <b>GUID</b>.</description>
        </listheader>
      </list>
    </param>
    <param name="FoundFile">A pointer to a buffer that receives the fully qualified path to the symbol file. This buffer must be at least MAX_PATH characters.</param>
    <param name="callback">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfindfileinpathcallback">SymFindFileInPathProc</a> callback function.</param>
    <param name="context">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</param>
    <returns>If the server locates a valid symbol file, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b> and<see cref="GetLastError" /> returns a value that indicates why the symbol file was not returned.</returns>
  </member>
  <member name="Windows.SymFindFileInPath">
    <summary>Locates a symbol file or executable image.</summary>
    <param name="hprocess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SearchPath">The search path. This can be multiple paths separated by semicolons. It can include both directories and symbol servers. If this parameter is <b>NULL</b>, the function uses the search path set using the<see cref="SymSetSearchPath" /> or <see cref="SymInitialize" /> function.</param>
    <param name="FileName">The name of the file. You can specify a path; however, only the file name is used.</param>
    <param name="id">The first of three identifying parameters (see Remarks).</param>
    <param name="two">The second of three identifying parameters (see Remarks).</param>
    <param name="three">The third of three identifying parameters (see Remarks).</param>
    <param name="flags">
      <para>The format of the <i>id</i> parameter. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SSRVOPT_DWORD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>The <i>id</i> parameter is a <b>DWORD</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SSRVOPT_DWORDPTR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>The <i>id</i> parameter is a pointer to a <b>DWORD</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SSRVOPT_GUIDPTR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>The <i>id</i> parameter is a pointer to a <b>GUID</b>.</description>
        </listheader>
      </list>
    </param>
    <param name="FoundFile">A pointer to a buffer that receives the fully qualified path to the symbol file. This buffer must be at least MAX_PATH characters.</param>
    <param name="callback">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfindfileinpathcallback">SymFindFileInPathProc</a> callback function.</param>
    <param name="context">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</param>
    <returns>If the server locates a valid symbol file, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b> and<see cref="GetLastError" /> returns a value that indicates why the symbol file was not returned.</returns>
  </member>
  <member name="Windows.SymFindFileInPathW">
    <summary>Locates a symbol file or executable image.</summary>
    <param name="hprocess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SearchPath">The search path. This can be multiple paths separated by semicolons. It can include both directories and symbol servers. If this parameter is <b>NULL</b>, the function uses the search path set using the<see cref="SymSetSearchPath" /> or <see cref="SymInitialize" /> function.</param>
    <param name="FileName">The name of the file. You can specify a path; however, only the file name is used.</param>
    <param name="id">The first of three identifying parameters (see Remarks).</param>
    <param name="two">The second of three identifying parameters (see Remarks).</param>
    <param name="three">The third of three identifying parameters (see Remarks).</param>
    <param name="flags">
      <para>The format of the <i>id</i> parameter. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SSRVOPT_DWORD</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>The <i>id</i> parameter is a <b>DWORD</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SSRVOPT_DWORDPTR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>The <i>id</i> parameter is a pointer to a <b>DWORD</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SSRVOPT_GUIDPTR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>The <i>id</i> parameter is a pointer to a <b>GUID</b>.</description>
        </listheader>
      </list>
    </param>
    <param name="FoundFile">A pointer to a buffer that receives the fully qualified path to the symbol file. This buffer must be at least MAX_PATH characters.</param>
    <param name="callback">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-pfindfileinpathcallback">SymFindFileInPathProc</a> callback function.</param>
    <param name="context">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. This parameter is typically used by an application to pass a pointer to a data structure that provides some context for the callback function.</param>
    <returns>If the server locates a valid symbol file, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b> and<see cref="GetLastError" /> returns a value that indicates why the symbol file was not returned.</returns>
  </member>
  <member name="Windows.SymFromAddr">
    <summary>Retrieves symbol information for the specified address.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Address">The address for which a symbol should be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol, the symbol is found.</param>
    <param name="Displacement">The displacement from the beginning of the symbol, or zero.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the symbol. The symbol name is variable in length; therefore this buffer must be large enough to hold the name stored at the end of the<b>SYMBOL_INFO</b> structure. Be sure to set the <b>MaxNameLen</b> member to the number of bytes reserved for the name.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFromAddrW">
    <summary>Retrieves symbol information for the specified address.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Address">The address for which a symbol should be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol, the symbol is found.</param>
    <param name="Displacement">The displacement from the beginning of the symbol, or zero.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the symbol. The symbol name is variable in length; therefore this buffer must be large enough to hold the name stored at the end of the<b>SYMBOL_INFO</b> structure. Be sure to set the <b>MaxNameLen</b> member to the number of bytes reserved for the name.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFromAddr">
    <summary>Retrieves symbol information for the specified address.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Address">The address for which a symbol should be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol, the symbol is found.</param>
    <param name="Displacement">The displacement from the beginning of the symbol, or zero.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the symbol. The symbol name is variable in length; therefore this buffer must be large enough to hold the name stored at the end of the<b>SYMBOL_INFO</b> structure. Be sure to set the <b>MaxNameLen</b> member to the number of bytes reserved for the name.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFromAddrW">
    <summary>Retrieves symbol information for the specified address.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Address">The address for which a symbol should be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol, the symbol is found.</param>
    <param name="Displacement">The displacement from the beginning of the symbol, or zero.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the symbol. The symbol name is variable in length; therefore this buffer must be large enough to hold the name stored at the end of the<b>SYMBOL_INFO</b> structure. Be sure to set the <b>MaxNameLen</b> member to the number of bytes reserved for the name.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFromIndex">
    <summary>Retrieves symbol information for the specified index.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="Index">A unique value for the symbol.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFromIndexW">
    <summary>Retrieves symbol information for the specified index.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="Index">A unique value for the symbol.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFromIndex">
    <summary>Retrieves symbol information for the specified index.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="Index">A unique value for the symbol.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFromIndexW">
    <summary>Retrieves symbol information for the specified index.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="Index">A unique value for the symbol.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFromInlineContext">
    <summary>Retrieves symbol information for the specified address and inline context.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Address">The address for which a symbol should be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol, the symbol is found.</param>
    <param name="InlineContext">The inline context for which a symbol should be located.</param>
    <param name="Displacement">The displacement from the beginning of the symbol, or zero.</param>
    <param name="Symbol">A pointer to a <see cref="SYMBOL_INFO" /> structure that provides information about the symbol. The symbol name is variable in length; therefore this buffer must be large enough to hold the name stored at the end of the<b>SYMBOL_INFO</b> structure. Be sure to set the<b>MaxNameLen</b> member to the number of bytes reserved for the name.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFromInlineContextW">
    <summary>Retrieves symbol information for the specified address and inline context.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Address">The address for which a symbol should be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol, the symbol is found.</param>
    <param name="InlineContext">The inline context for which a symbol should be located.</param>
    <param name="Displacement">The displacement from the beginning of the symbol, or zero.</param>
    <param name="Symbol">A pointer to a <see cref="SYMBOL_INFO" /> structure that provides information about the symbol. The symbol name is variable in length; therefore this buffer must be large enough to hold the name stored at the end of the<b>SYMBOL_INFO</b> structure. Be sure to set the<b>MaxNameLen</b> member to the number of bytes reserved for the name.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFromInlineContext">
    <summary>Retrieves symbol information for the specified address and inline context.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Address">The address for which a symbol should be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol, the symbol is found.</param>
    <param name="InlineContext">The inline context for which a symbol should be located.</param>
    <param name="Displacement">The displacement from the beginning of the symbol, or zero.</param>
    <param name="Symbol">A pointer to a <see cref="SYMBOL_INFO" /> structure that provides information about the symbol. The symbol name is variable in length; therefore this buffer must be large enough to hold the name stored at the end of the<b>SYMBOL_INFO</b> structure. Be sure to set the<b>MaxNameLen</b> member to the number of bytes reserved for the name.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFromInlineContextW">
    <summary>Retrieves symbol information for the specified address and inline context.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Address">The address for which a symbol should be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol, the symbol is found.</param>
    <param name="InlineContext">The inline context for which a symbol should be located.</param>
    <param name="Displacement">The displacement from the beginning of the symbol, or zero.</param>
    <param name="Symbol">A pointer to a <see cref="SYMBOL_INFO" /> structure that provides information about the symbol. The symbol name is variable in length; therefore this buffer must be large enough to hold the name stored at the end of the<b>SYMBOL_INFO</b> structure. Be sure to set the<b>MaxNameLen</b> member to the number of bytes reserved for the name.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFromName">
    <summary>Retrieves symbol information for the specified name.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Name">The name of the symbol to be located.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFromNameW">
    <summary>Retrieves symbol information for the specified name.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Name">The name of the symbol to be located.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFromName">
    <summary>Retrieves symbol information for the specified name.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Name">The name of the symbol to be located.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFromNameW">
    <summary>Retrieves symbol information for the specified name.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Name">The name of the symbol to be located.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFromToken">
    <summary>Retrieves symbol information for the specified managed code token.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the managed code module.</param>
    <param name="Token">The managed code token.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFromTokenW">
    <summary>Retrieves symbol information for the specified managed code token.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the managed code module.</param>
    <param name="Token">The managed code token.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFromToken">
    <summary>Retrieves symbol information for the specified managed code token.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the managed code module.</param>
    <param name="Token">The managed code token.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFromTokenW">
    <summary>Retrieves symbol information for the specified managed code token.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the managed code module.</param>
    <param name="Token">The managed code token.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the symbol.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFunctionTableAccess">
    <summary>Retrieves the function table entry for the specified address.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="AddrBase">The base address for which function table information is required.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the function table entry.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFunctionTableAccess64">
    <summary>Retrieves the function table entry for the specified address.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="AddrBase">The base address for which function table information is required.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the function table entry.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFunctionTableAccess">
    <summary>Retrieves the function table entry for the specified address.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="AddrBase">The base address for which function table information is required.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the function table entry.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFunctionTableAccess64">
    <summary>Retrieves the function table entry for the specified address.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="AddrBase">The base address for which function table information is required.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the function table entry.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymFunctionTableAccess64AccessRoutines">
    <summary>
      <para>Finds a function table entry or frame pointer omission (FPO) record for an address.</para>
      <para>Use <see cref="SymFunctionTableAccess64" /> instead.</para>
    </summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="AddrBase">The base address for which function table information is required.</param>
    <param name="ReadMemoryRoutine">Pointer to a read memory callback function.</param>
    <param name="GetModuleBaseRoutine">Pointer to a get module base callback function.</param>
  </member>
  <member name="Windows.SymGetExtendedOption">
    <summary>Gets whether the specified extended symbol option on or off.</summary>
    <param name="option">
      <para>The extended symbol option to check. The following are valid values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_EX_DISABLEACCESSTIMEUPDATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>Turns off explicit updates to the last access time of a symbol that is loaded. By default, DbgHelp updates the last access time of a symbol file that is consumed so that a symbol cache can be maintained by using a least recently used mechanism.</description>
        </listheader>
      </list>
    </param>
    <returns>The value of the specified symbol option.</returns>
  </member>
  <member name="Windows.SymGetFileLineOffsets64">
    <summary>Locates line information for the specified module and file name.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="ModuleName">The name of the module in which lines are to be located. If this parameter is <b>NULL</b>, the function searches all modules.</param>
    <param name="FileName">The name of the file in which lines are to be located.</param>
    <param name="Buffer">An array of offsets for each line. The offset for the line n is stored in element n-1. Array elements for lines that do not have line information are left unchanged.</param>
    <param name="BufferLines">The size of the <i>Buffer</i> array, in elements.</param>
    <returns>
      <para>If the function succeeds, the return value is the highest line number found. This value is zero if no line information was found.</para>
      <para>If the function fails, the return value is LINE_ERROR. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetHomeDirectory">
    <summary>Retrieves the home directory used by Dbghelp.</summary>
    <param name="type">
      <para>The directory to be retrieved. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>hdBase</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The home directory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>hdSrc</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The source directory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>hdSym</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The symbol directory.</description>
        </listheader>
      </list>
    </param>
    <param name="dir">A pointer to a string that receives the directory.</param>
    <param name="size">The size of the output buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the <i>dir</i> parameter.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetHomeDirectoryW">
    <summary>Retrieves the home directory used by Dbghelp.</summary>
    <param name="type">
      <para>The directory to be retrieved. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>hdBase</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The home directory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>hdSrc</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The source directory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>hdSym</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The symbol directory.</description>
        </listheader>
      </list>
    </param>
    <param name="dir">A pointer to a string that receives the directory.</param>
    <param name="size">The size of the output buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the <i>dir</i> parameter.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetHomeDirectory">
    <summary>Retrieves the home directory used by Dbghelp.</summary>
    <param name="type">
      <para>The directory to be retrieved. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>hdBase</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The home directory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>hdSrc</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The source directory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>hdSym</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The symbol directory.</description>
        </listheader>
      </list>
    </param>
    <param name="dir">A pointer to a string that receives the directory.</param>
    <param name="size">The size of the output buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the <i>dir</i> parameter.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetHomeDirectoryW">
    <summary>Retrieves the home directory used by Dbghelp.</summary>
    <param name="type">
      <para>The directory to be retrieved. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>hdBase</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The home directory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>hdSrc</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The source directory.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>hdSym</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>The symbol directory.</description>
        </listheader>
      </list>
    </param>
    <param name="dir">A pointer to a string that receives the directory.</param>
    <param name="size">The size of the output buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the <i>dir</i> parameter.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromAddr">
    <summary>Locates the source line for the specified address.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="dwAddr">The address for which a line should be located. It is not necessary for the address to be on a line boundary. If the address appears after the beginning of a line and before the end of the line, the line is found.</param>
    <param name="pdwDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line">A pointer to an <see cref="IMAGEHLP_LINE64" />structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromAddr64">
    <summary>Locates the source line for the specified address.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="dwAddr">The address for which a line should be located. It is not necessary for the address to be on a line boundary. If the address appears after the beginning of a line and before the end of the line, the line is found.</param>
    <param name="pdwDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line">A pointer to an <see cref="IMAGEHLP_LINE64" />structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromAddrW64">
    <summary>Locates the source line for the specified address.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="dwAddr">The address for which a line should be located. It is not necessary for the address to be on a line boundary. If the address appears after the beginning of a line and before the end of the line, the line is found.</param>
    <param name="pdwDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line">A pointer to an <see cref="IMAGEHLP_LINE64" />structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromAddr">
    <summary>Locates the source line for the specified address.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="qwAddr">The address for which a line should be located. It is not necessary for the address to be on a line boundary. If the address appears after the beginning of a line and before the end of the line, the line is found.</param>
    <param name="pdwDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line64">A pointer to an <see cref="IMAGEHLP_LINE64" />structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromAddr64">
    <summary>Locates the source line for the specified address.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="qwAddr">The address for which a line should be located. It is not necessary for the address to be on a line boundary. If the address appears after the beginning of a line and before the end of the line, the line is found.</param>
    <param name="pdwDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line64">A pointer to an <see cref="IMAGEHLP_LINE64" />structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromAddrW64">
    <summary>Locates the source line for the specified address.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="qwAddr">The address for which a line should be located. It is not necessary for the address to be on a line boundary. If the address appears after the beginning of a line and before the end of the line, the line is found.</param>
    <param name="pdwDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line64">A pointer to an <see cref="IMAGEHLP_LINE64" />structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromAddr">
    <summary>Locates the source line for the specified address.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="dwAddr">The address for which a line should be located. It is not necessary for the address to be on a line boundary. If the address appears after the beginning of a line and before the end of the line, the line is found.</param>
    <param name="pdwDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line">A pointer to an <see cref="IMAGEHLP_LINE64" />structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromAddr64">
    <summary>Locates the source line for the specified address.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="dwAddr">The address for which a line should be located. It is not necessary for the address to be on a line boundary. If the address appears after the beginning of a line and before the end of the line, the line is found.</param>
    <param name="pdwDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line">A pointer to an <see cref="IMAGEHLP_LINE64" />structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromAddrW64">
    <summary>Locates the source line for the specified address.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="dwAddr">The address for which a line should be located. It is not necessary for the address to be on a line boundary. If the address appears after the beginning of a line and before the end of the line, the line is found.</param>
    <param name="pdwDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line">A pointer to an <see cref="IMAGEHLP_LINE64" />structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromInlineContext">
    <summary>Locates the source line for the specified inline context.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="qwAddr">The address for which a line should be located. It is not necessary for the address to be on a line boundary. If the address appears after the beginning of a line and before the end of the line, the line is found.</param>
    <param name="InlineContext">The inline context.</param>
    <param name="qwModuleBaseAddress">The base address of the module.</param>
    <param name="pdwDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line64">A pointer to an <see cref="IMAGEHLP_LINE64" />structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromInlineContextW">
    <summary>Locates the source line for the specified inline context.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="qwAddr">The address for which a line should be located. It is not necessary for the address to be on a line boundary. If the address appears after the beginning of a line and before the end of the line, the line is found.</param>
    <param name="InlineContext">The inline context.</param>
    <param name="qwModuleBaseAddress">The base address of the module.</param>
    <param name="pdwDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line64">A pointer to an <see cref="IMAGEHLP_LINE64" />structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromInlineContext">
    <summary>Locates the source line for the specified inline context.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="dwAddr">The address for which a line should be located. It is not necessary for the address to be on a line boundary. If the address appears after the beginning of a line and before the end of the line, the line is found.</param>
    <param name="InlineContext">The inline context.</param>
    <param name="qwModuleBaseAddress">The base address of the module.</param>
    <param name="pdwDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line">A pointer to an <see cref="IMAGEHLP_LINE64" />structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromInlineContextW">
    <summary>Locates the source line for the specified inline context.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="dwAddr">The address for which a line should be located. It is not necessary for the address to be on a line boundary. If the address appears after the beginning of a line and before the end of the line, the line is found.</param>
    <param name="InlineContext">The inline context.</param>
    <param name="qwModuleBaseAddress">The base address of the module.</param>
    <param name="pdwDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line">A pointer to an <see cref="IMAGEHLP_LINE64" />structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromName">
    <summary>Locates a source line for the specified module, file name, and line number.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="ModuleName">The name of the module in which a line is to be located.</param>
    <param name="FileName">The name of the file in which a line is to be located. If the application has more than one source file with this name, be sure to specify a full path.</param>
    <param name="dwLineNumber">The line number to be located.</param>
    <param name="plDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromName64">
    <summary>Locates a source line for the specified module, file name, and line number.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="ModuleName">The name of the module in which a line is to be located.</param>
    <param name="FileName">The name of the file in which a line is to be located. If the application has more than one source file with this name, be sure to specify a full path.</param>
    <param name="dwLineNumber">The line number to be located.</param>
    <param name="plDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromNameW64">
    <summary>Locates a source line for the specified module, file name, and line number.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="ModuleName">The name of the module in which a line is to be located.</param>
    <param name="FileName">The name of the file in which a line is to be located. If the application has more than one source file with this name, be sure to specify a full path.</param>
    <param name="dwLineNumber">The line number to be located.</param>
    <param name="plDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromName">
    <summary>Locates a source line for the specified module, file name, and line number.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="ModuleName">The name of the module in which a line is to be located.</param>
    <param name="FileName">The name of the file in which a line is to be located. If the application has more than one source file with this name, be sure to specify a full path.</param>
    <param name="dwLineNumber">The line number to be located.</param>
    <param name="plDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromName64">
    <summary>Locates a source line for the specified module, file name, and line number.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="ModuleName">The name of the module in which a line is to be located.</param>
    <param name="FileName">The name of the file in which a line is to be located. If the application has more than one source file with this name, be sure to specify a full path.</param>
    <param name="dwLineNumber">The line number to be located.</param>
    <param name="plDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromNameW64">
    <summary>Locates a source line for the specified module, file name, and line number.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="ModuleName">The name of the module in which a line is to be located.</param>
    <param name="FileName">The name of the file in which a line is to be located. If the application has more than one source file with this name, be sure to specify a full path.</param>
    <param name="dwLineNumber">The line number to be located.</param>
    <param name="plDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromName">
    <summary>Locates a source line for the specified module, file name, and line number.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="ModuleName">The name of the module in which a line is to be located.</param>
    <param name="FileName">The name of the file in which a line is to be located. If the application has more than one source file with this name, be sure to specify a full path.</param>
    <param name="dwLineNumber">The line number to be located.</param>
    <param name="plDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromName64">
    <summary>Locates a source line for the specified module, file name, and line number.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="ModuleName">The name of the module in which a line is to be located.</param>
    <param name="FileName">The name of the file in which a line is to be located. If the application has more than one source file with this name, be sure to specify a full path.</param>
    <param name="dwLineNumber">The line number to be located.</param>
    <param name="plDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineFromNameW64">
    <summary>Locates a source line for the specified module, file name, and line number.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="ModuleName">The name of the module in which a line is to be located.</param>
    <param name="FileName">The name of the file in which a line is to be located. If the application has more than one source file with this name, be sure to specify a full path.</param>
    <param name="dwLineNumber">The line number to be located.</param>
    <param name="plDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineNext">
    <summary>Retrieves the line information for the next source line.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure that contains the line information.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineNext64">
    <summary>Retrieves the line information for the next source line.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure that contains the line information.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineNextW64">
    <summary>Retrieves the line information for the next source line.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure that contains the line information.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineNext">
    <summary>Retrieves the line information for the next source line.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure that contains the line information.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineNext64">
    <summary>Retrieves the line information for the next source line.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure that contains the line information.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineNextW64">
    <summary>Retrieves the line information for the next source line.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure that contains the line information.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineNext">
    <summary>Retrieves the line information for the next source line.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure that contains the line information.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineNext64">
    <summary>Retrieves the line information for the next source line.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure that contains the line information.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLineNextW64">
    <summary>Retrieves the line information for the next source line.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure that contains the line information.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLinePrev">
    <summary>Retrieves the line information for the previous source line.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLinePrev64">
    <summary>Retrieves the line information for the previous source line.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLinePrevW64">
    <summary>Retrieves the line information for the previous source line.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLinePrev">
    <summary>Retrieves the line information for the previous source line.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLinePrev64">
    <summary>Retrieves the line information for the previous source line.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLinePrevW64">
    <summary>Retrieves the line information for the previous source line.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLinePrev">
    <summary>Retrieves the line information for the previous source line.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLinePrev64">
    <summary>Retrieves the line information for the previous source line.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetLinePrevW64">
    <summary>Retrieves the line information for the previous source line.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Line">A pointer to an<see cref="IMAGEHLP_LINE64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetModuleBase">
    <summary>Retrieves the base address of the module that contains the specified address.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="dwAddr">The virtual address that is contained in one of the modules loaded by the<see cref="SymLoadModule64" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is a nonzero virtual address. The value is the base address of the module containing the address specified by the <i>dwAddr</i> parameter.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetModuleBase64">
    <summary>Retrieves the base address of the module that contains the specified address.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="dwAddr">The virtual address that is contained in one of the modules loaded by the<see cref="SymLoadModule64" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is a nonzero virtual address. The value is the base address of the module containing the address specified by the <i>dwAddr</i> parameter.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetModuleBase">
    <summary>Retrieves the base address of the module that contains the specified address.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="qwAddr">The virtual address that is contained in one of the modules loaded by the<see cref="SymLoadModule64" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is a nonzero virtual address. The value is the base address of the module containing the address specified by the <i>dwAddr</i> parameter.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetModuleBase64">
    <summary>Retrieves the base address of the module that contains the specified address.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="qwAddr">The virtual address that is contained in one of the modules loaded by the<see cref="SymLoadModule64" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is a nonzero virtual address. The value is the base address of the module containing the address specified by the <i>dwAddr</i> parameter.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetModuleInfo">
    <summary>Retrieves the module information of the specified module.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="dwAddr">The virtual address that is contained in one of the modules loaded by the<see cref="SymLoadModule64" /> function</param>
    <param name="ModuleInfo">A pointer to an<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetModuleInfo64">
    <summary>Retrieves the module information of the specified module.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="dwAddr">The virtual address that is contained in one of the modules loaded by the<see cref="SymLoadModule64" /> function</param>
    <param name="ModuleInfo">A pointer to an<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetModuleInfoW">
    <summary>Retrieves the module information of the specified module.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="dwAddr">The virtual address that is contained in one of the modules loaded by the<see cref="SymLoadModule64" /> function</param>
    <param name="ModuleInfo">A pointer to an<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetModuleInfoW64">
    <summary>Retrieves the module information of the specified module.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="dwAddr">The virtual address that is contained in one of the modules loaded by the<see cref="SymLoadModule64" /> function</param>
    <param name="ModuleInfo">A pointer to an<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetModuleInfo">
    <summary>Retrieves the module information of the specified module.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="qwAddr">The virtual address that is contained in one of the modules loaded by the<see cref="SymLoadModule64" /> function.</param>
    <param name="ModuleInfo">A pointer to an<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetModuleInfo64">
    <summary>Retrieves the module information of the specified module.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="qwAddr">The virtual address that is contained in one of the modules loaded by the<see cref="SymLoadModule64" /> function.</param>
    <param name="ModuleInfo">A pointer to an<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetModuleInfoW">
    <summary>Retrieves the module information of the specified module.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="qwAddr">The virtual address that is contained in one of the modules loaded by the<see cref="SymLoadModule64" /> function.</param>
    <param name="ModuleInfo">A pointer to an<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetModuleInfoW64">
    <summary>Retrieves the module information of the specified module.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="qwAddr">The virtual address that is contained in one of the modules loaded by the<see cref="SymLoadModule64" /> function.</param>
    <param name="ModuleInfo">A pointer to an<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetModuleInfo">
    <summary>Retrieves the module information of the specified module.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="dwAddr">The virtual address that is contained in one of the modules loaded by the<see cref="SymLoadModule64" /> function</param>
    <param name="ModuleInfo">A pointer to an<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetModuleInfo64">
    <summary>Retrieves the module information of the specified module.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="dwAddr">The virtual address that is contained in one of the modules loaded by the<see cref="SymLoadModule64" /> function</param>
    <param name="ModuleInfo">A pointer to an<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetModuleInfoW">
    <summary>Retrieves the module information of the specified module.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="dwAddr">The virtual address that is contained in one of the modules loaded by the<see cref="SymLoadModule64" /> function</param>
    <param name="ModuleInfo">A pointer to an<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetModuleInfoW64">
    <summary>Retrieves the module information of the specified module.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="dwAddr">The virtual address that is contained in one of the modules loaded by the<see cref="SymLoadModule64" /> function</param>
    <param name="ModuleInfo">A pointer to an<see cref="IMAGEHLP_MODULE64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the<b>IMAGEHLP_MODULE64</b> structure. An invalid value will result in an error.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetModuleInfo">
    <summary>Retrieves the module information of the specified module.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="qwAddr">The virtual address that is contained in one of the modules loaded by the<see cref="SymLoadModule64" /> function.</param>
    <param name="ModuleInfo">A pointer to an<see cref="IMAGEHLP_MODULEW64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the<b>IMAGEHLP_MODULEW64</b> structure. An invalid value will result in an error.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetModuleInfo64">
    <summary>Retrieves the module information of the specified module.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="qwAddr">The virtual address that is contained in one of the modules loaded by the<see cref="SymLoadModule64" /> function.</param>
    <param name="ModuleInfo">A pointer to an<see cref="IMAGEHLP_MODULEW64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the<b>IMAGEHLP_MODULEW64</b> structure. An invalid value will result in an error.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetModuleInfoW">
    <summary>Retrieves the module information of the specified module.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="qwAddr">The virtual address that is contained in one of the modules loaded by the<see cref="SymLoadModule64" /> function.</param>
    <param name="ModuleInfo">A pointer to an<see cref="IMAGEHLP_MODULEW64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the<b>IMAGEHLP_MODULEW64</b> structure. An invalid value will result in an error.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetModuleInfoW64">
    <summary>Retrieves the module information of the specified module.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="qwAddr">The virtual address that is contained in one of the modules loaded by the<see cref="SymLoadModule64" /> function.</param>
    <param name="ModuleInfo">A pointer to an<see cref="IMAGEHLP_MODULEW64" /> structure. The <b>SizeOfStruct</b> member must be set to the size of the<b>IMAGEHLP_MODULEW64</b> structure. An invalid value will result in an error.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetOmaps">
    <summary>Retrieves the omap tables within a loaded module.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="OmapTo">An array of address map entries to the new image layout taken from the original layout. For details on the map entries, see the <see cref="OMAP" /> structure.</param>
    <param name="cOmapTo">The number of entries in the <i>OmapTo</i> array.</param>
    <param name="OmapFrom">An array of address map entries from the new image layout to the original layout (as described by the debug symbols). For details on the map entries, see the <see cref="OMAP" /> structure.</param>
    <param name="cOmapFrom">The number of entries in the <i>OmapFrom</i> array.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails (the omap is not found), the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetOptions">
    <summary>Retrieves the current option mask.</summary>
    <returns>The function returns the current options that have been set. Zero is a valid value and indicates that all options are turned off.</returns>
  </member>
  <member name="Windows.SymGetScope">
    <summary>Retrieves the scope for the specified index.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="Index">A unique value for the symbol.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure. The <b>Scope</b> member contains the scope.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetScopeW">
    <summary>Retrieves the scope for the specified index.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="Index">A unique value for the symbol.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure. The <b>Scope</b> member contains the scope.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetScope">
    <summary>Retrieves the scope for the specified index.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="Index">A unique value for the symbol.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure. The <b>Scope</b> member contains the scope.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetScopeW">
    <summary>Retrieves the scope for the specified index.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="Index">A unique value for the symbol.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure. The <b>Scope</b> member contains the scope.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSearchPath">
    <summary>Retrieves the symbol search path for the specified process.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SearchPath">A pointer to the buffer that receives the symbol search path.</param>
    <param name="SearchPathLength">The size of the <i>SearchPath</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSearchPathW">
    <summary>Retrieves the symbol search path for the specified process.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SearchPath">A pointer to the buffer that receives the symbol search path.</param>
    <param name="SearchPathLength">The size of the <i>SearchPath</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSearchPath">
    <summary>Retrieves the symbol search path for the specified process.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SearchPath">A pointer to the buffer that receives the symbol search path.</param>
    <param name="SearchPathLength">The size of the <i>SearchPath</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSearchPathW">
    <summary>Retrieves the symbol search path for the specified process.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SearchPath">A pointer to the buffer that receives the symbol search path.</param>
    <param name="SearchPathLength">The size of the <i>SearchPath</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceFile">
    <summary>Retrieves the specified source file from the source server.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="Params">This parameter is unused.</param>
    <param name="FileSpec">The name of the source file.</param>
    <param name="FilePath">A pointer to a buffer that receives the fully qualified path of the source file.</param>
    <param name="Size">The size of the <i>FilePath</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceFileW">
    <summary>Retrieves the specified source file from the source server.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="Params">This parameter is unused.</param>
    <param name="FileSpec">The name of the source file.</param>
    <param name="FilePath">A pointer to a buffer that receives the fully qualified path of the source file.</param>
    <param name="Size">The size of the <i>FilePath</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceFileChecksum">
    <summary>Retrieves the specified source file checksum from the source server.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="FileSpec">The name of the source file.</param>
    <param name="pCheckSumType">On success, points to the checksum type.</param>
    <param name="pChecksum">pointer to a buffer that receives the checksum. If <b>NULL</b>, then when the call returns <i>pActualBytesWritten</i> returns the number of bytes required.</param>
    <param name="checksumSize">The size of the <i>pChecksum</i> buffer, in bytes.</param>
    <param name="pActualBytesWritten">Pointer to the actual bytes written in the buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceFileChecksumW">
    <summary>Retrieves the specified source file checksum from the source server.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="FileSpec">The name of the source file.</param>
    <param name="pCheckSumType">On success, points to the checksum type.</param>
    <param name="pChecksum">pointer to a buffer that receives the checksum. If <b>NULL</b>, then when the call returns <i>pActualBytesWritten</i> returns the number of bytes required.</param>
    <param name="checksumSize">The size of the <i>pChecksum</i> buffer, in bytes.</param>
    <param name="pActualBytesWritten">Pointer to the actual bytes written in the buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceFileChecksum">
    <summary>Retrieves the specified source file checksum from the source server.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="FileSpec">The name of the source file.</param>
    <param name="pCheckSumType">On success, points to the checksum type.</param>
    <param name="pChecksum">pointer to a buffer that receives the checksum. If <b>NULL</b>, then when the call returns <i>pActualBytesWritten</i> returns the number of bytes required.</param>
    <param name="checksumSize">The size of the <i>pChecksum</i> buffer, in bytes.</param>
    <param name="pActualBytesWritten">Pointer to the actual bytes written in the buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceFileChecksumW">
    <summary>Retrieves the specified source file checksum from the source server.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="FileSpec">The name of the source file.</param>
    <param name="pCheckSumType">On success, points to the checksum type.</param>
    <param name="pChecksum">pointer to a buffer that receives the checksum. If <b>NULL</b>, then when the call returns <i>pActualBytesWritten</i> returns the number of bytes required.</param>
    <param name="checksumSize">The size of the <i>pChecksum</i> buffer, in bytes.</param>
    <param name="pActualBytesWritten">Pointer to the actual bytes written in the buffer.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceFileFromToken">
    <summary>Retrieves the source file associated with the specified token from the source server.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Token">A pointer to the token.</param>
    <param name="Params">This parameter is unused.</param>
    <param name="FilePath">A pointer to a buffer that receives the fully qualified path of the source file.</param>
    <param name="Size">The size of the <i>FilePath</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceFileFromTokenW">
    <summary>Retrieves the source file associated with the specified token from the source server.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Token">A pointer to the token.</param>
    <param name="Params">This parameter is unused.</param>
    <param name="FilePath">A pointer to a buffer that receives the fully qualified path of the source file.</param>
    <param name="Size">The size of the <i>FilePath</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceFileFromToken">
    <summary>Retrieves the source file associated with the specified token from the source server.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Token">A pointer to the token.</param>
    <param name="Params">This parameter is unused.</param>
    <param name="FilePath">A pointer to a buffer that receives the fully qualified path of the source file.</param>
    <param name="Size">The size of the <i>FilePath</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceFileFromTokenW">
    <summary>Retrieves the source file associated with the specified token from the source server.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Token">A pointer to the token.</param>
    <param name="Params">This parameter is unused.</param>
    <param name="FilePath">A pointer to a buffer that receives the fully qualified path of the source file.</param>
    <param name="Size">The size of the <i>FilePath</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceFileToken">
    <summary>Retrieves token for the specified source file from the source server.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="FileSpec">The name of the source file.</param>
    <param name="Token">A pointer to a buffer that receives the token.</param>
    <param name="Size">The size of the <i>Token</i> buffer, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceFileTokenW">
    <summary>Retrieves token for the specified source file from the source server.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="FileSpec">The name of the source file.</param>
    <param name="Token">A pointer to a buffer that receives the token.</param>
    <param name="Size">The size of the <i>Token</i> buffer, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceFileToken">
    <summary>Retrieves token for the specified source file from the source server.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="FileSpec">The name of the source file.</param>
    <param name="Token">A pointer to a buffer that receives the token.</param>
    <param name="Size">The size of the <i>Token</i> buffer, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceFileTokenW">
    <summary>Retrieves token for the specified source file from the source server.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="FileSpec">The name of the source file.</param>
    <param name="Token">A pointer to a buffer that receives the token.</param>
    <param name="Size">The size of the <i>Token</i> buffer, in bytes.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceFile">
    <summary>Retrieves the specified source file from the source server.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="Params">This parameter is unused.</param>
    <param name="FileSpec">The name of the source file.</param>
    <param name="FilePath">A pointer to a buffer that receives the fully qualified path of the source file.</param>
    <param name="Size">The size of the <i>FilePath</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceFileW">
    <summary>Retrieves the specified source file from the source server.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Base">The base address of the module.</param>
    <param name="Params">This parameter is unused.</param>
    <param name="FileSpec">The name of the source file.</param>
    <param name="FilePath">A pointer to a buffer that receives the fully qualified path of the source file.</param>
    <param name="Size">The size of the <i>FilePath</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceVarFromToken">
    <summary>Retrieves the value associated with the specified variable name from the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</a> token.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Token">A pointer to the token.</param>
    <param name="Params">This parameter is unused.</param>
    <param name="VarName">The name of the variable token whose value you want to retrieve.</param>
    <param name="Value">A pointer to a buffer that receives the value associated with the variable token specified in the <i>VarName</i> parameter.</param>
    <param name="Size">The size of the <i>Value</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceVarFromTokenW">
    <summary>Retrieves the value associated with the specified variable name from the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</a> token.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Token">A pointer to the token.</param>
    <param name="Params">This parameter is unused.</param>
    <param name="VarName">The name of the variable token whose value you want to retrieve.</param>
    <param name="Value">A pointer to a buffer that receives the value associated with the variable token specified in the <i>VarName</i> parameter.</param>
    <param name="Size">The size of the <i>Value</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceVarFromToken">
    <summary>Retrieves the value associated with the specified variable name from the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</a> token.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Token">A pointer to the token.</param>
    <param name="Params">This parameter is unused.</param>
    <param name="VarName">The name of the variable token whose value you want to retrieve.</param>
    <param name="Value">A pointer to a buffer that receives the value associated with the variable token specified in the <i>VarName</i> parameter.</param>
    <param name="Size">The size of the <i>Value</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSourceVarFromTokenW">
    <summary>Retrieves the value associated with the specified variable name from the <a href="https://docs.microsoft.com//windows/desktop/Debug/source-server-and-source-indexing">Source Server</a> token.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Token">A pointer to the token.</param>
    <param name="Params">This parameter is unused.</param>
    <param name="VarName">The name of the variable token whose value you want to retrieve.</param>
    <param name="Value">A pointer to a buffer that receives the value associated with the variable token specified in the <i>VarName</i> parameter.</param>
    <param name="Size">The size of the <i>Value</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSymbolFile">
    <summary>Locates a symbol file in the specified symbol path.</summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</para>
      <para>If this handle is 0, <i>SymPath</i> cannot be <b>NULL</b>. Use this option to load a symbol file without calling <see cref="SymInitialize" /> or <see cref="SymCleanup" />.</para>
    </param>
    <param name="SymPath">The symbol path. If this parameter is <b>NULL</b> or an empty string, the function uses the symbol path set using the<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</param>
    <param name="ImageFile">The name of the image file.</param>
    <param name="Type">
      <para>The type of symbol file. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>sfImage</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>A .exe or .dll file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>sfDbg</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>A .dbg file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>sfPdb</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>A .pdb file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>sfMpd</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Reserved.</description>
        </listheader>
      </list>
    </param>
    <param name="SymbolFile">A pointer to a null-terminated string that receives the name of the symbol file.</param>
    <param name="cSymbolFile">The size of the <i>SymbolFile</i> buffer, in characters.</param>
    <param name="DbgFile">A pointer to a buffer that receives the fully qualified path to the symbol file. This buffer must be at least MAX_PATH characters.</param>
    <param name="cDbgFile">The size of the <i>DbgFile</i> buffer, in characters.</param>
    <returns>If the server locates a valid symbol file, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b> and<see cref="GetLastError" /> returns a value that indicates why the symbol file was not returned.</returns>
  </member>
  <member name="Windows.SymGetSymbolFileW">
    <summary>Locates a symbol file in the specified symbol path.</summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</para>
      <para>If this handle is 0, <i>SymPath</i> cannot be <b>NULL</b>. Use this option to load a symbol file without calling <see cref="SymInitialize" /> or <see cref="SymCleanup" />.</para>
    </param>
    <param name="SymPath">The symbol path. If this parameter is <b>NULL</b> or an empty string, the function uses the symbol path set using the<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</param>
    <param name="ImageFile">The name of the image file.</param>
    <param name="Type">
      <para>The type of symbol file. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>sfImage</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>A .exe or .dll file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>sfDbg</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>A .dbg file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>sfPdb</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>A .pdb file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>sfMpd</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Reserved.</description>
        </listheader>
      </list>
    </param>
    <param name="SymbolFile">A pointer to a null-terminated string that receives the name of the symbol file.</param>
    <param name="cSymbolFile">The size of the <i>SymbolFile</i> buffer, in characters.</param>
    <param name="DbgFile">A pointer to a buffer that receives the fully qualified path to the symbol file. This buffer must be at least MAX_PATH characters.</param>
    <param name="cDbgFile">The size of the <i>DbgFile</i> buffer, in characters.</param>
    <returns>If the server locates a valid symbol file, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b> and<see cref="GetLastError" /> returns a value that indicates why the symbol file was not returned.</returns>
  </member>
  <member name="Windows.SymGetSymbolFile">
    <summary>Locates a symbol file in the specified symbol path.</summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</para>
      <para>If this handle is 0, <i>SymPath</i> cannot be <b>NULL</b>. Use this option to load a symbol file without calling <see cref="SymInitialize" /> or <see cref="SymCleanup" />.</para>
    </param>
    <param name="SymPath">The symbol path. If this parameter is <b>NULL</b> or an empty string, the function uses the symbol path set using the<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</param>
    <param name="ImageFile">The name of the image file.</param>
    <param name="Type">
      <para>The type of symbol file. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>sfImage</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>A .exe or .dll file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>sfDbg</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>A .dbg file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>sfPdb</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>A .pdb file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>sfMpd</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Reserved.</description>
        </listheader>
      </list>
    </param>
    <param name="SymbolFile">A pointer to a null-terminated string that receives the name of the symbol file.</param>
    <param name="cSymbolFile">The size of the <i>SymbolFile</i> buffer, in characters.</param>
    <param name="DbgFile">A pointer to a buffer that receives the fully qualified path to the symbol file. This buffer must be at least MAX_PATH characters.</param>
    <param name="cDbgFile">The size of the <i>DbgFile</i> buffer, in characters.</param>
    <returns>If the server locates a valid symbol file, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b> and<see cref="GetLastError" /> returns a value that indicates why the symbol file was not returned.</returns>
  </member>
  <member name="Windows.SymGetSymbolFileW">
    <summary>Locates a symbol file in the specified symbol path.</summary>
    <param name="hProcess">
      <para>A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</para>
      <para>If this handle is 0, <i>SymPath</i> cannot be <b>NULL</b>. Use this option to load a symbol file without calling <see cref="SymInitialize" /> or <see cref="SymCleanup" />.</para>
    </param>
    <param name="SymPath">The symbol path. If this parameter is <b>NULL</b> or an empty string, the function uses the symbol path set using the<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</param>
    <param name="ImageFile">The name of the image file.</param>
    <param name="Type">
      <para>The type of symbol file. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>sfImage</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>A .exe or .dll file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>sfDbg</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>A .dbg file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>sfPdb</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>A .pdb file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>sfMpd</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Reserved.</description>
        </listheader>
      </list>
    </param>
    <param name="SymbolFile">A pointer to a null-terminated string that receives the name of the symbol file.</param>
    <param name="cSymbolFile">The size of the <i>SymbolFile</i> buffer, in characters.</param>
    <param name="DbgFile">A pointer to a buffer that receives the fully qualified path to the symbol file. This buffer must be at least MAX_PATH characters.</param>
    <param name="cDbgFile">The size of the <i>DbgFile</i> buffer, in characters.</param>
    <returns>If the server locates a valid symbol file, it returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b> and<see cref="GetLastError" /> returns a value that indicates why the symbol file was not returned.</returns>
  </member>
  <member name="Windows.SymGetSymFromAddr">
    <summary>
      <para>Locates the symbol for the specified address.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymFromAddr" />.</div>
    </summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="dwAddr">The address for which a symbol is to be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol (the beginning of the symbol plus the symbol size), the symbol is found.</param>
    <param name="pdwDisplacement">The displacement from the beginning of the symbol, or zero.</param>
    <param name="Symbol">A pointer to an<see cref="IMAGEHLP_SYMBOL64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSymFromAddr64">
    <summary>
      <para>Locates the symbol for the specified address.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymFromAddr" />.</div>
    </summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="dwAddr">The address for which a symbol is to be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol (the beginning of the symbol plus the symbol size), the symbol is found.</param>
    <param name="pdwDisplacement">The displacement from the beginning of the symbol, or zero.</param>
    <param name="Symbol">A pointer to an<see cref="IMAGEHLP_SYMBOL64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSymFromAddr">
    <summary>
      <para>Locates the symbol for the specified address.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymFromAddr" />.</div>
    </summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="qwAddr">The address for which a symbol is to be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol (the beginning of the symbol plus the symbol size), the symbol is found.</param>
    <param name="pdwDisplacement">The displacement from the beginning of the symbol, or zero.</param>
    <param name="Symbol">A pointer to an<see cref="IMAGEHLP_SYMBOL64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSymFromAddr64">
    <summary>
      <para>Locates the symbol for the specified address.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymFromAddr" />.</div>
    </summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="qwAddr">The address for which a symbol is to be located. The address does not have to be on a symbol boundary. If the address comes after the beginning of a symbol and before the end of the symbol (the beginning of the symbol plus the symbol size), the symbol is found.</param>
    <param name="pdwDisplacement">The displacement from the beginning of the symbol, or zero.</param>
    <param name="Symbol">A pointer to an<see cref="IMAGEHLP_SYMBOL64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSymFromName">
    <summary>
      <para>Locates a symbol for the specified name.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymFromName" />.</div>
    </summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Name">The symbol name for which a symbol is to be located.</param>
    <param name="Symbol">A pointer to an<see cref="IMAGEHLP_SYMBOL64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSymFromName64">
    <summary>
      <para>Locates a symbol for the specified name.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymFromName" />.</div>
    </summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Name">The symbol name for which a symbol is to be located.</param>
    <param name="Symbol">A pointer to an<see cref="IMAGEHLP_SYMBOL64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSymFromName">
    <summary>
      <para>Locates a symbol for the specified name.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymFromName" />.</div>
    </summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Name">The symbol name for which a symbol is to be located.</param>
    <param name="Symbol">A pointer to an<see cref="IMAGEHLP_SYMBOL64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSymFromName64">
    <summary>
      <para>Locates a symbol for the specified name.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymFromName" />.</div>
    </summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Name">The symbol name for which a symbol is to be located.</param>
    <param name="Symbol">A pointer to an<see cref="IMAGEHLP_SYMBOL64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSymNext">
    <summary>
      <para>Retrieves the symbol information for the next symbol.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymNext" />.</div>
    </summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Symbol">A pointer to an<see cref="IMAGEHLP_SYMBOL64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSymNext64">
    <summary>
      <para>Retrieves the symbol information for the next symbol.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymNext" />.</div>
    </summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Symbol">A pointer to an<see cref="IMAGEHLP_SYMBOL64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSymNext">
    <summary>
      <para>Retrieves the symbol information for the next symbol.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymNext" />.</div>
    </summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Symbol">A pointer to an<see cref="IMAGEHLP_SYMBOL64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSymNext64">
    <summary>
      <para>Retrieves the symbol information for the next symbol.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymNext" />.</div>
    </summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Symbol">A pointer to an<see cref="IMAGEHLP_SYMBOL64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSymPrev">
    <summary>
      <para>Retrieves the symbol information for the previous symbol.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymPrev" />.</div>
    </summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Symbol">A pointer to an<see cref="IMAGEHLP_SYMBOL64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSymPrev64">
    <summary>
      <para>Retrieves the symbol information for the previous symbol.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymPrev" />.</div>
    </summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Symbol">A pointer to an<see cref="IMAGEHLP_SYMBOL64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSymPrev">
    <summary>
      <para>Retrieves the symbol information for the previous symbol.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymPrev" />.</div>
    </summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Symbol">A pointer to an<see cref="IMAGEHLP_SYMBOL64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetSymPrev64">
    <summary>
      <para>Retrieves the symbol information for the previous symbol.</para>
      <div>
        <b>Note</b>  This function is provided only for compatibility. Applications should use <see cref="SymPrev" />.</div>
    </summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Symbol">A pointer to an<see cref="IMAGEHLP_SYMBOL64" /> structure.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetTypeFromName">
    <summary>Retrieves a type index for the specified type name.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="Name">The name of the type.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure. The <b>TypeIndex</b> member contains the type index.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetTypeFromNameW">
    <summary>Retrieves a type index for the specified type name.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="Name">The name of the type.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure. The <b>TypeIndex</b> member contains the type index.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetTypeFromName">
    <summary>Retrieves a type index for the specified type name.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="Name">The name of the type.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure. The <b>TypeIndex</b> member contains the type index.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetTypeFromNameW">
    <summary>Retrieves a type index for the specified type name.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="Name">The name of the type.</param>
    <param name="Symbol">A pointer to a<see cref="SYMBOL_INFO" /> structure. The <b>TypeIndex</b> member contains the type index.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetTypeInfo">
    <summary>Retrieves type information for the specified type index. For larger queries, use the <see cref="SymGetTypeInfoEx" /> function.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="ModBase">The base address of the module.</param>
    <param name="TypeId">The type index. (A number of functions return a type index in the <b>TypeIndex</b> member of the<see cref="SYMBOL_INFO" /> structure.)</param>
    <param name="GetType">The information type. This parameter can be one of more of the values from the <see cref="IMAGEHLP_SYMBOL_TYPE_INFO" /> enumeration type.</param>
    <param name="pInfo">The data. The format of the data depends on the value of the <i>GetType</i> parameter.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymGetTypeInfoEx">
    <summary>Retrieves multiple pieces of type information.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="ModBase">The base address of the module.</param>
    <param name="Params">A pointer to an <see cref="IMAGEHLP_GET_TYPE_INFO_PARAMS" /> structure that specifies input and output information for the query.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymInitialize">
    <summary>Initializes the symbol handler for a process.</summary>
    <param name="hProcess">
      <para>A handle that identifies the caller. This value should be unique and nonzero, but need not be a process handle. However, if you do use a process handle, be sure to use the correct handle. If the application is a debugger, use the process handle for the process being debugged. Do not use the handle returned by <see cref="GetCurrentProcess" />. The handle used must be unique to avoid sharing a session with another component, and using <see cref="GetCurrentProcess" /> can have unexpected results when multiple components are attempting to use dbghelp to inspect the current process. Using <see cref="GetCurrentProcess" /> when debugging another process will also cause functions like <see cref="SymLoadModuleEx" /> to have unexpected results.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="UserSearchPath">
      <para>The path, or series of paths separated by a semicolon (;), that is used to search for symbol files. If this parameter is <b>NULL</b>, the library attempts to form a symbol path from the following sources:</para>
      <list type="bullet">
        <item>
          <description>The current working directory of the application</description>
        </item>
        <item>
          <description>The _NT_SYMBOL_PATH environment variable</description>
        </item>
        <item>
          <description>The _NT_ALTERNATE_SYMBOL_PATH environment variable</description>
        </item>
      </list>Note that the search path can also be set using the <see cref="SymSetSearchPath" /> function.</param>
    <param name="fInvadeProcess">If this value is <b>TRUE</b>, enumerates the loaded modules for the process and effectively calls the<see cref="SymLoadModule64" /> function for each module.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymInitializeW">
    <summary>Initializes the symbol handler for a process.</summary>
    <param name="hProcess">
      <para>A handle that identifies the caller. This value should be unique and nonzero, but need not be a process handle. However, if you do use a process handle, be sure to use the correct handle. If the application is a debugger, use the process handle for the process being debugged. Do not use the handle returned by <see cref="GetCurrentProcess" />. The handle used must be unique to avoid sharing a session with another component, and using <see cref="GetCurrentProcess" /> can have unexpected results when multiple components are attempting to use dbghelp to inspect the current process. Using <see cref="GetCurrentProcess" /> when debugging another process will also cause functions like <see cref="SymLoadModuleEx" /> to have unexpected results.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="UserSearchPath">
      <para>The path, or series of paths separated by a semicolon (;), that is used to search for symbol files. If this parameter is <b>NULL</b>, the library attempts to form a symbol path from the following sources:</para>
      <list type="bullet">
        <item>
          <description>The current working directory of the application</description>
        </item>
        <item>
          <description>The _NT_SYMBOL_PATH environment variable</description>
        </item>
        <item>
          <description>The _NT_ALTERNATE_SYMBOL_PATH environment variable</description>
        </item>
      </list>Note that the search path can also be set using the <see cref="SymSetSearchPath" /> function.</param>
    <param name="fInvadeProcess">If this value is <b>TRUE</b>, enumerates the loaded modules for the process and effectively calls the<see cref="SymLoadModule64" /> function for each module.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymInitialize">
    <summary>Initializes the symbol handler for a process.</summary>
    <param name="hProcess">
      <para>A handle that identifies the caller. This value should be unique and nonzero, but need not be a process handle. However, if you do use a process handle, be sure to use the correct handle. If the application is a debugger, use the process handle for the process being debugged. Do not use the handle returned by <see cref="GetCurrentProcess" /> when debugging another process, because calling functions like <see cref="SymLoadModuleEx" /> can have unexpected results.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="UserSearchPath">
      <para>The path, or series of paths separated by a semicolon (;), that is used to search for symbol files. If this parameter is <b>NULL</b>, the library attempts to form a symbol path from the following sources:</para>
      <list type="bullet">
        <item>
          <description>The current working directory of the application</description>
        </item>
        <item>
          <description>The _NT_SYMBOL_PATH environment variable</description>
        </item>
        <item>
          <description>The _NT_ALTERNATE_SYMBOL_PATH environment variable</description>
        </item>
      </list>Note that the search path can also be set using the <see cref="SymSetSearchPath" /> function.</param>
    <param name="fInvadeProcess">If this value is <b>TRUE</b>, enumerates the loaded modules for the process and effectively calls the<see cref="SymLoadModule64" /> function for each module.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymInitializeW">
    <summary>Initializes the symbol handler for a process.</summary>
    <param name="hProcess">
      <para>A handle that identifies the caller. This value should be unique and nonzero, but need not be a process handle. However, if you do use a process handle, be sure to use the correct handle. If the application is a debugger, use the process handle for the process being debugged. Do not use the handle returned by <see cref="GetCurrentProcess" /> when debugging another process, because calling functions like <see cref="SymLoadModuleEx" /> can have unexpected results.</para>
      <para>This parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="UserSearchPath">
      <para>The path, or series of paths separated by a semicolon (;), that is used to search for symbol files. If this parameter is <b>NULL</b>, the library attempts to form a symbol path from the following sources:</para>
      <list type="bullet">
        <item>
          <description>The current working directory of the application</description>
        </item>
        <item>
          <description>The _NT_SYMBOL_PATH environment variable</description>
        </item>
        <item>
          <description>The _NT_ALTERNATE_SYMBOL_PATH environment variable</description>
        </item>
      </list>Note that the search path can also be set using the <see cref="SymSetSearchPath" /> function.</param>
    <param name="fInvadeProcess">If this value is <b>TRUE</b>, enumerates the loaded modules for the process and effectively calls the<see cref="SymLoadModule64" /> function for each module.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymLoadModule">
    <summary>
      <para>Loads the symbol table.</para>
      <para>This function has been superseded by the <see cref="SymLoadModuleEx" /> function.</para>
    </summary>
    <param name="hProcess">A handle to the process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="hFile">A handle to the file for the executable image. This argument is used mostly by debuggers, where the debugger passes the file handle obtained from a debugging event. A value of <b>NULL</b> indicates that <i>hFile</i> is not used.</param>
    <param name="ImageName">The name of the executable image. This name can contain a partial path, a full path, or no path at all. If the file cannot be located by the name provided, the symbol search path is used.</param>
    <param name="ModuleName">A shortcut name for the module. If the pointer value is <b>NULL</b>, the library creates a name using the base name of the symbol file.</param>
    <param name="BaseOfDll">
      <para>The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an actual load address should use the real load address when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="SizeOfDll">
      <para>The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real size when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the base address of the loaded module.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call<see cref="GetLastError" />.</para>
      <para>If the module is already loaded, the return value is zero and <see cref="GetLastError" /> returns <b>ERROR_SUCCESS</b>.</para>
    </returns>
  </member>
  <member name="Windows.SymLoadModule64">
    <summary>
      <para>Loads the symbol table.</para>
      <para>This function has been superseded by the <see cref="SymLoadModuleEx" /> function.</para>
    </summary>
    <param name="hProcess">A handle to the process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="hFile">A handle to the file for the executable image. This argument is used mostly by debuggers, where the debugger passes the file handle obtained from a debugging event. A value of <b>NULL</b> indicates that <i>hFile</i> is not used.</param>
    <param name="ImageName">The name of the executable image. This name can contain a partial path, a full path, or no path at all. If the file cannot be located by the name provided, the symbol search path is used.</param>
    <param name="ModuleName">A shortcut name for the module. If the pointer value is <b>NULL</b>, the library creates a name using the base name of the symbol file.</param>
    <param name="BaseOfDll">
      <para>The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an actual load address should use the real load address when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="SizeOfDll">
      <para>The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real size when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the base address of the loaded module.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call<see cref="GetLastError" />.</para>
      <para>If the module is already loaded, the return value is zero and <see cref="GetLastError" /> returns <b>ERROR_SUCCESS</b>.</para>
    </returns>
  </member>
  <member name="Windows.SymLoadModule">
    <summary>
      <para>Loads the symbol table.</para>
      <para>This function has been superseded by the <see cref="SymLoadModuleEx" /> function.</para>
    </summary>
    <param name="hProcess">A handle to the process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="hFile">A handle to the file for the executable image. This argument is used mostly by debuggers, where the debugger passes the file handle obtained from a debugging event. A value of <b>NULL</b> indicates that <i>hFile</i> is not used.</param>
    <param name="ImageName">The name of the executable image. This name can contain a partial path, a full path, or no path at all. If the file cannot be located by the name provided, the symbol search path is used.</param>
    <param name="ModuleName">A shortcut name for the module. If the pointer value is <b>NULL</b>, the library creates a name using the base name of the symbol file.</param>
    <param name="BaseOfDll">
      <para>The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an actual load address should use the real load address when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="SizeOfDll">
      <para>The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real size when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the base address of the loaded module.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call<see cref="GetLastError" />.</para>
      <para>If the module is already loaded, the return value is zero and <see cref="GetLastError" /> returns <b>ERROR_SUCCESS</b>.</para>
    </returns>
  </member>
  <member name="Windows.SymLoadModule64">
    <summary>
      <para>Loads the symbol table.</para>
      <para>This function has been superseded by the <see cref="SymLoadModuleEx" /> function.</para>
    </summary>
    <param name="hProcess">A handle to the process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="hFile">A handle to the file for the executable image. This argument is used mostly by debuggers, where the debugger passes the file handle obtained from a debugging event. A value of <b>NULL</b> indicates that <i>hFile</i> is not used.</param>
    <param name="ImageName">The name of the executable image. This name can contain a partial path, a full path, or no path at all. If the file cannot be located by the name provided, the symbol search path is used.</param>
    <param name="ModuleName">A shortcut name for the module. If the pointer value is <b>NULL</b>, the library creates a name using the base name of the symbol file.</param>
    <param name="BaseOfDll">
      <para>The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an actual load address should use the real load address when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="SizeOfDll">
      <para>The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real size when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the base address of the loaded module.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call<see cref="GetLastError" />.</para>
      <para>If the module is already loaded, the return value is zero and <see cref="GetLastError" /> returns <b>ERROR_SUCCESS</b>.</para>
    </returns>
  </member>
  <member name="Windows.SymLoadModuleEx">
    <summary>Loads the symbol table for the specified module.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="hFile">A handle to the file for the executable image. This argument is used mostly by debuggers, where the debugger passes the file handle obtained from a debugging event. A value of <b>NULL</b> indicates that <i>hFile</i> is not used.</param>
    <param name="ImageName">The name of the executable image. This name can contain a partial path, a full path, or no path at all. If the file cannot be located by the name provided, the symbol search path is used.</param>
    <param name="ModuleName">A shortcut name for the module. If the pointer value is <b>NULL</b>, the library creates a name using the base name of the symbol file.</param>
    <param name="BaseOfDll">
      <para>The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an actual load address should use the real load address when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="DllSize">
      <para>The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real size when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="Data">A pointer to a<see cref="MODLOAD_DATA" /> structure that represents headers other than the standard PE header. This parameter is optional and can be <b>NULL</b>.</param>
    <param name="Flags">
      <para>This parameter can be zero or one or more of the following values. If this parameter is zero, the function loads the modules and the symbols for the module.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SLMFLAG_NO_SYMBOLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x4</term>
              </listheader>
            </list>
          </description>
          <description>Loads the module but not the symbols for the module.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SLMFLAG_VIRTUAL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x1</term>
              </listheader>
            </list>
          </description>
          <description>Creates a virtual module named <i>ModuleName</i> at the address specified in <i>BaseOfDll</i>. To add symbols to this module, call the <see cref="SymAddSymbol" /> function.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the base address of the loaded module.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call<see cref="GetLastError" />.</para>
      <para>If the module is already loaded, the return value is zero and <see cref="GetLastError" /> returns ERROR_SUCCESS.</para>
    </returns>
  </member>
  <member name="Windows.SymLoadModuleExW">
    <summary>Loads the symbol table for the specified module.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="hFile">A handle to the file for the executable image. This argument is used mostly by debuggers, where the debugger passes the file handle obtained from a debugging event. A value of <b>NULL</b> indicates that <i>hFile</i> is not used.</param>
    <param name="ImageName">The name of the executable image. This name can contain a partial path, a full path, or no path at all. If the file cannot be located by the name provided, the symbol search path is used.</param>
    <param name="ModuleName">A shortcut name for the module. If the pointer value is <b>NULL</b>, the library creates a name using the base name of the symbol file.</param>
    <param name="BaseOfDll">
      <para>The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an actual load address should use the real load address when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="DllSize">
      <para>The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real size when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="Data">A pointer to a<see cref="MODLOAD_DATA" /> structure that represents headers other than the standard PE header. This parameter is optional and can be <b>NULL</b>.</param>
    <param name="Flags">
      <para>This parameter can be zero or one or more of the following values. If this parameter is zero, the function loads the modules and the symbols for the module.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SLMFLAG_NO_SYMBOLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x4</term>
              </listheader>
            </list>
          </description>
          <description>Loads the module but not the symbols for the module.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SLMFLAG_VIRTUAL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x1</term>
              </listheader>
            </list>
          </description>
          <description>Creates a virtual module named <i>ModuleName</i> at the address specified in <i>BaseOfDll</i>. To add symbols to this module, call the <see cref="SymAddSymbol" /> function.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the base address of the loaded module.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call<see cref="GetLastError" />.</para>
      <para>If the module is already loaded, the return value is zero and <see cref="GetLastError" /> returns ERROR_SUCCESS.</para>
    </returns>
  </member>
  <member name="Windows.SymLoadModuleEx">
    <summary>Loads the symbol table for the specified module.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="hFile">A handle to the file for the executable image. This argument is used mostly by debuggers, where the debugger passes the file handle obtained from a debugging event. A value of <b>NULL</b> indicates that <i>hFile</i> is not used.</param>
    <param name="ImageName">The name of the executable image. This name can contain a partial path, a full path, or no path at all. If the file cannot be located by the name provided, the symbol search path is used.</param>
    <param name="ModuleName">A shortcut name for the module. If the pointer value is <b>NULL</b>, the library creates a name using the base name of the symbol file.</param>
    <param name="BaseOfDll">
      <para>The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an actual load address should use the real load address when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="DllSize">
      <para>The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real size when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="Data">A pointer to a<see cref="MODLOAD_DATA" /> structure that represents headers other than the standard PE header. This parameter is optional and can be <b>NULL</b>.</param>
    <param name="Flags">
      <para>This parameter can be zero or one or more of the following values. If this parameter is zero, the function loads the modules and the symbols for the module.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SLMFLAG_NO_SYMBOLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x4</term>
              </listheader>
            </list>
          </description>
          <description>Loads the module but not the symbols for the module.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SLMFLAG_VIRTUAL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x1</term>
              </listheader>
            </list>
          </description>
          <description>Creates a virtual module named <i>ModuleName</i> at the address specified in <i>BaseOfDll</i>. To add symbols to this module, call the <see cref="SymAddSymbol" /> function.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the base address of the loaded module.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call<see cref="GetLastError" />.</para>
      <para>If the module is already loaded, the return value is zero and <see cref="GetLastError" /> returns ERROR_SUCCESS.</para>
    </returns>
  </member>
  <member name="Windows.SymLoadModuleExW">
    <summary>Loads the symbol table for the specified module.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="hFile">A handle to the file for the executable image. This argument is used mostly by debuggers, where the debugger passes the file handle obtained from a debugging event. A value of <b>NULL</b> indicates that <i>hFile</i> is not used.</param>
    <param name="ImageName">The name of the executable image. This name can contain a partial path, a full path, or no path at all. If the file cannot be located by the name provided, the symbol search path is used.</param>
    <param name="ModuleName">A shortcut name for the module. If the pointer value is <b>NULL</b>, the library creates a name using the base name of the symbol file.</param>
    <param name="BaseOfDll">
      <para>The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an actual load address should use the real load address when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="DllSize">
      <para>The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real size when calling this function.</para>
      <para>If the image is a .pdb file, this parameter cannot be zero.</para>
    </param>
    <param name="Data">A pointer to a<see cref="MODLOAD_DATA" /> structure that represents headers other than the standard PE header. This parameter is optional and can be <b>NULL</b>.</param>
    <param name="Flags">
      <para>This parameter can be zero or one or more of the following values. If this parameter is zero, the function loads the modules and the symbols for the module.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SLMFLAG_NO_SYMBOLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x4</term>
              </listheader>
            </list>
          </description>
          <description>Loads the module but not the symbols for the module.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SLMFLAG_VIRTUAL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x1</term>
              </listheader>
            </list>
          </description>
          <description>Creates a virtual module named <i>ModuleName</i> at the address specified in <i>BaseOfDll</i>. To add symbols to this module, call the <see cref="SymAddSymbol" /> function.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the base address of the loaded module.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call<see cref="GetLastError" />.</para>
      <para>If the module is already loaded, the return value is zero and <see cref="GetLastError" /> returns ERROR_SUCCESS.</para>
    </returns>
  </member>
  <member name="Windows.SymMatchFileName">
    <summary>Compares a string to a file name and path.</summary>
    <param name="FileName">The file name to be compared to the <i>Match</i> parameter.</param>
    <param name="Match">The string to be compared to the <i>FileName</i> parameter.</param>
    <param name="FileNameStop">A pointer to a string buffer that receives a pointer to the location in <i>FileName</i> where matching stopped. For a complete match, this value can be one character before <i>FileName</i>. This value can also be <b>NULL</b>.</param>
    <param name="MatchStop">A pointer to a string buffer that receives a pointer to the location in <i>Match</i> where matching stopped. For a complete match, this value may be one character before <i>Match</i>. This value may be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymMatchFileNameW">
    <summary>Compares a string to a file name and path.</summary>
    <param name="FileName">The file name to be compared to the <i>Match</i> parameter.</param>
    <param name="Match">The string to be compared to the <i>FileName</i> parameter.</param>
    <param name="FileNameStop">A pointer to a string buffer that receives a pointer to the location in <i>FileName</i> where matching stopped. For a complete match, this value can be one character before <i>FileName</i>. This value can also be <b>NULL</b>.</param>
    <param name="MatchStop">A pointer to a string buffer that receives a pointer to the location in <i>Match</i> where matching stopped. For a complete match, this value may be one character before <i>Match</i>. This value may be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymMatchFileName">
    <summary>Compares a string to a file name and path.</summary>
    <param name="FileName">The file name to be compared to the <i>Match</i> parameter.</param>
    <param name="Match">The string to be compared to the <i>FileName</i> parameter.</param>
    <param name="FileNameStop">A pointer to a string buffer that receives a pointer to the location in <i>FileName</i> where matching stopped. For a complete match, this value can be one character before <i>FileName</i>. This value can also be <b>NULL</b>.</param>
    <param name="MatchStop">A pointer to a string buffer that receives a pointer to the location in <i>Match</i> where matching stopped. For a complete match, this value may be one character before <i>Match</i>. This value may be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymMatchFileNameW">
    <summary>Compares a string to a file name and path.</summary>
    <param name="FileName">The file name to be compared to the <i>Match</i> parameter.</param>
    <param name="Match">The string to be compared to the <i>FileName</i> parameter.</param>
    <param name="FileNameStop">A pointer to a string buffer that receives a pointer to the location in <i>FileName</i> where matching stopped. For a complete match, this value can be one character before <i>FileName</i>. This value can also be <b>NULL</b>.</param>
    <param name="MatchStop">A pointer to a string buffer that receives a pointer to the location in <i>Match</i> where matching stopped. For a complete match, this value may be one character before <i>Match</i>. This value may be <b>NULL</b>.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymMatchString">
    <summary>Compares the specified string to the specified wildcard expression.</summary>
    <param name="string">The string, such as a symbol name, to be compared to the <i>expression</i> parameter.</param>
    <param name="expression">The wildcard expression to compare to the <i>string</i> parameter. The wildcard expression supports the inclusion of the * and ? characters. * matches any string and ? matches any single character.</param>
    <param name="fCase">A variable that indicates whether or not the comparison is to be case sensitive.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymMatchStringW">
    <summary>Compares the specified string to the specified wildcard expression.</summary>
    <param name="string">The string, such as a symbol name, to be compared to the <i>expression</i> parameter.</param>
    <param name="expression">The wildcard expression to compare to the <i>string</i> parameter. The wildcard expression supports the inclusion of the * and ? characters. * matches any string and ? matches any single character.</param>
    <param name="fCase">A variable that indicates whether or not the comparison is to be case sensitive.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymMatchString">
    <summary>Compares the specified string to the specified wildcard expression.</summary>
    <param name="string">The string, such as a symbol name, to be compared to the <i>expression</i> parameter.</param>
    <param name="expression">The wildcard expression to compare to the <i>string</i> parameter. The wildcard expression supports the inclusion of the * and ? characters. * matches any string and ? matches any single character.</param>
    <param name="fCase">A variable that indicates whether or not the comparison is to be case sensitive.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymMatchStringA">
    <summary>Compares the specified string to the specified wildcard expression.</summary>
    <param name="string">The string, such as a symbol name, to be compared to the <i>expression</i> parameter.</param>
    <param name="expression">The wildcard expression to compare to the <i>string</i> parameter. The wildcard expression supports the inclusion of the * and ? characters. * matches any string and ? matches any single character.</param>
    <param name="fCase">A variable that indicates whether or not the comparison is to be case sensitive.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymMatchString">
    <summary>Compares the specified string to the specified wildcard expression.</summary>
    <param name="string">The string, such as a symbol name, to be compared to the <i>expression</i> parameter.</param>
    <param name="expression">The wildcard expression to compare to the <i>string</i> parameter. The wildcard expression supports the inclusion of the * and ? characters. * matches any string and ? matches any single character.</param>
    <param name="fCase">A variable that indicates whether or not the comparison is to be case sensitive.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymMatchStringW">
    <summary>Compares the specified string to the specified wildcard expression.</summary>
    <param name="string">The string, such as a symbol name, to be compared to the <i>expression</i> parameter.</param>
    <param name="expression">The wildcard expression to compare to the <i>string</i> parameter. The wildcard expression supports the inclusion of the * and ? characters. * matches any string and ? matches any single character.</param>
    <param name="fCase">A variable that indicates whether or not the comparison is to be case sensitive.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymNext">
    <summary>Retrieves symbol information for the next symbol.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="si">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the current symbol. Upon return, the structure contains information about the next symbol.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymNextW">
    <summary>Retrieves symbol information for the next symbol.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="si">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the current symbol. Upon return, the structure contains information about the next symbol.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymNext">
    <summary>Retrieves symbol information for the next symbol.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="siw">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the current symbol. Upon return, the structure contains information about the next symbol.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymNextW">
    <summary>Retrieves symbol information for the next symbol.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="siw">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the current symbol. Upon return, the structure contains information about the next symbol.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymPrev">
    <summary>Retrieves symbol information for the previous symbol.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="si">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the current symbol. Upon return, the structure contains information about the previous symbol.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymPrevW">
    <summary>Retrieves symbol information for the previous symbol.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="si">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the current symbol. Upon return, the structure contains information about the previous symbol.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymPrev">
    <summary>Retrieves symbol information for the previous symbol.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="siw">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the current symbol. Upon return, the structure contains information about the previous symbol.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymPrevW">
    <summary>Retrieves symbol information for the previous symbol.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="siw">A pointer to a<see cref="SYMBOL_INFO" /> structure that provides information about the current symbol. Upon return, the structure contains information about the previous symbol.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymQueryInlineTrace">
    <summary>Queries an inline trace.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="StartAddress">The start address.</param>
    <param name="StartContext">Contains the context of the start of block.</param>
    <param name="StartRetAddress">Contains the return address of the start of the current block/</param>
    <param name="CurAddress">Contains the current address.</param>
    <param name="CurContext">Address of a <b>DWORD</b> that receives the current context.</param>
    <param name="CurFrameIndex">
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </param>
  </member>
  <member name="Windows.SymRefreshModuleList">
    <summary>Refreshes the module list for the process.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymRegisterCallback">
    <summary>Registers a callback function for use by the symbol handler.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="CallbackFunction">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymRegisterCallback64">
    <summary>Registers a callback function for use by the symbol handler.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="CallbackFunction">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymRegisterCallbackW64">
    <summary>Registers a callback function for use by the symbol handler.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="CallbackFunction">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymRegisterCallback">
    <summary>Registers a callback function for use by the symbol handler.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="CallbackFunction">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymRegisterCallback64">
    <summary>Registers a callback function for use by the symbol handler.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="CallbackFunction">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymRegisterCallbackW64">
    <summary>Registers a callback function for use by the symbol handler.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="CallbackFunction">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymRegisterCallback">
    <summary>Registers a callback function for use by the symbol handler.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="CallbackFunction">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymRegisterCallback64">
    <summary>Registers a callback function for use by the symbol handler.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="CallbackFunction">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymRegisterCallbackW64">
    <summary>Registers a callback function for use by the symbol handler.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="CallbackFunction">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymRegisterFunctionEntryCallback">
    <summary>Registers a callback function for use by the stack walking procedure on Alpha computers.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="StackWalk64" /> function.</param>
    <param name="CallbackFunction">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_funcentry_callback">SymRegisterFunctionEntryCallbackProc64</a> callback function.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymRegisterFunctionEntryCallback64">
    <summary>Registers a callback function for use by the stack walking procedure on Alpha computers.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="StackWalk64" /> function.</param>
    <param name="CallbackFunction">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_funcentry_callback">SymRegisterFunctionEntryCallbackProc64</a> callback function.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymRegisterFunctionEntryCallback">
    <summary>Registers a callback function for use by the stack walking procedure on Alpha computers.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="StackWalk64" /> function.</param>
    <param name="CallbackFunction">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_funcentry_callback">SymRegisterFunctionEntryCallbackProc64</a> callback function.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymRegisterFunctionEntryCallback64">
    <summary>Registers a callback function for use by the stack walking procedure on Alpha computers.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="StackWalk64" /> function.</param>
    <param name="CallbackFunction">A <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_funcentry_callback">SymRegisterFunctionEntryCallbackProc64</a> callback function.</param>
    <param name="UserContext">A user-defined value or <b>NULL</b>. This value is simply passed to the callback function. Normally, this parameter is used by an application to pass a pointer to a data structure that lets the callback function establish some context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSearch">
    <summary>Searches for PDB symbols that meet the specified criteria.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and <i>Mask</i> does not contain an exclamation point, the function uses the scope established by the<see cref="SymSetContext" /> function.</param>
    <param name="Index">A unique value for the symbol.</param>
    <param name="SymTag">The PDB classification. These values are defined in Dbghelp.h in the <b>SymTagEnum</b> enumeration type. For descriptions, see the PDB documentation.</param>
    <param name="Mask">A wildcard expression that indicates the names of the symbols to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</param>
    <param name="Address">The address of the symbol.</param>
    <param name="EnumSymbolsCallback">A<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</param>
    <param name="UserContext">A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <param name="Options">
      <para>The options that control the behavior of this function.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSEARCH_ALLITEMS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x08</term>
              </listheader>
            </list>
          </description>
          <description>Include all symbols and other data in the .pdb files.<para><b>DbgHelp 6.6 and earlier:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSEARCH_GLOBALSONLY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x04</term>
              </listheader>
            </list>
          </description>
          <description>Search only for global symbols.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSEARCH_MASKOBJS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01</term>
              </listheader>
            </list>
          </description>
          <description>For internal use only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSEARCH_RECURSE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x02</term>
              </listheader>
            </list>
          </description>
          <description>Recurse from the top to find all symbols.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSearchW">
    <summary>Searches for PDB symbols that meet the specified criteria.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and <i>Mask</i> does not contain an exclamation point, the function uses the scope established by the<see cref="SymSetContext" /> function.</param>
    <param name="Index">A unique value for the symbol.</param>
    <param name="SymTag">The PDB classification. These values are defined in Dbghelp.h in the <b>SymTagEnum</b> enumeration type. For descriptions, see the PDB documentation.</param>
    <param name="Mask">A wildcard expression that indicates the names of the symbols to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</param>
    <param name="Address">The address of the symbol.</param>
    <param name="EnumSymbolsCallback">A<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</param>
    <param name="UserContext">A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <param name="Options">
      <para>The options that control the behavior of this function.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSEARCH_ALLITEMS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x08</term>
              </listheader>
            </list>
          </description>
          <description>Include all symbols and other data in the .pdb files.<para><b>DbgHelp 6.6 and earlier:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSEARCH_GLOBALSONLY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x04</term>
              </listheader>
            </list>
          </description>
          <description>Search only for global symbols.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSEARCH_MASKOBJS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01</term>
              </listheader>
            </list>
          </description>
          <description>For internal use only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSEARCH_RECURSE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x02</term>
              </listheader>
            </list>
          </description>
          <description>Recurse from the top to find all symbols.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSearch">
    <summary>Searches for PDB symbols that meet the specified criteria.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and <i>Mask</i> does not contain an exclamation point, the function uses the scope established by the<see cref="SymSetContext" /> function.</param>
    <param name="Index">A unique value for the symbol.</param>
    <param name="SymTag">The PDB classification. These values are defined in Dbghelp.h in the <b>SymTagEnum</b> enumeration type. For descriptions, see the PDB documentation.</param>
    <param name="Mask">A wildcard expression that indicates the names of the symbols to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</param>
    <param name="Address">The address of the symbol.</param>
    <param name="EnumSymbolsCallback">A<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</param>
    <param name="UserContext">A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <param name="Options">
      <para>The options that control the behavior of this function.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSEARCH_ALLITEMS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x08</term>
              </listheader>
            </list>
          </description>
          <description>Include all symbols and other data in the .pdb files.<para><b>DbgHelp 6.6 and earlier:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSEARCH_GLOBALSONLY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x04</term>
              </listheader>
            </list>
          </description>
          <description>Search only for global symbols.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSEARCH_MASKOBJS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01</term>
              </listheader>
            </list>
          </description>
          <description>For internal use only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSEARCH_RECURSE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x02</term>
              </listheader>
            </list>
          </description>
          <description>Recurse from the top to find all symbols.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSearchW">
    <summary>Searches for PDB symbols that meet the specified criteria.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module. If this value is zero and <i>Mask</i> contains an exclamation point (!), the function looks across modules. If this value is zero and <i>Mask</i> does not contain an exclamation point, the function uses the scope established by the<see cref="SymSetContext" /> function.</param>
    <param name="Index">A unique value for the symbol.</param>
    <param name="SymTag">The PDB classification. These values are defined in Dbghelp.h in the <b>SymTagEnum</b> enumeration type. For descriptions, see the PDB documentation.</param>
    <param name="Mask">A wildcard expression that indicates the names of the symbols to be enumerated. To specify a module name, use the !<i>mod</i> syntax.</param>
    <param name="Address">The address of the symbol.</param>
    <param name="EnumSymbolsCallback">A<a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psym_enumeratesymbols_callback">SymEnumSymbolsProc</a> callback function that receives the symbol information.</param>
    <param name="UserContext">A user-defined value that is passed to the callback function, or <b>NULL</b>. This parameter is typically used by an application to pass a pointer to a data structure that provides context for the callback function.</param>
    <param name="Options">
      <para>The options that control the behavior of this function.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSEARCH_ALLITEMS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x08</term>
              </listheader>
            </list>
          </description>
          <description>Include all symbols and other data in the .pdb files.<para><b>DbgHelp 6.6 and earlier:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSEARCH_GLOBALSONLY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x04</term>
              </listheader>
            </list>
          </description>
          <description>Search only for global symbols.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSEARCH_MASKOBJS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01</term>
              </listheader>
            </list>
          </description>
          <description>For internal use only.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSEARCH_RECURSE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x02</term>
              </listheader>
            </list>
          </description>
          <description>Recurse from the top to find all symbols.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSetContext">
    <summary>Sets context information used by the<see cref="SymEnumSymbols" /> function. This function only works with PDB symbols.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="StackFrame">A pointer to an <see cref="IMAGEHLP_STACK_FRAME" />structure that contains frame information.</param>
    <param name="Context">This parameter is ignored.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSetExtendedOption">
    <summary>Turns the specified extended symbol option on or off.</summary>
    <param name="option">
      <para>The extended symbol option to turn on or off. The following are valid values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_EX_DISABLEACCESSTIMEUPDATE</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>When set to TRUE, turns off explicitly updating the last access time of a symbol that is loaded. By default, DbgHelp updates the last access time of a symbol file that is consumed so that a symbol cache can be maintained by using a least recently used mechanism.</description>
        </listheader>
      </list>
    </param>
    <param name="value">The value to set for the specified option, either TRUE or FALSE.</param>
    <returns>The previous value of the specified extended option.</returns>
  </member>
  <member name="Windows.SymSetHomeDirectory">
    <summary>Sets the home directory used by Dbghelp.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the <see cref="SymInitialize" /> function.</param>
    <param name="dir">The home directory. This directory must be writable, otherwise the home directory is the common application directory specified with <a href="https://docs.microsoft.com//windows/win32/shell/csidl">CSIDL_COMMON_APPDATA</a>. If this parameter is <b>NULL</b>, the function uses the default directory.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the <i>dir</i> parameter.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSetHomeDirectoryW">
    <summary>Sets the home directory used by Dbghelp.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the <see cref="SymInitialize" /> function.</param>
    <param name="dir">The home directory. This directory must be writable, otherwise the home directory is the common application directory specified with <a href="https://docs.microsoft.com//windows/win32/shell/csidl">CSIDL_COMMON_APPDATA</a>. If this parameter is <b>NULL</b>, the function uses the default directory.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the <i>dir</i> parameter.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSetHomeDirectory">
    <summary>Sets the home directory used by Dbghelp.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the <see cref="SymInitialize" /> function.</param>
    <param name="dir">The home directory. This directory must be writable, otherwise the home directory is the common application directory specified with <a href="https://docs.microsoft.com//windows/win32/shell/csidl">CSIDL_COMMON_APPDATA</a>. If this parameter is <b>NULL</b>, the function uses the default directory.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the <i>dir</i> parameter.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSetHomeDirectoryW">
    <summary>Sets the home directory used by Dbghelp.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the <see cref="SymInitialize" /> function.</param>
    <param name="dir">The home directory. This directory must be writable, otherwise the home directory is the common application directory specified with <a href="https://docs.microsoft.com//windows/win32/shell/csidl">CSIDL_COMMON_APPDATA</a>. If this parameter is <b>NULL</b>, the function uses the default directory.</param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the <i>dir</i> parameter.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSetOptions">
    <summary>Sets the options mask.</summary>
    <param name="SymOptions">
      <para>The symbol options. Zero is a valid value and indicates that all options are turned off. The options values are combined using the OR operator to form a valid options value. The following are valid values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_ALLOW_ABSOLUTE_SYMBOLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>Enables the use of symbols that are stored with absolute addresses. Most symbols are stored as RVAs from the base of the module. DbgHelp translates them to absolute addresses. There are symbols that are stored as an absolute address. These have very specialized purposes and are typically not used.<para><b>DbgHelp 5.1 and earlier:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_ALLOW_ZERO_ADDRESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01000000</term>
              </listheader>
            </list>
          </description>
          <description>Enables the use of symbols that do not have an address. By default, DbgHelp filters out symbols that do not have an address.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_AUTO_PUBLICS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00010000</term>
              </listheader>
            </list>
          </description>
          <description>Do not search the public symbols when searching for symbols by address, or when enumerating symbols, unless they were not found in the global symbols or within the current scope. This option has no effect with <b>SYMOPT_PUBLICS_ONLY</b>.<para><b>DbgHelp 5.1 and earlier:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_CASE_INSENSITIVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000001</term>
              </listheader>
            </list>
          </description>
          <description>All symbol searches are insensitive to case.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_DEBUG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x80000000</term>
              </listheader>
            </list>
          </description>
          <description>Pass debug output through <see cref="OutputDebugString" /> or the <a href="https://docs.microsoft.com//windows/desktop/api/dbghelp/nc-dbghelp-psymbol_registered_callback">SymRegisterCallbackProc64</a> callback function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_DEFERRED_LOADS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000004</term>
              </listheader>
            </list>
          </description>
          <description>Symbols are not loaded until a reference is made requiring the symbols be loaded. This is the fastest, most efficient way to use the symbol handler.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_DISABLE_SYMSRV_AUTODETECT</b>
                </term>
              </listheader>
              <listheader>
                <term>0x02000000</term>
              </listheader>
            </list>
          </description>
          <description>Disables the auto-detection of symbol server stores in the symbol path, even without the "SRV*" designation, maintaining compatibility with previous behavior.<para><b>DbgHelp 6.6 and earlier:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_EXACT_SYMBOLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>Do not load an unmatched .pdb file. Do not load export symbols if all else fails.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_FAIL_CRITICAL_ERRORS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>Do not display system dialog boxes when there is a media failure such as no media in a drive. Instead, the failure happens silently.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_FAVOR_COMPRESSED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00800000</term>
              </listheader>
            </list>
          </description>
          <description>If there is both an uncompressed and a compressed file available, favor the compressed file. This option is good for slow connections.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_FLAT_DIRECTORY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00400000</term>
              </listheader>
            </list>
          </description>
          <description>Symbols are stored in the root directory of the default downstream store.<para><b>DbgHelp 6.1 and earlier:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_IGNORE_CVREC</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000080</term>
              </listheader>
            </list>
          </description>
          <description>Ignore path information in the CodeView record of the image header when loading a .pdb file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_IGNORE_IMAGEDIR</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00200000</term>
              </listheader>
            </list>
          </description>
          <description>Ignore the image directory.<para><b>DbgHelp 6.1 and earlier:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_IGNORE_NT_SYMPATH</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>Do not use the path specified by <b>_NT_SYMBOL_PATH</b> if the user calls <see cref="SymSetSearchPath" /> without a valid path.<para><b>DbgHelp 5.1:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_INCLUDE_32BIT_MODULES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00002000</term>
              </listheader>
            </list>
          </description>
          <description>When debugging on 64-bit Windows, include any 32-bit modules.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_LOAD_ANYTHING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000040</term>
              </listheader>
            </list>
          </description>
          <description>Disable checks to ensure a file (.exe, .dbg., or .pdb) is the correct file. Instead, load the first file located.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_LOAD_LINES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000010</term>
              </listheader>
            </list>
          </description>
          <description>Loads line number information.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_NO_CPP</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000008</term>
              </listheader>
            </list>
          </description>
          <description>All C++ decorated symbols containing the symbol separator "." are replaced by "__". This option exists for debuggers that cannot handle parsing real C++ symbol names.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_NO_IMAGE_SEARCH</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00020000</term>
              </listheader>
            </list>
          </description>
          <description>Do not search the image for the symbol path when loading the symbols for a module if the module header cannot be read.<para><b>DbgHelp 5.1:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_NO_PROMPTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00080000</term>
              </listheader>
            </list>
          </description>
          <description>Prevents prompting for validation from the symbol server.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_NO_PUBLICS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00008000</term>
              </listheader>
            </list>
          </description>
          <description>Do not search the publics table for symbols. This option should have little effect because there are copies of the public symbols in the globals table.<para><b>DbgHelp 5.1:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_NO_UNQUALIFIED_LOADS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Prevents symbols from being loaded when the caller examines symbols across multiple modules. Examine only the module whose symbols have already been loaded.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_OVERWRITE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00100000</term>
              </listheader>
            </list>
          </description>
          <description>Overwrite the downlevel store from the symbol store.<para><b>DbgHelp 6.1 and earlier:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_PUBLICS_ONLY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00004000</term>
              </listheader>
            </list>
          </description>
          <description>Do not use private symbols. The version of DbgHelp that shipped with earlier Windows release supported only public symbols; this option provides compatibility with this limitation.<para><b>DbgHelp 5.1:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_SECURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00040000</term>
              </listheader>
            </list>
          </description>
          <description>DbgHelp will not load any symbol server other than SymSrv. SymSrv will not use the downstream store specified in <b>_NT_SYMBOL_PATH</b>. After this flag has been set, it cannot be cleared.<para><b>DbgHelp 6.0 and 6.1:  </b>This flag can be cleared.</para><para><b>DbgHelp 5.1:  </b>This value is not supported.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMOPT_UNDNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000002</term>
              </listheader>
            </list>
          </description>
          <description>All symbols are presented in undecorated form. <para>This option has no effect on global or local symbols because they are stored undecorated. This option applies only to public symbols.</para></description>
        </listheader>
      </list>
    </param>
    <returns>The function returns the current options mask.</returns>
  </member>
  <member name="Windows.SymSetParentWindow">
    <summary>Sets the window that the caller will use to display a user interface.</summary>
    <param name="hwnd">A handle to the window.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSetScopeFromAddr">
    <summary>Sets the local scope to the symbol that matches the specified address.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Address">The address.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSetScopeFromIndex">
    <summary>Sets the local scope to the symbol that matches the specified index.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module.</param>
    <param name="Index">The unique value for the symbol.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSetScopeFromInlineContext">
    <summary>Sets the local scope to the symbol that matches the specified address and inline context.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="Address">The address.</param>
    <param name="InlineContext">The inline context.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSetSearchPath">
    <summary>Sets the search path for the specified process.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SearchPath">The symbol search path. The string can contain multiple paths separated by semicolons.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSetSearchPathW">
    <summary>Sets the search path for the specified process.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SearchPath">The symbol search path. The string can contain multiple paths separated by semicolons.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSetSearchPath">
    <summary>Sets the search path for the specified process.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SearchPath">The symbol search path. The string can contain multiple paths separated by semicolons.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSetSearchPathW">
    <summary>Sets the search path for the specified process.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SearchPath">The symbol search path. The string can contain multiple paths separated by semicolons.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvDeltaName">
    <summary>Generates the name for a file that describes the relationship between two different versions of the same symbol or image file. Using this feature prevents applications from having to regenerate such information every time they analyze two files.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SymPath">The symbol path. The function uses only the symbol stores described in standard syntax for symbol stores. All other paths are ignored. If this parameter is <b>NULL</b>, the function uses the symbol path set using the<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</param>
    <param name="Type">The extension for the generated file name.</param>
    <param name="File1">The path of the first version of the symbol or image file.</param>
    <param name="File2">The path of the second version of the symbol or image file.</param>
    <returns>
      <para>If the function succeeds, the return value is the resulting file name.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvDeltaNameW">
    <summary>Generates the name for a file that describes the relationship between two different versions of the same symbol or image file. Using this feature prevents applications from having to regenerate such information every time they analyze two files.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SymPath">The symbol path. The function uses only the symbol stores described in standard syntax for symbol stores. All other paths are ignored. If this parameter is <b>NULL</b>, the function uses the symbol path set using the<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</param>
    <param name="Type">The extension for the generated file name.</param>
    <param name="File1">The path of the first version of the symbol or image file.</param>
    <param name="File2">The path of the second version of the symbol or image file.</param>
    <returns>
      <para>If the function succeeds, the return value is the resulting file name.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvDeltaName">
    <summary>Generates the name for a file that describes the relationship between two different versions of the same symbol or image file. Using this feature prevents applications from having to regenerate such information every time they analyze two files.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SymPath">The symbol path. The function uses only the symbol stores described in standard syntax for symbol stores. All other paths are ignored. If this parameter is <b>NULL</b>, the function uses the symbol path set using the<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</param>
    <param name="Type">The extension for the generated file name.</param>
    <param name="File1">The path of the first version of the symbol or image file.</param>
    <param name="File2">The path of the second version of the symbol or image file.</param>
    <returns>
      <para>If the function succeeds, the return value is the resulting file name.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvDeltaNameW">
    <summary>Generates the name for a file that describes the relationship between two different versions of the same symbol or image file. Using this feature prevents applications from having to regenerate such information every time they analyze two files.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SymPath">The symbol path. The function uses only the symbol stores described in standard syntax for symbol stores. All other paths are ignored. If this parameter is <b>NULL</b>, the function uses the symbol path set using the<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</param>
    <param name="Type">The extension for the generated file name.</param>
    <param name="File1">The path of the first version of the symbol or image file.</param>
    <param name="File2">The path of the second version of the symbol or image file.</param>
    <returns>
      <para>If the function succeeds, the return value is the resulting file name.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvGetFileIndexes">
    <summary>Retrieves the indexes for the specified .pdb, .dbg, or image file that would be used to store the file. The combination of these values uniquely identifies the file in the symbol server. They can be used when calling the <see cref="SymFindFileInPath" /> function to search for a file in a symbol store.</summary>
    <param name="File">The name of the file.</param>
    <param name="Id">The first of three identifying parameters.</param>
    <param name="Val1">The second of three identifying parameters.</param>
    <param name="Val2">The third of three identifying parameters.</param>
    <param name="Flags">This parameter is reserved for future use.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvGetFileIndexesW">
    <summary>Retrieves the indexes for the specified .pdb, .dbg, or image file that would be used to store the file. The combination of these values uniquely identifies the file in the symbol server. They can be used when calling the <see cref="SymFindFileInPath" /> function to search for a file in a symbol store.</summary>
    <param name="File">The name of the file.</param>
    <param name="Id">The first of three identifying parameters.</param>
    <param name="Val1">The second of three identifying parameters.</param>
    <param name="Val2">The third of three identifying parameters.</param>
    <param name="Flags">This parameter is reserved for future use.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvGetFileIndexes">
    <summary>Retrieves the indexes for the specified .pdb, .dbg, or image file that would be used to store the file. The combination of these values uniquely identifies the file in the symbol server. They can be used when calling the <see cref="SymFindFileInPath" /> function to search for a file in a symbol store.</summary>
    <param name="File">The name of the file.</param>
    <param name="Id">The first of three identifying parameters.</param>
    <param name="Val1">The second of three identifying parameters.</param>
    <param name="Val2">The third of three identifying parameters.</param>
    <param name="Flags">This parameter is reserved for future use.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvGetFileIndexesW">
    <summary>Retrieves the indexes for the specified .pdb, .dbg, or image file that would be used to store the file. The combination of these values uniquely identifies the file in the symbol server. They can be used when calling the <see cref="SymFindFileInPath" /> function to search for a file in a symbol store.</summary>
    <param name="File">The name of the file.</param>
    <param name="Id">The first of three identifying parameters.</param>
    <param name="Val1">The second of three identifying parameters.</param>
    <param name="Val2">The third of three identifying parameters.</param>
    <param name="Flags">This parameter is reserved for future use.</param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvGetFileIndexInfo">
    <summary>Retrieves the index information for the specified .pdb, .dbg, or image file.</summary>
    <param name="File">The name of the file.</param>
    <param name="Info">A <see cref="SYMSRV_INDEX_INFO" /> structure that receives the index information.</param>
    <param name="Flags">This parameter is reserved for future use.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvGetFileIndexInfoW">
    <summary>Retrieves the index information for the specified .pdb, .dbg, or image file.</summary>
    <param name="File">The name of the file.</param>
    <param name="Info">A <see cref="SYMSRV_INDEX_INFO" /> structure that receives the index information.</param>
    <param name="Flags">This parameter is reserved for future use.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvGetFileIndexInfo">
    <summary>Retrieves the index information for the specified .pdb, .dbg, or image file.</summary>
    <param name="File">The name of the file.</param>
    <param name="Info">A <see cref="SYMSRV_INDEX_INFO" /> structure that receives the index information.</param>
    <param name="Flags">This parameter is reserved for future use.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvGetFileIndexInfoW">
    <summary>Retrieves the index information for the specified .pdb, .dbg, or image file.</summary>
    <param name="File">The name of the file.</param>
    <param name="Info">A <see cref="SYMSRV_INDEX_INFO" /> structure that receives the index information.</param>
    <param name="Flags">This parameter is reserved for future use.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvGetFileIndexString">
    <summary>Retrieves the index string for the specified .pdb, .dbg, or image file.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SrvPath">The path to the symbol server.</param>
    <param name="File">The name of the file.</param>
    <param name="Index">A pointer to a buffer that receives the index string.</param>
    <param name="Size">The size of the <i>Index</i> buffer, in characters.</param>
    <param name="Flags">This parameter is reserved for future use.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvGetFileIndexStringW">
    <summary>Retrieves the index string for the specified .pdb, .dbg, or image file.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SrvPath">The path to the symbol server.</param>
    <param name="File">The name of the file.</param>
    <param name="Index">A pointer to a buffer that receives the index string.</param>
    <param name="Size">The size of the <i>Index</i> buffer, in characters.</param>
    <param name="Flags">This parameter is reserved for future use.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvGetFileIndexString">
    <summary>Retrieves the index string for the specified .pdb, .dbg, or image file.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SrvPath">The path to the symbol server.</param>
    <param name="File">The name of the file.</param>
    <param name="Index">A pointer to a buffer that receives the index string.</param>
    <param name="Size">The size of the <i>Index</i> buffer, in characters.</param>
    <param name="Flags">This parameter is reserved for future use.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvGetFileIndexStringW">
    <summary>Retrieves the index string for the specified .pdb, .dbg, or image file.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SrvPath">The path to the symbol server.</param>
    <param name="File">The name of the file.</param>
    <param name="Index">A pointer to a buffer that receives the index string.</param>
    <param name="Size">The size of the <i>Index</i> buffer, in characters.</param>
    <param name="Flags">This parameter is reserved for future use.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvGetSupplement">
    <summary>Retrieves the specified file from the supplement for a symbol store.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SymPath">The symbol path. The function uses only the symbol stores described in standard syntax for symbol stores. All other paths are ignored. If this parameter is <b>NULL</b>, the function uses the symbol path set using the<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</param>
    <param name="Node">The symbol file associated with the supplemental file.</param>
    <param name="File">The name of the file.</param>
    <returns>
      <para>If the function succeeds, the return value is the fully qualified path for the supplemental file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvGetSupplementW">
    <summary>Retrieves the specified file from the supplement for a symbol store.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SymPath">The symbol path. The function uses only the symbol stores described in standard syntax for symbol stores. All other paths are ignored. If this parameter is <b>NULL</b>, the function uses the symbol path set using the<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</param>
    <param name="Node">The symbol file associated with the supplemental file.</param>
    <param name="File">The name of the file.</param>
    <returns>
      <para>If the function succeeds, the return value is the fully qualified path for the supplemental file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvGetSupplement">
    <summary>Retrieves the specified file from the supplement for a symbol store.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SymPath">The symbol path. The function uses only the symbol stores described in standard syntax for symbol stores. All other paths are ignored. If this parameter is <b>NULL</b>, the function uses the symbol path set using the<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</param>
    <param name="Node">The symbol file associated with the supplemental file.</param>
    <param name="File">The name of the file.</param>
    <returns>
      <para>If the function succeeds, the return value is the fully qualified path for the supplemental file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvGetSupplementW">
    <summary>Retrieves the specified file from the supplement for a symbol store.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SymPath">The symbol path. The function uses only the symbol stores described in standard syntax for symbol stores. All other paths are ignored. If this parameter is <b>NULL</b>, the function uses the symbol path set using the<see cref="SymInitialize" /> or <see cref="SymSetSearchPath" /> function.</param>
    <param name="Node">The symbol file associated with the supplemental file.</param>
    <param name="File">The name of the file.</param>
    <returns>
      <para>If the function succeeds, the return value is the fully qualified path for the supplemental file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvIsStore">
    <summary>Determines whether the specified path points to a symbol store.</summary>
    <param name="hProcess">The handle of a process that you previously passed to the<see cref="SymInitialize" /> function. If this parameter is set to <b>NULL</b>, the function determines only whether the store exists; otherwise, the function determines whether the store exists and contains a process entry for the specified process handle.</param>
    <param name="path">The path to a symbol store. The path can specify the default symbol store (for example, SRV*), point to an HTTP or HTTPS symbol server, or specify a UNC, absolute, or relative path to the store.</param>
    <returns>If the path specifies a symbol store, the function returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>. To get extended error information, call the <see cref="GetLastError" /> function.</returns>
  </member>
  <member name="Windows.SymSrvIsStoreW">
    <summary>Determines whether the specified path points to a symbol store.</summary>
    <param name="hProcess">The handle of a process that you previously passed to the<see cref="SymInitialize" /> function. If this parameter is set to <b>NULL</b>, the function determines only whether the store exists; otherwise, the function determines whether the store exists and contains a process entry for the specified process handle.</param>
    <param name="path">The path to a symbol store. The path can specify the default symbol store (for example, SRV*), point to an HTTP or HTTPS symbol server, or specify a UNC, absolute, or relative path to the store.</param>
    <returns>If the path specifies a symbol store, the function returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>. To get extended error information, call the <see cref="GetLastError" /> function.</returns>
  </member>
  <member name="Windows.SymSrvIsStore">
    <summary>Determines whether the specified path points to a symbol store.</summary>
    <param name="hProcess">The handle of a process that you previously passed to the<see cref="SymInitialize" /> function. If this parameter is set to <b>NULL</b>, the function determines only whether the store exists; otherwise, the function determines whether the store exists and contains a process entry for the specified process handle.</param>
    <param name="path">The path to a symbol store. The path can specify the default symbol store (for example, SRV*), point to an HTTP or HTTPS symbol server, or specify a UNC, absolute, or relative path to the store.</param>
    <returns>If the path specifies a symbol store, the function returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>. To get extended error information, call the <see cref="GetLastError" /> function.</returns>
  </member>
  <member name="Windows.SymSrvIsStoreW">
    <summary>Determines whether the specified path points to a symbol store.</summary>
    <param name="hProcess">The handle of a process that you previously passed to the<see cref="SymInitialize" /> function. If this parameter is set to <b>NULL</b>, the function determines only whether the store exists; otherwise, the function determines whether the store exists and contains a process entry for the specified process handle.</param>
    <param name="path">The path to a symbol store. The path can specify the default symbol store (for example, SRV*), point to an HTTP or HTTPS symbol server, or specify a UNC, absolute, or relative path to the store.</param>
    <returns>If the path specifies a symbol store, the function returns <b>TRUE</b>. Otherwise, it returns <b>FALSE</b>. To get extended error information, call the <see cref="GetLastError" /> function.</returns>
  </member>
  <member name="Windows.SymSrvStoreFile">
    <summary>Stores a file in the specified symbol store.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SrvPath">The symbol store.</param>
    <param name="File">The name of the file.</param>
    <param name="Flags">
      <para>The flags that control the function. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSTOREOPT_COMPRESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01</term>
              </listheader>
            </list>
          </description>
          <description>Compress the file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSTOREOPT_OVERWRITE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x02</term>
              </listheader>
            </list>
          </description>
          <description>Overwrite the file if it exists.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSTOREOPT_PASS_IF_EXISTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x40</term>
              </listheader>
            </list>
          </description>
          <description>Do not report an error if the file already exists in the symbol store.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSTOREOPT_POINTER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x08</term>
              </listheader>
            </list>
          </description>
          <description>Store in File.ptr.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSTOREOPT_RETURNINDEX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x04</term>
              </listheader>
            </list>
          </description>
          <description>Return the index only.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to a null-terminated string that specifies the full-qualified path to the stored file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvStoreFileW">
    <summary>Stores a file in the specified symbol store.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SrvPath">The symbol store.</param>
    <param name="File">The name of the file.</param>
    <param name="Flags">
      <para>The flags that control the function. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSTOREOPT_COMPRESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01</term>
              </listheader>
            </list>
          </description>
          <description>Compress the file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSTOREOPT_OVERWRITE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x02</term>
              </listheader>
            </list>
          </description>
          <description>Overwrite the file if it exists.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSTOREOPT_PASS_IF_EXISTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x40</term>
              </listheader>
            </list>
          </description>
          <description>Do not report an error if the file already exists in the symbol store.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSTOREOPT_POINTER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x08</term>
              </listheader>
            </list>
          </description>
          <description>Store in File.ptr.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSTOREOPT_RETURNINDEX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x04</term>
              </listheader>
            </list>
          </description>
          <description>Return the index only.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to a null-terminated string that specifies the full-qualified path to the stored file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvStoreFile">
    <summary>Stores a file in the specified symbol store.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SrvPath">The symbol store.</param>
    <param name="File">The name of the file.</param>
    <param name="Flags">
      <para>The flags that control the function. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSTOREOPT_COMPRESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01</term>
              </listheader>
            </list>
          </description>
          <description>Compress the file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSTOREOPT_OVERWRITE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x02</term>
              </listheader>
            </list>
          </description>
          <description>Overwrite the file if it exists.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSTOREOPT_PASS_IF_EXISTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x40</term>
              </listheader>
            </list>
          </description>
          <description>Do not report an error if the file already exists in the symbol store.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSTOREOPT_POINTER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x08</term>
              </listheader>
            </list>
          </description>
          <description>Store in File.ptr.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSTOREOPT_RETURNINDEX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x04</term>
              </listheader>
            </list>
          </description>
          <description>Return the index only.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to a null-terminated string that specifies the full-qualified path to the stored file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvStoreFileW">
    <summary>Stores a file in the specified symbol store.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SrvPath">The symbol store.</param>
    <param name="File">The name of the file.</param>
    <param name="Flags">
      <para>The flags that control the function. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSTOREOPT_COMPRESS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01</term>
              </listheader>
            </list>
          </description>
          <description>Compress the file.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSTOREOPT_OVERWRITE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x02</term>
              </listheader>
            </list>
          </description>
          <description>Overwrite the file if it exists.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSTOREOPT_PASS_IF_EXISTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x40</term>
              </listheader>
            </list>
          </description>
          <description>Do not report an error if the file already exists in the symbol store.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSTOREOPT_POINTER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x08</term>
              </listheader>
            </list>
          </description>
          <description>Store in File.ptr.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SYMSTOREOPT_RETURNINDEX</b>
                </term>
              </listheader>
              <listheader>
                <term>0x04</term>
              </listheader>
            </list>
          </description>
          <description>Return the index only.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to a null-terminated string that specifies the full-qualified path to the stored file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvStoreSupplement">
    <summary>Stores a file in the specified supplement to a symbol store. The file is typically associated with a file in the symbol server.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SrvPath">The path to the symbol store.</param>
    <param name="Node">The symbol file associated with the supplemental file.</param>
    <param name="File">The name of the file.</param>
    <param name="Flags">If this parameter is <b>SYMSTOREOPT_COMPRESS</b>, the file is compressed in the symbol store. Currently, there are no other supported values.</param>
    <returns>
      <para>If the function succeeds, the return value is the fully qualified path for the supplemental file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvStoreSupplementW">
    <summary>Stores a file in the specified supplement to a symbol store. The file is typically associated with a file in the symbol server.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SrvPath">The path to the symbol store.</param>
    <param name="Node">The symbol file associated with the supplemental file.</param>
    <param name="File">The name of the file.</param>
    <param name="Flags">If this parameter is <b>SYMSTOREOPT_COMPRESS</b>, the file is compressed in the symbol store. Currently, there are no other supported values.</param>
    <returns>
      <para>If the function succeeds, the return value is the fully qualified path for the supplemental file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvStoreSupplement">
    <summary>Stores a file in the specified supplement to a symbol store. The file is typically associated with a file in the symbol server.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SymPath">The path to the symbol store.</param>
    <param name="Node">The symbol file associated with the supplemental file.</param>
    <param name="File">The name of the file.</param>
    <param name="Flags">If this parameter is <b>SYMSTOREOPT_COMPRESS</b>, the file is compressed in the symbol store. Currently, there are no other supported values.</param>
    <returns>
      <para>If the function succeeds, the return value is the fully qualified path for the supplemental file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymSrvStoreSupplementW">
    <summary>Stores a file in the specified supplement to a symbol store. The file is typically associated with a file in the symbol server.</summary>
    <param name="hProcess">A handle to a process. This handle must have been previously passed to the<see cref="SymInitialize" /> function.</param>
    <param name="SymPath">The path to the symbol store.</param>
    <param name="Node">The symbol file associated with the supplemental file.</param>
    <param name="File">The name of the file.</param>
    <param name="Flags">If this parameter is <b>SYMSTOREOPT_COMPRESS</b>, the file is compressed in the symbol store. Currently, there are no other supported values.</param>
    <returns>
      <para>If the function succeeds, the return value is the fully qualified path for the supplemental file.</para>
      <para>If the function fails, the return value is <b>NULL</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymUnDName">
    <summary>
      <para>Undecorates a decorated C++ symbol name.</para>
      <para>Applications can also use the <see cref="UnDecorateSymbolName" /> function.</para>
    </summary>
    <param name="sym">A pointer to an<see cref="IMAGEHLP_SYMBOL64" /> structure that specifies the symbol to be undecorated.</param>
    <param name="UnDecName">A pointer to a buffer that receives the undecorated name.</param>
    <param name="UnDecNameLength">The size of the <i>UnDecName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymUnDName64">
    <summary>
      <para>Undecorates a decorated C++ symbol name.</para>
      <para>Applications can also use the <see cref="UnDecorateSymbolName" /> function.</para>
    </summary>
    <param name="sym">A pointer to an<see cref="IMAGEHLP_SYMBOL64" /> structure that specifies the symbol to be undecorated.</param>
    <param name="UnDecName">A pointer to a buffer that receives the undecorated name.</param>
    <param name="UnDecNameLength">The size of the <i>UnDecName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymUnDName">
    <summary>
      <para>Undecorates a decorated C++ symbol name.</para>
      <para>Applications can also use the <see cref="UnDecorateSymbolName" /> function.</para>
    </summary>
    <param name="sym">A pointer to an<see cref="IMAGEHLP_SYMBOL64" /> structure that specifies the symbol to be undecorated.</param>
    <param name="UnDecName">A pointer to a buffer that receives the undecorated name.</param>
    <param name="UnDecNameLength">The size of the <i>UnDecName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymUnDName64">
    <summary>
      <para>Undecorates a decorated C++ symbol name.</para>
      <para>Applications can also use the <see cref="UnDecorateSymbolName" /> function.</para>
    </summary>
    <param name="sym">A pointer to an<see cref="IMAGEHLP_SYMBOL64" /> structure that specifies the symbol to be undecorated.</param>
    <param name="UnDecName">A pointer to a buffer that receives the undecorated name.</param>
    <param name="UnDecNameLength">The size of the <i>UnDecName</i> buffer, in characters.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymUnloadModule">
    <summary>Unloads the symbol table.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module that is to be unloaded.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymUnloadModule64">
    <summary>Unloads the symbol table.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module that is to be unloaded.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymUnloadModule">
    <summary>Unloads the symbol table.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module that is to be unloaded.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.SymUnloadModule64">
    <summary>Unloads the symbol table.</summary>
    <param name="hProcess">A handle to the process that was originally passed to the<see cref="SymInitialize" /> function.</param>
    <param name="BaseOfDll">The base address of the module that is to be unloaded.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.UnDecorateSymbolName">
    <summary>Undecorates the specified decorated C++ symbol name.</summary>
    <param name="name">The decorated C++ symbol name. This name can be identified by the first character of the name, which is always a question mark (?).</param>
    <param name="outputString">A pointer to a string buffer that receives the undecorated name.</param>
    <param name="maxStringLength">The size of the <i>UnDecoratedName</i> buffer, in characters.</param>
    <param name="flags">
      <para>The options for how the decorated name is undecorated. This parameter can be zero or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_32_BIT_DECODE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0800</term>
              </listheader>
            </list>
          </description>
          <description>Undecorate 32-bit decorated names.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_COMPLETE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000</term>
              </listheader>
            </list>
          </description>
          <description>Enable full undecoration.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NAME_ONLY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x1000</term>
              </listheader>
            </list>
          </description>
          <description>Undecorate only the name for primary declaration. Returns [scope.]name. Does expand template parameters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_ACCESS_SPECIFIERS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0080</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of access specifiers for members.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_ALLOCATION_LANGUAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0010</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of the declaration language specifier.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_ALLOCATION_MODEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of the declaration model.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_ARGUMENTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2000</term>
              </listheader>
            </list>
          </description>
          <description>Do not undecorate function arguments.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_CV_THISTYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0040</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of CodeView modifiers on the <b>this</b> type for primary declaration.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_FUNCTION_RETURNS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of return types for primary declarations.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_LEADING_UNDERSCORES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Remove leading underscores from Microsoft keywords.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_MEMBER_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0200</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of the static or virtual attribute of members.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_MS_KEYWORDS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of Microsoft keywords.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_MS_THISTYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0020</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of Microsoft keywords on the <b>this</b> type for primary declaration.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_RETURN_UDT_MODEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0400</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of the Microsoft model for user-defined type returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_SPECIAL_SYMS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x4000</term>
              </listheader>
            </list>
          </description>
          <description>Do not undecorate special names, such as vtable, vcall, vector, metatype, and so on.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_THISTYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0060</term>
              </listheader>
            </list>
          </description>
          <description>Disable all modifiers on the <b>this</b> type.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_THROW_SIGNATURES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0100</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of throw-signatures for functions and pointers to functions.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters in the<i>UnDecoratedName</i> buffer, not including the NULL terminator.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call<see cref="GetLastError" />.</para>
      <para>If the function fails and returns zero, the content of the <i>UnDecoratedName</i> buffer is undetermined.</para>
    </returns>
  </member>
  <member name="Windows.UnDecorateSymbolNameW">
    <summary>Undecorates the specified decorated C++ symbol name.</summary>
    <param name="name">The decorated C++ symbol name. This name can be identified by the first character of the name, which is always a question mark (?).</param>
    <param name="outputString">A pointer to a string buffer that receives the undecorated name.</param>
    <param name="maxStringLength">The size of the <i>UnDecoratedName</i> buffer, in characters.</param>
    <param name="flags">
      <para>The options for how the decorated name is undecorated. This parameter can be zero or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_32_BIT_DECODE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0800</term>
              </listheader>
            </list>
          </description>
          <description>Undecorate 32-bit decorated names.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_COMPLETE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000</term>
              </listheader>
            </list>
          </description>
          <description>Enable full undecoration.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NAME_ONLY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x1000</term>
              </listheader>
            </list>
          </description>
          <description>Undecorate only the name for primary declaration. Returns [scope.]name. Does expand template parameters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_ACCESS_SPECIFIERS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0080</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of access specifiers for members.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_ALLOCATION_LANGUAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0010</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of the declaration language specifier.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_ALLOCATION_MODEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of the declaration model.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_ARGUMENTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2000</term>
              </listheader>
            </list>
          </description>
          <description>Do not undecorate function arguments.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_CV_THISTYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0040</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of CodeView modifiers on the <b>this</b> type for primary declaration.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_FUNCTION_RETURNS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of return types for primary declarations.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_LEADING_UNDERSCORES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Remove leading underscores from Microsoft keywords.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_MEMBER_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0200</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of the static or virtual attribute of members.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_MS_KEYWORDS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of Microsoft keywords.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_MS_THISTYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0020</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of Microsoft keywords on the <b>this</b> type for primary declaration.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_RETURN_UDT_MODEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0400</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of the Microsoft model for user-defined type returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_SPECIAL_SYMS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x4000</term>
              </listheader>
            </list>
          </description>
          <description>Do not undecorate special names, such as vtable, vcall, vector, metatype, and so on.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_THISTYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0060</term>
              </listheader>
            </list>
          </description>
          <description>Disable all modifiers on the <b>this</b> type.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_THROW_SIGNATURES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0100</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of throw-signatures for functions and pointers to functions.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters in the<i>UnDecoratedName</i> buffer, not including the NULL terminator.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call<see cref="GetLastError" />.</para>
      <para>If the function fails and returns zero, the content of the <i>UnDecoratedName</i> buffer is undetermined.</para>
    </returns>
  </member>
  <member name="Windows.UnDecorateSymbolName">
    <summary>Undecorates the specified decorated C++ symbol name.</summary>
    <param name="name">The decorated C++ symbol name. This name can be identified by the first character of the name, which is always a question mark (?).</param>
    <param name="outputString">A pointer to a string buffer that receives the undecorated name.</param>
    <param name="maxStringLength">The size of the <i>UnDecoratedName</i> buffer, in characters.</param>
    <param name="flags">
      <para>The options for how the decorated name is undecorated. This parameter can be zero or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_32_BIT_DECODE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0800</term>
              </listheader>
            </list>
          </description>
          <description>Undecorate 32-bit decorated names.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_COMPLETE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000</term>
              </listheader>
            </list>
          </description>
          <description>Enable full undecoration.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NAME_ONLY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x1000</term>
              </listheader>
            </list>
          </description>
          <description>Undecorate only the name for primary declaration. Returns [scope.]name. Does expand template parameters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_ACCESS_SPECIFIERS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0080</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of access specifiers for members.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_ALLOCATION_LANGUAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0010</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of the declaration language specifier.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_ALLOCATION_MODEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of the declaration model.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_ARGUMENTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2000</term>
              </listheader>
            </list>
          </description>
          <description>Do not undecorate function arguments.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_CV_THISTYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0040</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of CodeView modifiers on the <b>this</b> type for primary declaration.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_FUNCTION_RETURNS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of return types for primary declarations.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_LEADING_UNDERSCORES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Remove leading underscores from Microsoft keywords.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_MEMBER_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0200</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of the static or virtual attribute of members.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_MS_KEYWORDS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of Microsoft keywords.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_MS_THISTYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0020</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of Microsoft keywords on the <b>this</b> type for primary declaration.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_RETURN_UDT_MODEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0400</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of the Microsoft model for user-defined type returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_SPECIAL_SYMS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x4000</term>
              </listheader>
            </list>
          </description>
          <description>Do not undecorate special names, such as vtable, vcall, vector, metatype, and so on.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_THISTYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0060</term>
              </listheader>
            </list>
          </description>
          <description>Disable all modifiers on the <b>this</b> type.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_THROW_SIGNATURES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0100</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of throw-signatures for functions and pointers to functions.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters in the<i>UnDecoratedName</i> buffer, not including the NULL terminator.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call<see cref="GetLastError" />.</para>
      <para>If the function fails and returns zero, the content of the <i>UnDecoratedName</i> buffer is undetermined.</para>
    </returns>
  </member>
  <member name="Windows.UnDecorateSymbolNameW">
    <summary>Undecorates the specified decorated C++ symbol name.</summary>
    <param name="name">The decorated C++ symbol name. This name can be identified by the first character of the name, which is always a question mark (?).</param>
    <param name="outputString">A pointer to a string buffer that receives the undecorated name.</param>
    <param name="maxStringLength">The size of the <i>UnDecoratedName</i> buffer, in characters.</param>
    <param name="flags">
      <para>The options for how the decorated name is undecorated. This parameter can be zero or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_32_BIT_DECODE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0800</term>
              </listheader>
            </list>
          </description>
          <description>Undecorate 32-bit decorated names.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_COMPLETE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0000</term>
              </listheader>
            </list>
          </description>
          <description>Enable full undecoration.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NAME_ONLY</b>
                </term>
              </listheader>
              <listheader>
                <term>0x1000</term>
              </listheader>
            </list>
          </description>
          <description>Undecorate only the name for primary declaration. Returns [scope.]name. Does expand template parameters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_ACCESS_SPECIFIERS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0080</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of access specifiers for members.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_ALLOCATION_LANGUAGE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0010</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of the declaration language specifier.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_ALLOCATION_MODEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0008</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of the declaration model.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_ARGUMENTS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x2000</term>
              </listheader>
            </list>
          </description>
          <description>Do not undecorate function arguments.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_CV_THISTYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0040</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of CodeView modifiers on the <b>this</b> type for primary declaration.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_FUNCTION_RETURNS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0004</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of return types for primary declarations.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_LEADING_UNDERSCORES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0001</term>
              </listheader>
            </list>
          </description>
          <description>Remove leading underscores from Microsoft keywords.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_MEMBER_TYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0200</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of the static or virtual attribute of members.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_MS_KEYWORDS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0002</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of Microsoft keywords.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_MS_THISTYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0020</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of Microsoft keywords on the <b>this</b> type for primary declaration.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_RETURN_UDT_MODEL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0400</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of the Microsoft model for user-defined type returns.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_SPECIAL_SYMS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x4000</term>
              </listheader>
            </list>
          </description>
          <description>Do not undecorate special names, such as vtable, vcall, vector, metatype, and so on.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_THISTYPE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0060</term>
              </listheader>
            </list>
          </description>
          <description>Disable all modifiers on the <b>this</b> type.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>UNDNAME_NO_THROW_SIGNATURES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0100</term>
              </listheader>
            </list>
          </description>
          <description>Disable expansion of throw-signatures for functions and pointers to functions.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the return value is the number of characters in the<i>UnDecoratedName</i> buffer, not including the NULL terminator.</para>
      <para>If the function fails, the return value is zero. To retrieve extended error information, call<see cref="GetLastError" />.</para>
      <para>If the function fails and returns zero, the content of the <i>UnDecoratedName</i> buffer is undetermined.</para>
    </returns>
  </member>
  <member name="Windows.UnmapDebugInformation">
    <summary>
      <para>Deallocates the memory and resources allocated by a call to the<see cref="MapDebugInformation" /> function.</para>
      <div>
        <b>Note</b>  This function is provided only for backward compatibility. New applications should use the <see cref="SymUnloadModule64" /> function.</div>
    </summary>
    <param name="DebugInfo">A pointer to an<see cref="IMAGE_DEBUG_INFORMATION" /> structure that is returned from a call to<see cref="MapDebugInformation" />.</param>
    <returns>
      <para>If the function succeeds, the return value is <b>TRUE</b>.</para>
      <para>If the function fails, the return value is <b>FALSE</b>. To retrieve extended error information, call<see cref="GetLastError" />.</para>
    </returns>
  </member>
</doc>