<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="IPropertyDescription.CoerceToCanonicalValue">
    <summary>Coerces the value to the canonical value, according to the property description.</summary>
    <param name="ppropvar">On entry, contains a pointer to a <see cref="PROPVARIANT" /> structure that contains the original value. When this method returns, contains the canonical value.</param>
    <returns>
      <para>If the failure code is not INPLACE_S_TRUNCATED or E_INVALIDARG, then coercion from the value's type to the property description's type was not possible, and the <see cref="PROPVARIANT" /> structure has been cleared.</para>
      <para>Possible results include the following:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The function succeeded. The property value specified by <i>ppropvar</i> is now in a canonical form.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>INPLACE_S_TRUNCATED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The property value specified by <i>ppropvar</i> is now in a truncated, canonical form.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>ppropvar</i> parameter is invalid. The <see cref="PROPVARIANT" /> structure has been cleared.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IPropertyDescription.FormatForDisplay">
    <summary>Gets a formatted, Unicode string representation of a property value.</summary>
    <param name="propvar">A reference to a <see cref="PROPVARIANT" /> structure that contains the type and value of the property.</param>
    <param name="pdfFlags">One or more of the <see cref="PROPDESC_FORMAT_FLAGS" /> flags, which are either bitwise or multiple values, that indicate the property string format.</param>
    <param name="ppszDisplay">
      <para>The address of a pointer to a null-terminated Unicode string that contains the display text.</para>
      <h4>- cchText [out]</h4>
      <para>The length of the buffer at <i>pszText</i> in WCHARS, including the terminating <b>NULL</b>. The maximum size is 0x8000 (32K).</para>
      <h4>- key [in]</h4>
      <para>A reference to the requested property key, which identifies a property. See <see cref="PROPERTYKEY" />.</para>
      <h4>- pszText [out]</h4>
      <para>When this method returns, contains the formatted value as a <b>null</b>-terminated, Unicode string. The calling application must allocate memory for the buffer, and use <see cref="CoTaskMemFree" /> to release the string specified by <i>pszText</i> when it is no longer needed.</para>
    </param>
    <returns>
      <para>Returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The string was copied and <b>null</b>-terminated without truncation. This string may be returned empty due to an empty input string or from a non-empty value that was formatted as an empty string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The empty string resulted from a VT_EMPTY.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>pszText</i> parameter is <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient space. The destination buffer is modified to contain a truncated version of the ideal result and is <b>null</b>-terminated.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IPropertyDescription.GetAggregationType">
    <summary>Gets a value that describes how the property values are displayed when multiple items are selected in the UI.</summary>
    <param name="paggtype">When this method returns, contains a pointer to a value that indicates the aggregation type. See <see cref="PROPDESC_AGGREGATION_TYPE" />.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IPropertyDescription.GetCanonicalName">
    <summary>Gets the case-sensitive name by which a property is known to the system, regardless of its localized name.</summary>
    <param name="ppszName">When this method returns, contains the address of a pointer to the property's canonical name as a null-terminated Unicode string.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IPropertyDescription.GetColumnState">
    <summary>Gets the column state flag, which describes how the property should be treated by interfaces or APIs that use this flag.</summary>
    <param name="pcsFlags">When this method returns, contains a pointer to the column state flag. See <see cref="SHCOLSTATE" /> for valid values.</param>
    <returns>Always returns <b>S_OK</b>.</returns>
  </member>
  <member name="IPropertyDescription.GetConditionType">
    <summary>Gets the condition type and default condition operation to use when displaying the property in the query builder UI. This influences the list of predicate conditions (for example, equals, less than, and contains) that are shown for this property.</summary>
    <param name="pcontype">A pointer to a value that indicates the condition type.</param>
    <param name="popDefault">When this method returns, contains a pointer to a value that indicates the default condition operation.</param>
    <returns>Always returns <b>S_OK</b>.</returns>
  </member>
  <member name="IPropertyDescription.GetDefaultColumnWidth">
    <summary>Gets the default column width of the property in a list view.</summary>
    <param name="pcxChars">A pointer to the column width value, in characters.</param>
    <returns>Always returns <b>S_OK</b>.</returns>
  </member>
  <member name="IPropertyDescription.GetDisplayName">
    <summary>Gets the display name of the property as it is shown in any UI.</summary>
    <param name="ppszName">Contains the address of a pointer to the property's name as a null-terminated Unicode string.</param>
    <returns>
      <para>Returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Display name is obtained.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_INVALIDARG</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The <i>ppszDisplayName</i> parameter is <b>NULL</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>E_OUTOFMEMORY</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Memory allocation failed.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IPropertyDescription.GetDisplayType">
    <summary>Gets the current data type used to display the property.</summary>
    <param name="pdisplaytype">
      <para>Contains a pointer to a value that indicates the display type. One of the following values.</para>
      <h4>PDDT_STRING (0x00000000) (0)</h4>
      <para>The value is displayed as a string.</para>
      <h4>PDDT_NUMBER (0x00000001) (1)</h4>
      <para>The value is displayed as an integer.</para>
      <h4>PDDT_BOOLEAN (0x00000002) (2)</h4>
      <para>The value is displayed as a Boolean value.</para>
      <h4>PDDT_DATETIME (0x00000003) (3)</h4>
      <para>The value is displayed as date and time.</para>
      <h4>PDDT_ENUMERATED (0x00000004) (4)</h4>
      <para>The value is displayed as an enumerated type-list. Use <see cref="IPropertyDescription.GetEnumTypeList" /> to handle this type.</para>
    </param>
    <returns>Always returns <b>S_OK</b>.</returns>
  </member>
  <member name="IPropertyDescription.GetEditInvitation">
    <summary>Gets the text used in edit controls hosted in various dialog boxes.</summary>
    <param name="ppszInvite">When this method returns, contains the address of a pointer to a null-terminated Unicode buffer that holds the invitation text.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IPropertyDescription.GetEnumTypeList">
    <summary>Gets an instance of an <see cref="IPropertyEnumTypeList" />, which can be used to enumerate the possible values for a property.</summary>
    <param name="riid">A reference to the IID of the interface to retrieve through ppv, typically IID_IShellItem.</param>
    <param name="ppv">When this method returns successfully, contains the interface pointer requested in riid. This is typically <see cref="IPropertyEnumTypeList" />.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IPropertyDescription.GetGroupingRange">
    <summary>Gets the grouping method to be used when a view is grouped by a property, and retrieves the grouping type.</summary>
    <param name="pgr">
      <para>Receives a pointer to a flag value that indicates the grouping type. The possible values are:</para>
      <h4>PDGR_DISCRETE</h4>
      <para>Displays individual values.</para>
      <h4>PDGR_ALPHANUMERIC</h4>
      <para>Displays static alphanumeric ranges.</para>
      <h4>PDGR_SIZE</h4>
      <para>Displays static size ranges.</para>
      <h4>PDGR_DYNAMIC</h4>
      <para>Displays dynamically created ranges.</para>
      <h4>PDGR_DATE</h4>
      <para>Displays month and year groups.</para>
      <h4>PDGR_PERCENT</h4>
      <para>Displays percent groups.</para>
      <h4>PDGR_ENUMERATED</h4>
      <para>Displays percent groups returned by <see cref="IPropertyDescription.GetEnumTypeList" />.</para>
    </param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IPropertyDescription.GetPropertyKey">
    <summary>Gets a structure that acts as a property's unique identifier.</summary>
    <param name="pkey">When this method returns, contains a pointer to a <see cref="PROPERTYKEY" /> structure.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IPropertyDescription.GetPropertyType">
    <summary>Gets the variant type of the property.</summary>
    <param name="pvartype">
      <para>When this method returns, contains a pointer to a <a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/ms221127(v=vs.85)">VARTYPE</a> that indicates the property type. If the property is multi-valued, the value pointed to is a <b>VT_VECTOR</b> mask (<b>VT_VECTOR</b> ORed to the <b>VARTYPE</b>. The following are the possible variant types.</para>
      <h4>VT_NULL</h4>
      <para>Value can be any type. No coercion is performed. If a type cannot be retrieved, this method retrieves a default value of VT_NULL.</para>
      <h4>VT_LPWSTR</h4>
      <para>String</para>
      <h4>VT_BOOL</h4>
      <para>Boolean</para>
      <h4>VT_UI1</h4>
      <para>Byte</para>
      <h4>VT_I2</h4>
      <para>16-bit signed integer</para>
      <h4>VT_UI2</h4>
      <para>16-bit unsigned integer</para>
      <h4>VT_I4</h4>
      <para>32-bit signed integer</para>
      <h4>VT_UI4</h4>
      <para>32-bit unsigned integer</para>
      <h4>VT_I8</h4>
      <para>64-bit signed integer</para>
      <h4>VT_UI8</h4>
      <para>64-bit unsigned integer</para>
      <h4>VT_R8</h4>
      <para>Double</para>
      <h4>VT_FILETIME</h4>
      <para>
        <see cref="FILETIME" /> structure</para>
      <h4>VT_CLSID</h4>
      <para>GUID</para>
      <h4>VT_BLOB</h4>
      <para>Unspecified binary data</para>
      <h4>VT_UNKNOWN</h4>
      <para>Object that implements <see cref="IUnknown" /></para>
      <h4>VT_STREAM</h4>
      <para>Object that implements <see cref="IStream" /></para>
    </param>
    <returns>This method always returns <b>S_OK</b>.</returns>
  </member>
  <member name="IPropertyDescription.GetRelativeDescription">
    <summary>Compares two property values in the manner specified by the property description. Returns two display strings that describe how the two properties compare.</summary>
    <param name="propvar1">A reference to a <see cref="PROPVARIANT" /> structure that contains the type and value of the first property.</param>
    <param name="propvar2">A reference to a <see cref="PROPVARIANT" /> structure that contains the type and value of the second property.</param>
    <param name="ppszDesc1">When this method returns, contains the address of a pointer to the description string that compares the first property with the second property. The string is null-terminated.</param>
    <param name="ppszDesc2">When this method returns, contains the address of a pointer to the description string that compares the second property with the first property. The string is null-terminated.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IPropertyDescription.GetRelativeDescriptionType">
    <summary>Gets the relative description type for a property description.</summary>
    <param name="prdt">When this method returns, contains a pointer to the relative description type value. See <see cref="PROPDESC_RELATIVEDESCRIPTION_TYPE" /> for valid values.</param>
    <returns>Always returns <b>S_OK</b>.</returns>
  </member>
  <member name="IPropertyDescription.GetSortDescription">
    <summary>Gets the current sort description flags for the property, which indicate the particular wordings of sort offerings.</summary>
    <param name="psd">
      <para>When this method returns, contains a pointer to the value of one or more of the following flags that indicate the sort types available to the user. Note that the strings shown are English versions only. Localized strings are used for other locales.</para>
      <h4>PDSD_GENERAL</h4>
      <para>Default. "Sort going up", "Sort going down"</para>
      <h4>PDSD_A_Z</h4>
      <para>"A on top", "Z on top"</para>
      <h4>PDSD_LOWEST_HIGHEST</h4>
      <para>"Lowest on top", "Highest on top"</para>
      <h4>PDSD_SMALLEST_BIGGEST</h4>
      <para>"Smallest on top", "Largest on top"</para>
      <h4>PDSD_OLDEST_NEWEST</h4>
      <para>"Oldest on top", "Newest on top"</para>
    </param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IPropertyDescription.GetSortDescriptionLabel">
    <summary>Gets the localized display string that describes the current sort order.</summary>
    <param name="fDescending">
      <b>TRUE</b> if <i>ppszDescription</i> should reference the string "Z on top"; <b>FALSE</b> to reference the string "A on top".</param>
    <param name="ppszDescription">When this method returns, contains the address of a pointer to the sort description as a null-terminated Unicode string.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IPropertyDescription.GetTypeFlags">
    <summary>Gets a set of flags that describe the uses and capabilities of the property.</summary>
    <param name="mask">A mask that specifies which type flags to retrieve. A combination of values found in the <see cref="PROPDESC_TYPE_FLAGS" /> constants. To retrieve all type flags, pass <see cref="PDTF_MASK_ALL" /></param>
    <param name="ppdtFlags">When this method returns, contains a pointer to a value that consists of bitwise <see cref="PROPDESC_TYPE_FLAGS" /> values.</param>
    <returns>Always returns <b>S_OK</b>.</returns>
  </member>
  <member name="IPropertyDescription.GetViewFlags">
    <summary>Gets the current set of flags governing the property's view.</summary>
    <param name="ppdvFlags">When this method returns, contains a pointer to a value that includes one or more of the following flags. See <see cref="PROPDESC_VIEW_FLAGS" /> for valid values.</param>
    <returns>If this method succeeds, it returns <b>S_OK</b>. Otherwise, it returns an <b>HRESULT</b> error code.</returns>
  </member>
  <member name="IPropertyDescription.IsValueCanonical">
    <summary>Gets a value that indicates whether a property is canonical according to the definition of the property description.</summary>
    <param name="propvar">A reference to a <see cref="PROPVARIANT" /> structure that contains the type and value of the property.</param>
    <returns>
      <para>Returns one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value is canonical.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_FALSE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value is not canonical.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="IPropertyDescription">
    <summary>Exposes methods that enumerate and retrieve individual property description details.</summary>
  </member>
</doc>