<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="ITextStoreAnchor.AdviseSink">
    <summary>
      <para>The <b>ITextStoreAnchor.AdviseSink</b> method installs a new advise sink from the <see cref="ITextStoreAnchorSink" /> interface or modifies an existing advise sink.</para>
    </summary>
    <param name="riid">
      <para>Specifies the sink interface. The only supported value is IID_ITextStoreAnchorSink.</para>
    </param>
    <param name="punk">
      <para>Pointer to the sink interface to advise. Cannot be <b>NULL</b>.</para>
    </param>
    <param name="dwMask">
      <para>Specifies the events that notify the advise sink. For more information about possible parameter values, see <a href="https://docs.microsoft.com//windows/desktop/TSF/ts-as--constants">TS_AS_* Constants</a>.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The specified sink interface <i>riid</i> could not be obtained.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The specified sink interface is unsupported.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_UNEXPECTED</b>
            </para>
          </description>
          <description>
            <para>The specified sink object could not be obtained.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Subsequent calls with the same interface, represented by the <i>punk</i> parameter, are handled as requests to update the <i>dwMask</i> parameter. Servers should not call the <b>AddRef</b> method on the sink in response to such a request.</para>
      <para>Servers only maintain a single connection point. Attempts to advise a second sink object fail until the original sink object is removed. Applications should use the <see cref="ITextStoreAnchor.UnadviseSink" /> method to unregister the sink object when notifications are not required.</para>
    </remarks>
    <seealso cref="ITextStoreAnchor " />
    <seealso cref="ITextStoreAnchor.UnadviseSink " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/ts-as--constants">TS_AS_* Constants
</seealso>
  </member>
  <member name="ITextStoreAnchor.FindNextAttrTransition">
    <summary>
      <para>The <b>ITextStoreAnchor.FindNextAttrTransition</b> method finds the location in the text stream where a transition occurs in an attribute value. The specified attribute to check is application-dependent.</para>
    </summary>
    <param name="paStart">
      <para>Pointer to the anchor position at the start of a range to search for an attribute transition.</para>
    </param>
    <param name="paHalt">
      <para>Pointer to the anchor position at the end of a range to search for an attribute transition.</para>
    </param>
    <param name="cFilterAttrs">
      <para>Specifies the number of attributes to check.</para>
    </param>
    <param name="paFilterAttrs">
      <para>Pointer to the <a href="https://docs.microsoft.com//windows/desktop/TSF/ts-attrid">TS_ATTRID</a> data type that specifies the attribute to check. Pre-defined attributes are given in tsattrs.h.</para>
    </param>
    <param name="dwFlags">
      <para>Specifies the direction to search for an attribute transition. By default, the method searches forward.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TS_ATTR_FIND_BACKWARDS</b>
          </description>
          <description>
            <para>The method searches backward in the text stream.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TS_ATTR_FIND_UPDATESTART</b>
          </description>
          <description>
            <para>The method positions the input anchor <i>paStart</i> at the next attribute transition, if one is found. Otherwise the input anchor is not modified.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TS_ATTR_FIND_WANT_OFFSET</b>
          </description>
          <description>
            <para>The <i>plFoundOffset</i> parameter receives the character offset of the attribute transition from <i>paStart</i>.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pfFound">
      <para>Receives a Boolean value of <b>TRUE</b> if an attribute transition was found, otherwise <b>FALSE</b> is returned.</para>
    </param>
    <param name="plFoundOffset">
      <para>Receives the character offset of the attribute transition from the start anchor <i>paStart</i>.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>paStart</i> and/or <i>paHalt</i> are invalid.
</description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_INVALIDPOS</b>
            </para>
          </description>
          <description>
            <para>The character positions specified are beyond the text in the document.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="ITextStoreAnchor" />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/ts-attrid">TS_ATTRID
</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/ts-attr--constants">TS_ATTR_* Constants
</seealso>
  </member>
  <member name="ITextStoreAnchor.GetActiveView">
    <summary>
      <para>The <b>ITextStoreAnchor.GetActiveView</b> method returns a <a href="https://docs.microsoft.com//windows/desktop/TSF/tsviewcookie">TsViewCookie</a> data type that specifies the current active view. TSF supports only a single active view, so a given text store should always return the same <b>TsViewCookie</b> data type.</para>
    </summary>
    <param name="pvcView">
      <para>Receives the <b>TsViewCookie</b> data type that specifies the current active view.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>pvcView</i> is invalid.
</description>
        </item>
      </list>
    </returns>
    <seealso cref="ITextStoreAnchor" />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/tsviewcookie">TsViewCookie
</seealso>
  </member>
  <member name="ITextStoreAnchor.GetAnchorFromPoint">
    <summary>
      <para>The <b>ITextStoreAnchor.GetAnchorFromPoint</b> method converts a point in screen coordinates to an anchor positioned at a corresponding location.</para>
    </summary>
    <param name="vcView">
      <para>Specifies the context view.</para>
    </param>
    <param name="ptScreen">
      <para>Pointer to the <b>POINT</b> structure with the screen coordinates of the point.</para>
    </param>
    <param name="dwFlags">
      <para>Specifies the anchor position to return based upon the screen coordinates of the point relative to a character bounding box. By default, the anchor position returned is the character bounding box containing the screen coordinates of the point. If the point is outside a character bounding box, the method returns <b>NULL</b> or <a href="https://docs.microsoft.com//windows/desktop/TSF/manager-return-values">TF_E_INVALIDPOINT</a>. Other bit flags for this parameter are as follows.</para>
      <para>The bit flags can be combined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>GXFPF_ROUND_NEAREST</b>
          </description>
          <description>
            <para>If the screen coordinates of the point are contained in a character bounding box, an anchor is returned at the bounding edge closest to the screen coordinates of the point.</para>
          </description>
        </item>
        <item>
          <description>
            <b>GXFPF_NEAREST</b>
          </description>
          <description>
            <para>If the screen coordinates of the point are not contained in a character bounding box, an anchor at the closest character position is returned.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="ppaSite">
      <para>Pointer to an anchor object at a location corresponding to the screen coordinates <i>ptScreen</i>.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The method failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more input parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>The attempt to instantiate an anchor at the specified location failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_INVALIDPOINT</b>
            </para>
          </description>
          <description>
            <para>The <i>ptScreen</i> parameter is not within the bounding box of any character.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_NOLAYOUT</b>
            </para>
          </description>
          <description>
            <para>The application has not calculated a text layout yet.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>
        <img alt="Point 1 is in character bounding box and point 2 is outside the character bounding box." src="https://docs.microsoft.com/windows/win32/api/TextStor/images/ACPFig01.gif" />
      </para>
      <para>The point 1 screen coordinates cause the offset (character position) of anchor <i>ppaSite</i> to be 0 by default or if the <i>dwFlags</i> parameter is set to <a href="https://docs.microsoft.com//windows/desktop/TSF/gxfpf--constants">GXFPF_NEAREST</a> because the point 1 screen coordinates are inside the character bounding box of character position 0. If the <i>dwFlags</i> parameter is set to GXFPF_ROUND_NEAREST for point 1, the anchor offset is 1 because the point 1 screen coordinates are closest to range position 1. Range position 1 is the starting range position of character position 1.</para>
      <para>For the point 2 screen coordinates, the method returns <b>TF_E_INVALIDPOINT</b> by default or if the <i>dwFlags</i> parameter is set to <b>GXFPF_NEAREST</b> because the point 2 screen coordinates are outside a character bounding box. If the <i>dwFlags</i> parameter is set to <b>GXFPF_ROUND_NEAREST</b>, then the point 2 screen coordinates causes the anchor offset to be 1, because the closest character position to the point 2 screen coordinates is character position 1.</para>
      <para>
        <b>Point 1</b>
      </para>
      <list type="bullet">
        <item>
          <description>Default-- <i>anchor offset = 0</i> --The screen coordinates point is inside the character bounding box of Character Position 0.</description>
        </item>
        <item>
          <description>
            <b>GXFPF_ROUND_NEAREST</b> -- <i>anchor offset = 1</i> --The screen coordinates of the point is closest to Range Position 1 which is the starting range position of Character Position 1.</description>
        </item>
        <item>
          <description>
            <b>GXFPF_NEAREST</b> -- <i>anchor offset = 0</i> --The default behavior occurs because the point is within the character bounding box of Character Position 0.</description>
        </item>
      </list>
      <b>Point 2</b>
      <list type="bullet">
        <item>
          <description>Default-- <i>hr = TF_E_INVALIDPOINT</i> --The screen coordinates of the point are outside a character bounding box.</description>
        </item>
        <item>
          <description>GXPF_ROUND_NEAREST-- <i>hr = TF_E_INVALIDPOINT</i> --The default behavior occurs because the screen coordinates of the point is outside a character bounding box.</description>
        </item>
        <item>
          <description>GXPF_NEAREST-- <i>anchor offset = 1</i> --The closest character position to the screen coordinates of the point is Character Position 1.</description>
        </item>
      </list>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/gxfpf--constants">GXFPF_* Constants
</seealso>
    <seealso cref="ITextStoreAnchor" />
    <seealso cref="ITfContextView.GetRangeFromPoint " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/manager-return-values">Manager Return Values
</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/tsviewcookie">TsViewCookie
</seealso>
  </member>
  <member name="ITextStoreAnchor.GetEmbedded">
    <summary>
      <para>The <b>ITextStoreAnchor.GetEmbedded</b> method obtains an embedded object from a text stream.</para>
    </summary>
    <param name="dwFlags">
      <para>Bit fields that specify how the method deals with hidden text. If set to TS_GEA_HIDDEN, an embedded object can be located within hidden text. Otherwise hidden text is skipped over.</para>
    </param>
    <param name="paPos">
      <para>Pointer to an anchor positioned immediately in front of the embedded object, as denoted by a TS_CHAR_EMBEDDED character.</para>
    </param>
    <param name="rguidService">
      <para>Contains a GUID value that defines the requested format of the obtained object. This can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>GUID_TS_SERVICE_DATAOBJECT</b>
          </description>
          <description>
            <para>The object should be obtained as an <see cref="IDataObject" /> data object.</para>
          </description>
        </item>
        <item>
          <description>
            <b>GUID_TS_SERVICE_ACCESSIBLE</b>
          </description>
          <description>
            <para>The object should be obtained as an <a href="https://docs.microsoft.com//windows/desktop/WinAuto/accessible-objects">Accessible object</a>.</para>
          </description>
        </item>
        <item>
          <description>
            <b>GUID_TS_SERVICE_ACTIVEX</b>
          </description>
          <description>
            <para>The object should be obtained as an ActiveX object.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="riid">
      <para>Specifies the interface type requested.</para>
    </param>
    <param name="ppunk">
      <para>Pointer to an <b>IUnknown</b> pointer that receives the requested interface.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The method failed to obtain the requested object.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOTIMPL</b>
            </para>
          </description>
          <description>
            <para>The implementing application does not expose embedded objects in its text stream.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_INVALIDPOS</b>
            </para>
          </description>
          <description>
            <para>The requested <i>paPos</i> anchor is not within the document.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_NOINTERFACE</b>
            </para>
          </description>
          <description>
            <para>The requested interface type is unsupported.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The caller does not have a read-only lock.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_NOOBJECT</b>
            </para>
          </description>
          <description>
            <para>There is no <i>paPos</i> anchor immediately in front of a TS_CHAR_EMBEDDED character.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_NOSERVICE</b>
            </para>
          </description>
          <description>
            <para>The service type specified in <i>rguidService</i> is unsupported.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The caller must use <b>QueryInterface</b> to probe for appropriate interfaces. Prospective interfaces include those associated with embedded documents or controls such as <b>IOleObject</b>, <b>IDataObject</b>, <b>IViewObject</b>, <b>IPersistStorage</b>, <b>IOleCache</b>, or <b>IDispatch</b>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/WinAuto/accessible-objects">Accessible Objects</seealso>
    <seealso cref="IDataObject" />
    <seealso cref="ITextStoreAnchor" />
  </member>
  <member name="ITextStoreAnchor.GetEnd">
    <summary>
      <para>The <b>ITextStoreAnchor.GetEnd</b> method returns an anchor positioned at the end of the text stream.</para>
    </summary>
    <param name="ppaEnd">
      <para>Pointer to an anchor object located at the very end of the text stream.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>ppaEnd</i> is invalid.
</description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOTIMPL</b>
            </para>
          </description>
          <description>
            <para>The application has not implemented this method. This is usually an indication that calculating the end position requires excessive resources. If the end position is necessary, you can use <see cref="ITextStoreAnchor.GetText" /> to calculate it, though this might also be a memory-intensive operation, paging in arbitrarily large amounts of memory from disk.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>The attempt to instantiate an anchor at the end of the document failed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The caller does not have a read-only lock.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="ITextStoreAnchor" />
    <seealso cref="ITextStoreAnchor.GetText " />
  </member>
  <member name="ITextStoreAnchor.GetFormattedText">
    <summary>
      <para>The <b>ITextStoreAnchor.GetFormattedText</b> method returns formatted text information from a text stream.</para>
    </summary>
    <param name="paStart">
      <para>Anchor position at which to start retrieval of formatted text.</para>
    </param>
    <param name="paEnd">
      <para>Anchor position at which to end retrieval of formatted text.</para>
    </param>
    <param name="ppDataObject">
      <para>Pointer to the <see cref="IDataObject" /> object that contains the formatted text.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The method was unable to obtain a valid interface pointer to the start and/or end anchors.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOTIMPL</b>
            </para>
          </description>
          <description>
            <para>An application can return this value if the method is not implemented.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The caller does not have a read/write lock on the document.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Text, embedded objects, and any formatting are wrapped into a single <b>IDataObject</b> object. In this way, private application-specific formatting associated with text can be preserved by a client.</para>
    </remarks>
    <seealso cref="IDataObject" />
    <seealso cref="ITextStoreAnchor" />
  </member>
  <member name="ITextStoreAnchor.GetScreenExt">
    <summary>
      <para>The <b>ITextStoreAnchor.GetScreenExt</b> method returns the bounding box screen coordinates of the display surface where the text stream is rendered.</para>
    </summary>
    <param name="vcView">
      <para>Specifies the context view.</para>
    </param>
    <param name="prc">
      <para>Receives the bounding box screen coordinates of the display surface of the document.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The specified <i>vcView</i> parameter is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the text is not currently displayed, for example, if the document window is minimized, the <i>prc</i> parameter is set to { 0, 0, 0, 0 }.</para>
    </remarks>
    <seealso cref="ITextStoreAnchor" />
    <seealso cref="ITfContextOwner.GetScreenExt " />
    <seealso cref="ITfContextView.GetScreenExt " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/tsviewcookie">TsViewCookie
</seealso>
  </member>
  <member name="ITextStoreAnchor.GetSelection">
    <summary>
      <para>The <b>ITextStoreAnchor.GetSelection</b> method returns the offset of a text selection in a text stream. This method supports multiple text selections. The caller must have a read-only lock on the document before calling this method.</para>
    </summary>
    <param name="ulIndex">
      <para>Specifies the text selections that start the process. If the <a href="https://docs.microsoft.com//windows/desktop/TSF/miscellaneous-framework-constants">TF_DEFAULT_SELECTION</a> constant is specified for this parameter, the input selection starts the process, and only a single selection (the one appropriate for input operations) will be returned.</para>
    </param>
    <param name="ulCount">
      <para>Specifies the maximum number of selections to return.</para>
    </param>
    <param name="pSelection">
      <para>Receives the style, start, and end character positions of the selected text. These values are put into the <see cref="TS_SELECTION_ANCHOR" /> structure.</para>
    </param>
    <param name="pcFetched">
      <para>Receives the number of <i>pSelection</i> structures returned.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The method was unable to load the start or end anchor into the <b>TS_SELECTION_ANCHOR</b> structure.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>The method was unable to allocate memory for the selection.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The caller does not have a read-only lock on the document.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_NOSELECTION</b>
            </para>
          </description>
          <description>
            <para>The document has no selection.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/edit-contexts">Edit Contexts</seealso>
    <seealso cref="ITextStoreAnchor" />
    <seealso cref="ITextStoreAnchor.SetSelection " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/miscellaneous-framework-constants">Miscellaneous Framework Constants</seealso>
    <seealso cref="TS_SELECTION_ANCHOR " />
  </member>
  <member name="ITextStoreAnchor.GetStart">
    <summary>
      <para>The <b>ITextStoreAnchor.GetStart</b> method returns an anchor positioned at the start of the text stream.</para>
    </summary>
    <param name="ppaStart">
      <para>Pointer to an anchor object located at the start of the text stream.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>ppaStart</i> is invalid.
</description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>The attempt to instantiate an anchor at the start of the text stream failed.</para>
          </description>
        </item>
      </list>
    </returns>
  </member>
  <member name="ITextStoreAnchor.GetStatus">
    <summary>
      <para>The <b>ITextStoreAnchor.GetStatus</b> method obtains the document status. The document status is returned through the <see cref="TS_STATUS" /> structure.</para>
    </summary>
    <param name="pdcs">
      <para>Receives the <see cref="TS_STATUS" /> structure that contains the document status. Cannot be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The pointer to the TS_STATUS parameter is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="ITextStoreAnchor " />
    <seealso cref="ITextStoreAnchorSink.OnStatusChange " />
    <seealso cref="ITfContextOwner.GetStatus " />
    <seealso cref="TS_STATUS " />
  </member>
  <member name="ITextStoreAnchor.GetText">
    <summary>
      <para>The <b>ITextStoreAnchor.GetText</b> method returns information about text at a specified anchor position. This method returns the visible and hidden text and indicates if embedded data is attached to the text.</para>
    </summary>
    <param name="dwFlags">
      <para>Not used; should be zero.</para>
    </param>
    <param name="paStart">
      <para>Specifies the starting anchor position.</para>
    </param>
    <param name="paEnd">
      <para>Specifies the ending anchor position. If <b>NULL</b>, it is treated as if it were an anchor positioned at the very end of the text stream.</para>
    </param>
    <param name="pchText">
      <para>Specifies the buffer to receive the text. May be <b>NULL</b> only when <i>cchReq</i> = 0.</para>
    </param>
    <param name="cchReq">
      <para>Specifies the <i>pchText</i> buffer size in characters.</para>
    </param>
    <param name="pcch">
      <para>Receives the number of characters copied into the <i>pchText</i> buffer.</para>
    </param>
    <param name="fUpdateAnchor">
      <para>If <b>TRUE</b>, <i>paStart</i> will be repositioned just past the last character copied to <i>pchText</i>.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method completed successfully.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The method was unable to obtain a valid interface pointer to <i>paStart</i> and/or <i>paEnd</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_INVALIDPOS</b>
            </para>
          </description>
          <description>
            <para>The <i>paStart</i> or <i>paEnd</i> anchors are outside of the document text.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The caller does not have a read-only lock on the document.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Callers that use this method must have a read-only lock on the document by calling the <see cref="ITextStoreAnchor.RequestLock" /> method. Without a read-only lock, the method fails and returns <a href="https://docs.microsoft.com//windows/desktop/TSF/manager-return-values">TF_E_NOLOCK</a>.</para>
      <para>Applications can truncate the method return values for internal reasons.</para>
      <para>To quickly scan text with multiple <b>GetText</b> calls, a caller would use <i>fUpdateAnchor</i> = <b>TRUE</b>.</para>
      <para>The actual number of characters copied could be less than <i>cchReq</i> if the number of characters between <i>paStart</i> and <i>paEnd</i> is less than <i>cchReq.</i></para>
      <para>The behavior of <b>GetText</b> is not affected by any region boundaries covered by the returned text.</para>
    </remarks>
    <seealso cref="ITextStoreAnchor" />
    <seealso cref="ITextStoreAnchor.RequestLock " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/manager-return-values">Manager Return Values</seealso>
    <seealso cref="TS_RUNINFO " />
  </member>
  <member name="ITextStoreAnchor.GetTextExt">
    <summary>
      <para>The <b>ITextStoreAnchor.GetTextExt</b> method returns the bounding box, in screen coordinates, of a range of text. The caller must have a read-only lock on the document before calling this method.</para>
    </summary>
    <param name="vcView">
      <para>Specifies the context view.</para>
    </param>
    <param name="paStart">
      <para>Specifies the anchor positioned at the start of the range.</para>
    </param>
    <param name="paEnd">
      <para>Specifies the anchor positioned at the end of the range.</para>
    </param>
    <param name="prc">
      <para>Receives the bounding box of the text range in screen coordinates.</para>
    </param>
    <param name="pfClipped">
      <para>Receives a Boolean value that specifies if the text in the bounding box has been clipped. If <b>TRUE</b>, the bounding box contains clipped text and does not include the entire requested text range. The bounding box is clipped because the requested range is not visible.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The method was unable to obtain a valid interface pointer to the start and/or end anchors.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more of the input parameters is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_INVALIDPOS</b>
            </para>
          </description>
          <description>
            <para>The range specified by the <i>paStart</i> and <i>paEnd</i> parameters extends past the beginning or end of the document.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_NOLAYOUT</b>
            </para>
          </description>
          <description>
            <para>The application has not calculated a text layout. Any further calls will not succeed until the application calls <see cref="ITextStoreAnchorSink.OnLayoutChange" />.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The caller does not have a read-only lock on the document.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If the document window is minimized, or if the specified text is not currently visible, the method returns S_OK with the <i>prc</i> parameter set to {0,0,0,0}.</para>
    </remarks>
    <seealso cref="ITextStoreAnchor" />
    <seealso cref="ITfContextOwner.GetTextExt " />
    <seealso cref="ITfContextView.GetTextExt " />
  </member>
  <member name="ITextStoreAnchor.GetWnd">
    <summary>
      <para>The <b>ITextStoreAnchor.GetWnd</b> method returns the handle to a window that corresponds to the current text stream.</para>
    </summary>
    <param name="vcView">
      <para>Specifies the <a href="https://docs.microsoft.com//windows/desktop/TSF/tsviewcookie">TsViewCookie</a> data type that corresponds to the current document.</para>
    </param>
    <param name="phwnd">
      <para>Receives a pointer to the handle of the window that corresponds to the current document. This parameter can be <b>NULL</b> if the document does not have the corresponding handle to the window.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The <b>TsViewCookie</b> data type is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>A document might not have a corresponding window handle if the document is in memory but not displayed on the screen, or if the document is a windowless control and the control does not recognize the window handle of the owner of the windowless controls. Callers cannot assume that the <i>phwnd</i> parameter will receive a non-<b>NULL</b> value even if the method is successful. Callers can also receive a <b>NULL</b> value for the <i>phwnd</i> parameter.</para>
    </remarks>
    <seealso cref="ITextStoreAnchor" />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/tsviewcookie">TsViewCookie
</seealso>
  </member>
  <member name="ITextStoreAnchor.InsertEmbedded">
    <summary>
      <para>Inserts an IDataObject data object into a text stream.</para>
    </summary>
    <param name="dwFlags">
      <para>Must be TS_IE_CORRECTION.</para>
    </param>
    <param name="paStart">
      <para>Pointer to the anchor at the start of the object to be inserted.</para>
    </param>
    <param name="paEnd">
      <para>Pointer to the anchor at the end of the object to be inserted.</para>
    </param>
    <param name="pDataObject">
      <para>Pointer to an <b>IDataObject</b> data object.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The method was unable to obtain a valid interface pointer to the start and/or end anchors.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>One or more input parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_NOTIMPL</b>
            </para>
          </description>
          <description>
            <para>The application does not support embedded objects.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_FORMAT</b>
            </para>
          </description>
          <description>
            <para>The application does not support the data type contained in <i>pDataObject</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_INVALIDPOS</b>
            </para>
          </description>
          <description>
            <i>paStart</i> and/or <i>paEnd</i> are not within the document.
</description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The caller does not have a read/write lock.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="IDataObject" />
    <seealso cref="ITextStoreAnchor" />
    <seealso cref="ITextStoreAnchor.QueryInsertEmbedded " />
    <seealso cref="ITextStoreAnchor.SetText " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/ts-char--constants">TS_CHAR_EMBEDDED
</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/ts-ie--constants">TS_IE_* Constants
</seealso>
  </member>
  <member name="ITextStoreAnchor.InsertEmbeddedAtSelection">
    <summary>
      <para>The <b>ITextStoreAnchor.InsertEmbeddedAtSelection</b> method inserts an <see cref="IDataObject" /> object at the insertion point or selection. The client that calls this method must have a read/write lock before inserting an <b>IDataObject</b> into the text stream.</para>
    </summary>
    <param name="dwFlags">
      <para>Specifies whether the <i>paStart</i> and <i>paEnd</i> parameters will contain the results of the object insertion.</para>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/TSF/tf-ias--constants">TF_IAS_NOQUERY</a> and TF_IAS_QUERYONLY flags cannot be combined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TF_IAS_NOQUERY</b>
          </description>
          <description>
            <para>Text is inserted, and the values of the <i>ppaStart</i> and <i>ppaEnd</i> parameters can be <b>NULL</b>. Use this flag if the results of the text insertion are not required.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TF_IAS_QUERYONLY</b>
          </description>
          <description>
            <para>Text is not inserted, and the <i>ppaStart</i> and <i>ppaEnd</i> anchors contain the results of the text insertion. The values of these parameters depend on how the application implements text insertion into a document.</para>
            <para>Use this flag to view the results of the text insertion without actually inserting the text, for example, to predict the results of collapsing or otherwise adjusting a selection.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pDataObject">
      <para>Pointer to the <b>IDataObject</b> object to be inserted.</para>
    </param>
    <param name="ppaStart">
      <para>Pointer to the anchor object at the start of the object insertion.</para>
    </param>
    <param name="ppaEnd">
      <para>Pointer to the anchor object at the end of the object insertion. For an insertion point, this parameter value will be the same as the value of the <i>ppaStart</i> parameter.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The method could not instantiate one of the anchors <i>paStart</i> or <i>paEnd</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The <i>pchText</i> parameter is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>The method could not instantiate one of the anchors <i>paStart</i> or <i>paEnd</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The caller does not have a lock on the document.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Clients must use this method to insert an object into a text stream, since a <a href="https://docs.microsoft.com//windows/desktop/TSF/ts-char--constants">TS_CHAR_EMBEDDED</a> constant cannot be passed into <see cref="ITextStoreAnchor.SetText" />.</para>
    </remarks>
    <seealso cref="IDataObject" />
    <seealso cref="ITextStoreAnchor" />
    <seealso cref="ITextStoreAnchor.QueryInsertEmbedded " />
    <seealso cref="ITextStoreAnchor.SetText " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/tf-ias--constants">TF_IAS_* Constants
</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/ts-char--constants">TS_CHAR_EMBEDDED
</seealso>
  </member>
  <member name="ITextStoreAnchor.InsertTextAtSelection">
    <summary>
      <para>Inserts text at the insertion point or selection.</para>
    </summary>
    <param name="dwFlags">
      <para>Specifies whether the <i>paStart</i> and <i>paEnd</i> parameters will contain the results of the text insertion.</para>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/TSF/tf-ias--constants">TF_IAS_NOQUERY</a> and TF_IAS_QUERYONLY flags cannot be combined.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TF_IAS_NOQUERY</b>
          </description>
          <description>
            <para>Text is inserted, and the values of the <i>ppaStart</i> and <i>ppaEnd</i> parameters can be <b>NULL</b>. Use this flag if the results of the text insertion are not required.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TF_IAS_QUERYONLY</b>
          </description>
          <description>
            <para>Text is not inserted, and the <i>ppaStart</i> and <i>ppaEnd</i> anchors contain the results of the text insertion. The values of these parameters depend on how the application implements text insertion into a document. Use this flag to view the results of the text insertion without actually inserting the text. Zero-length text can be inserted.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pchText">
      <para>Pointer to the string to insert in the document. The string can be <b>NULL</b> terminated.</para>
    </param>
    <param name="cch">
      <para>Specifies the text length.</para>
    </param>
    <param name="ppaStart">
      <para>Pointer to the anchor object at the start of the text insertion.</para>
    </param>
    <param name="ppaEnd">
      <para>Pointer to the anchor object at the end of the text insertion. For an insertion point, this parameter value will be the same as the value of the <i>ppaStart</i> parameter.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The method could not instantiate one of the anchors <i>paStart</i> or <i>paEnd</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The <i>pchText</i> parameter is invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The caller does not have a lock on the document.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/compositions">Compositions</seealso>
    <seealso cref="ITextStoreAnchor" />
    <seealso cref="ITextStoreAnchorSink.OnTextChange " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/tf-ias--constants">TF_IAS_* Constants
</seealso>
    <seealso cref="TS_TEXTCHANGE " />
  </member>
  <member name="ITextStoreAnchor.QueryInsert">
    <summary>
      <para>The <b>ITextStoreAnchor.QueryInsert</b> method determines whether the specified start and end anchors are valid. Use this method to adjust an edit to a document before you execute the edit. The method must not return values outside the range of the document.</para>
    </summary>
    <param name="paTestStart">
      <para>Receives a pointer to a start anchor for the inserted text.</para>
    </param>
    <param name="paTestEnd">
      <para>Receives a pointer to an end anchor for the inserted text. This is the same as <i>paTestStart</i> if the text is inserted at a point instead of replacing selected text.</para>
    </param>
    <param name="cch">
      <para>Length of replacement text.</para>
    </param>
    <param name="ppaResultStart">
      <para>Pointer to the new anchor object at the starting location for the inserted text. If the value of this parameter is <b>NULL</b>, then text cannot be inserted at the specified position. This anchor cannot be outside the document.</para>
    </param>
    <param name="ppaResultEnd">
      <para>Pointer to the new anchor object at the ending location for the inserted text. If the value of this parameter is <b>NULL</b>, then text cannot be inserted at the specified position. This anchor cannot be outside the document.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The <i>paTestStart</i> or <i>paTestEnd</i> parameters are invalid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>The attempt to instantiate the <i>ppaResultStart</i> and/or <i>ppaResultEnd</i> anchors failed.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The values of <i>ppaResultStart</i> and <i>ppaResultEnd</i> depend upon how the application inserts text into the document. If <i>ppaResultStart</i> and <i>ppaResultEnd</i> are the same as <i>paTestStart</i>, the cursor is at the beginning of the inserted text after insertion. If <i>ppaResultStart</i> and <i>ppaResultEnd</i> are the same as <i>paTextEnd</i>, the cursor is at the end of the inserted text after insertion.</para>
    </remarks>
  </member>
  <member name="ITextStoreAnchor.QueryInsertEmbedded">
    <summary>
      <para>Determines whether the document can accept an embedded object through the InsertEmbedded or InsertEmbeddedAtSelection methods.</para>
    </summary>
    <param name="pguidService">
      <para>Pointer to the object type. If <b>NULL</b>, <i>pFormatEtc</i> should be used.</para>
    </param>
    <param name="pFormatEtc">
      <para>Pointer to the <a href="https://docs.microsoft.com//windows/desktop/com/the-formatetc-structure">FORMATETC</a> structure that contains format data of the object. This parameter cannot be <b>NULL</b> if the <i>pguidService</i> parameter is <b>NULL</b>.</para>
    </param>
    <param name="pfInsertable">
      <para>Receives <b>TRUE</b> if the object type can be inserted into the document or <b>FALSE</b> if the object type cannot be inserted into the document.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The <i>pFormatEtc</i> parameter is <b>NULL</b>.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The clipboard formats supported by the document are dependent on the application.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/com/the-formatetc-structure">FORMATETC</seealso>
    <seealso cref="ITextStoreAnchor" />
    <seealso cref="ITextStoreAnchor.InsertEmbedded " />
    <seealso cref="ITextStoreAnchor.InsertEmbeddedAtSelection " />
  </member>
  <member name="ITextStoreAnchor.RequestAttrsAtPosition">
    <summary>
      <para>Obtains a list of attributes that begin or end at the specified anchor location.</para>
    </summary>
    <param name="paPos">
      <para>Pointer to the anchor.</para>
    </param>
    <param name="cFilterAttrs">
      <para>Specifies the number of attributes to obtain.</para>
    </param>
    <param name="paFilterAttrs">
      <para>Pointer to the <a href="https://docs.microsoft.com//windows/desktop/TSF/ts-attrid">TS_ATTRID</a> data type that specifies the attribute to verify.</para>
    </param>
    <param name="dwFlags">
      <para>Must be zero.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <para>The <i>paPos</i> anchor is invalid.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="ITextStoreAnchor" />
    <seealso cref="ITextStoreAnchor.RetrieveRequestedAttrs " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/ts-attrid">TS_ATTRID
</seealso>
  </member>
  <member name="ITextStoreAnchor.RequestAttrsTransitioningAtPosition">
    <summary>
      <para>Obtains a list of attributes that begin or end at the specified anchor location.</para>
    </summary>
    <param name="paPos">
      <para>Pointer to the anchor.</para>
    </param>
    <param name="cFilterAttrs">
      <para>Specifies the number of attributes to obtain.</para>
    </param>
    <param name="paFilterAttrs">
      <para>Pointer to the <a href="https://docs.microsoft.com//windows/desktop/TSF/ts-attrid">TS_ATTRID</a> data type that specifies the attribute to verify.</para>
    </param>
    <param name="dwFlags">
      <para>Specifies attributes for the call to the <see cref="ITextStoreAnchor.RetrieveRequestedAttrs" /> method. If this parameter is not set, the method returns the attributes that start at the specified anchor location. Other possible values for this parameter are the following.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TS_ATTR_FIND_WANT_END</b>
          </description>
          <description>
            <para>Obtains the attributes that end at the specified anchor location.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TS_ATTR_FIND_WANT_VALUE</b>
          </description>
          <description>
            <para>Obtains the value of the attribute in addition to the attribute. The attribute value is put into the <b>varValue</b> member of the <see cref="TS_ATTRVAL" /> structure during the <b>ITextStoreAnchor.RetrieveRequestedAttrs</b> method call.</para>
          </description>
        </item>
      </list>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_INVALIDARG</b>
            </para>
          </description>
          <description>
            <i>paPos</i> is invalid.
</description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>In the sentence, "This is <i>italic text</i>.", the italic attribute starts before the word <i>italic</i> and ends after the word <i>text</i>.</para>
      <para>If the flag TS_ATTR_FIND_WANT_END is set in <i>dwFlags</i>, the method would return the italic attribute for the text "<i>italic</i> &lt;anchor&gt;normal", because there is an end transition at the anchor location.</para>
    </remarks>
    <seealso cref="ITextStoreAnchor" />
    <seealso cref="ITextStoreAnchor.RetrieveRequestedAttrs " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/ts-attrid">TS_ATTRID
</seealso>
    <seealso cref="TS_ATTRVAL " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/ts-attr--constants">TS_ATTR_* Constants
</seealso>
  </member>
  <member name="ITextStoreAnchor.RequestLock">
    <summary>
      <para>Used by the TSF manager to provide a document lock in order to modify the text stream.</para>
    </summary>
    <param name="dwLockFlags">
      <para>Specifies the type of lock requested.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TS_LF_READ</b>
          </description>
          <description>
            <para>The document has a read-only lock and cannot be modified.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TS_LF_READWRITE</b>
          </description>
          <description>
            <para>The document has a read/write lock and can be modified.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TS_LF_SYNC</b>
          </description>
          <description>
            <para>The document has a synchronous-lock if this flag is combined with other flags.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phrSession">
      <para>If the lock request is synchronous, receives an HRESULT value from the <see cref="ITextStoreAnchorSink.OnLockGranted" /> method that specifies the result of the lock request.</para>
      <para>If the lock request is asynchronous and the result is <a href="https://docs.microsoft.com//windows/desktop/TSF/text-store-return-values">TS_S_ASYNC</a>, the document receives an asynchronous lock. If the lock request is asynchronous and the result is TS_E_SYNCHRONOUS, the document cannot be locked synchronously.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>This method uses the <b>ITextStoreAnchorSink.OnLockGranted</b> method to lock the document. Applications must never modify the document or send change notifications using the <see cref="ITextStoreAnchorSink.OnTextChange" /> method from within the <b>ITextStoreAnchor.RequestLock</b> method. If the application has pending changes to report, the application can only respond to the asynchronous lock request.</para>
      <para>Applications should not attempt to queue multiple <b>ITextStoreAnchor.RequestLock</b> method calls, because the application requires only a single callback. If the caller makes several read requests and one or more write requests, however, the callback should be for write access.</para>
      <para>Successful requests for synchronous locks supersede requests for asynchronous locks. Unsuccessful requests for synchronous locks do not supersede requests for asynchronous locks. The implementation must still serve the outstanding asynchronous request, if one exists.</para>
      <para>If the lock is granted before the <b>ITextStoreAnchor.RequestLock</b> method returns, the <i>phrSession</i> parameter will receive the HRESULT returned by the <b>ITextStoreAnchorSink.OnLockGranted</b> method. If the call is successful, but the lock will be granted later, the <i>phrSession</i> parameter receives the TS_S_ASYNC flag. The <i>phrSession</i> parameter should be ignored if <b>ITextStoreAnchor.RequestLock</b> returns anything other than S_OK.</para>
      <para>A caller should never call this method reentrantly, except in the case that the caller holds a read-only lock. In this case the method can be called reentrantly to ask for an asynchronous write lock. The write lock will be granted later, after the read-only lock ends.</para>
      <para>For more information about document locks, see <a href="https://docs.microsoft.com//windows/desktop/TSF/document-locks">Document Locks</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/document-locks">Document Locks</seealso>
    <seealso cref="ITextStoreAnchor" />
    <seealso cref="ITextStoreAnchorSink.OnLockGranted " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/ts-lf--constants">TS_LF_* Constants
</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/text-store-return-values">Text Store Return Values
</seealso>
  </member>
  <member name="ITextStoreAnchor.RequestSupportedAttrs">
    <summary>
      <para>Obtains the supported attributes of a text stream.</para>
    </summary>
    <param name="dwFlags">
      <para>Specifies whether a subsequent call to the <b>ITextStoreAnchor.RetrieveRequestedAttrs</b> method will contain the supported attributes. If the TS_ATTR_FIND_WANT_VALUE flag is specified, the default attribute values will be those in the <see cref="TS_ATTRVAL" /> structure after the subsequent call to <b>ITextStoreAnchor.RetrieveRequestedAttrs</b>. If any other flag is specified for this parameter, the method only verifies that the attribute is supported and that the <b>varValue</b> member of the <b>TS_ATTRVAL</b> structure is set to VT_EMPTY.</para>
    </param>
    <param name="cFilterAttrs">
      <para>Specifies the number of supported attributes to obtain.</para>
    </param>
    <param name="paFilterAttrs">
      <para>Pointer to the <a href="https://docs.microsoft.com//windows/desktop/TSF/ts-attrid">TS_ATTRID</a> data type that specifies the attribute to verify. The method returns only the attributes specified by <b>TS_ATTRID</b>, even though other attributes might be supported.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>The method was unable to allocate sufficient memory to complete the operation.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="ITextStoreAnchor" />
    <seealso cref="ITextStoreAnchor.RetrieveRequestedAttrs " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/ts-attrid">TS_ATTRID
</seealso>
    <seealso cref="TS_ATTRVAL " />
  </member>
  <member name="ITextStoreAnchor.RetrieveRequestedAttrs">
    <summary>
      <para>Returns the attributes obtained by the RequestAttrsAtPosition, RequestAttrsTransitioningAtPosition, or RequestSupportedAttrs methods.</para>
    </summary>
    <param name="ulCount">
      <para>Specifies the number of supported attributes to obtain.</para>
    </param>
    <param name="paAttrVals">
      <para>Pointer to the <see cref="TS_ATTRVAL" /> structure that receives the supported attributes. The members of this structure depend upon the <i>dwFlags</i> parameter of the calling method.</para>
    </param>
    <param name="pcFetched">
      <para>Receives the number of supported attributes.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="ITextStoreAnchor" />
    <seealso cref="ITextStoreAnchor.RequestAttrsAtPosition " />
    <seealso cref="ITextStoreAnchor.RequestAttrsTransitioningAtPosition " />
    <seealso cref="ITextStoreAnchor.RequestSupportedAttrs " />
    <seealso cref="TS_ATTRVAL " />
  </member>
  <member name="ITextStoreAnchor.SetSelection">
    <summary>
      <para>Selects text within the document.</para>
    </summary>
    <param name="ulCount">
      <para>Specifies the number of text selections in <i>pSelection</i>.</para>
    </param>
    <param name="pSelection">
      <para>Specifies the style, start, and end character positions of the text selected through the <see cref="TS_SELECTION_ANCHOR" /> structure. The start anchor member <b>paStart</b> of the structure must never follow the end anchor member <b>paEnd</b>, although they might be at the same location.</para>
      <para>When <b>paStart</b> = <b>paEnd</b>, the method places a caret at the anchor location. There can be only one caret at a time in the text stream.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>An unspecified error occurred.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_OUTOFMEMORY</b>
            </para>
          </description>
          <description>
            <para>The method was unable to allocate sufficient memory to complete the operation.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_INVALIDPOS</b>
            </para>
          </description>
          <description>
            <para>The anchor locations specified are beyond the text in the document.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TF_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The caller does not have a read/write lock.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso cref="ITextStoreAnchor" />
    <seealso cref="ITextStoreAnchor.GetSelection " />
    <seealso cref="TS_SELECTION_ANCHOR " />
  </member>
  <member name="ITextStoreAnchor.SetText">
    <summary>
      <para>The <b>ITextStoreAnchor.SetText</b> method sets the text selection between two supplied anchor locations.</para>
    </summary>
    <param name="dwFlags">
      <para>If set to the value of TS_ST_CORRECTION, the text is a transform (correction) of existing content, and any special text markup information (metadata) is retained, such as .wav file data or a language identifier. The client defines the type of markup information to be retained.</para>
    </param>
    <param name="paStart">
      <para>Pointer to the anchor at the start of the range of text to replace.</para>
    </param>
    <param name="paEnd">
      <para>Pointer to the anchor at the end of the range of text to replace. Must always follow or be at the same position as <i>paStart</i>.</para>
    </param>
    <param name="pchText">
      <para>Pointer to the replacement text. The text string does not have to be <b>NULL</b> terminated, because the text character count is specified in the <i>cch</i> parameter.</para>
    </param>
    <param name="cch">
      <para>Specifies the number of characters in the replacement text.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>E_FAIL</b>
            </para>
          </description>
          <description>
            <para>The method could not instantiate one of the anchors <i>paStart</i> or <i>paEnd</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_INVALIDPOS</b>
            </para>
          </description>
          <description>
            <para>The location of <i>paStart</i> or <i>paEnd</i> is outside of the document text.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_NOLOCK</b>
            </para>
          </description>
          <description>
            <para>The caller does not have a read/write lock.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_READONLY</b>
            </para>
          </description>
          <description>
            <para>The document is read-only. Content cannot be modified.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>TS_E_REGION</b>
            </para>
          </description>
          <description>
            <para>An attempt was made to modify text across a region boundary.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Applications should start a composition by first using <see cref="ITextStoreAnchor.InsertTextAtSelection" />. <b>ITextStoreAnchor.SetText</b> should be used only within an existing composition. If there is no active composition at the time <b>SetText</b> is called, the TSF manager creates a composition that lasts just long enough to wrap the call to <b>SetText</b>.</para>
      <para>Callers must hold a write lock obtained through <see cref="ITextStoreAnchor.RequestLock" />. Otherwise, <b>ITextStoreAnchor.SetText</b> will fail with TS_E_NOLOCK.</para>
      <para>If <i>paStart</i> is at the same location as <i>paEnd</i>, then the operation is an insertion, and no existing text will be removed.</para>
      <para>TS_CHAR_EMBEDDED cannot be passed into this method. For <a href="https://docs.microsoft.com//windows/desktop/TSF/embedded-objects">embedded objects</a>, use <see cref="ITextStoreAnchor.InsertEmbedded" /> instead.</para>
      <para>This method will fail if the range of text replaced covers any region boundary. Instead, callers should make multiple calls to the method, one for each region.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/compositions">Compositions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/embedded-objects">Embedded Objects</seealso>
    <seealso cref="ITextStoreAnchor" />
    <seealso cref="ITextStoreAnchor.InsertEmbedded " />
    <seealso cref="ITextStoreAnchor.RequestLock " />
    <seealso cref="ITextStoreAnchorSink.OnTextChange " />
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/miscellaneous-text-store-constants">Miscellaneous Text Store Constants
</seealso>
  </member>
  <member name="ITextStoreAnchor.UnadviseSink">
    <summary>
      <para>Called by an application to indicate that it no longer requires notifications from the TSF manager.</para>
    </summary>
    <param name="punk">
      <para>Pointer to a sink object. Cannot be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>This method can return one of these values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>S_OK</b>
            </para>
          </description>
          <description>
            <para>The method was successful.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>CONNECT_E_NOCONNECTION</b>
            </para>
          </description>
          <description>
            <para>There is no active sink object.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Every call to the <see cref="ITextStoreAnchor.AdviseSink" /> method, which registers a new sink object, should be matched by a call to this method. If AdviseSink has only updated the <i>dwMask</i> parameter of a sink which was previously registered, a call to <b>UnadviseSink</b> is not required.</para>
      <para>For example, to register a sink object, an application calls the <b>AdviseSink</b> method the first time. The application can then call the <b>AdviseSink</b> method again with the same sink object to change the <i>dwMask</i> parameter. To unregister the sink object, an application calls the <b>UnadviseSink</b> method.</para>
      <para>The <i>punk</i> parameter must have the same COM identity as the pointer originally passed in the <b>AdviseSink</b> method.</para>
    </remarks>
    <seealso cref="ITextStoreAnchor" />
    <seealso cref="ITextStoreAnchor.AdviseSink " />
  </member>
  <member name="ITextStoreAnchor">
    <summary>
      <para>The ITextStoreAnchor interface is implemented by a <a href="https://docs.microsoft.com//previous-versions/ms971350(v=msdn.10)">Microsoft Active Accessibility</a> client and is used by the TSF manager to manipulate text streams. <a href="https://docs.microsoft.com//windows/desktop/TSF/ranges">Ranges</a> of text within a stream are delimited by <a href="https://docs.microsoft.com//windows/desktop/TSF/ranges">anchor</a> objects. these anchor objects are exposed and manipulated by the <see cref="IAnchor" /> interface.</para>
      <para>An application can obtain an instance of this interface with <a href="https://docs.microsoft.com//previous-versions/ms971350(v=msdn.10)">Microsoft Active Accessibility</a>. The interface ID is IID_ITextStoreAnchor.</para>
      <para>To use the application character position (ACP) model for text manipulation, use <see cref="ITextStoreACP" /> instead.</para>
    </summary>
    <seealso cref="IDataObject" />
    <seealso cref="ITextStoreACP " />
    <seealso cref="ITextStoreAnchorSink " />
    <seealso cref="IUnknown" />
    <seealso href="https://docs.microsoft.com//previous-versions/ms971350(v=msdn.10)">Microsoft Active Accessibility</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/TSF/tsviewcookie">TsViewCookie
</seealso>
  </member>
</doc>