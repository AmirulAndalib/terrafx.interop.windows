<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.AccessCheck">
    <summary>
      <para>The <b>AccessCheck</b> function determines whether a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> grants a specified set of access rights to the client identified by an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a>. Typically, server applications use this function to check access to a private object.</para>
    </summary>
    <param name="pSecurityDescriptor">
      <para>A pointer to a
<see cref="SECURITY_DESCRIPTOR" /> structure against which access is checked.</para>
    </param>
    <param name="ClientToken">
      <para>A handle to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a> that represents the client that is attempting to gain access. The handle must have TOKEN_QUERY access to the token; otherwise, the function fails with ERROR_ACCESS_DENIED.</para>
    </param>
    <param name="DesiredAccess">
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Access mask</a> that specifies the access rights to check. This mask must have been mapped by the
<see cref="MapGenericMask" /> function to contain no generic access rights.</para>
      <para>If this parameter is MAXIMUM_ALLOWED, the function sets the <i>GrantedAccess</i> access mask to indicate the maximum access rights the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> allows the client.</para>
    </param>
    <param name="GenericMapping">
      <para>A pointer to the
<see cref="GENERIC_MAPPING" /> structure associated with the object for which access is being checked.</para>
    </param>
    <param name="PrivilegeSet">
      <para>A pointer to a
<see cref="PRIVILEGE_SET" /> structure that receives the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a> used to perform the access validation. If no privileges were used, the function sets the <b>PrivilegeCount</b> member to zero.</para>
    </param>
    <param name="PrivilegeSetLength">
      <para>Specifies the size, in bytes, of the buffer pointed to by the <i>PrivilegeSet</i> parameter.</para>
    </param>
    <param name="GrantedAccess">
      <para>A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> that receives the granted access rights. If <i>AccessStatus</i> is set to <b>FALSE</b>, the function sets the access mask to zero. If the function fails, it does not set the access mask.</para>
    </param>
    <param name="AccessStatus">
      <para>A pointer to a variable that receives the results of the access check. If the security descriptor allows the requested access rights to the client identified by the access token, <i>AccessStatus</i> is set to <b>TRUE</b>. Otherwise, <i>AccessStatus</i> is set to <b>FALSE</b>, and you can call
<see cref="GetLastError" /> to get extended error information.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>For more information, see the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</a> overview.</para>
      <para>The <b>AccessCheck</b> function compares the specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> with the specified access token and indicates, in the <i>AccessStatus</i> parameter, whether access is granted or denied. If access is granted, the requested <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> becomes the object's granted access mask.</para>
      <para>If the security descriptor's DACL is <b>NULL</b>, the <i>AccessStatus</i> parameter returns <b>TRUE</b>, which indicates that the client has the requested access.</para>
      <para>The <b>AccessCheck</b> function fails with ERROR_INVALID_SECURITY_DESCR if the security descriptor does not contain owner and group SIDs.</para>
      <para>The <b>AccessCheck</b> function does not generate an audit. If your application  requires audits for access checks, use functions such as  <see cref="AccessCheckAndAuditAlarm" />, <see cref="AccessCheckByTypeAndAuditAlarm" />, <see cref="AccessCheckByTypeResultListAndAuditAlarm" />, or <see cref="AccessCheckByTypeResultListAndAuditAlarmByHandle" />, instead of  <b>AccessCheck</b>.</para>
      <h4>Examples</h4>
      <para>For an example that uses this function, see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/verifying-client-access-with-acls-in-c--">Verifying Client Access with ACLs</a>.</para>
    </remarks>
    <seealso cref="AccessCheckAndAuditAlarm" />
    <seealso cref="AreAllAccessesGranted" />
    <seealso cref="AreAnyAccessesGranted" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control </seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso cref="GENERIC_MAPPING" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</seealso>
    <seealso cref="MakeAbsoluteSD" />
    <seealso cref="MapGenericMask" />
    <seealso cref="PRIVILEGE_SET" />
    <seealso cref="PrivilegeCheck" />
    <seealso cref="SECURITY_DESCRIPTOR" />
  </member>
  <member name="Windows.AccessCheckAndAuditAlarm">
    <summary>
      <para>The <b>AccessCheckAndAuditAlarm</b> function determines whether a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> grants a specified set of access rights to the client being impersonated by the calling thread. If the security descriptor has a SACL with ACEs that apply to the client, the function generates any necessary audit messages in the security event log.</para>
    </summary>
    <param name="SubsystemName">
      <para>A pointer to a null-terminated string specifying the name of the subsystem calling the function. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="HandleId">
      <para>A pointer to a unique value representing the client's handle to the object. If the access is denied, the system ignores this value.</para>
    </param>
    <param name="ObjectTypeName">
      <para>A pointer to a null-terminated string specifying the type of object being created or accessed. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="ObjectName">
      <para>A pointer to a null-terminated string specifying the name of the object being created or accessed. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="SecurityDescriptor">
      <para>A pointer to the
<see cref="SECURITY_DESCRIPTOR" /> structure against which access is checked.</para>
    </param>
    <param name="DesiredAccess">
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Access mask</a> that specifies the access rights to check. This mask must have been mapped by the <see cref="MapGenericMask" /> function to contain no generic access rights.</para>
      <para>If this parameter is MAXIMUM_ALLOWED, the function sets the <i>GrantedAccess</i> access mask to indicate the maximum access rights the security descriptor allows the client.</para>
    </param>
    <param name="GenericMapping">
      <para>A pointer to the <see cref="GENERIC_MAPPING" /> structure associated with the object for which access is being checked.</para>
    </param>
    <param name="ObjectCreation">
      <para>Specifies a flag that determines whether the calling application will create a new object when access is granted. A value of <b>TRUE</b> indicates the application will create a new object. A value of <b>FALSE</b> indicates the application will open an existing object.</para>
    </param>
    <param name="GrantedAccess">
      <para>A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> that receives the granted access rights. If <i>AccessStatus</i> is set to <b>FALSE</b>, the function sets the access mask to zero. If the function fails, it does not set the access mask.</para>
    </param>
    <param name="AccessStatus">
      <para>A pointer to a variable that receives the results of the access check. If the security descriptor allows the requested access rights to the client, <i>AccessStatus</i> is set to <b>TRUE</b>. Otherwise, <i>AccessStatus</i> is set to <b>FALSE</b>.</para>
    </param>
    <param name="pfGenerateOnClose">
      <para>A pointer to a flag set by the audit-generation routine when the function returns. Pass this flag to the
<see cref="ObjectCloseAuditAlarm" /> function when the object handle is closed.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>For more information, see the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</a> overview.</para>
      <para>The <b>AccessCheckAndAuditAlarm</b> function requires the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> to have the SE_AUDIT_NAME privilege enabled. The test for this privilege is performed against the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> of the calling process, not the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a> of the thread.</para>
      <para>The <b>AccessCheckAndAuditAlarm</b> function fails if the calling thread is not impersonating a client.</para>
    </remarks>
    <seealso cref="AccessCheck" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control </seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso cref="GENERIC_MAPPING" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</seealso>
    <seealso cref="MakeAbsoluteSD" />
    <seealso cref="MapGenericMask" />
    <seealso cref="ObjectCloseAuditAlarm" />
    <seealso cref="ObjectOpenAuditAlarm" />
    <seealso cref="ObjectPrivilegeAuditAlarm" />
    <seealso cref="PrivilegeCheck" />
    <seealso cref="PrivilegedServiceAuditAlarm" />
    <seealso cref="SECURITY_DESCRIPTOR" />
  </member>
  <member name="Windows.AccessCheckAndAuditAlarmW">
    <summary>
      <para>The <b>AccessCheckAndAuditAlarm</b> function determines whether a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> grants a specified set of access rights to the client being impersonated by the calling thread. If the security descriptor has a SACL with ACEs that apply to the client, the function generates any necessary audit messages in the security event log.</para>
    </summary>
    <param name="SubsystemName">
      <para>A pointer to a null-terminated string specifying the name of the subsystem calling the function. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="HandleId">
      <para>A pointer to a unique value representing the client's handle to the object. If the access is denied, the system ignores this value.</para>
    </param>
    <param name="ObjectTypeName">
      <para>A pointer to a null-terminated string specifying the type of object being created or accessed. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="ObjectName">
      <para>A pointer to a null-terminated string specifying the name of the object being created or accessed. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="SecurityDescriptor">
      <para>A pointer to the
<see cref="SECURITY_DESCRIPTOR" /> structure against which access is checked.</para>
    </param>
    <param name="DesiredAccess">
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Access mask</a> that specifies the access rights to check. This mask must have been mapped by the <see cref="MapGenericMask" /> function to contain no generic access rights.</para>
      <para>If this parameter is MAXIMUM_ALLOWED, the function sets the <i>GrantedAccess</i> access mask to indicate the maximum access rights the security descriptor allows the client.</para>
    </param>
    <param name="GenericMapping">
      <para>A pointer to the <see cref="GENERIC_MAPPING" /> structure associated with the object for which access is being checked.</para>
    </param>
    <param name="ObjectCreation">
      <para>Specifies a flag that determines whether the calling application will create a new object when access is granted. A value of <b>TRUE</b> indicates the application will create a new object. A value of <b>FALSE</b> indicates the application will open an existing object.</para>
    </param>
    <param name="GrantedAccess">
      <para>A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> that receives the granted access rights. If <i>AccessStatus</i> is set to <b>FALSE</b>, the function sets the access mask to zero. If the function fails, it does not set the access mask.</para>
    </param>
    <param name="AccessStatus">
      <para>A pointer to a variable that receives the results of the access check. If the security descriptor allows the requested access rights to the client, <i>AccessStatus</i> is set to <b>TRUE</b>. Otherwise, <i>AccessStatus</i> is set to <b>FALSE</b>.</para>
    </param>
    <param name="pfGenerateOnClose">
      <para>A pointer to a flag set by the audit-generation routine when the function returns. Pass this flag to the
<see cref="ObjectCloseAuditAlarm" /> function when the object handle is closed.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>For more information, see the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</a> overview.</para>
      <para>The <b>AccessCheckAndAuditAlarm</b> function requires the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> to have the SE_AUDIT_NAME privilege enabled. The test for this privilege is performed against the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> of the calling process, not the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a> of the thread.</para>
      <para>The <b>AccessCheckAndAuditAlarm</b> function fails if the calling thread is not impersonating a client.</para>
    </remarks>
    <seealso cref="AccessCheck" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control </seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso cref="GENERIC_MAPPING" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</seealso>
    <seealso cref="MakeAbsoluteSD" />
    <seealso cref="MapGenericMask" />
    <seealso cref="ObjectCloseAuditAlarm" />
    <seealso cref="ObjectOpenAuditAlarm" />
    <seealso cref="ObjectPrivilegeAuditAlarm" />
    <seealso cref="PrivilegeCheck" />
    <seealso cref="PrivilegedServiceAuditAlarm" />
    <seealso cref="SECURITY_DESCRIPTOR" />
  </member>
  <member name="Windows.AccessCheckByType">
    <summary>
      <para>The <b>AccessCheckByType</b> function determines whether a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> grants a specified set of access rights to the client identified by an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a>. The function can check the client's access to a hierarchy of objects, such as an object, its property sets, and properties. The function grants or denies access to the hierarchy as a whole. Typically, server applications use this function to check access to a private object.</para>
    </summary>
    <param name="pSecurityDescriptor">
      <para>A pointer to a
<see cref="SECURITY_DESCRIPTOR" /> structure against which access is checked.</para>
    </param>
    <param name="PrincipalSelfSid">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID). If the security descriptor is associated with an object that represents a principal (for example, a user object), the <i>PrincipalSelfSid</i> parameter should be the SID of the object. When evaluating access, this SID logically replaces the SID in any <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a>  containing the well-known PRINCIPAL_SELF SID (S-1-5-10). For information about well-known SIDs, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/well-known-sids">Well-known SIDs</a>.</para>
      <para>Set this parameter to <b>NULL</b> if the protected object does not represent a principal.</para>
    </param>
    <param name="ClientToken">
      <para>A handle to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a> that represents the client attempting to gain access. The handle must have TOKEN_QUERY access to the token; otherwise, the function fails with ERROR_ACCESS_DENIED.</para>
    </param>
    <param name="DesiredAccess">
      <para>
        <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">Access mask</a> that specifies the access rights to check. This mask must have been mapped by the
<see cref="MapGenericMask" /> function to contain no generic access rights.</para>
      <para>If this parameter is MAXIMUM_ALLOWED, the function sets the <i>GrantedAccess</i> access mask to indicate the maximum access rights the security descriptor allows the client.</para>
    </param>
    <param name="ObjectTypeList">
      <para>A pointer to an array of
<see cref="OBJECT_TYPE_LIST" /> structures that identify the hierarchy of object types for which to check access. Each element in the array specifies a GUID that identifies the object type and a value indicating the level of the object type in the hierarchy of object types. The array should not have two elements with the same GUID.</para>
      <para>The array must have at least one element. The first element in the array must be at level zero and identify the object itself. The array can have only one level zero element. The second element is a subobject, such as a property set, at level 1. Following each level 1 entry are subordinate entries for the level 2 through 4 subobjects. Thus, the levels for the elements in the array might be {0, 1, 2, 2, 1, 2, 3}. If the object type list is out of order, <b>AccessCheckByType</b> fails and
<see cref="GetLastError" /> returns ERROR_INVALID_PARAMETER.</para>
      <para>If <i>ObjectTypeList</i> is <b>NULL</b>, <b>AccessCheckByType</b> is the same as the
<see cref="AccessCheck" /> function.</para>
    </param>
    <param name="ObjectTypeListLength">
      <para>Specifies the number of elements in the <i>ObjectTypeList</i> array.</para>
    </param>
    <param name="GenericMapping">
      <para>A pointer to the
<see cref="GENERIC_MAPPING" /> structure associated with the object for which access is being checked. The <b>GenericAll</b> member of the  <b>GENERIC_MAPPING</b> structure should contain all the access rights that can be granted by the resource manager, including STANDARD_RIGHTS_ALL and all of the rights that are set in the <b>GenericRead</b>, <b>GenericWrite</b>, and <b>GenericExecute</b> members.</para>
    </param>
    <param name="PrivilegeSet">
      <para>A pointer to a
<see cref="PRIVILEGE_SET" /> structure that receives the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a> used to perform the access validation. If no privileges were used, the function sets the <b>PrivilegeCount</b> member to zero.</para>
    </param>
    <param name="PrivilegeSetLength">
      <para>Specifies the size, in bytes, of the buffer pointed to by the <i>PrivilegeSet</i> parameter.</para>
    </param>
    <param name="GrantedAccess">
      <para>A pointer to an access mask that receives the granted access rights. If <i>AccessStatus</i> is set to <b>FALSE</b>, the function sets the access mask to zero. If the function fails, it does not set the access mask.</para>
    </param>
    <param name="AccessStatus">
      <para>A pointer to a variable that receives the results of the access check. If the security descriptor allows the requested access rights to the client identified by the access token, <i>AccessStatus</i> is set to <b>TRUE</b>. Otherwise, <i>AccessStatus</i> is set to <b>FALSE</b>, and you can call
<see cref="GetLastError" /> to get extended error information.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>For more information, see the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</a> overview.</para>
      <para>The <b>AccessCheckByType</b> function compares the specified security descriptor with the specified access token and indicates, in the <i>AccessStatus</i> parameter, whether access is granted or denied.</para>
      <para>The <i>ObjectTypeList</i> array does not necessarily represent the entire defined object. Rather, it represents that subset of the object for which to check access. For instance, to check access to two properties in a property set, specify an object type list with four elements: the object itself at level zero, the property set at level 1, and the two properties at level 2.</para>
      <para>The <b>AccessCheckByType</b> function evaluates ACEs that apply to the object itself and object-specific ACEs for the object types listed in the <i>ObjectTypeList</i> array. The function ignores object-specific ACEs for object types not listed in the <i>ObjectTypeList</i> array. Thus, the results returned in the <i>AccessStatus</i> parameter indicate the access allowed to the subset of the object defined by the <i>ObjectTypeList</i> parameter, not to the entire object.</para>
      <para>For more information about how a hierarchy of ACEs controls access to an object and its subobjects, see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/aces-to-control-access-to-an-object-s-properties">ACEs to Control Access to an Object's Properties</a>.</para>
      <para>If the security descriptor's DACL is <b>NULL</b>, the <i>AccessStatus</i> parameter returns <b>TRUE</b>, indicating that the client has the requested access.</para>
      <para>If the security descriptor does not contain owner and group SIDs, <b>AccessCheckByType</b> fails with ERROR_INVALID_SECURITY_DESCR.</para>
    </remarks>
    <seealso cref="AccessCheck" />
    <seealso cref="AccessCheckAndAuditAlarm" />
    <seealso cref="AccessCheckByTypeAndAuditAlarm" />
    <seealso cref="AccessCheckByTypeResultList" />
    <seealso cref="AccessCheckByTypeResultListAndAuditAlarm" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso cref="GENERIC_MAPPING" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</seealso>
    <seealso cref="MakeAbsoluteSD" />
    <seealso cref="MapGenericMask" />
    <seealso cref="OBJECT_TYPE_LIST" />
    <seealso cref="PRIVILEGE_SET" />
    <seealso cref="SECURITY_DESCRIPTOR" />
  </member>
  <member name="Windows.AccessCheckByTypeAndAuditAlarm">
    <summary>
      <para>The <b>AccessCheckByTypeAndAuditAlarm</b> function determines whether a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> grants a specified set of access rights to the client being impersonated by the calling thread. The function can check the client's access to a hierarchy of objects, such as an object, its property sets, and properties. The function grants or denies access to the hierarchy as a whole. If the security descriptor has a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) that apply to the client, the function generates any necessary audit messages in the security event log.</para>
      <para>Alarms are not currently supported.</para>
    </summary>
    <param name="SubsystemName">
      <para>A pointer to a null-terminated string that specifies the name of the subsystem calling the function. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="HandleId">
      <para>A pointer to a unique value that represents the client's handle to the object. If the access is denied, the system ignores this value.</para>
    </param>
    <param name="ObjectTypeName">
      <para>A pointer to a null-terminated string that specifies the type of object being created or accessed. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="ObjectName">
      <para>A pointer to a null-terminated string that specifies the name of the object being created or accessed. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="SecurityDescriptor">
      <para>A pointer to a <see cref="SECURITY_DESCRIPTOR" /> structure against which access is checked.</para>
    </param>
    <param name="PrincipalSelfSid">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID). If the security descriptor is associated with an object that represents a principal (for example, a user object), the <i>PrincipalSelfSid</i> parameter should be the SID of the object. When evaluating access, this SID logically replaces the SID in any ACE containing the well-known PRINCIPAL_SELF SID (S-1-5-10). For information about well-known SIDs, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/well-known-sids">Well-known SIDs</a>.</para>
      <para>If the protected object does not represent a principal, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="DesiredAccess">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> that specifies the access rights to check. This mask must have been mapped by the
<see cref="MapGenericMask" /> function to contain no generic access rights.</para>
      <para>If this parameter is MAXIMUM_ALLOWED, the function sets the <i>GrantedAccess</i> access mask to indicate the maximum access rights the security descriptor allows the client.</para>
    </param>
    <param name="AuditType">
      <para>The type of audit to be generated. This can be one of the values from the <see cref="AUDIT_EVENT_TYPE" /> enumeration type.</para>
    </param>
    <param name="Flags">
      <para>A flag that controls the function's behavior if the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> does not have the SE_AUDIT_NAME privilege enabled. If the AUDIT_ALLOW_NO_PRIVILEGE flag is set, the function performs the access check without generating audit messages when the privilege is not enabled. If this parameter is zero, the function fails if the privilege is not enabled.</para>
    </param>
    <param name="ObjectTypeList">
      <para>A pointer to an array of <see cref="OBJECT_TYPE_LIST" /> structures that identify the hierarchy of object types for which to check access. Each element in the array specifies a GUID that identifies the object type and a value that indicates the level of the object type in the hierarchy of object types. The array should not have two elements with the same GUID.</para>
      <para>The array must have at least one element. The first element in the array must be at level zero and identify the object itself. The array can have only one level zero element. The second element is a subobject, such as a property set, at level 1. Following each level 1 entry are subordinate entries for the level 2 through 4 subobjects. Thus, the levels for the elements in the array might be {0, 1, 2, 2, 1, 2, 3}. If the object type list is out of order, <b>AccessCheckByTypeAndAuditAlarm</b> fails and <see cref="GetLastError" /> returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="ObjectTypeListLength">
      <para>The number of elements in the <i>ObjectTypeList</i> array.</para>
    </param>
    <param name="GenericMapping">
      <para>A pointer to the <see cref="GENERIC_MAPPING" /> structure associated with the object for which access is being checked.</para>
    </param>
    <param name="ObjectCreation">
      <para>A flag that determines whether the calling application will create a new object when access is granted. A value of <b>TRUE</b> indicates the application will create a new object. A value of <b>FALSE</b> indicates the application will open an existing object.</para>
    </param>
    <param name="GrantedAccess">
      <para>A pointer to an access mask that receives the granted access rights. If <i>AccessStatus</i> is set to <b>FALSE</b>, the function sets the access mask to zero. If the function fails, it does not set the access mask.</para>
    </param>
    <param name="AccessStatus">
      <para>A pointer to a variable that receives the results of the access check. If the security descriptor allows the requested access rights to the client, <i>AccessStatus</i> is set to <b>TRUE</b>. Otherwise, <i>AccessStatus</i> is set to <b>FALSE</b> and you can call <see cref="GetLastError" /> to get extended error information.</para>
    </param>
    <param name="pfGenerateOnClose">
      <para>A pointer to a flag set by the audit-generation routine when the function returns. Pass this flag to the <see cref="ObjectCloseAuditAlarm" /> function when the object handle is closed.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>For more information, see the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</a> overview.</para>
      <para>If the <i>PrincipalSelfSid</i> and <i>ObjectTypeList</i> parameters are <b>NULL</b>, the <i>AuditType</i> parameter is <i>AuditEventObjectAccess</i>, and the <i>Flags</i> parameter is zero, <b>AccessCheckByTypeAndAuditAlarm</b> performs in the same way as the <see cref="AccessCheckAndAuditAlarm" /> function.</para>
      <para>The <i>ObjectTypeList</i> array does not necessarily represent the entire defined object. Rather, it represents that subset of the object for which to check access. For instance, to check access to two properties in a property set, specify an object type list with four elements: the object itself at level zero, the property set at level 1, and the two properties at level 2.</para>
      <para>The <b>AccessCheckByTypeAndAuditAlarm</b> function evaluates ACEs that apply to the object itself and object-specific ACEs for the object types listed in the <i>ObjectTypeList</i> array. The function ignores object-specific ACEs for object types not listed in the <i>ObjectTypeList</i> array. Thus, the results returned in the <i>AccessStatus</i> parameter indicate the access allowed to the subset of the object defined by the <i>ObjectTypeList</i> parameter, not to the entire object.</para>
      <para>For more information about how a hierarchy of ACEs controls access to an object and its subobjects, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/aces-to-control-access-to-an-object-s-properties">ACEs to Control Access to an Object's Properties</a>.</para>
      <para>To generate audit messages in the security event log, the calling process must have the SE_AUDIT_NAME privilege enabled. The system checks for this privilege in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> of the calling process, not the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a> of the thread. If the <i>Flags</i> parameter includes the AUDIT_ALLOW_NO_PRIVILEGE flag, the function performs the access check without generating audit messages when the privilege is not enabled.</para>
      <para>The <b>AccessCheckByTypeAndAuditAlarm</b> function fails if the calling thread is not impersonating a client.</para>
      <para>If the security descriptor does not contain owner and group SIDs, <b>AccessCheckByTypeAndAuditAlarm</b> fails with ERROR_INVALID_SECURITY_DESCR.</para>
    </remarks>
    <seealso cref="AUDIT_EVENT_TYPE" />
    <seealso cref="AccessCheck" />
    <seealso cref="AccessCheckAndAuditAlarm" />
    <seealso cref="AccessCheckByType" />
    <seealso cref="AccessCheckByTypeResultList" />
    <seealso cref="AccessCheckByTypeResultListAndAuditAlarm" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control </seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso cref="GENERIC_MAPPING" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</seealso>
    <seealso cref="MakeAbsoluteSD" />
    <seealso cref="MapGenericMask" />
    <seealso cref="OBJECT_TYPE_LIST" />
    <seealso cref="ObjectCloseAuditAlarm" />
    <seealso cref="PRIVILEGE_SET" />
    <seealso cref="SECURITY_DESCRIPTOR" />
  </member>
  <member name="Windows.AccessCheckByTypeAndAuditAlarmW">
    <summary>
      <para>The <b>AccessCheckByTypeAndAuditAlarm</b> function determines whether a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> grants a specified set of access rights to the client being impersonated by the calling thread. The function can check the client's access to a hierarchy of objects, such as an object, its property sets, and properties. The function grants or denies access to the hierarchy as a whole. If the security descriptor has a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) that apply to the client, the function generates any necessary audit messages in the security event log.</para>
      <para>Alarms are not currently supported.</para>
    </summary>
    <param name="SubsystemName">
      <para>A pointer to a null-terminated string that specifies the name of the subsystem calling the function. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="HandleId">
      <para>A pointer to a unique value that represents the client's handle to the object. If the access is denied, the system ignores this value.</para>
    </param>
    <param name="ObjectTypeName">
      <para>A pointer to a null-terminated string that specifies the type of object being created or accessed. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="ObjectName">
      <para>A pointer to a null-terminated string that specifies the name of the object being created or accessed. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="SecurityDescriptor">
      <para>A pointer to a <see cref="SECURITY_DESCRIPTOR" /> structure against which access is checked.</para>
    </param>
    <param name="PrincipalSelfSid">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID). If the security descriptor is associated with an object that represents a principal (for example, a user object), the <i>PrincipalSelfSid</i> parameter should be the SID of the object. When evaluating access, this SID logically replaces the SID in any ACE containing the well-known PRINCIPAL_SELF SID (S-1-5-10). For information about well-known SIDs, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/well-known-sids">Well-known SIDs</a>.</para>
      <para>If the protected object does not represent a principal, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="DesiredAccess">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> that specifies the access rights to check. This mask must have been mapped by the
<see cref="MapGenericMask" /> function to contain no generic access rights.</para>
      <para>If this parameter is MAXIMUM_ALLOWED, the function sets the <i>GrantedAccess</i> access mask to indicate the maximum access rights the security descriptor allows the client.</para>
    </param>
    <param name="AuditType">
      <para>The type of audit to be generated. This can be one of the values from the <see cref="AUDIT_EVENT_TYPE" /> enumeration type.</para>
    </param>
    <param name="Flags">
      <para>A flag that controls the function's behavior if the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> does not have the SE_AUDIT_NAME privilege enabled. If the AUDIT_ALLOW_NO_PRIVILEGE flag is set, the function performs the access check without generating audit messages when the privilege is not enabled. If this parameter is zero, the function fails if the privilege is not enabled.</para>
    </param>
    <param name="ObjectTypeList">
      <para>A pointer to an array of <see cref="OBJECT_TYPE_LIST" /> structures that identify the hierarchy of object types for which to check access. Each element in the array specifies a GUID that identifies the object type and a value that indicates the level of the object type in the hierarchy of object types. The array should not have two elements with the same GUID.</para>
      <para>The array must have at least one element. The first element in the array must be at level zero and identify the object itself. The array can have only one level zero element. The second element is a subobject, such as a property set, at level 1. Following each level 1 entry are subordinate entries for the level 2 through 4 subobjects. Thus, the levels for the elements in the array might be {0, 1, 2, 2, 1, 2, 3}. If the object type list is out of order, <b>AccessCheckByTypeAndAuditAlarm</b> fails and <see cref="GetLastError" /> returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="ObjectTypeListLength">
      <para>The number of elements in the <i>ObjectTypeList</i> array.</para>
    </param>
    <param name="GenericMapping">
      <para>A pointer to the <see cref="GENERIC_MAPPING" /> structure associated with the object for which access is being checked.</para>
    </param>
    <param name="ObjectCreation">
      <para>A flag that determines whether the calling application will create a new object when access is granted. A value of <b>TRUE</b> indicates the application will create a new object. A value of <b>FALSE</b> indicates the application will open an existing object.</para>
    </param>
    <param name="GrantedAccess">
      <para>A pointer to an access mask that receives the granted access rights. If <i>AccessStatus</i> is set to <b>FALSE</b>, the function sets the access mask to zero. If the function fails, it does not set the access mask.</para>
    </param>
    <param name="AccessStatus">
      <para>A pointer to a variable that receives the results of the access check. If the security descriptor allows the requested access rights to the client, <i>AccessStatus</i> is set to <b>TRUE</b>. Otherwise, <i>AccessStatus</i> is set to <b>FALSE</b> and you can call <see cref="GetLastError" /> to get extended error information.</para>
    </param>
    <param name="pfGenerateOnClose">
      <para>A pointer to a flag set by the audit-generation routine when the function returns. Pass this flag to the <see cref="ObjectCloseAuditAlarm" /> function when the object handle is closed.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>For more information, see the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</a> overview.</para>
      <para>If the <i>PrincipalSelfSid</i> and <i>ObjectTypeList</i> parameters are <b>NULL</b>, the <i>AuditType</i> parameter is <i>AuditEventObjectAccess</i>, and the <i>Flags</i> parameter is zero, <b>AccessCheckByTypeAndAuditAlarm</b> performs in the same way as the <see cref="AccessCheckAndAuditAlarm" /> function.</para>
      <para>The <i>ObjectTypeList</i> array does not necessarily represent the entire defined object. Rather, it represents that subset of the object for which to check access. For instance, to check access to two properties in a property set, specify an object type list with four elements: the object itself at level zero, the property set at level 1, and the two properties at level 2.</para>
      <para>The <b>AccessCheckByTypeAndAuditAlarm</b> function evaluates ACEs that apply to the object itself and object-specific ACEs for the object types listed in the <i>ObjectTypeList</i> array. The function ignores object-specific ACEs for object types not listed in the <i>ObjectTypeList</i> array. Thus, the results returned in the <i>AccessStatus</i> parameter indicate the access allowed to the subset of the object defined by the <i>ObjectTypeList</i> parameter, not to the entire object.</para>
      <para>For more information about how a hierarchy of ACEs controls access to an object and its subobjects, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/aces-to-control-access-to-an-object-s-properties">ACEs to Control Access to an Object's Properties</a>.</para>
      <para>To generate audit messages in the security event log, the calling process must have the SE_AUDIT_NAME privilege enabled. The system checks for this privilege in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> of the calling process, not the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a> of the thread. If the <i>Flags</i> parameter includes the AUDIT_ALLOW_NO_PRIVILEGE flag, the function performs the access check without generating audit messages when the privilege is not enabled.</para>
      <para>The <b>AccessCheckByTypeAndAuditAlarm</b> function fails if the calling thread is not impersonating a client.</para>
      <para>If the security descriptor does not contain owner and group SIDs, <b>AccessCheckByTypeAndAuditAlarm</b> fails with ERROR_INVALID_SECURITY_DESCR.</para>
    </remarks>
    <seealso cref="AUDIT_EVENT_TYPE" />
    <seealso cref="AccessCheck" />
    <seealso cref="AccessCheckAndAuditAlarm" />
    <seealso cref="AccessCheckByType" />
    <seealso cref="AccessCheckByTypeResultList" />
    <seealso cref="AccessCheckByTypeResultListAndAuditAlarm" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control </seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso cref="GENERIC_MAPPING" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</seealso>
    <seealso cref="MakeAbsoluteSD" />
    <seealso cref="MapGenericMask" />
    <seealso cref="OBJECT_TYPE_LIST" />
    <seealso cref="ObjectCloseAuditAlarm" />
    <seealso cref="PRIVILEGE_SET" />
    <seealso cref="SECURITY_DESCRIPTOR" />
  </member>
  <member name="Windows.AccessCheckByTypeResultList">
    <summary>
      <para>The <b>AccessCheckByTypeResultList</b> function determines whether a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> grants a specified set of access rights to the client identified by an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a>. The function can check the client's access to a hierarchy of objects, such as an object, its property sets, and properties. The function reports the access rights granted or denied to each object type in the hierarchy. Typically, server applications use this function to check access to a private object.</para>
    </summary>
    <param name="pSecurityDescriptor">
      <para>A pointer to a
<see cref="SECURITY_DESCRIPTOR" /> structure against which access is checked.</para>
    </param>
    <param name="PrincipalSelfSid">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID). If the security descriptor is associated with an object that represents a principal (for example, a user object), the <i>PrincipalSelfSid</i> parameter should be the SID of the object. When evaluating access, this SID logically replaces the SID in any <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) that contains the well-known PRINCIPAL_SELF SID (S-1-5-10). For information about well-known SIDs, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/well-known-sids">Well-known SIDs</a>.</para>
      <para>If the protected object does not represent a principal, set this parameter to <b>NULL</b>.</para>
    </param>
    <param name="ClientToken">
      <para>A handle to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a> that represents the client attempting to gain access. The handle must have TOKEN_QUERY access to the token; otherwise, the function fails with ERROR_ACCESS_DENIED.</para>
    </param>
    <param name="DesiredAccess">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> that specifies the access rights to check. This mask must have been mapped by the
<see cref="MapGenericMask" /> function to contain no generic access rights.</para>
      <para>If this parameter is MAXIMUM_ALLOWED, the function sets the access masks in the <i>GrantedAccess</i> array to indicate the client's maximum access rights to each element in the object type list.</para>
    </param>
    <param name="ObjectTypeList">
      <para>A pointer to an array of
<see cref="OBJECT_TYPE_LIST" /> structures that identify the hierarchy of object types for which to check access. Each element in the array specifies a GUID that identifies the object type and a value that indicates the level of the object type in the hierarchy of object types. The array should not have two elements with the same GUID.</para>
      <para>The array must have at least one element. The first element in the array must be at level zero and identify the object itself. The array can have only one level zero element. The second element is a subobject, such as a property set, at level 1. Following each level 1 entry are subordinate entries for the level 2 through 4 subobjects. Thus, the levels for the elements in the array might be {0, 1, 2, 2, 1, 2, 3}. If the object type list is out of order, <b>AccessCheckByTypeResultList</b> fails and
<see cref="GetLastError" /> returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="ObjectTypeListLength">
      <para>The number of elements in the <i>ObjectTypeList</i> array. This is also the number of elements in the arrays pointed to by the <i>GrantedAccessList</i> and <i>AccessStatusList</i> parameters.</para>
    </param>
    <param name="GenericMapping">
      <para>A pointer to the
<see cref="GENERIC_MAPPING" /> structure associated with the object for which access is being checked.</para>
    </param>
    <param name="PrivilegeSet">
      <para>A pointer to a
<see cref="PRIVILEGE_SET" /> structure that receives the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a> used to perform the access validation. If no privileges were used, the function sets the <b>PrivilegeCount</b> member to zero.</para>
    </param>
    <param name="PrivilegeSetLength">
      <para>The size, in bytes, of the buffer pointed to by the <i>PrivilegeSet</i> parameter.</para>
    </param>
    <param name="GrantedAccessList">
      <para>A pointer to an array of access masks. The function sets each access mask to indicate the access rights granted to the corresponding element in the object type list. If the function fails, it does not set the access masks.</para>
    </param>
    <param name="AccessStatusList">
      <para>A pointer to an array of status codes for the corresponding elements in the object type list. The function sets an element to zero to indicate success or a nonzero value to indicate the specific error during the access check. If the function fails, it does not set any of the elements in the array.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>For more information, see the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</a> overview.</para>
      <para>The <b>AccessCheckByTypeResultList</b> function compares the specified security descriptor with the specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a> and indicates, in the <i>AccessStatusList</i> parameter, whether access is granted or denied for each of the elements in the object types list.</para>
      <para>The <i>ObjectTypeList</i> array does not necessarily represent the entire defined object. Rather, it represents that subset of the object for which to check access. For instance, to check access to two properties in a property set, specify an object type list with four elements: the object itself at level zero, the property set at level 1, and the two properties at level 2.</para>
      <para>The <b>AccessCheckByTypeResultList</b> function evaluates ACEs that apply to the object itself and object-specific ACEs for the object types listed in the <i>ObjectTypeList</i> array. The function ignores object-specific ACEs for object types not listed in the <i>ObjectTypeList</i> array. Thus, the results returned for element zero in the <i>AccessStatusList</i> parameter indicate the access allowed to the subset of the object defined by the <i>ObjectTypeList</i> parameter, not to the entire object.</para>
      <para>For more information about how a hierarchy of ACEs controls access to an object and its subobjects, see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/aces-to-control-access-to-an-object-s-properties">ACEs to Control Access to an Object's Properties</a>.</para>
      <para>If the security descriptor's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) is <b>NULL</b>, the function grants the requested access to all of the elements in the object type list.</para>
      <para>If the security descriptor does not contain owner and group SIDs, <b>AccessCheckByTypeResultList</b> fails with ERROR_INVALID_SECURITY_DESCR.</para>
    </remarks>
    <seealso cref="AccessCheck" />
    <seealso cref="AccessCheckAndAuditAlarm" />
    <seealso cref="AccessCheckByType" />
    <seealso cref="AccessCheckByTypeAndAuditAlarm" />
    <seealso cref="AccessCheckByTypeResultListAndAuditAlarm" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control </seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso cref="GENERIC_MAPPING" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</seealso>
    <seealso cref="MakeAbsoluteSD" />
    <seealso cref="MapGenericMask" />
    <seealso cref="OBJECT_TYPE_LIST" />
    <seealso cref="PRIVILEGE_SET" />
    <seealso cref="SECURITY_DESCRIPTOR" />
  </member>
  <member name="Windows.AccessCheckByTypeResultListAndAuditAlarmByHandle">
    <summary>
      <para>The <b>AccessCheckByTypeResultListAndAuditAlarmByHandle</b> function determines whether a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> grants a specified set of access rights to the client that the calling thread is impersonating. The difference between this function and <see cref="AccessCheckByTypeResultListAndAuditAlarm" /> is that this function allows the calling thread to perform the access check before impersonating the client.</para>
      <para>The function can check access to a hierarchy of objects, such as an object, its property sets, and properties. The function reports the access rights granted or denied to each object type in the hierarchy. If the security descriptor has a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) that apply to the client, the function generates any necessary audit messages in the security event log. Alarms are not currently supported.</para>
    </summary>
    <param name="SubsystemName">
      <para>A pointer to a null-terminated string that specifies the name of the subsystem calling the function. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="HandleId">
      <para>A pointer to a unique value that represents the client's handle to the object. If the access is denied, the system ignores this value.</para>
    </param>
    <param name="ClientToken">
      <para>A handle to a token object that represents the client that requested the operation. This handle must be obtained through a communication session layer, such as a local named pipe, to prevent possible security policy violations. The caller must have TOKEN_QUERY access for the specified token.</para>
    </param>
    <param name="ObjectTypeName">
      <para>A pointer to a null-terminated string that specifies the type of object being created or accessed. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="ObjectName">
      <para>A pointer to a null-terminated string that specifies the name of the object being created or accessed. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="SecurityDescriptor">
      <para>A pointer to a
<see cref="SECURITY_DESCRIPTOR" /> structure against which access is checked.</para>
    </param>
    <param name="PrincipalSelfSid">
      <para>A pointer to a SID. If the security descriptor is associated with an object that represents a principal (for example, a user object), the <i>PrincipalSelfSid</i> parameter should be the SID of the object. When evaluating access, this SID logically replaces the SID in any ACE containing the well-known PRINCIPAL_SELF SID (S-1-5-10). For information about well-known SIDs, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/well-known-sids">Well-known SIDs</a>.</para>
      <para>Set this parameter to <b>NULL</b> if the protected object does not represent a principal.</para>
    </param>
    <param name="DesiredAccess">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> that specifies the access rights to check. This mask must have been mapped by the <see cref="MapGenericMask" /> function so that it contains no generic access rights.</para>
      <para>If this parameter is MAXIMUM_ALLOWED, the function sets the access mask in <i>GrantedAccess</i> to indicate the maximum access rights the security descriptor allows the client.</para>
    </param>
    <param name="AuditType">
      <para>The type of audit to be generated. This can be one of the values from the <see cref="AUDIT_EVENT_TYPE" /> enumeration type.</para>
    </param>
    <param name="Flags">
      <para>A flag that controls the function's behavior if the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> does not have the SE_AUDIT_NAME privilege enabled. If the AUDIT_ALLOW_NO_PRIVILEGE flag is set, the function performs the access check without generating audit messages when the privilege is not enabled. If this parameter is zero, the function fails if the privilege is not enabled.</para>
    </param>
    <param name="ObjectTypeList">
      <para>A pointer to an array of <see cref="OBJECT_TYPE_LIST" /> structures that identify the hierarchy of object types for which to check access. Each element in the array specifies a GUID that identifies the object type and a value that indicates the level of the object type in the hierarchy of object types. The array should not have two elements with the same GUID.</para>
      <para>The array must have at least one element. The first element in the array must be at level zero and identify the object itself. The array can have only one level zero element. The second element is a subobject, such as a property set, at level 1. Following each level 1 entry are subordinate entries for the level 2 through 4 subobjects. Thus, the levels for the elements in the array might be {0, 1, 2, 2, 1, 2, 3}. If the object type list is out of order, <b>AccessCheckByTypeResultListAndAuditAlarmByHandle</b> fails, and
<see cref="GetLastError" /> returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="ObjectTypeListLength">
      <para>The number of elements in the <i>ObjectTypeList</i> array.</para>
    </param>
    <param name="GenericMapping">
      <para>A pointer to the <see cref="GENERIC_MAPPING" /> structure associated with the object for which access is being checked.</para>
    </param>
    <param name="ObjectCreation">
      <para>A flag that determines whether the calling application will create a new object when access is granted. A value of <b>TRUE</b> indicates the application will create a new object. A value of <b>FALSE</b> indicates the application will open an existing object.</para>
    </param>
    <param name="GrantedAccess">
      <para>A pointer to an array of access masks. The function sets each access mask to indicate the access rights granted to the corresponding element in the object type list. If the function fails, it does not set the access masks.</para>
    </param>
    <param name="AccessStatusList">
      <para>A pointer to an array of status codes for the corresponding elements in the object type list. The function sets an element to zero to indicate success or to a nonzero value to indicate the specific error during the access check. If the function fails, it does not set any of the elements in the array.</para>
    </param>
    <param name="pfGenerateOnClose">
      <para>A pointer to a flag set by the audit-generation routine when the function returns. Pass this flag to the <see cref="ObjectCloseAuditAlarm" /> function when the object handle is closed.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>For more information, see the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</a> overview.</para>
      <para>Like <see cref="AccessCheckByTypeResultListAndAuditAlarm" />, the <b>AccessCheckByTypeResultListAndAuditAlarmByHandle</b> function is a combination of the <see cref="AccessCheckByTypeResultList" /> and
<see cref="AccessCheckAndAuditAlarm" /> functions. However, <b>AccessCheckByTypeResultListAndAuditAlarmByHandle</b> also requires a client token handle to provide security information on the client.</para>
      <para>The <i>ObjectTypeList</i> array does not necessarily represent the entire defined object. Rather, it represents that subset of the object for which to check access. For instance, to check access to two properties in a property set, specify an object type list with four elements: the object itself at level zero, the property set at level 1, and the two properties at level 2.</para>
      <para>The <b>AccessCheckByTypeResultListAndAuditAlarmByHandle</b> function evaluates ACEs that apply to the object itself and object-specific ACEs for the object types listed in the <i>ObjectTypeList</i> array. The function ignores object-specific ACEs for object types not listed in the <i>ObjectTypeList</i> array.</para>
      <para>For more information about how a hierarchy of ACEs controls access to an object and its subobjects, see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/aces-to-control-access-to-an-object-s-properties">ACEs to Control Access to an Object's Properties</a>.</para>
      <para>To generate audit messages in the security event log, the calling process must have the SE_AUDIT_NAME privilege enabled. The system checks for this privilege in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> of the calling process, not the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a> of the thread. If the <i>Flags</i> parameter includes the AUDIT_ALLOW_NO_PRIVILEGE flag, the function performs the access check without generating audit messages when the privilege is not enabled.</para>
      <para>The <b>AccessCheckByTypeResultListAndAuditAlarmByHandle</b> function fails if the calling thread is not impersonating a client.</para>
      <para>If the security descriptor does not contain owner and group SIDs, <b>AccessCheckByTypeResultListAndAuditAlarmByHandle</b> fails with ERROR_INVALID_SECURITY_DESCR.</para>
    </remarks>
    <seealso cref="AUDIT_EVENT_TYPE" />
    <seealso cref="AccessCheck" />
    <seealso cref="AccessCheckAndAuditAlarm" />
    <seealso cref="AccessCheckByType" />
    <seealso cref="AccessCheckByTypeResultList" />
    <seealso cref="AccessCheckByTypeResultListAndAuditAlarm" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso cref="GENERIC_MAPPING" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</seealso>
    <seealso cref="MakeAbsoluteSD" />
    <seealso cref="MapGenericMask" />
    <seealso cref="OBJECT_TYPE_LIST" />
    <seealso cref="ObjectCloseAuditAlarm" />
    <seealso cref="PRIVILEGE_SET" />
    <seealso cref="SECURITY_DESCRIPTOR" />
  </member>
  <member name="Windows.AccessCheckByTypeResultListAndAuditAlarmByHandleW">
    <summary>
      <para>The <b>AccessCheckByTypeResultListAndAuditAlarmByHandle</b> function determines whether a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> grants a specified set of access rights to the client that the calling thread is impersonating. The difference between this function and <see cref="AccessCheckByTypeResultListAndAuditAlarm" /> is that this function allows the calling thread to perform the access check before impersonating the client.</para>
      <para>The function can check access to a hierarchy of objects, such as an object, its property sets, and properties. The function reports the access rights granted or denied to each object type in the hierarchy. If the security descriptor has a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) that apply to the client, the function generates any necessary audit messages in the security event log. Alarms are not currently supported.</para>
    </summary>
    <param name="SubsystemName">
      <para>A pointer to a null-terminated string that specifies the name of the subsystem calling the function. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="HandleId">
      <para>A pointer to a unique value that represents the client's handle to the object. If the access is denied, the system ignores this value.</para>
    </param>
    <param name="ClientToken">
      <para>A handle to a token object that represents the client that requested the operation. This handle must be obtained through a communication session layer, such as a local named pipe, to prevent possible security policy violations. The caller must have TOKEN_QUERY access for the specified token.</para>
    </param>
    <param name="ObjectTypeName">
      <para>A pointer to a null-terminated string that specifies the type of object being created or accessed. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="ObjectName">
      <para>A pointer to a null-terminated string that specifies the name of the object being created or accessed. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="SecurityDescriptor">
      <para>A pointer to a
<see cref="SECURITY_DESCRIPTOR" /> structure against which access is checked.</para>
    </param>
    <param name="PrincipalSelfSid">
      <para>A pointer to a SID. If the security descriptor is associated with an object that represents a principal (for example, a user object), the <i>PrincipalSelfSid</i> parameter should be the SID of the object. When evaluating access, this SID logically replaces the SID in any ACE containing the well-known PRINCIPAL_SELF SID (S-1-5-10). For information about well-known SIDs, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/well-known-sids">Well-known SIDs</a>.</para>
      <para>Set this parameter to <b>NULL</b> if the protected object does not represent a principal.</para>
    </param>
    <param name="DesiredAccess">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> that specifies the access rights to check. This mask must have been mapped by the <see cref="MapGenericMask" /> function so that it contains no generic access rights.</para>
      <para>If this parameter is MAXIMUM_ALLOWED, the function sets the access mask in <i>GrantedAccess</i> to indicate the maximum access rights the security descriptor allows the client.</para>
    </param>
    <param name="AuditType">
      <para>The type of audit to be generated. This can be one of the values from the <see cref="AUDIT_EVENT_TYPE" /> enumeration type.</para>
    </param>
    <param name="Flags">
      <para>A flag that controls the function's behavior if the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> does not have the SE_AUDIT_NAME privilege enabled. If the AUDIT_ALLOW_NO_PRIVILEGE flag is set, the function performs the access check without generating audit messages when the privilege is not enabled. If this parameter is zero, the function fails if the privilege is not enabled.</para>
    </param>
    <param name="ObjectTypeList">
      <para>A pointer to an array of <see cref="OBJECT_TYPE_LIST" /> structures that identify the hierarchy of object types for which to check access. Each element in the array specifies a GUID that identifies the object type and a value that indicates the level of the object type in the hierarchy of object types. The array should not have two elements with the same GUID.</para>
      <para>The array must have at least one element. The first element in the array must be at level zero and identify the object itself. The array can have only one level zero element. The second element is a subobject, such as a property set, at level 1. Following each level 1 entry are subordinate entries for the level 2 through 4 subobjects. Thus, the levels for the elements in the array might be {0, 1, 2, 2, 1, 2, 3}. If the object type list is out of order, <b>AccessCheckByTypeResultListAndAuditAlarmByHandle</b> fails, and
<see cref="GetLastError" /> returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="ObjectTypeListLength">
      <para>The number of elements in the <i>ObjectTypeList</i> array.</para>
    </param>
    <param name="GenericMapping">
      <para>A pointer to the <see cref="GENERIC_MAPPING" /> structure associated with the object for which access is being checked.</para>
    </param>
    <param name="ObjectCreation">
      <para>A flag that determines whether the calling application will create a new object when access is granted. A value of <b>TRUE</b> indicates the application will create a new object. A value of <b>FALSE</b> indicates the application will open an existing object.</para>
    </param>
    <param name="GrantedAccess">
      <para>A pointer to an array of access masks. The function sets each access mask to indicate the access rights granted to the corresponding element in the object type list. If the function fails, it does not set the access masks.</para>
    </param>
    <param name="AccessStatusList">
      <para>A pointer to an array of status codes for the corresponding elements in the object type list. The function sets an element to zero to indicate success or to a nonzero value to indicate the specific error during the access check. If the function fails, it does not set any of the elements in the array.</para>
    </param>
    <param name="pfGenerateOnClose">
      <para>A pointer to a flag set by the audit-generation routine when the function returns. Pass this flag to the <see cref="ObjectCloseAuditAlarm" /> function when the object handle is closed.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>For more information, see the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</a> overview.</para>
      <para>Like <see cref="AccessCheckByTypeResultListAndAuditAlarm" />, the <b>AccessCheckByTypeResultListAndAuditAlarmByHandle</b> function is a combination of the <see cref="AccessCheckByTypeResultList" /> and
<see cref="AccessCheckAndAuditAlarm" /> functions. However, <b>AccessCheckByTypeResultListAndAuditAlarmByHandle</b> also requires a client token handle to provide security information on the client.</para>
      <para>The <i>ObjectTypeList</i> array does not necessarily represent the entire defined object. Rather, it represents that subset of the object for which to check access. For instance, to check access to two properties in a property set, specify an object type list with four elements: the object itself at level zero, the property set at level 1, and the two properties at level 2.</para>
      <para>The <b>AccessCheckByTypeResultListAndAuditAlarmByHandle</b> function evaluates ACEs that apply to the object itself and object-specific ACEs for the object types listed in the <i>ObjectTypeList</i> array. The function ignores object-specific ACEs for object types not listed in the <i>ObjectTypeList</i> array.</para>
      <para>For more information about how a hierarchy of ACEs controls access to an object and its subobjects, see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/aces-to-control-access-to-an-object-s-properties">ACEs to Control Access to an Object's Properties</a>.</para>
      <para>To generate audit messages in the security event log, the calling process must have the SE_AUDIT_NAME privilege enabled. The system checks for this privilege in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> of the calling process, not the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a> of the thread. If the <i>Flags</i> parameter includes the AUDIT_ALLOW_NO_PRIVILEGE flag, the function performs the access check without generating audit messages when the privilege is not enabled.</para>
      <para>The <b>AccessCheckByTypeResultListAndAuditAlarmByHandle</b> function fails if the calling thread is not impersonating a client.</para>
      <para>If the security descriptor does not contain owner and group SIDs, <b>AccessCheckByTypeResultListAndAuditAlarmByHandle</b> fails with ERROR_INVALID_SECURITY_DESCR.</para>
    </remarks>
    <seealso cref="AUDIT_EVENT_TYPE" />
    <seealso cref="AccessCheck" />
    <seealso cref="AccessCheckAndAuditAlarm" />
    <seealso cref="AccessCheckByType" />
    <seealso cref="AccessCheckByTypeResultList" />
    <seealso cref="AccessCheckByTypeResultListAndAuditAlarm" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso cref="GENERIC_MAPPING" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</seealso>
    <seealso cref="MakeAbsoluteSD" />
    <seealso cref="MapGenericMask" />
    <seealso cref="OBJECT_TYPE_LIST" />
    <seealso cref="ObjectCloseAuditAlarm" />
    <seealso cref="PRIVILEGE_SET" />
    <seealso cref="SECURITY_DESCRIPTOR" />
  </member>
  <member name="Windows.AccessCheckByTypeResultListAndAuditAlarm">
    <summary>
      <para>The <b>AccessCheckByTypeResultListAndAuditAlarm</b> function determines whether a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> grants a specified set of access rights to the client being impersonated by the calling thread. The function can check access to a hierarchy of objects, such as an object, its property sets, and properties. The function reports the access rights granted or denied to each object type in the hierarchy. If the security descriptor has a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) that apply to the client, the function generates any necessary audit messages in the security event log. Alarms are not currently supported.</para>
    </summary>
    <param name="SubsystemName">
      <para>A pointer to a null-terminated string that specifies the name of the subsystem calling the function. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="HandleId">
      <para>A pointer to a unique value that represents the client's handle to the object. If the access is denied, the system ignores this value.</para>
    </param>
    <param name="ObjectTypeName">
      <para>A pointer to a null-terminated string that specifies the type of object being created or accessed. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="ObjectName">
      <para>A pointer to a null-terminated string that specifies the name of the object being created or accessed. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="SecurityDescriptor">
      <para>A pointer to a <see cref="SECURITY_DESCRIPTOR" /> structure against which access is checked.</para>
    </param>
    <param name="PrincipalSelfSid">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID). If the security descriptor is associated with an object that represents a principal (for example, a user object), the <i>PrincipalSelfSid</i> parameter should be the SID of the object. When evaluating access, this SID logically replaces the SID in any ACE that contains the well-known PRINCIPAL_SELF SID (S-1-5-10). For information about well-known SIDs, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/well-known-sids">Well-known SIDs</a>.</para>
      <para>Set this parameter to <b>NULL</b> if the protected object does not represent a principal.</para>
    </param>
    <param name="DesiredAccess">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> that specifies the access rights to check. This mask must have been mapped by the
<see cref="MapGenericMask" /> function so that it contains no generic access rights.</para>
      <para>If this parameter is MAXIMUM_ALLOWED, the function sets the access mask in <i>GrantedAccess</i> to indicate the maximum access rights the security descriptor allows the client.</para>
    </param>
    <param name="AuditType">
      <para>The type of audit to be generated. This can be one of the values from the <see cref="AUDIT_EVENT_TYPE" /> enumeration type.</para>
    </param>
    <param name="Flags">
      <para>A flag that controls the function's behavior if the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> does not have the SE_AUDIT_NAME privilege enabled. If the AUDIT_ALLOW_NO_PRIVILEGE flag is set, the function performs the access check without generating audit messages when the privilege is not enabled. If this parameter is zero, the function fails if the privilege is not enabled.</para>
    </param>
    <param name="ObjectTypeList">
      <para>A pointer to an array of
<see cref="OBJECT_TYPE_LIST" /> structures that identify the hierarchy of object types for which to check access. Each element in the array specifies a GUID that identifies the object type and a value that indicates the level of the object type in the hierarchy of object types. The array should not have two elements with the same GUID.</para>
      <para>The array must have at least one element. The first element in the array must be at level zero and identify the object itself. The array can have only one level zero element. The second element is a subobject, such as a property set, at level 1. Following each level 1 entry are subordinate entries for the level 2 through 4 subobjects. Thus, the levels for the elements in the array might be {0, 1, 2, 2, 1, 2, 3}. If the object type list is out of order, <b>AccessCheckByTypeResultListAndAuditAlarm</b> fails, and
<see cref="GetLastError" /> returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="ObjectTypeListLength">
      <para>The number of elements in the <i>ObjectTypeList</i> array.</para>
    </param>
    <param name="GenericMapping">
      <para>A pointer to the
<see cref="GENERIC_MAPPING" /> structure associated with the object for which access is being checked.</para>
    </param>
    <param name="ObjectCreation">
      <para>A flag that determines whether the calling application will create a new object when access is granted. A value of <b>TRUE</b> indicates the application will create a new object. A value of <b>FALSE</b> indicates the application will open an existing object.</para>
    </param>
    <param name="GrantedAccess">
      <para>A pointer to an array of access masks. The function sets each access mask to indicate the access rights granted to the corresponding element in the object type list. If the function fails, it does not set the access masks.</para>
    </param>
    <param name="AccessStatusList">
      <para>A pointer to an array of status codes for the corresponding elements in the object type list. The function sets an element to zero to indicate success or to a nonzero value to indicate the specific error during the access check. If the function fails, it does not set any of the elements in the array.</para>
    </param>
    <param name="pfGenerateOnClose">
      <para>A pointer to a flag set by the audit-generation routine when the function returns. Pass this flag to the
<see cref="ObjectCloseAuditAlarm" /> function when the object handle is closed.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>For more information, see the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</a> overview.</para>
      <para>The <b>AccessCheckByTypeResultListAndAuditAlarm</b> function is a combination of the
<see cref="AccessCheckByTypeResultList" /> and
<see cref="AccessCheckAndAuditAlarm" /> functions.</para>
      <para>The <i>ObjectTypeList</i> array does not necessarily represent the entire defined object. Rather, it represents that subset of the object for which to check access. For instance, to check access to two properties in a property set, specify an object type list with four elements: the object itself at level zero, the property set at level 1, and the two properties at level 2.</para>
      <para>The <b>AccessCheckByTypeResultListAndAuditAlarm</b> function evaluates ACEs that apply to the object itself and object-specific ACEs for the object types listed in the <i>ObjectTypeList</i> array. The function ignores object-specific ACEs for object types not listed in the <i>ObjectTypeList</i> array.</para>
      <para>For more information about how a hierarchy of ACEs controls access to an object and its subobjects, see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/aces-to-control-access-to-an-object-s-properties">ACEs to Control Access to an Object's Properties</a>.</para>
      <para>To generate audit messages in the security event log, the calling process must have the SE_AUDIT_NAME privilege enabled. The system checks for this privilege in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> of the calling process, not the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a> of the thread. If the <i>Flags</i> parameter includes the AUDIT_ALLOW_NO_PRIVILEGE flag, the function performs the access check without generating audit messages when the privilege is not enabled.</para>
      <para>The <b>AccessCheckByTypeResultListAndAuditAlarm</b> function fails if the calling thread is not impersonating a client.</para>
      <para>If the security descriptor does not contain owner and group SIDs, <b>AccessCheckByTypeResultListAndAuditAlarm</b> fails with ERROR_INVALID_SECURITY_DESCR.</para>
    </remarks>
    <seealso cref="AUDIT_EVENT_TYPE" />
    <seealso cref="AccessCheck" />
    <seealso cref="AccessCheckAndAuditAlarm" />
    <seealso cref="AccessCheckByType" />
    <seealso cref="AccessCheckByTypeResultList" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso cref="GENERIC_MAPPING" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</seealso>
    <seealso cref="MakeAbsoluteSD" />
    <seealso cref="MapGenericMask" />
    <seealso cref="OBJECT_TYPE_LIST" />
    <seealso cref="ObjectCloseAuditAlarm" />
    <seealso cref="PRIVILEGE_SET" />
    <seealso cref="SECURITY_DESCRIPTOR" />
  </member>
  <member name="Windows.AccessCheckByTypeResultListAndAuditAlarmW">
    <summary>
      <para>The <b>AccessCheckByTypeResultListAndAuditAlarm</b> function determines whether a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> grants a specified set of access rights to the client being impersonated by the calling thread. The function can check access to a hierarchy of objects, such as an object, its property sets, and properties. The function reports the access rights granted or denied to each object type in the hierarchy. If the security descriptor has a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) with <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) that apply to the client, the function generates any necessary audit messages in the security event log. Alarms are not currently supported.</para>
    </summary>
    <param name="SubsystemName">
      <para>A pointer to a null-terminated string that specifies the name of the subsystem calling the function. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="HandleId">
      <para>A pointer to a unique value that represents the client's handle to the object. If the access is denied, the system ignores this value.</para>
    </param>
    <param name="ObjectTypeName">
      <para>A pointer to a null-terminated string that specifies the type of object being created or accessed. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="ObjectName">
      <para>A pointer to a null-terminated string that specifies the name of the object being created or accessed. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="SecurityDescriptor">
      <para>A pointer to a <see cref="SECURITY_DESCRIPTOR" /> structure against which access is checked.</para>
    </param>
    <param name="PrincipalSelfSid">
      <para>A pointer to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID). If the security descriptor is associated with an object that represents a principal (for example, a user object), the <i>PrincipalSelfSid</i> parameter should be the SID of the object. When evaluating access, this SID logically replaces the SID in any ACE that contains the well-known PRINCIPAL_SELF SID (S-1-5-10). For information about well-known SIDs, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/well-known-sids">Well-known SIDs</a>.</para>
      <para>Set this parameter to <b>NULL</b> if the protected object does not represent a principal.</para>
    </param>
    <param name="DesiredAccess">
      <para>An <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> that specifies the access rights to check. This mask must have been mapped by the
<see cref="MapGenericMask" /> function so that it contains no generic access rights.</para>
      <para>If this parameter is MAXIMUM_ALLOWED, the function sets the access mask in <i>GrantedAccess</i> to indicate the maximum access rights the security descriptor allows the client.</para>
    </param>
    <param name="AuditType">
      <para>The type of audit to be generated. This can be one of the values from the <see cref="AUDIT_EVENT_TYPE" /> enumeration type.</para>
    </param>
    <param name="Flags">
      <para>A flag that controls the function's behavior if the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> does not have the SE_AUDIT_NAME privilege enabled. If the AUDIT_ALLOW_NO_PRIVILEGE flag is set, the function performs the access check without generating audit messages when the privilege is not enabled. If this parameter is zero, the function fails if the privilege is not enabled.</para>
    </param>
    <param name="ObjectTypeList">
      <para>A pointer to an array of
<see cref="OBJECT_TYPE_LIST" /> structures that identify the hierarchy of object types for which to check access. Each element in the array specifies a GUID that identifies the object type and a value that indicates the level of the object type in the hierarchy of object types. The array should not have two elements with the same GUID.</para>
      <para>The array must have at least one element. The first element in the array must be at level zero and identify the object itself. The array can have only one level zero element. The second element is a subobject, such as a property set, at level 1. Following each level 1 entry are subordinate entries for the level 2 through 4 subobjects. Thus, the levels for the elements in the array might be {0, 1, 2, 2, 1, 2, 3}. If the object type list is out of order, <b>AccessCheckByTypeResultListAndAuditAlarm</b> fails, and
<see cref="GetLastError" /> returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="ObjectTypeListLength">
      <para>The number of elements in the <i>ObjectTypeList</i> array.</para>
    </param>
    <param name="GenericMapping">
      <para>A pointer to the
<see cref="GENERIC_MAPPING" /> structure associated with the object for which access is being checked.</para>
    </param>
    <param name="ObjectCreation">
      <para>A flag that determines whether the calling application will create a new object when access is granted. A value of <b>TRUE</b> indicates the application will create a new object. A value of <b>FALSE</b> indicates the application will open an existing object.</para>
    </param>
    <param name="GrantedAccess">
      <para>A pointer to an array of access masks. The function sets each access mask to indicate the access rights granted to the corresponding element in the object type list. If the function fails, it does not set the access masks.</para>
    </param>
    <param name="AccessStatusList">
      <para>A pointer to an array of status codes for the corresponding elements in the object type list. The function sets an element to zero to indicate success or to a nonzero value to indicate the specific error during the access check. If the function fails, it does not set any of the elements in the array.</para>
    </param>
    <param name="pfGenerateOnClose">
      <para>A pointer to a flag set by the audit-generation routine when the function returns. Pass this flag to the
<see cref="ObjectCloseAuditAlarm" /> function when the object handle is closed.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>For more information, see the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</a> overview.</para>
      <para>The <b>AccessCheckByTypeResultListAndAuditAlarm</b> function is a combination of the
<see cref="AccessCheckByTypeResultList" /> and
<see cref="AccessCheckAndAuditAlarm" /> functions.</para>
      <para>The <i>ObjectTypeList</i> array does not necessarily represent the entire defined object. Rather, it represents that subset of the object for which to check access. For instance, to check access to two properties in a property set, specify an object type list with four elements: the object itself at level zero, the property set at level 1, and the two properties at level 2.</para>
      <para>The <b>AccessCheckByTypeResultListAndAuditAlarm</b> function evaluates ACEs that apply to the object itself and object-specific ACEs for the object types listed in the <i>ObjectTypeList</i> array. The function ignores object-specific ACEs for object types not listed in the <i>ObjectTypeList</i> array.</para>
      <para>For more information about how a hierarchy of ACEs controls access to an object and its subobjects, see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/aces-to-control-access-to-an-object-s-properties">ACEs to Control Access to an Object's Properties</a>.</para>
      <para>To generate audit messages in the security event log, the calling process must have the SE_AUDIT_NAME privilege enabled. The system checks for this privilege in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> of the calling process, not the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a> of the thread. If the <i>Flags</i> parameter includes the AUDIT_ALLOW_NO_PRIVILEGE flag, the function performs the access check without generating audit messages when the privilege is not enabled.</para>
      <para>The <b>AccessCheckByTypeResultListAndAuditAlarm</b> function fails if the calling thread is not impersonating a client.</para>
      <para>If the security descriptor does not contain owner and group SIDs, <b>AccessCheckByTypeResultListAndAuditAlarm</b> fails with ERROR_INVALID_SECURITY_DESCR.</para>
    </remarks>
    <seealso cref="AUDIT_EVENT_TYPE" />
    <seealso cref="AccessCheck" />
    <seealso cref="AccessCheckAndAuditAlarm" />
    <seealso cref="AccessCheckByType" />
    <seealso cref="AccessCheckByTypeResultList" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso cref="GENERIC_MAPPING" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/how-dacls-control-access-to-an-object">How AccessCheck Works</seealso>
    <seealso cref="MakeAbsoluteSD" />
    <seealso cref="MapGenericMask" />
    <seealso cref="OBJECT_TYPE_LIST" />
    <seealso cref="ObjectCloseAuditAlarm" />
    <seealso cref="PRIVILEGE_SET" />
    <seealso cref="SECURITY_DESCRIPTOR" />
  </member>
  <member name="Windows.AddAccessAllowedAce">
    <summary>
      <para>The <b>AddAccessAllowedAce</b> function adds an access-allowed <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL). The access is granted to a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID).</para>
      <para>To control whether the new ACE can be inherited by child objects, use the
<see cref="AddAccessAllowedAceEx" /> function.</para>
    </summary>
    <param name="pAcl">
      <para>A pointer to an
ACL. This function adds an access-allowed ACE to the end of this ACL. The ACE is in the form of an
<see cref="ACCESS_ALLOWED_ACE" /> structure.</para>
    </param>
    <param name="dwAceRevision">
      <para>Specifies the revision level of the ACL being modified.</para>
      <para>This value can be ACL_REVISION or ACL_REVISION_DS. Use ACL_REVISION_DS if the ACL contains object-specific ACEs.</para>
    </param>
    <param name="AccessMask">
      <para>Specifies the mask of access rights to be granted to the specified SID.</para>
    </param>
    <param name="pSid">
      <para>A pointer to the
SID  representing a user, group, or logon account being granted access.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />. The following are possible error values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ALLOTTED_SPACE_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>The new ACE does not fit into the ACL. A larger ACL buffer is required.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_ACL</b>
            </para>
          </description>
          <description>
            <para>The specified ACL is not properly formed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_SID</b>
            </para>
          </description>
          <description>
            <para>The specified SID is not structurally valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_REVISION_MISMATCH</b>
            </para>
          </description>
          <description>
            <para>The specified revision is not known or is incompatible with that of the ACL.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The ACE was successfully added.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The addition of an access-allowed ACE to an ACL is the most common form of ACL modification.</para>
      <para>The <b>AddAccessAllowedAce</b> and <see cref="AddAccessDeniedAce" /> functions add a new ACE to the end of the list of ACEs for the ACL. These functions do not automatically place the new ACE in the proper canonical order. It is the caller's responsibility to ensure that the ACL is in canonical order by adding ACEs in the proper sequence.</para>
      <para>The
<see cref="ACE_HEADER" /> structure placed in the ACE by the <b>AddAccessAllowedAce</b> function specifies a type and size, but provides no inheritance and no ACE flags.</para>
      <h4>Examples</h4>
      <para>For an example that uses this function, see <a href="https://docs.microsoft.com//previous-versions/aa379608(v=vs.85)">Starting an Interactive Client Process</a>.</para>
    </remarks>
    <seealso cref="ACCESS_ALLOWED_ACE" />
    <seealso cref="ACE_HEADER" />
    <seealso cref="AddAccessAllowedAceEx" />
    <seealso cref="AddAccessDeniedAce" />
    <seealso cref="AddAce" />
    <seealso cref="AddAuditAccessAce" />
    <seealso cref="DeleteAce" />
    <seealso cref="GetAce" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
  </member>
  <member name="Windows.AddAccessAllowedAceEx">
    <summary>
      <para>The <b>AddAccessAllowedAceEx</b> function adds an access-allowed <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) to the end of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL).</para>
    </summary>
    <param name="pAcl">
      <para>A pointer to a DACL. The <b>AddAccessAllowedAceEx</b> function adds an access-allowed ACE to the end of this DACL. The ACE is in the form of an
<see cref="ACCESS_ALLOWED_ACE" /> structure.</para>
    </param>
    <param name="dwAceRevision">
      <para>Specifies the revision level of the DACL being modified. This value can be ACL_REVISION or ACL_REVISION_DS. Use ACL_REVISION_DS if the DACL contains object-specific ACEs.</para>
    </param>
    <param name="AceFlags">
      <para>A set of bit flags that control ACE inheritance. The function sets these flags in the <b>AceFlags</b> member of the
<see cref="ACE_HEADER" /> structure of the new ACE. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>CONTAINER_INHERIT_ACE</b>
          </description>
          <description>
            <para>The ACE is inherited by container objects.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INHERIT_ONLY_ACE</b>
          </description>
          <description>
            <para>The ACE does not apply to the object to which the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) is assigned, but it can be inherited by child objects.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INHERITED_ACE</b>
          </description>
          <description>
            <para>Indicates an inherited ACE. This flag allows operations that change the security on a tree of objects to modify inherited ACEs while not changing ACEs that were directly applied to the object.</para>
          </description>
        </item>
        <item>
          <description>
            <b>NO_PROPAGATE_INHERIT_ACE</b>
          </description>
          <description>
            <para>The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE bits are not propagated to an inherited ACE.</para>
          </description>
        </item>
        <item>
          <description>
            <b>OBJECT_INHERIT_ACE</b>
          </description>
          <description>
            <para>The ACE is inherited by noncontainer objects.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="AccessMask">
      <para>A set of bit flags that use the
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> format. These flags specify the access rights that the new ACE allows for the specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID).</para>
    </param>
    <param name="pSid">
      <para>A pointer to a
SID that identifies the user, group, or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">logon session</a> to which the new ACE allows access.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />. The following are possible error values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ALLOTTED_SPACE_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>The new ACE does not fit into the ACL. A larger ACL buffer is required.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_ACL</b>
            </para>
          </description>
          <description>
            <para>The specified ACL is not properly formed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The <i>AceFlags</i> parameter is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_SID</b>
            </para>
          </description>
          <description>
            <para>The specified SID is not structurally valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_REVISION_MISMATCH</b>
            </para>
          </description>
          <description>
            <para>The specified revision is not known or is incompatible with that of the ACL.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The ACE was successfully added.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The caller must ensure that ACEs are added to the DACL in the correct order. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/order-of-aces-in-a-dacl">Order of ACEs in a DACL</a>.</para>
    </remarks>
    <seealso cref="ACCESS_ALLOWED_ACE" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</seealso>
    <seealso cref="ACE_HEADER" />
    <seealso cref="ACL" />
    <seealso cref="AddAccessDeniedAceEx" />
    <seealso cref="AddAuditAccessAceEx" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
  </member>
  <member name="Windows.AddAccessAllowedObjectAce">
    <summary>
      <para>The <b>AddAccessAllowedObjectAce</b> function adds an access-allowed <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) to the end of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL). The new ACE can grant access to an object, or to a property set or property on an object. You can also use <b>AddAccessAllowedObjectAce</b> to add an ACE that only a specified type of child object can inherit.</para>
    </summary>
    <param name="pAcl">
      <para>A pointer to a DACL. The <b>AddAccessAllowedObjectAce</b> function adds an access-allowed ACE to the end of this DACL. The ACE is in the form of an
<see cref="ACCESS_ALLOWED_OBJECT_ACE" /> structure.</para>
    </param>
    <param name="dwAceRevision">
      <para>Specifies the revision level of the DACL being modified. This value must be ACL_REVISION_DS. If the DACL's revision level is lower than ACL_REVISION_DS, the function changes it to ACL_REVISION_DS.</para>
    </param>
    <param name="AceFlags">
      <para>A set of bit flags that control ACE inheritance. The function sets these flags in the <b>AceFlags</b> member of the
<see cref="ACE_HEADER" /> structure of the new ACE. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>CONTAINER_INHERIT_ACE</b>
          </description>
          <description>
            <para>The ACE is inherited by container objects.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INHERIT_ONLY_ACE</b>
          </description>
          <description>
            <para>The ACE does not apply to the object to which the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) is assigned, but it can be inherited by child objects.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INHERITED_ACE</b>
          </description>
          <description>
            <para>Indicates an inherited ACE. This flag allows operations that change the security on a tree of objects to modify inherited ACEs, while not changing ACEs that were directly applied to the object.</para>
          </description>
        </item>
        <item>
          <description>
            <b>NO_PROPAGATE_INHERIT_ACE</b>
          </description>
          <description>
            <para>The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE bits are not propagated to an inherited ACE.</para>
          </description>
        </item>
        <item>
          <description>
            <b>OBJECT_INHERIT_ACE</b>
          </description>
          <description>
            <para>The ACE is inherited by noncontainer objects.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="AccessMask">
      <para>A set of bit flags that use the
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> format. These flags specify the access rights that the new ACE allows for the specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID).</para>
    </param>
    <param name="ObjectTypeGuid">
      <para>A pointer to a
<see cref="GUID" /> structure that identifies the type of object, property set, or property protected by the new ACE. If this parameter is <b>NULL</b>, the new ACE protects the object to which the DACL is assigned.</para>
    </param>
    <param name="InheritedObjectTypeGuid">
      <para>A pointer to a <see cref="GUID" /> structure that identifies the type of object that can inherit the new ACE. If this parameter is non-<b>NULL</b>, only the specified object type can inherit the ACE. If <b>NULL</b>, any type of child object can inherit the ACE. In either case, inheritance is also controlled by the value of the <i>AceFlags</i> parameter, as well as by any protection against inheritance placed on the child objects.</para>
    </param>
    <param name="pSid">
      <para>A pointer to a
SID that identifies the user, group, or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">logon session</a> to which the new ACE allows access.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />. The following are possible error values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ALLOTTED_SPACE_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>The new ACE does not fit into the ACL. A larger ACL buffer is required.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_ACL</b>
            </para>
          </description>
          <description>
            <para>The specified ACL is not properly formed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The <i>AceFlags</i> parameter is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_SID</b>
            </para>
          </description>
          <description>
            <para>The specified SID is not structurally valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_REVISION_MISMATCH</b>
            </para>
          </description>
          <description>
            <para>The specified revision is not known or is incompatible with that of the ACL.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The ACE was successfully added.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If both <i>ObjectTypeGuid</i> and <i>InheritedObjectTypeGuid</i> are <b>NULL</b>, use the
<see cref="AddAccessAllowedAceEx" /> function rather than <b>AddAccessAllowedObjectAce</b>. This is suggested because an
<see cref="ACCESS_ALLOWED_ACE" /> is smaller and more efficient than an
<see cref="ACCESS_ALLOWED_OBJECT_ACE" />.</para>
      <para>The caller must ensure that ACEs are added to the DACL in the correct order. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/order-of-aces-in-a-dacl">Order of ACEs in a DACL</a>.</para>
    </remarks>
    <seealso cref="ACCESS_ALLOWED_ACE" />
    <seealso cref="ACCESS_ALLOWED_OBJECT_ACE" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</seealso>
    <seealso cref="ACE_HEADER" />
    <seealso cref="ACL" />
    <seealso cref="AddAccessAllowedAceEx" />
    <seealso cref="AddAccessDeniedObjectAce" />
    <seealso cref="AddAuditAccessObjectAce" />
    <seealso cref="GUID" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
  </member>
  <member name="Windows.AddAccessDeniedAce">
    <summary>
      <para>The <b>AddAccessDeniedAce</b> function adds an access-denied <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL). The access is denied to a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID).</para>
      <para>To control whether the new ACE can be inherited by child objects, use the
<see cref="AddAccessDeniedAceEx" /> function.</para>
    </summary>
    <param name="pAcl">
      <para>A pointer to an
ACL . This function adds an access-denied ACE to the end of this ACL. The ACE is in the form of an
<see cref="ACCESS_DENIED_ACE" /> structure.</para>
    </param>
    <param name="dwAceRevision">
      <para>Specifies the revision level of the ACL being modified.</para>
      <para>This value can be ACL_REVISION or ACL_REVISION_DS. Use ACL_REVISION_DS if the ACL contains object-specific ACEs.</para>
    </param>
    <param name="AccessMask">
      <para>Specifies the mask of access rights being denied to the specified SID.</para>
    </param>
    <param name="pSid">
      <para>A pointer to the SID structure representing the user, group, or logon account being denied access.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />. The following are possible error values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ALLOTTED_SPACE_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>The new ACE does not fit into the ACL. A larger ACL buffer is required.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_ACL</b>
            </para>
          </description>
          <description>
            <para>The specified ACL is not properly formed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_SID</b>
            </para>
          </description>
          <description>
            <para>The specified SID is not structurally valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_REVISION_MISMATCH</b>
            </para>
          </description>
          <description>
            <para>The specified revision is not known or is incompatible with that of the ACL.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The ACE was successfully added.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<see cref="AddAccessAllowedAce" /> and <b>AddAccessDeniedAce</b> functions add a new ACE to the end of the list of ACEs for the ACL. These functions do not automatically place the new ACE in the proper canonical order. It is the caller's responsibility to ensure that the ACL is in canonical order by adding ACEs in the proper sequence.</para>
      <para>The
<see cref="ACE_HEADER" /> structure placed in the ACE by the <b>AddAccessDeniedAce</b> function specifies a type and size, but provides no ACE flags.</para>
      <para>The ACE added by <b>AddAccessDeniedAce</b> is not inheritable.</para>
    </remarks>
    <seealso cref="ACCESS_DENIED_ACE" />
    <seealso cref="ACE_HEADER" />
    <seealso cref="ACL" />
    <seealso cref="AddAccessAllowedAce" />
    <seealso cref="AddAccessDeniedAceEx" />
    <seealso cref="AddAce" />
    <seealso cref="AddAuditAccessAce" />
    <seealso cref="DeleteAce" />
    <seealso cref="GetAce" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
  </member>
  <member name="Windows.AddAccessDeniedAceEx">
    <summary>
      <para>The <b>AddAccessDeniedAceEx</b> function adds an access-denied <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) to the end of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL).</para>
    </summary>
    <param name="pAcl">
      <para>A pointer to a DACL. The <b>AddAccessDeniedAceEx</b> function adds an access-denied ACE to the end of this DACL. The ACE is in the form of an
<see cref="ACCESS_DENIED_ACE" /> structure.</para>
    </param>
    <param name="dwAceRevision">
      <para>Specifies the revision level of the DACL being modified. This value can be ACL_REVISION or ACL_REVISION_DS. Use ACL_REVISION_DS if the DACL contains object-specific ACEs.</para>
    </param>
    <param name="AceFlags">
      <para>A set of bit flags that control ACE inheritance. The function sets these flags in the <b>AceFlags</b> member of the
<see cref="ACE_HEADER" /> structure of the new ACE. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>CONTAINER_INHERIT_ACE</b>
          </description>
          <description>
            <para>The ACE is inherited by container objects.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INHERIT_ONLY_ACE</b>
          </description>
          <description>
            <para>The ACE does not apply to the object to which the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) is assigned, but it can be inherited by child objects.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INHERITED_ACE</b>
          </description>
          <description>
            <para>Indicates an inherited ACE. This flag allows operations that change the security on a tree of objects to modify inherited ACEs, while not changing ACEs that were directly applied to the object.</para>
          </description>
        </item>
        <item>
          <description>
            <b>NO_PROPAGATE_INHERIT_ACE</b>
          </description>
          <description>
            <para>The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE bits are not propagated to an inherited ACE.</para>
          </description>
        </item>
        <item>
          <description>
            <b>OBJECT_INHERIT_ACE</b>
          </description>
          <description>
            <para>The ACE is inherited by noncontainer objects.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="AccessMask">
      <para>A set of bit flags that use the
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> format to specify the access rights that the new ACE denies to the specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID).</para>
    </param>
    <param name="pSid">
      <para>A pointer to a
SID  that identifies the user, group, or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">logon session</a> to which the new ACE denies access.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />. The following are possible error values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ALLOTTED_SPACE_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>The new ACE does not fit into the ACL. A larger ACL buffer is required.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_ACL</b>
            </para>
          </description>
          <description>
            <para>The specified ACL is not properly formed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The <i>AceFlags</i> parameter is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_SID</b>
            </para>
          </description>
          <description>
            <para>The specified SID is not structurally valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_REVISION_MISMATCH</b>
            </para>
          </description>
          <description>
            <para>The specified revision is not known or is incompatible with that of the ACL.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The ACE was successfully added.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Although the <b>AddAccessDeniedAceEx</b> function adds the new ACE to the end of the DACL, access-denied ACEs should appear at the beginning of a DACL. The caller must ensure that ACEs are added to the DACL in the correct order. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/order-of-aces-in-a-dacl">Order of ACEs in a DACL</a>.</para>
    </remarks>
    <seealso cref="ACCESS_DENIED_ACE" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</seealso>
    <seealso cref="ACE_HEADER" />
    <seealso cref="AddAccessAllowedAceEx" />
    <seealso cref="AddAuditAccessAceEx" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
  </member>
  <member name="Windows.AddAccessDeniedObjectAce">
    <summary>
      <para>The <b>AddAccessDeniedObjectAce</b> function adds an access-denied <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) to the end of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL). The new ACE can deny access to an object, or to a property set or property on an object. You can also use <b>AddAccessDeniedObjectAce</b> to add an ACE that only a specified type of child object can inherit.</para>
    </summary>
    <param name="pAcl">
      <para>A pointer to a DACL. The <b>AddAccessDeniedObjectAce</b> function adds an access-denied ACE to the end of this DACL. The ACE is in the form of an
<see cref="ACCESS_DENIED_OBJECT_ACE" /> structure.</para>
    </param>
    <param name="dwAceRevision">
      <para>Specifies the revision level of the DACL being modified. This value must be ACL_REVISION_DS. If the DACL's revision level is lower than ACL_REVISION_DS, the function changes it to ACL_REVISION_DS.</para>
    </param>
    <param name="AceFlags">
      <para>A set of bit flags that control ACE inheritance. The function sets these flags in the <b>AceFlags</b> member of the
<see cref="ACE_HEADER" /> structure of the new ACE. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>CONTAINER_INHERIT_ACE</b>
          </description>
          <description>
            <para>The ACE is inherited by container objects.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INHERIT_ONLY_ACE</b>
          </description>
          <description>
            <para>The ACE does not apply to the object to which the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) is assigned, but it can be inherited by child objects.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INHERITED_ACE</b>
          </description>
          <description>
            <para>Indicates an inherited ACE. This flag allows operations that change the security on a tree of objects to modify inherited ACEs, while not changing ACEs that were directly applied to the object.</para>
          </description>
        </item>
        <item>
          <description>
            <b>NO_PROPAGATE_INHERIT_ACE</b>
          </description>
          <description>
            <para>The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE bits are not propagated to an inherited ACE.</para>
          </description>
        </item>
        <item>
          <description>
            <b>OBJECT_INHERIT_ACE</b>
          </description>
          <description>
            <para>The ACE is inherited by noncontainer objects.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="AccessMask">
      <para>A set of bit flags that use the
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> format to specify the access rights that the new ACE denies to the specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID).</para>
    </param>
    <param name="ObjectTypeGuid">
      <para>A pointer to a
<see cref="GUID" /> structure that identifies the type of object, property set, or property protected by the new ACE. If this parameter is <b>NULL</b>, the new ACE protects the object to which the ACL is assigned.</para>
    </param>
    <param name="InheritedObjectTypeGuid">
      <para>A pointer to a <see cref="GUID" /> structure that identifies the type of object that can inherit the new ACE. If this parameter is non-<b>NULL</b>, only the specified object type can inherit the ACE. If <b>NULL</b>, any type of child object can inherit the ACE. In either case, inheritance is also controlled by the value of the <i>AceFlags</i> parameter, as well as by any protection against inheritance placed on the child objects.</para>
    </param>
    <param name="pSid">
      <para>A pointer to a
SID  that identifies the user, group, or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">logon session</a> to which the new ACE allows access.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />. The following are possible error values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ALLOTTED_SPACE_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>The new ACE does not fit into the ACL. A larger ACL buffer is required.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_ACL</b>
            </para>
          </description>
          <description>
            <para>The specified ACL is not properly formed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The <i>AceFlags</i> parameter is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_SID</b>
            </para>
          </description>
          <description>
            <para>The specified SID is not structurally valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_REVISION_MISMATCH</b>
            </para>
          </description>
          <description>
            <para>The specified revision is not known or is incompatible with that of the ACL.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The ACE was successfully added.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If both <i>ObjectTypeGuid</i> and <i>InheritedObjectTypeGuid</i> are <b>NULL</b>, use the
<see cref="AddAccessDeniedAceEx" /> function rather than <b>AddAccessDeniedObjectAce</b>. This is suggested because an
<see cref="ACCESS_DENIED_ACE" /> is smaller and more efficient than an
<see cref="ACCESS_DENIED_OBJECT_ACE" />.</para>
      <para>Although the <b>AddAccessDeniedObjectAce</b> function adds the new ACE to the end of the ACL, access-denied ACEs should appear at the beginning of an ACL. The caller must ensure that ACEs are added to the DACL in the correct order. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/order-of-aces-in-a-dacl">Order of ACEs in a DACL</a>.</para>
    </remarks>
    <seealso cref="ACCESS_DENIED_ACE" />
    <seealso cref="ACCESS_DENIED_OBJECT_ACE" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</seealso>
    <seealso cref="ACE_HEADER" />
    <seealso cref="AddAccessAllowedObjectAce" />
    <seealso cref="AddAccessDeniedAceEx" />
    <seealso cref="AddAuditAccessObjectAce" />
    <seealso cref="GUID" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
  </member>
  <member name="Windows.AddAce">
    <summary>
      <para>The <b>AddAce</b> function adds one or more <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) to a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL).</para>
    </summary>
    <param name="pAcl">
      <para>A pointer to an
ACL. This function adds an ACE to this ACL.</para>
    </param>
    <param name="dwAceRevision">
      <para>Specifies the revision level of the ACL being modified.</para>
      <para>This value can be ACL_REVISION or ACL_REVISION_DS. Use ACL_REVISION_DS if the ACL contains object-specific ACEs. This value must be compatible with the <b>AceType</b> field of all ACEs in <i>pAceList</i>.
Otherwise, the function will fail and set the last error to ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="dwStartingAceIndex">
      <para>Specifies the position in the ACL's list of ACEs at which to add new ACEs. A value of zero inserts the ACEs at the beginning of the list. A value of MAXDWORD appends the ACEs to the end of the list.</para>
    </param>
    <param name="pAceList">
      <para>A pointer to a list of one or more ACEs to be added to the specified ACL. The ACEs in the list must be stored contiguously.</para>
    </param>
    <param name="nAceListLength">
      <para>Specifies the size, in bytes, of the input buffer pointed to by the <i>pAceList</i> parameter.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />. The following are possible error values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INSUFFICIENT_BUFFER</b>
            </para>
          </description>
          <description>
            <para>The new ACE does not fit into the ACL. A larger ACL buffer is required.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>The specified ACL is not properly formed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The ACE was successfully added.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>Applications frequently use the
<see cref="FindFirstFreeAce" /> and
<see cref="GetAce" /> functions when using the <b>AddAce</b> function to manipulate an ACL. In addition, the
<see cref="ACL_SIZE_INFORMATION" /> structure retrieved by the
<see cref="GetAclInformation" /> function contains the size of the ACL and the number of ACEs it contains.</para>
      <h4>Examples</h4>
      <para>For an example that uses this function, see <a href="https://docs.microsoft.com//previous-versions/aa379608(v=vs.85)">Starting an Interactive Client Process</a>.</para>
    </remarks>
    <seealso cref="ACL_SIZE_INFORMATION" />
    <seealso cref="AddAccessAllowedAce" />
    <seealso cref="AddAccessDeniedAce" />
    <seealso cref="AddAuditAccessAce" />
    <seealso cref="DeleteAce" />
    <seealso cref="FindFirstFreeAce" />
    <seealso cref="GetAce" />
    <seealso cref="GetAclInformation" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
  </member>
  <member name="Windows.AddAuditAccessAce">
    <summary>
      <para>The <b>AddAuditAccessAce</b> function adds a system-audit <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) to a system <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL). The access of a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) is audited.</para>
      <para>To control whether the new ACE can be inherited by child objects, use the
<see cref="AddAuditAccessAceEx" /> function.</para>
    </summary>
    <param name="pAcl">
      <para>A pointer to an
ACL. This function adds a system-audit ACE to this ACL. The ACE is in the form of a
<see cref="SYSTEM_AUDIT_ACE" /> structure.</para>
    </param>
    <param name="dwAceRevision">
      <para>Specifies the revision level of the ACL being modified.</para>
      <para>This value can be ACL_REVISION or ACL_REVISION_DS. Use ACL_REVISION_DS if the ACL contains object-specific ACEs.</para>
    </param>
    <param name="dwAccessMask">
      <para>Specifies the mask of access rights to be audited for the specified SID.</para>
    </param>
    <param name="pSid">
      <para>A pointer to the
SID representing the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> whose access is being audited.</para>
    </param>
    <param name="bAuditSuccess">
      <para>Specifies whether successful access attempts are to be audited. Set this flag to <b>TRUE</b> to enable auditing; otherwise, set it to <b>FALSE</b>.</para>
    </param>
    <param name="bAuditFailure">
      <para>Specifies whether unsuccessful access attempts are to be audited. Set this flag to <b>TRUE</b> to enable auditing; otherwise, set it to <b>FALSE</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />. The following are possible error values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ALLOTTED_SPACE_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>The new ACE does not fit into the ACL. A larger ACL buffer is required.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_ACL</b>
            </para>
          </description>
          <description>
            <para>The specified ACL is not properly formed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_SID</b>
            </para>
          </description>
          <description>
            <para>The specified SID is not structurally valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_REVISION_MISMATCH</b>
            </para>
          </description>
          <description>
            <para>The specified revision is not known or is incompatible with that of the ACL.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The ACE was successfully added.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<see cref="ACE_HEADER" /> structure placed in the ACE by the <b>AddAuditAccessAce</b> function specifies a type and size, but provides no ACE flags.</para>
    </remarks>
    <seealso cref="ACE_HEADER" />
    <seealso cref="AddAccessAllowedAce" />
    <seealso cref="AddAccessDeniedAce" />
    <seealso cref="AddAce" />
    <seealso cref="AddAuditAccessAceEx" />
    <seealso cref="DeleteAce" />
    <seealso cref="GetAce" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SYSTEM_AUDIT_ACE" />
  </member>
  <member name="Windows.AddAuditAccessAceEx">
    <summary>
      <para>The <b>AddAuditAccessAceEx</b> function adds a system-audit <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) to the end of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL).</para>
    </summary>
    <param name="pAcl">
      <para>A pointer to a SACL. The <b>AddAuditAccessAceEx</b> function adds a system-audit ACE to this SACL. The ACE is in the form of a
<see cref="SYSTEM_AUDIT_ACE" /> structure.</para>
    </param>
    <param name="dwAceRevision">
      <para>Specifies the revision level of the SACL being modified. This value can be ACL_REVISION or ACL_REVISION_DS. Use ACL_REVISION_DS if the SACL contains object-specific ACEs.</para>
    </param>
    <param name="AceFlags">
      <para>A set of bit flags that control ACE inheritance and the type of access attempts to audit. The function sets these flags in the <b>AceFlags</b> member of the <see cref="ACE_HEADER" /> structure of the new ACE. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>CONTAINER_INHERIT_ACE</b>
          </description>
          <description>
            <para>The ACE is inherited by container objects.</para>
          </description>
        </item>
        <item>
          <description>
            <b>FAILED_ACCESS_ACE_FLAG</b>
          </description>
          <description>
            <para>If you set this flag or specify <b>TRUE</b> for the <i>bAuditFailure</i> parameter, failed attempts to use the specified access rights cause the system to generate an audit record in the security event log.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INHERIT_ONLY_ACE</b>
          </description>
          <description>
            <para>The ACE does not apply to the object to which the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) is assigned, but it can be inherited by child objects.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INHERITED_ACE</b>
          </description>
          <description>
            <para>Indicates an inherited ACE. This flag allows operations that change the security on a tree of objects to modify inherited ACEs, while not changing ACEs that were directly applied to the object.</para>
          </description>
        </item>
        <item>
          <description>
            <b>NO_PROPAGATE_INHERIT_ACE</b>
          </description>
          <description>
            <para>The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE bits are not propagated to an inherited ACE.</para>
          </description>
        </item>
        <item>
          <description>
            <b>OBJECT_INHERIT_ACE</b>
          </description>
          <description>
            <para>The ACE is inherited by noncontainer objects.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SUCCESSFUL_ACCESS_ACE_FLAG</b>
          </description>
          <description>
            <para>If you set this flag or specify <b>TRUE</b> for the <i>bAuditSuccess</i> parameter, successful uses of the specified access rights cause the system to generate an audit record in the security event log.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="dwAccessMask">
      <para>A set of bit flags that use the
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> format to specify the access rights that the new ACE audits for the specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID).</para>
    </param>
    <param name="pSid">
      <para>A pointer to a
SID that identifies the user, group, or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">logon session</a> for which the new ACE audits access.</para>
    </param>
    <param name="bAuditSuccess">
      <para>Specifies whether successful uses of the specified access rights cause the system to generate an audit record in the security event log. If this flag is <b>TRUE</b> or if the <i>AceFlags</i> parameter specifies the SUCCESSFUL_ACCESS_ACE_FLAG flag, the system records successful access attempts; otherwise, it does not.</para>
    </param>
    <param name="bAuditFailure">
      <para>Specifies whether failed attempts to use the specified access rights cause the system to generate an audit record in the security event log. If this flag is <b>TRUE</b> or if the <i>AceFlags</i> parameter specifies the FAILED_ACCESS_ACE_FLAG flag, the system records failed access attempts; otherwise, it does not.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />. The following are possible error values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ALLOTTED_SPACE_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>The new ACE does not fit into the ACL. A larger ACL buffer is required.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_ACL</b>
            </para>
          </description>
          <description>
            <para>The specified ACL is not properly formed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The <i>AceFlags</i> parameter is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_SID</b>
            </para>
          </description>
          <description>
            <para>The specified SID is not structurally valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_REVISION_MISMATCH</b>
            </para>
          </description>
          <description>
            <para>The specified revision is not known or is incompatible with that of the ACL.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The ACE was successfully added.</para>
          </description>
        </item>
      </list>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</seealso>
    <seealso cref="ACE_HEADER" />
    <seealso cref="ACL" />
    <seealso cref="AddAccessAllowedAceEx" />
    <seealso cref="AddAccessDeniedAceEx" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SYSTEM_AUDIT_ACE" />
  </member>
  <member name="Windows.AddAuditAccessObjectAce">
    <summary>
      <para>The <b>AddAuditAccessObjectAce</b> function adds a system-audit <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) to the end of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL). The new ACE can audit access to an object, or to a property set or property on an object. You can also use <b>AddAuditAccessObjectAce</b> to add an ACE that only a specified type of child object can inherit.</para>
    </summary>
    <param name="pAcl">
      <para>A pointer to a SACL. The <b>AddAuditAccessObjectAce</b> function adds a system-audit ACE to the end of this SACL. The ACE is in the form of a
<see cref="SYSTEM_AUDIT_OBJECT_ACE" /> structure.</para>
    </param>
    <param name="dwAceRevision">
      <para>Specifies the revision level of the SACL being modified. This value must be ACL_REVISION_DS. If the SACL's revision level is lower than ACL_REVISION_DS, the function changes it to ACL_REVISION_DS.</para>
    </param>
    <param name="AceFlags">
      <para>A set of bit flags that control ACE inheritance and the type of access attempts to audit. The function sets these flags in the <b>AceFlags</b> member of the
<see cref="ACE_HEADER" /> structure of the new ACE. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>CONTAINER_INHERIT_ACE</b>
          </description>
          <description>
            <para>The ACE is inherited by container objects.</para>
          </description>
        </item>
        <item>
          <description>
            <b>FAILED_ACCESS_ACE_FLAG</b>
          </description>
          <description>
            <para>If you set this flag or specify <b>TRUE</b> for the <i>bAuditFailure</i> parameter, failed attempts to use the specified access rights cause the system to generate an audit record in the security event log.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INHERIT_ONLY_ACE</b>
          </description>
          <description>
            <para>The ACE does not apply to the object to which the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) is assigned, but it can be inherited by child objects.</para>
          </description>
        </item>
        <item>
          <description>
            <b>INHERITED_ACE</b>
          </description>
          <description>
            <para>Indicates an inherited ACE. This flag allows operations that change the security on a tree of objects to modify inherited ACEs, while not changing ACEs that were directly applied to the object.</para>
          </description>
        </item>
        <item>
          <description>
            <b>NO_PROPAGATE_INHERIT_ACE</b>
          </description>
          <description>
            <para>The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE bits are not propagated to an inherited ACE.</para>
          </description>
        </item>
        <item>
          <description>
            <b>OBJECT_INHERIT_ACE</b>
          </description>
          <description>
            <para>The ACE is inherited by noncontainer objects.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SUCCESSFUL_ACCESS_ACE_FLAG</b>
          </description>
          <description>
            <para>If you set this flag or specify <b>TRUE</b> for the <i>bAuditSuccess</i> parameter, successful uses of the specified access rights cause the system to generate an audit record in the security event log.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="AccessMask">
      <para>An
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> that specifies the access rights that the new ACE audits for the specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID).</para>
    </param>
    <param name="ObjectTypeGuid">
      <para>A pointer to a
<see cref="GUID" /> structure that identifies the type of object, property set, or property protected by the new ACE. If this parameter is <b>NULL</b>, the new ACE protects the object to which the ACL is assigned.</para>
    </param>
    <param name="InheritedObjectTypeGuid">
      <para>A pointer to a <see cref="GUID" /> structure that identifies the type of object that can inherit the new ACE. If this parameter is non-<b>NULL</b>, only the specified object type can inherit the ACE. If <b>NULL</b>, any type of child object can inherit the ACE. In either case, inheritance is also controlled by the value of the <i>AceFlags</i> parameter, as well as by any protection against inheritance placed on the child objects.</para>
    </param>
    <param name="pSid">
      <para>A pointer to a
SID that identifies the user, group, or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">logon session</a> for which the new ACE audits access.</para>
    </param>
    <param name="bAuditSuccess">
      <para>Specifies whether successful uses of the specified access rights cause the system to generate an audit record in the security event log. If this flag is <b>TRUE</b> or if the <i>AceFlags</i> parameter specifies the SUCCESSFUL_ACCESS_ACE_FLAG flag, the system records successful access attempts; otherwise, it does not.</para>
    </param>
    <param name="bAuditFailure">
      <para>Specifies whether failed attempts to use the specified access rights cause the system to generate an audit record in the security event log. If this flag is <b>TRUE</b> or if the <i>AceFlags</i> parameter specifies the FAILED_ACCESS_ACE_FLAG flag, the system records failed access attempts; otherwise, it does not.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />. The following are possible error values.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_ALLOTTED_SPACE_EXCEEDED</b>
            </para>
          </description>
          <description>
            <para>The new ACE does not fit into the ACL. A larger ACL buffer is required.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_ACL</b>
            </para>
          </description>
          <description>
            <para>The specified ACL is not properly formed.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_FLAGS</b>
            </para>
          </description>
          <description>
            <para>The <i>AceFlags</i> parameter is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_SID</b>
            </para>
          </description>
          <description>
            <para>The specified SID is not structurally valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_REVISION_MISMATCH</b>
            </para>
          </description>
          <description>
            <para>The specified revision is not known or is incompatible with that of the ACL.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The ACE was successfully added.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>If both <i>ObjectTypeGuid</i> and <i>InheritedObjectTypeGuid</i> are <b>NULL</b>, use the
<see cref="AddAuditAccessAceEx" /> function rather than <b>AddAuditAccessObjectAce</b>. This is suggested because a
<see cref="SYSTEM_AUDIT_ACE" /> is smaller and more efficient than a
<see cref="SYSTEM_AUDIT_OBJECT_ACE" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</seealso>
    <seealso cref="ACE_HEADER" />
    <seealso cref="ACL" />
    <seealso cref="AddAccessAllowedObjectAce" />
    <seealso cref="AddAccessDeniedObjectAce" />
    <seealso cref="AddAuditAccessAceEx" />
    <seealso cref="GUID" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SYSTEM_AUDIT_ACE" />
    <seealso cref="SYSTEM_AUDIT_OBJECT_ACE" />
  </member>
  <member name="Windows.AddMandatoryAce">
    <summary>
      <para>The <b>AddMandatoryAce</b> function adds a <see cref="SYSTEM_MANDATORY_LABEL_ACE" /><a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) to the specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL).</para>
    </summary>
    <param name="pAcl">
      <para>A pointer to an
SACL. This function adds a mandatory ACE to the end of this SACL. The ACE is in the form of a
<see cref="SYSTEM_MANDATORY_LABEL_ACE" /> structure.</para>
    </param>
    <param name="dwAceRevision">
      <para>The revision level of the SACL being modified.
This value can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>
              <b>ACL_REVISION</b>
            </b>
          </description>
          <description>
            <para>The SACL does not contain object-specific ACEs.</para>
          </description>
        </item>
        <item>
          <description>
            <b>
              <b>ACL_REVISION_DS</b>
            </b>
          </description>
          <description>
            <para>The SACL contains object-specified ACEs.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="AceFlags">
      <para>A set of bit flags that control ACE inheritance. This function sets these flags in the <b>AceFlags</b> member of the
<see cref="ACE_HEADER" /> structure of the new ACE.</para>
      <para>This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>OBJECT_INHERIT_ACE</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>The ACE is inherited by noncontainer objects.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CONTAINER_INHERIT_ACE</b>
                </description>
              </item>
              <item>
                <description>0x2</description>
              </item>
            </list>
          </description>
          <description>
            <para>The ACE is inherited by container objects.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>NO_PROPAGATE_INHERIT_ACE</b>
                </description>
              </item>
              <item>
                <description>0x4</description>
              </item>
            </list>
          </description>
          <description>
            <para>The <b>OBJECT_INHERIT_ACE</b> and <b>CONTAINER_INHERIT_ACE</b> bits are not propagated to an inherited ACE.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INHERIT_ONLY_ACE</b>
                </description>
              </item>
              <item>
                <description>0x8</description>
              </item>
            </list>
          </description>
          <description>
            <para>The ACE does not apply to the object to which the SACL is assigned, but the ACE can be inherited by child objects.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INHERITED_ACE</b>
                </description>
              </item>
              <item>
                <description>0x10</description>
              </item>
            </list>
          </description>
          <description>
            <para>The ACE is inherited. Operations that change the security on a tree of objects may modify inherited ACEs without changing ACEs that were directly applied to the object.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="MandatoryPolicy">
      <para>The access policy for principals with a mandatory integrity level lower than the object associated with the SACL that contains this ACE.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYSTEM_MANDATORY_LABEL_NO_WRITE_UP</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>A principal with a lower mandatory level than the object cannot write to the object.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYSTEM_MANDATORY_LABEL_NO_READ_UP</b>
                </description>
              </item>
              <item>
                <description>0x2</description>
              </item>
            </list>
          </description>
          <description>
            <para>A principal with a lower mandatory level than the object cannot read the object.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP</b>
                </description>
              </item>
              <item>
                <description>0x4</description>
              </item>
            </list>
          </description>
          <description>
            <para>A principal with a lower mandatory level than the object cannot execute the object.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="pLabelSid">
      <para>A pointer to an SID that specifies the mandatory integrity level of the object associated with the SACL being appended.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. For extended error information, call
<see cref="GetLastError" />. The following are possible error values.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_ALLOTTED_SPACE_EXCEEDED</b>
                </description>
              </item>
              <item>
                <description>0x540</description>
              </item>
            </list>
          </description>
          <description>
            <para>The new ACE does not fit into the <i>pAcl</i> buffer.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>To compile an application that uses this function, define _WIN32_WINNT as 0x0600 or later. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/WinProg/using-the-windows-headers">Using the Windows Headers</a>.</para>
    </remarks>
    <seealso cref="SYSTEM_MANDATORY_LABEL_ACE" />
  </member>
  <member name="Windows.AddResourceAttributeAce">
    <summary>
      <para>The <b>AddResourceAttributeAce</b> function adds a <see cref="SYSTEM_RESOURCE_ATTRIBUTE_ACE" /><a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) to the end of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL). A <b>SYSTEM_RESOURCE_ATTRIBUTE_ACE</b> structure specifies an attribute name and a value-ordered list of elements  that is associated with a resource and potentially used during access checks. The set of standard access rights are defined in the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/standard-access-rights">Standard Access Rights</a> topic.</para>
    </summary>
    <param name="pAcl">
      <para>A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL). This function adds an ACE to this ACL. The value of this parameter cannot be <b>NULL</b>. The ACE is in the form of a  <see cref="SYSTEM_RESOURCE_ATTRIBUTE_ACE" /> structure.</para>
    </param>
    <param name="dwAceRevision">
      <para>Specifies the revision level of the ACL being modified. This value can be ACL_REVISION or ACL_REVISION_DS. Use ACL_REVISION_DS if the ACL contains object-specific ACEs.</para>
    </param>
    <param name="AceFlags">
      <para>A set of bit flags that control ACE inheritance. The function sets these flags in the <b>AceFlags</b> member of the <see cref="ACE_HEADER" /> structure of the new ACE.</para>
      <para>For consistency with the Windows 8 Advanced File Permissions UI, applications should specify the CONTAINER_INHERIT_ACE and OBJECT_INHERIT_ACE flags in the <i>AceFlags</i> parameter.</para>
      <para>This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CONTAINER_INHERIT_ACE</b>
                </description>
              </item>
              <item>
                <description>2 (0x2)</description>
              </item>
            </list>
          </description>
          <description>
            <para>The ACE is inherited by the container objects.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INHERIT_ONLY_ACE</b>
                </description>
              </item>
              <item>
                <description>8 (0x8)</description>
              </item>
            </list>
          </description>
          <description>
            <para>The ACE does not apply to the object the ACE is assigned to, but it can be inherited by child objects.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INHERITED_ACE</b>
                </description>
              </item>
              <item>
                <description>16 (0x10)</description>
              </item>
            </list>
          </description>
          <description>
            <para>Indicates an inherited ACE. This flag allows operations that change the security on a tree of objects to modify inherited ACEs while not changing ACEs that were directly applied to the object.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>NO_PROPAGATE_INHERIT_ACE</b>
                </description>
              </item>
              <item>
                <description>4 (0x4)</description>
              </item>
            </list>
          </description>
          <description>
            <para>The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE bits are not propagated to an inherited ACE.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>OBJECT_INHERIT_ACE</b>
                </description>
              </item>
              <item>
                <description>1 (0x1)</description>
              </item>
            </list>
          </description>
          <description>
            <para>The ACE is inherited by non-container objects.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="AccessMask">
      <para>Must be zero for Windows 8 and Windows Server 2012.</para>
    </param>
    <param name="pSid">
      <para>Must be the Everyone SID (S-1-1-0) for Windows 8 and Windows Server 2012.</para>
    </param>
    <param name="pAttributeInfo">
      <para>Specifies the attribute information that will be appended after the SID in the ACE.</para>
    </param>
    <param name="pReturnLength">
      <para>The size, in bytes, of the actual ACL buffer used. If the buffer specified by the <i>pAcl</i> parameter is not big enough, the value of this parameter is the total size required for the ACL buffer.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/standard-access-rights">Standard Access Rights</seealso>
  </member>
  <member name="Windows.AddScopedPolicyIDAce">
    <summary>
      <para>The <b>AddScopedPolicyIDAce</b> function adds a <see cref="SYSTEM_SCOPED_POLICY_ID_ACE" /><a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) to the end of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL). A <b>SYSTEM_SCOPED_POLICY_ID_ACE</b> structure specifies a central access policy (CAP) to be associated with the resource and can be  used during access checks. The set of standard access rights are defined in the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/standard-access-rights">Standard Access Rights</a> topic.</para>
    </summary>
    <param name="pAcl">
      <para>A pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL). This function adds an ACE to this ACL. The value of this parameter cannot be <b>NULL</b>.</para>
    </param>
    <param name="dwAceRevision">
      <para>Specifies the revision level of the ACL being modified. This value can be ACL_REVISION or ACL_REVISION_DS. Use ACL_REVISION_DS if the ACL contains object-specific ACEs.</para>
    </param>
    <param name="AceFlags">
      <para>A set of bit flags that control ACE inheritance. The function sets these flags in the <b>AceFlags</b> member of the <see cref="ACE_HEADER" /> structure of the new ACE.</para>
      <para>For consistency with the Windows 8 Advanced File Permissions UI, applications should specify the CONTAINER_INHERIT_ACE and OBJECT_INHERIT_ACE flags in the <i>AceFlags</i> parameter.</para>
      <para>This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>CONTAINER_INHERIT_ACE</b>
                </description>
              </item>
              <item>
                <description>2 (0x2)</description>
              </item>
            </list>
          </description>
          <description>
            <para>The ACE is inherited by the container objects.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INHERIT_ONLY_ACE</b>
                </description>
              </item>
              <item>
                <description>8 (0x8)</description>
              </item>
            </list>
          </description>
          <description>
            <para>The ACE does not apply to the object the ACE is assigned to, but it can be inherited by child objects.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>INHERITED_ACE</b>
                </description>
              </item>
              <item>
                <description>16 (0x10)</description>
              </item>
            </list>
          </description>
          <description>
            <para>Indicates an inherited ACE. This flag allows operations that change the security on a tree of objects to modify inherited ACEs while not changing ACEs that were directly applied to the object.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>NO_PROPAGATE_INHERIT_ACE</b>
                </description>
              </item>
              <item>
                <description>4 (0x4)</description>
              </item>
            </list>
          </description>
          <description>
            <para>The OBJECT_INHERIT_ACE and CONTAINER_INHERIT_ACE bits are not propagated to an inherited ACE.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>OBJECT_INHERIT_ACE</b>
                </description>
              </item>
              <item>
                <description>1 (0x1)</description>
              </item>
            </list>
          </description>
          <description>
            <para>The ACE is inherited by non-container objects.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="AccessMask">
      <para>Must be zero for Windows 8 and Windows Server 2012.</para>
    </param>
    <param name="pSid">
      <para>A pointer to the SID (S-1-17-*) that identifies the Central Access Policy to be associated with the resource.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/standard-access-rights">Standard Access Rights</seealso>
  </member>
  <member name="Windows.AdjustTokenGroups">
    <summary>
      <para>The <b>AdjustTokenGroups</b> function enables or disables groups already present in the specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a>. Access to TOKEN_ADJUST_GROUPS is required to enable or disable groups in an access token.</para>
    </summary>
    <param name="TokenHandle">
      <para>A handle to the access token that contains the groups to be enabled or disabled. The handle must have TOKEN_ADJUST_GROUPS access to the token. If the <i>PreviousState</i> parameter is not <b>NULL</b>, the handle must also have TOKEN_QUERY access.</para>
    </param>
    <param name="ResetToDefault">
      <para>Boolean value that indicates whether the groups are to be set to their default enabled and disabled states. If this value is <b>TRUE</b>, the groups are set to their default states and the <i>NewState</i> parameter is ignored. If this value is <b>FALSE</b>, the groups are set according to the information pointed to by the <i>NewState</i> parameter.</para>
    </param>
    <param name="NewState">
      <para>A pointer to a
<see cref="TOKEN_GROUPS" /> structure that contains the groups to be enabled or disabled. If the <i>ResetToDefault</i> parameter is <b>FALSE</b>, the function sets each of the groups to the value of that group's SE_GROUP_ENABLED attribute in the <b>TOKEN_GROUPS</b> structure. If <i>ResetToDefault</i> is <b>TRUE</b>, this parameter is ignored.</para>
    </param>
    <param name="BufferLength">
      <para>The size, in bytes, of the buffer pointed to by the <i>PreviousState</i> parameter. This parameter can be zero if the <i>PreviousState</i> parameter is <b>NULL</b>.</para>
    </param>
    <param name="PreviousState">
      <para>A pointer to a buffer that receives a
<see cref="TOKEN_GROUPS" /> structure containing the previous state of any groups the function modifies. That is, if a group has been modified by this function, the group and its previous state are contained in the <b>TOKEN_GROUPS</b> structure referenced by <i>PreviousState</i>. If the <b>GroupCount</b> member of <b>TOKEN_GROUPS</b> is zero, then no groups have been changed by this function. This parameter can be <b>NULL</b>.</para>
      <para>If a buffer is specified but it does not contain enough space to receive the complete list of modified groups, no group states are changed and the function fails. In this case, the function sets the variable pointed to by the <i>ReturnLength</i> parameter to the number of bytes required to hold the complete list of modified groups.</para>
    </param>
    <param name="ReturnLength">
      <para>A pointer to a variable that receives the actual number of bytes needed for the buffer pointed to by the <i>PreviousState</i> parameter. This parameter can be <b>NULL</b> and is ignored if <i>PreviousState</i> is <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The information retrieved in the <i>PreviousState</i> parameter is formatted as a <see cref="TOKEN_GROUPS" /> structure. This means a pointer to the buffer can be passed as the <i>NewState</i> parameter in a subsequent call to the <b>AdjustTokenGroups</b> function, restoring the original state of the groups.</para>
      <para>The <i>NewState</i> parameter can list groups to be changed that are not present in the access token. This does not affect the successful modification of the groups in the token.</para>
      <para>The <b>AdjustTokenGroups</b> function cannot disable groups with the SE_GROUP_MANDATORY attribute in the <see cref="TOKEN_GROUPS" /> structure. Use
<see cref="CreateRestrictedToken" /> instead.</para>
      <para>You cannot enable a group that has the SE_GROUP_USE_FOR_DENY_ONLY attribute.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso cref="AdjustTokenPrivileges" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="CreateRestrictedToken" />
    <seealso cref="GetTokenInformation" />
    <seealso cref="OpenProcessToken" />
    <seealso cref="OpenThreadToken" />
    <seealso cref="SetTokenInformation" />
    <seealso cref="TOKEN_GROUPS" />
  </member>
  <member name="Windows.AdjustTokenPrivileges">
    <summary>
      <para>The <b>AdjustTokenPrivileges</b> function enables or disables privileges in the specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a>. Enabling or disabling privileges in an access token requires TOKEN_ADJUST_PRIVILEGES access.</para>
    </summary>
    <param name="TokenHandle">
      <para>A handle to the access token that contains the privileges to be modified. The handle must have TOKEN_ADJUST_PRIVILEGES access to the token. If the <i>PreviousState</i> parameter is not <b>NULL</b>, the handle must also have TOKEN_QUERY access.</para>
    </param>
    <param name="DisableAllPrivileges">
      <para>Specifies whether the function disables all of the token's privileges. If this value is <b>TRUE</b>, the function disables all privileges and ignores the <i>NewState</i> parameter. If it is <b>FALSE</b>, the function modifies privileges based on the information pointed to by the <i>NewState</i> parameter.</para>
    </param>
    <param name="NewState">
      <para>A pointer to a
<see cref="TOKEN_PRIVILEGES" /> structure that specifies an array of privileges and their attributes. If the <i>DisableAllPrivileges</i> parameter is <b>FALSE</b>, the  <b>AdjustTokenPrivileges</b>  function enables, disables, or removes these privileges for the token. The following table describes the action taken by the <b>AdjustTokenPrivileges</b> function, based on the privilege attribute.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>SE_PRIVILEGE_ENABLED</b>
          </description>
          <description>
            <para>The function enables the privilege.</para>
          </description>
        </item>
        <item>
          <description>
            <b>SE_PRIVILEGE_REMOVED</b>
          </description>
          <description>
            <para>The privilege is removed from the list of privileges in the token. The other privileges in the list are reordered to remain contiguous.</para>
            <para>SE_PRIVILEGE_REMOVED supersedes SE_PRIVILEGE_ENABLED.</para>
            <para>Because the privilege has been removed from the token, attempts to reenable the privilege result in the warning ERROR_NOT_ALL_ASSIGNED as if the privilege had never existed.</para>
            <para>Attempting to remove a privilege that does not exist in the token results in ERROR_NOT_ALL_ASSIGNED being returned.</para>
            <para>Privilege checks for removed privileges result in STATUS_PRIVILEGE_NOT_HELD.  Failed privilege check auditing occurs as normal.</para>
            <para>The removal of the privilege is irreversible, so the name of the removed privilege is not included in the <i>PreviousState</i> parameter after a call to <b>AdjustTokenPrivileges</b>.</para>
            <para>
              <b>Windows XP with SP1:  </b>The function cannot remove privileges. This value is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <b>None</b>
          </description>
          <description>
            <para>The function disables the privilege.</para>
          </description>
        </item>
      </list>
      <para>If <i>DisableAllPrivileges</i> is <b>TRUE</b>, the function ignores this parameter.</para>
    </param>
    <param name="BufferLength">
      <para>Specifies the size, in bytes, of the buffer pointed to by the <i>PreviousState</i> parameter. This parameter can be zero if the <i>PreviousState</i> parameter is <b>NULL</b>.</para>
    </param>
    <param name="PreviousState">
      <para>A pointer to a buffer that the function fills with a <see cref="TOKEN_PRIVILEGES" /> structure that contains the previous state of any privileges that the function modifies.  That is, if a privilege has been modified by this function, the privilege and its previous state are contained in the <b>TOKEN_PRIVILEGES</b> structure referenced by <i>PreviousState</i>. If the <b>PrivilegeCount</b> member of <b>TOKEN_PRIVILEGES</b> is zero, then no privileges have been changed by this function. This parameter can be <b>NULL</b>.</para>
      <para>If you specify a buffer that is too small to receive the complete list of modified privileges, the function fails and does not adjust any privileges. In this case, the function sets the variable pointed to by the <i>ReturnLength</i> parameter to the number of bytes required to hold the complete list of modified privileges.</para>
    </param>
    <param name="ReturnLength">
      <para>A pointer to a variable that receives the required size, in bytes, of the buffer pointed to by the <i>PreviousState</i> parameter. This parameter can be <b>NULL</b> if <i>PreviousState</i> is <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero. To determine whether the function adjusted all of the specified privileges, call
<see cref="GetLastError" />, which returns one of the following values when the function succeeds:</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_SUCCESS</b>
            </para>
          </description>
          <description>
            <para>The function adjusted all specified privileges.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ALL_ASSIGNED</b>
            </para>
          </description>
          <description>
            <para>The token does not have one or more of the privileges specified in the <i>NewState</i> parameter. The function may succeed with this error value even if no privileges were adjusted. The <i>PreviousState</i> parameter indicates the privileges that were adjusted.</para>
          </description>
        </item>
      </list>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>AdjustTokenPrivileges</b> function cannot add new privileges to the access token. It can only enable or disable the token's existing privileges. To determine the token's privileges, call the
<see cref="GetTokenInformation" /> function.</para>
      <para>The <i>NewState</i> parameter can specify privileges that the token does not have, without causing the function to fail. In this case, the function adjusts the privileges that the token does have and ignores the other privileges so that the function succeeds. Call the <see cref="GetLastError" /> function to determine whether the function adjusted all of the specified privileges. The <i>PreviousState</i> parameter indicates the privileges that were adjusted.</para>
      <para>The <i>PreviousState</i> parameter retrieves a
<see cref="TOKEN_PRIVILEGES" /> structure that contains the original state of the adjusted privileges. To restore the original state, pass the <i>PreviousState</i> pointer as the <i>NewState</i> parameter in a subsequent call to the <b>AdjustTokenPrivileges</b> function.</para>
      <h4>Examples</h4>
      <para>For an example that uses this function, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/enabling-and-disabling-privileges-in-c--">Enabling and Disabling Privileges</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso cref="AdjustTokenGroups" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="GetTokenInformation" />
    <seealso cref="OpenProcessToken" />
    <seealso cref="OpenThreadToken" />
    <seealso cref="SetTokenInformation" />
    <seealso cref="TOKEN_PRIVILEGES" />
  </member>
  <member name="Windows.AllocateAndInitializeSid">
    <summary>
      <para>The <b>AllocateAndInitializeSid</b> function allocates and initializes a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) with up to eight subauthorities.</para>
    </summary>
    <param name="pIdentifierAuthority">
      <para>A pointer to a
<see cref="SID_IDENTIFIER_AUTHORITY" /> structure. This structure provides the top-level identifier authority value to set in the SID.</para>
    </param>
    <param name="nSubAuthorityCount">
      <para>Specifies the number of subauthorities to place in the SID. This parameter also identifies how many of the subauthority parameters have meaningful values. This parameter must contain a value from 1 to 8.</para>
      <para>For example, a value of 3 indicates that the subauthority values specified by the <i>dwSubAuthority0</i>, <i>dwSubAuthority1</i>, and <i>dwSubAuthority2</i> parameters have meaningful values and to ignore the remainder.</para>
    </param>
    <param name="nSubAuthority0">
      <para>Subauthority value to place in the SID.</para>
    </param>
    <param name="nSubAuthority1">
      <para>Subauthority value to place in the SID.</para>
    </param>
    <param name="nSubAuthority2">
      <para>Subauthority value to place in the SID.</para>
    </param>
    <param name="nSubAuthority3">
      <para>Subauthority value to place in the SID.</para>
    </param>
    <param name="nSubAuthority4">
      <para>Subauthority value to place in the SID.</para>
    </param>
    <param name="nSubAuthority5">
      <para>Subauthority value to place in the SID.</para>
    </param>
    <param name="nSubAuthority6">
      <para>Subauthority value to place in the SID.</para>
    </param>
    <param name="nSubAuthority7">
      <para>Subauthority value to place in the SID.</para>
    </param>
    <param name="pSid">
      <para>A pointer to a variable that receives the pointer to the allocated and initialized
<see cref="SID" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>A SID allocated with the <b>AllocateAndInitializeSid</b> function must be freed by using the <see cref="FreeSid" /> function.</para>
      <para>This function creates a SID with a 32-bit RID value. For applications that require longer RID values, use
<see cref="CreateWellKnownSid" />.</para>
      <h4>Examples</h4>
      <para>For an example that uses this function, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/creating-a-security-descriptor-for-a-new-object-in-c--">Creating a Security Descriptor for a New Object</a> or <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/taking-object-ownership-in-c--">Taking Object Ownership</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="FreeSid" />
    <seealso cref="GetSidIdentifierAuthority" />
    <seealso cref="InitializeSid" />
    <seealso cref="SID_IDENTIFIER_AUTHORITY" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/well-known-sids">Well-known SIDs</seealso>
  </member>
  <member name="Windows.AllocateLocallyUniqueId">
    <summary>
      <para>The <b>AllocateLocallyUniqueId</b> function allocates a locally unique identifier (<a href="https://docs.microsoft.com//windows/desktop/SecGloss/l-gly">LUID</a>).</para>
    </summary>
    <param name="Luid">
      <para>A pointer to a <see cref="LUID" /> structure that receives the allocated LUID.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The allocated <see cref="LUID" /> is unique to the local system only, and uniqueness is guaranteed only until the system is next restarted.</para>
      <para>The allocated <see cref="LUID" /> is guaranteed  to be nonzero if this function succeeds.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="LookupPrivilegeValue" />
  </member>
  <member name="Windows.AreAllAccessesGranted">
    <summary>
      <para>The <b>AreAllAccessesGranted</b> function checks whether a set of requested access rights has been granted. The access rights are represented as bit flags in an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a>.</para>
    </summary>
    <param name="GrantedAccess">
      <para>An access mask that specifies the access rights that have been granted.</para>
    </param>
    <param name="DesiredAccess">
      <para>An access mask that specifies the access rights that have been requested. This mask must have been mapped from generic to specific and standard access rights, usually by calling the
<see cref="MapGenericMask" /> function.</para>
    </param>
    <returns>
      <para>If all requested access rights have been granted, the return value is nonzero.</para>
      <para>If not all requested access rights have been granted, the return value is zero.</para>
    </returns>
    <remarks>
      <para>The <b>AreAllAccessesGranted</b> function is commonly used by a server application to check the access rights of a client attempting to gain access to an object. When the bits set in the <i>DesiredAccess</i> parameter match the bits set in the <i>GrantedAccess</i> parameter, all requested rights have been granted.</para>
    </remarks>
    <seealso cref="AccessCheck" />
    <seealso cref="AreAnyAccessesGranted" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control Overview</seealso>
    <seealso cref="MapGenericMask" />
  </member>
  <member name="Windows.AreAnyAccessesGranted">
    <summary>
      <para>The <b>AreAnyAccessesGranted</b> function tests whether any of a set of requested access rights has been granted. The access rights are represented as bit flags in an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a>.</para>
    </summary>
    <param name="GrantedAccess">
      <para>Specifies the granted access mask.</para>
    </param>
    <param name="DesiredAccess">
      <para>Specifies the access mask to be requested. This mask must have been mapped from generic to specific and standard access rights, usually by calling the
<see cref="MapGenericMask" /> function.</para>
    </param>
    <returns>
      <para>If any of the requested access rights have been granted, the return value is nonzero.</para>
      <para>If none of the requested access rights have been granted, the return value is zero.</para>
    </returns>
    <remarks>
      <para>The <b>AreAnyAccessesGranted</b> function is often used by a server application to check the access rights of a client attempting to gain access to an object. When any of the bits set in the <i>DesiredAccess</i> parameter match the bits set in the <i>GrantedAccess</i> parameter, at least one of the requested access rights has been granted.</para>
    </remarks>
    <seealso cref="AccessCheck" />
    <seealso cref="AreAllAccessesGranted" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control Overview</seealso>
    <seealso cref="MapGenericMask" />
  </member>
  <member name="Windows.CheckTokenCapability">
    <summary>
      <para>The <b>CheckTokenCapability</b> function checks the capabilities of a given token.</para>
    </summary>
    <param name="TokenHandle">
      <para>A handle to an access token. The handle must have TOKEN_QUERY access to the token. The token must be an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a>.</para>
      <para>If <i>TokenHandle</i> is <b>NULL</b>, <b>CheckTokenCapability</b> uses the impersonation token of the calling thread. If the thread is not impersonating, the function duplicates the thread's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> to create an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a>.</para>
    </param>
    <param name="CapabilitySidToCheck">
      <para>A pointer to a capability <see cref="SID" /> structure. The <b>CheckTokenCapability</b> function checks the capabilities of this access token.</para>
    </param>
    <param name="HasCapability">
      <para>Receives the results of the check. If the access token has the capability, it returns <b>TRUE</b>, otherwise, it returns <b>FALSE</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" /></para>
    </returns>
  </member>
  <member name="Windows.CheckTokenMembership">
    <summary>
      <para>The <b>CheckTokenMembership</b> function determines whether a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) is enabled in an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a>. If you want to determine group membership for app container tokens, you need to use the <see cref="CheckTokenMembershipEx" /> function.</para>
    </summary>
    <param name="TokenHandle">
      <para>A handle to an access token. The handle must have TOKEN_QUERY access to the token. The token must be an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a>.</para>
      <para>If <i>TokenHandle</i> is <b>NULL</b>, <b>CheckTokenMembership</b> uses the impersonation token of the calling thread. If the thread is not impersonating, the function duplicates the thread's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> to create an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a>.</para>
    </param>
    <param name="SidToCheck">
      <para>A pointer to a
<see cref="SID" /> structure. The <b>CheckTokenMembership</b> function checks for the presence of this SID in the user and group SIDs of the access token.</para>
    </param>
    <param name="IsMember">
      <para>A pointer to a variable that receives the results of the check. If the SID is present and has the SE_GROUP_ENABLED attribute, <i>IsMember</i> returns <b>TRUE</b>; otherwise, it returns <b>FALSE</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>CheckTokenMembership</b> function simplifies the process of determining whether a SID is both present and enabled in an access token.</para>
      <para>Even if a SID is present in the token, the system may not use the SID in an access check. The SID may be disabled or have the <b>SE_GROUP_USE_FOR_DENY_ONLY</b> attribute. The system uses only enabled SIDs to grant access when performing an access check. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/sid-attributes-in-an-access-token">SID Attributes in an Access Token</a>.</para>
      <para>If <i>TokenHandle</i> is a restricted token, or if <i>TokenHandle</i> is <b>NULL</b> and the current effective token of the calling thread is a restricted token, <b>CheckTokenMembership</b> also checks whether the SID is present in the list of restricting SIDs.</para>
      <h4>Examples</h4>
      <para>The following example shows checking a token for membership in the Administrators local group.</para>
      <code>BOOL IsUserAdmin(VOID)
/*++
Routine Description: This routine returns TRUE if the caller's
process is a member of the Administrators local group. Caller is NOT
expected to be impersonating anyone and is expected to be able to
open its own process and process token.
Arguments: None.
Return Value:
   TRUE - Caller has Administrators local group.
   FALSE - Caller does not have Administrators local group. --
*/
{
BOOL b;
SID_IDENTIFIER_AUTHORITY NtAuthority = SECURITY_NT_AUTHORITY;
PSID AdministratorsGroup;
b = AllocateAndInitializeSid(
    &amp;amp;amp;amp;amp;amp;NtAuthority,
    2,
    SECURITY_BUILTIN_DOMAIN_RID,
    DOMAIN_ALIAS_RID_ADMINS,
    0, 0, 0, 0, 0, 0,
    &amp;amp;amp;amp;amp;amp;AdministratorsGroup);
if(b)
{
    if (!CheckTokenMembership( NULL, AdministratorsGroup, &amp;amp;amp;amp;amp;amp;b))
    {
         b = FALSE;
    }
    FreeSid(AdministratorsGroup);
}

return(b);
}

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso cref="AccessCheck" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="CheckTokenMembershipEx" />
    <seealso cref="CreateRestrictedToken" />
  </member>
  <member name="Windows.CheckTokenMembershipEx">
    <summary>
      <para>The <b>CheckTokenMembershipEx</b> function determines whether the specified SID is enabled in the specified token.</para>
    </summary>
    <param name="TokenHandle">
      <para>A handle to an access token. If present, this token is checked for the SID. If not present, then the current effective token is used. This must be an impersonation token.</para>
    </param>
    <param name="SidToCheck">
      <para>A pointer to a SID structure. The function checks for the presence of this SID in the presence of the token.</para>
    </param>
    <param name="Flags">
      <para>Flags that affect the behavior of the function. Currently the only valid flag is CTMF_INCLUDE_APPCONTAINER which allows app containers to pass the call as long as the other requirements of the token are met, such as the group specified is present and enabled.</para>
    </param>
    <param name="IsMember">
      <para>
        <b>TRUE</b> if the SID is enabled in the token; otherwise, <b>FALSE</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ConvertToAutoInheritPrivateObjectSecurity">
    <summary>
      <para>The <b>ConvertToAutoInheritPrivateObjectSecurity</b> function converts a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> and its <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control lists</a> (ACLs) to a format that supports automatic propagation of inheritable <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs).</para>
    </summary>
    <param name="ParentDescriptor">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> for the parent container of the object. If there is no parent container, this parameter is <b>NULL</b>.</para>
    </param>
    <param name="CurrentSecurityDescriptor">
      <para>A pointer to the current security descriptor of the object.</para>
    </param>
    <param name="NewSecurityDescriptor">
      <para>A pointer to a variable that receives a pointer to the newly allocated <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a>. It is the caller's responsibility to call the
<see cref="DestroyPrivateObjectSecurity" /> function to free this security descriptor.</para>
    </param>
    <param name="ObjectType">
      <para>A pointer to a
<see cref="GUID" /> structure that identifies the type of object associated with the <i>CurrentSecurityDescriptor</i> parameter. If the object does not have a GUID, this parameter must be <b>NULL</b>.</para>
    </param>
    <param name="IsDirectoryObject">
      <para>If <b>TRUE</b>, the new object is a container and can contain other objects. If <b>FALSE</b>, the new object is not a container.</para>
    </param>
    <param name="GenericMapping">
      <para>A pointer to a
<see cref="GENERIC_MAPPING" /> structure that specifies the mapping from each generic right to specific rights for the object.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>ConvertToAutoInheritPrivateObjectSecurity</b> function attempts to determine whether the ACEs in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) of the current security descriptor were inherited from the parent security descriptor. The function passes the <i>ParentDescriptor</i> parameter to the
<see cref="CreatePrivateObjectSecurityEx" /> function to get ACLs that contain only inherited ACEs. Then it compares these ACEs to the ACEs in the original security descriptor to determine which of the original ACEs were inherited. The ACEs do not need to match one-to-one. For instance, an ACE that allows read and write access to a trustee can be equivalent to two ACEs: an ACE that allows read access and an ACE that allows write access.</para>
      <para>Any ACEs in the original security descriptor that are equivalent to the ACEs inherited from the parent security descriptor are marked with the INHERITED_ACE flag and added to the new security descriptor. All other ACEs in the original security descriptor are added to the new security descriptor as noninherited ACEs.</para>
      <para>If the original DACL does not have any inherited ACEs, the function sets the SE_DACL_PROTECTED flag in the control bits of the new security descriptor. Similarly, the SE_SACL_PROTECTED flag is set if none of the ACEs in the SACL is inherited.</para>
      <para>For DACLs that have inherited ACEs, the function reorders the ACEs into two groups. The first group has ACEs that were directly applied to the object. The second group has inherited ACEs. This ordering ensures that noninherited ACEs have precedence over inherited ACEs. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/order-of-aces-in-a-dacl">Order of ACEs in a DACL</a>.</para>
      <para>The function sets the SE_DACL_AUTO_INHERITED and SE_SACL_AUTO_INHERITED flags in the control bits of the new security descriptor.</para>
      <para>The function does not change the ordering of access-allowed ACEs in relation to access-denied ACEs in the DACL because to do so would change the semantics of the resulting security descriptor. If the function cannot convert the DACL without changing the semantics, it leaves the DACL unchanged and sets the SE_DACL_PROTECTED flag.</para>
      <para>The new security descriptor has the same owner and primary group as the original security descriptor.</para>
      <para>The new security descriptor is equivalent to the original security descriptor, so the caller needs no access rights or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a> to update the security descriptor to the new format.</para>
      <para>This function works with ACL_REVISION and ACL_REVISION_DS ACLs.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso cref="CreatePrivateObjectSecurityEx" />
    <seealso cref="DestroyPrivateObjectSecurity" />
    <seealso cref="GENERIC_MAPPING" />
    <seealso cref="GUID" />
  </member>
  <member name="Windows.CopySid">
    <summary>
      <para>The <b>CopySid</b> function copies a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) to a buffer.</para>
    </summary>
    <param name="nDestinationSidLength">
      <para>Specifies the length, in bytes, of the buffer receiving the copy of the SID.</para>
    </param>
    <param name="pDestinationSid">
      <para>A pointer to a buffer that receives a copy of the source
<see cref="SID" /> structure.</para>
    </param>
    <param name="pSourceSid">
      <para>A pointer to a <see cref="SID" /> structure that the function copies to the buffer pointed to by the <i>pDestinationSid</i> parameter.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>An application can use the <b>CopySid</b> function to make a copy of a SID in an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a> (for example, in a <see cref="TOKEN_GROUPS" /> structure) to use in an access control entry (<a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">ACE</a>).</para>
      <h4>Examples</h4>
      <para>For an example that uses this function, see <a href="https://docs.microsoft.com//previous-versions/aa446670(v=vs.85)">Getting the Logon SID</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso cref="AllocateAndInitializeSid" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="EqualSid" />
    <seealso cref="GetLengthSid" />
    <seealso cref="GetSidIdentifierAuthority" />
    <seealso cref="GetSidLengthRequired" />
    <seealso cref="GetSidSubAuthority" />
    <seealso cref="GetSidSubAuthorityCount" />
    <seealso cref="InitializeSid" />
    <seealso cref="IsValidSid" />
    <seealso cref="SID" />
  </member>
  <member name="Windows.CreatePrivateObjectSecurity">
    <summary>
      <para>The <b>CreatePrivateObjectSecurity</b> function allocates and initializes a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a> for a new private object. A protected server calls this function when it creates a new private object.</para>
      <para>To specify the object type GUID of the new object or control how <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) are inherited, use the
<see cref="CreatePrivateObjectSecurityEx" /> function.</para>
    </summary>
    <param name="ParentDescriptor">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> for the parent directory in which a new object is being created. If there is no parent directory, this parameter can be <b>NULL</b>.</para>
    </param>
    <param name="CreatorDescriptor">
      <para>A pointer to a security descriptor provided by the creator of the object. If the object's creator does not explicitly pass security information for the new object, this parameter is intended to be <b>NULL</b>.</para>
    </param>
    <param name="NewDescriptor">
      <para>A pointer to a variable that receives a pointer to the newly allocated self-relative security descriptor. The caller must call the
<see cref="DestroyPrivateObjectSecurity" /> function to free this security descriptor.</para>
    </param>
    <param name="IsDirectoryObject">
      <para>Specifies whether the new object is a container. A value of <b>TRUE</b> indicates the object contains other objects, such as a directory.</para>
    </param>
    <param name="Token">
      <para>A handle to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a> for the client <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> on whose behalf the object is being created. If this is an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a>, it must be at SecurityIdentification level or higher. For a full description of the SecurityIdentification impersonation level, see the
<see cref="SECURITY_IMPERSONATION_LEVEL" /> enumerated type.</para>
      <para>A client token is used to retrieve default security information for the new object, such as its default owner, primary group, and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a>. The token must be open for <b>TOKEN_QUERY</b> access.</para>
      <para>If all of the following conditions are true, then the handle must be opened for <b>TOKEN_DUPLICATE</b> access in addition to <b>TOKEN_QUERY</b> access.</para>
      <list type="bullet">
        <item>
          <description>The token handle refers to a primary token.</description>
        </item>
        <item>
          <description>The security descriptor of the token contains one or more ACEs with the <b>OwnerRights</b> SID.</description>
        </item>
        <item>
          <description>A security descriptor is specified for the <i>CreatorDescriptor</i> parameter.</description>
        </item>
        <item>
          <description>The caller of this function does not set the <b>SEF_AVOID_OWNER_RESTRICTION</b> flag in the <i>AutoInheritFlags</i> parameter.</description>
        </item>
      </list>
    </param>
    <param name="GenericMapping">
      <para>A pointer to a
<see cref="GENERIC_MAPPING" /> structure that specifies the mapping from each generic right to specific rights for the object.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) is specified in the
<see cref="SECURITY_DESCRIPTOR" /> specified by the <i>CreatorDescriptor</i> parameter, the <i>Token</i> parameter must have the SE_SECURITY_NAME privilege enabled. The <b>CreatePrivateObjectSecurity</b> function checks this privilege and may generate audits during the process.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control Overview</seealso>
    <seealso cref="CreatePrivateObjectSecurityEx" />
    <seealso cref="DestroyPrivateObjectSecurity" />
    <seealso cref="GENERIC_MAPPING" />
    <seealso cref="GetPrivateObjectSecurity" />
    <seealso cref="GetTokenInformation" />
    <seealso cref="OpenProcessToken" />
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso cref="SECURITY_IMPERSONATION_LEVEL" />
    <seealso cref="SetPrivateObjectSecurity" />
  </member>
  <member name="Windows.CreatePrivateObjectSecurityEx">
    <summary>
      <para>The <b>CreatePrivateObjectSecurityEx</b> function allocates and initializes a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a> for a new private object created by the resource manager calling this function.</para>
    </summary>
    <param name="ParentDescriptor">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> for the parent container of the object. If there is no parent container, this parameter is <b>NULL</b>.</para>
    </param>
    <param name="CreatorDescriptor">
      <para>A pointer to a security descriptor provided by the creator of the object. If the object's creator does not explicitly pass security information for the new object, this parameter can be <b>NULL</b>. Alternatively, this parameter can point to a default security descriptor.</para>
    </param>
    <param name="NewDescriptor">
      <para>A pointer to a variable that receives a pointer to the newly allocated self-relative security descriptor. When you have finished using the security descriptor, free it by calling the
<see cref="DestroyPrivateObjectSecurity" /> function.</para>
    </param>
    <param name="ObjectType">
      <para>A pointer to a
<see cref="GUID" /> structure that identifies the type of object associated with <i>NewDescriptor</i>. If the object does not have a GUID, set <i>ObjectType</i> to <b>NULL</b>.</para>
    </param>
    <param name="IsContainerObject">
      <para>Specifies whether the new object can contain other objects. A value of <b>TRUE</b> indicates that the new object is a container. A value of <b>FALSE</b> indicates that the new object is not a container.</para>
    </param>
    <param name="AutoInheritFlags">
      <para>A set of bit flags that control how <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) are inherited from <i>ParentDescriptor</i>. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_AVOID_OWNER_CHECK</b>
                </description>
              </item>
              <item>
                <description>0x10</description>
              </item>
            </list>
          </description>
          <description>
            <para>The function does not check the validity of the owner in the resultant <i>NewDescriptor</i> as described in Remarks below. If the SEF_AVOID_PRIVILEGE_CHECK flag is also set, the <i>Token</i> parameter can be <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_AVOID_OWNER_RESTRICTION</b>
                </description>
              </item>
              <item>
                <description>0x1000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Any restrictions  specified by the
<i>ParentDescriptor</i> that would limit the caller's ability to specify
a DACL in the <i>CreatorDescriptor</i> are ignored.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_AVOID_PRIVILEGE_CHECK</b>
                </description>
              </item>
              <item>
                <description>0x08</description>
              </item>
            </list>
          </description>
          <description>
            <para>The function does not perform privilege checking. If the SEF_AVOID_OWNER_CHECK flag is also set, the <i>Token</i> parameter can be <b>NULL</b>. This flag is useful while implementing automatic inheritance to avoid checking privileges on each child updated.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_DACL_AUTO_INHERIT</b>
                </description>
              </item>
              <item>
                <description>0x01</description>
              </item>
            </list>
          </description>
          <description>
            <para>The new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) contains ACEs inherited from the DACL of
<i>ParentDescriptor</i>, as well as any explicit ACEs specified in the DACL of
<i>CreatorDescriptor</i>. If this flag is not set, the new DACL does not inherit ACEs.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT</b>
                </description>
              </item>
              <item>
                <description>0x04</description>
              </item>
            </list>
          </description>
          <description>
            <i>CreatorDescriptor</i> is the default descriptor for the type of object specified by <i>ObjectType</i>. As such,
<i>CreatorDescriptor</i> is ignored if
<i>ParentDescriptor</i> has any object-specific ACEs for the type of object specified by the <i>ObjectType</i> parameter. If no such ACEs are inherited,
<i>CreatorDescriptor</i> is handled as though this flag were not specified.
</description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_DEFAULT_GROUP_FROM_PARENT</b>
                </description>
              </item>
              <item>
                <description>0x40</description>
              </item>
            </list>
          </description>
          <description>
            <para>The group of <i>NewDescriptor</i> defaults to the group from <i>ParentDescriptor</i>. If not set, the group of <i>NewDescriptor</i> defaults to the group of the token specified by the <i>Token</i> parameter. The group of the token is specified in the token itself. In either case, if the <i>CreatorDescriptor</i> parameter is not <b>NULL</b>, the <i>NewDescriptor</i> group is set to the group from <i>CreatorDescriptor</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_DEFAULT_OWNER_FROM_PARENT</b>
                </description>
              </item>
              <item>
                <description>0x20</description>
              </item>
            </list>
          </description>
          <description>
            <para>The owner of <i>NewDescriptor</i> defaults to the owner from <i>ParentDescriptor</i>. If not set, the owner of <i>NewDescriptor</i> defaults to the owner of the token specified by the <i>Token</i> parameter. The owner of the token is specified in the token itself. In either case, if the <i>CreatorDescriptor</i> parameter is not <b>NULL</b>, the <i>NewDescriptor</i> owner is set to the owner from <i>CreatorDescriptor</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_MACL_NO_EXECUTE_UP</b>
                </description>
              </item>
              <item>
                <description>0x400</description>
              </item>
            </list>
          </description>
          <description>
            <para>When this flag is set, the mandatory label ACE in <i>CreatorDescriptor</i> is not used to create a mandatory label ACE in <i>NewDescriptor</i>. Instead, a new <see cref="SYSTEM_MANDATORY_LABEL_ACE" /> with an access mask of <b>SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP</b> and the SID from the token's integrity SID is added to <i>NewDescriptor</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_MACL_NO_READ_UP</b>
                </description>
              </item>
              <item>
                <description>0x200</description>
              </item>
            </list>
          </description>
          <description>
            <para>When this flag is set, the mandatory label ACE in <i>CreatorDescriptor</i> is not used to create a mandatory label ACE in <i>NewDescriptor</i>. Instead, a new <see cref="SYSTEM_MANDATORY_LABEL_ACE" /> with an access mask of <b>SYSTEM_MANDATORY_LABEL_NO_READ_UP</b> and the SID from the token's integrity SID is added to <i>NewDescriptor</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_MACL_NO_WRITE_UP</b>
                </description>
              </item>
              <item>
                <description>0x100</description>
              </item>
            </list>
          </description>
          <description>
            <para>When this flag is set, the mandatory label ACE in <i>CreatorDescriptor</i> is not used to create a mandatory label ACE in <i>NewDescriptor</i>. Instead, a new <see cref="SYSTEM_MANDATORY_LABEL_ACE" /> with an access mask of <b>SYSTEM_MANDATORY_LABEL_NO_WRITE_UP</b> and the SID from the token's integrity SID is added to <i>NewDescriptor</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_SACL_AUTO_INHERIT</b>
                </description>
              </item>
              <item>
                <description>0x02</description>
              </item>
            </list>
          </description>
          <description>
            <para>The new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) contains ACEs inherited from the SACL of
<i>ParentDescriptor</i>, as well as any explicit ACEs specified in the SACL of
<i>CreatorDescriptor</i>. If this flag is not set, the new SACL does not inherit ACEs.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="Token">
      <para>A handle to the access token for the client process on whose behalf the object is being created. If this is an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a>, it must be at SecurityIdentification level or higher. For a full description of the SecurityIdentification impersonation level, see the
<see cref="SECURITY_IMPERSONATION_LEVEL" /> enumerated type.</para>
      <para>The client token contains default security information, such as the default owner, primary group, and DACL. The function uses these defaults if the information is not in the input security descriptors. The token must be open for <b>TOKEN_QUERY</b> access.</para>
      <para>If all of the following conditions are true, then the handle must be opened for <b>TOKEN_DUPLICATE</b> access in addition to <b>TOKEN_QUERY</b> access.</para>
      <list type="bullet">
        <item>
          <description>The token handle refers to a primary token.</description>
        </item>
        <item>
          <description>The security descriptor of the token contains one or more ACEs with the <b>OwnerRights</b> SID.</description>
        </item>
        <item>
          <description>A security descriptor is specified for the <i>CreatorDescriptor</i> parameter.</description>
        </item>
        <item>
          <description>The caller of this function does not set the <b>SEF_AVOID_OWNER_RESTRICTION</b> flag in the <i>AutoInheritFlags</i> parameter.</description>
        </item>
      </list>
    </param>
    <param name="GenericMapping">
      <para>A pointer to a
<see cref="GENERIC_MAPPING" /> structure that specifies the mapping from each generic right to specific rights for the object.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />. Some of the extended error codes and their meanings are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_OWNER</b>
            </para>
          </description>
          <description>
            <para>The function cannot retrieve an owner for the new security descriptor or the SID cannot be assigned as an owner. This occurs when validating the owner SID against the passed-in token.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PRIMARY_GROUP</b>
            </para>
          </description>
          <description>
            <para>The function cannot retrieve a primary group for the new security descriptor.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_TOKEN</b>
            </para>
          </description>
          <description>
            <para>The function received <b>NULL</b> instead of a token for owner validation or privilege checking.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PRIVILEGE_NOT_HELD</b>
            </para>
          </description>
          <description>
            <para>A SACL is being set, SEF_AVOID_PRIVILEGE_CHECK was not passed in, and the token passed in did not have SE_SECURITY_NAME enabled.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<see cref="CreatePrivateObjectSecurity" /> function is identical to calling the <b>CreatePrivateObjectSecurityEx</b> function with <i>ObjectType</i> set to <b>NULL</b> and <i>AutoInheritFlags</i> set to zero.</para>
      <para>The <i>AutoInheritFlags</i> parameter is distinct from the similarly named bits in the <b>Control</b> member of the
<see cref="SECURITY_DESCRIPTOR" /> structure. For an explanation of the control bits, see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</a>.</para>
      <para>If <i>AutoInheritFlags</i> specifies the SEF_DACL_AUTO_INHERIT bit, the function applies the following rules to the DACL in the new security descriptor:</para>
      <list type="bullet">
        <item>
          <description>The SE_DACL_AUTO_INHERITED flag is set in the <b>Control</b> member of the new security descriptor.</description>
        </item>
        <item>
          <description>The DACL of the new security descriptor inherits ACEs from the <i>ParentDescriptor</i> regardless of whether <i>CreatorDescriptor</i> is the default security descriptor or was explicitly specified by the creator. The new DACL is a combination of the parent and creator DACLs as defined by the rules of inheritance.</description>
        </item>
        <item>
          <description>Inherited ACEs are marked as INHERITED_ACE.</description>
        </item>
      </list>
      <para>If <i>AutoInheritFlags</i> specifies the SEF_SACL_AUTO_INHERIT bit, the function applies similar rules to the new SACL.</para>
      <para>For both DACLs and SACLs, certain types of ACEs in <i>ParentDescriptor</i> and <i>CreatorDescriptor</i> will be manipulated and possibly replaced by two ACEs in <i>NewDescriptor</i>. Specifically, an inheritable ACE that contains at least one of the following mappable elements may result in two ACEs in the output security descriptor. Mappable elements include:</para>
      <list type="bullet">
        <item>
          <description>Generic access rights in the ACCESS_MASK</description>
        </item>
        <item>
          <description>Creator Owner SID or Creator Group SID as the ACE subject identifier</description>
        </item>
      </list>
      <para>ACEs with either of the mappable elements mentioned previously will result in the following ACEs in <i>NewDescriptor</i>:</para>
      <list type="bullet">
        <item>
          <description>An ACE that is a copy of the original, but with the INHERIT_ONLY flag set. However, this ACE will not be created if either of the following two conditions exist:<list type="bullet"><item><description>The <i>IsContainerObject</i> parameter is <b>FALSE</b>. Inheritable ACEs are meaningless on noncontainer objects.</description></item><item><description>The original ACE contains the NO_PROPAGATE_INHERIT flag. The original ACE is intended to be inherited as an effective ACE on children, but not inheritable below those children.</description></item></list></description>
        </item>
        <item>
          <description>An effective ACE in which the INHERITED_ACE bit is turned on and the generic elements are mapped to specific elements, including:<list type="bullet"><item><description>Generic access rights are replaced by the corresponding standard and specific access rights indicated in the input <i>GenericMapping</i>.</description></item><item><description>Creator Owner SID is replaced with the Owner in the resultant <i>NewDescriptor</i></description></item><item><description>Creator Group SID is replaced with the Group in the resultant <i>NewDescriptor</i></description></item></list></description>
        </item>
      </list>
      <para>If <i>AutoInheritFlags</i> does not specify the SEF_AVOID_OWNER_CHECK bit, owner validity checking is performed. The Owner in the resultant <i>NewDescriptor</i> must be a legally formed SID, and either must match the TokenUser in <i>Token</i> or match a group in the TokenGroups in <i>Token</i> where the attributes on the group must include SE_GROUP_OWNER, and must not include SE_GROUP_USE_FOR_DENY_ONLY.</para>
      <para>Callers that do not have access to the token of the client that will ultimately be setting the owner may choose to skip owner validation checking.</para>
      <para>To create a security descriptor for a new object, call <b>CreatePrivateObjectSecurityEx</b> with <i>ParentDescriptor</i> set to the security descriptor of the parent container and <i>CreatorDescriptor</i> set to the security descriptor proposed by the creator of the object.</para>
      <para>If the <i>CreatorDescriptor</i> security descriptor contains a SACL, <i>Token</i> must have the SE_SECURITY_NAME privilege enabled or the caller must specify the SEF_AVOID_PRIVILEGE_CHECK flag in <i>AutoInheritFlags</i>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/win32/api/securitybaseapi/#functions">Client/Server Access Control Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control Overview</seealso>
    <seealso cref="CreatePrivateObjectSecurity" />
    <seealso cref="DestroyPrivateObjectSecurity" />
    <seealso cref="GENERIC_MAPPING" />
    <seealso cref="GUID" />
    <seealso cref="GetTokenInformation" />
    <seealso cref="OpenProcessToken" />
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</seealso>
    <seealso cref="SECURITY_IMPERSONATION_LEVEL" />
    <seealso cref="SetPrivateObjectSecurityEx" />
  </member>
  <member name="Windows.CreatePrivateObjectSecurityWithMultipleInheritance">
    <summary>
      <para>The <b>CreatePrivateObjectSecurityWithMultipleInheritance</b> function allocates and initializes a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a> for a new private object created by the resource manager calling this function. This function supports private objects (such as Directory Service objects with attached auxiliary classes) composed of multiple object types or classes.</para>
    </summary>
    <param name="ParentDescriptor">
      <para>A pointer to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> for the parent container of the object. If there is no parent container, this parameter is <b>NULL</b>.</para>
    </param>
    <param name="CreatorDescriptor">
      <para>A pointer to a security descriptor provided by the creator of the object. If the object's creator does not explicitly pass security information for the new object, this parameter can be <b>NULL</b>. Alternatively, this parameter can point to a default security descriptor.</para>
    </param>
    <param name="NewDescriptor">
      <para>A pointer to a variable to receive a pointer to the newly allocated self-relative security descriptor. When you have finished using the security descriptor, free it by calling the
<see cref="DestroyPrivateObjectSecurity" /> function.</para>
    </param>
    <param name="ObjectTypes">
      <para>An array of pointers to <see cref="GUID" /> structures that identify the object types or classes of the object associated with <i>NewDescriptor</i>. For Active Directory objects, this array contains pointers to the class GUIDs of the object's structural class and all attached auxiliary classes. Set <i>ObjectTypes</i> to <b>NULL</b> if the object does not have a GUID.</para>
    </param>
    <param name="GuidCount">
      <para>The number of GUIDs present in the <i>ObjectTypes</i> parameter.</para>
    </param>
    <param name="IsContainerObject">
      <para>Specifies whether the new object can contain other objects. A value of <b>TRUE</b> indicates that the new object is a container. A value of <b>FALSE</b> indicates that the new object is not a container.</para>
    </param>
    <param name="AutoInheritFlags">
      <para>A set of bit flags that control how <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) are inherited from <i>ParentDescriptor</i>. This parameter can be a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_DACL_AUTO_INHERIT</b>
                </description>
              </item>
              <item>
                <description>0x01</description>
              </item>
            </list>
          </description>
          <description>
            <para>The new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) contains ACEs inherited from the DACL of
<i>ParentDescriptor</i>, as well as any explicit ACEs specified in the DACL of
<i>CreatorDescriptor</i>. If this flag is not set, the new DACL does not inherit ACEs.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_SACL_AUTO_INHERIT</b>
                </description>
              </item>
              <item>
                <description>0x02</description>
              </item>
            </list>
          </description>
          <description>
            <para>The new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) contains ACEs inherited from the SACL of
<i>ParentDescriptor</i>, as well as any explicit ACEs specified in the SACL of
<i>CreatorDescriptor</i>. If this flag is not set, the new SACL does not inherit ACEs.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT</b>
                </description>
              </item>
              <item>
                <description>0x04</description>
              </item>
            </list>
          </description>
          <description>
            <i>CreatorDescriptor</i> is the default descriptor for the types of objects specified by <i>ObjectTypes</i>. As such,
<i>CreatorDescriptor</i> is ignored if
<i>ParentDescriptor</i> has any object-specific ACEs for the types of objects specified by the <i>ObjectTypes</i> parameter. If no such ACEs are inherited,
<i>CreatorDescriptor</i> is handled as though this flag were not specified.
</description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_AVOID_PRIVILEGE_CHECK</b>
                </description>
              </item>
              <item>
                <description>0x08</description>
              </item>
            </list>
          </description>
          <description>
            <para>The function does not perform privilege checking. If the SEF_AVOID_OWNER_CHECK flag is also set, the <i>Token</i> parameter can be <b>NULL</b>. This flag is useful while implementing automatic inheritance to avoid checking privileges on each child updated.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_AVOID_OWNER_CHECK</b>
                </description>
              </item>
              <item>
                <description>0x10</description>
              </item>
            </list>
          </description>
          <description>
            <para>The function does not check the validity of the owner in the resultant <i>NewDescriptor</i> as described in the Remarks section. If the SEF_AVOID_PRIVILEGE_CHECK flag is also set, the <i>Token</i> parameter can be <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_DEFAULT_OWNER_FROM_PARENT</b>
                </description>
              </item>
              <item>
                <description>0x20</description>
              </item>
            </list>
          </description>
          <description>
            <para>The owner of <i>NewDescriptor</i> defaults to the owner from <i>ParentDescriptor</i>. If not set, the owner of <i>NewDescriptor</i> defaults to the owner of the token specified by the <i>Token</i> parameter. The owner of the token is specified in the token itself. In either case, if the <i>CreatorDescriptor</i> parameter is not <b>NULL</b>, the <i>NewDescriptor</i> owner is set to the owner from <i>CreatorDescriptor</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_DEFAULT_GROUP_FROM_PARENT</b>
                </description>
              </item>
              <item>
                <description>0x40</description>
              </item>
            </list>
          </description>
          <description>
            <para>The group of <i>NewDescriptor</i> defaults to the group from <i>ParentDescriptor</i>. If not set, the group of <i>NewDescriptor</i> defaults to the group of the token specified by the <i>Token</i> parameter. The group of the token is specified in the token itself. In either case, if the <i>CreatorDescriptor</i> parameter is not <b>NULL</b>, the <i>NewDescriptor</i> group is set to the group from <i>CreatorDescriptor</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_MACL_NO_WRITE_UP</b>
                </description>
              </item>
              <item>
                <description>0x100</description>
              </item>
            </list>
          </description>
          <description>
            <para>A principal with a mandatory level lower than that of the object cannot write to the object.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_MACL_NO_READ_UP</b>
                </description>
              </item>
              <item>
                <description>0x200</description>
              </item>
            </list>
          </description>
          <description>
            <para>A principal with a mandatory level lower than that of the object cannot read the object.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_MACL_NO_EXECUTE_UP</b>
                </description>
              </item>
              <item>
                <description>0x400</description>
              </item>
            </list>
          </description>
          <description>
            <para>A principal with a mandatory level lower than that of the object cannot execute the object.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_AVOID_OWNER_RESTRICTION</b>
                </description>
              </item>
              <item>
                <description>0x1000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Any restrictions  specified by the
<i>ParentDescriptor</i> parameter that would limit the caller's ability to specify
a DACL in the <i>CreatorDescriptor</i> are ignored.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="Token">
      <para>A handle to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a> for the client <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> on whose behalf the object is being created. If this is an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a>, it must be at SecurityIdentification level or higher. For a full description of the SecurityIdentification impersonation level, see the
<see cref="SECURITY_IMPERSONATION_LEVEL" /> enumerated type.</para>
      <para>The client token contains default security information, such as the default owner, primary group, and DACL. This function uses these defaults if the information is not in the input security descriptors. The token must be open for <b>TOKEN_QUERY</b> access.</para>
      <para>If all of the following conditions are true, then the handle must be opened for <b>TOKEN_DUPLICATE</b> access in addition to <b>TOKEN_QUERY</b> access.</para>
      <list type="bullet">
        <item>
          <description>The token handle refers to a primary token.</description>
        </item>
        <item>
          <description>The security descriptor of the token contains one or more ACEs with the <b>OwnerRights</b> SID.</description>
        </item>
        <item>
          <description>A security descriptor is specified for the <i>CreatorDescriptor</i> parameter.</description>
        </item>
        <item>
          <description>The caller of this function does not set the <b>SEF_AVOID_OWNER_RESTRICTION</b> flag in the <i>AutoInheritFlags</i> parameter.</description>
        </item>
      </list>
    </param>
    <param name="GenericMapping">
      <para>A pointer to a
<see cref="GENERIC_MAPPING" /> structure that specifies the mapping from each generic right to specific rights for the object.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns a nonzero value.</para>
      <para>If the function fails, it returns zero. Call
<see cref="GetLastError" /> for extended error information. Some extended error codes and their meanings are listed in the following table.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PRIMARY_GROUP</b>
            </para>
          </description>
          <description>
            <para>The function cannot retrieve a primary group for the new security descriptor.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_OWNER</b>
            </para>
          </description>
          <description>
            <para>The function cannot retrieve an owner for the new security descriptor or the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) cannot be assigned as an owner. This occurs when validating the owner SID against the passed-in token.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NO_TOKEN</b>
            </para>
          </description>
          <description>
            <para>The function received <b>NULL</b> instead of a token for owner validation or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privilege</a> checking.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_PRIVILEGE_NOT_HELD</b>
            </para>
          </description>
          <description>
            <para>A SACL is being set, SEF_AVOID_PRIVILEGE_CHECK was not passed in, and the token passed in did not have SE_SECURITY_NAME enabled.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The
<see cref="CreatePrivateObjectSecurityEx" /> function is identical to calling the
<b>CreatePrivateObjectSecurityWithMultipleInheritance</b> function with a single GUID in <i>ObjectTypes</i>.</para>
      <para>The <i>AutoInheritFlags</i> are distinct from the similarly named bits in the <b>Control</b> member of the
<see cref="SECURITY_DESCRIPTOR" /> structure. For an explanation of the control bits, see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</a>.</para>
      <para>If <i>AutoInheritFlags</i> specifies the SEF_DACL_AUTO_INHERIT bit, the function applies the following rules to the DACL in the new security descriptor:</para>
      <list type="bullet">
        <item>
          <description>The SE_DACL_AUTO_INHERITED flag is set in the <b>Control</b> member of the new security descriptor.</description>
        </item>
        <item>
          <description>The DACL of the new security descriptor inherits ACEs from <i>ParentDescriptor</i> regardless of whether <i>CreatorDescriptor</i> is the default security descriptor or was explicitly specified by the creator. The new DACL is a combination of the parent and creator DACLs as defined by the rules of inheritance. Specifically, any ACEs in <i>ParentDescriptor</i> that are inheritable either to all child objects or to any object class listed in <i>ObjectTypes</i> will be applied to the new DACL.</description>
        </item>
        <item>
          <description>Inherited ACEs are marked as INHERITED_ACE.</description>
        </item>
      </list>
      <para>If <i>AutoInheritFlags</i> specifies the SEF_SACL_AUTO_INHERIT bit, the function applies similar rules to the new SACL.</para>
      <para>For both DACLs and SACLs, certain types of ACEs in <i>ParentDescriptor</i> and <i>CreatorDescriptor</i> will be manipulated and possibly replaced by two ACEs in <i>NewDescriptor</i>. Specifically, an inheritable ACE that contains at least one of the following mappable elements may result in two ACEs in the output security descriptor. Mappable elements include:</para>
      <list type="bullet">
        <item>
          <description>Generic access rights in the ACCESS_MASK</description>
        </item>
        <item>
          <description>Creator Owner SID or Creator Group SID as the ACE subject identifier</description>
        </item>
      </list>
      <para>ACEs with any of these mappable elements will result in the following two ACEs in <i>NewDescriptor</i>:</para>
      <list type="bullet">
        <item>
          <description>An ACE that is a copy of the original, but with the INHERIT_ONLY flag set. However, this ACE will not be created if either of the following two conditions exist:
<list type="bullet"><item><description>The <i>IsContainerObject</i> parameter is <b>FALSE</b>. Inheritable ACEs are meaningless on noncontainer objects.</description></item><item><description>The original ACE contains the NO_PROPAGATE_INHERIT flag. The original ACE is intended to be inherited as an effective ACE on children, but not inheritable below those children.</description></item></list></description>
        </item>
        <item>
          <description>An effective ACE in which the INHERITED_ACE bit is turned on and the generic elements are mapped to specific elements:
<list type="bullet"><item><description>Generic access rights are replaced by the corresponding standard and specific access rights indicated in the input <i>GenericMapping</i>.</description></item><item><description>Creator Owner SID is replaced with the Owner in the resultant <i>NewDescriptor</i></description></item><item><description>Creator Group SID is replaced with the Group in the resultant <i>NewDescriptor</i></description></item></list></description>
        </item>
      </list>
      <para>If <i>AutoInheritFlags</i> does not specify the SEF_AVOID_OWNER_CHECK bit, owner validity checking is performed according to the following rules. The Owner in the resultant <i>NewDescriptor</i> must be a legally formed SID, and either must match the TokenUser in <i>Token</i> or must match a group in the TokenGroups in <i>Token</i>. The attributes on the group:</para>
      <list type="bullet">
        <item>
          <description>Must include SE_GROUP_OWNER</description>
        </item>
        <item>
          <description>Must not include SE_GROUP_USE_FOR_DENY_ONLY</description>
        </item>
      </list>
      <para>Callers that do not have access to the token of the client that will ultimately be setting the owner may choose to skip owner validation checking.</para>
      <para>To create a security descriptor for a new object, call <b>CreatePrivateObjectSecurityWithMultipleInheritance</b> with <i>ParentDescriptor</i> set to the security descriptor of the parent container and <i>CreatorDescriptor</i> set to the security descriptor proposed by the creator of the object.</para>
      <para>To verify the current security descriptor on an object, call <b>CreatePrivateObjectSecurityWithMultipleInheritance</b> with <i>ParentDescriptor</i> set to the security descriptor of the parent container and <i>CreatorDescriptor</i> set to the current security descriptor of the object. This call ensures that the ACEs are appropriately inherited from parent to child security descriptors.</para>
      <para>If the <i>CreatorDescriptor</i> security descriptor contains a SACL, <i>Token</i> must have the SE_SECURITY_NAME privilege enabled or the caller must specify the SEF_AVOID_PRIVILEGE_CHECK flag in <i>AutoInheritFlags</i>.</para>
    </remarks>
    <seealso cref="CreatePrivateObjectSecurityEx" />
    <seealso cref="DestroyPrivateObjectSecurity" />
    <seealso cref="GENERIC_MAPPING" />
    <seealso cref="GUID" />
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</seealso>
    <seealso cref="SECURITY_IMPERSONATION_LEVEL" />
  </member>
  <member name="Windows.CreateRestrictedToken">
    <summary>
      <para>The <b>CreateRestrictedToken</b> function creates a new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a> that is a restricted version of an existing access token. The restricted token can have disabled <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifiers</a> (SIDs), deleted privileges, and a list of restricting SIDs. For more information, see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/restricted-tokens">Restricted Tokens</a>.</para>
    </summary>
    <param name="ExistingTokenHandle">
      <para>A handle to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary</a> or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a>. The token can also be a restricted token. The handle must have TOKEN_DUPLICATE access to the token.</para>
    </param>
    <param name="Flags">
      <para>Specifies additional privilege options. This parameter can be zero or a combination of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>DISABLE_MAX_PRIVILEGE</b>
                </description>
              </item>
              <item>
                <description>0x1</description>
              </item>
            </list>
          </description>
          <description>
            <para>Disables all privileges in the new token except the <b>SeChangeNotifyPrivilege</b> privilege. If this value is specified, the <i>DeletePrivilegeCount</i> and <i>PrivilegesToDelete</i> parameters are ignored.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SANDBOX_INERT</b>
                </description>
              </item>
              <item>
                <description>0x2</description>
              </item>
            </list>
          </description>
          <description>
            <para>If this value is used, the system does not check <a href="https://docs.microsoft.com//previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/dd723678(v=ws.10)">AppLocker</a> rules  or apply <a href="https://docs.microsoft.com//previous-versions/windows/it-pro/windows-server-2003/cc779607(v=ws.10)">Software Restriction Policies</a>. For <a href="https://docs.microsoft.com//previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/dd723678(v=ws.10)">AppLocker</a>, this flag disables checks for all four rule collections: Executable, Windows Installer, Script, and DLL.</para>
            <para>When creating a setup program that must run extracted DLLs during installation, use the flag <b>SAFER_TOKEN_MAKE_INERT</b> in the <see cref="SaferComputeTokenFromLevel" /> function.</para>
            <para>A token can be queried for existence of this flag by using <see cref="GetTokenInformation" />.</para>
            <para>
              <b>Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>On systems with KB2532445 installed, the caller must be running as LocalSystem or TrustedInstaller or the system ignores this flag. For more information, see  "You can circumvent AppLocker rules by using an Office macro on a computer that is running Windows 7 or Windows Server 2008 R2" in the Help and Support Knowledge Base at <a href="https://support.microsoft.com/help/2532445">http://support.microsoft.com/kb/2532445</a>.</para>
            <para>
              <b>Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  </b>AppLocker is not supported. AppLocker was introduced in Windows 7 and Windows Server 2008 R2.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>LUA_TOKEN</b>
                </description>
              </item>
              <item>
                <description>0x4</description>
              </item>
            </list>
          </description>
          <description>
            <para>The new token is a LUA token.</para>
            <para>
              <b>Windows Server 2003 and Windows XP:  </b>This value is not supported.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>WRITE_RESTRICTED</b>
                </description>
              </item>
              <item>
                <description>0x8</description>
              </item>
            </list>
          </description>
          <description>
            <para>The new token contains restricting SIDs that are considered only when evaluating write access.</para>
            <para>
              <b>Windows XP with SP2 and later:  </b>The value of this constant is 0x4. For an application to be compatible with Windows XP with SP2 and later operating systems, the application should query the operating system by calling the <see cref="GetVersionEx" /> function to determine which value should be used.</para>
            <para>
              <b>Windows Server 2003 and Windows XP with SP1 and earlier:  </b>This value is not supported.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="DisableSidCount">
      <para>Specifies the number of entries in the <i>SidsToDisable</i> array.</para>
    </param>
    <param name="SidsToDisable">
      <para>A pointer to an array of
<see cref="SID_AND_ATTRIBUTES" /> structures that specify the deny-only SIDs in the restricted token. The system uses a deny-only SID to deny access to a securable object. The absence of a deny-only SID does not allow access.</para>
      <para>Disabling a SID turns on SE_GROUP_USE_FOR_DENY_ONLY and turns off SE_GROUP_ENABLED and SE_GROUP_ENABLED_BY_DEFAULT. All other attributes are ignored.</para>
      <para>Deny-only attributes apply to any combination of an existing token's SIDs, including the user SID and group SIDs that have the SE_GROUP_MANDATORY attribute. To get the SIDs associated with the existing token, use the
<see cref="GetTokenInformation" /> function with the TokenUser and TokenGroups flags. The function ignores any SIDs in the array that are not also found in the existing token.</para>
      <para>The function ignores the <b>Attributes</b> member of the <see cref="SID_AND_ATTRIBUTES" /> structure.</para>
      <para>This parameter can be <b>NULL</b> if no SIDs are to be disabled.</para>
    </param>
    <param name="DeletePrivilegeCount">
      <para>Specifies the number of entries in the <i>PrivilegesToDelete</i> array.</para>
    </param>
    <param name="PrivilegesToDelete">
      <para>A pointer to an array of
<see cref="LUID_AND_ATTRIBUTES" /> structures that specify the privileges to delete in the restricted token.</para>
      <para>The <see cref="GetTokenInformation" /> function can be used with the TokenPrivileges flag to retrieve the privileges held by the existing token. The function ignores any privileges in the array that are not held by the existing token.</para>
      <para>The function ignores the <b>Attributes</b> members of the <see cref="LUID_AND_ATTRIBUTES" /> structures.</para>
      <para>This parameter can be <b>NULL</b> if you do not want to delete any privileges.</para>
      <para>If the calling program passes too many privileges in this array, <b>CreateRestrictedToken</b> returns ERROR_INVALID_PARAMETER.</para>
    </param>
    <param name="RestrictedSidCount">
      <para>Specifies the number of entries in the <i>SidsToRestrict</i> array.</para>
    </param>
    <param name="SidsToRestrict">
      <para>A pointer to an array of
<see cref="SID_AND_ATTRIBUTES" /> structures that specify a list of restricting SIDs for the new token. If the existing token is a restricted token, the list of restricting SIDs for the new token is the intersection of this array and the list of restricting SIDs for the existing token. No check is performed to remove duplicate SIDs that were placed on the <i>SidsToRestrict</i> parameter. Duplicate SIDs allow a restricted token to have redundant information in the restricting SID list.</para>
      <para>The <b>Attributes</b> member of the <see cref="SID_AND_ATTRIBUTES" /> structure must be zero. Restricting SIDs are always enabled for access checks.</para>
      <para>This parameter can be <b>NULL</b> if you do not want to specify any restricting SIDs.</para>
    </param>
    <param name="NewTokenHandle">
      <para>A pointer to a variable that receives a handle to the new restricted token. This handle has the same access rights as <i>ExistingTokenHandle</i>. The new token is the same type, <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary</a> or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation</a>, as the existing token. The handle returned in <i>NewTokenHandle</i> can be duplicated.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>CreateRestrictedToken</b> function can restrict the token in the following ways:</para>
      <list type="bullet">
        <item>
          <description>Apply the deny-only attribute to SIDs in the token so they cannot be used to access secured objects. For more information about the deny-only attribute, see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/sid-attributes-in-an-access-token">SID Attributes in an Access Token</a>.</description>
        </item>
        <item>
          <description>Remove
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/privileges">privileges</a> from the token.</description>
        </item>
        <item>
          <description>Specify a list of restricting SIDs, which the system uses when it checks the token's access to a securable object. The system performs two access checks: one using the token's enabled SIDs, and another using the list of restricting SIDs. Access is granted only if both access checks allow the requested access rights.</description>
        </item>
      </list>
      <para>You can use the restricted token in the
<see cref="CreateProcessAsUser" /> function to create a process that has restricted access rights and privileges. If a process calls <b>CreateProcessAsUser</b> using a restricted version of its own token, the calling process does not need to have the SE_ASSIGNPRIMARYTOKEN_NAME privilege.</para>
      <para>You can use the restricted token in the
<see cref="ImpersonateLoggedOnUser" /> function.</para>
      <para>
        <b>Caution</b>  Applications that use restricted tokens should run the restricted application on desktops other than the default desktop. This is necessary to prevent an attack by a restricted application, using <b>SendMessage</b> or <b>PostMessage</b>, to unrestricted applications on the default desktop. If necessary, switch between desktops for your application purposes.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="CreateProcessAsUser" />
    <seealso cref="GetTokenInformation" />
    <seealso cref="ImpersonateLoggedOnUser" />
    <seealso cref="IsTokenRestricted" />
    <seealso cref="LUID_AND_ATTRIBUTES" />
    <seealso cref="SID_AND_ATTRIBUTES" />
  </member>
  <member name="Windows.CreateWellKnownSid">
    <summary>
      <para>The <b>CreateWellKnownSid</b> function creates a SID for predefined aliases.</para>
    </summary>
    <param name="WellKnownSidType">
      <para>Member of the <see cref="WELL_KNOWN_SID_TYPE" /> enumeration that specifies what the SID will identify.</para>
    </param>
    <param name="DomainSid">
      <para>A pointer to a SID that identifies the domain to use when creating the SID. Pass <b>NULL</b> to use the local computer.</para>
    </param>
    <param name="pSid">
      <para>A pointer to memory where <b>CreateWellKnownSid</b> will store the new SID.</para>
    </param>
    <param name="cbSid">
      <para>A pointer to a <b>DWORD</b> that contains the number of bytes available at <i>pSid</i>. The <b>CreateWellKnownSid</b> function stores the number of bytes actually used at this location.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. For extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <seealso cref="EqualDomainSid" />
    <seealso cref="GetWindowsAccountDomainSid" />
    <seealso cref="IsWellKnownSid" />
    <seealso cref="WELL_KNOWN_SID_TYPE" />
  </member>
  <member name="Windows.CveEventWrite">
    <summary>
      <para>A tracing function for publishing events when an attempted security vulnerability exploit is detected in your user-mode application.</para>
    </summary>
    <param name="CveId">
      <para>A pointer to the CVE ID associated with the vulnerability for which this event is being raised.</para>
    </param>
    <param name="AdditionalDetails">
      <para>A pointer to a string giving additional details that the event producer may want to provide to the consumer of this event.</para>
    </param>
    <returns>
      <para>Returns ERROR_SUCCESS if successful or one of the following values on error.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_PARAMETER</b>
            </para>
          </description>
          <description>
            <para>One or more of the parameters is not valid.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_ARITHMETIC_OVERFLOW</b>
            </para>
          </description>
          <description>
            <para>The event size is larger than the allowed maximum (64k - header).</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_MORE_DATA</b>
            </para>
          </description>
          <description>
            <para>The session buffer size is too small for the event.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>ERROR_NOT_ENOUGH_MEMORY</b>
            </para>
          </description>
          <description>
            <para>Occurs when filled buffers are trying to flush to disk, but disk IOs are not happening fast enough. This
happens when the disk is slow and event traffic is heavy. Eventually, there are no more free (empty) buffers
and the event is dropped.</para>
          </description>
        </item>
        <item>
          <description>
            <para>
              <b>STATUS_LOG_FILE_FULL</b>
            </para>
          </description>
          <description>
            <para>The real-time playback file is full. Events are not logged to the session until a real-time consumer
consumes the events from the playback file. Do not stop logging events based on this error code.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The CveEventWrite function publishes a CVE-based event. This function should be called only in scenarios where an attempt to exploit a known, patched vulnerability is detected by the application. Ideally, this function call should be added as part of the fix (update) itself.</para>
      <para>The default consumer for this event is EventLog-Application. To enable another consumer, the provider can be added to the consumer session.</para>
      <para>Provider GUID: 85a62a0d-7e17-485f-9d4f-749a287193a6</para>
      <para>Source Name: Microsoft-Windows-Audit-CVE or Audit-CVE</para>
    </remarks>
  </member>
  <member name="Windows.DeleteAce">
    <summary>
      <para>The <b>DeleteAce</b> function deletes an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) from an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL).</para>
    </summary>
    <param name="pAcl">
      <para>A pointer to an
ACL. The ACE specified by the <i>dwAceIndex</i> parameter is removed from this ACL.</para>
    </param>
    <param name="dwAceIndex">
      <para>The ACE to delete. A value of zero corresponds to the first ACE in the ACL, a value of one to the second ACE, and so on.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>An application can use the
<see cref="ACL_SIZE_INFORMATION" /> structure retrieved by the
<see cref="GetAclInformation" /> function to discover the size of the ACL and the number of ACEs it contains. The
<see cref="GetAce" /> function retrieves information about an individual ACE.</para>
    </remarks>
    <seealso cref="ACL_SIZE_INFORMATION" />
    <seealso cref="AddAccessAllowedAce" />
    <seealso cref="AddAccessDeniedAce" />
    <seealso cref="AddAce" />
    <seealso cref="AddAuditAccessAce" />
    <seealso cref="GetAce" />
    <seealso cref="GetAclInformation" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
  </member>
  <member name="Windows.DeriveCapabilitySidsFromName">
    <summary>
      <para>This function constructs two arrays of SIDs out of a capability name. One is an array group SID with NT Authority, and the other is an array of capability SIDs with AppAuthority.</para>
    </summary>
    <param name="CapName">
      <para>Name of the capability in string form.</para>
    </param>
    <param name="CapabilityGroupSids">
      <para>The GroupSids with NTAuthority.</para>
    </param>
    <param name="CapabilityGroupSidCount">
      <para>The count of GroupSids in the array.</para>
    </param>
    <param name="CapabilitySids">
      <para>CapabilitySids with AppAuthority.</para>
    </param>
    <param name="CapabilitySidCount">
      <para>The count of CapabilitySid with AppAuthority.</para>
    </param>
    <returns>
      <para>If the function succeeds, it returns <b>TRUE</b>.</para>
      <para>If the function fails, it returns <b>FALSE</b>. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The caller is expected to free the individual SIDs returned in each array by calling <code>LocalFree</code>, as well as memory allocated for the array itself.</para>
      <para>The SID computed for the application capability of legacy capabilities (published prior to Win10) will be the same as the published SIDs but the SID for the service group capability SID will be hash based.</para>
    </remarks>
  </member>
  <member name="Windows.DestroyPrivateObjectSecurity">
    <summary>
      <para>The <b>DestroyPrivateObjectSecurity</b> function deletes a private object's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>. For background information, see the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptors-for-private-objects">Security Descriptors for Private Objects</a> topic.</para>
    </summary>
    <param name="ObjectDescriptor">
      <para>A pointer to a pointer to the
<see cref="SECURITY_DESCRIPTOR" /> structure to be deleted. This security descriptor must have been created by a call to the
<see cref="CreatePrivateObjectSecurity" /> function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control Overview</seealso>
    <seealso cref="CreatePrivateObjectSecurity" />
    <seealso cref="GetPrivateObjectSecurity" />
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptors-for-private-objects">Security Descriptors for Private Objects</seealso>
    <seealso cref="SetPrivateObjectSecurity" />
  </member>
  <member name="Windows.DuplicateToken">
    <summary>
      <para>The <b>DuplicateToken</b> function creates a new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a> that duplicates one already in existence.</para>
    </summary>
    <param name="ExistingTokenHandle">
      <para>A handle to an access token opened with TOKEN_DUPLICATE access.</para>
    </param>
    <param name="ImpersonationLevel">
      <para>Specifies a
<see cref="SECURITY_IMPERSONATION_LEVEL" /> enumerated type that supplies the impersonation level of the new token.</para>
    </param>
    <param name="DuplicateTokenHandle">
      <para>A pointer to a variable that receives a handle to the duplicate token. This handle has TOKEN_IMPERSONATE and TOKEN_QUERY access to the new token.</para>
      <para>When you have finished using the new token, call the <see cref="CloseHandle" /> function to close the token handle.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>DuplicateToken</b> function creates an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a>, which you can use in functions such as <see cref="SetThreadToken" /> and <see cref="ImpersonateLoggedOnUser" />. The token created by <b>DuplicateToken</b> cannot be used in the <see cref="CreateProcessAsUser" /> function, which requires a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a>. To create a token that you can pass to <b>CreateProcessAsUser</b>, use the <see cref="DuplicateTokenEx" /> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="CreateProcessAsUser" />
    <seealso cref="DuplicateTokenEx" />
    <seealso cref="ImpersonateLoggedOnUser" />
    <seealso cref="SECURITY_IMPERSONATION_LEVEL" />
    <seealso cref="SetThreadToken" />
  </member>
  <member name="Windows.DuplicateTokenEx">
    <summary>
      <para>The <b>DuplicateTokenEx</b> function creates a new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a> that duplicates an existing token. This function can create either a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> or an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a>.</para>
    </summary>
    <param name="hExistingToken">
      <para>A handle to an access token opened with TOKEN_DUPLICATE access.</para>
    </param>
    <param name="dwDesiredAccess">
      <para>Specifies the requested access rights for the new token. The <b>DuplicateTokenEx</b> function compares the requested access rights with the existing token's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) to determine which rights are granted or denied. To request the same access rights as the existing token, specify zero. To request all access rights that are valid for the caller, specify MAXIMUM_ALLOWED.</para>
      <para>For a list of access rights for access tokens, see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-rights-for-access-token-objects">Access Rights for Access-Token Objects</a>.</para>
    </param>
    <param name="lpTokenAttributes">
      <para>A pointer to a
<a href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that specifies a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> for the new token and determines whether child processes can inherit the token. If <i>lpTokenAttributes</i> is <b>NULL</b>, the token gets a default security descriptor and the handle cannot be inherited. If the security descriptor contains a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL), the token gets ACCESS_SYSTEM_SECURITY access right, even if it was not requested in <i>dwDesiredAccess</i>.</para>
      <para>To set the owner in the security descriptor for the new token, the caller's process token must have the <b>SE_RESTORE_NAME</b> privilege set.</para>
    </param>
    <param name="ImpersonationLevel">
      <para>Specifies a value from the
<see cref="SECURITY_IMPERSONATION_LEVEL" /> enumeration that indicates the impersonation level of the new token.</para>
    </param>
    <param name="TokenType">
      <para>Specifies one of the following values from the <see cref="TOKEN_TYPE" /> enumeration.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <b>TokenPrimary</b>
          </description>
          <description>
            <para>The new token is a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> that you can use in the
<see cref="CreateProcessAsUser" /> function.</para>
          </description>
        </item>
        <item>
          <description>
            <b>TokenImpersonation</b>
          </description>
          <description>
            <para>The new token is an impersonation token.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="phNewToken">
      <para>A pointer to a <b>HANDLE</b> variable that receives the new token.</para>
      <para>When you have finished using the new token, call the <see cref="CloseHandle" /> function to close the token handle.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns a nonzero value.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>DuplicateTokenEx</b> function allows you to create a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> that you can use in the
<see cref="CreateProcessAsUser" /> function. This allows a server application that is impersonating a client to create a process that has the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security context</a> of the client. Note that the <see cref="DuplicateToken" /> function can create only impersonation tokens, which are not valid for <b>CreateProcessAsUser</b>.</para>
      <para>The following is a typical scenario for using <b>DuplicateTokenEx</b> to create a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a>. A server application creates a thread that calls one of the impersonation functions, such as
<see cref="ImpersonateNamedPipeClient" />, to impersonate a client. The impersonating thread then calls the
<see cref="OpenThreadToken" /> function to get its own token, which is an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a> that has the security context of the client. The thread specifies this impersonation token in a call to <b>DuplicateTokenEx</b>, specifying the TokenPrimary flag. The <b>DuplicateTokenEx</b> function creates a <i>primary token</i> that has the security context of the client.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="CloseHandle" />
    <seealso cref="CreateProcessAsUser" />
    <seealso cref="DdeImpersonateClient" />
    <seealso cref="DuplicateToken" />
    <seealso cref="ImpersonateNamedPipeClient" />
    <seealso cref="OpenThreadToken" />
    <seealso cref="RevertToSelf" />
    <seealso cref="RpcImpersonateClient" />
    <seealso href="https://docs.microsoft.com//previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</seealso>
    <seealso cref="SECURITY_IMPERSONATION_LEVEL" />
  </member>
  <member name="Windows.EqualDomainSid">
    <summary>
      <para>The <b>EqualDomainSid</b> function determines whether two SIDs are from the same domain.</para>
    </summary>
    <param name="pSid1">
      <para>A pointer to one of the two SIDs to compare. This SID must be either an account domain SID or a BUILTIN SID.</para>
    </param>
    <param name="pSid2">
      <para>A pointer to one of the two SIDs to compare. This SID must be either an account domain SID or a BUILTIN SID.</para>
    </param>
    <param name="pfEqual">
      <para>A pointer to a BOOL that <b>EqualDomainSid</b> sets to <b>TRUE</b> if the domains of the two SIDs are equal or <b>FALSE</b> if they are not equal. This value cannot be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If both SIDs are  account domain SIDs and/or BUILTIN SIDs, the return value is nonzero. In addition, *<i>pfEqual</i> is set to <b>TRUE</b> if the domains of the two SIDs are equal; otherwise  *<i>pfEqual</i> is set to <b>FALSE</b>.</para>
      <para>If one or more of the SIDS is neither an account domain SID nor a BUILTIN SID, then the return value is <b>FALSE</b>. To get extended error information, call <see cref="GetLastError" />. <b>GetLastError</b> returns ERROR_NON_DOMAIN_SID if either SID is not an account domain SID or BUILTIN SID.</para>
    </returns>
    <seealso cref="EqualPrefixSid" />
    <seealso cref="EqualSid" />
  </member>
  <member name="Windows.EqualPrefixSid">
    <summary>
      <para>The <b>EqualPrefixSid</b> function tests two <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security-identifier</a> (SID) prefix values for equality. A SID prefix is the entire SID except for the last subauthority value.</para>
    </summary>
    <param name="pSid1">
      <para>A pointer to the first
<see cref="SID" /> structure to compare. This structure is assumed to be valid.</para>
    </param>
    <param name="pSid2">
      <para>A pointer to the second <see cref="SID" /> structure to compare. This structure is assumed to be valid.</para>
    </param>
    <returns>
      <para>If the SID prefixes are equal, the return value is nonzero.</para>
      <para>If the SID prefixes are not equal, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>EqualPrefixSid</b> function enables a server application in one domain to verify an attempt by a user to log on to another domain. For example, if a user attempts to log on to RemoteDomain from a workstation in LocalDomain, the server for LocalDomain can request the SIDs for the user and the user's groups from RemoteDomain. The domain controller for RemoteDomain responds with the relevant SIDs.</para>
      <para>All SIDs for a specified domain have the same prefix. When the server receives the user's SIDs, the server can call the <b>EqualPrefixSid</b> function for each SID, comparing the user or group SID against the SID for RemoteDomain. If any of the SID prefixes are not equal, the server refuses the logon attempt.</para>
      <para>It is advisable to modify the SID for a domain before comparing it with a group or user SID. If the SID for RemoteDomain is S-1–1234–8, each group or user SID for that domain has S-1–1234–8 as its prefix. To compare the SIDs by using the <b>EqualPrefixSid</b> function, an application copies the domain SID and adds any subauthority (<a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">RID</a>) value to the copy, thereby creating a SID in the form S-1–1234–8–0. The application then uses the modified domain SID as a template against which the group and user SIDs are compared.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="CopySid" />
    <seealso cref="EqualSid" />
    <seealso cref="IsValidSid" />
    <seealso cref="SID" />
  </member>
  <member name="Windows.EqualSid">
    <summary>
      <para>The <b>EqualSid</b> function tests two <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) values for equality. Two SIDs must match exactly to be considered equal.</para>
    </summary>
    <param name="pSid1">
      <para>A pointer to the first
<see cref="SID" /> structure to compare. This structure is assumed to be valid.</para>
    </param>
    <param name="pSid2">
      <para>A pointer to the second <see cref="SID" /> structure to compare. This structure is assumed to be valid.</para>
    </param>
    <returns>
      <para>If the
<see cref="SID" /> structures are equal, the return value is nonzero.</para>
      <para>If the <see cref="SID" /> structures are not equal, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
      <para>If either <see cref="SID" /> structure is not valid, the return value is undefined.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="EqualPrefixSid" />
    <seealso cref="IsValidSid" />
    <seealso cref="SID" />
  </member>
  <member name="Windows.FindFirstFreeAce">
    <summary>
      <para>The <b>FindFirstFreeAce</b> function retrieves a pointer to the first free byte in an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL).</para>
    </summary>
    <param name="pAcl">
      <para>A pointer to an
ACL.</para>
    </param>
    <param name="pAce">
      <para>The address of a pointer to the first free position in the ACL created when the function returns. If the ACL is not valid, this parameter is <b>NULL</b>. If the ACL is full, this parameter points to the byte immediately following the ACL.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <seealso cref="GetAce" />
    <seealso cref="GetAclInformation" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
  </member>
  <member name="Windows.FreeSid">
    <summary>
      <para>The <b>FreeSid</b> function frees a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) previously allocated by using the
<see cref="AllocateAndInitializeSid" /> function.</para>
    </summary>
    <param name="pSid">
      <para>A pointer to the
<see cref="SID" /> structure to free.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns <b>NULL</b>.</para>
      <para>If the function fails, it returns a pointer to the <see cref="SID" /> structure represented by the <i>pSid</i> parameter.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso cref="AllocateAndInitializeSid" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="SID" />
  </member>
  <member name="Windows.GetAce">
    <summary>
      <para>The <b>GetAce</b> function obtains a pointer to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entry</a> (ACE) in an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL).</para>
    </summary>
    <param name="pAcl">
      <para>A pointer to an
ACL that contains the ACE to be retrieved.</para>
    </param>
    <param name="dwAceIndex">
      <para>The index of the ACE to be retrieved. A value of zero corresponds to the first ACE in the ACL, a value of one to the second ACE, and so on.</para>
    </param>
    <param name="pAce">
      <para>A pointer to a pointer that the function sets to the address of the ACE.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <seealso cref="AddAccessAllowedAce" />
    <seealso cref="AddAccessDeniedAce" />
    <seealso cref="AddAce" />
    <seealso cref="AddAuditAccessAce" />
    <seealso cref="GetAclInformation" />
    <seealso cref="InitializeAcl" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
  </member>
  <member name="Windows.GetAclInformation">
    <summary>
      <para>The <b>GetAclInformation</b> function retrieves information about an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL).</para>
    </summary>
    <param name="pAcl">
      <para>A pointer to an
ACL. The function retrieves information about this ACL. If a null value is passed, the function causes an access violation.</para>
    </param>
    <param name="pAclInformation">
      <para>A pointer to a buffer to receive the requested information. The structure that is placed into the buffer depends on the information class requested in the <i>dwAclInformationClass</i> parameter.</para>
    </param>
    <param name="nAclInformationLength">
      <para>The size, in bytes, of the buffer pointed to by the <i>pAclInformation</i> parameter.</para>
    </param>
    <param name="dwAclInformationClass">
      <para>A value of the
<see cref="ACL_INFORMATION_CLASS" /> enumeration that indicates the class of information requested. This parameter can be one of two values from this enumeration:</para>
      <list type="bullet">
        <item>
          <description>If the value is <b>AclRevisionInformation</b>, the function fills the buffer pointed to by the <i>pAclInformation</i> parameter with an
<see cref="ACL_REVISION_INFORMATION" /> structure.</description>
        </item>
        <item>
          <description>If the value is <b>AclSizeInformation</b>, the function fills the buffer pointed to by the <i>pAclInformation</i> parameter with an
<see cref="ACL_SIZE_INFORMATION" /> structure.</description>
        </item>
      </list>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <seealso cref="ACL_INFORMATION_CLASS" />
    <seealso cref="ACL_REVISION_INFORMATION" />
    <seealso cref="ACL_SIZE_INFORMATION" />
    <seealso cref="GetAce" />
    <seealso cref="InitializeAcl" />
    <seealso cref="IsValidAcl" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SetAclInformation" />
  </member>
  <member name="Windows.GetFileSecurity">
    <summary>
      <para>The <b>GetFileSecurity</b> function obtains specified information about the security of a file or directory. The information obtained is constrained by the caller's access rights and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a>.</para>
      <para>The <see cref="GetNamedSecurityInfo" /> function provides functionality similar to <b>GetFileSecurity</b> for files as well as other types of objects.</para>
    </summary>
    <param name="lpFileName">
      <para>A pointer to a null-terminated string that specifies the file or directory for which security information is retrieved.</para>
    </param>
    <param name="RequestedInformation">
      <para>A
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> value that identifies the security information being requested.</para>
    </param>
    <param name="pSecurityDescriptor">
      <para>A pointer to a buffer that receives a copy of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> of the object specified by the <i>lpFileName</i> parameter. The calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> must have permission to view the specified aspects of the object's security status. The
<see cref="SECURITY_DESCRIPTOR" /> structure is returned in <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a> format.</para>
    </param>
    <param name="nLength">
      <para>Specifies the size, in bytes, of the buffer pointed to by the <i>pSecurityDescriptor</i> parameter.</para>
    </param>
    <param name="lpnLengthNeeded">
      <para>A pointer to the variable that receives the number of bytes necessary to store the complete <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>. If the returned number of bytes is less than or equal to <i>nLength</i>, the entire security descriptor is returned in the output buffer; otherwise, none of the descriptor is returned.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>To read the owner, group, or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">DACL</a> from the security descriptor for the specified file or directory, the DACL for the file or directory must grant READ_CONTROL access to the caller, or the caller must be the owner of the file or directory.</para>
      <para>To read the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">SACL</a> of a file or directory, the SE_SECURITY_NAME privilege must be enabled for the calling process.</para>
    </remarks>
    <seealso cref="GetKernelObjectSecurity" />
    <seealso cref="GetNamedSecurityInfo" />
    <seealso cref="GetPrivateObjectSecurity" />
    <seealso cref="GetUserObjectSecurity" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</seealso>
    <seealso cref="SetFileSecurity" />
  </member>
  <member name="Windows.GetFileSecurityW">
    <summary>
      <para>The <b>GetFileSecurity</b> function obtains specified information about the security of a file or directory. The information obtained is constrained by the caller's access rights and <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a>.</para>
      <para>The <see cref="GetNamedSecurityInfo" /> function provides functionality similar to <b>GetFileSecurity</b> for files as well as other types of objects.</para>
    </summary>
    <param name="lpFileName">
      <para>A pointer to a null-terminated string that specifies the file or directory for which security information is retrieved.</para>
    </param>
    <param name="RequestedInformation">
      <para>A
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> value that identifies the security information being requested.</para>
    </param>
    <param name="pSecurityDescriptor">
      <para>A pointer to a buffer that receives a copy of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> of the object specified by the <i>lpFileName</i> parameter. The calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> must have permission to view the specified aspects of the object's security status. The
<see cref="SECURITY_DESCRIPTOR" /> structure is returned in <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative security descriptor</a> format.</para>
    </param>
    <param name="nLength">
      <para>Specifies the size, in bytes, of the buffer pointed to by the <i>pSecurityDescriptor</i> parameter.</para>
    </param>
    <param name="lpnLengthNeeded">
      <para>A pointer to the variable that receives the number of bytes necessary to store the complete <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>. If the returned number of bytes is less than or equal to <i>nLength</i>, the entire security descriptor is returned in the output buffer; otherwise, none of the descriptor is returned.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>To read the owner, group, or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">DACL</a> from the security descriptor for the specified file or directory, the DACL for the file or directory must grant READ_CONTROL access to the caller, or the caller must be the owner of the file or directory.</para>
      <para>To read the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">SACL</a> of a file or directory, the SE_SECURITY_NAME privilege must be enabled for the calling process.</para>
    </remarks>
    <seealso cref="GetKernelObjectSecurity" />
    <seealso cref="GetNamedSecurityInfo" />
    <seealso cref="GetPrivateObjectSecurity" />
    <seealso cref="GetUserObjectSecurity" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</seealso>
    <seealso cref="SetFileSecurity" />
  </member>
  <member name="Windows.GetKernelObjectSecurity">
    <summary>
      <para>The <b>GetKernelObjectSecurity</b> function retrieves a copy of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> that protects a kernel object.</para>
    </summary>
    <param name="Handle">
      <para>A handle to a kernel object.</para>
    </param>
    <param name="RequestedInformation">
      <para>Specifies a
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> value that identifies the security information being requested.</para>
    </param>
    <param name="pSecurityDescriptor">
      <para>A pointer to a buffer the function fills with a copy of the security descriptor of the specified object. The calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> must have the right to view the specified aspects of the object's security status. The
<see cref="SECURITY_DESCRIPTOR" /> structure is returned in <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative</a> format.</para>
    </param>
    <param name="nLength">
      <para>Specifies the size, in bytes, of the buffer pointed to by the <i>pSecurityDescriptor</i> parameter.</para>
    </param>
    <param name="lpnLengthNeeded">
      <para>A pointer to a variable that receives the number of bytes required for the buffer pointed to by the <i>pSecurityDescriptor</i> parameter. If this variable's value is greater than the value of the <i>nLength</i> parameter when the function returns, none of the security descriptor is copied to the buffer.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>To read the owner, group, or <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">DACL</a> from the kernel object's security descriptor, the calling process must have been granted READ_CONTROL access when the handle was opened. To get READ_CONTROL access, the caller must be the owner of the object or the object's DACL must grant the access.</para>
      <para>To read the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">SACL</a> from the security descriptor, the calling process must have been granted ACCESS_SYSTEM_SECURITY access when the handle was opened. The proper way to get this access is to enable the SE_SECURITY_NAME privilege in the caller's current token, open the handle for ACCESS_SYSTEM_SECURITY access, and then disable the privilege.</para>
    </remarks>
    <seealso cref="GetFileSecurity" />
    <seealso cref="GetPrivateObjectSecurity" />
    <seealso cref="GetUserObjectSecurity" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</seealso>
    <seealso cref="SetKernelObjectSecurity" />
  </member>
  <member name="Windows.GetLengthSid">
    <summary>
      <para>The <b>GetLengthSid</b> function returns the length, in bytes, of a valid <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID).</para>
    </summary>
    <param name="pSid">
      <para>A pointer to the
<see cref="SID" /> structure whose length is returned. The structure is assumed to be valid.</para>
    </param>
    <returns>
      <para>If the <see cref="SID" /> structure is valid, the return value is the length, in bytes, of the <b>SID</b> structure.</para>
      <para>If the <see cref="SID" /> structure is not valid, the return value is undefined. Before calling <b>GetLengthSid</b>, pass the SID to the
<see cref="IsValidSid" /> function to verify that the SID is valid.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="GetSidLengthRequired" />
    <seealso cref="GetSidSubAuthorityCount" />
    <seealso cref="IsValidSid" />
    <seealso cref="SID" />
  </member>
  <member name="Windows.GetPrivateObjectSecurity">
    <summary>
      <para>The <b>GetPrivateObjectSecurity</b> function retrieves information from a private object's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>.</para>
    </summary>
    <param name="ObjectDescriptor">
      <para>A pointer to a
<see cref="SECURITY_DESCRIPTOR" /> structure. This is the security descriptor to be queried.</para>
    </param>
    <param name="SecurityInformation">
      <para>A set of bit flags that indicate the parts of the security descriptor to retrieve. This parameter can be a combination of the
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</para>
    </param>
    <param name="ResultantDescriptor">
      <para>A pointer to a buffer that receives a copy of the requested information from the specified security descriptor. The
<see cref="SECURITY_DESCRIPTOR" /> structure is returned in <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative</a> format.</para>
    </param>
    <param name="DescriptorLength">
      <para>Specifies the size, in bytes, of the buffer pointed to by the <i>ResultantDescriptor</i> parameter.</para>
    </param>
    <param name="ReturnLength">
      <para>A pointer to a variable the function sets to zero if the descriptor is copied successfully. If the buffer is too small for the security descriptor, this variable receives the number of bytes required. If this variable's value is greater than the value of the <i>DescriptorLength</i> parameter when the function returns, the function returns <b>FALSE</b> and none of the security descriptor is copied to the buffer.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function is intended for use by resource managers only. To implement the standard access control semantics for updating security descriptors, a resource manager should verify that the following conditions are met before calling <b>GetPrivateObjectSecurity</b>:</para>
      <list type="bullet">
        <item>
          <description>If the object's owner is being set, the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> must have either WRITE_OWNER permission or be the object's owner.</description>
        </item>
        <item>
          <description>If the object's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> is being set, the calling process must have either WRITE_DAC permission or be the object's owner.</description>
        </item>
        <item>
          <description>If the object's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> is being set, the SE_SECURITY_NAME privilege must be enabled for the calling process.</description>
        </item>
      </list>
      <para>If the preceding conditions are not met, a call to this function does not fail, however, standard access policy is not enforced.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control Overview</seealso>
    <seealso cref="CreatePrivateObjectSecurity" />
    <seealso cref="DestroyPrivateObjectSecurity" />
    <seealso cref="GetFileSecurity" />
    <seealso cref="GetKernelObjectSecurity" />
    <seealso cref="GetUserObjectSecurity" />
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</seealso>
    <seealso cref="SetPrivateObjectSecurity" />
  </member>
  <member name="Windows.GetSecurityDescriptorControl">
    <summary>
      <para>The <b>GetSecurityDescriptorControl</b> function retrieves a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> control and revision information.</para>
    </summary>
    <param name="pSecurityDescriptor">
      <para>A pointer to a
<see cref="SECURITY_DESCRIPTOR" /> structure whose control and revision information the function retrieves.</para>
    </param>
    <param name="pControl">
      <para>A pointer to a
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</a> structure that receives the security descriptor's control information.</para>
    </param>
    <param name="lpdwRevision">
      <para>A pointer to a variable that receives the security descriptor's revision value. This value is always set, even when <b>GetSecurityDescriptorControl</b> returns an error.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="GetSecurityDescriptorDacl" />
    <seealso cref="GetSecurityDescriptorGroup" />
    <seealso cref="GetSecurityDescriptorLength" />
    <seealso cref="GetSecurityDescriptorOwner" />
    <seealso cref="GetSecurityDescriptorSacl" />
    <seealso cref="IsValidSecurityDescriptor" />
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</seealso>
  </member>
  <member name="Windows.GetSecurityDescriptorDacl">
    <summary>
      <para>The <b>GetSecurityDescriptorDacl</b> function retrieves a pointer to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) in a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>.</para>
    </summary>
    <param name="pSecurityDescriptor">
      <para>A pointer to the
<see cref="SECURITY_DESCRIPTOR" /> structure that contains the DACL. The function retrieves a pointer to it.</para>
    </param>
    <param name="lpbDaclPresent">
      <para>A pointer to a value that indicates the presence of a DACL in the specified security descriptor. If <i>lpbDaclPresent</i> is <b>TRUE</b>, the security descriptor contains a DACL, and the remaining output parameters in this function receive valid values. If <i>lpbDaclPresent</i> is <b>FALSE</b>, the security descriptor does not contain a DACL, and the remaining output parameters do not receive valid values.</para>
      <para>A value of <b>TRUE</b> for <i>lpbDaclPresent</i> does not mean that <i>pDacl</i> is not <b>NULL</b>.  That is, <i>lpbDaclPresent</i> can be <b>TRUE</b> while <i>pDacl</i> is <b>NULL</b>, meaning that a <b>NULL</b> DACL is in effect.   A <b>NULL</b> DACL implicitly allows all access to an object and is not the same as an empty DACL. An empty DACL permits no access to an object.  For information about creating a proper DACL, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/creating-a-dacl">Creating a DACL</a>.</para>
    </param>
    <param name="pDacl">
      <para>A pointer to a pointer to an
<a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL). If a DACL exists, the function sets the pointer pointed to by <i>pDacl</i> to the address of the security descriptor's DACL. If a DACL does not exist, no value is stored.</para>
      <para>If the function stores a <b>NULL</b> value in the pointer pointed to by <i>pDacl</i>, the security descriptor has a <b>NULL</b> DACL. A <b>NULL</b> DACL implicitly allows all access to an object.</para>
      <para>If an application expects a non-<b>NULL</b> DACL but encounters a <b>NULL</b> DACL, the application should fail securely and not allow access.</para>
    </param>
    <param name="lpbDaclDefaulted">
      <para>A pointer to a flag set to the value of the SE_DACL_DEFAULTED flag in the
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</a> structure if a DACL exists for the security descriptor. If this flag is <b>TRUE</b>, the DACL was retrieved by a default mechanism; if <b>FALSE</b>, the DACL was explicitly specified by a user.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <seealso cref="GetSecurityDescriptorControl" />
    <seealso cref="GetSecurityDescriptorGroup" />
    <seealso cref="GetSecurityDescriptorLength" />
    <seealso cref="GetSecurityDescriptorOwner" />
    <seealso cref="GetSecurityDescriptorSacl" />
    <seealso cref="InitializeSecurityDescriptor" />
    <seealso cref="IsValidSecurityDescriptor" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</seealso>
    <seealso cref="SetSecurityDescriptorDacl" />
  </member>
  <member name="Windows.GetSecurityDescriptorGroup">
    <summary>
      <para>The <b>GetSecurityDescriptorGroup</b> function retrieves the primary group information from a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>.</para>
    </summary>
    <param name="pSecurityDescriptor">
      <para>A pointer to a
<see cref="SECURITY_DESCRIPTOR" /> structure whose primary group information the function retrieves.</para>
    </param>
    <param name="pGroup">
      <para>A pointer to a pointer to a
<a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) that identifies the primary group when the function returns. If the security descriptor does not contain a primary group, the function sets the pointer pointed to by <i>pGroup</i> to <b>NULL</b> and ignores the remaining output parameter, <i>lpbGroupDefaulted</i>. If the security descriptor contains a primary group, the function sets the pointer pointed to by <i>pGroup</i> to the address of the security descriptor's group SID and provides a valid value for the variable pointed to by <i>lpbGroupDefaulted</i>.</para>
    </param>
    <param name="lpbGroupDefaulted">
      <para>A pointer to a flag that is set to the value of the SE_GROUP_DEFAULTED flag in the
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</a> structure when the function returns. If the value stored in the variable pointed to by the <i>pGroup</i> parameter is <b>NULL</b>, no value is set.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <seealso cref="GetSecurityDescriptorControl" />
    <seealso cref="GetSecurityDescriptorDacl" />
    <seealso cref="GetSecurityDescriptorLength" />
    <seealso cref="GetSecurityDescriptorOwner" />
    <seealso cref="GetSecurityDescriptorSacl" />
    <seealso cref="IsValidSecurityDescriptor" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</seealso>
    <seealso cref="SetSecurityDescriptorGroup" />
  </member>
  <member name="Windows.GetSecurityDescriptorLength">
    <summary>
      <para>The <b>GetSecurityDescriptorLength</b> function returns the length, in bytes, of a structurally valid <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>. The length includes the length of all associated structures.</para>
    </summary>
    <param name="pSecurityDescriptor">
      <para>A pointer to the
<see cref="SECURITY_DESCRIPTOR" /> structure whose length the function returns. The pointer is assumed to be valid.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns the length, in bytes, of the <see cref="SECURITY_DESCRIPTOR" /> structure.</para>
      <para>If the <see cref="SECURITY_DESCRIPTOR" /> structure is not valid, the return value is undefined.</para>
    </returns>
    <remarks>
      <para>The minimum length of a security descriptor is SECURITY_DESCRIPTOR_MIN_LENGTH. A security descriptor of this length has no associated
<a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifiers</a> (SIDs) or
<a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control lists</a> (ACLs).</para>
    </remarks>
    <seealso cref="GetSecurityDescriptorControl" />
    <seealso cref="GetSecurityDescriptorDacl" />
    <seealso cref="GetSecurityDescriptorGroup" />
    <seealso cref="GetSecurityDescriptorOwner" />
    <seealso cref="GetSecurityDescriptorSacl" />
    <seealso cref="IsValidSecurityDescriptor" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SECURITY_DESCRIPTOR" />
  </member>
  <member name="Windows.GetSecurityDescriptorOwner">
    <summary>
      <para>The <b>GetSecurityDescriptorOwner</b> function retrieves the owner information from a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>.</para>
    </summary>
    <param name="pSecurityDescriptor">
      <para>A pointer to a
<see cref="SECURITY_DESCRIPTOR" /> structure whose owner information the function retrieves.</para>
    </param>
    <param name="pOwner">
      <para>A pointer to a pointer to a
<a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) that identifies the owner when the function returns. If the security descriptor does not contain an owner, the function sets the pointer pointed to by <i>pOwner</i> to <b>NULL</b> and ignores the remaining output parameter, <i>lpbOwnerDefaulted</i>. If the security descriptor contains an owner, the function sets the pointer pointed to by <i>pOwner</i> to the address of the security descriptor's owner SID and provides a valid value for the variable pointed to by <i>lpbOwnerDefaulted</i>.</para>
    </param>
    <param name="lpbOwnerDefaulted">
      <para>A pointer to a flag that is set to the value of the SE_OWNER_DEFAULTED flag in the
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</a> structure when the function returns. If the value stored in the variable pointed to by the <i>pOwner</i> parameter is <b>NULL</b>, no value is set.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <seealso cref="GetSecurityDescriptorControl" />
    <seealso cref="GetSecurityDescriptorDacl" />
    <seealso cref="GetSecurityDescriptorGroup" />
    <seealso cref="GetSecurityDescriptorLength" />
    <seealso cref="GetSecurityDescriptorSacl" />
    <seealso cref="IsValidSecurityDescriptor" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</seealso>
    <seealso cref="SetSecurityDescriptorOwner" />
  </member>
  <member name="Windows.GetSecurityDescriptorRMControl">
    <summary>
      <para>The <b>GetSecurityDescriptorRMControl</b> function retrieves the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">resource manager</a> control bits.</para>
    </summary>
    <param name="SecurityDescriptor">
      <para>A pointer to a
<see cref="SECURITY_DESCRIPTOR" /> structure that contains the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">resource manager</a> control bits. The value of the <b>Control</b> member is set to SE_RM_CONTROL_VALID.</para>
    </param>
    <param name="RMControl">
      <para>A pointer to a buffer that receives the resource manager control bits.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is ERROR_SUCCESS.</para>
      <para>If the function fails, the following value is returned.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <para>
              <b>ERROR_INVALID_DATA</b>
            </para>
          </description>
          <description>
            <para>The SE_RM_CONTROL_VALID bit flag is not set in the specified
<see cref="SECURITY_DESCRIPTOR" /> structure.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>The <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">resource manager</a> control bits are eight bits in the <b>Sbz1</b> member of the <see cref="SECURITY_DESCRIPTOR" /> structure that contains information specific to the resource manager accessing the structure. These bits should be accessed only through the <b>GetSecurityDescriptorRMControl</b> and
<see cref="SetSecurityDescriptorRMControl" /> functions.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso cref="SetSecurityDescriptorRMControl" />
  </member>
  <member name="Windows.GetSecurityDescriptorSacl">
    <summary>
      <para>The <b>GetSecurityDescriptorSacl</b> function retrieves a pointer to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) in a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>.</para>
    </summary>
    <param name="pSecurityDescriptor">
      <para>A pointer to the
<see cref="SECURITY_DESCRIPTOR" /> structure that contains the SACL to which the function retrieves a pointer.</para>
    </param>
    <param name="lpbSaclPresent">
      <para>A pointer to a flag the function sets to indicate the presence of a SACL in the specified security descriptor. If this parameter is <b>TRUE</b>, the security descriptor contains a SACL, and the remaining output parameters in this function receive valid values. If this parameter is <b>FALSE</b>, the security descriptor does not contain a SACL, and the remaining output parameters do not receive valid values.</para>
    </param>
    <param name="pSacl">
      <para>A pointer to a pointer to an
<a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL). If a SACL exists, the function sets the pointer pointed to by <i>pSacl</i> to the address of the security descriptor's SACL. If a SACL does not exist, no value is stored.</para>
      <para>If the function stores a <b>NULL</b> value in the pointer pointed to by <i>pSacl</i>, the security descriptor has a <b>NULL</b> SACL.</para>
    </param>
    <param name="lpbSaclDefaulted">
      <para>A pointer to a flag that is set to the value of the SE_SACL_DEFAULTED flag in the
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</a> structure if a SACL exists for the security descriptor.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <seealso cref="GetSecurityDescriptorControl" />
    <seealso cref="GetSecurityDescriptorDacl" />
    <seealso cref="GetSecurityDescriptorGroup" />
    <seealso cref="GetSecurityDescriptorLength" />
    <seealso cref="GetSecurityDescriptorOwner" />
    <seealso cref="InitializeSecurityDescriptor" />
    <seealso cref="IsValidSecurityDescriptor" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</seealso>
    <seealso cref="SetSecurityDescriptorSacl" />
  </member>
  <member name="Windows.GetSidIdentifierAuthority">
    <summary>
      <para>The <b>GetSidIdentifierAuthority</b> function returns a pointer to the
<see cref="SID_IDENTIFIER_AUTHORITY" /> structure in a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID).</para>
    </summary>
    <param name="pSid">
      <para>A pointer to the
<see cref="SID" /> structure for which a pointer to the
<see cref="SID_IDENTIFIER_AUTHORITY" /> structure is returned.</para>
      <para>This function does not handle <see cref="SID" /> structures that are not valid. Call the <see cref="IsValidSid" /> function to verify that the <b>SID</b> structure is valid before you call this function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the <see cref="SID_IDENTIFIER_AUTHORITY" /> structure for the specified
<see cref="SID" /> structure.</para>
      <para>If the function fails, the return value is undefined. The function fails if the <see cref="SID" /> structure pointed to by the <i>pSid</i> parameter is not valid. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function uses a 32-bit RID value. For applications that require a larger RID value, use
<see cref="CreateWellKnownSid" /> and related functions.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="CreateWellKnownSid" />
    <seealso cref="GetLengthSid" />
    <seealso cref="GetSidLengthRequired" />
    <seealso cref="GetSidSubAuthority" />
    <seealso cref="GetSidSubAuthorityCount" />
    <seealso cref="IsValidSid" />
    <seealso cref="SID" />
    <seealso cref="SID_IDENTIFIER_AUTHORITY" />
  </member>
  <member name="Windows.GetSidLengthRequired">
    <summary>
      <para>The <b>GetSidLengthRequired</b> function returns the length, in bytes, of the buffer required to store a SID with a specified number of subauthorities.</para>
    </summary>
    <param name="nSubAuthorityCount">
      <para>Specifies the number of subauthorities to be stored in the
<see cref="SID" /> structure.</para>
    </param>
    <returns>
      <para>The return value is the length, in bytes, of the buffer required to store the <see cref="SID" /> structure. This function cannot fail.</para>
    </returns>
    <remarks>
      <para>The <see cref="SID" /> structure specified in <i>nSubAuthorityCount</i> uses a 32-bit RID value. For applications that require longer RID values, use
<see cref="CreateWellKnownSid" /> and related functions.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso cref="AllocateAndInitializeSid" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="CreateWellKnownSid" />
    <seealso cref="GetLengthSid" />
    <seealso cref="GetSidIdentifierAuthority" />
    <seealso cref="GetSidSubAuthority" />
    <seealso cref="GetSidSubAuthorityCount" />
    <seealso cref="InitializeSid" />
    <seealso cref="IsValidSid" />
    <seealso cref="SID" />
  </member>
  <member name="Windows.GetSidSubAuthority">
    <summary>
      <para>The <b>GetSidSubAuthority</b> function returns a pointer to a specified subauthority in a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID). The subauthority value is a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">relative identifier</a> (RID).</para>
    </summary>
    <param name="pSid">
      <para>A pointer to the
<see cref="SID" /> structure from which a pointer to a subauthority is to be returned.</para>
      <para>This function does not handle <see cref="SID" /> structures that are not valid. Call the <see cref="IsValidSid" /> function to verify that the <b>SID</b> structure is valid before you call this function.</para>
    </param>
    <param name="nSubAuthority">
      <para>Specifies an index value identifying the subauthority array element whose address the function will return. The function performs no validation tests on this value. An application can call the <see cref="GetSidSubAuthorityCount" /> function to discover the range of acceptable values.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the specified <see cref="SID" /> subauthority. To get extended error information, call
<see cref="GetLastError" />.</para>
      <para>If the function fails, the return value is undefined. The function fails if the specified <see cref="SID" /> structure is not valid or if the index value specified by the <i>nSubAuthority</i> parameter is out of bounds.</para>
    </returns>
    <remarks>
      <para>The <see cref="SID" /> structure specified in <i>pSid</i> uses a 32-bit RID value. For applications that require longer RID values, use
<see cref="CreateWellKnownSid" /> and related functions.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="CreateWellKnownSid" />
    <seealso cref="GetLengthSid" />
    <seealso cref="GetSidIdentifierAuthority" />
    <seealso cref="GetSidLengthRequired" />
    <seealso cref="GetSidSubAuthorityCount" />
    <seealso cref="IsValidSid" />
    <seealso cref="SID" />
  </member>
  <member name="Windows.GetSidSubAuthorityCount">
    <summary>
      <para>The <b>GetSidSubAuthorityCount</b> function returns a pointer to the member in a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) structure that contains the subauthority count.</para>
    </summary>
    <param name="pSid">
      <para>A pointer to the
<see cref="SID" /> structure from which a pointer to the subauthority count is returned.</para>
      <para>This function does not handle <see cref="SID" /> structures that are not valid. Call the <see cref="IsValidSid" /> function to verify that the <b>SID</b> structure is valid before you call this function.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a pointer to the subauthority count for the specified <see cref="SID" /> structure.</para>
      <para>If the function fails, the return value is undefined. The function fails if the specified <see cref="SID" /> structure is not valid. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The SID structure specified in <i>pSid</i> uses a 32-bit value. For applications that require longer RID values, use
<see cref="CreateWellKnownSid" /> and related functions.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="CreateWellKnownSid" />
    <seealso cref="GetLengthSid" />
    <seealso cref="GetSidIdentifierAuthority" />
    <seealso cref="GetSidLengthRequired" />
    <seealso cref="GetSidSubAuthority" />
    <seealso cref="IsValidSid" />
    <seealso cref="SID" />
  </member>
  <member name="Windows.GetTokenInformation">
    <summary>
      <para>The <b>GetTokenInformation</b> function retrieves a specified type of information about an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a>. The calling process must have appropriate access rights to obtain the information.</para>
      <para>To determine if a user is a member of a specific group, use the
<see cref="CheckTokenMembership" /> function. To determine group membership for app container tokens, use the <see cref="CheckTokenMembershipEx" /> function.</para>
    </summary>
    <param name="TokenHandle">
      <para>A handle to an access token from which information is retrieved. If <i>TokenInformationClass</i> specifies TokenSource, the handle must have TOKEN_QUERY_SOURCE access. For all other <i>TokenInformationClass</i> values, the handle must have TOKEN_QUERY access.</para>
    </param>
    <param name="TokenInformationClass">
      <para>Specifies a value from the
<see cref="TOKEN_INFORMATION_CLASS" /> enumerated type to identify the type of information the function retrieves. Any callers who check the <b>TokenIsAppContainer</b> and have it return 0 should also verify that the caller token is not an identify level impersonation token. If the current token is not an app container but is an identity level token, you should return <b>AccessDenied</b>.</para>
    </param>
    <param name="TokenInformation">
      <para>A pointer to a buffer the function fills with the requested information. The structure put into this buffer depends upon the type of information specified by the <i>TokenInformationClass</i> parameter.</para>
    </param>
    <param name="TokenInformationLength">
      <para>Specifies the size, in bytes, of the buffer pointed to by the <i>TokenInformation</i> parameter. If <i>TokenInformation</i> is <b>NULL</b>, this parameter must be zero.</para>
    </param>
    <param name="ReturnLength">
      <para>A pointer to a variable that receives the number of bytes needed for the buffer pointed to by the <i>TokenInformation</i> parameter. If this value is larger than the value specified in the <i>TokenInformationLength</i> parameter, the function fails and stores no data in the buffer.</para>
      <para>If the value of the <i>TokenInformationClass</i> parameter is TokenDefaultDacl and the token has no default DACL, the function sets the variable pointed to by <i>ReturnLength</i> to <code>sizeof(</code><see cref="TOKEN_DEFAULT_DACL" /><code>)</code> and sets the <b>DefaultDacl</b> member of the <b>TOKEN_DEFAULT_DACL</b> structure to <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso cref="AdjustTokenGroups" />
    <seealso cref="AdjustTokenPrivileges" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="CheckTokenMembership" />
    <seealso cref="OpenProcessToken" />
    <seealso cref="OpenThreadToken" />
    <seealso cref="SECURITY_IMPERSONATION_LEVEL" />
    <seealso cref="SetTokenInformation" />
    <seealso cref="TOKEN_DEFAULT_DACL" />
    <seealso cref="TOKEN_GROUPS" />
    <seealso cref="TOKEN_GROUPS_AND_PRIVILEGES" />
    <seealso cref="TOKEN_INFORMATION_CLASS" />
    <seealso cref="TOKEN_OWNER" />
    <seealso cref="TOKEN_PRIMARY_GROUP" />
    <seealso cref="TOKEN_PRIVILEGES" />
    <seealso cref="TOKEN_SOURCE" />
    <seealso cref="TOKEN_STATISTICS" />
    <seealso cref="TOKEN_TYPE" />
    <seealso cref="TOKEN_USER" />
  </member>
  <member name="Windows.GetWindowsAccountDomainSid">
    <summary>
      <para>The <b>GetWindowsAccountDomainSid</b> function receives a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) and returns a SID representing the domain of that SID.</para>
    </summary>
    <param name="pSid">
      <para>A pointer to the SID to examine.</para>
    </param>
    <param name="pDomainSid">
      <para>Pointer that <b>GetWindowsAccountDomainSid</b> fills with a pointer to a SID representing the domain.</para>
    </param>
    <param name="cbDomainSid">
      <para>A pointer to a <b>DWORD</b> that <b>GetWindowsAccountDomainSid</b> fills with the size of the domain SID, in bytes.</para>
    </param>
    <returns>
      <para>Returns <b>TRUE</b> if successful.</para>
      <para>Otherwise, returns <b>FALSE</b>. For extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
  </member>
  <member name="Windows.ImpersonateAnonymousToken">
    <summary>
      <para>The <b>ImpersonateAnonymousToken</b> function enables the specified thread to impersonate the system's anonymous logon token. To ensure that a token matches the operating system's concept of anonymous access, this function should be called before attempting network access to generate an anonymous token on the remote server.</para>
    </summary>
    <param name="ThreadHandle">
      <para>A handle to the thread to impersonate the system's anonymous logon token. The thread handle must have the THREAD_IMPERSONATE access right in order for the thread to impersonate the system's anonymous logon token.</para>
      <para>To grant such access, the thread must be opened by calling <see cref="OpenThread" /> with the desired access right to THREAD_IMPERSONATE.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
      <para>An error of ACCESS_DENIED might indicate that the token is for a restricted process. Use <see cref="OpenProcessToken" /> and <see cref="IsTokenRestricted" /> to check if the process is restricted. ACCESS_DENIED is also returned if the thread handle lacks right access to THREAD_IMPERSONATE.</para>
    </returns>
    <remarks>
      <para>Anonymous tokens do not include the "Everyone" Group SID unless the system default has been overridden by setting the HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\EveryoneIncludesAnonymous registry value to DWORD=1.</para>
      <para>To cancel the impersonation, call
<see cref="RevertToSelf" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/procthread/thread-security-and-access-rights">Thread Security and Access Rights</seealso>
    <seealso cref="RevertToSelf" />
  </member>
  <member name="Windows.ImpersonateLoggedOnUser">
    <summary>
      <para>The <b>ImpersonateLoggedOnUser</b> function lets the calling thread impersonate the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security context</a> of a logged-on user. The user is represented by a token handle.</para>
    </summary>
    <param name="hToken">
      <para>A handle to a primary or impersonation <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a> that represents a logged-on user. This can be a token handle returned by a call to
<see cref="LogonUser" />,
<see cref="CreateRestrictedToken" />,
<see cref="DuplicateToken" />,
<see cref="DuplicateTokenEx" />,
<see cref="OpenProcessToken" />, or
<see cref="OpenThreadToken" /> functions. If <i>hToken</i> is a handle to a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a>, the token must have <b>TOKEN_QUERY</b> and <b>TOKEN_DUPLICATE</b> access. If <i>hToken</i> is a handle to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a>, the token must have <b>TOKEN_QUERY</b> and <b>TOKEN_IMPERSONATE</b> access.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The impersonation lasts until the thread exits or until it calls
<see cref="RevertToSelf" />.</para>
      <para>The calling thread does not need to have any particular <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a> to call <b>ImpersonateLoggedOnUser</b>.</para>
      <para>If the call to <b>ImpersonateLoggedOnUser</b> fails, the client connection is not impersonated and the client request is made in the security context of the process. If the process is running as a highly privileged account, such as LocalSystem, or as a member of an administrative group, the user may be able to perform actions they would otherwise be disallowed. Therefore, it is important to always check the return value of the call, and if it fails, raise an error; do not continue execution of the client request.</para>
      <para>All impersonate functions, including <b>ImpersonateLoggedOnUser</b> allow the requested impersonation if one of the following is true:</para>
      <list type="bullet">
        <item>
          <description>The requested impersonation level of the token is less than <b>SecurityImpersonation</b>, such as <b>SecurityIdentification</b> or <b>SecurityAnonymous</b>.</description>
        </item>
        <item>
          <description>The caller has the <b>SeImpersonatePrivilege</b> privilege.</description>
        </item>
        <item>
          <description>A process (or another process in the caller's logon session) created the token using explicit credentials through <see cref="LogonUser" /> or <see cref="LsaLogonUser" /> function.</description>
        </item>
        <item>
          <description>The authenticated identity is same as the caller.</description>
        </item>
      </list>
      <b>Windows XP with SP1 and earlier:  </b>The <b>SeImpersonatePrivilege</b> privilege is not supported.
<para>For more information about impersonation, see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-impersonation">Client Impersonation</a>.</para></remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control Overview</seealso>
    <seealso cref="CreateProcessAsUser" />
    <seealso cref="CreateRestrictedToken" />
    <seealso cref="DuplicateToken" />
    <seealso cref="DuplicateTokenEx" />
    <seealso cref="LogonUser" />
    <seealso cref="OpenProcessToken" />
    <seealso cref="OpenThreadToken" />
    <seealso cref="RevertToSelf" />
  </member>
  <member name="Windows.ImpersonateSelf">
    <summary>
      <para>The <b>ImpersonateSelf</b> function obtains an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a> that impersonates the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security context</a> of the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a>. The token is assigned to the calling thread.</para>
    </summary>
    <param name="ImpersonationLevel">
      <para>Specifies a
<see cref="SECURITY_IMPERSONATION_LEVEL" /> enumerated type that supplies the impersonation level of the new token.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>ImpersonateSelf</b> function is used for tasks such as enabling a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privilege</a> for a single thread rather than for the entire process or for changing the default <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) for a single thread.</para>
      <para>The server can call the
<see cref="RevertToSelf" /> function when the impersonation is complete.</para>
      <para>For this function to succeed, the DACL protecting the process token must grant the TOKEN_DUPLICATE right to itself.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control Overview</seealso>
    <seealso cref="DuplicateToken" />
    <seealso cref="ImpersonateNamedPipeClient" />
    <seealso cref="RevertToSelf" />
    <seealso cref="SECURITY_IMPERSONATION_LEVEL" />
  </member>
  <member name="Windows.InitializeAcl">
    <summary>
      <para>The <b>InitializeAcl</b> function initializes a new <see cref="ACL" /> structure.</para>
    </summary>
    <param name="pAcl">
      <para>A pointer to an
<see cref="ACL" /> structure  to be initialized by this function. Allocate memory for <i>pAcl</i> before calling this function.</para>
    </param>
    <param name="nAclLength">
      <para>The length, in bytes, of the buffer pointed to by the <i>pAcl</i> parameter. This value must be large enough to contain the <see cref="ACL" /> header and all of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) to be stored in the <b>ACL</b>. In addition, this value must be <b>DWORD</b>-aligned. For more information about calculating the size of an <b>ACL</b>, see Remarks.</para>
    </param>
    <param name="dwAclRevision">
      <para>The revision level of the <see cref="ACL" /> structure being created.</para>
      <para>This value can be ACL_REVISION or ACL_REVISION_DS. Use ACL_REVISION_DS if the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) supports object-specific ACEs.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>InitializeAcl</b> function creates an empty <see cref="ACL" /> structure; the <b>ACL</b> contains no <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/ace">ACEs</a>. Applying an empty <b>ACL</b> to an object denies all access to that object.</para>
      <para>The initial size of the <see cref="ACL" /> depends on the number of <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/ace">ACEs</a> you plan to add to the <b>ACL</b> before you use it. For example, if the <b>ACL</b> is to contain an ACE for a user and group, you would initialize the <b>ACL</b> based on two ACEs. For details about modifying an existing <b>ACL</b>, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/modifying-the-acls-of-an-object-in-c--">Modifying the ACLs of an Object</a>.</para>
      <para>To calculate the initial size of an <see cref="ACL" />, add the following together, and then align the result to the nearest <b>DWORD</b>:</para>
      <list type="bullet">
        <item>
          <description>Size of the <see cref="ACL" /> structure.</description>
        </item>
        <item>
          <description>Size of each <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/ace">ACE</a> structure that the <see cref="ACL" /> is to contain minus the <b>SidStart</b> member (<b>DWORD</b>) of the ACE.</description>
        </item>
        <item>
          <description>Length of the SID that each <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/ace">ACE</a> is to contain.</description>
        </item>
      </list>
      <h4>Examples</h4>
      <para>The following example calls the <b>InitializeAcl</b> function. The size of the  <see cref="ACL" /> is  based on three allow-access <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/ace">ACEs</a>. As an option, you can use <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-definition-language">security descriptor definition language</a> (SDDL) to create the ACL. For details, see <a href="https://docs.microsoft.com//windows/desktop/SecBP/creating-a-dacl">Creating a DACL</a>.</para>
      <para>The example also omits a step for simplification. For more information, see the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/taking-object-ownership-in-c--">Taking Object Ownership</a> example. You must call the <see cref="FreeSid" /> function at the end of the example code due to calling the <see cref="AllocateAndInitializeSid" /> function.</para>
      <code>#include &lt;windows.h&gt;
#include &lt;Winbase.h&gt;
#pragma comment(lib, "duser.lib")

#define NUM_OF_ACES 3

void main()
{
    PACL pAcl = NULL;
    DWORD cbAcl = 0;
    PSID psids[NUM_OF_ACES];

    // Allocate and initialize SIDs.
    // Step omitted - See Taking Object Ownership example.

    // Add the SID for each ACE to psids.
    cbAcl = sizeof(ACL) +
        ((sizeof(ACCESS_ALLOWED_ACE)) * NUM_OF_ACES);
    for (int i = 0; i &lt; NUM_OF_ACES; i++)
    {
        cbAcl += GetLengthSid(psids[i]) - sizeof(DWORD);
    }

    // Align cbAcl to a DWORD.
    cbAcl = (cbAcl + (sizeof(DWORD) - 1)) &amp;amp;amp;amp;amp;amp; 0xfffffffc;

    pAcl = (ACL*)LocalAlloc(LPTR, cbAcl);
    if (pAcl)
    {
        if (InitializeAcl(pAcl, cbAcl, ACL_REVISION))
        {

            // Add the ACEs to the ACL.
            // Add the ACL to the object's security descriptor.
        }
        else
        {

            // Handle error.
        }
    }
    {

        // Handle error.
    }

    // Free pAcl when finished.
    // Call FreeSid when finished.
}

</code>
    </remarks>
    <seealso cref="ACCESS_ALLOWED_ACE" />
    <seealso cref="ACCESS_DENIED_ACE" />
    <seealso cref="ACL" />
    <seealso cref="AddAccessAllowedAce" />
    <seealso cref="AddAccessDeniedAce" />
    <seealso cref="AddAce" />
    <seealso cref="AddAuditAccessAce" />
    <seealso cref="DeleteAce" />
    <seealso cref="GetAce" />
    <seealso cref="GetAclInformation" />
    <seealso cref="IsValidAcl" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SID" />
    <seealso cref="SetAclInformation" />
  </member>
  <member name="Windows.InitializeSecurityDescriptor">
    <summary>
      <para>The <b>InitializeSecurityDescriptor</b> function initializes a new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>.</para>
    </summary>
    <param name="pSecurityDescriptor">
      <para>A pointer to a
<see cref="SECURITY_DESCRIPTOR" /> structure that the function initializes.</para>
    </param>
    <param name="dwRevision">
      <para>The revision level to assign to the security descriptor. This parameter must be SECURITY_DESCRIPTOR_REVISION.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>InitializeSecurityDescriptor</b> function initializes a security descriptor in <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">absolute</a> format, rather than <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative</a> format.</para>
      <para>The <b>InitializeSecurityDescriptor</b> function initializes a security descriptor to have no <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL), no <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL), no owner, no primary group, and all control flags set to <b>FALSE</b> (<b>NULL</b>). Thus, except for its revision level, it is empty.</para>
      <h4>Examples</h4>
      <para>For an example that uses this function, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/creating-a-security-descriptor-for-a-new-object-in-c--">Creating a Security Descriptor for a New Object</a>.</para>
    </remarks>
    <seealso cref="GetSecurityDescriptorControl" />
    <seealso cref="GetSecurityDescriptorDacl" />
    <seealso cref="GetSecurityDescriptorGroup" />
    <seealso cref="GetSecurityDescriptorLength" />
    <seealso cref="GetSecurityDescriptorOwner" />
    <seealso cref="GetSecurityDescriptorSacl" />
    <seealso cref="IsValidSecurityDescriptor" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso cref="SetSecurityDescriptorDacl" />
    <seealso cref="SetSecurityDescriptorGroup" />
    <seealso cref="SetSecurityDescriptorOwner" />
    <seealso cref="SetSecurityDescriptorSacl" />
  </member>
  <member name="Windows.InitializeSid">
    <summary>
      <para>The <b>InitializeSid</b> function initializes a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID).</para>
    </summary>
    <param name="Sid">
      <para>A pointer to a
<see cref="SID" /> structure to be initialized.</para>
    </param>
    <param name="pIdentifierAuthority">
      <para>A pointer to a
<see cref="SID_IDENTIFIER_AUTHORITY" /> structure to set in the <see cref="SID" /> structure.</para>
    </param>
    <param name="nSubAuthorityCount">
      <para>Specifies the number of subauthorities to set in the <see cref="SID" />. Values of the subauthority must be set separately, as described in the following Remarks section.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>Although the <b>InitializeSid</b> function sets the number of subauthorities for the SID, it does not set the subauthority values. This must be done separately, using functions such as <see cref="GetSidSubAuthority" />.</para>
      <para>An application can use the <see cref="AllocateAndInitializeSid" /> function to initialize a SID and set its subauthority values.</para>
      <para>This function uses a 32-bit RID value. For applications that require a larger RID value, use
<see cref="CreateWellKnownSid" />.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso cref="AllocateAndInitializeSid" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="CreateWellKnownSid" />
    <seealso cref="GetLengthSid" />
    <seealso cref="GetSidIdentifierAuthority" />
    <seealso cref="GetSidLengthRequired" />
    <seealso cref="GetSidSubAuthority" />
    <seealso cref="GetSidSubAuthorityCount" />
    <seealso cref="IsValidSid" />
    <seealso cref="SID" />
    <seealso cref="SID_IDENTIFIER_AUTHORITY" />
  </member>
  <member name="Windows.IsTokenRestricted">
    <summary>
      <para>The <b>IsTokenRestricted</b> function indicates whether a token contains a list of restricted <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifiers</a> (SIDs).</para>
    </summary>
    <param name="TokenHandle">
      <para>A handle to an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a> to test.</para>
    </param>
    <returns>
      <para>If the token contains a list of restricting SIDs, the return value is nonzero.</para>
      <para>If the token does not contain a list of restricting SIDs, the return value is zero.</para>
      <para>If an error occurs, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The
<see cref="CreateRestrictedToken" /> function can restrict a token by disabling SIDs, deleting privileges, and specifying a list of restricting SIDs. The <b>IsTokenRestricted</b> function checks only for the list of restricting SIDs. If a token does not have any restricting SIDs, <b>IsTokenRestricted</b> returns <b>FALSE</b>, even though the token was created by a call to <b>CreateRestrictedToken</b>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="CreateRestrictedToken" />
  </member>
  <member name="Windows.IsValidAcl">
    <summary>
      <para>The <b>IsValidAcl</b> function validates an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL).</para>
    </summary>
    <param name="pAcl">
      <para>A pointer to an
<see cref="ACL" /> structure validated by this function. This value must not be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the ACL is valid, the function returns nonzero.</para>
      <para>If the ACL is not valid, the function returns zero. There is no extended error information for this function; do not call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function checks the revision level of the ACL and verifies that the number of <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs) specified in the <b>AceCount</b> member of the <see cref="ACL" /> structure fits the space specified by the <b>AclSize</b> member of the <b>ACL</b> structure.</para>
      <para>If <i>pAcl</i> is <b>NULL</b>, the application will fail with an access violation.</para>
    </remarks>
    <seealso cref="ACL" />
    <seealso cref="GetAclInformation" />
    <seealso cref="InitializeAcl" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
  </member>
  <member name="Windows.IsValidSecurityDescriptor">
    <summary>
      <para>The <b>IsValidSecurityDescriptor</b> function determines whether the components of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> are valid.</para>
    </summary>
    <param name="pSecurityDescriptor">
      <para>A pointer to a
<see cref="SECURITY_DESCRIPTOR" /> structure that the function validates.</para>
    </param>
    <returns>
      <para>If the components of the security descriptor are valid, the return value is nonzero.</para>
      <para>If any of the components of the security descriptor are not valid, the return value is zero. There is no extended error information for this function; do not call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>IsValidSecurityDescriptor</b> function checks the validity of the components that are present in the security descriptor. It does not verify whether certain components are present nor does it verify the contents of the individual ACE or ACL.</para>
    </remarks>
    <seealso cref="GetSecurityDescriptorControl" />
    <seealso cref="GetSecurityDescriptorDacl" />
    <seealso cref="GetSecurityDescriptorGroup" />
    <seealso cref="GetSecurityDescriptorLength" />
    <seealso cref="GetSecurityDescriptorOwner" />
    <seealso cref="GetSecurityDescriptorSacl" />
    <seealso cref="InitializeSecurityDescriptor" />
    <seealso cref="IsValidAcl" />
    <seealso cref="IsValidSid" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso cref="SetSecurityDescriptorDacl" />
    <seealso cref="SetSecurityDescriptorGroup" />
    <seealso cref="SetSecurityDescriptorOwner" />
    <seealso cref="SetSecurityDescriptorSacl" />
  </member>
  <member name="Windows.IsValidSid">
    <summary>
      <para>The <b>IsValidSid</b> function validates a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) by verifying that the revision number is within a known range, and that the number of subauthorities is less than the maximum.</para>
    </summary>
    <param name="pSid">
      <para>A pointer to the
<see cref="SID" /> structure to validate. This parameter cannot be <b>NULL</b>.</para>
    </param>
    <returns>
      <para>If the <see cref="SID" /> structure is valid, the return value is nonzero.</para>
      <para>If the <see cref="SID" /> structure is not valid, the return value is zero. There is no extended error information for this function; do not call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If <i>pSid</i> is <b>NULL</b>, the application will fail with an access violation.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="GetLengthSid" />
    <seealso cref="GetSidIdentifierAuthority" />
    <seealso cref="GetSidLengthRequired" />
    <seealso cref="GetSidSubAuthority" />
    <seealso cref="GetSidSubAuthorityCount" />
    <seealso cref="SID" />
  </member>
  <member name="Windows.IsWellKnownSid">
    <summary>
      <para>The <b>IsWellKnownSid</b> function compares a SID to a well-known SID and returns <b>TRUE</b> if they match.</para>
    </summary>
    <param name="pSid">
      <para>A pointer to the <see cref="SID" /> to test.</para>
    </param>
    <param name="WellKnownSidType">
      <para>Member of the
<see cref="WELL_KNOWN_SID_TYPE" /> enumeration to compare with the SID at <i>pSid</i>.</para>
    </param>
    <returns>
      <para>Returns <b>TRUE</b> if the SID at <i>pSid</i> matches the well-known SID indicated by <i>WellKnownSidType</i>.</para>
      <para>Otherwise, returns <b>FALSE</b>.</para>
    </returns>
    <seealso cref="CreateWellKnownSid" />
    <seealso cref="SID" />
    <seealso cref="WELL_KNOWN_SID_TYPE" />
  </member>
  <member name="Windows.MakeAbsoluteSD">
    <summary>
      <para>The <b>MakeAbsoluteSD</b> function creates a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> in <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">absolute</a> format by using a security descriptor in <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative</a> format as a template.</para>
    </summary>
    <param name="pSelfRelativeSecurityDescriptor">
      <para>A pointer to a
<see cref="SECURITY_DESCRIPTOR" /> structure in self-relative format. The function creates an absolute-format version of this security descriptor without modifying the original security descriptor.</para>
    </param>
    <param name="pAbsoluteSecurityDescriptor">
      <para>A pointer to a buffer that the function fills with the main body of an absolute-format security descriptor. This information is formatted as a <see cref="SECURITY_DESCRIPTOR" /> structure.</para>
    </param>
    <param name="lpdwAbsoluteSecurityDescriptorSize">
      <para>A pointer to a variable that specifies the size of the buffer pointed to by the <i>pAbsoluteSD</i> parameter. If the buffer is not large enough for the security descriptor, the function fails and sets this variable to the minimum required size.</para>
    </param>
    <param name="pDacl">
      <para>A pointer to a buffer the function fills with the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) of the absolute-format security descriptor. The main body of the absolute-format security descriptor references this pointer.</para>
    </param>
    <param name="lpdwDaclSize">
      <para>A pointer to a variable that specifies the size of the buffer pointed to by the <i>pDacl</i> parameter. If the buffer is not large enough for the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL), the function fails and sets this variable to the minimum required size.</para>
    </param>
    <param name="pSacl">
      <para>A pointer to a buffer the function fills with the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) of the absolute-format security descriptor. The main body of the absolute-format security descriptor references this pointer.</para>
    </param>
    <param name="lpdwSaclSize">
      <para>A pointer to a variable that specifies the size of the buffer pointed to by the <i>pSacl</i> parameter. If the buffer is not large enough for the ACL, the function fails and sets this variable to the minimum required size.</para>
    </param>
    <param name="pOwner">
      <para>A pointer to a buffer the function fills with the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID) of the owner of the absolute-format security descriptor. The main body of the absolute-format security descriptor references this pointer.</para>
    </param>
    <param name="lpdwOwnerSize">
      <para>A pointer to a variable that specifies the size of the buffer pointed to by the <i>pOwner</i> parameter. If the buffer is not large enough for the SID, the function fails and sets this variable to the minimum required size.</para>
    </param>
    <param name="pPrimaryGroup">
      <para>A pointer to a buffer the function fills with the SID of the absolute-format security descriptor's primary group. The main body of the absolute-format security descriptor references this pointer.</para>
    </param>
    <param name="lpdwPrimaryGroupSize">
      <para>A pointer to a variable that specifies the size of the buffer pointed to by the <i>pPrimaryGroup</i> parameter. If the buffer is not large enough for the SID, the function fails and sets this variable to the minimum required size.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />. Possible return codes include, but are not limited to, the following.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </description>
              </item>
              <item>
                <description>0x7A</description>
              </item>
            </list>
          </description>
          <description>
            <para>One or more of the buffers is too small.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>A security descriptor in absolute format contains pointers to the information it contains, rather than the information itself. A security descriptor in self-relative format contains the information in a contiguous block of memory. In a self-relative security descriptor, a
<see cref="SECURITY_DESCRIPTOR" /> structure always starts the information, but the security descriptor's other components can follow the structure in any order. Instead of using memory addresses, the components of the self-relative security descriptor are identified by offsets from the beginning of the security descriptor. This format is useful when a security descriptor must be stored on a floppy disk or transmitted by means of a communications protocol.</para>
      <para>A server that copies secured objects to various media can use the <b>MakeAbsoluteSD</b> function to create an absolute security descriptor from a self-relative security descriptor and the
<see cref="MakeSelfRelativeSD" /> function to create a self-relative security descriptor from an absolute security descriptor.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="MakeSelfRelativeSD" />
    <seealso cref="SECURITY_DESCRIPTOR" />
  </member>
  <member name="Windows.MakeSelfRelativeSD">
    <summary>
      <para>The <b>MakeSelfRelativeSD</b> function creates a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> in <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative</a> format by using a security descriptor in <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">absolute</a> format as a template.</para>
    </summary>
    <param name="pAbsoluteSecurityDescriptor">
      <para>A pointer to a
<see cref="SECURITY_DESCRIPTOR" /> structure in absolute format. The function creates a version of this security descriptor in self-relative format without modifying the original.</para>
    </param>
    <param name="pSelfRelativeSecurityDescriptor">
      <para>A pointer to a buffer the function fills with a security descriptor in self-relative format.</para>
    </param>
    <param name="lpdwBufferLength">
      <para>A pointer to a variable specifying the size of the buffer pointed to by the <i>pSelfRelativeSD</i> parameter. If the buffer is not large enough for the security descriptor, the function fails and sets this variable to the minimum required size.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.  Possible return codes include, but are not limited to, the following.</para>
      <list type="table">
        <listheader>
          <description>Return code/value</description>
          <description>Description</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>ERROR_INSUFFICIENT_BUFFER</b>
                </description>
              </item>
              <item>
                <description>0x7A</description>
              </item>
            </list>
          </description>
          <description>
            <para>One or more of the buffers is too small.</para>
          </description>
        </item>
      </list>
    </returns>
    <remarks>
      <para>A security descriptor in absolute format contains pointers to the information it contains, rather than containing the information itself. A security descriptor in self-relative format contains the information in a contiguous block of memory. In a self-relative security descriptor, a
<see cref="SECURITY_DESCRIPTOR" /> structure always starts the information, but the security descriptor's other components can follow the structure in any order. Instead of using memory addresses, the components of the security descriptor are identified by offsets from the beginning of the security descriptor. This format is useful when a security descriptor must be stored on a floppy disk or transmitted by means of a communications protocol.</para>
      <para>A server that copies secured objects to various media can use the <b>MakeSelfRelativeSD</b> function to create a self-relative security descriptor from an absolute security descriptor and the
<see cref="MakeAbsoluteSD" /> function to create an absolute security descriptor from a self-relative security descriptor.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="MakeAbsoluteSD" />
    <seealso cref="SECURITY_DESCRIPTOR" />
  </member>
  <member name="Windows.MapGenericMask">
    <summary>
      <para>The <b>MapGenericMask</b> function maps the generic access rights in an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> to specific and standard access rights. The function applies a mapping supplied in a
<see cref="GENERIC_MAPPING" /> structure.</para>
    </summary>
    <param name="AccessMask">
      <para>A pointer to an access mask.</para>
    </param>
    <param name="GenericMapping">
      <para>A pointer to a
<see cref="GENERIC_MAPPING" /> structure specifying a mapping of generic access types to specific and standard access types.</para>
    </param>
    <remarks>
      <para>After calling the <b>MapGenericMask</b> function, the access mask pointed to by the <i>AccessMask</i> parameter has none of its generic bits (GenericRead, GenericWrite, GenericExecute, or GenericAll) or undefined bits set, although it can have other bits set. If bits other than the generic bits are provided on input, this function does not clear them.</para>
      <h4>Examples</h4>
      <para>For an example that uses this function, see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/verifying-client-access-with-acls-in-c--">Verifying Client Access with ACLs</a>.</para>
    </remarks>
    <seealso cref="AccessCheck" />
    <seealso cref="AreAllAccessesGranted" />
    <seealso cref="AreAnyAccessesGranted" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control Overview</seealso>
    <seealso cref="GENERIC_MAPPING" />
  </member>
  <member name="Windows.ObjectCloseAuditAlarm">
    <summary>
      <para>The <b>ObjectCloseAuditAlarm</b> function generates an audit message in the security event log when a handle to a private object is deleted. Alarms are not currently supported.</para>
    </summary>
    <param name="SubsystemName">
      <para>A pointer to a null-terminated string specifying the name of the subsystem calling the function. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="HandleId">
      <para>A unique value representing the client's handle to the object. This should be the same value that was passed to the <see cref="AccessCheckAndAuditAlarm" /> or <see cref="ObjectOpenAuditAlarm" /> function.</para>
    </param>
    <param name="GenerateOnClose">
      <para>Specifies a flag set by a call to the <see cref="AccessCheckAndAuditAlarm" /> or <b>ObjectCloseAuditAlarm</b> function when the object handle is created. If this flag is <b>TRUE</b>, the function generates an audit message. If it is <b>FALSE</b>, the function does not generate an audit message.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>ObjectCloseAuditAlarm</b> function requires the calling application to have the SE_AUDIT_NAME privilege enabled. The test for this privilege is always performed against the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> of the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a>, allowing the calling process to impersonate a client</para>
    </remarks>
    <seealso cref="AccessCheckAndAuditAlarm" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control Overview</seealso>
    <seealso cref="ObjectDeleteAuditAlarm" />
    <seealso cref="ObjectOpenAuditAlarm" />
    <seealso cref="ObjectPrivilegeAuditAlarm" />
  </member>
  <member name="Windows.ObjectCloseAuditAlarmW">
    <summary>
      <para>The <b>ObjectCloseAuditAlarm</b> function generates an audit message in the security event log when a handle to a private object is deleted. Alarms are not currently supported.</para>
    </summary>
    <param name="SubsystemName">
      <para>A pointer to a null-terminated string specifying the name of the subsystem calling the function. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="HandleId">
      <para>A unique value representing the client's handle to the object. This should be the same value that was passed to the <see cref="AccessCheckAndAuditAlarm" /> or <see cref="ObjectOpenAuditAlarm" /> function.</para>
    </param>
    <param name="GenerateOnClose">
      <para>Specifies a flag set by a call to the <see cref="AccessCheckAndAuditAlarm" /> or <b>ObjectCloseAuditAlarm</b> function when the object handle is created. If this flag is <b>TRUE</b>, the function generates an audit message. If it is <b>FALSE</b>, the function does not generate an audit message.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>ObjectCloseAuditAlarm</b> function requires the calling application to have the SE_AUDIT_NAME privilege enabled. The test for this privilege is always performed against the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> of the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a>, allowing the calling process to impersonate a client</para>
    </remarks>
    <seealso cref="AccessCheckAndAuditAlarm" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control Overview</seealso>
    <seealso cref="ObjectDeleteAuditAlarm" />
    <seealso cref="ObjectOpenAuditAlarm" />
    <seealso cref="ObjectPrivilegeAuditAlarm" />
  </member>
  <member name="Windows.ObjectDeleteAuditAlarm">
    <summary>
      <para>The <b>ObjectDeleteAuditAlarm</b> function generates audit messages when an object is deleted. Alarms are not currently supported.</para>
    </summary>
    <param name="SubsystemName">
      <para>A pointer to a null-terminated string specifying the name of the subsystem calling the function. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="HandleId">
      <para>Specifies a unique value representing the client's handle to the object. This must be the same value that was passed to the <see cref="AccessCheckAndAuditAlarm" /> or <see cref="ObjectOpenAuditAlarm" /> function.</para>
    </param>
    <param name="GenerateOnClose">
      <para>Specifies a flag set by a call to the <see cref="AccessCheckAndAuditAlarm" /> or
<see cref="ObjectOpenAuditAlarm" /> function when the object handle is created.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a nonzero value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>ObjectDeleteAuditAlarm</b> function requires the calling application to have the SE_AUDIT_NAME privilege enabled. The test for this privilege is always performed against the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> of the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a>, allowing the calling process to impersonate a client.</para>
    </remarks>
    <seealso cref="AccessCheck" />
    <seealso cref="AccessCheckAndAuditAlarm" />
    <seealso cref="AreAllAccessesGranted" />
    <seealso cref="AreAnyAccessesGranted" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso cref="MapGenericMask" />
    <seealso cref="ObjectCloseAuditAlarm" />
    <seealso cref="ObjectOpenAuditAlarm" />
    <seealso cref="ObjectPrivilegeAuditAlarm" />
    <seealso cref="PrivilegeCheck" />
    <seealso cref="PrivilegedServiceAuditAlarm" />
  </member>
  <member name="Windows.ObjectDeleteAuditAlarmW">
    <summary>
      <para>The <b>ObjectDeleteAuditAlarm</b> function generates audit messages when an object is deleted. Alarms are not currently supported.</para>
    </summary>
    <param name="SubsystemName">
      <para>A pointer to a null-terminated string specifying the name of the subsystem calling the function. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="HandleId">
      <para>Specifies a unique value representing the client's handle to the object. This must be the same value that was passed to the <see cref="AccessCheckAndAuditAlarm" /> or <see cref="ObjectOpenAuditAlarm" /> function.</para>
    </param>
    <param name="GenerateOnClose">
      <para>Specifies a flag set by a call to the <see cref="AccessCheckAndAuditAlarm" /> or
<see cref="ObjectOpenAuditAlarm" /> function when the object handle is created.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is a nonzero value.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>ObjectDeleteAuditAlarm</b> function requires the calling application to have the SE_AUDIT_NAME privilege enabled. The test for this privilege is always performed against the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> of the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a>, allowing the calling process to impersonate a client.</para>
    </remarks>
    <seealso cref="AccessCheck" />
    <seealso cref="AccessCheckAndAuditAlarm" />
    <seealso cref="AreAllAccessesGranted" />
    <seealso cref="AreAnyAccessesGranted" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso cref="MapGenericMask" />
    <seealso cref="ObjectCloseAuditAlarm" />
    <seealso cref="ObjectOpenAuditAlarm" />
    <seealso cref="ObjectPrivilegeAuditAlarm" />
    <seealso cref="PrivilegeCheck" />
    <seealso cref="PrivilegedServiceAuditAlarm" />
  </member>
  <member name="Windows.ObjectOpenAuditAlarm">
    <summary>
      <para>The <b>ObjectOpenAuditAlarm</b> function generates audit messages when a client application attempts to gain access to an object or to create a new one. Alarms are not currently supported.</para>
    </summary>
    <param name="SubsystemName">
      <para>A pointer to a <b>null</b>-terminated string specifying the name of the subsystem calling the function. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="HandleId">
      <para>A pointer to a unique value representing the client's handle to the object. If the access is denied, this parameter is ignored.</para>
      <para>For cross-platform compatibility, the value addressed by this pointer must be sizeof(LPVOID) bytes long.</para>
    </param>
    <param name="ObjectTypeName">
      <para>A pointer to a <b>null</b>-terminated string specifying the type of object to which the client is requesting access. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="ObjectName">
      <para>A pointer to a <b>null</b>-terminated string specifying the name of the object to which the client is requesting access. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="pSecurityDescriptor">
      <para>A pointer to the <see cref="SECURITY_DESCRIPTOR" /> structure for the object being accessed.</para>
    </param>
    <param name="ClientToken">
      <para>Identifies an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a> representing the client requesting the operation. This handle must be obtained by opening the token of a thread impersonating the client. The token must be open for TOKEN_QUERY access.</para>
    </param>
    <param name="DesiredAccess">
      <para>Specifies the desired <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a>. This mask must have been previously mapped by the <see cref="MapGenericMask" /> function to contain no generic access rights.</para>
    </param>
    <param name="GrantedAccess">
      <para>Specifies an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> indicating which access rights are granted. This access mask is intended to be the same value set by one of the access-checking functions in its <i>GrantedAccess</i> parameter. Examples of access-checking functions include <see cref="AccessCheckAndAuditAlarm" /> and <see cref="AccessCheck" />.</para>
    </param>
    <param name="Privileges">
      <para>A pointer to a <see cref="PRIVILEGE_SET" /> structure that specifies the set of <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a> required for the access attempt. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="ObjectCreation">
      <para>Specifies a flag that determines whether the application creates a new object when access is granted. When this value is <b>TRUE</b>, the application creates a new object; when it is <b>FALSE</b>, the application opens an existing object.</para>
    </param>
    <param name="AccessGranted">
      <para>Specifies a flag indicating whether access was granted or denied in a previous call to an access-checking function, such as <see cref="AccessCheck" />. If access was granted, this value is <b>TRUE</b>. If not, it is <b>FALSE</b>.</para>
    </param>
    <param name="GenerateOnClose">
      <para>A pointer to a flag set by the audit-generation routine when the function returns. This value must be passed to the
<see cref="ObjectCloseAuditAlarm" /> function when the object handle is closed.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>ObjectOpenAuditAlarm</b> function requires the calling application to have the SE_AUDIT_NAME privilege enabled. The test for this privilege is always performed against the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> of the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a>, not the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a> of the thread. This allows the calling process to impersonate a client during the call.</para>
    </remarks>
    <seealso cref="AccessCheck" />
    <seealso cref="AccessCheckAndAuditAlarm" />
    <seealso cref="AreAllAccessesGranted" />
    <seealso cref="AreAnyAccessesGranted" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso cref="MapGenericMask" />
    <seealso cref="ObjectCloseAuditAlarm" />
    <seealso cref="ObjectDeleteAuditAlarm" />
    <seealso cref="ObjectPrivilegeAuditAlarm" />
    <seealso cref="PRIVILEGE_SET" />
    <seealso cref="PrivilegeCheck" />
    <seealso cref="PrivilegedServiceAuditAlarm" />
    <seealso cref="SECURITY_DESCRIPTOR" />
  </member>
  <member name="Windows.ObjectOpenAuditAlarmW">
    <summary>
      <para>The <b>ObjectOpenAuditAlarm</b> function generates audit messages when a client application attempts to gain access to an object or to create a new one. Alarms are not currently supported.</para>
    </summary>
    <param name="SubsystemName">
      <para>A pointer to a <b>null</b>-terminated string specifying the name of the subsystem calling the function. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="HandleId">
      <para>A pointer to a unique value representing the client's handle to the object. If the access is denied, this parameter is ignored.</para>
      <para>For cross-platform compatibility, the value addressed by this pointer must be sizeof(LPVOID) bytes long.</para>
    </param>
    <param name="ObjectTypeName">
      <para>A pointer to a <b>null</b>-terminated string specifying the type of object to which the client is requesting access. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="ObjectName">
      <para>A pointer to a <b>null</b>-terminated string specifying the name of the object to which the client is requesting access. This string appears in any audit message that the function generates.</para>
    </param>
    <param name="pSecurityDescriptor">
      <para>A pointer to the <see cref="SECURITY_DESCRIPTOR" /> structure for the object being accessed.</para>
    </param>
    <param name="ClientToken">
      <para>Identifies an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a> representing the client requesting the operation. This handle must be obtained by opening the token of a thread impersonating the client. The token must be open for TOKEN_QUERY access.</para>
    </param>
    <param name="DesiredAccess">
      <para>Specifies the desired <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a>. This mask must have been previously mapped by the <see cref="MapGenericMask" /> function to contain no generic access rights.</para>
    </param>
    <param name="GrantedAccess">
      <para>Specifies an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> indicating which access rights are granted. This access mask is intended to be the same value set by one of the access-checking functions in its <i>GrantedAccess</i> parameter. Examples of access-checking functions include <see cref="AccessCheckAndAuditAlarm" /> and <see cref="AccessCheck" />.</para>
    </param>
    <param name="Privileges">
      <para>A pointer to a <see cref="PRIVILEGE_SET" /> structure that specifies the set of <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a> required for the access attempt. This parameter can be <b>NULL</b>.</para>
    </param>
    <param name="ObjectCreation">
      <para>Specifies a flag that determines whether the application creates a new object when access is granted. When this value is <b>TRUE</b>, the application creates a new object; when it is <b>FALSE</b>, the application opens an existing object.</para>
    </param>
    <param name="AccessGranted">
      <para>Specifies a flag indicating whether access was granted or denied in a previous call to an access-checking function, such as <see cref="AccessCheck" />. If access was granted, this value is <b>TRUE</b>. If not, it is <b>FALSE</b>.</para>
    </param>
    <param name="GenerateOnClose">
      <para>A pointer to a flag set by the audit-generation routine when the function returns. This value must be passed to the
<see cref="ObjectCloseAuditAlarm" /> function when the object handle is closed.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>ObjectOpenAuditAlarm</b> function requires the calling application to have the SE_AUDIT_NAME privilege enabled. The test for this privilege is always performed against the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> of the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a>, not the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a> of the thread. This allows the calling process to impersonate a client during the call.</para>
    </remarks>
    <seealso cref="AccessCheck" />
    <seealso cref="AccessCheckAndAuditAlarm" />
    <seealso cref="AreAllAccessesGranted" />
    <seealso cref="AreAnyAccessesGranted" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso cref="MapGenericMask" />
    <seealso cref="ObjectCloseAuditAlarm" />
    <seealso cref="ObjectDeleteAuditAlarm" />
    <seealso cref="ObjectPrivilegeAuditAlarm" />
    <seealso cref="PRIVILEGE_SET" />
    <seealso cref="PrivilegeCheck" />
    <seealso cref="PrivilegedServiceAuditAlarm" />
    <seealso cref="SECURITY_DESCRIPTOR" />
  </member>
  <member name="Windows.ObjectPrivilegeAuditAlarm">
    <summary>
      <para>The <b>ObjectPrivilegeAuditAlarm</b> function generates an audit message in the security event log. A protected server can use this function to log attempts by a client to use a specified set of <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a> with an open handle to a private object. Alarms are not currently supported.</para>
    </summary>
    <param name="SubsystemName">
      <para>A pointer to a null-terminated string specifying the name of the subsystem calling the function. This string appears in the audit message.</para>
    </param>
    <param name="HandleId">
      <para>A pointer to a unique value representing the client's handle to the object.</para>
    </param>
    <param name="ClientToken">
      <para>Identifies an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a> representing the client that requested the operation. This handle must have been obtained by opening the token of a thread impersonating the client. The token must be open for TOKEN_QUERY access. The function uses this token to get the identity of the client for the audit message.</para>
    </param>
    <param name="DesiredAccess">
      <para>Specifies an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> indicating the privileged access types being used or whose use is being attempted. The access mask can be mapped by the <see cref="MapGenericMask" /> function so it does not contain any generic access types.</para>
    </param>
    <param name="Privileges">
      <para>A pointer to a <see cref="PRIVILEGE_SET" /> structure containing the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a> that the client attempted to use. The names of the privileges appear in the audit message.</para>
    </param>
    <param name="AccessGranted">
      <para>Indicates whether the client's attempt to use the privileges was successful. If this value is <b>TRUE</b>, the audit message indicates success. If this value is <b>FALSE</b>, the audit message indicates failure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>ObjectPrivilegeAuditAlarm</b> function does not check the client's access to the object or check the client's access token to determine whether the privileges are held or enabled. Typically, you call the <see cref="PrivilegeCheck" /> function to determine whether the specified privileges are enabled in the access token, call the <see cref="AccessCheck" /> function to check the client's access to the object, and then call <b>ObjectPrivilegeAuditAlarm</b> to log the results.</para>
      <para>The <b>ObjectPrivilegeAuditAlarm</b> function requires the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> to have SE_AUDIT_NAME privilege enabled. The test for this privilege is always performed against the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> of the calling process, not the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a> of the thread. This allows the calling process to impersonate a client during the call.</para>
    </remarks>
    <seealso cref="AccessCheck" />
    <seealso cref="AccessCheckAndAuditAlarm" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control Overview</seealso>
    <seealso cref="MapGenericMask" />
    <seealso cref="ObjectCloseAuditAlarm" />
    <seealso cref="ObjectOpenAuditAlarm" />
    <seealso cref="PRIVILEGE_SET" />
    <seealso cref="PrivilegeCheck" />
    <seealso cref="PrivilegedServiceAuditAlarm" />
  </member>
  <member name="Windows.ObjectPrivilegeAuditAlarmW">
    <summary>
      <para>The <b>ObjectPrivilegeAuditAlarm</b> function generates an audit message in the security event log. A protected server can use this function to log attempts by a client to use a specified set of <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a> with an open handle to a private object. Alarms are not currently supported.</para>
    </summary>
    <param name="SubsystemName">
      <para>A pointer to a null-terminated string specifying the name of the subsystem calling the function. This string appears in the audit message.</para>
    </param>
    <param name="HandleId">
      <para>A pointer to a unique value representing the client's handle to the object.</para>
    </param>
    <param name="ClientToken">
      <para>Identifies an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a> representing the client that requested the operation. This handle must have been obtained by opening the token of a thread impersonating the client. The token must be open for TOKEN_QUERY access. The function uses this token to get the identity of the client for the audit message.</para>
    </param>
    <param name="DesiredAccess">
      <para>Specifies an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access mask</a> indicating the privileged access types being used or whose use is being attempted. The access mask can be mapped by the <see cref="MapGenericMask" /> function so it does not contain any generic access types.</para>
    </param>
    <param name="Privileges">
      <para>A pointer to a <see cref="PRIVILEGE_SET" /> structure containing the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a> that the client attempted to use. The names of the privileges appear in the audit message.</para>
    </param>
    <param name="AccessGranted">
      <para>Indicates whether the client's attempt to use the privileges was successful. If this value is <b>TRUE</b>, the audit message indicates success. If this value is <b>FALSE</b>, the audit message indicates failure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>ObjectPrivilegeAuditAlarm</b> function does not check the client's access to the object or check the client's access token to determine whether the privileges are held or enabled. Typically, you call the <see cref="PrivilegeCheck" /> function to determine whether the specified privileges are enabled in the access token, call the <see cref="AccessCheck" /> function to check the client's access to the object, and then call <b>ObjectPrivilegeAuditAlarm</b> to log the results.</para>
      <para>The <b>ObjectPrivilegeAuditAlarm</b> function requires the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> to have SE_AUDIT_NAME privilege enabled. The test for this privilege is always performed against the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> of the calling process, not the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/i-gly">impersonation token</a> of the thread. This allows the calling process to impersonate a client during the call.</para>
    </remarks>
    <seealso cref="AccessCheck" />
    <seealso cref="AccessCheckAndAuditAlarm" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control Overview</seealso>
    <seealso cref="MapGenericMask" />
    <seealso cref="ObjectCloseAuditAlarm" />
    <seealso cref="ObjectOpenAuditAlarm" />
    <seealso cref="PRIVILEGE_SET" />
    <seealso cref="PrivilegeCheck" />
    <seealso cref="PrivilegedServiceAuditAlarm" />
  </member>
  <member name="Windows.PrivilegeCheck">
    <summary>
      <para>The <b>PrivilegeCheck</b> function determines whether a specified set of
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/privileges">privileges</a> are enabled in an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a>. The <b>PrivilegeCheck</b> function is typically called by a server application to check the privileges of a client's access token.</para>
    </summary>
    <param name="ClientToken">
      <para>A handle to an access token representing a client <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a>. This handle must have been obtained by opening the token of a thread impersonating the client. The token must be open for TOKEN_QUERY access.</para>
    </param>
    <param name="RequiredPrivileges">
      <para>A pointer to a
<see cref="PRIVILEGE_SET" /> structure. The <b>Privilege</b> member of this structure is an array of
<see cref="LUID_AND_ATTRIBUTES" /> structures. Before calling <b>PrivilegeCheck</b>, use the <b>Privilege</b> array to indicate the set of privileges to check. Set the <b>Control</b> member to PRIVILEGE_SET_ALL_NECESSARY if all of the privileges must be enabled; or set it to zero if it is sufficient that any one of the privileges be enabled.</para>
      <para>When <b>PrivilegeCheck</b> returns, the <b>Attributes</b> member of each <see cref="LUID_AND_ATTRIBUTES" /> structure is set to SE_PRIVILEGE_USED_FOR_ACCESS if the corresponding privilege is enabled.</para>
    </param>
    <param name="pfResult">
      <para>A pointer to a value the function sets to indicate whether any or all of the specified privileges are enabled in the access token. If the <b>Control</b> member of the <see cref="PRIVILEGE_SET" /> structure specifies PRIVILEGE_SET_ALL_NECESSARY, this value is <b>TRUE</b> only if all the privileges are enabled; otherwise, this value is <b>TRUE</b> if any of the privileges are enabled.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>An access token contains a list of the privileges held by the account associated with the token. These privileges can be enabled or disabled; most are disabled by default. The <b>PrivilegeCheck</b> function checks only for enabled privileges. To get a list of all the enabled and disabled privileges held by an access token, call the
<see cref="GetTokenInformation" /> function. To enable or disable a set of privileges in an access token, call the
<see cref="AdjustTokenPrivileges" /> function.</para>
    </remarks>
    <seealso cref="AdjustTokenPrivileges" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control Overview</seealso>
    <seealso cref="GetTokenInformation" />
    <seealso cref="LUID_AND_ATTRIBUTES" />
    <seealso cref="LookupPrivilegeValue" />
    <seealso cref="ObjectPrivilegeAuditAlarm" />
    <seealso cref="PRIVILEGE_SET" />
    <seealso cref="PrivilegedServiceAuditAlarm" />
  </member>
  <member name="Windows.PrivilegedServiceAuditAlarm">
    <summary>
      <para>The <b>PrivilegedServiceAuditAlarm</b> function generates an audit message in the security event log. A protected server can use this function to log attempts by a client to use a specified set of <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a>.</para>
      <para>Alarms are not currently supported.</para>
    </summary>
    <param name="SubsystemName">
      <para>A pointer to a null-terminated string specifying the name of the subsystem calling the function. This information appears in the security event log record.</para>
    </param>
    <param name="ServiceName">
      <para>A pointer to a null-terminated string specifying the name of the privileged subsystem service. This information appears in the security event log record.</para>
    </param>
    <param name="ClientToken">
      <para>Identifies an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a> representing the client that requested the operation. This handle must have been obtained by opening the token of a thread impersonating the client. The token must be open for TOKEN_QUERY access. The function uses this token to get the identity of the client for the security event log record.</para>
    </param>
    <param name="Privileges">
      <para>A pointer to a
<see cref="PRIVILEGE_SET" /> structure containing the privileges that the client attempted to use. The names of the privileges appear in the security event log record.</para>
    </param>
    <param name="AccessGranted">
      <para>Indicates whether the client's attempt to use the privileges was successful. If this value is <b>TRUE</b>, the security event log record indicates success. If this value is <b>FALSE</b>, the security event log record indicates failure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>PrivilegedServiceAuditAlarm</b> function does not check the client's access token to determine whether the privileges are held or enabled. Typically, you first call the <see cref="PrivilegeCheck" /> function to determine whether the specified privileges are enabled in the access token, and then call <b>PrivilegedServiceAuditAlarm</b> to log the results.</para>
      <para>The <b>PrivilegedServiceAuditAlarm</b> function requires the calling process to have SE_AUDIT_NAME privilege enabled. The test for this privilege is always performed against the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> of the calling process. This allows the calling process to impersonate a client during the call.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control Overview</seealso>
    <seealso cref="ObjectPrivilegeAuditAlarm" />
    <seealso cref="PRIVILEGE_SET" />
    <seealso cref="PrivilegeCheck" />
  </member>
  <member name="Windows.PrivilegedServiceAuditAlarmW">
    <summary>
      <para>The <b>PrivilegedServiceAuditAlarm</b> function generates an audit message in the security event log. A protected server can use this function to log attempts by a client to use a specified set of <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">privileges</a>.</para>
      <para>Alarms are not currently supported.</para>
    </summary>
    <param name="SubsystemName">
      <para>A pointer to a null-terminated string specifying the name of the subsystem calling the function. This information appears in the security event log record.</para>
    </param>
    <param name="ServiceName">
      <para>A pointer to a null-terminated string specifying the name of the privileged subsystem service. This information appears in the security event log record.</para>
    </param>
    <param name="ClientToken">
      <para>Identifies an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a> representing the client that requested the operation. This handle must have been obtained by opening the token of a thread impersonating the client. The token must be open for TOKEN_QUERY access. The function uses this token to get the identity of the client for the security event log record.</para>
    </param>
    <param name="Privileges">
      <para>A pointer to a
<see cref="PRIVILEGE_SET" /> structure containing the privileges that the client attempted to use. The names of the privileges appear in the security event log record.</para>
    </param>
    <param name="AccessGranted">
      <para>Indicates whether the client's attempt to use the privileges was successful. If this value is <b>TRUE</b>, the security event log record indicates success. If this value is <b>FALSE</b>, the security event log record indicates failure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>PrivilegedServiceAuditAlarm</b> function does not check the client's access token to determine whether the privileges are held or enabled. Typically, you first call the <see cref="PrivilegeCheck" /> function to determine whether the specified privileges are enabled in the access token, and then call <b>PrivilegedServiceAuditAlarm</b> to log the results.</para>
      <para>The <b>PrivilegedServiceAuditAlarm</b> function requires the calling process to have SE_AUDIT_NAME privilege enabled. The test for this privilege is always performed against the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">primary token</a> of the calling process. This allows the calling process to impersonate a client during the call.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control Overview</seealso>
    <seealso cref="ObjectPrivilegeAuditAlarm" />
    <seealso cref="PRIVILEGE_SET" />
    <seealso cref="PrivilegeCheck" />
  </member>
  <member name="Windows.QuerySecurityAccessMask">
    <summary>
      <para>The <b>QuerySecurityAccessMask</b> function creates an access mask that represents the access permissions necessary to query the specified object security information.</para>
    </summary>
    <param name="SecurityInformation">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> structure that specifies the security information to be queried.</para>
    </param>
    <param name="DesiredAccess">
      <para>A pointer to the access mask that this function creates.</para>
    </param>
    <seealso cref="SetSecurityAccessMask" />
  </member>
  <member name="Windows.RevertToSelf">
    <summary>
      <para>The <b>RevertToSelf</b> function terminates the impersonation of a client application.</para>
    </summary>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>A <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> should call the <b>RevertToSelf</b> function after finishing any impersonation begun by using the <see cref="DdeImpersonateClient" />, <see cref="ImpersonateDdeClientWindow" />, <see cref="ImpersonateLoggedOnUser" />, <see cref="ImpersonateNamedPipeClient" />, <see cref="ImpersonateSelf" />, <see cref="ImpersonateAnonymousToken" /> or <see cref="SetThreadToken" /> function.</para>
      <para>An RPC server that used the
<see cref="RpcImpersonateClient" /> function to impersonate a client must call the
<see cref="RpcRevertToSelf" /> or
<see cref="RpcRevertToSelfEx" /> to end the impersonation.</para>
      <para>If <b>RevertToSelf</b> fails, your application continues to run in the context of the client, which is not appropriate. You should shut down the process if <b>RevertToSelf</b> fails.</para>
      <h4>Examples</h4>
      <para>For an example that uses this function, see
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/verifying-client-access-with-acls-in-c--">Verifying Client Access with ACLs</a>.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control Overview</seealso>
    <seealso cref="DdeImpersonateClient" />
    <seealso cref="ImpersonateAnonymousToken" />
    <seealso cref="ImpersonateDdeClientWindow" />
    <seealso cref="ImpersonateLoggedOnUser" />
    <seealso cref="ImpersonateNamedPipeClient" />
    <seealso cref="ImpersonateSelf" />
    <seealso cref="RpcImpersonateClient" />
    <seealso cref="RpcRevertToSelf" />
    <seealso cref="RpcRevertToSelfEx" />
    <seealso cref="SetThreadToken" />
  </member>
  <member name="Windows.SetAclInformation">
    <summary>
      <para>The <b>SetAclInformation</b> function sets information about an <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL).</para>
    </summary>
    <param name="pAcl">
      <para>A pointer to an
ACL. The function sets information in this ACL.</para>
    </param>
    <param name="pAclInformation">
      <para>A pointer to a buffer that contains the information to be set. This must be a pointer to an
<see cref="ACL_REVISION_INFORMATION" /> structure.</para>
    </param>
    <param name="nAclInformationLength">
      <para>The size, in bytes, of the buffer pointed to by the <i>pAclInfo</i> parameter.</para>
    </param>
    <param name="dwAclInformationClass">
      <para>An
<see cref="ACL_INFORMATION_CLASS" /> enumerated type that gives the class of information requested.</para>
      <para>Currently, this parameter can be <b>AclRevisionInformation</b>. This means that the buffer pointed to by the <i>pAclInformation</i> parameter contains an
<see cref="ACL_REVISION_INFORMATION" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <seealso cref="ACL_INFORMATION_CLASS" />
    <seealso cref="ACL_REVISION_INFORMATION" />
    <seealso cref="GetAclInformation" />
    <seealso cref="InitializeAcl" />
    <seealso cref="IsValidAcl" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
  </member>
  <member name="Windows.SetFileSecurity">
    <summary>
      <para>The <b>SetFileSecurity</b> function sets the security of a file or directory object.</para>
      <para>This function is obsolete. Use the <see cref="SetNamedSecurityInfo" /> function instead.</para>
    </summary>
    <param name="lpFileName">
      <para>A pointer to a null-terminated string that specifies the file or directory for which security is set. Note that security applied to a directory is not inherited by its children.</para>
    </param>
    <param name="SecurityInformation">
      <para>Specifies a
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> structure that identifies the contents of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> pointed to by the <i>pSecurityDescriptor</i> parameter.</para>
    </param>
    <param name="pSecurityDescriptor">
      <para>A pointer to a
<see cref="SECURITY_DESCRIPTOR" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>SetFileSecurity</b> function is successful only if the following conditions are met:</para>
      <list type="bullet">
        <item>
          <description>If the owner of the object is being set, the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> must have either WRITE_OWNER permission or be the owner of the object.</description>
        </item>
        <item>
          <description>If the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) of the object is being set, the calling process must have either WRITE_DAC permission or be the owner of the object.</description>
        </item>
        <item>
          <description>If the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) of the object is being set, the SE_SECURITY_NAME privilege must be enabled for the calling process.</description>
        </item>
      </list>
    </remarks>
    <seealso cref="GetFileSecurity" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</seealso>
    <seealso cref="SetKernelObjectSecurity" />
    <seealso cref="SetNamedSecurityInfo" />
    <seealso cref="SetPrivateObjectSecurity" />
    <seealso cref="SetUserObjectSecurity" />
  </member>
  <member name="Windows.SetFileSecurityW">
    <summary>
      <para>The <b>SetFileSecurity</b> function sets the security of a file or directory object.</para>
      <para>This function is obsolete. Use the <see cref="SetNamedSecurityInfo" /> function instead.</para>
    </summary>
    <param name="lpFileName">
      <para>A pointer to a null-terminated string that specifies the file or directory for which security is set. Note that security applied to a directory is not inherited by its children.</para>
    </param>
    <param name="SecurityInformation">
      <para>Specifies a
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> structure that identifies the contents of the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> pointed to by the <i>pSecurityDescriptor</i> parameter.</para>
    </param>
    <param name="pSecurityDescriptor">
      <para>A pointer to a
<see cref="SECURITY_DESCRIPTOR" /> structure.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>SetFileSecurity</b> function is successful only if the following conditions are met:</para>
      <list type="bullet">
        <item>
          <description>If the owner of the object is being set, the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> must have either WRITE_OWNER permission or be the owner of the object.</description>
        </item>
        <item>
          <description>If the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) of the object is being set, the calling process must have either WRITE_DAC permission or be the owner of the object.</description>
        </item>
        <item>
          <description>If the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) of the object is being set, the SE_SECURITY_NAME privilege must be enabled for the calling process.</description>
        </item>
      </list>
    </remarks>
    <seealso cref="GetFileSecurity" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</seealso>
    <seealso cref="SetKernelObjectSecurity" />
    <seealso cref="SetNamedSecurityInfo" />
    <seealso cref="SetPrivateObjectSecurity" />
    <seealso cref="SetUserObjectSecurity" />
  </member>
  <member name="Windows.SetKernelObjectSecurity">
    <summary>
      <para>The <b>SetKernelObjectSecurity</b> function sets the security of a kernel object. For example, this can be a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a>, thread, or event.<b>Note</b>  This function should not be used when setting a security descriptor on file system objects. Instead, use the <see cref="SetSecurityInfo" /> or <see cref="SetNamedSecurityInfo" /> functions.</para>
    </summary>
    <param name="Handle">
      <para>A handle to a kernel object for which security information is set.</para>
    </param>
    <param name="SecurityInformation">
      <para>A set of
bit flags that indicate the type of security information to set. This parameter can be a combination of the
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</para>
    </param>
    <param name="SecurityDescriptor">
      <para>A pointer to a
<see cref="SECURITY_DESCRIPTOR" /> structure that contains the new security information.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <seealso cref="GetKernelObjectSecurity" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</seealso>
    <seealso cref="SetFileSecurity" />
    <seealso cref="SetPrivateObjectSecurity" />
    <seealso cref="SetUserObjectSecurity" />
  </member>
  <member name="Windows.SetPrivateObjectSecurity">
    <summary>
      <para>The <b>SetPrivateObjectSecurity</b> function modifies a private object's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>.</para>
      <para>To specify whether the protected server supports automatic inheritance of <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs), use the
<see cref="SetPrivateObjectSecurityEx" /> function.</para>
    </summary>
    <param name="SecurityInformation">
      <para>Indicates the parts of the security descriptor to set. This value can be a combination of the
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</para>
    </param>
    <param name="ModificationDescriptor">
      <para>A pointer to a
<see cref="SECURITY_DESCRIPTOR" /> structure. The parts of this security descriptor indicated by the <i>SecurityInformation</i> parameter are applied to the <i>ObjectsSecurityDescriptor</i> security descriptor.</para>
    </param>
    <param name="ObjectsSecurityDescriptor">
      <para>A pointer to a pointer to a <see cref="SECURITY_DESCRIPTOR" /> structure. This security descriptor must be in <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative</a> form. <b>The memory for the security descriptor must be allocated from the process heap (GetProcessHeap) with the HeapAlloc function.</b></para>
      <para>On input, this is the current security descriptor of the private object. The function modifies it to produce the new security descriptor. If necessary, the <b>SetPrivateObjectSecurity</b> function allocates additional memory to produce a larger security descriptor.</para>
    </param>
    <param name="GenericMapping">
      <para>A pointer to a
<see cref="GENERIC_MAPPING" /> structure that specifies the specific and standard access rights that correspond to each of the generic access rights.</para>
    </param>
    <param name="Token">
      <para>A handle to the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a> for the client on whose behalf the private object's security is being modified. This parameter is required to ensure that the client has provided a legitimate value for a new owner <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID). The token must be open for TOKEN_QUERY access.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>This function is intended for use by resource managers only. To implement the standard access control semantics for updating security descriptors, a resource manager should verify that the following conditions are met before calling <b>SetPrivateObjectSecurity</b>:</para>
      <list type="bullet">
        <item>
          <description>If the object's owner is being set, the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> must have either WRITE_OWNER permission or be the object's owner.</description>
        </item>
        <item>
          <description>If the object's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) is being set, the calling process must have either WRITE_DAC permission or be the object's owner.</description>
        </item>
        <item>
          <description>If the object's <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) is being set, the SE_SECURITY_NAME privilege must be enabled for the calling process.</description>
        </item>
      </list>
      <para>If the preceding conditions are not met, a call to this function does not fail; however, standard access policy is not enforced.</para>
      <para>The process calling this function should not be impersonating a client because clients do not typically have appropriate privileges required for underlying token operations.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control Overview</seealso>
    <seealso cref="CreatePrivateObjectSecurity" />
    <seealso cref="DestroyPrivateObjectSecurity" />
    <seealso cref="GENERIC_MAPPING" />
    <seealso cref="GetPrivateObjectSecurity" />
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</seealso>
    <seealso cref="SetFileSecurity" />
    <seealso cref="SetKernelObjectSecurity" />
    <seealso cref="SetPrivateObjectSecurityEx" />
    <seealso cref="SetUserObjectSecurity" />
  </member>
  <member name="Windows.SetPrivateObjectSecurityEx">
    <summary>
      <para>The <b>SetPrivateObjectSecurityEx</b> function modifies the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> of a private object maintained by the resource manager calling this function. The <b>SetPrivateObjectSecurityEx</b> function has a flags parameter that specifies whether the resource manager supports automatic inheritance of <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs).</para>
    </summary>
    <param name="SecurityInformation">
      <para>The parts of the security descriptor to set. This value can be a combination of the
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> bit flags.</para>
    </param>
    <param name="ModificationDescriptor">
      <para>A pointer to a
<see cref="SECURITY_DESCRIPTOR" /> structure. The parts of this security descriptor indicated by the <i>SecurityInformation</i> parameter are applied to the <i>ObjectsSecurityDescriptor</i> security descriptor.</para>
    </param>
    <param name="ObjectsSecurityDescriptor">
      <para>A pointer to a pointer to a <see cref="SECURITY_DESCRIPTOR" /> structure. This security descriptor must be in <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">self-relative</a> form. <b>The memory for the security descriptor must be allocated from the process heap (GetProcessHeap) with the HeapAlloc function.</b></para>
      <para>On input, this is the current security descriptor of the private object. The function modifies it to produce the new security descriptor. If necessary, the <b>SetPrivateObjectSecurityEx</b> function allocates additional memory to produce a larger security descriptor.</para>
    </param>
    <param name="AutoInheritFlags">
      <para>Specifies automatic inheritance of ACEs. If the protected server does not implement automatic inheritance, it should specify zero; otherwise, it can specify a combination of the following values, defined in Winnt.h.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_DACL_AUTO_INHERIT</b>
                </description>
              </item>
              <item>
                <description>0x01</description>
              </item>
            </list>
          </description>
          <description>
            <para>The new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL) contains ACEs inherited from the DACL of
the object's parent, as well as any explicit ACEs specified in the DACL of
<i>ModificationDescriptor</i>. If this flag is not set, the new DACL does not inherit ACEs.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_SACL_AUTO_INHERIT</b>
                </description>
              </item>
              <item>
                <description>0x02</description>
              </item>
            </list>
          </description>
          <description>
            <para>The new <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL) contains ACEs inherited from the SACL of
the security descriptor associated with the object's parent, as well as any explicit ACEs specified in the SACL of
<i>ModificationDescriptor</i>. If this flag is not set, the new SACL does not inherit ACEs.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_AVOID_PRIVILEGE_CHECK</b>
                </description>
              </item>
              <item>
                <description>0x08</description>
              </item>
            </list>
          </description>
          <description>
            <para>The function does not perform privilege checking. If the <b>SEF_AVOID_OWNER_CHECK</b> flag is also set, the <i>Token</i> parameter can be <b>NULL</b>. Use this flag when implementing automatic inheritance to avoid checking privileges on each child updated.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_AVOID_OWNER_CHECK</b>
                </description>
              </item>
              <item>
                <description>0x10</description>
              </item>
            </list>
          </description>
          <description>
            <para>The function does not check the validity of the owner in the resultant <i>ObjectsSecurityDescriptor</i> as described in Remarks. If the <b>SEF_AVOID_PRIVILEGE_CHECK</b> flag is also set, the <i>Token</i> parameter can be <b>NULL</b>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_DEFAULT_OWNER_FROM_PARENT</b>
                </description>
              </item>
              <item>
                <description>0x20</description>
              </item>
            </list>
          </description>
          <description>
            <para>The owner of <i>ObjectsSecurityDescriptor</i> defaults to the owner of the object's parent. If this flag is not set, the owner of <i>ObjectsSecurityDescriptor</i> defaults to the owner of the token specified by the <i>Token</i> parameter. The owner of the token is specified in the token itself. In either case, if the <i>ModificationDescriptor</i> parameter is not <b>NULL</b>, the <i>ObjectsSecurityDescriptor</i> owner is set to the owner from <i>ModificationDescriptor</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_DEFAULT_GROUP_FROM_PARENT</b>
                </description>
              </item>
              <item>
                <description>0x40</description>
              </item>
            </list>
          </description>
          <description>
            <para>The group of <i>ObjectsSecurityDescriptor</i> defaults to the group from the owner of the object's parent. If this flag is not set, the group of <i>ObjectsSecurityDescriptor</i> defaults to the group of the token specified by the <i>Token</i> parameter. The group of the token is specified in the token itself. In either case, if the <i>ModificationDescriptor</i> parameter is not <b>NULL</b>, the <i>ObjectsSecurityDescriptor</i> group is set to the group from <i>ModificationDescriptor</i>.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_MACL_NO_WRITE_UP</b>
                </description>
              </item>
              <item>
                <description>0x100</description>
              </item>
            </list>
          </description>
          <description>
            <para>A principal with a mandatory level lower than that of the object cannot write to the object.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_MACL_NO_READ_UP</b>
                </description>
              </item>
              <item>
                <description>0x200</description>
              </item>
            </list>
          </description>
          <description>
            <para>A principal with a mandatory level lower than that of the object cannot read the object.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_MACL_NO_EXECUTE_UP</b>
                </description>
              </item>
              <item>
                <description>0x400</description>
              </item>
            </list>
          </description>
          <description>
            <para>A principal with a mandatory level lower than that of the object cannot execute the object.</para>
          </description>
        </item>
        <item>
          <description>
            <list type="bullet">
              <item>
                <description>
                  <b>SEF_AVOID_OWNER_RESTRICTION</b>
                </description>
              </item>
              <item>
                <description>0x1000</description>
              </item>
            </list>
          </description>
          <description>
            <para>Any restrictions  specified by the
owner of the object's parent that would limit the caller's ability to specify
a DACL in the <i>ObjectsSecurityDescriptor</i> are ignored.</para>
          </description>
        </item>
      </list>
    </param>
    <param name="GenericMapping">
      <para>A pointer to a
<see cref="GENERIC_MAPPING" /> structure that specifies the specific and standard access rights that correspond to each of the generic access rights.</para>
    </param>
    <param name="Token">
      <para>Identifies the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a> for the client on whose behalf the private object's security is being modified. This parameter is required to ensure that the client has provided a legitimate value for a new owner <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security identifier</a> (SID). The token must be open for TOKEN_QUERY access.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>If the <i>AutoInheritFlags</i> parameter is zero, <b>SetPrivateObjectSecurityEx</b> is identical to the
<see cref="SetPrivateObjectSecurity" /> function.</para>
      <para>This function is intended for use by resource managers only. To implement the standard Windows access control semantics for updating security descriptors, a resource manager should verify that the following conditions are met before calling <b>SetPrivateObjectSecurityEx</b>:</para>
      <list type="bullet">
        <item>
          <description>If the object's owner is being set, the calling <a href="https://docs.microsoft.com//windows/desktop/SecGloss/p-gly">process</a> must have either WRITE_OWNER permission or be the object's owner.</description>
        </item>
        <item>
          <description>If the object's DACL is being set, the calling process must have either WRITE_DAC permission or be the object's owner.</description>
        </item>
        <item>
          <description>If the object's SACL is being set, the SE_SECURITY_NAME privilege must be enabled for the calling process.</description>
        </item>
      </list>
      <para>If the preceding conditions are not met, a call to this function does not fail, however, standard Windows access policy is not enforced.</para>
      <para>The process calling this function should not be impersonating a client because clients do not typically have appropriate privileges required for underlying token operations.</para>
      <para>If <i>AutoInheritFlags</i> specifies the SEF_DACL_AUTO_INHERIT bit, the function applies the following rules to the DACL to create the new security descriptor from the current descriptor:</para>
      <list type="bullet">
        <item>
          <description>If the SE_DACL_PROTECTED flag is not set in the control bits of  either the current security descriptor or the <i>ModificationDescriptor</i>, the function constructs the output security descriptor from the inherited ACEs of the current security descriptor and noninherited ACEs of <i>ModificationDescriptor</i>. That is, it is impossible to change an inherited ACE by changing the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control list</a> (ACL) on an object. This behavior preserves the inherited ACEs as they were inherited from the parent container.
<para>An ACL editor should make inherited ACEs unavailable to prevent them from being modified.</para></description>
        </item>
        <item>
          <description>If SE_DACL_PROTECTED is set in
<i>ModificationDescriptor</i>, the current security descriptor is ignored. The output security descriptor is built as a copy of
<i>ModificationDescriptor</i> with any INHERITED_ACE bits turned off.
<para>Ideally an ACL editor should turn off the INHERITED_ACE bits that indicate to its caller that the ACEs inherited from the object's parent are now being explicitly set on the object.</para></description>
        </item>
        <item>
          <description>If SE_DACL_PROTECTED is set in the current security descriptor and not in
<i>ModificationDescriptor</i>, the current security descriptor is ignored. The output security descriptor is built as a copy of
<i>ModificationDescriptor</i>. It is the caller's responsibility to ensure that the correct ACEs have the INHERITED_ACE bit turned on.</description>
        </item>
      </list>
      <para>If <i>AutoInheritFlags</i> specifies the SEF_SACL_AUTO_INHERIT bit, the function applies similar rules to the new SACL.</para>
      <para>For both DACLs and SACLs, certain types of ACEs in the input <i>ObjectsSecurityDescriptor</i> and in <i>ModificationDescriptor</i> will be replaced by two ACEs in the output <i>ObjectsSecurityDescriptor</i>. Specifically, an inheritable ACE that contains at least one of the following mappable elements will result in two ACEs in the output <i>ObjectsSecurityDescriptor</i>. Mappable elements include:</para>
      <list type="bullet">
        <item>
          <description>Generic access rights in the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a> structure</description>
        </item>
        <item>
          <description>Creator Owner SID or Creator Group SID as the ACE subject identifier</description>
        </item>
      </list>
      <para>ACEs with any of these mappable elements will result in the following two ACEs in the output <i>ObjectsSecurityDescriptor</i>:</para>
      <list type="bullet">
        <item>
          <description>An ACE that is a copy of the original, but with the INHERIT_ONLY flag set</description>
        </item>
        <item>
          <description>An ACE in which the INHERITED_ACE bit is turned on and the generic elements are mapped to specific elements:
<list type="bullet"><item><description>Generic access rights are replaced by the corresponding standard and specific access rights indicated in the input <i>GenericMapping</i>.</description></item><item><description>Creator Owner SID is replaced with the Owner in the output <i>SecurityDescriptor</i></description></item><item><description>Creator Group SID is replaced with the Group in the output <i>SecurityDescriptor</i></description></item></list></description>
        </item>
      </list>
      <para>If <i>AutoInheritFlags</i> does not specify the SEF_AVOID_PRIVILEGE_CHECK bit, owner validity checking is performed according to the following rules. The Owner in <i>ModificationDescriptor</i>:</para>
      <list type="bullet">
        <item>
          <description>Must be a legally formed SID</description>
        </item>
        <item>
          <description>Must match the TokenUser in <i>Token</i></description>
        </item>
      </list>
      <para>Or</para>
      <list type="bullet">
        <item>
          <description>Must match a group in the TokenGroups in <i>Token</i> where the attributes on the group:
<list type="bullet"><item><description>Include SE_GROUP_OWNER</description></item><item><description>Include SE_GROUP_USE_FOR_DENY_ONLY</description></item></list></description>
        </item>
      </list>
      <para>A resource manager that is setting the Owner on a subtree of objects can avoid the overhead of redundant owner validity checking. If the Owner in <i>ModificationDescriptor</i> and <i>Token</i> remain the same for iterative calls to this function, the SEF_AVOID_PRIVILEGE_CHECK bit may be set in <i>AutoInheritFlags</i> for calls subsequent to an initial call in which owner validity checking is performed. Callers that do not have access to the token of the client that will ultimately be setting the owner should also choose to skip owner validation checking.</para>
      <para>
        <b>Note</b>  The SEF_AVOID_PRIVILEGE_CHECK bit as used in the
<b>SetPrivateObjectSecurityEx</b> function is equivalent to the SEF_AVOID_OWNER_CHECK bit used in the
<see cref="CreatePrivateObjectSecurityEx" /> function.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Client/Server Access Control Functions</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/client-server-access-control">Client/Server Access Control Overview</seealso>
    <seealso cref="CreatePrivateObjectSecurityEx" />
    <seealso cref="DestroyPrivateObjectSecurity" />
    <seealso cref="GENERIC_MAPPING" />
    <seealso cref="GetPrivateObjectSecurity" />
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</seealso>
    <seealso cref="SetFileSecurity" />
    <seealso cref="SetKernelObjectSecurity" />
    <seealso cref="SetPrivateObjectSecurity" />
    <seealso cref="SetUserObjectSecurity" />
  </member>
  <member name="Windows.SetSecurityAccessMask">
    <summary>
      <para>The <b>SetSecurityAccessMask</b> function creates an access mask that represents the access permissions necessary to set the specified object security information.</para>
    </summary>
    <param name="SecurityInformation">
      <para>A <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> structure that specifies the security information to be set.</para>
    </param>
    <param name="DesiredAccess">
      <para>A pointer to the access mask that this function creates.</para>
    </param>
    <seealso cref="QuerySecurityAccessMask" />
  </member>
  <member name="Windows.SetSecurityDescriptorControl">
    <summary>
      <para>The <b>SetSecurityDescriptorControl</b> function sets the control bits of a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>. The function can set only the control bits that relate to automatic inheritance of ACEs. To set the other control bits of a security descriptor, use the functions, such as
<see cref="SetSecurityDescriptorDacl" />, for modifying the components of a security descriptor.</para>
    </summary>
    <param name="pSecurityDescriptor">
      <para>A pointer to a
<see cref="SECURITY_DESCRIPTOR" /> structure whose control and revision information are set.</para>
    </param>
    <param name="ControlBitsOfInterest">
      <para>A
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</a> mask that indicates the control bits to set.</para>
    </param>
    <param name="ControlBitsToSet">
      <para>A
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</a> mask that indicates the new values for the control bits specified by the <i>ControlBitsOfInterest</i> mask.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call <see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>The <b>SetSecurityDescriptorControl</b> function specifies the control bit or bits to modify, and whether the bits are on or off.</para>
      <h4>Examples</h4>
      <para>The following example marks the DACL on the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a> as protected.</para>
      <code>    SetSecurityDescriptorControl( &amp;amp;amp;amp;amp;amp;SecDesc,
            SE_DACL_PROTECTED, SE_DACL_PROTECTED );

</code>
      <para>The following example marks the DACL as not protected.</para>
      <code>    SetSecurityDescriptorControl( &amp;amp;amp;amp;amp;amp;SecDesc,
            SE_DACL_PROTECTED, 0 );

</code>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="GetSecurityDescriptorControl" />
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</seealso>
    <seealso cref="SetSecurityDescriptorDacl" />
  </member>
  <member name="Windows.SetSecurityDescriptorDacl">
    <summary>
      <para>The <b>SetSecurityDescriptorDacl</b> function sets information in a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/d-gly">discretionary access control list</a> (DACL). If a DACL is already present in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>, the DACL is replaced.</para>
    </summary>
    <param name="pSecurityDescriptor">
      <para>A pointer to the
<see cref="SECURITY_DESCRIPTOR" /> structure to which the function adds the DACL. This security descriptor must be in <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">absolute</a> format, meaning that its members must be pointers to other structures, rather than offsets to contiguous data.</para>
    </param>
    <param name="bDaclPresent">
      <para>A flag that indicates the presence of a DACL in the security descriptor. If this parameter is <b>TRUE</b>, the function sets the SE_DACL_PRESENT flag in the
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</a> structure and uses the values in the <i>pDacl</i> and <i>bDaclDefaulted</i> parameters. If this parameter is <b>FALSE</b>, the function clears the SE_DACL_PRESENT flag, and <i>pDacl</i> and <i>bDaclDefaulted</i> are ignored.</para>
    </param>
    <param name="pDacl">
      <para>A pointer to an
<see cref="ACL" /> structure that specifies the DACL for the security descriptor. If this parameter is <b>NULL</b>, a <b>NULL</b> DACL is assigned to the security descriptor, which allows all access to the object. The DACL is referenced by, not copied into, the security descriptor.</para>
    </param>
    <param name="bDaclDefaulted">
      <para>A flag that indicates the source of the DACL. If this flag is <b>TRUE</b>, the DACL has been retrieved by some default mechanism. If <b>FALSE</b>, the DACL has been explicitly specified by a user. The function stores this value in the SE_DACL_DEFAULTED flag of the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</a> structure. If this parameter is not specified, the SE_DACL_DEFAULTED flag is cleared.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>There is an important difference between an empty and a nonexistent DACL. When a DACL is empty, it contains no <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access control entries</a> (ACEs); therefore, no access rights are explicitly granted. As a result, access to the object is implicitly denied.</para>
      <para>When an object has no DACL (when the <i>pDacl</i> parameter is <b>NULL</b>), no protection is assigned to the object, and all access requests are granted. To help maintain security, restrict access by using a DACL.</para>
      <para>There are three possible outcomes in different configurations of the <i>bDaclPresent</i> flag and the <i>pDacl</i> parameter:</para>
      <list type="bullet">
        <item>
          <description>When the <i>pDacl</i> parameter points to a DACL and the <i>bDaclPresent</i> flag is <b>TRUE</b>, a DACL is specified and it must contain access-allowed ACEs to allow access to the object.</description>
        </item>
        <item>
          <description>When the <i>pDacl</i> parameter does not point to a DACL and the <i>bDaclPresent</i> flag is <b>TRUE</b>, a <b>NULL</b> DACL is specified. All access is allowed. You should not use a <b>NULL</b> DACL with an object because any user can change the DACL and owner of the security descriptor. This will interfere with use of the object.</description>
        </item>
        <item>
          <description>When the <i>pDacl</i> parameter does not point to a DACL and the <i>bDaclPresent</i> flag is <b>FALSE</b>, a DACL can be provided for the object through an inheritance or default mechanism.</description>
        </item>
      </list>
      <h4>Examples</h4>
      <para>For an example that uses this function, see <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/creating-a-security-descriptor-for-a-new-object-in-c--">Creating a Security Descriptor for a New Object</a>.</para>
    </remarks>
    <seealso cref="GetSecurityDescriptorDacl" />
    <seealso cref="InitializeSecurityDescriptor" />
    <seealso cref="IsValidSecurityDescriptor" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</seealso>
    <seealso cref="SetSecurityDescriptorGroup" />
    <seealso cref="SetSecurityDescriptorOwner" />
    <seealso cref="SetSecurityDescriptorSacl" />
  </member>
  <member name="Windows.SetSecurityDescriptorGroup">
    <summary>
      <para>The <b>SetSecurityDescriptorGroup</b> function sets the primary group information of an absolute-format <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>, replacing any primary group information already present in the security descriptor.</para>
    </summary>
    <param name="pSecurityDescriptor">
      <para>A pointer to the
<see cref="SECURITY_DESCRIPTOR" /> structure whose primary group is set by this function. The function replaces any existing primary group with the new primary group.</para>
    </param>
    <param name="pGroup">
      <para>A pointer to a
<see cref="SID" /> structure for the security descriptor's new primary group. The <b>SID</b> structure is referenced by, not copied into, the security descriptor. If this parameter is <b>NULL</b>, the function clears the security descriptor's primary group information. This marks the security descriptor as having no primary group.</para>
    </param>
    <param name="bGroupDefaulted">
      <para>Indicates whether the primary group information was derived from a default mechanism. If this value is <b>TRUE</b>, it is default information, and the function stores this value as the SE_GROUP_DEFAULTED flag in the
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</a> structure. If this parameter is zero, the SE_GROUP_DEFAULTED flag is cleared.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <seealso cref="GetSecurityDescriptorGroup" />
    <seealso cref="InitializeSecurityDescriptor" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</seealso>
    <seealso cref="SID" />
    <seealso cref="SetSecurityDescriptorDacl" />
    <seealso cref="SetSecurityDescriptorOwner" />
    <seealso cref="SetSecurityDescriptorSacl" />
  </member>
  <member name="Windows.SetSecurityDescriptorOwner">
    <summary>
      <para>The <b>SetSecurityDescriptorOwner</b> function sets the owner information of an absolute-format <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>. It replaces any owner information already present in the security descriptor.</para>
    </summary>
    <param name="pSecurityDescriptor">
      <para>A pointer to the
<see cref="SECURITY_DESCRIPTOR" /> structure whose owner is set by this function. The function replaces any existing owner with the new owner.</para>
    </param>
    <param name="pOwner">
      <para>A pointer to a
<see cref="SID" /> structure for the security descriptor's new primary owner. The <b>SID</b> structure is referenced by, not copied into, the security descriptor. If this parameter is <b>NULL</b>, the function clears the security descriptor's owner information. This marks the security descriptor as having no owner.</para>
    </param>
    <param name="bOwnerDefaulted">
      <para>Indicates whether the owner information is derived from a default mechanism. If this value is <b>TRUE</b>, it is default information. The function stores this value as the SE_OWNER_DEFAULTED flag in the
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</a> structure. If this parameter is zero, the SE_OWNER_DEFAULTED flag is cleared.</para>
    </param>
    <returns>
      <para>If the function succeeds, the return value is nonzero.</para>
      <para>If the function fails, the return value is zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <seealso cref="GetSecurityDescriptorOwner" />
    <seealso cref="InitializeSecurityDescriptor" />
    <seealso cref="IsValidSecurityDescriptor" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</seealso>
    <seealso cref="SID" />
    <seealso cref="SetSecurityDescriptorDacl" />
    <seealso cref="SetSecurityDescriptorGroup" />
    <seealso cref="SetSecurityDescriptorSacl" />
  </member>
  <member name="Windows.SetSecurityDescriptorRMControl">
    <summary>
      <para>The <b>SetSecurityDescriptorRMControl</b> function sets the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">resource manager</a> control bits in the
<see cref="SECURITY_DESCRIPTOR" /> structure.</para>
    </summary>
    <param name="SecurityDescriptor">
      <para>A pointer to a <see cref="SECURITY_DESCRIPTOR" /> structure that contains the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/r-gly">resource manager</a> control bits.</para>
    </param>
    <param name="RMControl">
      <para>A pointer to the bitfield value that the resource manager control bits in the
<see cref="SECURITY_DESCRIPTOR" /> structure will be set to. If the value of this parameter is <b>NULL</b>, the resource manager control bits will be cleared.</para>
    </param>
    <returns>
      <para>The return value is ERROR_SUCCESS.</para>
    </returns>
    <remarks>
      <para>The resource manager control bits are eight bits in the <b>Sbz1</b> member of the
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</a> structure that contains information specific to the resource manager accessing the structure. These bits should be accessed only through the
<see cref="GetSecurityDescriptorRMControl" /> and <b>SetSecurityDescriptorRMControl</b> functions.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="GetSecurityDescriptorRMControl" />
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-information">SECURITY_INFORMATION</seealso>
  </member>
  <member name="Windows.SetSecurityDescriptorSacl">
    <summary>
      <para>The <b>SetSecurityDescriptorSacl</b> function sets information in a <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">system access control list</a> (SACL). If there is already a SACL present in the <a href="https://docs.microsoft.com//windows/desktop/SecGloss/s-gly">security descriptor</a>, it is replaced.</para>
    </summary>
    <param name="pSecurityDescriptor">
      <para>A pointer to the
<see cref="SECURITY_DESCRIPTOR" /> structure to which the function adds the SACL. This security descriptor must be in absolute format, meaning that its members must be pointers to other structures, rather than offsets to contiguous data.</para>
    </param>
    <param name="bSaclPresent">
      <para>Indicates the presence of a SACL in the security descriptor. If this parameter is <b>TRUE</b>, the function sets the SE_SACL_PRESENT flag in the
<a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</a> structure and uses the values in the <i>pSacl</i> and <i>bSaclDefaulted</i> parameters. If it is <b>FALSE</b>, the function does not set the SE_SACL_PRESENT flag, and <i>pSacl</i> and <i>bSaclDefaulted</i> are ignored.</para>
    </param>
    <param name="pSacl">
      <para>A pointer to an
<see cref="ACL" /> structure that specifies the SACL for the security descriptor. If this parameter is <b>NULL</b>, a <b>NULL</b> SACL is assigned to the security descriptor. The SACL is referenced by, not copied into, the security descriptor.</para>
    </param>
    <param name="bSaclDefaulted">
      <para>Indicates the source of the SACL. If this flag is <b>TRUE</b>, the SACL has been retrieved by some default mechanism. If it is <b>FALSE</b>, the SACL has been explicitly specified by a user. The function stores this value in the SE_SACL_DEFAULTED flag of the <a href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</a> structure. If this parameter is not specified, the SE_SACL_DEFAULTED flag is cleared.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <seealso cref="ACL" />
    <seealso cref="GetSecurityDescriptorSacl" />
    <seealso cref="InitializeSecurityDescriptor" />
    <seealso cref="IsValidSecurityDescriptor" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/low-level-access-control">Low-level Access Control</seealso>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Low-level Access Control Functions</seealso>
    <seealso cref="SECURITY_DESCRIPTOR" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/security-descriptor-control">SECURITY_DESCRIPTOR_CONTROL</seealso>
    <seealso cref="SetSecurityDescriptorDacl" />
    <seealso cref="SetSecurityDescriptorGroup" />
    <seealso cref="SetSecurityDescriptorOwner" />
  </member>
  <member name="Windows.SetTokenInformation">
    <summary>
      <para>The <b>SetTokenInformation</b> function sets various types of information for a specified <a href="https://docs.microsoft.com//windows/desktop/SecGloss/a-gly">access token</a>. The information that this function sets replaces existing information. The calling process must have appropriate access rights to set the information.</para>
    </summary>
    <param name="TokenHandle">
      <para>A handle to the access token for which information is to be set.</para>
    </param>
    <param name="TokenInformationClass">
      <para>A value from the
<see cref="TOKEN_INFORMATION_CLASS" /> enumerated type that identifies the type of information the function sets. The valid values from <b>TOKEN_INFORMATION_CLASS</b> are described in the <i>TokenInformation</i> parameter.</para>
    </param>
    <param name="TokenInformation">
      <para>A pointer to a buffer that contains the information set in the access token. The structure of this buffer depends on the type of information specified by the <i>TokenInformationClass</i> parameter.</para>
    </param>
    <param name="TokenInformationLength">
      <para>Specifies the length, in bytes, of the buffer pointed to by <i>TokenInformation</i>.</para>
    </param>
    <returns>
      <para>If the function succeeds, the function returns nonzero.</para>
      <para>If the function fails, it returns zero. To get extended error information, call
<see cref="GetLastError" />.</para>
    </returns>
    <remarks>
      <para>To set privilege information, an application can call the <see cref="AdjustTokenPrivileges" /> function. To set a token's groups, an application can call the <see cref="AdjustTokenGroups" /> function.</para>
      <para>Token-type information can be set only when an access token is created.</para>
    </remarks>
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/access-control">Access Control Overview</seealso>
    <seealso cref="AdjustTokenGroups" />
    <seealso cref="AdjustTokenPrivileges" />
    <seealso href="https://docs.microsoft.com//windows/desktop/SecAuthZ/authorization-functions">Basic Access Control Functions</seealso>
    <seealso cref="GetTokenInformation" />
    <seealso cref="OpenProcessToken" />
    <seealso cref="OpenThreadToken" />
    <seealso cref="TOKEN_DEFAULT_DACL" />
    <seealso cref="TOKEN_INFORMATION_CLASS" />
    <seealso cref="TOKEN_OWNER" />
    <seealso cref="TOKEN_PRIMARY_GROUP" />
  </member>
</doc>