<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="addrinfoex2A">
    <summary>The<b>addrinfoex2</b> structure is used by the<see cref="GetAddrInfoEx" /> function to hold host address information when both a canonical name and a fully qualified domain name have been requested.</summary>
  </member>
  <member name="addrinfoex2A.ai_flags">
    <summary>
      <para>Flags that indicate options used in the<see cref="GetAddrInfoEx" /> function.</para>
      <para>Supported values for the <b>ai_flags</b> member are defined in the <i>Winsock2.h</i> include file and can be a combination of the following options.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_PASSIVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01</term>
              </listheader>
            </list>
          </description>
          <description>The socket address will be used in a call to the <see cref="bind" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_CANONNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x02</term>
              </listheader>
            </list>
          </description>
          <description>The canonical name is returned in the first <b>ai_canonname</b> member.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_NUMERICHOST</b>
                </term>
              </listheader>
              <listheader>
                <term>0x04</term>
              </listheader>
            </list>
          </description>
          <description>The <i>nodename</i> parameter passed to the <see cref="GetAddrInfoEx" /> function must be a numeric string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_ALL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0100</term>
              </listheader>
            </list>
          </description>
          <description>If this bit is set, a request is made for IPv6 addresses and IPv4 addresses with <b>AI_V4MAPPED</b>.<para>This option is supported on Windows Vista and later.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_ADDRCONFIG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0400</term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="GetAddrInfoEx" /> will resolve only if a global address is configured. The IPv6 and IPv4 loopback address is not considered a valid global address. <para>This option is supported on Windows Vista and later.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_V4MAPPED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0800</term>
              </listheader>
            </list>
          </description>
          <description>If the <see cref="GetAddrInfoEx" /> request for an IPv6 addresses fails, a name service request is made for IPv4 addresses and these addresses are converted to IPv4-mapped IPv6 address format.<para>This option is supported on Windows Vista and later.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_NON_AUTHORITATIVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x04000</term>
              </listheader>
            </list>
          </description>
          <description>The address information is from non-authoritative results. <para>When this option is set in the <i>pHints</i> parameter of <see cref="GetAddrInfoEx" />, the <b>NS_EMAIL</b> namespace provider returns both authoritative and non-authoritative results. If this option is not set, then only authoritative results are returned.</para><para>This option is only supported on Windows Vista and later for the <b>NS_EMAIL</b> namespace.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_SECURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x08000</term>
              </listheader>
            </list>
          </description>
          <description>The address information is from a secure channel. <para>If the <b>AI_SECURE</b> bit is set, the <b>NS_EMAIL</b> namespace provider will return results that were obtained with enhanced security to minimize possible spoofing.</para><para>When this option is set in the <i>pHints</i> parameter of <see cref="GetAddrInfoEx" />, the <b>NS_EMAIL</b> namespace provider returns only results that were obtained with enhanced security to minimize possible spoofing.</para><para>This option is only supported on Windows Vista and later for the <b>NS_EMAIL</b> namespace.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_RETURN_PREFERRED_NAMES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x010000</term>
              </listheader>
            </list>
          </description>
          <description>The address information is for a preferred names for publication with a specific namespace. <para>When this option is set in the <i>pHints</i> parameter of <see cref="GetAddrInfoEx" />, no name should be provided in the <i>pName</i> parameter and the <b>NS_EMAIL</b> namespace provider will return preferred names for publication.</para><para>This option is only supported on Windows Vista and later for the <b>NS_EMAIL</b> namespace.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_FQDN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00020000</term>
              </listheader>
            </list>
          </description>
          <description>The fully qualified domain name is returned in the first <b>ai_fqdn</b> member.<para>When this option is set in the <i>pHints</i> parameter of <see cref="GetAddrInfoEx" /> and a flat name (single label) is specified in the <i>pName</i> parameter, the fully qualified domain name that the name eventually resolved to will be returned.</para><para>This option is supported on Windows 7, Windows Server 2008 R2, and later.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_FILESERVER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00040000</term>
              </listheader>
            </list>
          </description>
          <description>A hint to the namespace provider that the hostname being queried is being used in a file share scenario. The namespace provider may ignore this hint.<para>This option is supported on Windows 7, Windows Server 2008 R2, and later.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_DISABLE_IDN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00080000</term>
              </listheader>
            </list>
          </description>
          <description>Disable the automatic International Domain Name encoding using Punycode in the name resolution functions called by the <see cref="GetAddrInfoEx" /> function. <para>This option is supported on Windows 8, Windows Server 2012, and later.</para></description>
        </listheader>
      </list>
    </summary>
  </member>
  <member name="addrinfoex2A.ai_family">
    <summary>
      <para>The address family.</para>
      <para>The possible values for the address family are defined in the <i>Ws2def.h</i> header file. Note that the <i>Ws2def.h</i> header file is automatically included in <i>Winsock2.h</i>, and should never be used directly.</para>
      <para>The values currently supported are <b>AF_INET</b> or <b>AF_INET6</b>, which are the Internet address family formats for IPv4 and IPv6. Other options for address family (<b>AF_NETBIOS</b> for use with NetBIOS, for example) are supported if a Windows Sockets service provider for the address family is installed. Note that the values for the AF_ address family and PF_ protocol family constants are identical (for example, <b>AF_INET</b> and <b>PF_INET</b>), so either constant can be used.</para>
      <para>The table below lists common values for the address family although many other values are possible.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_UNSPEC</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The address family is unspecified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_INET</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The Internet Protocol version 4 (IPv4) address family.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_NETBIOS</b>
                </term>
              </listheader>
              <listheader>
                <term>17</term>
              </listheader>
            </list>
          </description>
          <description>The NetBIOS address family. This address family is only supported if a Windows Sockets provider for NetBIOS is installed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_INET6</b>
                </term>
              </listheader>
              <listheader>
                <term>23</term>
              </listheader>
            </list>
          </description>
          <description>The Internet Protocol version 6 (IPv6) address family.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_IRDA</b>
                </term>
              </listheader>
              <listheader>
                <term>26</term>
              </listheader>
            </list>
          </description>
          <description>The Infrared Data Association (IrDA) address family. This address family is only supported if the computer has an infrared port and driver installed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_BTH</b>
                </term>
              </listheader>
              <listheader>
                <term>32</term>
              </listheader>
            </list>
          </description>
          <description>The Bluetooth address family. This address family is only supported if a Bluetooth adapter is installed.</description>
        </listheader>
      </list>
    </summary>
  </member>
  <member name="addrinfoex2A.ai_socktype">
    <summary>
      <para>The socket type. Possible values for the socket type are defined in the <i>Winsock2.h</i> include file.</para>
      <para>The following table lists the possible values for the socket type supported for Windows Sockets 2:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SOCK_STREAM</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Provides sequenced, reliable, two-way, connection-based byte streams with an OOB data transmission mechanism. Uses the Transmission Control Protocol (TCP) for the Internet address family (<b>AF_INET</b> or <b>AF_INET6</b>). If the <b>ai_family</b> member is <b>AF_IRDA</b>, then <b>SOCK_STREAM</b> is the only supported socket type.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SOCK_DGRAM</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Supports datagrams, which are connectionless, unreliable buffers of a fixed (typically small) maximum length. Uses the User Datagram Protocol (UDP) for the Internet address family (<b>AF_INET</b> or <b>AF_INET6</b>).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SOCK_RAW</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Provides a raw socket that allows an application to manipulate the next upper-layer protocol header. To manipulate the IPv4 header, the <a href="https://docs.microsoft.com//windows/desktop/WinSock/ipproto-ip-socket-options">IP_HDRINCL</a> socket option must be set on the socket. To manipulate the IPv6 header, the <a href="https://docs.microsoft.com//windows/desktop/WinSock/ipproto-ipv6-socket-options">IPV6_HDRINCL</a> socket option must be set on the socket.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SOCK_RDM</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Provides a reliable message datagram. An example of this type is the Pragmatic General Multicast (PGM) multicast protocol implementation in Windows, often referred to as <a href="https://docs.microsoft.com//windows/desktop/WinSock/reliable-multicast-programming--pgm-">reliable multicast programming</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SOCK_SEQPACKET</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>Provides a pseudo-stream packet based on datagrams.</description>
        </listheader>
      </list> <para>In Windows Sockets 2, new socket types were introduced. An application can dynamically discover the attributes of each available transport protocol through the<see cref="WSAEnumProtocols" /> function. So an application can determine the possible socket type and protocol options for an address family and use this information when specifying this parameter. Socket type definitions in the <i>Winsock2.h</i> and <i>Ws2def.h</i> header files will be periodically updated as new socket types, address families, and protocols are defined.</para><para>In Windows Sockets 1.1, the only possible socket types are <b>SOCK_DATAGRAM</b> and <b>SOCK_STREAM</b>.</para></summary>
  </member>
  <member name="addrinfoex2A.ai_protocol">
    <summary>
      <para>The protocol type. The possible options are specific to the address family and socket type specified. Possible values for the <b>ai_protocol</b> are defined in <i>Winsock2.h</i> and the <i>Wsrm.h</i> header files.</para>
      <para>On the Windows SDK released for Windows Vista and later,, the organization of header files has changed and this member can be one of the values from the <b>IPPROTO</b> enumeration type defined in the <i>Ws2def.h</i> header file. Note that the <i>Ws2def.h</i> header file is automatically included in <i>Winsock2.h</i>, and should never be used directly.</para>
      <para>If a value of 0 is specified for <b>ai_protocol</b>, the caller does not wish to specify a protocol and the service provider will choose the <b>ai_protocol</b> to use. For protocols other than IPv4 and IPv6, set <b>ai_protocol</b> to zero.</para>
      <para>The following table lists common values for the <b>ai_protocol</b> member although many other values are possible.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IPPROTO_TCP</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The Transmission Control Protocol (TCP). This is a possible value when the <b>ai_family</b> member is <b>AF_INET</b> or <b>AF_INET6</b> and the <b>ai_socktype</b> member is <b>SOCK_STREAM</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IPPROTO_UDP</b>
                </term>
              </listheader>
              <listheader>
                <term>17</term>
              </listheader>
            </list>
          </description>
          <description>The User Datagram Protocol (UDP). This is a possible value when the <b>ai_family</b> member is <b>AF_INET</b> or <b>AF_INET6</b> and the <i>type</i> parameter is <b>SOCK_DGRAM</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IPPROTO_RM</b>
                </term>
              </listheader>
              <listheader>
                <term>113</term>
              </listheader>
            </list>
          </description>
          <description>The PGM protocol for reliable multicast. This is a possible value when the <b>ai_family</b> member is <b>AF_INET</b> and the <b>ai_socktype</b> member is <b>SOCK_RDM</b>. On the Windows SDK released for Windows Vista and later, this value is also called <b>IPPROTO_PGM</b>.</description>
        </listheader>
      </list> <para>If the <b>ai_family</b> member is <b>AF_IRDA</b>, then the <b>ai_protocol</b> must be 0.</para></summary>
  </member>
  <member name="addrinfoex2A.ai_addrlen">
    <summary>The length, in bytes, of the buffer pointed to by the <b>ai_addr</b> member.</summary>
  </member>
  <member name="addrinfoex2A.ai_canonname">
    <summary>The canonical name for the host.</summary>
  </member>
  <member name="addrinfoex2A.ai_addr">
    <summary>A pointer to a<a href="https://docs.microsoft.com//windows/desktop/WinSock/sockaddr-2">sockaddr</a> structure. The <b>ai_addr</b> member in each returned <b>addrinfoex2</b> structure points to a filled-in socket address structure. The length, in bytes, of each returned <b>addrinfoex2</b> structure is specified in the <b>ai_addrlen</b> member.</summary>
  </member>
  <member name="addrinfoex2A.ai_blob">
    <summary>A pointer to data that is used to return provider-specific namespace information that is associated with the name beyond a list of addresses. The length, in bytes, of the buffer pointed to by <b>ai_blob</b> must be specified in the <b>ai_bloblen</b> member.</summary>
  </member>
  <member name="addrinfoex2A.ai_bloblen">
    <summary>The length, in bytes, of the <b>ai_blob</b> member.</summary>
  </member>
  <member name="addrinfoex2A.ai_provider">
    <summary>A pointer to the GUID of a specific namespace provider.</summary>
  </member>
  <member name="addrinfoex2A.ai_next">
    <summary>A pointer to the next structure in a linked list. This parameter is set to <b>NULL</b> in the last<b>addrinfoex2</b> structure of a linked list.</summary>
  </member>
  <member name="addrinfoex2A.ai_version">
    <summary>The version number of this structure. The value currently used for this version of the structure is 2.</summary>
  </member>
  <member name="addrinfoex2A.ai_fqdn">
    <summary>The fully qualified domain name for the host.</summary>
  </member>
  <member name="addrinfoex2A">
    <summary>The<b>addrinfoex2</b> structure is used by the<see cref="GetAddrInfoEx" /> function to hold host address information when both a canonical name and a fully qualified domain name have been requested.</summary>
  </member>
  <member name="addrinfoex2A.ai_flags">
    <summary>
      <para>Flags that indicate options used in the<see cref="GetAddrInfoEx" /> function.</para>
      <para>Supported values for the <b>ai_flags</b> member are defined in the <i>Winsock2.h</i> include file and can be a combination of the following options.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_PASSIVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x01</term>
              </listheader>
            </list>
          </description>
          <description>The socket address will be used in a call to the <see cref="bind" /> function.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_CANONNAME</b>
                </term>
              </listheader>
              <listheader>
                <term>0x02</term>
              </listheader>
            </list>
          </description>
          <description>The canonical name is returned in the first <b>ai_canonname</b> member.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_NUMERICHOST</b>
                </term>
              </listheader>
              <listheader>
                <term>0x04</term>
              </listheader>
            </list>
          </description>
          <description>The <i>nodename</i> parameter passed to the <see cref="GetAddrInfoEx" /> function must be a numeric string.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_ALL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0100</term>
              </listheader>
            </list>
          </description>
          <description>If this bit is set, a request is made for IPv6 addresses and IPv4 addresses with <b>AI_V4MAPPED</b>.<para>This option is supported on Windows Vista and later.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_ADDRCONFIG</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0400</term>
              </listheader>
            </list>
          </description>
          <description>The <see cref="GetAddrInfoEx" /> will resolve only if a global address is configured. The IPv6 and IPv4 loopback address is not considered a valid global address. <para>This option is supported on Windows Vista and later.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_V4MAPPED</b>
                </term>
              </listheader>
              <listheader>
                <term>0x0800</term>
              </listheader>
            </list>
          </description>
          <description>If the <see cref="GetAddrInfoEx" /> request for an IPv6 addresses fails, a name service request is made for IPv4 addresses and these addresses are converted to IPv4-mapped IPv6 address format.<para>This option is supported on Windows Vista and later.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_NON_AUTHORITATIVE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x04000</term>
              </listheader>
            </list>
          </description>
          <description>The address information is from non-authoritative results. <para>When this option is set in the <i>pHints</i> parameter of <see cref="GetAddrInfoEx" />, the <b>NS_EMAIL</b> namespace provider returns both authoritative and non-authoritative results. If this option is not set, then only authoritative results are returned.</para><para>This option is only supported on Windows Vista and later for the <b>NS_EMAIL</b> namespace.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_SECURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x08000</term>
              </listheader>
            </list>
          </description>
          <description>The address information is from a secure channel. <para>If the <b>AI_SECURE</b> bit is set, the <b>NS_EMAIL</b> namespace provider will return results that were obtained with enhanced security to minimize possible spoofing.</para><para>When this option is set in the <i>pHints</i> parameter of <see cref="GetAddrInfoEx" />, the <b>NS_EMAIL</b> namespace provider returns only results that were obtained with enhanced security to minimize possible spoofing.</para><para>This option is only supported on Windows Vista and later for the <b>NS_EMAIL</b> namespace.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_RETURN_PREFERRED_NAMES</b>
                </term>
              </listheader>
              <listheader>
                <term>0x010000</term>
              </listheader>
            </list>
          </description>
          <description>The address information is for a preferred names for publication with a specific namespace. <para>When this option is set in the <i>pHints</i> parameter of <see cref="GetAddrInfoEx" />, no name should be provided in the <i>pName</i> parameter and the <b>NS_EMAIL</b> namespace provider will return preferred names for publication.</para><para>This option is only supported on Windows Vista and later for the <b>NS_EMAIL</b> namespace.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_FQDN</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00020000</term>
              </listheader>
            </list>
          </description>
          <description>The fully qualified domain name is returned in the first <b>ai_fqdn</b> member.<para>When this option is set in the <i>pHints</i> parameter of <see cref="GetAddrInfoEx" /> and a flat name (single label) is specified in the <i>pName</i> parameter, the fully qualified domain name that the name eventually resolved to will be returned.</para><para>This option is supported on Windows 7, Windows Server 2008 R2, and later.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_FILESERVER</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00040000</term>
              </listheader>
            </list>
          </description>
          <description>A hint to the namespace provider that the hostname being queried is being used in a file share scenario. The namespace provider may ignore this hint.<para>This option is supported on Windows 7, Windows Server 2008 R2, and later.</para></description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AI_DISABLE_IDN_ENCODING</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00080000</term>
              </listheader>
            </list>
          </description>
          <description>Disable the automatic International Domain Name encoding using Punycode in the name resolution functions called by the <see cref="GetAddrInfoEx" /> function. <para>This option is supported on Windows 8, Windows Server 2012, and later.</para></description>
        </listheader>
      </list>
    </summary>
  </member>
  <member name="addrinfoex2A.ai_family">
    <summary>
      <para>The address family.</para>
      <para>The possible values for the address family are defined in the <i>Ws2def.h</i> header file. Note that the <i>Ws2def.h</i> header file is automatically included in <i>Winsock2.h</i>, and should never be used directly.</para>
      <para>The values currently supported are <b>AF_INET</b> or <b>AF_INET6</b>, which are the Internet address family formats for IPv4 and IPv6. Other options for address family (<b>AF_NETBIOS</b> for use with NetBIOS, for example) are supported if a Windows Sockets service provider for the address family is installed. Note that the values for the AF_ address family and PF_ protocol family constants are identical (for example, <b>AF_INET</b> and <b>PF_INET</b>), so either constant can be used.</para>
      <para>The table below lists common values for the address family although many other values are possible.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_UNSPEC</b>
                </term>
              </listheader>
              <listheader>
                <term>0</term>
              </listheader>
            </list>
          </description>
          <description>The address family is unspecified.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_INET</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>The Internet Protocol version 4 (IPv4) address family.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_NETBIOS</b>
                </term>
              </listheader>
              <listheader>
                <term>17</term>
              </listheader>
            </list>
          </description>
          <description>The NetBIOS address family. This address family is only supported if a Windows Sockets provider for NetBIOS is installed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_INET6</b>
                </term>
              </listheader>
              <listheader>
                <term>23</term>
              </listheader>
            </list>
          </description>
          <description>The Internet Protocol version 6 (IPv6) address family.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_IRDA</b>
                </term>
              </listheader>
              <listheader>
                <term>26</term>
              </listheader>
            </list>
          </description>
          <description>The Infrared Data Association (IrDA) address family. This address family is only supported if the computer has an infrared port and driver installed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>AF_BTH</b>
                </term>
              </listheader>
              <listheader>
                <term>32</term>
              </listheader>
            </list>
          </description>
          <description>The Bluetooth address family. This address family is only supported if a Bluetooth adapter is installed.</description>
        </listheader>
      </list>
    </summary>
  </member>
  <member name="addrinfoex2A.ai_socktype">
    <summary>
      <para>The socket type. Possible values for the socket type are defined in the <i>Winsock2.h</i> include file.</para>
      <para>The following table lists the possible values for the socket type supported for Windows Sockets 2:</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SOCK_STREAM</b>
                </term>
              </listheader>
              <listheader>
                <term>1</term>
              </listheader>
            </list>
          </description>
          <description>Provides sequenced, reliable, two-way, connection-based byte streams with an OOB data transmission mechanism. Uses the Transmission Control Protocol (TCP) for the Internet address family (<b>AF_INET</b> or <b>AF_INET6</b>). If the <b>ai_family</b> member is <b>AF_IRDA</b>, then <b>SOCK_STREAM</b> is the only supported socket type.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SOCK_DGRAM</b>
                </term>
              </listheader>
              <listheader>
                <term>2</term>
              </listheader>
            </list>
          </description>
          <description>Supports datagrams, which are connectionless, unreliable buffers of a fixed (typically small) maximum length. Uses the User Datagram Protocol (UDP) for the Internet address family (<b>AF_INET</b> or <b>AF_INET6</b>).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SOCK_RAW</b>
                </term>
              </listheader>
              <listheader>
                <term>3</term>
              </listheader>
            </list>
          </description>
          <description>Provides a raw socket that allows an application to manipulate the next upper-layer protocol header. To manipulate the IPv4 header, the <a href="https://docs.microsoft.com//windows/desktop/WinSock/ipproto-ip-socket-options">IP_HDRINCL</a> socket option must be set on the socket. To manipulate the IPv6 header, the <a href="https://docs.microsoft.com//windows/desktop/WinSock/ipproto-ipv6-socket-options">IPV6_HDRINCL</a> socket option must be set on the socket.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SOCK_RDM</b>
                </term>
              </listheader>
              <listheader>
                <term>4</term>
              </listheader>
            </list>
          </description>
          <description>Provides a reliable message datagram. An example of this type is the Pragmatic General Multicast (PGM) multicast protocol implementation in Windows, often referred to as <a href="https://docs.microsoft.com//windows/desktop/WinSock/reliable-multicast-programming--pgm-">reliable multicast programming</a>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>SOCK_SEQPACKET</b>
                </term>
              </listheader>
              <listheader>
                <term>5</term>
              </listheader>
            </list>
          </description>
          <description>Provides a pseudo-stream packet based on datagrams.</description>
        </listheader>
      </list> <para>In Windows Sockets 2, new socket types were introduced. An application can dynamically discover the attributes of each available transport protocol through the<see cref="WSAEnumProtocols" /> function. So an application can determine the possible socket type and protocol options for an address family and use this information when specifying this parameter. Socket type definitions in the <i>Winsock2.h</i> and <i>Ws2def.h</i> header files will be periodically updated as new socket types, address families, and protocols are defined.</para><para>In Windows Sockets 1.1, the only possible socket types are <b>SOCK_DATAGRAM</b> and <b>SOCK_STREAM</b>.</para></summary>
  </member>
  <member name="addrinfoex2A.ai_protocol">
    <summary>
      <para>The protocol type. The possible options are specific to the address family and socket type specified. Possible values for the <b>ai_protocol</b> are defined in <i>Winsock2.h</i> and the <i>Wsrm.h</i> header files.</para>
      <para>On the Windows SDK released for Windows Vista and later,, the organization of header files has changed and this member can be one of the values from the <b>IPPROTO</b> enumeration type defined in the <i>Ws2def.h</i> header file. Note that the <i>Ws2def.h</i> header file is automatically included in <i>Winsock2.h</i>, and should never be used directly.</para>
      <para>If a value of 0 is specified for <b>ai_protocol</b>, the caller does not wish to specify a protocol and the service provider will choose the <b>ai_protocol</b> to use. For protocols other than IPv4 and IPv6, set <b>ai_protocol</b> to zero.</para>
      <para>The following table lists common values for the <b>ai_protocol</b> member although many other values are possible.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IPPROTO_TCP</b>
                </term>
              </listheader>
              <listheader>
                <term>6</term>
              </listheader>
            </list>
          </description>
          <description>The Transmission Control Protocol (TCP). This is a possible value when the <b>ai_family</b> member is <b>AF_INET</b> or <b>AF_INET6</b> and the <b>ai_socktype</b> member is <b>SOCK_STREAM</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IPPROTO_UDP</b>
                </term>
              </listheader>
              <listheader>
                <term>17</term>
              </listheader>
            </list>
          </description>
          <description>The User Datagram Protocol (UDP). This is a possible value when the <b>ai_family</b> member is <b>AF_INET</b> or <b>AF_INET6</b> and the <i>type</i> parameter is <b>SOCK_DGRAM</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>IPPROTO_RM</b>
                </term>
              </listheader>
              <listheader>
                <term>113</term>
              </listheader>
            </list>
          </description>
          <description>The PGM protocol for reliable multicast. This is a possible value when the <b>ai_family</b> member is <b>AF_INET</b> and the <b>ai_socktype</b> member is <b>SOCK_RDM</b>. On the Windows SDK released for Windows Vista and later, this value is also called <b>IPPROTO_PGM</b>.</description>
        </listheader>
      </list> <para>If the <b>ai_family</b> member is <b>AF_IRDA</b>, then the <b>ai_protocol</b> must be 0.</para></summary>
  </member>
  <member name="addrinfoex2A.ai_addrlen">
    <summary>The length, in bytes, of the buffer pointed to by the <b>ai_addr</b> member.</summary>
  </member>
  <member name="addrinfoex2A.ai_canonname">
    <summary>The canonical name for the host.</summary>
  </member>
  <member name="addrinfoex2A.ai_addr">
    <summary>A pointer to a<a href="https://docs.microsoft.com//windows/desktop/WinSock/sockaddr-2">sockaddr</a> structure. The <b>ai_addr</b> member in each returned <b>addrinfoex2</b> structure points to a filled-in socket address structure. The length, in bytes, of each returned <b>addrinfoex2</b> structure is specified in the <b>ai_addrlen</b> member.</summary>
  </member>
  <member name="addrinfoex2A.ai_blob">
    <summary>A pointer to data that is used to return provider-specific namespace information that is associated with the name beyond a list of addresses. The length, in bytes, of the buffer pointed to by <b>ai_blob</b> must be specified in the <b>ai_bloblen</b> member.</summary>
  </member>
  <member name="addrinfoex2A.ai_bloblen">
    <summary>The length, in bytes, of the <b>ai_blob</b> member.</summary>
  </member>
  <member name="addrinfoex2A.ai_provider">
    <summary>A pointer to the GUID of a specific namespace provider.</summary>
  </member>
  <member name="addrinfoex2A.ai_next">
    <summary>A pointer to the next structure in a linked list. This parameter is set to <b>NULL</b> in the last<b>addrinfoex2</b> structure of a linked list.</summary>
  </member>
  <member name="addrinfoex2A.ai_version">
    <summary>The version number of this structure. The value currently used for this version of the structure is 2.</summary>
  </member>
  <member name="addrinfoex2A.ai_fqdn">
    <summary>The fully qualified domain name for the host.</summary>
  </member>
</doc>