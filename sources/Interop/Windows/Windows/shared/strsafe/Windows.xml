<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.StringCbCat">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCat</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The string to which <i>pszSrc</i> is to be concatenated, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either less than <code>sizeof(TCHAR)</code> or larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatA">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCat</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The string to which <i>pszSrc</i> is to be concatenated, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either less than <code>sizeof(TCHAR)</code> or larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatW">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCat</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The string to which <i>pszSrc</i> is to be concatenated, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either less than <code>sizeof(TCHAR)</code> or larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatEx">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCatEx</b> adds to the functionality of <see cref="StringCbCat" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbCatEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The string to which <i>pszSrc</i> is to be concatenated, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either less than <code>sizeof(TCHAR)</code> or larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatExA">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCatEx</b> adds to the functionality of <see cref="StringCbCat" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbCatEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The string to which <i>pszSrc</i> is to be concatenated, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either less than <code>sizeof(TCHAR)</code> or larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatExW">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCatEx</b> adds to the functionality of <see cref="StringCbCat" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbCatEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The string to which <i>pszSrc</i> is to be concatenated, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either less than <code>sizeof(TCHAR)</code> or larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatEx">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCatEx</b> adds to the functionality of <see cref="StringCbCat" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbCatEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The string to which <i>pszSrc</i> is to be concatenated, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either less than <code>sizeof(TCHAR)</code> or larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatExA">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCatEx</b> adds to the functionality of <see cref="StringCbCat" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbCatEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The string to which <i>pszSrc</i> is to be concatenated, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either less than <code>sizeof(TCHAR)</code> or larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatExW">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCatEx</b> adds to the functionality of <see cref="StringCbCat" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbCatEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The string to which <i>pszSrc</i> is to be concatenated, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either less than <code>sizeof(TCHAR)</code> or larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatN">
    <summary>
      <para>Concatenates the specified number of bytes from one string to another string. The size, in bytes, of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCatN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated to <i>pszSrc</i>, and will receive the resultant string. The string at <i>pszSrc</i>, up to <i>cbMaxAppend</i> bytes, is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus either the length of <i>pszDest</i> or <i>cbMaxAppend</i> (whichever is smaller) plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This source string must be null-terminated.</param>
    <param name="cbToAppend">The maximum number of bytes to be appended to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than the maximum allowed value, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatNA">
    <summary>
      <para>Concatenates the specified number of bytes from one string to another string. The size, in bytes, of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCatN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated to <i>pszSrc</i>, and will receive the resultant string. The string at <i>pszSrc</i>, up to <i>cbMaxAppend</i> bytes, is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus either the length of <i>pszDest</i> or <i>cbMaxAppend</i> (whichever is smaller) plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This source string must be null-terminated.</param>
    <param name="cbToAppend">The maximum number of bytes to be appended to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than the maximum allowed value, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatNW">
    <summary>
      <para>Concatenates the specified number of bytes from one string to another string. The size, in bytes, of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCatN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated to <i>pszSrc</i>, and will receive the resultant string. The string at <i>pszSrc</i>, up to <i>cbMaxAppend</i> bytes, is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus either the length of <i>pszDest</i> or <i>cbMaxAppend</i> (whichever is smaller) plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This source string must be null-terminated.</param>
    <param name="cbToAppend">The maximum number of bytes to be appended to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than the maximum allowed value, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatNEx">
    <summary>
      <para>Concatenates the specified number of bytes from one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCatNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
      <b>StringCbCatNEx</b> adds to the functionality of <see cref="StringCbCatN" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated with <i>pszSrc</i>, and will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus the bytes used for the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="cbToAppend">The maximum number of bytes to append to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, an invalid flag was passed, or there are discrepancies between the size of the <i>pszDest</i>, <i>cbDest</i>, and the amount of material to append in <i>pszSrc</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatNExA">
    <summary>
      <para>Concatenates the specified number of bytes from one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCatNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
      <b>StringCbCatNEx</b> adds to the functionality of <see cref="StringCbCatN" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated with <i>pszSrc</i>, and will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus the bytes used for the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="cbToAppend">The maximum number of bytes to append to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, an invalid flag was passed, or there are discrepancies between the size of the <i>pszDest</i>, <i>cbDest</i>, and the amount of material to append in <i>pszSrc</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatNExW">
    <summary>
      <para>Concatenates the specified number of bytes from one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCatNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
      <b>StringCbCatNEx</b> adds to the functionality of <see cref="StringCbCatN" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated with <i>pszSrc</i>, and will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus the bytes used for the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="cbToAppend">The maximum number of bytes to append to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, an invalid flag was passed, or there are discrepancies between the size of the <i>pszDest</i>, <i>cbDest</i>, and the amount of material to append in <i>pszSrc</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatNEx">
    <summary>
      <para>Concatenates the specified number of bytes from one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCatNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
      <b>StringCbCatNEx</b> adds to the functionality of <see cref="StringCbCatN" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated with <i>pszSrc</i>, and will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus the bytes used for the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="cbToAppend">The maximum number of bytes to append to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, an invalid flag was passed, or there are discrepancies between the size of the <i>pszDest</i>, <i>cbDest</i>, and the amount of material to append in <i>pszSrc</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatNExA">
    <summary>
      <para>Concatenates the specified number of bytes from one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCatNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
      <b>StringCbCatNEx</b> adds to the functionality of <see cref="StringCbCatN" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated with <i>pszSrc</i>, and will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus the bytes used for the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="cbToAppend">The maximum number of bytes to append to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, an invalid flag was passed, or there are discrepancies between the size of the <i>pszDest</i>, <i>cbDest</i>, and the amount of material to append in <i>pszSrc</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatNExW">
    <summary>
      <para>Concatenates the specified number of bytes from one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCatNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
      <b>StringCbCatNEx</b> adds to the functionality of <see cref="StringCbCatN" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated with <i>pszSrc</i>, and will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus the bytes used for the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="cbToAppend">The maximum number of bytes to append to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, an invalid flag was passed, or there are discrepancies between the size of the <i>pszDest</i>, <i>cbDest</i>, and the amount of material to append in <i>pszSrc</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatN">
    <summary>
      <para>Concatenates the specified number of bytes from one string to another string. The size, in bytes, of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCatN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated to <i>pszSrc</i>, and will receive the resultant string. The string at <i>pszSrc</i>, up to <i>cbMaxAppend</i> bytes, is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus either the length of <i>pszDest</i> or <i>cbMaxAppend</i> (whichever is smaller) plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This source string must be null-terminated.</param>
    <param name="cbToAppend">The maximum number of bytes to be appended to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than the maximum allowed value, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatNA">
    <summary>
      <para>Concatenates the specified number of bytes from one string to another string. The size, in bytes, of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCatN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated to <i>pszSrc</i>, and will receive the resultant string. The string at <i>pszSrc</i>, up to <i>cbMaxAppend</i> bytes, is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus either the length of <i>pszDest</i> or <i>cbMaxAppend</i> (whichever is smaller) plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This source string must be null-terminated.</param>
    <param name="cbToAppend">The maximum number of bytes to be appended to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than the maximum allowed value, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatNW">
    <summary>
      <para>Concatenates the specified number of bytes from one string to another string. The size, in bytes, of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCatN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated to <i>pszSrc</i>, and will receive the resultant string. The string at <i>pszSrc</i>, up to <i>cbMaxAppend</i> bytes, is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus either the length of <i>pszDest</i> or <i>cbMaxAppend</i> (whichever is smaller) plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This source string must be null-terminated.</param>
    <param name="cbToAppend">The maximum number of bytes to be appended to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than the maximum allowed value, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCat">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCat</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The string to which <i>pszSrc</i> is to be concatenated, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either less than <code>sizeof(TCHAR)</code> or larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatA">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCat</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The string to which <i>pszSrc</i> is to be concatenated, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either less than <code>sizeof(TCHAR)</code> or larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCatW">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCat</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The string to which <i>pszSrc</i> is to be concatenated, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either less than <code>sizeof(TCHAR)</code> or larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopy">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopy</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">A pointer to a buffer containing the source string. This source string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either less than <code>sizeof(TCHAR)</code> or larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyA">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopy</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">A pointer to a buffer containing the source string. This source string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either less than <code>sizeof(TCHAR)</code> or larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyW">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopy</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">A pointer to a buffer containing the source string. This source string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either less than <code>sizeof(TCHAR)</code> or larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyEx">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopyEx</b> adds to the functionality of <see cref="StringCbCopy" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbCopyEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyExA">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopyEx</b> adds to the functionality of <see cref="StringCbCopy" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbCopyEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyExW">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopyEx</b> adds to the functionality of <see cref="StringCbCopy" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbCopyEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyEx">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopyEx</b> adds to the functionality of <see cref="StringCbCopy" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbCopyEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyExA">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopyEx</b> adds to the functionality of <see cref="StringCbCopy" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbCopyEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyExW">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopyEx</b> adds to the functionality of <see cref="StringCbCopy" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbCopyEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyN">
    <summary>
      <para>Copies the specified number of bytes from one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopyN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cbDest">The size of <i>pszDest</i>, in bytes. This value must be large enough to hold the copied bytes (the size of <i>pszSrc</i> or the value of <i>cbSrc</i>, whichever is smaller) and also account for the terminating null character. The maximum number of characters allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="cbToCopy">The maximum number of bytes to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the data was copied from <i>pszSrc</i> without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyNA">
    <summary>
      <para>Copies the specified number of bytes from one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopyN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cbDest">The size of <i>pszDest</i>, in bytes. This value must be large enough to hold the copied bytes (the size of <i>pszSrc</i> or the value of <i>cbSrc</i>, whichever is smaller) and also account for the terminating null character. The maximum number of characters allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="cbToCopy">The maximum number of bytes to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the data was copied from <i>pszSrc</i> without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyNW">
    <summary>
      <para>Copies the specified number of bytes from one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopyN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cbDest">The size of <i>pszDest</i>, in bytes. This value must be large enough to hold the copied bytes (the size of <i>pszSrc</i> or the value of <i>cbSrc</i>, whichever is smaller) and also account for the terminating null character. The maximum number of characters allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="cbToCopy">The maximum number of bytes to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the data was copied from <i>pszSrc</i> without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyNEx">
    <summary>
      <para>Copies the specified number of bytes from one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopyNEx</b> adds to the functionality of <see cref="StringCbCopyN" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbCopyNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cbDest">The size of <i>pszDest</i>, in bytes. This value must be at least large enough to hold the copied bytes (the length of <i>pszSrc</i> or the value of <i>cbSrc</i>, whichever is smaller) as well as to account for the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="cbToCopy">The maximum number of bytes to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> or <i>pszSrc</i> is greater than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyNExA">
    <summary>
      <para>Copies the specified number of bytes from one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopyNEx</b> adds to the functionality of <see cref="StringCbCopyN" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbCopyNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cbDest">The size of <i>pszDest</i>, in bytes. This value must be at least large enough to hold the copied bytes (the length of <i>pszSrc</i> or the value of <i>cbSrc</i>, whichever is smaller) as well as to account for the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="cbToCopy">The maximum number of bytes to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> or <i>pszSrc</i> is greater than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyNExW">
    <summary>
      <para>Copies the specified number of bytes from one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopyNEx</b> adds to the functionality of <see cref="StringCbCopyN" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbCopyNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cbDest">The size of <i>pszDest</i>, in bytes. This value must be at least large enough to hold the copied bytes (the length of <i>pszSrc</i> or the value of <i>cbSrc</i>, whichever is smaller) as well as to account for the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="cbToCopy">The maximum number of bytes to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> or <i>pszSrc</i> is greater than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyNEx">
    <summary>
      <para>Copies the specified number of bytes from one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopyNEx</b> adds to the functionality of <see cref="StringCbCopyN" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbCopyNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cbDest">The size of <i>pszDest</i>, in bytes. This value must be at least large enough to hold the copied bytes (the length of <i>pszSrc</i> or the value of <i>cbSrc</i>, whichever is smaller) as well as to account for the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="cbToCopy">The maximum number of bytes to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> or <i>pszSrc</i> is greater than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyNExA">
    <summary>
      <para>Copies the specified number of bytes from one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopyNEx</b> adds to the functionality of <see cref="StringCbCopyN" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbCopyNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cbDest">The size of <i>pszDest</i>, in bytes. This value must be at least large enough to hold the copied bytes (the length of <i>pszSrc</i> or the value of <i>cbSrc</i>, whichever is smaller) as well as to account for the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="cbToCopy">The maximum number of bytes to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> or <i>pszSrc</i> is greater than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyNExW">
    <summary>
      <para>Copies the specified number of bytes from one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopyNEx</b> adds to the functionality of <see cref="StringCbCopyN" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbCopyNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cbDest">The size of <i>pszDest</i>, in bytes. This value must be at least large enough to hold the copied bytes (the length of <i>pszSrc</i> or the value of <i>cbSrc</i>, whichever is smaller) as well as to account for the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="cbToCopy">The maximum number of bytes to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> or <i>pszSrc</i> is greater than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyN">
    <summary>
      <para>Copies the specified number of bytes from one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopyN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cbDest">The size of <i>pszDest</i>, in bytes. This value must be large enough to hold the copied bytes (the size of <i>pszSrc</i> or the value of <i>cbSrc</i>, whichever is smaller) and also account for the terminating null character. The maximum number of characters allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="cbToCopy">The maximum number of bytes to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the data was copied from <i>pszSrc</i> without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyNA">
    <summary>
      <para>Copies the specified number of bytes from one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopyN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cbDest">The size of <i>pszDest</i>, in bytes. This value must be large enough to hold the copied bytes (the size of <i>pszSrc</i> or the value of <i>cbSrc</i>, whichever is smaller) and also account for the terminating null character. The maximum number of characters allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="cbToCopy">The maximum number of bytes to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the data was copied from <i>pszSrc</i> without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyNW">
    <summary>
      <para>Copies the specified number of bytes from one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopyN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cbDest">The size of <i>pszDest</i>, in bytes. This value must be large enough to hold the copied bytes (the size of <i>pszSrc</i> or the value of <i>cbSrc</i>, whichever is smaller) and also account for the terminating null character. The maximum number of characters allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="cbToCopy">The maximum number of bytes to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the data was copied from <i>pszSrc</i> without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopy">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopy</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">A pointer to a buffer containing the source string. This source string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either less than <code>sizeof(TCHAR)</code> or larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyA">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopy</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">A pointer to a buffer containing the source string. This source string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either less than <code>sizeof(TCHAR)</code> or larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbCopyW">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbCopy</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must consider the length of <i>pszSrc</i> plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszSrc">A pointer to a buffer containing the source string. This source string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either less than <code>sizeof(TCHAR)</code> or larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbGets">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCbGets</b> is a replacement for the following functions:<list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCbGets</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which receives the input.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be greater than <code>sizeof(TCHAR)</code> for the function to succeed. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>. If <i>cbDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data was read from stdin, was copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is <code>sizeof(TCHAR)</code> or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbGetsA">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCbGets</b> is a replacement for the following functions:<list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCbGets</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which receives the input.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be greater than <code>sizeof(TCHAR)</code> for the function to succeed. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>. If <i>cbDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data was read from stdin, was copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is <code>sizeof(TCHAR)</code> or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbGetsW">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCbGets</b> is a replacement for the following functions:<list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCbGets</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which receives the input.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be greater than <code>sizeof(TCHAR)</code> for the function to succeed. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>. If <i>cbDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data was read from stdin, was copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is <code>sizeof(TCHAR)</code> or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbGetsEx">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCbGetsEx</b> adds to the functionality of <see cref="StringCbGets" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.<para><b>StringCbGetsEx</b> is a replacement for the following functions:</para><list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCbGetsEx</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which is to receive the input.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be greater than <code>sizeof(TCHAR)</code> for the function to succeed. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>. If <i>cbDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data was read from stdin, was copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than the maximum allowed value or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is 1 or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbGetsExA">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCbGetsEx</b> adds to the functionality of <see cref="StringCbGets" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.<para><b>StringCbGetsEx</b> is a replacement for the following functions:</para><list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCbGetsEx</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which is to receive the input.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be greater than <code>sizeof(TCHAR)</code> for the function to succeed. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>. If <i>cbDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data was read from stdin, was copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than the maximum allowed value or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is 1 or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbGetsExW">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCbGetsEx</b> adds to the functionality of <see cref="StringCbGets" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.<para><b>StringCbGetsEx</b> is a replacement for the following functions:</para><list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCbGetsEx</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which is to receive the input.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be greater than <code>sizeof(TCHAR)</code> for the function to succeed. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>. If <i>cbDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data was read from stdin, was copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than the maximum allowed value or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is 1 or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbGetsEx">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCbGetsEx</b> adds to the functionality of <see cref="StringCbGets" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.<para><b>StringCbGetsEx</b> is a replacement for the following functions:</para><list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCbGetsEx</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which is to receive the input.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be greater than <code>sizeof(TCHAR)</code> for the function to succeed. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>. If <i>cbDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data was read from stdin, was copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than the maximum allowed value or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is 1 or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbGetsExA">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCbGetsEx</b> adds to the functionality of <see cref="StringCbGets" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.<para><b>StringCbGetsEx</b> is a replacement for the following functions:</para><list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCbGetsEx</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which is to receive the input.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be greater than <code>sizeof(TCHAR)</code> for the function to succeed. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>. If <i>cbDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data was read from stdin, was copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than the maximum allowed value or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is 1 or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbGetsExW">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCbGetsEx</b> adds to the functionality of <see cref="StringCbGets" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.<para><b>StringCbGetsEx</b> is a replacement for the following functions:</para><list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCbGetsEx</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which is to receive the input.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be greater than <code>sizeof(TCHAR)</code> for the function to succeed. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>. If <i>cbDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data was read from stdin, was copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than the maximum allowed value or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is 1 or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbGets">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCbGets</b> is a replacement for the following functions:<list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCbGets</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which receives the input.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be greater than <code>sizeof(TCHAR)</code> for the function to succeed. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>. If <i>cbDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data was read from stdin, was copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is <code>sizeof(TCHAR)</code> or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbGetsA">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCbGets</b> is a replacement for the following functions:<list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCbGets</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which receives the input.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be greater than <code>sizeof(TCHAR)</code> for the function to succeed. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>. If <i>cbDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data was read from stdin, was copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is <code>sizeof(TCHAR)</code> or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbGetsW">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCbGets</b> is a replacement for the following functions:<list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCbGets</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which receives the input.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be greater than <code>sizeof(TCHAR)</code> for the function to succeed. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>. If <i>cbDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Data was read from stdin, was copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is <code>sizeof(TCHAR)</code> or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbLength">
    <summary>
      <para>Determines whether a string exceeds the specified length, in bytes.</para>
      <para>
        <b>StringCbLength</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strlen-wcslen-mbslen-mbslen-l-mbstrlen-mbstrlen-l">strlen, wcslen, _tcslen</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="psz">The string whose length is to be checked.</param>
    <param name="cbMax">The maximum number of bytes allowed in <i>psz</i>, including those used for the terminating null character. This value cannot exceed <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pcbLength">The number of bytes in <i>psz</i>, excluding those used for the terminating null character. This value is valid only if <i>pcb</i> is not <b>NULL</b> and the function succeeds.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The string at <i>psz</i> was not <b>NULL</b>, and the length of the string (including the terminating null character) is less than or equal to <i>cbMax</i> characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>psz</i> is <b>NULL</b>, <i>cbMax</i> is larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or <i>psz</i> is longer than <i>cbMax</i>.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbLengthA">
    <summary>
      <para>Determines whether a string exceeds the specified length, in bytes.</para>
      <para>
        <b>StringCbLength</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strlen-wcslen-mbslen-mbslen-l-mbstrlen-mbstrlen-l">strlen, wcslen, _tcslen</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="psz">The string whose length is to be checked.</param>
    <param name="cbMax">The maximum number of bytes allowed in <i>psz</i>, including those used for the terminating null character. This value cannot exceed <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pcbLength">The number of bytes in <i>psz</i>, excluding those used for the terminating null character. This value is valid only if <i>pcb</i> is not <b>NULL</b> and the function succeeds.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The string at <i>psz</i> was not <b>NULL</b>, and the length of the string (including the terminating null character) is less than or equal to <i>cbMax</i> characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>psz</i> is <b>NULL</b>, <i>cbMax</i> is larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or <i>psz</i> is longer than <i>cbMax</i>.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbLengthW">
    <summary>
      <para>Determines whether a string exceeds the specified length, in bytes.</para>
      <para>
        <b>StringCbLength</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strlen-wcslen-mbslen-mbslen-l-mbstrlen-mbstrlen-l">strlen, wcslen, _tcslen</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="psz">The string whose length is to be checked.</param>
    <param name="cbMax">The maximum number of bytes allowed in <i>psz</i>, including those used for the terminating null character. This value cannot exceed <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pcbLength">The number of bytes in <i>psz</i>, excluding those used for the terminating null character. This value is valid only if <i>pcb</i> is not <b>NULL</b> and the function succeeds.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The string at <i>psz</i> was not <b>NULL</b>, and the length of the string (including the terminating null character) is less than or equal to <i>cbMax</i> characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>psz</i> is <b>NULL</b>, <i>cbMax</i> is larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or <i>psz</i> is longer than <i>cbMax</i>.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbLength">
    <summary>
      <para>Determines whether a string exceeds the specified length, in bytes.</para>
      <para>
        <b>StringCbLength</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strlen-wcslen-mbslen-mbslen-l-mbstrlen-mbstrlen-l">strlen, wcslen, _tcslen</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="psz">The string whose length is to be checked.</param>
    <param name="cbMax">The maximum number of bytes allowed in <i>psz</i>, including those used for the terminating null character. This value cannot exceed <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pcbLength">The number of bytes in <i>psz</i>, excluding those used for the terminating null character. This value is valid only if <i>pcb</i> is not <b>NULL</b> and the function succeeds.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The string at <i>psz</i> was not <b>NULL</b>, and the length of the string (including the terminating null character) is less than or equal to <i>cbMax</i> characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>psz</i> is <b>NULL</b>, <i>cbMax</i> is larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or <i>psz</i> is longer than <i>cbMax</i>.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbLengthA">
    <summary>
      <para>Determines whether a string exceeds the specified length, in bytes.</para>
      <para>
        <b>StringCbLength</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strlen-wcslen-mbslen-mbslen-l-mbstrlen-mbstrlen-l">strlen, wcslen, _tcslen</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="psz">The string whose length is to be checked.</param>
    <param name="cbMax">The maximum number of bytes allowed in <i>psz</i>, including those used for the terminating null character. This value cannot exceed <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pcbLength">The number of bytes in <i>psz</i>, excluding those used for the terminating null character. This value is valid only if <i>pcb</i> is not <b>NULL</b> and the function succeeds.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The string at <i>psz</i> was not <b>NULL</b>, and the length of the string (including the terminating null character) is less than or equal to <i>cbMax</i> characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>psz</i> is <b>NULL</b>, <i>cbMax</i> is larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or <i>psz</i> is longer than <i>cbMax</i>.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbLengthW">
    <summary>
      <para>Determines whether a string exceeds the specified length, in bytes.</para>
      <para>
        <b>StringCbLength</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strlen-wcslen-mbslen-mbslen-l-mbstrlen-mbstrlen-l">strlen, wcslen, _tcslen</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="psz">The string whose length is to be checked.</param>
    <param name="cbMax">The maximum number of bytes allowed in <i>psz</i>, including those used for the terminating null character. This value cannot exceed <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pcbLength">The number of bytes in <i>psz</i>, excluding those used for the terminating null character. This value is valid only if <i>pcb</i> is not <b>NULL</b> and the function succeeds.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The string at <i>psz</i> was not <b>NULL</b>, and the length of the string (including the terminating null character) is less than or equal to <i>cbMax</i> characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>psz</i> is <b>NULL</b>, <i>cbMax</i> is larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or <i>psz</i> is longer than <i>cbMax</i>.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbPrintf">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbPrintfA">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbPrintfW">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbPrintfEx">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintfEx</b> adds to the functionality of <see cref="StringCbPrintf" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbPrintfExA">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintfEx</b> adds to the functionality of <see cref="StringCbPrintf" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbPrintfExW">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintfEx</b> adds to the functionality of <see cref="StringCbPrintf" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbPrintfEx">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintfEx</b> adds to the functionality of <see cref="StringCbPrintf" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbPrintfExA">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintfEx</b> adds to the functionality of <see cref="StringCbPrintf" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbPrintfExW">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintfEx</b> adds to the functionality of <see cref="StringCbPrintf" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbPrintf">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbPrintfA">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbPrintfW">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbPrintf_l">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintf_l</b> is similar to <see cref="StringCbPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbPrintf_lA">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintf_l</b> is similar to <see cref="StringCbPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbPrintf_lW">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintf_l</b> is similar to <see cref="StringCbPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbPrintf_lEx">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintf_lEx</b> is similar to <see cref="StringCbPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbPrintf_lExA">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintf_lEx</b> is similar to <see cref="StringCbPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbPrintf_lExW">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintf_lEx</b> is similar to <see cref="StringCbPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbPrintf_lEx">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintf_lEx</b> is similar to <see cref="StringCbPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbPrintf_lExA">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintf_lEx</b> is similar to <see cref="StringCbPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbPrintf_lExW">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintf_lEx</b> is similar to <see cref="StringCbPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbPrintf_l">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintf_l</b> is similar to <see cref="StringCbPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbPrintf_lA">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintf_l</b> is similar to <see cref="StringCbPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbPrintf_lW">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbPrintf_l</b> is similar to <see cref="StringCbPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbVPrintf">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbVPrintfA">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbVPrintfW">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbVPrintfEx">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintfEx</b> adds to the functionality of <see cref="StringCbVPrintf" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbVPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbVPrintfExA">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintfEx</b> adds to the functionality of <see cref="StringCbVPrintf" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbVPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbVPrintfExW">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintfEx</b> adds to the functionality of <see cref="StringCbVPrintf" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbVPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbVPrintfEx">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintfEx</b> adds to the functionality of <see cref="StringCbVPrintf" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbVPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbVPrintfExA">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintfEx</b> adds to the functionality of <see cref="StringCbVPrintf" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbVPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbVPrintfExW">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintfEx</b> adds to the functionality of <see cref="StringCbVPrintf" /> by returning a pointer to the end of the destination string as well as the number of bytes left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCbVPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbVPrintf">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbVPrintfA">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbVPrintfW">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCbVPrintf_l">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintf_l</b> is similar to <see cref="StringCbVPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbVPrintf_lA">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintf_l</b> is similar to <see cref="StringCbVPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbVPrintf_lW">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintf_l</b> is similar to <see cref="StringCbVPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbVPrintf_lEx">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintf_lEx</b> is similar to <see cref="StringCbVPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbVPrintf_lExA">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintf_lEx</b> is similar to <see cref="StringCbVPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbVPrintf_lExW">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintf_lEx</b> is similar to <see cref="StringCbVPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbVPrintf_lEx">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintf_lEx</b> is similar to <see cref="StringCbVPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbVPrintf_lExA">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintf_lEx</b> is similar to <see cref="StringCbVPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbVPrintf_lExW">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintf_lEx</b> is similar to <see cref="StringCbVPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcbRemaining">The number of unused bytes in <i>pszDest</i>, including those used for the terminating null character. If <i>pcbRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There is sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbVPrintf_l">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintf_l</b> is similar to <see cref="StringCbVPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbVPrintf_lA">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintf_l</b> is similar to <see cref="StringCbVPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCbVPrintf_lW">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCbVPrintf_l</b> is similar to <see cref="StringCbVPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cbDest">The size of the destination buffer, in bytes. This value must be sufficiently large to accommodate the final formatted string plus the terminating null character. The maximum number of bytes allowed is <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cbDest</i> is either 0 or larger than <code>STRSAFE_MAX_CCH * sizeof(TCHAR)</code>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchCat">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that <b>StringCchCat</b> does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCat</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string to which <i>pszSrc</i> is to be concatenated, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be greater than or equal the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus 1 to account for both strings and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatA">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that <b>StringCchCat</b> does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCat</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string to which <i>pszSrc</i> is to be concatenated, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be greater than or equal the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus 1 to account for both strings and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatW">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that <b>StringCchCat</b> does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCat</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string to which <i>pszSrc</i> is to be concatenated, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be greater than or equal the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus 1 to account for both strings and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatEx">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCatEx</b> adds to the functionality of <see cref="StringCchCat" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchCatEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated to <i>pszSrc</i>, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus 1 to account for both strings and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatExA">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCatEx</b> adds to the functionality of <see cref="StringCchCat" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchCatEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated to <i>pszSrc</i>, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus 1 to account for both strings and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatExW">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCatEx</b> adds to the functionality of <see cref="StringCchCat" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchCatEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated to <i>pszSrc</i>, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus 1 to account for both strings and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatEx">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCatEx</b> adds to the functionality of <see cref="StringCchCat" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchCatEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated to <i>pszSrc</i>, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus 1 to account for both strings and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatExA">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCatEx</b> adds to the functionality of <see cref="StringCchCat" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchCatEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated to <i>pszSrc</i>, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus 1 to account for both strings and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatExW">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCatEx</b> adds to the functionality of <see cref="StringCchCat" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchCatEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated to <i>pszSrc</i>, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus 1 to account for both strings and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatN">
    <summary>
      <para>Concatenates the specified number of characters from one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCatN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated with <i>pszSrc</i>, and will receive the entire resultant string. The string at <i>pszSrc</i>, up to <i>cchMaxAppend</i> characters, is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus either the length of <i>pszDest</i> or <i>cchMaxAppend</i> (whichever is smaller). To this sum add 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="cchToAppend">The maximum number of characters to be appended to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatNA">
    <summary>
      <para>Concatenates the specified number of characters from one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCatN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated with <i>pszSrc</i>, and will receive the entire resultant string. The string at <i>pszSrc</i>, up to <i>cchMaxAppend</i> characters, is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus either the length of <i>pszDest</i> or <i>cchMaxAppend</i> (whichever is smaller). To this sum add 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="cchToAppend">The maximum number of characters to be appended to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatNW">
    <summary>
      <para>Concatenates the specified number of characters from one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCatN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated with <i>pszSrc</i>, and will receive the entire resultant string. The string at <i>pszSrc</i>, up to <i>cchMaxAppend</i> characters, is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus either the length of <i>pszDest</i> or <i>cchMaxAppend</i> (whichever is smaller). To this sum add 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="cchToAppend">The maximum number of characters to be appended to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatNEx">
    <summary>
      <para>Concatenates the specified number of characters from one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCatNEx</b> adds to the functionality of <see cref="StringCchCatN" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchCatNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated with <i>pszSrc</i>, and will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="cchToAppend">The maximum number of characters to be appended to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is larger than <b>STRSAFE_MAX_CCH</b>, an invalid flag was passed, or there are discrepancies between the size of the <i>pszDest</i>, <i>cchDest</i>, and the amount of material to append in <i>pszSrc</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatNExA">
    <summary>
      <para>Concatenates the specified number of characters from one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCatNEx</b> adds to the functionality of <see cref="StringCchCatN" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchCatNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated with <i>pszSrc</i>, and will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="cchToAppend">The maximum number of characters to be appended to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is larger than <b>STRSAFE_MAX_CCH</b>, an invalid flag was passed, or there are discrepancies between the size of the <i>pszDest</i>, <i>cchDest</i>, and the amount of material to append in <i>pszSrc</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatNExW">
    <summary>
      <para>Concatenates the specified number of characters from one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCatNEx</b> adds to the functionality of <see cref="StringCchCatN" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchCatNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated with <i>pszSrc</i>, and will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="cchToAppend">The maximum number of characters to be appended to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is larger than <b>STRSAFE_MAX_CCH</b>, an invalid flag was passed, or there are discrepancies between the size of the <i>pszDest</i>, <i>cchDest</i>, and the amount of material to append in <i>pszSrc</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatNEx">
    <summary>
      <para>Concatenates the specified number of characters from one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCatNEx</b> adds to the functionality of <see cref="StringCchCatN" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchCatNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated with <i>pszSrc</i>, and will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="cchToAppend">The maximum number of characters to be appended to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is larger than <b>STRSAFE_MAX_CCH</b>, an invalid flag was passed, or there are discrepancies between the size of the <i>pszDest</i>, <i>cchDest</i>, and the amount of material to append in <i>pszSrc</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatNExA">
    <summary>
      <para>Concatenates the specified number of characters from one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCatNEx</b> adds to the functionality of <see cref="StringCchCatN" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchCatNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated with <i>pszSrc</i>, and will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="cchToAppend">The maximum number of characters to be appended to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is larger than <b>STRSAFE_MAX_CCH</b>, an invalid flag was passed, or there are discrepancies between the size of the <i>pszDest</i>, <i>cchDest</i>, and the amount of material to append in <i>pszSrc</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatNExW">
    <summary>
      <para>Concatenates the specified number of characters from one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCatNEx</b> adds to the functionality of <see cref="StringCchCatN" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchCatNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated with <i>pszSrc</i>, and will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="cchToAppend">The maximum number of characters to be appended to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is appended to the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any pre-existing or truncated string in the destination buffer is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is untouched. Nothing is added to the original contents.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is larger than <b>STRSAFE_MAX_CCH</b>, an invalid flag was passed, or there are discrepancies between the size of the <i>pszDest</i>, <i>cchDest</i>, and the amount of material to append in <i>pszSrc</i>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatN">
    <summary>
      <para>Concatenates the specified number of characters from one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCatN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated with <i>pszSrc</i>, and will receive the entire resultant string. The string at <i>pszSrc</i>, up to <i>cchMaxAppend</i> characters, is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus either the length of <i>pszDest</i> or <i>cchMaxAppend</i> (whichever is smaller). To this sum add 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="cchToAppend">The maximum number of characters to be appended to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatNA">
    <summary>
      <para>Concatenates the specified number of characters from one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCatN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated with <i>pszSrc</i>, and will receive the entire resultant string. The string at <i>pszSrc</i>, up to <i>cchMaxAppend</i> characters, is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus either the length of <i>pszDest</i> or <i>cchMaxAppend</i> (whichever is smaller). To this sum add 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="cchToAppend">The maximum number of characters to be appended to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatNW">
    <summary>
      <para>Concatenates the specified number of characters from one string to another string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCatN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l">strncat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="StrNCat" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string that is to be concatenated with <i>pszSrc</i>, and will receive the entire resultant string. The string at <i>pszSrc</i>, up to <i>cchMaxAppend</i> characters, is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus either the length of <i>pszDest</i> or <i>cchMaxAppend</i> (whichever is smaller). To this sum add 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <param name="cchToAppend">The maximum number of characters to be appended to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCat">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that <b>StringCchCat</b> does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCat</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string to which <i>pszSrc</i> is to be concatenated, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be greater than or equal the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus 1 to account for both strings and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatA">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that <b>StringCchCat</b> does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCat</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string to which <i>pszSrc</i> is to be concatenated, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be greater than or equal the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus 1 to account for both strings and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCatW">
    <summary>
      <para>Concatenates one string to another string. The size of the destination buffer is provided to the function to ensure that <b>StringCchCat</b> does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCat</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcat-wcscat-mbscat">strcat, wcscat, _tcsat</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCat" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCatBuff" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which contains the string to which <i>pszSrc</i> is to be concatenated, and that will receive the entire resultant string. The string at <i>pszSrc</i> is added to the end of the string at <i>pszDest</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be greater than or equal the length of <i>pszSrc</i> plus the length of <i>pszDest</i> plus 1 to account for both strings and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string that is to be concatenated to the end of <i>pszDest</i>. This string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the strings were fully concatenated without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The concatenation operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopy">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCopy</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus 1 to account for the copied source string and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyA">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCopy</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus 1 to account for the copied source string and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyW">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCopy</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus 1 to account for the copied source string and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyEx">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of the buffer.</para>
      <para>
        <b>StringCchCopyEx</b> adds to the functionality of <see cref="StringCchCopy" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to this function for additional control.</para>
      <para>
        <b>StringCchCopyEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus 1 to account for the copied source string and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyExA">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of the buffer.</para>
      <para>
        <b>StringCchCopyEx</b> adds to the functionality of <see cref="StringCchCopy" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to this function for additional control.</para>
      <para>
        <b>StringCchCopyEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus 1 to account for the copied source string and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyExW">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of the buffer.</para>
      <para>
        <b>StringCchCopyEx</b> adds to the functionality of <see cref="StringCchCopy" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to this function for additional control.</para>
      <para>
        <b>StringCchCopyEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus 1 to account for the copied source string and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyEx">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of the buffer.</para>
      <para>
        <b>StringCchCopyEx</b> adds to the functionality of <see cref="StringCchCopy" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to this function for additional control.</para>
      <para>
        <b>StringCchCopyEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus 1 to account for the copied source string and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyExA">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of the buffer.</para>
      <para>
        <b>StringCchCopyEx</b> adds to the functionality of <see cref="StringCchCopy" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to this function for additional control.</para>
      <para>
        <b>StringCchCopyEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus 1 to account for the copied source string and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyExW">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of the buffer.</para>
      <para>
        <b>StringCchCopyEx</b> adds to the functionality of <see cref="StringCchCopy" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to this function for additional control.</para>
      <para>
        <b>StringCchCopyEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus 1 to account for the copied source string and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyN">
    <summary>
      <para>Copies the specified number of characters from one string to another. The size of the destination buffer is provided to the function to ensure that <b>StringCchCopyN</b> does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCopyN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cchDest">The size of <i>pszDest</i>, in characters. This value must be large enough to hold the copied characters (the length of <i>pszSrc</i> or the value of <i>cchSrc</i>, whichever is smaller) plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be readable up to <i>cchSrc</i> characters or a null terminator, whichever comes first.</param>
    <param name="cchToCopy">The maximum number of characters to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the characters were copied from <i>pszSrc</i> without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyNA">
    <summary>
      <para>Copies the specified number of characters from one string to another. The size of the destination buffer is provided to the function to ensure that <b>StringCchCopyN</b> does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCopyN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cchDest">The size of <i>pszDest</i>, in characters. This value must be large enough to hold the copied characters (the length of <i>pszSrc</i> or the value of <i>cchSrc</i>, whichever is smaller) plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be readable up to <i>cchSrc</i> characters or a null terminator, whichever comes first.</param>
    <param name="cchToCopy">The maximum number of characters to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the characters were copied from <i>pszSrc</i> without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyNW">
    <summary>
      <para>Copies the specified number of characters from one string to another. The size of the destination buffer is provided to the function to ensure that <b>StringCchCopyN</b> does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCopyN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cchDest">The size of <i>pszDest</i>, in characters. This value must be large enough to hold the copied characters (the length of <i>pszSrc</i> or the value of <i>cchSrc</i>, whichever is smaller) plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be readable up to <i>cchSrc</i> characters or a null terminator, whichever comes first.</param>
    <param name="cchToCopy">The maximum number of characters to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the characters were copied from <i>pszSrc</i> without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyNEx">
    <summary>
      <para>Copies the specified number of characters from one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCopyNEx</b> adds to the functionality of <see cref="StringCchCopyN" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchCopyNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cchDest">The size of <i>pszDest</i>, in characters. This value must be at least large enough to hold the copied characters (the length of <i>pszSrc</i> or the value of <i>cchSrc</i>, whichever is smaller) plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be readable up to <i>cchSrc</i> characters or a null terminator, whichever comes first.</param>
    <param name="cchToCopy">The maximum number of characters to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> or <i>pszSrc</i> is greater than <b>STRSAFE_MAX_CCH</b>, <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyNExA">
    <summary>
      <para>Copies the specified number of characters from one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCopyNEx</b> adds to the functionality of <see cref="StringCchCopyN" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchCopyNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cchDest">The size of <i>pszDest</i>, in characters. This value must be at least large enough to hold the copied characters (the length of <i>pszSrc</i> or the value of <i>cchSrc</i>, whichever is smaller) plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be readable up to <i>cchSrc</i> characters or a null terminator, whichever comes first.</param>
    <param name="cchToCopy">The maximum number of characters to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> or <i>pszSrc</i> is greater than <b>STRSAFE_MAX_CCH</b>, <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyNExW">
    <summary>
      <para>Copies the specified number of characters from one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCopyNEx</b> adds to the functionality of <see cref="StringCchCopyN" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchCopyNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cchDest">The size of <i>pszDest</i>, in characters. This value must be at least large enough to hold the copied characters (the length of <i>pszSrc</i> or the value of <i>cchSrc</i>, whichever is smaller) plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be readable up to <i>cchSrc</i> characters or a null terminator, whichever comes first.</param>
    <param name="cchToCopy">The maximum number of characters to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> or <i>pszSrc</i> is greater than <b>STRSAFE_MAX_CCH</b>, <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyNEx">
    <summary>
      <para>Copies the specified number of characters from one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCopyNEx</b> adds to the functionality of <see cref="StringCchCopyN" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchCopyNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cchDest">The size of <i>pszDest</i>, in characters. This value must be at least large enough to hold the copied characters (the length of <i>pszSrc</i> or the value of <i>cchSrc</i>, whichever is smaller) plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be readable up to <i>cchSrc</i> characters or a null terminator, whichever comes first.</param>
    <param name="cchToCopy">The maximum number of characters to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> or <i>pszSrc</i> is greater than <b>STRSAFE_MAX_CCH</b>, <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyNExA">
    <summary>
      <para>Copies the specified number of characters from one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCopyNEx</b> adds to the functionality of <see cref="StringCchCopyN" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchCopyNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cchDest">The size of <i>pszDest</i>, in characters. This value must be at least large enough to hold the copied characters (the length of <i>pszSrc</i> or the value of <i>cchSrc</i>, whichever is smaller) plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be readable up to <i>cchSrc</i> characters or a null terminator, whichever comes first.</param>
    <param name="cchToCopy">The maximum number of characters to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> or <i>pszSrc</i> is greater than <b>STRSAFE_MAX_CCH</b>, <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyNExW">
    <summary>
      <para>Copies the specified number of characters from one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCopyNEx</b> adds to the functionality of <see cref="StringCchCopyN" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchCopyNEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cchDest">The size of <i>pszDest</i>, in characters. This value must be at least large enough to hold the copied characters (the length of <i>pszSrc</i> or the value of <i>cchSrc</i>, whichever is smaller) plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be readable up to <i>cchSrc</i> characters or a null terminator, whichever comes first.</param>
    <param name="cchToCopy">The maximum number of characters to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Either <i>pszDest</i> or <i>pszSrc</i> is greater than <b>STRSAFE_MAX_CCH</b>, <i>pszDest</i> is <b>NULL</b> when there is source data present to copy, or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyN">
    <summary>
      <para>Copies the specified number of characters from one string to another. The size of the destination buffer is provided to the function to ensure that <b>StringCchCopyN</b> does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCopyN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cchDest">The size of <i>pszDest</i>, in characters. This value must be large enough to hold the copied characters (the length of <i>pszSrc</i> or the value of <i>cchSrc</i>, whichever is smaller) plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be readable up to <i>cchSrc</i> characters or a null terminator, whichever comes first.</param>
    <param name="cchToCopy">The maximum number of characters to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the characters were copied from <i>pszSrc</i> without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyNA">
    <summary>
      <para>Copies the specified number of characters from one string to another. The size of the destination buffer is provided to the function to ensure that <b>StringCchCopyN</b> does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCopyN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cchDest">The size of <i>pszDest</i>, in characters. This value must be large enough to hold the copied characters (the length of <i>pszSrc</i> or the value of <i>cchSrc</i>, whichever is smaller) plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be readable up to <i>cchSrc</i> characters or a null terminator, whichever comes first.</param>
    <param name="cchToCopy">The maximum number of characters to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the characters were copied from <i>pszSrc</i> without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyNW">
    <summary>
      <para>Copies the specified number of characters from one string to another. The size of the destination buffer is provided to the function to ensure that <b>StringCchCopyN</b> does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCopyN</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strncpy-strncpy-l-wcsncpy-wcsncpy-l-mbsncpy-mbsncpy-l">strncpy, wcsncpy, _tcsncpy</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cchDest">The size of <i>pszDest</i>, in characters. This value must be large enough to hold the copied characters (the length of <i>pszSrc</i> or the value of <i>cchSrc</i>, whichever is smaller) plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be readable up to <i>cchSrc</i> characters or a null terminator, whichever comes first.</param>
    <param name="cchToCopy">The maximum number of characters to be copied from <i>pszSrc</i> to <i>pszDest</i>.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, the characters were copied from <i>pszSrc</i> without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopy">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCopy</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus 1 to account for the copied source string and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyA">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCopy</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus 1 to account for the copied source string and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchCopyW">
    <summary>
      <para>Copies one string to another. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchCopy</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strcpy-wcscpy-mbscpy">strcpy, wcscpy, _tcscpy</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="lstrcpy" />
          </description>
        </item>
        <item>
          <description>
            <see cref="StrCpy" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the copied string.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must equal the length of <i>pszSrc</i> plus 1 to account for the copied source string and the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszSrc">The source string. This string must be null-terminated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Source data was present, fully copied without truncation, and the resultant destination buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchGets">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCchGets</b> is a replacement for the following functions:<list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCchGets</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be at least 2 for the function to succeed. The maximum number of characters allowed, including the terminating null character, is <b>STRSAFE_MAX_CCH</b>. If <i>cchDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Characters were read from stdin, were copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is 1 or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchGetsA">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCchGets</b> is a replacement for the following functions:<list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCchGets</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be at least 2 for the function to succeed. The maximum number of characters allowed, including the terminating null character, is <b>STRSAFE_MAX_CCH</b>. If <i>cchDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Characters were read from stdin, were copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is 1 or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchGetsW">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCchGets</b> is a replacement for the following functions:<list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCchGets</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be at least 2 for the function to succeed. The maximum number of characters allowed, including the terminating null character, is <b>STRSAFE_MAX_CCH</b>. If <i>cchDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Characters were read from stdin, were copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is 1 or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchGetsEx">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCchGetsEx</b> adds to the functionality of <see cref="StringCchGets" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.<para><b>StringCchGetsEx</b> is a replacement for the following functions:</para><list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCchGetsEx</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be at least 2 for the function to succeed. The maximum number of characters allowed, including the terminating null character, is <b>STRSAFE_MAX_CCH</b>. If <i>cchDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of STRSAFE_NULL_ON_FAILURE, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Characters were read from stdin, were copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is larger than the maximum allowed value or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is 1 or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchGetsExA">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCchGetsEx</b> adds to the functionality of <see cref="StringCchGets" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.<para><b>StringCchGetsEx</b> is a replacement for the following functions:</para><list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCchGetsEx</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be at least 2 for the function to succeed. The maximum number of characters allowed, including the terminating null character, is <b>STRSAFE_MAX_CCH</b>. If <i>cchDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of STRSAFE_NULL_ON_FAILURE, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Characters were read from stdin, were copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is larger than the maximum allowed value or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is 1 or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchGetsExW">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCchGetsEx</b> adds to the functionality of <see cref="StringCchGets" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.<para><b>StringCchGetsEx</b> is a replacement for the following functions:</para><list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCchGetsEx</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be at least 2 for the function to succeed. The maximum number of characters allowed, including the terminating null character, is <b>STRSAFE_MAX_CCH</b>. If <i>cchDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of STRSAFE_NULL_ON_FAILURE, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Characters were read from stdin, were copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is larger than the maximum allowed value or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is 1 or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchGetsEx">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCchGetsEx</b> adds to the functionality of <see cref="StringCchGets" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.<para><b>StringCchGetsEx</b> is a replacement for the following functions:</para><list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCchGetsEx</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be at least 2 for the function to succeed. The maximum number of characters allowed, including the terminating null character, is <b>STRSAFE_MAX_CCH</b>. If <i>cchDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of STRSAFE_NULL_ON_FAILURE, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Characters were read from stdin, were copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is larger than the maximum allowed value or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is 1 or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchGetsExA">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCchGetsEx</b> adds to the functionality of <see cref="StringCchGets" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.<para><b>StringCchGetsEx</b> is a replacement for the following functions:</para><list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCchGetsEx</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be at least 2 for the function to succeed. The maximum number of characters allowed, including the terminating null character, is <b>STRSAFE_MAX_CCH</b>. If <i>cchDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of STRSAFE_NULL_ON_FAILURE, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Characters were read from stdin, were copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is larger than the maximum allowed value or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is 1 or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchGetsExW">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCchGetsEx</b> adds to the functionality of <see cref="StringCchGets" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.<para><b>StringCchGetsEx</b> is a replacement for the following functions:</para><list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCchGetsEx</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be at least 2 for the function to succeed. The maximum number of characters allowed, including the terminating null character, is <b>STRSAFE_MAX_CCH</b>. If <i>cchDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")). This flag is useful for emulating functions such as <see cref="lstrcpy" />.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of STRSAFE_NULL_ON_FAILURE, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Characters were read from stdin, were copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is larger than the maximum allowed value or an invalid flag was passed.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is 1 or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchGets">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCchGets</b> is a replacement for the following functions:<list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCchGets</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be at least 2 for the function to succeed. The maximum number of characters allowed, including the terminating null character, is <b>STRSAFE_MAX_CCH</b>. If <i>cchDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Characters were read from stdin, were copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is 1 or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchGetsA">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCchGets</b> is a replacement for the following functions:<list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCchGets</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be at least 2 for the function to succeed. The maximum number of characters allowed, including the terminating null character, is <b>STRSAFE_MAX_CCH</b>. If <i>cchDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Characters were read from stdin, were copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is 1 or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchGetsW">
    <summary>
      <para>Gets one line of text from stdin, up to and including the newline character ('\n'). The line of text is copied to the destination buffer, and the newline character is replaced with a null character. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <div>
        <b>Note</b>  This function can only be used inline.</div>
      <b>StringCchGets</b> is a replacement for the following functions:<list type="bullet"><item><description><a href="https://docs.microsoft.com//cpp/c-runtime-library/gets-getws">gets, _getws, _getts</a></description></item></list><b>StringCchGets</b> is not a replacement for <b>fgets</b>, which does not replace newline characters with a terminating null character.</summary>
    <param name="pszDest">The destination buffer, which receives the copied characters.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be at least 2 for the function to succeed. The maximum number of characters allowed, including the terminating null character, is <b>STRSAFE_MAX_CCH</b>. If <i>cchDest</i> is too small to hold the full line of text, the data is truncated.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Characters were read from stdin, were copied to the buffer at <i>pszDest</i>, and the buffer was null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_END_OF_FILE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Indicates an error or end-of-file condition. Use <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/xssktc6e(v=vs.100)">feof</a> or <a href="https://docs.microsoft.com//previous-versions/visualstudio/visual-studio-2010/y2wc3w90(v=vs.100)">ferror</a> to determine which one has occurred.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is larger than the maximum allowed value.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is 1 or less.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchLength">
    <summary>
      <para>Determines whether a string exceeds the specified length, in characters.</para>
      <para>
        <b>StringCchLength</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strlen-wcslen-mbslen-mbslen-l-mbstrlen-mbstrlen-l">strlen, wcslen, _tcslen</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="psz">The string whose length is to be checked.</param>
    <param name="cchMax">The maximum number of characters allowed in <i>psz</i>, including the terminating null character. This value cannot exceed <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pcchLength">The number of characters in <i>psz</i>, not including the terminating null character. This value is valid only if <i>pcch</i> is not <b>NULL</b> and the function succeeds.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The string at <i>psz</i> was not <b>NULL</b>, and the length of the string (including the terminating null character) is less than or equal to <i>cchMax</i> characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>psz</i> is <b>NULL</b>, <i>cchMax</i> is larger than <b>STRSAFE_MAX_CCH</b>, or <i>psz</i> is longer than <i>cchMax</i>.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchLengthA">
    <summary>
      <para>Determines whether a string exceeds the specified length, in characters.</para>
      <para>
        <b>StringCchLength</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strlen-wcslen-mbslen-mbslen-l-mbstrlen-mbstrlen-l">strlen, wcslen, _tcslen</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="psz">The string whose length is to be checked.</param>
    <param name="cchMax">The maximum number of characters allowed in <i>psz</i>, including the terminating null character. This value cannot exceed <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pcchLength">The number of characters in <i>psz</i>, not including the terminating null character. This value is valid only if <i>pcch</i> is not <b>NULL</b> and the function succeeds.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The string at <i>psz</i> was not <b>NULL</b>, and the length of the string (including the terminating null character) is less than or equal to <i>cchMax</i> characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>psz</i> is <b>NULL</b>, <i>cchMax</i> is larger than <b>STRSAFE_MAX_CCH</b>, or <i>psz</i> is longer than <i>cchMax</i>.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchLengthW">
    <summary>
      <para>Determines whether a string exceeds the specified length, in characters.</para>
      <para>
        <b>StringCchLength</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strlen-wcslen-mbslen-mbslen-l-mbstrlen-mbstrlen-l">strlen, wcslen, _tcslen</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="psz">The string whose length is to be checked.</param>
    <param name="cchMax">The maximum number of characters allowed in <i>psz</i>, including the terminating null character. This value cannot exceed <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pcchLength">The number of characters in <i>psz</i>, not including the terminating null character. This value is valid only if <i>pcch</i> is not <b>NULL</b> and the function succeeds.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The string at <i>psz</i> was not <b>NULL</b>, and the length of the string (including the terminating null character) is less than or equal to <i>cchMax</i> characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>psz</i> is <b>NULL</b>, <i>cchMax</i> is larger than <b>STRSAFE_MAX_CCH</b>, or <i>psz</i> is longer than <i>cchMax</i>.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchLength">
    <summary>
      <para>Determines whether a string exceeds the specified length, in characters.</para>
      <para>
        <b>StringCchLength</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strlen-wcslen-mbslen-mbslen-l-mbstrlen-mbstrlen-l">strlen, wcslen, _tcslen</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="psz">The string whose length is to be checked.</param>
    <param name="cchMax">The maximum number of characters allowed in <i>psz</i>, including the terminating null character. This value cannot exceed <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pcchLength">The number of characters in <i>psz</i>, not including the terminating null character. This value is valid only if <i>pcch</i> is not <b>NULL</b> and the function succeeds.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The string at <i>psz</i> was not <b>NULL</b>, and the length of the string (including the terminating null character) is less than or equal to <i>cchMax</i> characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>psz</i> is <b>NULL</b>, <i>cchMax</i> is larger than <b>STRSAFE_MAX_CCH</b>, or <i>psz</i> is longer than <i>cchMax</i>.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchLengthA">
    <summary>
      <para>Determines whether a string exceeds the specified length, in characters.</para>
      <para>
        <b>StringCchLength</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strlen-wcslen-mbslen-mbslen-l-mbstrlen-mbstrlen-l">strlen, wcslen, _tcslen</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="psz">The string whose length is to be checked.</param>
    <param name="cchMax">The maximum number of characters allowed in <i>psz</i>, including the terminating null character. This value cannot exceed <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pcchLength">The number of characters in <i>psz</i>, not including the terminating null character. This value is valid only if <i>pcch</i> is not <b>NULL</b> and the function succeeds.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The string at <i>psz</i> was not <b>NULL</b>, and the length of the string (including the terminating null character) is less than or equal to <i>cchMax</i> characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>psz</i> is <b>NULL</b>, <i>cchMax</i> is larger than <b>STRSAFE_MAX_CCH</b>, or <i>psz</i> is longer than <i>cchMax</i>.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchLengthW">
    <summary>
      <para>Determines whether a string exceeds the specified length, in characters.</para>
      <para>
        <b>StringCchLength</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/strlen-wcslen-mbslen-mbslen-l-mbstrlen-mbstrlen-l">strlen, wcslen, _tcslen</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="psz">The string whose length is to be checked.</param>
    <param name="cchMax">The maximum number of characters allowed in <i>psz</i>, including the terminating null character. This value cannot exceed <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pcchLength">The number of characters in <i>psz</i>, not including the terminating null character. This value is valid only if <i>pcch</i> is not <b>NULL</b> and the function succeeds.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The string at <i>psz</i> was not <b>NULL</b>, and the length of the string (including the terminating null character) is less than or equal to <i>cchMax</i> characters.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>psz</i> is <b>NULL</b>, <i>cchMax</i> is larger than <b>STRSAFE_MAX_CCH</b>, or <i>psz</i> is longer than <i>cchMax</i>.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchPrintf">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchPrintfA">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchPrintfW">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchPrintfEx">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintfEx</b> adds to the functionality of <see cref="StringCchPrintf" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The Arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchPrintfExA">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintfEx</b> adds to the functionality of <see cref="StringCchPrintf" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The Arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchPrintfExW">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintfEx</b> adds to the functionality of <see cref="StringCchPrintf" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The Arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchPrintfEx">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintfEx</b> adds to the functionality of <see cref="StringCchPrintf" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The Arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchPrintfExA">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintfEx</b> adds to the functionality of <see cref="StringCchPrintf" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The Arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchPrintfExW">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintfEx</b> adds to the functionality of <see cref="StringCchPrintf" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The Arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchPrintf">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchPrintfA">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchPrintfW">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/sprintf-sprintf-l-swprintf-swprintf-l-swprintf-l">sprintf, swprintf, _stprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wnsprintf" />
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/snprintf-snprintf-snprintf-l-snwprintf-snwprintf-l">_snprintf, _snwprintf, _sntprintf</a>
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchPrintf_l">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintf_l</b> is similar to <see cref="StringCchPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchPrintf_lA">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintf_l</b> is similar to <see cref="StringCchPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchPrintf_lW">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintf_l</b> is similar to <see cref="StringCchPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchPrintf_lEx">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintf_lEx</b> is similar to <see cref="StringCchPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The Arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchPrintf_lExA">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintf_lEx</b> is similar to <see cref="StringCchPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The Arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchPrintf_lExW">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintf_lEx</b> is similar to <see cref="StringCchPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The Arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchPrintf_lEx">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintf_lEx</b> is similar to <see cref="StringCchPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The Arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchPrintf_lExA">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintf_lEx</b> is similar to <see cref="StringCchPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The Arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchPrintf_lExW">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintf_lEx</b> is similar to <see cref="StringCchPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The Arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchPrintf_l">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintf_l</b> is similar to <see cref="StringCchPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchPrintf_lA">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintf_l</b> is similar to <see cref="StringCchPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchPrintf_lW">
    <summary>
      <para>Writes formatted data to the specified string. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchPrintf_l</b> is similar to <see cref="StringCchPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and its arguments.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="...">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation, and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchVPrintf">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchVPrintfA">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchVPrintfW">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchVPrintfEx">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintfEx</b> adds to the functionality of <see cref="StringCchVPrintf" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchVPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchVPrintfExA">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintfEx</b> adds to the functionality of <see cref="StringCchVPrintf" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchVPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchVPrintfExW">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintfEx</b> adds to the functionality of <see cref="StringCchVPrintf" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchVPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchVPrintfEx">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintfEx</b> adds to the functionality of <see cref="StringCchVPrintf" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchVPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchVPrintfExA">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintfEx</b> adds to the functionality of <see cref="StringCchVPrintf" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchVPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchVPrintfExW">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintfEx</b> adds to the functionality of <see cref="StringCchVPrintf" /> by returning a pointer to the end of the destination string as well as the number of characters left unused in that string. Flags may also be passed to the function for additional control.</para>
      <para>
        <b>StringCchVPrintfEx</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchVPrintf">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchVPrintfA">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchVPrintfW">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintf</b> is a replacement for the following functions:</para>
      <list type="bullet">
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsprintf-vsprintf-l-vswprintf-vswprintf-l-vswprintf-l">vsprintf, vswprintf, _vstprintf</a>
          </description>
        </item>
        <item>
          <description>
            <a href="https://docs.microsoft.com//cpp/c-runtime-library/reference/vsnprintf-vsnprintf-vsnprintf-l-vsnwprintf-vsnwprintf-l">vsnprintf, _vsnwprintf, _vsntprintf</a>
          </description>
        </item>
        <item>
          <description>
            <see cref="wvsprintf" />
          </description>
        </item>
        <item>
          <description>
            <see cref="wvnsprintf" />
          </description>
        </item>
      </list>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list> <para>Note that this function returns an <b>HRESULT</b> value, unlike the functions that it replaces.</para></returns>
  </member>
  <member name="Windows.StringCchVPrintf_l">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintf_l</b> is similar to <see cref="StringCchVPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchVPrintf_lA">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintf_l</b> is similar to <see cref="StringCchVPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchVPrintf_lW">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintf_l</b> is similar to <see cref="StringCchVPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchVPrintf_lEx">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintf_lEx</b> is similar to <see cref="StringCchVPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchVPrintf_lExA">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintf_lEx</b> is similar to <see cref="StringCchVPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchVPrintf_lExW">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintf_lEx</b> is similar to <see cref="StringCchVPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchVPrintf_lEx">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintf_lEx</b> is similar to <see cref="StringCchVPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchVPrintf_lExA">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintf_lEx</b> is similar to <see cref="StringCchVPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchVPrintf_lExW">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintf_lEx</b> is similar to <see cref="StringCchVPrintfEx" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="ppszDestEnd">The address of a pointer to the end of <i>pszDest</i>. If <i>ppszDestEnd</i> is non-<b>NULL</b> and any data is copied into the destination buffer, this points to the terminating null character at the end of the string.</param>
    <param name="pcchRemaining">The number of unused characters in <i>pszDest</i>, including the terminating null character. If <i>pcchRemaining</i> is <b>NULL</b>, the count is not kept or returned.</param>
    <param name="dwFlags">
      <para>One or more of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_BEHIND_NULL</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000200</term>
              </listheader>
            </list>
          </description>
          <description>If the function succeeds, the low byte of <i>dwFlags</i> (0) is used to fill the uninitialized portion of <i>pszDest</i> following the terminating null character.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_IGNORE_NULLS</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000100</term>
              </listheader>
            </list>
          </description>
          <description>Treat <b>NULL</b> string pointers like empty strings (TEXT("")).</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_FILL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000400</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, the low byte of <i>dwFlags</i> (0) is used to fill the entire <i>pszDest</i> buffer, and the buffer is null-terminated. In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string returned is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NULL_ON_FAILURE</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00000800</term>
              </listheader>
            </list>
          </description>
          <description>If the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_NO_TRUNCATION</b>
                </term>
              </listheader>
              <listheader>
                <term>0x00001000</term>
              </listheader>
            </list>
          </description>
          <description>As in the case of <b>STRSAFE_NULL_ON_FAILURE</b>, if the function fails, <i>pszDest</i> is set to an empty string (TEXT("")). In the case of a <b>STRSAFE_E_INSUFFICIENT_BUFFER</b> failure, any truncated string is overwritten.</description>
        </listheader>
      </list>
    </param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>, or the destination buffer is already full.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. Depending on the value of <i>dwFlags</i>, the destination buffer may contain a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchVPrintf_l">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintf_l</b> is similar to <see cref="StringCchVPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchVPrintf_lA">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintf_l</b> is similar to <see cref="StringCchVPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
  <member name="Windows.StringCchVPrintf_lW">
    <summary>
      <para>Writes formatted data to the specified string using a pointer to a list of arguments. The size of the destination buffer is provided to the function to ensure that it does not write past the end of this buffer.</para>
      <para>
        <b>StringCchVPrintf_l</b> is similar to <see cref="StringCchVPrintf" /> but includes a parameter for locale information.</para>
    </summary>
    <param name="pszDest">The destination buffer, which receives the formatted, null-terminated string created from <i>pszFormat</i> and <i>argList</i>.</param>
    <param name="cchDest">The size of the destination buffer, in characters. This value must be sufficiently large to accommodate the final formatted string plus 1 to account for the terminating null character. The maximum number of characters allowed is <b>STRSAFE_MAX_CCH</b>.</param>
    <param name="pszFormat">The format string. This string must be null-terminated. For more information, see <a href="https://docs.microsoft.com//cpp/c-runtime-library/format-specification-syntax-printf-and-wprintf-functions">Format Specification Syntax</a>.</param>
    <param name="locale">The locale object. For more information, see <b>_create_locale</b>.</param>
    <param name="argList">The arguments to be inserted into the <i>pszFormat</i> string.</param>
    <returns>
      <para>This function can return one of the following values. It is strongly recommended that you use the <see cref="SUCCEEDED" /> and <see cref="FAILED" /> macros to test the return value of this function.</para>
      <list type="table">
        <listheader>
          <description>Return code</description>
          <description>Description</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>S_OK</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>There was sufficient space for the result to be copied to <i>pszDest</i> without truncation and the buffer is null-terminated.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INVALID_PARAMETER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The value in <i>cchDest</i> is either 0 or larger than <b>STRSAFE_MAX_CCH</b>.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>STRSAFE_E_INSUFFICIENT_BUFFER</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>The copy operation failed due to insufficient buffer space. The destination buffer contains a truncated, null-terminated version of the intended result. In situations where truncation is acceptable, this may not necessarily be seen as a failure condition.</description>
        </listheader>
      </list>
    </returns>
  </member>
</doc>