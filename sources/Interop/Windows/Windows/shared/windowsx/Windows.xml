<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information. -->
<!-- Ported from https://github.com/MicrosoftDocs/sdk-api/ -->
<doc>
  <member name="Windows.Button_Enable">
    <summary>Enables or disables a button.</summary>
    <param name="hwndCtl">A handle to the button control.</param>
    <param name="fEnable">
      <b>TRUE</b> to enable the button, or <b>FALSE</b> to disable it.</param>
  </member>
  <member name="Windows.Button_GetCheck">
    <summary>Gets the check state of a radio button or check box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/bm-getcheck">BM_GETCHECK</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the button control.</param>
  </member>
  <member name="Windows.Button_GetState">
    <summary>Retrieves the state of a button or check box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/bm-getstate">BM_GETSTATE</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the button control.</param>
  </member>
  <member name="Windows.Button_GetText">
    <summary>Gets the text of a button.</summary>
    <param name="hwndCtl">A handle to the button control.</param>
    <param name="lpch">Pointer to the buffer that will receive the text.</param>
    <param name="cchMax">The maximum number of characters to copy to the buffer, including the NULL terminator.</param>
  </member>
  <member name="Windows.Button_GetTextLength">
    <summary>Gets the number of characters in the text of a button.</summary>
    <param name="hwndCtl">A handle to the button control.</param>
  </member>
  <member name="Windows.Button_SetCheck">
    <summary>Sets the check state of a radio button or check box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/bm-setcheck">BM_SETCHECK</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the button control.</param>
    <param name="check">
      <para>The check state. This parameter can be one of the following values.</para>
      <list type="table">
        <listheader>
          <description>Value</description>
          <description>Meaning</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BST_CHECKED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the button state to checked.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BST_INDETERMINATE</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the button state to grayed, indicating an indeterminate state. Use this value only if the button has the <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_3STATE</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">BS_AUTO3STATE</a> style.</description>
        </listheader>
        <listheader>
          <description>
            <list type="bullet">
              <listheader>
                <term>
                  <b>BST_UNCHECKED</b>
                </term>
              </listheader>
            </list>
          </description>
          <description>Sets the button state to cleared.</description>
        </listheader>
      </list>
    </param>
  </member>
  <member name="Windows.Button_SetState">
    <summary>Sets the highlight state of a button. The highlight state indicates whether the button is highlighted as if the user had pushed it. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/bm-setstate">BM_SETSTATE</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the button control.</param>
    <param name="state">
      <b>TRUE</b> to highlight the button; otherwise <b>FALSE</b>.</param>
  </member>
  <member name="Windows.Button_SetStyle">
    <summary>Sets the style of a button. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/bm-setstyle">BM_SETSTYLE</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the button control.</param>
    <param name="style">The button style. This parameter can be a combination of button styles. For a table of button styles, see <a href="https://docs.microsoft.com//windows/desktop/Controls/button-styles">Button Styles</a>.</param>
    <param name="fRedraw">
      <b>TRUE</b> to redraw the button; otherwise <b>FALSE</b>.</param>
  </member>
  <member name="Windows.Button_SetText">
    <summary>Sets the text of a button.</summary>
    <param name="hwndCtl">A handle to the button control.</param>
    <param name="lpsz">A pointer to a null-terminated string to be used as the button text.</param>
  </member>
  <member name="Windows.ComboBox_AddItemData">
    <summary>Adds item data to the list in a combo box at the specified location. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-addstring">CB_ADDSTRING</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="data">A pointer to the item data to add.</param>
  </member>
  <member name="Windows.ComboBox_AddString">
    <summary>Adds a string to a list in a combo box. If the combo box does not have the <a href="https://docs.microsoft.com//windows/desktop/Controls/combo-box-styles">CBS_SORT</a> style, the string is added to the end of the list. Otherwise, the string is inserted into the list and the list is sorted. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-addstring">CB_ADDSTRING</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="lpsz">The string to add.</param>
  </member>
  <member name="Windows.ComboBox_DeleteString">
    <summary>Deletes the item at the specified location in a list in a combo box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-deletestring">CB_DELETESTRING</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">The zero-based index of the item to delete.</param>
  </member>
  <member name="Windows.ComboBox_Dir">
    <summary>Adds names to the list displayed by a combo box. The macro adds the names of directories and files that match a specified string and set of file attributes. It can also add mapped drive letters to the list in a combo box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-dir">CB_DIR</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="attrs">The attributes of the files or directories to be added to the list in a combo box. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-dir">CB_DIR</a>.</param>
    <param name="lpszFileSpec">A pointer to the null-terminated string that specifies an absolute path, relative path, or filename. An absolute path can begin with a drive letter (for example, d:) or a UNC name (for example, \ machinename\ sharename).</param>
  </member>
  <member name="Windows.ComboBox_Enable">
    <summary>Enables or disables a combo box control.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="fEnable">
      <b>TRUE</b> to enable the control, or <b>FALSE</b> to disable it.</param>
  </member>
  <member name="Windows.ComboBox_FindItemData">
    <summary>Finds the first item in a combo box list that has the specified item data. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-findstring">CB_FINDSTRING</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="indexStart">The zero-based index of the item before the first item to be searched. When the search reaches the bottom of the list, it continues searching from the top of the list back to the item specified by the <i>indexStart</i> parameter. If <i>indexStart</i> is –1, the entire list is searched from the beginning.</param>
    <param name="data">The data to find.</param>
  </member>
  <member name="Windows.ComboBox_FindString">
    <summary>Finds the first string in a combo box list that begins with the specified string. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-findstring">CB_FINDSTRING</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="indexStart">The zero-based index of the item before the first item to be searched. When the search reaches the bottom of the list, it continues searching from the top of the list back to the item specified by the <i>indexStart</i> parameter. If <i>indexStart</i> is –1, the entire list is searched from the beginning.</param>
    <param name="lpszFind">The string to find.</param>
  </member>
  <member name="Windows.ComboBox_FindStringExact">
    <summary>Finds the first string in a combo box list that exactly matches the specified string, except that the search is not case sensitive. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-findstringexact">CB_FINDSTRINGEXACT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="indexStart">The zero-based index of the item before the first item to be searched. When the search reaches the bottom of the list, it continues searching from the top of the list back to the item specified by the <i>indexStart</i> parameter. If <i>indexStart</i> is –1, the entire list is searched from the beginning.</param>
    <param name="lpszFind">The string to find.</param>
  </member>
  <member name="Windows.ComboBox_GetCount">
    <summary>Gets the number of items in the list box of a combo box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-getcount">CB_GETCOUNT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.ComboBox_GetCurSel">
    <summary>Gets the index of the currently selected item in a combo box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-getcursel">CB_GETCURSEL</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.ComboBox_GetDroppedControlRect">
    <summary>Retrieves the screen coordinates of a combo box in its dropped-down state. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-getdroppedcontrolrect">CB_GETDROPPEDCONTROLRECT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that receives the coordinates of the combo box in its dropped-down state.</param>
  </member>
  <member name="Windows.ComboBox_GetDroppedState">
    <summary>Ascertains whether the drop list in a combo box control is visible. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-getdroppedstate">CB_GETDROPPEDSTATE</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the combo box control.</param>
  </member>
  <member name="Windows.ComboBox_GetExtendedUI">
    <summary>Ascertains whether a combo box is using the default user interface (UI) or the extended UI. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-getextendedui">CB_GETEXTENDEDUI</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.ComboBox_GetItemData">
    <summary>Gets the application-defined value associated with the specified list item in a combo box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-getitemdata">CB_GETITEMDATA</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">The zero-based index of the item.</param>
  </member>
  <member name="Windows.ComboBox_GetItemHeight">
    <summary>Retrieves the height of list items in a combo box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-getitemheight">CB_GETITEMHEIGHT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.ComboBox_GetLBText">
    <summary>Gets a string from a list in a combo box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-getlbtext">CB_GETLBTEXT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">The zero-based index of the item.</param>
    <param name="lpszBuffer">A pointer to the buffer that will receive the string. The buffer must have sufficient space for the string and a terminating null character. Before allocating the buffer, you can call <see cref="ComboBox_GetLBTextLen" /> to retrieve the length of the string.</param>
  </member>
  <member name="Windows.ComboBox_GetLBTextLen">
    <summary>Gets the length of a string in the list in a combo box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-getlbtextlen">CB_GETLBTEXTLEN</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">The zero-based index of the item.</param>
  </member>
  <member name="Windows.ComboBox_GetText">
    <summary>Retrieves the text from a combo box control.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="lpch">A pointer to the buffer that will receive the text.</param>
    <param name="cchMax">The maximum number of characters to copy to the buffer, including the NULL terminator.</param>
  </member>
  <member name="Windows.ComboBox_GetTextLength">
    <summary>Gets the number of characters in the text of a combo box.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.ComboBox_InsertItemData">
    <summary>Inserts item data in a list in a combo box at the specified location. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-insertstring">CB_INSERTSTRING</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">The zero-based index in the list at which to insert the item data, or –1 to add it to the end of the list.</param>
    <param name="data">The item data to insert.</param>
  </member>
  <member name="Windows.ComboBox_InsertString">
    <summary>Adds a string to a list in a combo box at the specified location. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-insertstring">CB_INSERTSTRING</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">The zero-based index at which to insert the string, or –1 to add it to the end of the list.</param>
    <param name="lpsz">The string to add.</param>
  </member>
  <member name="Windows.ComboBox_LimitText">
    <summary>Limits the length of the text the user may type into the edit control of a combo box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-limittext">CB_LIMITTEXT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="cchLimit">The maximum number of characters.</param>
  </member>
  <member name="Windows.ComboBox_ResetContent">
    <summary>Removes all items from the list box and edit control of a combo box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-resetcontent">CB_RESETCONTENT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.ComboBox_SelectItemData">
    <summary>Searches a list in a combo box for an item that has the specified item data. If a matching item is found, the item is selected. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-selectstring">CB_SELECTSTRING</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="indexStart">The zero-based index of the item before the first item to be searched. When the search reaches the bottom of the list, it continues searching from the top of the list back to the item specified by the <i>indexStart</i> parameter. If <i>indexStart</i> is –1, the entire list is searched from the beginning.</param>
    <param name="data">The item data to find.</param>
  </member>
  <member name="Windows.ComboBox_SelectString">
    <summary>Searches a list in a combo box for an item that begins with the characters in a specified string. If a matching item is found, the item is selected. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-selectstring">CB_SELECTSTRING</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="indexStart">The zero-based index of the item before the first item to be searched. When the search reaches the bottom of the list, it continues searching from the top of the list back to the item specified by the <i>indexStart</i> parameter. If <i>indexStart</i> is –1, the entire list is searched from the beginning.</param>
    <param name="lpszSelect">The string to find.</param>
  </member>
  <member name="Windows.ComboBox_SetCurSel">
    <summary>Sets the currently selected item in a combo box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-setcursel">CB_SETCURSEL</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">The zero-based index of the item to select, or –1 to clear the selection.</param>
  </member>
  <member name="Windows.ComboBox_SetExtendedUI">
    <summary>Selects either the default user interface (UI) or the extended UI for a combo box that has the <a href="https://docs.microsoft.com//windows/desktop/Controls/combo-box-styles">CBS_DROPDOWN</a> or <a href="https://docs.microsoft.com//windows/desktop/Controls/combo-box-styles">CBS_DROPDOWNLIST</a> style. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-setextendedui">CB_SETEXTENDEDUI</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="flags">Zero to use the default UI, or nonzero to use the extended UI.</param>
  </member>
  <member name="Windows.ComboBox_SetItemData">
    <summary>Sets the application-defined value associated with the specified list item in a combo box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-setitemdata">CB_SETITEMDATA</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">The zero-based index of the item.</param>
    <param name="data">The item data to set.</param>
  </member>
  <member name="Windows.ComboBox_SetItemHeight">
    <summary>Sets the height of list items or the selection field in a combo box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-setitemheight">CB_SETITEMHEIGHT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">The component of the combo box for which to set the height. This parameter must be –1 to set the height of the selection field. It must be zero to set the height of list items, unless the combo box has the <a href="https://docs.microsoft.com//windows/desktop/Controls/combo-box-styles">CBS_OWNERDRAWVARIABLE</a> style. In that case, the <i>index</i> parameter is the zero-based index of a specific list item.</param>
    <param name="cyItem">The height in pixels.</param>
  </member>
  <member name="Windows.ComboBox_SetText">
    <summary>Sets the text of a combo box.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="lpsz">A pointer to a null-terminated string to be used as the control text.</param>
  </member>
  <member name="Windows.ComboBox_ShowDropdown">
    <summary>Shows or hides the list in a combo box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/cb-showdropdown">CB_SHOWDROPDOWN</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="fShow">
      <b>TRUE</b> to show the dropdown, or <b>FALSE</b> to hide it.</param>
  </member>
  <member name="Windows.DeleteFont">
    <summary>The <b>DeleteFont</b> macro deletes a font object, freeing all system resources associated with the font object.</summary>
    <param name="hfont">A handle to the font object.</param>
  </member>
  <member name="Windows.Edit_CanUndo">
    <summary>Determines whether there are any actions in the undo queue of an edit or rich edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-canundo">EM_CANUNDO</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.Edit_EmptyUndoBuffer">
    <summary>Resets the undo flag of an edit or rich edit control. The undo flag is set whenever an operation within the edit control can be undone. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-emptyundobuffer">EM_EMPTYUNDOBUFFER</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.Edit_Enable">
    <summary>Enables or disables an edit control.</summary>
    <param name="hwndCtl">A handle to the edit control.</param>
    <param name="fEnable">
      <b>TRUE</b> to enable the control, or <b>FALSE</b> to disable it.</param>
  </member>
  <member name="Windows.Edit_FmtLines">
    <summary>Sets a flag that determines whether text retrieved from a multiline edit control includes soft line-break characters. A soft line break consists of two carriage returns and a line feed and is inserted at the end of a line that is broken because of word wrapping. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-fmtlines">EM_FMTLINES</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="fAddEOL">
      <b>TRUE</b> to insert line breaks; otherwise <b>FALSE</b>.</param>
  </member>
  <member name="Windows.Edit_GetFirstVisibleLine">
    <summary>Gets the index of the uppermost visible line in a multiline edit or rich edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-getfirstvisibleline">EM_GETFIRSTVISIBLELINE</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.Edit_GetHandle">
    <summary>Gets a handle to the memory currently allocated for the text of a multiline edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-gethandle">EM_GETHANDLE</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.Edit_GetLine">
    <summary>Retrieves a line of text from an edit or rich edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-getline">EM_GETLINE</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="line">The zero-based index of the line. This parameter is ignored by a single-line edit control.</param>
    <param name="lpch">A pointer to a buffer that receives the string.</param>
    <param name="cchMax">The maximum number of characters to be copied to the buffer.</param>
  </member>
  <member name="Windows.Edit_GetLineCount">
    <summary>Gets the number of lines in the text of an edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-getlinecount">EM_GETLINECOUNT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.Edit_GetModify">
    <summary>Gets the state of an edit or rich edit control's modification flag. The flag indicates whether the contents of the control have been modified. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-getmodify">EM_GETMODIFY</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.Edit_GetPasswordChar">
    <summary>Gets the password character for an edit or rich edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-getpasswordchar">EM_GETPASSWORDCHAR</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.Edit_GetRect">
    <summary>Gets the formatting rectangle of an edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-getrect">EM_GETRECT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that receives the formatting rectangle.</param>
  </member>
  <member name="Windows.Edit_GetSel">
    <summary>Gets the starting and ending character positions of the current selection in an edit or rich edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-getsel">EM_GETSEL</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.Edit_GetText">
    <summary>Gets the text of an edit control.</summary>
    <param name="hwndCtl">A handle to the edit control.</param>
    <param name="lpch">A pointer to the buffer that will receive the text.</param>
    <param name="cchMax">The maximum number of characters to copy to the buffer, including the NULL terminator.</param>
  </member>
  <member name="Windows.Edit_GetTextLength">
    <summary>Gets the number of characters in the text of an edit control.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.Edit_GetWordBreakProc">
    <summary>Retrieves the address of an edit or rich edit control's Wordwrap function. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-getwordbreakproc">EM_GETWORDBREAKPROC</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.Edit_LimitText">
    <summary>Limits the length of text that can be entered into an edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-limittext">EM_LIMITTEXT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="cchMax">The maximum number of characters.</param>
  </member>
  <member name="Windows.Edit_LineFromChar">
    <summary>Gets the index of the line that contains the specified character index in a multiline edit or rich edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-linefromchar">EM_LINEFROMCHAR</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="ich">The zero-based index of the character from the beginning of the text in the control.</param>
  </member>
  <member name="Windows.Edit_LineIndex">
    <summary>Gets the character index of the first character of a specified line in a multiline edit or rich edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/em-lineindex">EM_LINEINDEX</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="line">The zero-based line number. A value of –1 specifies the current line number (the line that contains the caret).</param>
  </member>
  <member name="Windows.Edit_LineLength">
    <summary>Retrieves the length, in characters, of a line in an edit or rich edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-linelength">EM_LINELENGTH</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="line">The zero-based index of the line.</param>
  </member>
  <member name="Windows.Edit_ReplaceSel">
    <summary>Replaces the selected text in an edit control or a rich edit control with the specified text. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-replacesel">EM_REPLACESEL</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="lpszReplace">A pointer to a null-terminated string containing the replacement text.</param>
  </member>
  <member name="Windows.Edit_Scroll">
    <summary>Scrolls the text vertically in a multiline edit or rich edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-scroll">EM_SCROLL</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="dv">The amount to scroll vertically.</param>
    <param name="dh">The amount to scroll horizontally.</param>
  </member>
  <member name="Windows.Edit_ScrollCaret">
    <summary>Scrolls the caret into view in an edit or rich edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-scrollcaret">EM_SCROLLCARET</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.Edit_SetHandle">
    <summary>Sets the handle of the memory that will be used by a multiline edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-sethandle">EM_SETHANDLE</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="h">A handle to the memory buffer the edit control uses to store the currently displayed text instead of allocating its own memory. If necessary, the control reallocates this memory.</param>
  </member>
  <member name="Windows.Edit_SetModify">
    <summary>Sets or clears the modification flag for an edit control. The modification flag indicates whether the text within the edit control has been modified. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-setmodify">EM_SETMODIFY</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="fModified">
      <b>TRUE</b> if the text has been modified; otherwise <b>FALSE</b>.</param>
  </member>
  <member name="Windows.Edit_SetPasswordChar">
    <summary>Sets or removes the password character for an edit or rich edit control. When a password character is set, that character is displayed in place of the characters typed by the user. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-setpasswordchar">EM_SETPASSWORDCHAR</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="ch">The character to be displayed in place of the characters typed by the user. If this parameter is zero, the control removes the current password character and displays the characters typed by the user.</param>
  </member>
  <member name="Windows.Edit_SetReadOnly">
    <summary>Sets or removes the read-only style (ES_READONLY) of an edit or rich edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-setreadonly">EM_SETREADONLY</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="fReadOnly">
      <b>TRUE</b> to set the control to read-only; <b>FALSE</b> to remove the read-only style.</param>
  </member>
  <member name="Windows.Edit_SetRect">
    <summary>Sets the formatting rectangle of an edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-setrect">EM_SETRECT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that specifies the new dimensions of the rectangle. If this parameter is <b>NULL</b>, the formatting rectangle is set to its default values.</param>
  </member>
  <member name="Windows.Edit_SetRectNoPaint">
    <summary>Sets the formatting rectangle of a multiline edit control. This macro is equivalent to <see cref="Edit_SetRect" />, except that it does not redraw the edit control window. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-setrectnp">EM_SETRECTNP</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that specifies the dimensions of the rectangle. If this parameter is <b>NULL</b>, the formatting rectangle is set to its default values.</param>
  </member>
  <member name="Windows.Edit_SetSel">
    <summary>Selects a range of characters in an edit or rich edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-setsel">EM_SETSEL</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="ichStart">The starting character position of the selection.</param>
    <param name="ichEnd">The ending character position of the selection.</param>
  </member>
  <member name="Windows.Edit_SetTabStops">
    <summary>Sets the tab stops in a multiline edit or rich edit control. When text is copied to the control, any tab character in the text causes space to be generated up to the next tab stop. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-settabstops">EM_SETTABSTOPS</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="cTabs">The number of tab stops contained in the array. If this parameter is zero, the <i>lpTabs</i> parameter is ignored and default tab stops are set at every 32 dialog template units. If this parameter is 1, tab stops are set at every <i>n</i> dialog template units, where <i>n</i> is the distance pointed to by the <i>lpTabs</i> parameter. If this parameter is greater than 1, <i>lpTabs</i> is a pointer to an array of tab stops.</param>
    <param name="lpTabs">A pointer to an array of unsigned integers specifying the tab stops, in dialog template units. If <i>cTabs</i> is 1, this parameter is a pointer to an unsigned integer containing the distance between all tab stops, in dialog template units.</param>
  </member>
  <member name="Windows.Edit_SetText">
    <summary>Sets the text of an edit control.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="lpsz">A pointer to a null-terminated string to be set as the text in the control.</param>
  </member>
  <member name="Windows.Edit_SetWordBreakProc">
    <summary>Replaces an edit control's default Wordwrap function with an application-defined Wordwrap function. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-setwordbreakproc">EM_SETWORDBREAKPROC</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="lpfnWordBreak">The address of the application-defined Wordwrap function. For more information about breaking lines, see the description of the <a href="https://docs.microsoft.com//windows/desktop/api/winuser/nc-winuser-editwordbreakproca">EditWordBreakProc</a> callback function.</param>
  </member>
  <member name="Windows.Edit_Undo">
    <summary>Undoes the last operation in the undo queue of an edit or rich edit control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/em-undo">EM_UNDO</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.GET_X_LPARAM">
    <summary>Retrieves the signed x-coordinate from the specified <b>LPARAM</b> value.</summary>
    <param name="lp">The data from which the x-coordinate is to be extracted.</param>
    <returns>X-coordinate.</returns>
  </member>
  <member name="Windows.GET_Y_LPARAM">
    <summary>Retrieves the signed y-coordinate from the given <b>LPARAM</b> value.</summary>
    <param name="lp">The data from which the y-coordinate is to be extracted.</param>
    <returns>Y-coordinate.</returns>
  </member>
  <member name="Windows.ListBox_AddItemData">
    <summary>Adds item data to the list box at the specified location. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-addstring">LB_ADDSTRING</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="data">A pointer to the item data to add.</param>
  </member>
  <member name="Windows.ListBox_AddString">
    <summary>Adds a string to a list box. If the list box does not have the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-box-styles">LBS_SORT</a> style, the string is added to the end of the list. Otherwise, the string is inserted into the list and the list is sorted. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-addstring">LB_ADDSTRING</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="lpsz">The string to add.</param>
  </member>
  <member name="Windows.ListBox_DeleteString">
    <summary>Deletes the item at the specified location in a list box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-deletestring">LB_DELETESTRING</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">The zero-based index of the item to delete.</param>
  </member>
  <member name="Windows.ListBox_Dir">
    <summary>Adds names to the list displayed by a list box. The macro adds the names of directories and files that match a specified string and set of file attributes. It can also add mapped drive letters to the list box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-dir">LB_DIR</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="attrs">The attributes of the files or directories to be added to the list box. For more information, see <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-dir">LB_DIR</a>.</param>
    <param name="lpszFileSpec">A pointer to the null-terminated string that specifies an absolute path, relative path, or filename. An absolute path can begin with a drive letter (for example, d:) or a UNC name (for example, \ machinename\ sharename).</param>
  </member>
  <member name="Windows.ListBox_Enable">
    <summary>Enables or disables a list box control.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="fEnable">
      <b>TRUE</b> to enable the control, or <b>FALSE</b> to disable it.</param>
  </member>
  <member name="Windows.ListBox_FindItemData">
    <summary>Finds the first item in a list box that has the specified item data. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-findstring">LB_FINDSTRING</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="indexStart">The zero-based index of the item before the first item to be searched. When the search reaches the bottom of the list box, it continues searching from the top of the list box back to the item specified by the <i>indexStart</i> parameter. If <i>indexStart</i> is –1, the entire list box is searched from the beginning.</param>
    <param name="data">The data to find.</param>
  </member>
  <member name="Windows.ListBox_FindString">
    <summary>Finds the first string in a list box that begins with the specified string. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-findstring">LB_FINDSTRING</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="indexStart">The zero-based index of the item before the first item to be searched. When the search reaches the bottom of the list box, it continues searching from the top of the list box back to the item specified by the <i>indexStart</i> parameter. If <i>indexStart</i> is –1, the entire list box is searched from the beginning.</param>
    <param name="lpszFind">The string to find.</param>
  </member>
  <member name="Windows.ListBox_FindStringExact">
    <summary>Finds the first list box string that exactly matches the specified string, except that the search is not case sensitive. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-findstringexact">LB_FINDSTRINGEXACT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="indexStart">The zero-based index of the item before the first item to be searched. When the search reaches the bottom of the list box, it continues searching from the top of the list box back to the item specified by the <i>indexStart</i> parameter. If <i>indexStart</i> is –1, the entire list box is searched from the beginning.</param>
    <param name="lpszFind">The string to find.</param>
  </member>
  <member name="Windows.ListBox_GetCaretIndex">
    <summary>Retrieves the index of the list box item that has the focus rectangle in a multiple-selection list box. The item may or may not be selected. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/lb-getcaretindex">LB_GETCARETINDEX</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.ListBox_GetCount">
    <summary>Gets the number of items in a list box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-getcount">LB_GETCOUNT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.ListBox_GetCurSel">
    <summary>Gets the index of the currently selected item in a single-selection list box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-getcursel">LB_GETCURSEL</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.ListBox_GetHorizontalExtent">
    <summary>Gets the width that a list box can be scrolled horizontally (the scrollable width) if the list box has a horizontal scroll bar. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-gethorizontalextent">LB_GETHORIZONTALEXTENT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.ListBox_GetItemData">
    <summary>Gets the application-defined value associated with the specified list box item. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-getitemdata">LB_GETITEMDATA</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">The zero-based index of the item.</param>
  </member>
  <member name="Windows.ListBox_GetItemHeight">
    <summary>Retrieves the height of items in a list box. If the list box has the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-box-styles">LBS_OWNERDRAWVARIABLE</a> style, this macro gets the height of the specified item; otherwise, it gets the height of all items. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-getitemheight">LB_GETITEMHEIGHT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">The zero-based index of the item. If the list box does not have the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-box-styles">LBS_OWNERDRAWVARIABLE</a> style, set this parameter to zero.</param>
  </member>
  <member name="Windows.ListBox_GetItemRect">
    <summary>Gets the dimensions of the rectangle that bounds a list box item as it is currently displayed in the list box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-getitemrect">LB_GETITEMRECT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">The zero-based index of the item in the list box.</param>
    <param name="lprc">A pointer to a <see cref="RECT" /> structure that receives the client coordinates for the item in the list box.</param>
  </member>
  <member name="Windows.ListBox_GetSel">
    <summary>Gets the selection state of an item. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-getsel">LB_GETSEL</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">The zero-based index of the item.</param>
  </member>
  <member name="Windows.ListBox_GetSelCount">
    <summary>Gets the count of selected items in a multiple-selection list box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-getselcount">LB_GETSELCOUNT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.ListBox_GetSelItems">
    <summary>Gets the indexes of selected items in a multiple-selection list box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-getselitems">LB_GETSELITEMS</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="cItems">The maximum number of selected items whose item numbers are to be placed in the buffer.</param>
    <param name="lpItems">A pointer to a buffer large enough for the number of integers specified by <i>cItems</i>.</param>
  </member>
  <member name="Windows.ListBox_GetText">
    <summary>Gets a string from a list box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-gettext">LB_GETTEXT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">The zero-based index of the item.</param>
    <param name="lpszBuffer">A pointer to the buffer that will receive the string. The buffer must have sufficient space for the string and a terminating null character. Before allocating the buffer, you can call <see cref="ListBox_GetTextLen" /> to retrieve the length of the string.</param>
  </member>
  <member name="Windows.ListBox_GetTextLen">
    <summary>Gets the length of a string in a list box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-gettextlen">LB_GETTEXTLEN</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">The zero-based index of the item.</param>
  </member>
  <member name="Windows.ListBox_GetTopIndex">
    <summary>Gets the index of the first visible item in a list box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/lb-gettopindex">LB_GETTOPINDEX</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.ListBox_InsertItemData">
    <summary>Inserts item data to a list box at the specified location. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-insertstring">LB_INSERTSTRING</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">The zero-based index in the list at which to insert the item data, or –1 to add it to the end of the list.</param>
    <param name="data">A pointer to the item data to insert.</param>
  </member>
  <member name="Windows.ListBox_InsertString">
    <summary>Adds a string to a list box at the specified location. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-insertstring">LB_INSERTSTRING</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">The zero-based index at which to insert the string, or –1 to add it to the end of the list.</param>
    <param name="lpsz">The string to add.</param>
  </member>
  <member name="Windows.ListBox_ResetContent">
    <summary>Removes all items from a list box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-resetcontent">LB_RESETCONTENT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.ListBox_SelectItemData">
    <summary>Searches a list box for an item that has the specified item data. If a matching item is found, the item is selected. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-selectstring">LB_SELECTSTRING</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="indexStart">The zero-based index of the item before the first item to be searched. When the search reaches the bottom of the list box, it continues searching from the top of the list box back to the item specified by the <i>indexStart</i> parameter. If <i>indexStart</i> is –1, the entire list box is searched from the beginning.</param>
    <param name="data">The item data to find.</param>
  </member>
  <member name="Windows.ListBox_SelectString">
    <summary>Searches a list box for an item that begins with the characters in a specified string. If a matching item is found, the item is selected. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-selectstring">LB_SELECTSTRING</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="indexStart">The zero-based index of the item before the first item to be searched. When the search reaches the bottom of the list box, it continues searching from the top of the list box back to the item specified by the <i>indexStart</i> parameter. If <i>indexStart</i> is –1, the entire list box is searched from the beginning.</param>
    <param name="lpszFind">The string to find.</param>
  </member>
  <member name="Windows.ListBox_SelItemRange">
    <summary>Selects or deselects one or more consecutive items in a multiple-selection list box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-selitemrange">LB_SELITEMRANGE</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="fSelect">
      <b>TRUE</b> to select the range of items, or <b>FALSE</b> to deselect it.</param>
    <param name="first">The zero-based index of the first item to select.</param>
    <param name="last">The zero-based index of the last item to select.</param>
  </member>
  <member name="Windows.ListBox_SetCaretIndex">
    <summary>Sets the focus rectangle to the item at the specified index in a multiple-selection list box. If the item is not visible, it is scrolled into view. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/lb-setcaretindex">LB_SETCARETINDEX</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">the zero-based index of the list box item that is to receive the focus rectangle.</param>
  </member>
  <member name="Windows.ListBox_SetColumnWidth">
    <summary>Sets the width of all columns in a multiple-column list box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-setcolumnwidth">LB_SETCOLUMNWIDTH</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="cxColumn">The width, in pixels, of all columns.</param>
  </member>
  <member name="Windows.ListBox_SetCurSel">
    <summary>Sets the currently selected item in a single-selection list box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-setcursel">LB_SETCURSEL</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">The zero-based index of the item to select, or –1 to clear the selection.</param>
  </member>
  <member name="Windows.ListBox_SetHorizontalExtent">
    <summary>Set the width by which a list box can be scrolled horizontally (the scrollable width). If the width of the list box is smaller than this value, the horizontal scroll bar horizontally scrolls items in the list box. If the width of the list box is equal to or greater than this value, the horizontal scroll bar is hidden. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-sethorizontalextent">LB_SETHORIZONTALEXTENT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="cxExtent">The number of pixels by which the list box can be scrolled.</param>
  </member>
  <member name="Windows.ListBox_SetItemData">
    <summary>Sets the application-defined value associated with the specified list box item. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-setitemdata">LB_SETITEMDATA</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">The zero-based index of the item.</param>
    <param name="data">The item data to set.</param>
  </member>
  <member name="Windows.ListBox_SetItemHeight">
    <summary>Sets the height of items in a list box. If the list box has the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-box-styles">LBS_OWNERDRAWVARIABLE</a> style, this macro sets the height of the specified item; otherwise, it sets the height of all items. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-setitemheight">LB_SETITEMHEIGHT</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="index">The zero-based index of the item. If the list box does not have the <a href="https://docs.microsoft.com//windows/desktop/Controls/list-box-styles">LBS_OWNERDRAWVARIABLE</a> style, set this parameter to zero.</param>
    <param name="cy">The height of the item or items, in pixels.</param>
  </member>
  <member name="Windows.ListBox_SetSel">
    <summary>Selects or deselects an item in a multiple-selection list box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-setsel">LB_SETSEL</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="fSelect">
      <b>TRUE</b> to select the item, or <b>FALSE</b> to deselect it.</param>
    <param name="index">The zero-based index of the item.</param>
  </member>
  <member name="Windows.ListBox_SetTabStops">
    <summary>Sets the tab-stop positions in a list box. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/lb-settabstops">LB_SETTABSTOPS</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="cTabs">The number of elements in the <i>lpTabs</i> array.</param>
    <param name="lpTabs">A pointer to an array of integers containing the tab stops. The integers represent the number of quarters of the average character width for the font that is selected into the list box. For example, a tab stop of 4 is placed at 1.0 character units, and a tab stop of 6 is placed at 1.5 average character units. However, if the list box is part of a dialog box, the integers are in dialog template units. The tab stops must be sorted in ascending order; backward tabs are not allowed.</param>
  </member>
  <member name="Windows.ListBox_SetTopIndex">
    <summary>Ensures that the specified item in a list box is visible. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/controls/lb-settopindex">LB_SETTOPINDEX</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="indexTop">The zero-based index of the item to put at the top of the visible part of the list.</param>
  </member>
  <member name="Windows.ScrollBar_Enable">
    <summary>Enables or disables a scroll bar control.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="flags">Flags that specify the arrows affected and whether they are enabled or disabled. See the <i>wArrows</i> parameter of <see cref="EnableScrollBar" /> for more information.</param>
  </member>
  <member name="Windows.ScrollBar_GetPos">
    <summary>
      <para>Retrieves the position of the scroll box (thumb) in the specified scroll bar.</para>
      <div>
        <b>Note</b>  This macro expands to a call to the <see cref="GetScrollPos" /> function, which is deprecated. New applications should use the <see cref="GetScrollInfo" /> function.</div>
    </summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.ScrollBar_GetRange">
    <summary>
      <para>Gets the range of a scroll bar.</para>
      <div>
        <b>Note</b>  This macro expands to a call to the <see cref="GetScrollRange" /> function, which is deprecated. New applications should use the <see cref="GetScrollInfo" /> function.</div>
    </summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="lpposMin">Address of a variable that receives the minimum value of the scroll bar.</param>
    <param name="lpposMax">Address of a variable that receives the maximum value of the scroll bar.</param>
  </member>
  <member name="Windows.ScrollBar_SetPos">
    <summary>
      <para>Sets the position of the scroll box (thumb) in the specified scroll bar and, if requested, redraws the scroll bar to reflect the new position of the scroll box.</para>
      <div>
        <b>Note</b>  This macro expands to a call to the <see cref="SetScrollPos" /> function, which is deprecated. New applications should use the <see cref="SetScrollInfo" /> function.</div>
    </summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="pos">The new position of the scroll box.</param>
    <param name="fRedraw">
      <b>TRUE</b> to redraw the control; otherwise <b>FALSE</b>.</param>
  </member>
  <member name="Windows.ScrollBar_SetRange">
    <summary>
      <para>Sets the range of a scroll bar.</para>
      <div>
        <b>Note</b>  This macro expands to a call to the <see cref="SetScrollRange" /> function, which is deprecated. New applications should use the <see cref="SetScrollInfo" /> function.</div>
    </summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="posMin">The minimum value of the scroll bar.</param>
    <param name="posMax">The maximum value of the scroll bar.</param>
    <param name="fRedraw">
      <b>TRUE</b> to redraw the control; otherwise <b>FALSE</b>.</param>
  </member>
  <member name="Windows.ScrollBar_Show">
    <summary>Shows or hides a scroll bar control.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="fShow">
      <b>TRUE</b> to show the control, or <b>FALSE</b> to hide it.</param>
  </member>
  <member name="Windows.SelectFont">
    <summary>The <b>SelectFont</b> macro selects a font object into the specified device context (DC). The new font object replaces the previous font object.</summary>
    <param name="hdc">A handle to the DC.</param>
    <param name="hfont">A handle to the font object to be selected. The font object must have been created using either <see cref="CreateFont" /> or <see cref="CreateFontIndirect" />.</param>
  </member>
  <member name="Windows.Static_Enable">
    <summary>Enables or disables a static control.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="fEnable">
      <b>TRUE</b> to enable the static control, or <b>FALSE</b> to disable it.</param>
  </member>
  <member name="Windows.Static_GetIcon">
    <summary>Retrieves a handle to the icon associated with a static control that has the SS_ICON style. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/stm-geticon">STM_GETICON</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="hIcon">A handle to the icon.</param>
  </member>
  <member name="Windows.Static_GetText">
    <summary>Gets the text of a static control.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="lpch">A pointer to the buffer that will receive the text.</param>
    <param name="cchMax">The maximum number of characters to copy to the buffer, including the NULL terminator.</param>
  </member>
  <member name="Windows.Static_GetTextLength">
    <summary>Gets the number of characters in the text of a static control.</summary>
    <param name="hwndCtl">A handle to the control.</param>
  </member>
  <member name="Windows.Static_SetIcon">
    <summary>Sets the icon for a static control. You can use this macro or send the <a href="https://docs.microsoft.com//windows/desktop/Controls/stm-seticon">STM_SETICON</a> message explicitly.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="hIcon">a handle to the icon.</param>
  </member>
  <member name="Windows.Static_SetText">
    <summary>Sets the text of a static control.</summary>
    <param name="hwndCtl">A handle to the control.</param>
    <param name="lpsz">A pointer to a null-terminated string to be used as the static control text.</param>
  </member>
</doc>